===============
WiFi Camera Roll v1.2 iOS - Multiple Web Vulnerabilities

Product & Service Introduction:
===============================
Download or upload photos/videos via WiFi! It is a easy way to wirelessly access your photos/videos in camera roll on devices.
It only needs a web browser and not depends on any other transfer utilities. Just start the app and input the address into the
address bar of your browser, you can browser the photos/videos in camera roll on your device. What`s more, you can upload
photos/videos and it will help you save them into camera roll automatically.
 
- You can browser the photos in camera roll on device
- Download photos in full-size with EXIF metadata
- Upload the specified format images into camera roll
- Optional password protection for the web interface
- One app compatible for both iPhone and iPad
- Support major browsers e.g. Safari, Chrome, IE, etc.
- A web browser is enough and not depends on flash, java, etc.
- [NEW] Download unmodified HD quality video
- [NEW] Upload specified format videos directly into your camera roll
- [NEW] View photo gallery in web browser
 
I`m always keeping this app concise and easy to use. It is just a bridge to connect your iPhone/iPad and computer. All photos and
videos are saved in your system album and your computer. So it is safe and won`t lost even if you accidentally delete this app.
 
(Copy of the Homepage: https://itunes.apple.com/ch/app/wifi-camera-roll/id576954110 )

Affected Product(s):
====================
Apple AppStore
Product: WiFi Camera Roll (iOS) - Application 1.2

Technical Details & Description:
================================
1.1
A local file/path include web vulnerability has been discovered in the official WiFi Camera Roll v1.2 iOS mobile web-application.
The local file include web vulnerability allows remote attackers to unauthorized include local file/path requests or system
specific path commands to compromise the web-application or mobile device.
 
The local file include web vulnerability is located in the vulnerable `qqfile` name value of the `upload files` module (web-interface).
Remote attackers are able to inject own files with malicious filename to compromise the mobile application. The attack vector is
persistent and the request method is POST. The local file/path include execute occcurs in the main file index section after the refresh
of the file upload. The security risk of the local file include web vulnerability is estimated as high(+) with a cvss (common vulnerability
scoring system) count of 7.8(+)|(-)7.9.
 
Exploitation of the local file include web vulnerability requires no user interaction or privileged web-application user account with password.
Successful exploitation of the local web vulnerability results in mobile application or connected device component compromise by unauthorized
local file include web attacks.
 
Request Method(s):
                [+] [POST]
 
Vulnerable Input(s):
                [+] Upload Files
 
Vulnerable Parameter(s):
                [+] filename > qqfile
 
Affected Module(s):
                [+] Access from Computer (File Dir Index List - Folder/Category to  path=/)
 
 
1.2
An arbitrary file upload web vulnerability has been discovered in the official WiFi Camera Roll v1.2 iOS mobile web-application.
The arbitrary file upload issue allows remote attackers to upload files with multiple extensions to bypass the web-server or system validation.
 
The vulnerability is located in the `upload file` (video and images) module. Remote attackers are able to upload a php or js web-shells by renaming
the file with multiple extensions to bypass the file restriction mechanism. The attacker uploads for example a web-shell with the following name
and extension `image.gif.jpg.html.js.aspx.jpg`. After the upload the attacker needs to open the file in the web application. He deletes the .jpg &
.gif file extension and can access the application with elevated access rights. The security risk of the arbitrary file upload web vulnerability is
estimated as high with a cvss (common vulnerability scoring system) count of 6.4(+)|(-)6.5.
 
Exploitation of the arbitrary file upload web vulnerability requires no user interaction or privilege application user account with password.
Successful exploitation of the vulnerability results in unauthorized file access because of a compromise after the upload of web-shells.
 
 
Request Method(s):
                [+] [POST]
 
Vulnerable Module(s):
                [+] Upload (GUI)
 
Vulnerable Parameter(s):
                [+] filename > qqfile (multiple extensions)
 
Affected Module(s):
                [+] File Dir Upload Ajax (http://localhost:8880/upload.ajax?qqfile=)
 
 
Proof of Concept (PoC):
=======================
The arbitrary file upload and local file include web vulnerability can be exploited by remote attackers without user interaction or privileged web user account.
For security demonstration or to reproduce the remote vulnerabilities follow the provided information and steps below.
 
1.1
PoC: File Include Vulnerability
http://localhost:8880/upload.ajax?qqfile=%20../\../\[LOCAL FILE/PATH INCLUDE VULNERABILITY!].jpg
 
1.2
PoC: Arbitrary File Upload
http://localhost:8880/upload.ajax?qqfile=5d476cebd60705.gif.jpg.html.js.aspx.jpg
 
 
--- PoC 1.1 Session Logs [POST] ---
Status: pending[]
POST http://localhost:8880/upload.ajax?qqfile=[LOCAL FILE/PATH INCLUDE VULNERABILITY!].jpg Load Flags[LOAD_BYPASS_CACHE  ] Gr��e des Inhalts[unknown] Mime Type[unknown]
   Request Header:
      Host[localhost:8880]
      User-Agent[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:26.0) Gecko/20100101 Firefox/26.0]
      Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
      Accept-Language[de-de,de;q=0.8,en-us;q=0.5,en;q=0.3]
      Accept-Encoding[gzip, deflate]
      X-Requested-With[XMLHttpRequest]
      X-File-Name[8f11a581d505d476cebd607056e4c167621c2e61.jpg]
      Cache-Control[no-cache]
      Content-Type[application/octet-stream]
      X-Mime-Type[image/jpeg]
      Referer[http://localhost:8880/upload.html]
      Content-Length[24386]
   POST-Daten:
      POST_DATA[����
 
 
--- PoC 1.2 Session Logs [POST] ---
Status: pending[]
POST http://localhost:8880/upload.ajax?qqfile=5d476cebd60705.gif.jpg.html.js.aspx.jpg Load Flags[LOAD_BYPASS_CACHE  ] Gr��e des Inhalts[unknown] Mime Type[unknown]
   Request Header:
      Host[localhost:8880]
      User-Agent[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:26.0) Gecko/20100101 Firefox/26.0]
      Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
      Accept-Language[de-de,de;q=0.8,en-us;q=0.5,en;q=0.3]
      Accept-Encoding[gzip, deflate]
      X-Requested-With[XMLHttpRequest]
      X-File-Name[8f11a581d505d476cebd607056e4c167621c2e61.jpg]
      Cache-Control[no-cache]
      Content-Type[application/octet-stream]
      X-Mime-Type[image/jpeg]
      Referer[http://localhost:8880/upload.html]
      Content-Length[24386]
   POST-Daten:
      POST_DATA[����
 
Reference(s):
http://localhost:8880/
http://localhost:8880/upload.html
http://localhost:8880/upload.ajax?qqfile=
 
 
Solution - Fix & Patch:
=======================
1.1
The local file include vulnerability can be patched by a secure parse and encode of the vulnerable filename and qqfile values in the affected upload POST method request.
 
1.2
 
 
Security Risk:
==============
1.1
The security risk fo the local file include web vulnerability in the qqfile and filename values are estimated as high.
 
1.2
The security risk of the arbitrary file upload web vulnerability is estimated as high.

