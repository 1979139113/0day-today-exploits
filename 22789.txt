TestLink <= 1.9.12 (database.class.php) Path Disclosure Weakness
----------------------------------------------------------------


[-] Software Link:

http://testlink.org/


[-] Affected Versions:

Version 1.9.12 and prior versions.


[-] Weakness Description:

The vulnerable code is located in the /lib/functions/database.class.php script:

208.        if(defined(&#039;DBUG_ON&#039;) && DBUG_ON == 1)
209.        {
211.        }
212.        else
213.        {
215.        }

The weakness exists due to this script reveals debug information generated by the "debug_print_backtrace()" function.
This can be exploited to gain knowledge of the web root directory by sending direct requests to certain scripts.


[-] Solution:

Update to version 1.9.13 when will be released or apply these hotfixes: http://mantis.testlink.org/view.php?id=6609


[-] Disclosure Timeline:

[06/10/2014] - Issue reported to http://mantis.testlink.org/view.php?id=6651
[07/10/2014] - Issue fixed in the Git repository: http://goo.gl/AnOAi6
[08/10/2014] - CVE number requested
[11/10/2014] - CVE number assigned
[23/10/2014] - Public disclosure


[-] CVE Reference:

The Common Vulnerabilities and Exposures project (cve.mitre.org)
has assigned the name CVE-2014-8082 to this weakness.

--------------------------------------------------------------------------
TestLink <= 1.9.12 (execSetResults.php) PHP Object Injection Vulnerability
--------------------------------------------------------------------------


[-] Software Link:

http://testlink.org/


[-] Affected Versions:

Version 1.9.12 and prior versions.


[-] Weakness Description:

The vulnerable code is located in the /lib/execute/execSetResults.php script:

428.      if(is_string($args->filter_status) && strlen($args->filter_status) > 1)
429.      {
430.        $args->filter_status = unserialize($args->filter_status);
431.      }

User input passed through the “filter_result_result” request parameter is not properly sanitized before being used in
a call to the “unserialize()” function at line 430. This can be exploited to inject arbitrary PHP objects into the
application scope, and could allow an attacker to delete arbitrary files, carry out Server-Side Request Forgery (SSRF),
SQL Injection, or Local/Remote File Inclusion attacks via specially crafted serialized objects.


[-] Solution:

Update to version 1.9.13 when will be released or apply these hotfixes: http://mantis.testlink.org/view.php?id=6609


[-] Disclosure Timeline:

[06/10/2014] - Issue reported to http://mantis.testlink.org/view.php?id=6651
[07/10/2014] - Issue fixed in the Git repository: http://goo.gl/ptQaqZ
[08/10/2014] - CVE number requested
[11/10/2014] - CVE number assigned
[23/10/2014] - Public disclosure


[-] CVE Reference:

The Common Vulnerabilities and Exposures project (cve.mitre.org)
has assigned the name CVE-2014-8081 to this vulnerability.

