However, the severity of this finding is very LOW. The detail is as follow,

a) Login into an admin account
b) Navigate to Links -> Links Categories
c) Fill up the required details and intercept the request with a BURP
suite.
d) The injectable parameter is slug. If you inject
<script>alert(1)</script> as a value to parameter "slug", the application
strips it off and the value becomes alert1. But if the payload is double
encode then ;-)
<script>alert(1)</script> when converted to
%253cscript%253ealert%25281%2529%253c%252fscript%253e bypasses xss
protection. The following request shows the raw burp request along with the
vulnerable parameter and payload marked in bold.

BURP REQUEST

Host: localhost
User-Agent: Mozilla/5.0 (X11; Linux i686; rv:11.0) Gecko/20100101 Firefox/11.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip, deflate
Proxy-Connection: keep-alive
Referer:
Cookie:
Content-Type: application/x-www-form-urlencoded
Content-Length: 379





