
I. * Information *
==================
Name : Zenphoto 1.4.5.2 multiple vulnerabilities
Software : Zenphoto 1.4.5.2 and possibly below.
Vendor Homepage : http://www.zenphoto.org/
Vulnerability Type : SQL Injection, Reflected Cross-Site Scripting
Severity : Medium (3/5)
Advisory Reference : SOJOBO-ADV-13-01 (http://www.enkomio.com/Advisories)
Credits: Sojobo dev team
Description: Multiple vulnerabilities (SQL Injection and Reflected Cross Site Scripting) was discovered during the testing of Sojobo, Static Analysis Tool.

II. * Details *
===============
A) Cross Site Scripting in mergedRSS.php [Impact: 3/5]

Follow a trace to reach the vulnerable code.

File: zp-core\zp-extensions\mergedRSS.php
43: $MergedRSS = new MergedRSS($feeds, strip_tags(get_language_string($gallery->getTitle(), $locale)), FULLWEBPATH, strip_tags(get_language_string($gallery->getDesc(), $locale)), $feed_date);
..
46: $MergedRSS->export(false, true, 20);
..
98: public function export($return_as_string = true, $output = false, $limit = null) {
..
140: $xml .= "\t<atom:link href=\"http://".$_SERVER[&#039;HTTP_HOST&#039;].$_SERVER[&#039;PHP_SELF&#039;]."\" rel=\"self\" type=\"application/rss+xml\" />\n";
..
165: if ($output) { echo $xml; }

The variable &#039;$_SERVER[&#039;PHP_SELF&#039;]&#039; is considered a tainted input and can be manipulated in order to insert valid HTML code.


the user must specify a valid hostname, username and password database connection (can be obtained via password guessing). Due 

Follow a trace to reach the vulnerable code.

76: if(isset($_REQUEST[&#039;dbname&#039;]) || isset($_REQUEST[&#039;dbuser&#039;]) || isset($_REQUEST[&#039;dbpass&#039;]) || isset($_REQUEST[&#039;dbhost&#039;])) {
..
..
120: if(!isset($_GET[&#039;refresh&#039;])) {
..
55: function wp_query_full_array($sql,$wpconnection) {
56:    $result = mysql_query($sql,$wpconnection) or die(gettext("Query failed : ") . mysql_error());


69: }

the function &#039;sanitize&#039; is:

File: zp-core\functions-common.php
145: function sanitize($input_string, $sanitize_level=3) {
..
152: $output_string = sanitize_string($input_string, $sanitize_level);
..
177: function sanitize_string($input, $sanitize_level) {
..
192: case 3:
..
194: return strip_tags($input);

&#039;strip_tags&#039; doesn&#039;t validate against SQL Injection vulnerabilities. 

III. * Report Timeline *
========================
17 September 2013 - First contact
01 October 2013 - Fix released

IV. * About Sojobo *
====================
Sojobo allows you to find security vulnerabilities in your PHP web application source code before others do.
By using the state of the art tecniques Sojobo is able to identify the most critical vulnerabilities in your code 
and limit the number of false positives.

