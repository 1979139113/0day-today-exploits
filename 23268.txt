# Google Dork: N/A
# Date: 02/09/2015
# Exploit Author: Pham Kien Cuong (cuong.k.pham@itas.vn) & ITAS Team (www.itas.vn)
# Vendor Homepage: http://redaxscript.com/
# Software Link: http://redaxscript.com/download/releases
# Version: Redaxscript 2.2.0
# Tested on: Linux
# CVE : CVE-2015-1518
 
 
:: PROOF OF CONCEPT ::
 
POST /redaxscript/ HTTP/1.1
Host: target.local
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cookie: PHPSESSID=khtnnm1tvvk3s12if0no367872; GEAR=local-5422433b500446ead50002d4
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 96
 
search_terms=[SQL INJECTION HERE]&search_post=&token=24bcb285bc6f5c93203e4f95d9f2008331faf294&search_post=Search
 
 
 
- Vulnerable parameter: $search_terms
- Vulnerable file:      redaxscript/includes/search.php
- Vulnerable function:  search_post()
 
- Vulnerable code:
function search_post()
{
    /* clean post */
 
    if (ATTACK_BLOCKED < 10)
    {
        $search_terms = clean($_POST[&#039;search_terms&#039;], 5);
    }
 
    /* validate post */
 
    if (strlen($search_terms) < 3 || $search_terms == l(&#039;search_terms&#039;))
    {
        $error = l(&#039;input_incorrect&#039;);
    }
 
    /* query results */
 
    else
    {
        $search = array_filter(explode(&#039; &#039;, $search_terms));
        $search_keys = array_keys($search);
        $last = end($search_keys);
 
        /* query search */
 
        $query = &#039;SELECT id, title, alias, description, date, category, access FROM &#039; . PREFIX . &#039;articles WHERE (language = \&#039;&#039; . Redaxscript\Registry::get(&#039;language&#039;) . &#039;\&#039; || language = \&#039;\&#039;) && status = 1&#039;;
        if ($search)
        {
            $query .= &#039; && (&#039;;
            foreach ($search as $key => $value)
            {
 
                $query .= &#039;title LIKE \&#039;%&#039; . $value . &#039;%\&#039; || description LIKE \&#039;%&#039; . $value . &#039;%\&#039; || keywords LIKE \&#039;%&#039; . $value . &#039;%\&#039; || text LIKE \&#039;%&#039; . $value . &#039;%\&#039;&#039;;
                if ($last != $key)
                {
                    $query .= &#039; || &#039;;
                }
            }
            $query .= &#039;)&#039;;
        }
        $query .= &#039; ORDER BY date DESC LIMIT 50&#039;;
        $result = Redaxscript\Db::forTablePrefix(&#039;articles&#039;)->rawQuery($query)->findArray();
        $num_rows = count($result);
        if ($result == &#039;&#039; || $num_rows == &#039;&#039;)
        {
            $error = l(&#039;search_no&#039;);
        }
 
        /* collect output */
 
        else if ($result)
        {
            $accessValidator = new Redaxscript\Validator\Access();
            $output = &#039;<h2 class="title_content title_search_result">&#039; . l(&#039;search&#039;) . &#039;</h2>&#039;;
            $output .= form_element(&#039;fieldset&#039;, &#039;&#039;, &#039;set_search_result&#039;, &#039;&#039;, &#039;&#039;, &#039;<span class="title_content_sub title_search_result_sub">&#039; . l(&#039;articles&#039;) . &#039;</span>&#039;) . &#039;<ol class="list_search_result">&#039;;
            foreach ($result as $r)
            {
                $access = $r[&#039;access&#039;];
 
                /* if access granted */
 
                if ($accessValidator->validate($access, MY_GROUPS) === Redaxscript\Validator\Validator::PASSED)
                {
                    if ($r)
                    {
                        foreach ($r as $key => $value)
                        {
                            $$key = stripslashes($value);
                        }
                    }
 
 
                    if ($description == &#039;&#039;)
                    {
                        $description = $title;
                    }
                    $date = date(s(&#039;date&#039;), strtotime($date));
 
                    /* build route */
 
                    if ($category == 0)
                    {
                        $route = $alias;
                    }
                    else
                    {
                        $route = build_route(&#039;articles&#039;, $id);
                    }
 
                    /* collect item output */
 
                    $output .= &#039;<li class="item_search_result">&#039; . anchor_element(&#039;internal&#039;, &#039;&#039;, &#039;link_search_result&#039;, $title, $route, $description) . &#039;<span class="date_search_result">&#039; . $date . &#039;</span></li>&#039;;
                }
                else
                {
                    $counter++;
                }
            }
            $output .= &#039;</ol></fieldset>&#039;;
 
            /* handle access */
 
            if ($num_rows == $counter)
            {
                $error = l(&#039;access_no&#039;);
            }
        }
    }
 
    /* handle error */
 
    if ($error)
    {
        notification(l(&#039;something_wrong&#039;), $error);
    }
    else
    {
        echo $output;
    }
}
 
 
:: SOLUTION ::
Update to Redaxscript 2.3.0
 
::INFORMATION DISCLOSURE::
- 11/27/2014: Inform the vendor
- 11/28/2014: Vendor confirmed
- 01/29/2015: Vendor releases patch
- 01/05/2015: ITAS Team publishes information
 
 
:: REFERENCE ::
- http://www.itas.vn/news/itas-team-found-out-a-sql-injection-vulnerability-in-redaxscript-2-2-0-cms-75.html

